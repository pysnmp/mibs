#
# PySNMP MIB module BKTEL-HFC862-OVTX-V11-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/bktel/BKTEL-HFC862-OVTX-V11-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 14:09:10 2024
# On host fv-az693-600 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
TruthValue, ModuleWidthValue, NESlotValue, modules, PerceivedSeverityValue, DisplayString = mibBuilder.importSymbols("BKTEL-HFC862-BASE-MIB", "TruthValue", "ModuleWidthValue", "NESlotValue", "modules", "PerceivedSeverityValue", "DisplayString")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
experimental, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, Gauge32, Counter32, ModuleIdentity, iso, Counter64, ObjectIdentity, MibIdentifier, NotificationType, IpAddress, Integer32, NotificationType, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "experimental", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "Gauge32", "Counter32", "ModuleIdentity", "iso", "Counter64", "ObjectIdentity", "MibIdentifier", "NotificationType", "IpAddress", "Integer32", "NotificationType", "Bits", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ovtx = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101))
ovtxCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1))
ovtxStates = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2))
ovtxConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3))
ovtxControl = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4))
ovtxMeasuringValues = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5))
ovtxDisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6))
class AGCmode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("modeAgcOff", 1), ("modeUnmodulatedAgcOn", 2), ("modeModulatedAgcOn", 3))

class SatAGCmode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("satAgcOff", 1), ("satAgcOn", 2))

class RedundancyMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("modeActiveLowOutput", 1), ("modeActiveHighOutput", 2), ("modeNominalMasterIrreversible", 3), ("modeNominalMasterFallback", 4), ("modeRedundantSlave", 5))

class RedundancyMask(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("maskAlarmsOnly", 1), ("maskAlarmsAndWarnings", 2), ("maskSpecialAdjusted", 3))

class LaserOutputMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("laserShutdown", 1), ("laserActive", 2), ("laserShutdownOnMaskedError", 3))

class CsoRegulationMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("csoRegModeChannelControlled", 1), ("csoRegModePilotControlled", 2))

class RegulationState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("regulationStateUnknownOrNotSupported", 1), ("regulationStateOutputpowerBased", 2), ("regulationStateCsoBasedRough", 3), ("regulationStateCsoBasedFine", 4), ("regulationStatePilotBased", 5))

class RfInputCapabilities(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rfInputCatvOnlySupported", 1), ("rfInputSatOnlySupported", 2), ("rfInputCatvAndSatSupported", 3))

class RfInputAlarmMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("alarmEnableAll", 1), ("alarmCatvEnableSatDisable", 2), ("alarmSatEnableCatvDisable", 3))

class LnbSupplyValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("lnbSupplyOff", 1), ("lnbSupply14V", 2), ("lnbSupply18V", 3), ("lnbSupply14V_22kHz", 4), ("lnbSupply18V_22kHz", 5))

class LnbSupplySupportedValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("notSupported", 1), ("lnbSupply14V18VSwitchSupported", 2), ("lnbSupply14V18VAnd22kHzSwitchSupported", 3))

class SbsSuppressionModeValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("modeStandard", 1), ("modeCatvOnly", 2))

class SbsFiberTypeValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("typeStandardFiber", 1), ("typeSbsOptimizedFiber", 2))

class SbsFiberLengthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("length10km", 1), ("length25km", 2), ("length40km", 3), ("length65km", 4))

class NESlotWriteValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-1, 99)

ovtxCommonNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonNumberOfModules.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonNumberOfModules.setDescription('Number of modules in table.')
ovtxCommonTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2), )
if mibBuilder.loadTexts: ovtxCommonTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonTable.setDescription('The table contains all modules of the OVTX-type in the NE')
ovtxCommonEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxCommonEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonEntry.setDescription('Common-Values for a module.')
ovtxNESlot = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 1), NESlotValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxNESlot.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxNESlot.setDescription('The slot number of the chassis for which this\n        entry contains management information.\n        Equal to: modOVTXv11UniqueID')
ovtxCommonType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonType.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonType.setDescription('The type of physical module. modSlotEmpty indicates\n         an empty slot.  A Value of modSlotUnknown indicates\n         that the type of module is unknown.')
ovtxCommonDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxCommonDescr.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonDescr.setDescription('A textual description of the module.\n        If not available, this Value should be\n        set to a zero length string.')
ovtxCommonFirmwareId = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonFirmwareId.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxCommonFirmwareId.setDescription('The firmware Id of the module.')
ovtxCommonModuleWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 1, 2, 1, 5), ModuleWidthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxCommonModuleWidth.setStatus('optional')
if mibBuilder.loadTexts: ovtxCommonModuleWidth.setDescription('The width of the module in multiples of slots (1, 2, ...)')
ovtxMeasuringValuesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1), )
if mibBuilder.loadTexts: ovtxMeasuringValuesTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMeasuringValuesTable.setDescription('')
ovtxMeasuringValuesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxMeasuringValuesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMeasuringValuesEntry.setDescription('Common-Values for a module.')
ovtxOmiMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOmiMeasuredLoLo.setDescription('Measured-OMI offset low alarm threshold in steps of 0.1dB (CATV input).')
ovtxOmiMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOmiMeasuredLo.setDescription('Measured-OMI offset low warning threshold in steps of 0.1dB (CATV input).')
ovtxOmiMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxOmiMeasuredValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOmiMeasuredValue.setDescription('The offset from nominal OMI in steps of 0.1dB (CATV input).\n                If AGC is on this parameter is equal to ovtxConfigurationOmi.\n                If AGC is off this paramters shows the Measured-OMI for the adjusted gain.')
ovtxOmiMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOmiMeasuredHi.setDescription('Measured-OMI offset high warning threshold in steps of 0.1dB (CATV input).')
ovtxOmiMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOmiMeasuredHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOmiMeasuredHiHi.setDescription('Measured-OMI offset high alarm threshold in steps of 0.1dB (CATV input).')
ovtxRfGainMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfGainMeasuredLoLo.setDescription('Measured-Rf-Gain offset low alarm threshold in steps of 0.1dB (CATV input).')
ovtxRfGainMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfGainMeasuredLo.setDescription('Measured-Rf-Gain offset low warning threshold in steps of 0.1dB (CATV input).')
ovtxRfGainMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxRfGainMeasuredValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfGainMeasuredValue.setDescription('The offset from nominal gain in steps of 0.1dB (CATV input).\n                If AGC is off this parameter is equal to ovtxConfigurationRfGain.\n                If AGC is on this paramters shows the Measured-Rf-Gain for the adjusted omi.')
ovtxRfGainMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfGainMeasuredHi.setDescription('Measured-Rf-Gain offset high warning threshold in steps of 0.1dB (CATV input).')
ovtxRfGainMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfGainMeasuredHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfGainMeasuredHiHi.setDescription('Measured-Rf-Gain offset high alarm threshold in steps of 0.1dB (CATV input).')
ovtxLaserCurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxLaserCurrentRelLoLo.setDescription('Relative laser current low alarm threshold in steps of 0.1%.')
ovtxLaserCurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxLaserCurrentRelLo.setDescription('Relative laser current low warning threshold in steps of 0.1%.')
ovtxLaserCurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxLaserCurrentRelValue.setDescription('The laser current relative to the current at begin of life in steps of 0.1%.')
ovtxLaserCurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxLaserCurrentRelHi.setDescription('Relative laser current high warning threshold in steps of 0.1%.')
ovtxLaserCurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxLaserCurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxLaserCurrentRelHiHi.setDescription('Relative laser current high alarm threshold in steps of 0.1%.')
ovtxTecCurrentRelLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTecCurrentRelLoLo.setDescription('Thermo-electric-cooler current low alarm threshold in steps of 0.1%.')
ovtxTecCurrentRelLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTecCurrentRelLo.setDescription('Thermo-electric-cooler current low warning threshold in steps of 0.1%.')
ovtxTecCurrentRelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTecCurrentRelValue.setDescription('The thermo-electric-cooler current relative to\n                     its absolute high alarm threshold in steps of 0.1%.')
ovtxTecCurrentRelHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTecCurrentRelHi.setDescription('Thermo-electric-cooler current high warning threshold in steps of 0.1%.')
ovtxTecCurrentRelHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTecCurrentRelHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTecCurrentRelHiHi.setDescription('Thermo-electric-cooler current high alarm threshold in steps of 0.1%.')
ovtxOutputPowerLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOutputPowerLoLo.setDescription('Output power low alarm threshold in steps of 0.1dBm.')
ovtxOutputPowerLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOutputPowerLo.setDescription('Output power low warning threshold in steps of 0.1dBm.')
ovtxOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxOutputPowerValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOutputPowerValue.setDescription('Output power in steps of 0.1dBm.')
ovtxOutputPowerHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOutputPowerHi.setDescription('Output power high warning threshold in steps of 0.1dBm.')
ovtxOutputPowerHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxOutputPowerHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxOutputPowerHiHi.setDescription('Output power high alarm threshold in steps of 0.1dBm.')
ovtxPlus3p3VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus3p3VLoLo.setDescription('The +3.3V supply voltage low alarm threshold in steps of 0.1V.')
ovtxPlus3p3VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus3p3VLo.setDescription('The +3.3V supply voltage low warning threshold in steps of 0.1V.')
ovtxPlus3p3VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus3p3VValue.setDescription('The +3.3V supply voltage in steps of 0.1V.')
ovtxPlus3p3VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus3p3VHi.setDescription('The +3.3V supply voltage high warning threshold in steps of 0.1V.')
ovtxPlus3p3VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus3p3VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus3p3VHiHi.setDescription('The +3.3V supply voltage high alarm threshold in steps of 0.1V.')
ovtxPlus5VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus5VLoLo.setDescription('The +5V supply voltage low alarm threshold in steps of 0.1V.')
ovtxPlus5VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus5VLo.setDescription('The +5V supply voltage low warning threshold in steps of 0.1V.')
ovtxPlus5VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus5VValue.setDescription('The +5V supply voltage in steps of 0.1V.')
ovtxPlus5VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus5VHi.setDescription('The +5V supply voltage high warning threshold in steps of 0.1V.')
ovtxPlus5VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus5VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus5VHiHi.setDescription('The +5V supply voltage high alarm threshold in steps of 0.1V.')
ovtxPlus12VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus12VLoLo.setDescription('The +12V supply voltage low alarm threshold in steps of 0.1V.')
ovtxPlus12VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus12VLo.setDescription('The +12V supply voltage low warning threshold in steps of 0.1V.')
ovtxPlus12VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus12VValue.setDescription('The +12V supply voltage in steps of 0.1V.')
ovtxPlus12VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus12VHi.setDescription('The +12V supply voltage high warning threshold in steps of 0.1V.')
ovtxPlus12VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus12VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus12VHiHi.setDescription('The +12V supply voltage high alarm threshold in steps of 0.1V.')
ovtxPlus24VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus24VLoLo.setDescription('The +24V supply voltage low alarm threshold in steps of 0.1V.')
ovtxPlus24VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus24VLo.setDescription('The +24V supply voltage low warning threshold in steps of 0.1V.')
ovtxPlus24VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus24VValue.setDescription('The +24V supply voltage in steps of 0.1V.')
ovtxPlus24VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus24VHi.setDescription('The +24V supply voltage high warning threshold in steps of 0.1V.')
ovtxPlus24VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxPlus24VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxPlus24VHiHi.setDescription('The +24V supply voltage high alarm threshold in steps of 0.1V.')
ovtxMinus5VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus5VLoLo.setDescription('The -5V supply voltage low alarm threshold in steps of 0.1V.')
ovtxMinus5VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus5VLo.setDescription('The -5V supply voltage low warning threshold in steps of 0.1V.')
ovtxMinus5VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus5VValue.setDescription('The -5V supply voltage in steps of 0.1V.')
ovtxMinus5VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus5VHi.setDescription('The -5V supply voltage high warning threshold in steps of 0.1V.')
ovtxMinus5VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus5VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus5VHiHi.setDescription('The -5V supply voltage high alarm threshold in steps of 0.1V.')
ovtxMinus12VLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus12VLoLo.setDescription('The -12V supply voltage low alarm threshold in steps of 0.1V.')
ovtxMinus12VLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus12VLo.setDescription('The -12V supply voltage low warning threshold in steps of 0.1V.')
ovtxMinus12VValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus12VValue.setDescription('The -12V supply voltage in steps of 0.1V.')
ovtxMinus12VHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus12VHi.setDescription('The -12V supply voltage high warning threshold in steps of 0.1V.')
ovtxMinus12VHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxMinus12VHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxMinus12VHiHi.setDescription('The -12V supply voltage high alarm threshold in steps of 0.1V.')
ovtxTemperatureLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTemperatureLoLo.setDescription('The module temperature low alarm threshold in steps of 0.1 celsius degrees.')
ovtxTemperatureLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTemperatureLo.setDescription('The module temperature low warning threshold in steps of 0.1 celsius degrees.')
ovtxTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTemperatureValue.setDescription('The module temperature in steps of 0.1 celsius degrees.')
ovtxTemperatureHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTemperatureHi.setDescription('The module temperature high warning threshold in steps of 0.1 celsius degrees.')
ovtxTemperatureHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxTemperatureHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxTemperatureHiHi.setDescription('The module temperature high alarm threshold in steps of 0.1 celsius degrees.')
ovtxRfInputLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfInputLoLo.setDescription('RfInput (total rms) low alarm threshold in steps of 0.1 dBm (CATV input).')
ovtxRfInputLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfInputLo.setDescription('RfInput (total rms) low warning threshold in steps of 0.1 dBm (CATV input).')
ovtxRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxRfInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfInputValue.setDescription('RfInput (total rms) in steps of 0.1 dBm (CATV input).')
ovtxRfInputHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 64), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfInputHi.setDescription('RfInput (total rms) high warning threshold in steps of 0.1 dBm (CATV input).')
ovtxRfInputHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxRfInputHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxRfInputHiHi.setDescription('RfInput (total rms) high alarm threshold in steps of 0.1 dBm (CATV input).')
ovtxSatRfInputLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfInputLoLo.setDescription('RfInput (total rms) low alarm threshold in steps of 0.1 dBm (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfInputLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 67), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfInputLo.setDescription('RfInput (total rms) low warning threshold in steps of 0.1 dBm (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatRfInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfInputValue.setDescription('RfInput (total rms) in steps of 0.1 dBm (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfInputHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 69), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfInputHi.setDescription('RfInput (total rms) high warning threshold in steps of 0.1 dBm (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfInputHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 70), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfInputHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfInputHiHi.setDescription('RfInput (total rms) high alarm threshold in steps of 0.1 dBm (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatOmiMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 71), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLoLo.setDescription('Measured-OMI offset low alarm threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatOmiMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatOmiMeasuredLo.setDescription('Measured-OMI offset low warning threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatOmiMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatOmiMeasuredValue.setDescription('The offset from nominal OMI in steps of 0.1dB (SAT input).\n           If SAT AGC is on this parameter is equal to ovtxConfigurationSatOmi.\n           If SAT AGC is off this paramters shows the measured-OMI for the adjusted gain.\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatOmiMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 74), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHi.setDescription('Measured-OMI offset high warning threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatOmiMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 75), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatOmiMeasuredHiHi.setDescription('Measured-OMI offset high alarm threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfGainMeasuredLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 76), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLoLo.setDescription('Measured-Rf-Gain offset low alarm threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfGainMeasuredLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 77), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredLo.setDescription('Measured-Rf-Gain offset low warning threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfGainMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredValue.setDescription('The offset from nominal gain in steps of 0.1dB (SAT input).\n           If AGC is off this parameter is equal to ovtxConfigurationSatRfGain.\n           If AGC is on this paramters shows the measured-Rf-Gain for the adjusted omi.\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfGainMeasuredHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 79), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHi.setDescription('Measured-Rf-Gain offset high warning threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxSatRfGainMeasuredHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 5, 1, 1, 80), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxSatRfGainMeasuredHiHi.setDescription('Measured-Rf-Gain offset high alarm threshold in steps of 0.1dB (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero.')
ovtxStatesTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1), )
if mibBuilder.loadTexts: ovtxStatesTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesTable.setDescription('')
ovtxStatesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxStatesEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesEntry.setDescription('Alarms for a module.')
ovtxStatesOutputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 1), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOutputLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesOutputLow.setDescription('Optical output power low')
ovtxStatesOutputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 2), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOutputHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesOutputHigh.setDescription('Optical output power high')
ovtxStatesInputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 3), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInputLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesInputLow.setDescription('RF input power low (CATV input)')
ovtxStatesLaserAging = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 4), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserAging.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesLaserAging.setDescription('The laser is aging')
ovtxStatesTecHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 5), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTecHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesTecHigh.setDescription('Laser cooler limit reached')
ovtxStatesLaserTempLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 6), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserTempLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesLaserTempLow.setDescription('Laser temperature low')
ovtxStatesLaserTempHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 7), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserTempHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesLaserTempHigh.setDescription('Laser temperature high')
ovtxStatesOmiOrRfgainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 8), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainLow.setDescription('Omi or rf-gain (depending on mode) low (CATV input)')
ovtxStatesOmiOrRfgainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 9), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesOmiOrRfgainHigh.setDescription('Omi or rf-gain (depending on mode) high (CATV input)')
ovtxStatesPowerSupplyLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 10), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPowerSupplyLeft.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPowerSupplyLeft.setDescription('The left (looking from front) power supply unit fails')
ovtxStatesPowerSupplyRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 11), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPowerSupplyRight.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPowerSupplyRight.setDescription('The right (looking from front) power supply unit fails')
ovtxStatesFanLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 12), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesFanLeft.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesFanLeft.setDescription('The left (looking from front) fan unit fails')
ovtxStatesFanRight = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 13), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesFanRight.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesFanRight.setDescription('The right (looking from front) fan unit fails')
ovtxStatesTemperatureLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 14), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTemperatureLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesTemperatureLow.setDescription('Device internal temperature low')
ovtxStatesTemperatureHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 15), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesTemperatureHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesTemperatureHigh.setDescription('Device internal temperature high')
ovtxStatesPlus3p3VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 16), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus3p3VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus3p3VLow.setDescription('3.3 Volt supply low')
ovtxStatesPlus3p3VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 17), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus3p3VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus3p3VHigh.setDescription('3.3 Volt supply high')
ovtxStatesPlus5VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 18), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus5VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus5VLow.setDescription('5 Volt supply low')
ovtxStatesPlus5VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 19), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus5VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus5VHigh.setDescription('5 Volt supply high')
ovtxStatesPlus12VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 20), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus12VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus12VLow.setDescription('12 Volt supply low')
ovtxStatesPlus12VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 21), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus12VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus12VHigh.setDescription('12 Volt supply high')
ovtxStatesPlus24VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 22), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus24VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus24VLow.setDescription('24 Volt supply low')
ovtxStatesPlus24VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 23), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesPlus24VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesPlus24VHigh.setDescription('24 Volt supply high')
ovtxStatesMinus5VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 24), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus5VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesMinus5VLow.setDescription('-5 Volt supply low')
ovtxStatesMinus5VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 25), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus5VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesMinus5VHigh.setDescription('-5 Volt supply high')
ovtxStatesMinus12VLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 26), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus12VLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesMinus12VLow.setDescription('-12 Volt supply low')
ovtxStatesMinus12VHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 27), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesMinus12VHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesMinus12VHigh.setDescription('-12 Volt supply high')
ovtxStatesLaserShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 28), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesLaserShutdown.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesLaserShutdown.setDescription('Laser is shutdown, no optical output')
ovtxStatesInitializing = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 29), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInitializing.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesInitializing.setDescription('The device is initializing')
ovtxStatesBootloader = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 30), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesBootloader.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesBootloader.setDescription('The device is running in bootloader mode\n             without a legal application software.')
ovtxStatesCommLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 31), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesCommLoss.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesCommLoss.setDescription('The NEC has lost the connection to the device.\n             Reason may be a removed or defective device.\n             Note that this state is set by the NEC and not\n             by the device')
ovtxStatesInputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 32), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInputHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesInputHigh.setDescription('RF input power high (CATV input)')
ovtxStatesRedundancySwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 33), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesRedundancySwitch.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesRedundancySwitch.setDescription('This (redundant) device has been activated (redundancy switchover)')
ovtxStatesSatInputLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 34), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatInputLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSatInputLow.setDescription('RF input power low (SAT input)\n           Only used if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports clear(5).')
ovtxStatesSatInputHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 35), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatInputHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSatInputHigh.setDescription('RF input power high (SAT input)\n           Only used if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports clear(5).')
ovtxStatesSatOmiOrRfgainLow = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 36), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainLow.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainLow.setDescription('Omi or rf-gain (depending on mode) low (SAT input)\n           Only used if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports clear(5).')
ovtxStatesSatOmiOrRfgainHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 37), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSatOmiOrRfgainHigh.setDescription('Omi or rf-gain (depending on mode) high (SAT input)\n           Only used if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports clear(5).')
ovtxStatesSatLnbShortCircuit = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 38), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSatLnbShortCircuit.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSatLnbShortCircuit.setDescription('Short-circuit at SAT LNB\n           Only used if ovtxDisplaySatLnbSupplySupported != notSupported(1), \n           otherwise always reports clear(5).')
ovtxStatesSbs1Level = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 39), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs1Level.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSbs1Level.setDescription('SBS #1 level alarm\n           Only used if ovtxDisplaySbsExtensionsSupported == true(1), \n           otherwise always reports clear(5).')
ovtxStatesSbs2Level = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 40), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs2Level.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSbs2Level.setDescription('SBS #2 level alarm\n           Only used if ovtxDisplaySbsExtensionsSupported == true(1), \n           otherwise always reports clear(5).')
ovtxStatesSbs1PllNotLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 41), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs1PllNotLocked.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSbs1PllNotLocked.setDescription('SBS #1 PLL not locked\n           Only used if ovtxDisplaySbsExtensionsSupported == true(1), \n           otherwise always reports clear(5).')
ovtxStatesSbs2PllNotLocked = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 42), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesSbs2PllNotLocked.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesSbs2PllNotLocked.setDescription('SBS #2 PLL not locked\n           Only used if ovtxDisplaySbsExtensionsSupported == true(1), \n           otherwise always reports clear(5).')
ovtxStatesInternalAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 2, 1, 1, 43), PerceivedSeverityValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxStatesInternalAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxStatesInternalAlarm.setDescription('Internal hardware failure')
ovtxControlTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1), )
if mibBuilder.loadTexts: ovtxControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxControlTable.setDescription('')
ovtxControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxControlEntry.setDescription('Alarms for a module.')
ovtxControlLaserOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 1), LaserOutputMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlLaserOutputMode.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxControlLaserOutputMode.setDescription("The output mode of the laser.\n         NOTE: The error mask used for parameter 'laserShutdownOnMaskedError(3)'\n               is the same mask used for external IO port, 'ovtxConfigurationRedundancyMask'")
ovtxControlReset = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlReset.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxControlReset.setDescription('Reset the module.')
ovtxControlModuleLedBlink = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 4, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxControlModuleLedBlink.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxControlModuleLedBlink.setDescription("Writing this variable to true(1) lets the device's\n        modul LED blink green for 10 seconds.\n        Writing this variable to false(2) stops blinking at once.\n        This variable always returns false(2) on read requests")
ovtxConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1), )
if mibBuilder.loadTexts: ovtxConfigurationTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationTable.setDescription('')
ovtxConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxConfigurationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationEntry.setDescription('')
ovtxConfigurationNESlotWrite = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 1), NESlotWriteValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationNESlotWrite.setStatus('optional')
if mibBuilder.loadTexts: ovtxConfigurationNESlotWrite.setDescription("By writing this variable a slot can be assigned\n            for devices that dont support hardware slot detection.\n            Reading '-1' means that the slot position is NOT writable.")
ovtxConfigurationModeAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 2), AGCmode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationModeAGC.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationModeAGC.setDescription('The AGC mode of the optical transmitter (CATV input).')
ovtxConfigurationOmi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOmi.setDescription('The desired offset from nominal OMI in 0.1dB units (CATV input).\n            This parameter is only used if AGC is on.')
ovtxConfigurationRfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGain.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfGain.setDescription('The desired offset from nominal gain in 0.1dB units (CATV input).\n            This parameter is only used if AGC is off.')
ovtxConfigurationSbsSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppression.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppression.setDescription('The sbs suppression in 0.1dBm units.')
ovtxConfigurationChannelDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationChannelDistance.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationChannelDistance.setDescription('The channel raster in MHz units.')
ovtxConfigurationLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationLaserFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationLaserFrequency.setDescription('The laser frequency in GHz units.')
ovtxConfigurationRfInputLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLoLo.setDescription('The rf input power low alarm limit in 0.1 dBm units')
ovtxConfigurationRfInputLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitLo.setDescription('The rf input power low warning limit in 0.1 dBm units')
ovtxConfigurationRfInputLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHi.setDescription('The rf input power high warning limit in 0.1 dBm units')
ovtxConfigurationRfInputLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfInputLimitHiHi.setDescription('The rf input power high alarm limit in 0.1 dBm units')
ovtxConfigurationRfGainMeasuredLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLoLo.setDescription('The Measured-Rf-Gain offset low alarm limit in 0.1 dB units (in AGC ON mode)')
ovtxConfigurationRfGainMeasuredLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitLo.setDescription('The Measured-Rf-Gain offset low warning limit in 0.1 dB units (in AGC ON mode)')
ovtxConfigurationRfGainMeasuredLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHi.setDescription('The Measured-Rf-Gain offset high warning limit in 0.1 dB units (in AGC ON mode)')
ovtxConfigurationRfGainMeasuredLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfGainMeasuredLimitHiHi.setDescription('The Measured-Rf-Gain offset high alarm limit in 0.1 dB units (in AGC ON mode)')
ovtxConfigurationOmiMeasuredLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLoLo.setDescription('The Measured-OMI offset low alarm limit in 0.1 dB units (in AGC OFF mode)')
ovtxConfigurationOmiMeasuredLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitLo.setDescription('The Measured-OMI offset low warning limit in 0.1 dB units(in AGC OFF mode)')
ovtxConfigurationOmiMeasuredLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHi.setDescription('The Measured-OMI offset high warning limit in 0.1 dB units(in AGC OFF mode)')
ovtxConfigurationOmiMeasuredLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOmiMeasuredLimitHiHi.setDescription('The Measured-OMI offset high alarm limit in 0.1 dB units(in AGC OFF mode)')
ovtxConfigurationOutputPwrLimitLoLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLoLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLoLo.setDescription('The output power low alarm limit in 0.1 dBm units')
ovtxConfigurationOutputPwrLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLo.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitLo.setDescription('The output power low warning limit in 0.1 dBm units')
ovtxConfigurationOutputPwrLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHi.setDescription('The output power high warning limit in 0.1 dBm units')
ovtxConfigurationOutputPwrLimitHiHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHiHi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationOutputPwrLimitHiHi.setDescription('The output power high alarm limit in 0.1 dBm units')
ovtxConfigurationRedundancyMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 24), RedundancyMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMode.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMode.setDescription("The device's redundancy mode.")
ovtxConfigurationRedundancyMask = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 25), RedundancyMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMask.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRedundancyMask.setDescription("The device's redundancy mask setings.")
ovtxConfigurationCsoRegulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 26), CsoRegulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationCsoRegulationMode.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationCsoRegulationMode.setDescription('The desired CSO regulation mode of the optical transmitter.\n           Only usable if ovtxDisplayExtendedCapabilities == true(1), \n           otherwise always reports csoRegModeChannelControlled(1)')
ovtxConfigurationSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSlope.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSlope.setDescription('The desired slope in 0.1 dB units (CATV input).\n           Only usable if ovtxDisplayExtendedCapabilities == true(1), \n           otherwise always reports zero')
ovtxConfigurationFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationFiberLength.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationFiberLength.setDescription('The optical fiber length in meter units.\n           Only usable if ovtxDisplayExtendedCapabilities == true(1), \n           otherwise always reports zero')
ovtxConfigurationSatModeAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 29), SatAGCmode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatModeAGC.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSatModeAGC.setDescription('The AGC mode of the optical transmitter (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports satAgcOff(1)')
ovtxConfigurationSatOmi = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatOmi.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSatOmi.setDescription('The desired offset from nominal OMI in 0.1dB units (SAT input).\n           This parameter is only used if AGC is on.\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero')
ovtxConfigurationSatRfGain = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatRfGain.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSatRfGain.setDescription('The desired offset from nominal gain in 0.1dB units (SAT input).\n           This parameter is only used if AGC is off.\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero')
ovtxConfigurationSatSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatSlope.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSatSlope.setDescription('The desired slope in 0.1 dB units (SAT input).\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero')
ovtxConfigurationRfInputAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 33), RfInputAlarmMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationRfInputAlarmMode.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationRfInputAlarmMode.setDescription('The RF input alarm mode (Can be used to disable alarms of unused RF inputs)\n           Only usable if ovtxDisplayRfInputCapabilities == rfInputCatvAndSatSupported(3), \n           otherwise always reports alarmEnableAll(1)')
ovtxConfigurationSatLnbSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 34), LnbSupplyValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSatLnbSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSatLnbSupply.setDescription('SAT LNB supply control.\n          This feature is not supported by all transmitter devices,\n          see ovtxDisplaySatLnbSupplySupported')
ovtxConfigurationSbsSuppressionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 35), SbsSuppressionModeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppressionMode.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSbsSuppressionMode.setDescription('SBS suppression mode.\n          This feature is not supported by all transmitter devices,\n          see ovtxDisplaySbsSuppressionModeSupported')
ovtxConfigurationSbsFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 36), SbsFiberTypeValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberType.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberType.setDescription('SBS fiber type.\n          This feature is not supported by all transmitter devices,\n          see ovtxDisplaySbsFiberParametersSupported')
ovtxConfigurationSbsFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 3, 1, 1, 37), SbsFiberLengthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberLength.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxConfigurationSbsFiberLength.setDescription('SBS suppression mode.\n          This feature is not supported by all transmitter devices,\n          see ovtxDisplaySbsFiberParametersSupported')
ovtxDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1), )
if mibBuilder.loadTexts: ovtxDisplayTable.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayTable.setDescription('')
ovtxDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1), ).setIndexNames((0, "BKTEL-HFC862-OVTX-V11-MIB", "ovtxNESlot"))
if mibBuilder.loadTexts: ovtxDisplayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayEntry.setDescription('')
ovtxDisplayRfInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRfInputValue.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayRfInputValue.setDescription('RfInput (total rms) in steps of 0.1 dBm.')
ovtxDisplayLaserFrequencyMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMin.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMin.setDescription('The minimum adjustable laser frequency in GHz units.')
ovtxDisplayLaserFrequencyMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMax.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyMax.setDescription('The maximum adjustable laser frequency in GHz units.')
ovtxDisplayLaserFrequencyStep = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyStep.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayLaserFrequencyStep.setDescription('The supported laser frequency stepsize in GHz units.')
ovtxDisplayOmiNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayOmiNominal.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayOmiNominal.setDescription('The nominal OMI in 0.1 percent units (CATV input)')
ovtxDisplaySatOmiNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySatOmiNominal.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplaySatOmiNominal.setDescription('The nominal OMI in 0.1 percent units (SAT input)\n           Only usable if ovtxDisplayRfInputCapabilities != rfInputCatvOnlySupported(1), \n           otherwise always reports zero')
ovtxDisplayRegulationState = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 7), RegulationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRegulationState.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayRegulationState.setDescription('The transmitters current regulation state\n           Only usable if ovtxDisplayExtendedCapabilities == true(1),\n           otherwise always reports regulationStateUnknownOrNotSupported(1)')
ovtxDisplayExtendedCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayExtendedCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayExtendedCapabilities.setDescription('Returns true(1) if the transmitter supports the extended features\n             represented by the variables ovtxConfigurationCsoRegulationMode,\n             ovtxConfigurationSlope and ovtxConfigurationFiberLength')
ovtxDisplayRfInputCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 9), RfInputCapabilities()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplayRfInputCapabilities.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplayRfInputCapabilities.setDescription('Returns the transmitter supported RF input capabilities')
ovtxDisplaySatLnbSupplySupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 10), LnbSupplySupportedValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySatLnbSupplySupported.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplaySatLnbSupplySupported.setDescription('Returns the supported SAT LNB supply features')
ovtxDisplaySbsExtensionsSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsExtensionsSupported.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplaySbsExtensionsSupported.setDescription('Returns true(1) if the transmitter supports the extended SBS alarm features')
ovtxDisplaySbsSuppressionModeSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsSuppressionModeSupported.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplaySbsSuppressionModeSupported.setDescription('Returns true(1) if the transmitter supports the SbsSuppressionMode configuration feature')
ovtxDisplaySbsFiberParametersSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 7501, 1, 2, 101, 6, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ovtxDisplaySbsFiberParametersSupported.setStatus('mandatory')
if mibBuilder.loadTexts: ovtxDisplaySbsFiberParametersSupported.setDescription('Returns true(1) if the transmitter supports the SbsFiber configuration feature')
mibBuilder.exportSymbols("BKTEL-HFC862-OVTX-V11-MIB", ovtxPlus3p3VHi=ovtxPlus3p3VHi, ovtxTemperatureHi=ovtxTemperatureHi, SbsFiberLengthValue=SbsFiberLengthValue, ovtxConfigurationTable=ovtxConfigurationTable, ovtxSatRfInputValue=ovtxSatRfInputValue, ovtxDisplayRfInputCapabilities=ovtxDisplayRfInputCapabilities, ovtxSatRfGainMeasuredHiHi=ovtxSatRfGainMeasuredHiHi, ovtxStatesBootloader=ovtxStatesBootloader, ovtxOmiMeasuredValue=ovtxOmiMeasuredValue, ovtxPlus24VLoLo=ovtxPlus24VLoLo, ovtxStatesSbs2Level=ovtxStatesSbs2Level, ovtxConfiguration=ovtxConfiguration, ovtxMinus12VLoLo=ovtxMinus12VLoLo, ovtxSatRfInputHi=ovtxSatRfInputHi, ovtxLaserCurrentRelValue=ovtxLaserCurrentRelValue, ovtxRfInputLoLo=ovtxRfInputLoLo, ovtxConfigurationRfGainMeasuredLimitHiHi=ovtxConfigurationRfGainMeasuredLimitHiHi, RfInputAlarmMode=RfInputAlarmMode, ovtxStatesSatInputLow=ovtxStatesSatInputLow, ovtxDisplayExtendedCapabilities=ovtxDisplayExtendedCapabilities, ovtxConfigurationOutputPwrLimitLo=ovtxConfigurationOutputPwrLimitLo, RedundancyMask=RedundancyMask, ovtxOmiMeasuredHiHi=ovtxOmiMeasuredHiHi, NESlotWriteValue=NESlotWriteValue, ovtxStatesSbs1Level=ovtxStatesSbs1Level, ovtxOmiMeasuredLoLo=ovtxOmiMeasuredLoLo, ovtxMinus5VLoLo=ovtxMinus5VLoLo, ovtxStatesSatOmiOrRfgainHigh=ovtxStatesSatOmiOrRfgainHigh, ovtxConfigurationRfGain=ovtxConfigurationRfGain, ovtxRfGainMeasuredLoLo=ovtxRfGainMeasuredLoLo, ovtxCommonEntry=ovtxCommonEntry, ovtxSatRfGainMeasuredValue=ovtxSatRfGainMeasuredValue, ovtxOutputPowerLo=ovtxOutputPowerLo, ovtxRfGainMeasuredHiHi=ovtxRfGainMeasuredHiHi, ovtxCommonNumberOfModules=ovtxCommonNumberOfModules, ovtxMinus12VHiHi=ovtxMinus12VHiHi, ovtxRfInputHi=ovtxRfInputHi, ovtxLaserCurrentRelLoLo=ovtxLaserCurrentRelLoLo, LnbSupplyValue=LnbSupplyValue, ovtxPlus24VLo=ovtxPlus24VLo, ovtxCommonTable=ovtxCommonTable, ovtxRfInputValue=ovtxRfInputValue, ovtxStatesLaserShutdown=ovtxStatesLaserShutdown, ovtxControlModuleLedBlink=ovtxControlModuleLedBlink, ovtxConfigurationSbsSuppression=ovtxConfigurationSbsSuppression, ovtxConfigurationChannelDistance=ovtxConfigurationChannelDistance, ovtxConfigurationOmi=ovtxConfigurationOmi, ovtxOutputPowerHi=ovtxOutputPowerHi, ovtxStates=ovtxStates, ovtxTecCurrentRelHi=ovtxTecCurrentRelHi, ovtxPlus3p3VHiHi=ovtxPlus3p3VHiHi, ovtxDisplayLaserFrequencyStep=ovtxDisplayLaserFrequencyStep, ovtxSatOmiMeasuredHiHi=ovtxSatOmiMeasuredHiHi, ovtxConfigurationRfGainMeasuredLimitHi=ovtxConfigurationRfGainMeasuredLimitHi, ovtxControlLaserOutputMode=ovtxControlLaserOutputMode, ovtxStatesInputLow=ovtxStatesInputLow, ovtxPlus24VValue=ovtxPlus24VValue, ovtxStatesFanRight=ovtxStatesFanRight, ovtxDisplayOmiNominal=ovtxDisplayOmiNominal, ovtxDisplaySatOmiNominal=ovtxDisplaySatOmiNominal, ovtxPlus3p3VLoLo=ovtxPlus3p3VLoLo, ovtxMinus5VHiHi=ovtxMinus5VHiHi, ovtxStatesInitializing=ovtxStatesInitializing, ovtxStatesRedundancySwitch=ovtxStatesRedundancySwitch, ovtxOutputPowerValue=ovtxOutputPowerValue, ovtxDisplaySbsExtensionsSupported=ovtxDisplaySbsExtensionsSupported, ovtxLaserCurrentRelHiHi=ovtxLaserCurrentRelHiHi, SbsSuppressionModeValue=SbsSuppressionModeValue, ovtxTemperatureValue=ovtxTemperatureValue, ovtxOutputPowerHiHi=ovtxOutputPowerHiHi, ovtxMinus12VValue=ovtxMinus12VValue, ovtxSatOmiMeasuredLo=ovtxSatOmiMeasuredLo, ovtxConfigurationOutputPwrLimitLoLo=ovtxConfigurationOutputPwrLimitLoLo, ovtxSatOmiMeasuredHi=ovtxSatOmiMeasuredHi, ovtxTemperatureLoLo=ovtxTemperatureLoLo, ovtxConfigurationRfInputLimitLo=ovtxConfigurationRfInputLimitLo, ovtxStatesPlus12VLow=ovtxStatesPlus12VLow, ovtxSatOmiMeasuredValue=ovtxSatOmiMeasuredValue, ovtxConfigurationSatSlope=ovtxConfigurationSatSlope, ovtxPlus24VHi=ovtxPlus24VHi, ovtxConfigurationOmiMeasuredLimitHi=ovtxConfigurationOmiMeasuredLimitHi, ovtxPlus12VValue=ovtxPlus12VValue, SbsFiberTypeValue=SbsFiberTypeValue, ovtxPlus12VHiHi=ovtxPlus12VHiHi, ovtxStatesPlus5VHigh=ovtxStatesPlus5VHigh, ovtxStatesInputHigh=ovtxStatesInputHigh, ovtxStatesOmiOrRfgainHigh=ovtxStatesOmiOrRfgainHigh, LaserOutputMode=LaserOutputMode, ovtxPlus5VLoLo=ovtxPlus5VLoLo, ovtxStatesPlus24VHigh=ovtxStatesPlus24VHigh, ovtxConfigurationSatModeAGC=ovtxConfigurationSatModeAGC, ovtxCommonType=ovtxCommonType, ovtxPlus5VHi=ovtxPlus5VHi, ovtxTemperatureHiHi=ovtxTemperatureHiHi, ovtxConfigurationOmiMeasuredLimitLo=ovtxConfigurationOmiMeasuredLimitLo, ovtxSatRfGainMeasuredLo=ovtxSatRfGainMeasuredLo, ovtxStatesFanLeft=ovtxStatesFanLeft, ovtxControl=ovtxControl, ovtxStatesPowerSupplyRight=ovtxStatesPowerSupplyRight, ovtxConfigurationRedundancyMode=ovtxConfigurationRedundancyMode, ovtxStatesPlus24VLow=ovtxStatesPlus24VLow, ovtxSatRfInputHiHi=ovtxSatRfInputHiHi, AGCmode=AGCmode, ovtxCommonDescr=ovtxCommonDescr, ovtxPlus12VLo=ovtxPlus12VLo, ovtxMinus12VLo=ovtxMinus12VLo, ovtxControlEntry=ovtxControlEntry, ovtxConfigurationLaserFrequency=ovtxConfigurationLaserFrequency, ovtxDisplayLaserFrequencyMax=ovtxDisplayLaserFrequencyMax, ovtxLaserCurrentRelHi=ovtxLaserCurrentRelHi, ovtxConfigurationSatLnbSupply=ovtxConfigurationSatLnbSupply, ovtxMeasuringValuesEntry=ovtxMeasuringValuesEntry, ovtxStatesPlus12VHigh=ovtxStatesPlus12VHigh, RedundancyMode=RedundancyMode, ovtxSatRfInputLo=ovtxSatRfInputLo, ovtxDisplayRfInputValue=ovtxDisplayRfInputValue, ovtxStatesTemperatureLow=ovtxStatesTemperatureLow, ovtxTecCurrentRelLo=ovtxTecCurrentRelLo, ovtxPlus3p3VLo=ovtxPlus3p3VLo, ovtxControlTable=ovtxControlTable, ovtxConfigurationCsoRegulationMode=ovtxConfigurationCsoRegulationMode, ovtxPlus3p3VValue=ovtxPlus3p3VValue, ovtxConfigurationSlope=ovtxConfigurationSlope, ovtxOmiMeasuredLo=ovtxOmiMeasuredLo, ovtxConfigurationSbsFiberLength=ovtxConfigurationSbsFiberLength, ovtxConfigurationRedundancyMask=ovtxConfigurationRedundancyMask, ovtxMeasuringValuesTable=ovtxMeasuringValuesTable, ovtxConfigurationOutputPwrLimitHi=ovtxConfigurationOutputPwrLimitHi, ovtxLaserCurrentRelLo=ovtxLaserCurrentRelLo, ovtxConfigurationEntry=ovtxConfigurationEntry, ovtxSatRfGainMeasuredLoLo=ovtxSatRfGainMeasuredLoLo, ovtxMinus5VHi=ovtxMinus5VHi, ovtxStatesMinus12VHigh=ovtxStatesMinus12VHigh, ovtxStatesSatOmiOrRfgainLow=ovtxStatesSatOmiOrRfgainLow, ovtxDisplayTable=ovtxDisplayTable, ovtxStatesMinus5VLow=ovtxStatesMinus5VLow, ovtxPlus24VHiHi=ovtxPlus24VHiHi, ovtxRfInputLo=ovtxRfInputLo, ovtxConfigurationRfInputLimitHiHi=ovtxConfigurationRfInputLimitHiHi, ovtxStatesSbs2PllNotLocked=ovtxStatesSbs2PllNotLocked, ovtxStatesMinus12VLow=ovtxStatesMinus12VLow, ovtxStatesLaserAging=ovtxStatesLaserAging, ovtxStatesEntry=ovtxStatesEntry, ovtxDisplaySbsFiberParametersSupported=ovtxDisplaySbsFiberParametersSupported, SatAGCmode=SatAGCmode, ovtxConfigurationSbsFiberType=ovtxConfigurationSbsFiberType, ovtxStatesSatLnbShortCircuit=ovtxStatesSatLnbShortCircuit, ovtxRfGainMeasuredHi=ovtxRfGainMeasuredHi, ovtxPlus5VValue=ovtxPlus5VValue, ovtxStatesSbs1PllNotLocked=ovtxStatesSbs1PllNotLocked, ovtxConfigurationOmiMeasuredLimitLoLo=ovtxConfigurationOmiMeasuredLimitLoLo, ovtxDisplayLaserFrequencyMin=ovtxDisplayLaserFrequencyMin, ovtxSatRfGainMeasuredHi=ovtxSatRfGainMeasuredHi, ovtxConfigurationOutputPwrLimitHiHi=ovtxConfigurationOutputPwrLimitHiHi, ovtxConfigurationRfInputAlarmMode=ovtxConfigurationRfInputAlarmMode, ovtxDisplaySbsSuppressionModeSupported=ovtxDisplaySbsSuppressionModeSupported, ovtxCommonFirmwareId=ovtxCommonFirmwareId, ovtxPlus5VHiHi=ovtxPlus5VHiHi, ovtxOutputPowerLoLo=ovtxOutputPowerLoLo, ovtxRfGainMeasuredValue=ovtxRfGainMeasuredValue, ovtxStatesSatInputHigh=ovtxStatesSatInputHigh, ovtxTecCurrentRelLoLo=ovtxTecCurrentRelLoLo, ovtxStatesPlus3p3VLow=ovtxStatesPlus3p3VLow, ovtxStatesMinus5VHigh=ovtxStatesMinus5VHigh, ovtxStatesOutputHigh=ovtxStatesOutputHigh, ovtxDisplayRegulationState=ovtxDisplayRegulationState, ovtxRfInputHiHi=ovtxRfInputHiHi, ovtxConfigurationFiberLength=ovtxConfigurationFiberLength, ovtxPlus12VHi=ovtxPlus12VHi, ovtxConfigurationRfGainMeasuredLimitLo=ovtxConfigurationRfGainMeasuredLimitLo, ovtxStatesPlus3p3VHigh=ovtxStatesPlus3p3VHigh, ovtxStatesPlus5VLow=ovtxStatesPlus5VLow, ovtxStatesCommLoss=ovtxStatesCommLoss, ovtxConfigurationRfInputLimitHi=ovtxConfigurationRfInputLimitHi, ovtxDisplay=ovtxDisplay, ovtxStatesTable=ovtxStatesTable, ovtxDisplayEntry=ovtxDisplayEntry, RegulationState=RegulationState, ovtxConfigurationSatOmi=ovtxConfigurationSatOmi, ovtxControlReset=ovtxControlReset, ovtxConfigurationSbsSuppressionMode=ovtxConfigurationSbsSuppressionMode, ovtxConfigurationNESlotWrite=ovtxConfigurationNESlotWrite, ovtxConfigurationOmiMeasuredLimitHiHi=ovtxConfigurationOmiMeasuredLimitHiHi, ovtxOmiMeasuredHi=ovtxOmiMeasuredHi, ovtxTecCurrentRelHiHi=ovtxTecCurrentRelHiHi, ovtxStatesPowerSupplyLeft=ovtxStatesPowerSupplyLeft, ovtxPlus5VLo=ovtxPlus5VLo, ovtxMinus12VHi=ovtxMinus12VHi, ovtxStatesTecHigh=ovtxStatesTecHigh, ovtxStatesTemperatureHigh=ovtxStatesTemperatureHigh, ovtxCommonModuleWidth=ovtxCommonModuleWidth, ovtxPlus12VLoLo=ovtxPlus12VLoLo, ovtxRfGainMeasuredLo=ovtxRfGainMeasuredLo, ovtxDisplaySatLnbSupplySupported=ovtxDisplaySatLnbSupplySupported, ovtxConfigurationRfGainMeasuredLimitLoLo=ovtxConfigurationRfGainMeasuredLimitLoLo, ovtxStatesLaserTempHigh=ovtxStatesLaserTempHigh, CsoRegulationMode=CsoRegulationMode, ovtxStatesOmiOrRfgainLow=ovtxStatesOmiOrRfgainLow, ovtxSatOmiMeasuredLoLo=ovtxSatOmiMeasuredLoLo, ovtxMinus5VValue=ovtxMinus5VValue, ovtxConfigurationSatRfGain=ovtxConfigurationSatRfGain, LnbSupplySupportedValue=LnbSupplySupportedValue, ovtxConfigurationModeAGC=ovtxConfigurationModeAGC, ovtxStatesLaserTempLow=ovtxStatesLaserTempLow, ovtxCommon=ovtxCommon, ovtxMeasuringValues=ovtxMeasuringValues, ovtx=ovtx, ovtxTecCurrentRelValue=ovtxTecCurrentRelValue, ovtxTemperatureLo=ovtxTemperatureLo, ovtxSatRfInputLoLo=ovtxSatRfInputLoLo, RfInputCapabilities=RfInputCapabilities, ovtxStatesInternalAlarm=ovtxStatesInternalAlarm, ovtxMinus5VLo=ovtxMinus5VLo, ovtxStatesOutputLow=ovtxStatesOutputLow, ovtxNESlot=ovtxNESlot, ovtxConfigurationRfInputLimitLoLo=ovtxConfigurationRfInputLimitLoLo)
