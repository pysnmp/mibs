#
# PySNMP MIB module LLDP-EXT-PNO-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/lldp_pno.mib
# Produced by pysmi-1.1.12 at Tue May 28 12:07:25 2024
# On host fv-az1490-484 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
lldpExtensions, lldpPortConfigEntry, lldpRemIndex, lldpRemTimeMark, lldpRemLocalPortNum, lldpLocPortNum = mibBuilder.importSymbols("LLDP-MIB", "lldpExtensions", "lldpPortConfigEntry", "lldpRemIndex", "lldpRemTimeMark", "lldpRemLocalPortNum", "lldpLocPortNum")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, Counter32, ModuleIdentity, Unsigned32, TimeTicks, Bits, ObjectIdentity, NotificationType, Gauge32, IpAddress, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "Counter32", "ModuleIdentity", "Unsigned32", "TimeTicks", "Bits", "ObjectIdentity", "NotificationType", "Gauge32", "IpAddress", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
lldpXPnoMIB = ModuleIdentity((1, 0, 8802, 1, 1, 2, 1, 5, 3791))
lldpXPnoMIB.setRevisions(('2006-03-09 00:00', '2006-02-28 00:00', '2005-08-31 00:00', '2005-05-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: lldpXPnoMIB.setRevisionsDescriptions(('MRRT status added', '\r\n\t\t\t\tadded MRP UUID information, port status values and\r\n\t\t\t\tnaming of tables changed\r\n\t\t\t', 'added RT port status', 'initial version',))
if mibBuilder.loadTexts: lldpXPnoMIB.setLastUpdated('200603090000Z')
if mibBuilder.loadTexts: lldpXPnoMIB.setOrganization('PROFIBUS International (PNO)')
if mibBuilder.loadTexts: lldpXPnoMIB.setContactInfo('\r\n\t\t\t\tURL: http://www.profibus.com\r\n\t\t\t\temail: info@profibus.com\r\n\t\t\t\tPostal: Haid-und-Neu-Strasse 7\r\n\t\t\t\tD-76131 Karlsruhe\r\n\t\t\t\tTel: ++49 721 9658 - 590\r\n\t\t\t')
if mibBuilder.loadTexts: lldpXPnoMIB.setDescription('\r\n\t\t\t\tThe LLDP Management Information Base extension module\r\n\t\t\t\tfor PROFINET organizationally defined discovery\tinformation.\r\n\t\t\t\tCopyright (C) PROFIBUS Nutzerorganisation e.V. (2005).\r\n\t\t\t')
lldpXPnoObjects = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1))
lldpXPnoConfig = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1))
lldpXPnoLocalData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2))
lldpXPnoRemoteData = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3))
lldpXPnoConfigTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1), )
if mibBuilder.loadTexts: lldpXPnoConfigTable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigTable.setDescription('\r\n\t\t\t\tA table that controls selection of LLDP\r\n\t\t\t\tTLVs to be transmitted on individual ports.\r\n\t\t\t')
lldpXPnoConfigEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1, 1), )
lldpPortConfigEntry.registerAugmentions(("LLDP-EXT-PNO-MIB", "lldpXPnoConfigEntry"))
lldpXPnoConfigEntry.setIndexNames(*lldpPortConfigEntry.getIndexNames())
if mibBuilder.loadTexts: lldpXPnoConfigEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigEntry.setDescription('\r\n\t\t\t\tLLDP configuration information that controls the\r\n\t\t\t\ttransmission of PNO organizationally defined TLVs\r\n\t\t\t\ton LLDP transmission capable ports.\r\n\t\t\t\tThis configuration object augments the\r\n\t\t\t\tlldpPortConfigEntry of the LLDP-MIB, therefore it\r\n\t\t\t\tis only present along with the port configuration\r\n\t\t\t\tdefined by the associated lldpPortConfigEntry\r\n\t\t\t\tentry.\r\n\t\t\t\tEach active lldpXPnoConfigEntry must be restored\r\n\t\t\t\tfrom non-volatile storage (along with the\r\n\t\t\t\tcorresponding\r\n\t\t\t\tlldpPortConfigEntry) after a re-initialization of\r\n\t\t\t\tthe management system.\r\n\t\t\t')
lldpXPnoConfigSPDTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXPnoConfigSPDTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigSPDTxEnable.setDescription("\r\n\t\t\t\tThe lldpXPnoConfigSPDTxEnable, which is defined as\r\n\t\t\t\ta truth value and configured by the network\r\n\t\t\t\tmanagement,\r\n\t\t\t\tdetermines whether the PNO organizationally defined\r\n\t\t\t\tsignal propagation delay TLV transmission is\r\n\t\t\t\tallowed on a given LLDP transmission capable port.\r\n\t\t\t\tThe signal propagation delay is composed of the\r\n\t\t\t\tport transmission delay, the port receiving delay and\r\n\t\t\t\tthe line delay. These values can't be transmitted\r\n\t\t\t\tindependently of each other.\r\n\t\t\t\tThe value of this object must be restored from nonvolatile\r\n\t\t\t\tstorage after a re-initialization of the management\r\n\t\t\t\tsystem.\r\n\t\t\t")
lldpXPnoConfigPortStatusTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXPnoConfigPortStatusTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigPortStatusTxEnable.setDescription('\r\n\t\t\t\tThe lldpXPnoConfigPortStatusTxEnable, which is\r\n\t\t\t\tdefined as a truth value and configured by the network\r\n\t\t\t\tmanagement,\tdetermines whether the PNO organizationally \r\n\t\t\t\tdefined\tRT port status TLV transmission is allowed on a\r\n\t\t\t\tgiven LLDP transmission capable port.\r\n\t\t\t\tThe value of this object must be restored from nonvolatile\r\n\t\t\t\tstorage after a re-initialization of the management\r\n\t\t\t\tsystem.\r\n\t\t\t')
lldpXPnoConfigAliasTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXPnoConfigAliasTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigAliasTxEnable.setDescription('\r\n\t\t\t\tThe lldpXPnoConfigAliasTxEnable, which is defined\r\n\t\t\t\tas a truth value and configured by the network\r\n\t\t\t\tmanagement, determines whether the PNO organizationally \r\n\t\t\t\tdefined alias TLV (chassisId) transmission is allowed on a\r\n\t\t\t\tgiven LLDP transmission capable port.\r\n\t\t\t\tThe value of this object must be restored from nonvolatile\r\n\t\t\t\tstorage after a re-initialization of the management\r\n\t\t\t\tsystem.\r\n')
lldpXPnoConfigMrpTxEnable = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 1, 1, 1, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpXPnoConfigMrpTxEnable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigMrpTxEnable.setDescription('\r\n\t\t\t\tThe lldpXPnoConfigMrpTxEnable, which is defined as\r\n\t\t\t\ta truth value and configured by the network\r\n\t\t\t\tmanagement, determines whether the PNO organizationally \r\n\t\t\t\tdefined MRP TLV transmission is allowed on a given\r\n\t\t\t\tLLDP transmission capable port.\r\n\t\t\t\tThe value of this object must be restored from nonvolatile\r\n\t\t\t\tstorage after a re-initialization of the management\tsystem.\r\n\t\t\t')
lldpXPnoLocTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1), )
if mibBuilder.loadTexts: lldpXPnoLocTable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocTable.setDescription('\r\n\t\t\t\tThis table contains one row per port for PNO\r\n\t\t\t\torganizationally defined LLDP extension on the\r\n\t\t\t\tlocal system known to this agent.\r\n\t\t\t')
lldpXPnoLocEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpLocPortNum"))
if mibBuilder.loadTexts: lldpXPnoLocEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocEntry.setDescription('\r\n\t\t\t\tAdditional information about a particular port\r\n\t\t\t\tcomponent.\r\n\t\t\t\tThis object is indexed by the lldpLocPortNum\r\n\t\t\t\tof the LLDP-MIB, therefore it is only present\r\n\t\t\t\talong with the port entry defined by the\r\n\t\t\t\tassociated lldpLocPortEntry entry.\r\n\t\t\t\tEach active lldpXPnoLocEntry must be restored\r\n\t\t\t\tfrom non-volatile storage (along with the\r\n\t\t\t\tcorresponding lldpLocPortEntry) after a\r\n\t\t\t\tre-initialization of the management system.\r\n\t\t\t')
lldpXPnoLocLPDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 1), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocLPDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocLPDValue.setDescription('\r\n\t\t\t\tThis integer value represents the line propagation\r\n\t\t\t\tdelay in nanoseconds which was measured by the\r\n\t\t\t\tlocal system on the corresponding port.\r\n\t\t\t\tA value of zero shall be used if the system either\r\n\t\t\t\tcould not accomplish the measurement or does not\r\n\t\t\t\tsupport such a measurement.\r\n')
lldpXPnoLocPortTxDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortTxDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortTxDValue.setDescription('\r\n\t\t\t\tThis integer value represents the PortTxDelay\r\n\t\t\t\tin nanoseconds which was measured by the local\r\n\t\t\t\tsystem on the corresponding port.\r\n\t\t\t\tA value of zero shall be used if the system either\r\n\t\t\t\tcould not accomplish the measurement or does not\r\n\t\t\t\tsupport such a measurement.\r\n\t\t\t')
lldpXPnoLocPortRxDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortRxDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortRxDValue.setDescription('\r\nThis integer value represents the PortRxDelay\r\nin nanoseconds which was measured by the local\r\nsystem on the corresponding port.\r\nA value of zero shall be used if the system either\r\ncould not accomplish the measurement or does not\r\nsupport such a measurement.\r\n')
lldpXPnoLocPortStatusRT2 = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortStatusRT2.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortStatusRT2.setDescription("\r\n\t\t\t\tThis value represents the status of the \r\n\t\t\t\tcorresponding port of the local system according to RT class 2.\r\n\t\t\t\tA value of off(0) means that there isn't any RT2\r\n\t\t\t\tcapability available for this port. When the port\r\n\t\t\t\tis configured for RT2 mode, but the mode isn't active\r\n\t\t\t\tyet the value will be configured(1). If the RT2 mode is\r\n\t\t\t\tconfigured for this port and the mode is active,\r\n\t\t\t\tthe value will be running(2).\r\n\t\t\t")
lldpXPnoLocPortStatusRT3 = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("up", 2), ("down", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortStatusRT3.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortStatusRT3.setDescription("\r\n\t\t\t\tThis value represents the status of the\tcorresponding\r\n\t\t\t\tport of the local system according to RT class 3.\r\n\t\t\t\tA value of off(0) means that there isn't any RT3\r\n\t\t\t\tcapability available for this port. When the port\r\n\t\t\t\tis configured for RT3 mode, but the mode isn't active\r\n\t\t\t\tyet the value will be configured(1).\r\n\t\t\t\tWhen the port is ready for transmission and\r\n\t\t\t\treception of RT3 traffic, the port status will be running(4).\r\n")
lldpXPnoLocPortNoS = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortNoS.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortNoS.setDescription("\r\n\t\t\t\tThe local PROFINET NameofStation. If the station\r\n\t\t\t\tisn't configured yet, the value of this object will be\r\n\t\t\t\tthe MAC address of the device as a string.\r\n\t\t\t")
lldpXPnoLocPortMrpUuId = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortMrpUuId.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortMrpUuId.setDescription("\r\n\t\t\t\tThe UUID of the MRP domain to which this port\r\n\t\t\t\tbelongs to. \r\n\t\t\t\tIf the port doesn't belong to a MRP domain, the\r\n\t\t\t\tvalue must be NIL ('0000000000000000').\r\n\t\t\t")
lldpXPnoLocPortMrrtStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoLocPortMrrtStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocPortMrrtStatus.setDescription("\r\n\t\t\t\tThis object reports the status of the MRRT entity\r\n\t\t\t\tof the corresponding port.\r\n\t\t\t\tA value of off(0) means that there isn't any MRRT\r\n\t\t\t\tcapability available for this port or it is\r\n\t\t\t\tswitched off.\r\n\t\t\t\tThe value configured(1) indicates that MRRT is\r\n\t\t\t\tconfigured for the port. \r\n\t\t\t\tWhen MRRT is active on the port, the value will be up(2).\r\n\t\t\t")
lldpXPnoRemTable = MibTable((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1), )
if mibBuilder.loadTexts: lldpXPnoRemTable.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemTable.setDescription('\r\n\t\t\t\tThis table contains one or more rows per physical network\r\n\t\t\t\tconnection known to this agent. The agent may wish to\r\n\t\t\t\tensure that only one lldpXPnoRemEntry is present\r\n\t\t\t\tfor each local port, or it may choose to maintain\r\n\t\t\t\tmultiple lldpXPnoRemEntries for the same local port.\r\n\t\t\t')
lldpXPnoRemEntry = MibTableRow((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1), ).setIndexNames((0, "LLDP-MIB", "lldpRemTimeMark"), (0, "LLDP-MIB", "lldpRemLocalPortNum"), (0, "LLDP-MIB", "lldpRemIndex"))
if mibBuilder.loadTexts: lldpXPnoRemEntry.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemEntry.setDescription('\r\n\t\t\t\tEach entry represents the received information of the\r\n\t\t\t\tcommunication partner on this physical connection.\r\n\t\t\t\tThe entries feature multiple indices from the\r\n\t\t\t\tlldpRemEntry of the LLDP-MIB, therefore it is\r\n\t\t\t\tonly present along with the description defined\r\n\t\t\t\tby the associated lldpRemEntry entry.\r\n\t\t\t')
lldpXPnoRemLPDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 1), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemLPDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemLPDValue.setDescription('\r\n\t\t\t\tThis integer value represents the line propagation\r\n\t\t\t\tdelay in nanoseconds which was measured by the\r\n\t\t\t\tremote system on the corresponding port.\r\n\t\t\t\tA value of zero shall be used if the remote system\r\n\t\t\t\teither could not accomplish the measurement or does not\r\n\t\t\t\tsupport such a measurement.\r\n\t\t\t')
lldpXPnoRemPortTxDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 2), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortTxDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortTxDValue.setDescription('\r\n\t\t\t\tThis integer value represents the PortTxDelay in\r\n\t\t\t\tnanoseconds which was measured by the remote\r\n\t\t\t\tsystem on the corresponding port.\r\n\t\t\t\tA value of zero shall be used if the remote system\r\n\t\t\t\teither could not accomplish the measurement or does not\r\n\t\t\t\tsupport such a measurement.\r\n\t\t\t')
lldpXPnoRemPortRxDValue = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 3), Unsigned32()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortRxDValue.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortRxDValue.setDescription('\r\n\t\t\t\tThis integer value represents the PortRxDelay in\r\n\t\t\t\tnanoseconds which was measured by the remote\r\n\t\t\t\tsystem on the corresponding port.\r\n\t\t\t\tA value of zero shall be used if the remote system\r\n\t\t\t\teither could not accomplish the measurement or does not\r\n\t\t\t\tsupport such a measurement.\r\n\t\t\t')
lldpXPnoRemPortStatusRT2 = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortStatusRT2.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortStatusRT2.setDescription("\r\n\t\t\t\tThis value represents the status of the corresponding\r\n\t\t\t\tport of the remote system according to RT class 2.\r\n\t\t\t\tA value of off(0) means that there isn't any RT2\r\n\t\t\t\tcapability available for this port. When the port\r\n\t\t\t\tis configured for RT2 mode, but the mode isn't active\r\n\t\t\t\tyet the value will be configured(1). If the RT2 mode is\r\n\t\t\t\tconfigured for this port and the mode is active,\r\n\t\t\t\tthe value will be running(2).\r\n\t\t\t")
lldpXPnoRemPortStatusRT3 = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("up", 2), ("down", 3), ("running", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortStatusRT3.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortStatusRT3.setDescription("\r\n\t\t\t\tThis value represents the status of the corresponding\r\n\t\t\t\tport of the remote system according to RT class 3.\r\n\t\t\t\tA value of off(0) means that there isn't any RT3\r\n\t\t\t\tcapability available for this port. When the port\r\n\t\t\t\tis configured for RT3 mode, but the mode isn't active\r\n\t\t\t\tyet the value will be configured(1).\r\n\t\t\t\tWhen the port is ready for transmission and reception \r\n\t\t\t\tof RT3 traffic, the port status will be running(4).\r\n\t\t\t")
lldpXPnoRemPortNoS = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortNoS.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortNoS.setDescription("\r\n\t\t\t\tThe PROFINET NameofStation of the remote partner.\r\n\t\t\t\tIf the station isn't configured yet, the value of this\r\n\t\t\t\tobject will be the MAC address of the device as a string.\r\n\t\t\t")
lldpXPnoRemPortMrpUuId = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortMrpUuId.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortMrpUuId.setDescription("\r\n\t\t\t\tThe UUID of the MRP domain to which the\r\n\t\t\t\tcorresponding port\r\n\t\t\t\tof the remote system belongs to. If the port\r\n\t\t\t\tdoesn't belong\r\n\t\t\t\tto a MRP domain, the value must be NIL\r\n\t\t\t\t('0000000000000000').\r\n\t\t\t")
lldpXPnoRemPortMrrtStatus = MibTableColumn((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("configured", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lldpXPnoRemPortMrrtStatus.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemPortMrrtStatus.setDescription("\r\n\t\t\t\tThis object reports the status of the MRRT entity\r\n\t\t\t\tof the corresponding port.\r\n\t\t\t\tA value of off(0) means that there isn't any MRRT\r\n\t\t\t\tcapability available for this port or it is\r\n\t\t\t\tswitched off.\r\n\t\t\t\tThe value configured(1) indicates that MRRT is\r\n\t\t\t\tconfigured for the port. When MRRT is active on\r\n\t\t\t\tthe port, the value will be up(2).\r\n\t\t\t")
lldpXPnoConformance = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2))
lldpXPnoCompliances = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 1))
lldpXPnoGroups = MibIdentifier((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 2))
lldpXPnoCompliance = ModuleCompliance((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 1, 1)).setObjects(("LLDP-EXT-PNO-MIB", "lldpXPnoConfigGroup"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocGroup"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemGroup"), ("LLDP-EXT-PNO-MIB", "lldpXPnoMRPGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXPnoCompliance = lldpXPnoCompliance.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoCompliance.setDescription('\r\n\t\t\t\tThe compliance statement for SNMP entities which\r\n\t\t\t\timplement the PNO organizationally defined LLDP\r\n\t\t\t\textension MIB.\r\n\t\t\t')
lldpXPnoConfigGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 2, 1)).setObjects(("LLDP-EXT-PNO-MIB", "lldpXPnoConfigSPDTxEnable"), ("LLDP-EXT-PNO-MIB", "lldpXPnoConfigPortStatusTxEnable"), ("LLDP-EXT-PNO-MIB", "lldpXPnoConfigAliasTxEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXPnoConfigGroup = lldpXPnoConfigGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoConfigGroup.setDescription('\r\n\t\t\t\tThe collection of objects which are used to configure\r\n\t\t\t\tthe PNO organizationally defined LLDP extension\r\n\t\t\t\timplementation behavior.\r\n\t\t\t\tThis group is mandatory for agents which implement\r\n\t\t\t\tthe PNO organizationally defined LLDP extension, because\r\n\t\t\t\tthe information about the signal propagation delay is \r\n\t\t\t\tnecessary to configure PROFINET domains.\r\n\t\t\t')
lldpXPnoLocGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 2, 2)).setObjects(("LLDP-EXT-PNO-MIB", "lldpXPnoLocLPDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortTxDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortRxDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortStatusRT2"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortStatusRT3"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortNoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXPnoLocGroup = lldpXPnoLocGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoLocGroup.setDescription('\r\n\t\t\t\tThe collection of objects which are used to\r\n\t\t\t\tconfigure the PNO organizationally defined \r\n\t\t\t\tLLDP extension implementation behavior.\r\n\t\t\t\tThis group is mandatory for agents which implement\r\n\t\t\t\tthe PNO organizationally defined LLDP extension, \r\n\t\t\t\tbecause the information about the signal propagation\r\n\t\t\t\tdelay is necessary to configure PROFINET domains.\r\n\t\t\t')
lldpXPnoRemGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 2, 3)).setObjects(("LLDP-EXT-PNO-MIB", "lldpXPnoRemLPDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortTxDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortRxDValue"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortStatusRT2"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortStatusRT3"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortNoS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXPnoRemGroup = lldpXPnoRemGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoRemGroup.setDescription('\r\n\t\t\t\tThe collection of objects which are used to\r\n\t\t\t\tconfigure the PNO organizationally defined \r\n\t\t\t\tLLDP extension implementation behavior.\r\n\t\t\t\tThis group is mandatory for agents which implement\r\n\t\t\t\tthe PNO organizationally defined LLDP extension, \r\n\t\t\t\tbecause the information about the signal propagation \r\n\t\t\t\tdelay is necessary to configure PROFINET domains.\r\n\t\t\t')
lldpXPnoMRPGroup = ObjectGroup((1, 0, 8802, 1, 1, 2, 1, 5, 3791, 2, 2, 4)).setObjects(("LLDP-EXT-PNO-MIB", "lldpXPnoConfigMrpTxEnable"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortMrpUuId"), ("LLDP-EXT-PNO-MIB", "lldpXPnoLocPortMrrtStatus"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortMrpUuId"), ("LLDP-EXT-PNO-MIB", "lldpXPnoRemPortMrrtStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lldpXPnoMRPGroup = lldpXPnoMRPGroup.setStatus('current')
if mibBuilder.loadTexts: lldpXPnoMRPGroup.setDescription('\r\n\t\t\t\tThe collection of objects which are used to\r\n\t\t\t\tconfigure the PNO organizationally defined \r\n\t\t\t\tLLDP extension implementation behavior.\r\n\t\t\t\tThis group is mandatory for agents which implement\r\n\t\t\t\tthe PNO organizationally defined LLDP extension, \r\n\t\t\t\tbecause the information about the signal propagation \r\n\t\t\t\tdelay is necessary to configure PROFINET domains.\r\n\t\t\t')
mibBuilder.exportSymbols("LLDP-EXT-PNO-MIB", lldpXPnoLocLPDValue=lldpXPnoLocLPDValue, lldpXPnoRemPortStatusRT3=lldpXPnoRemPortStatusRT3, lldpXPnoRemGroup=lldpXPnoRemGroup, lldpXPnoGroups=lldpXPnoGroups, lldpXPnoLocPortStatusRT2=lldpXPnoLocPortStatusRT2, PYSNMP_MODULE_ID=lldpXPnoMIB, lldpXPnoLocPortMrpUuId=lldpXPnoLocPortMrpUuId, lldpXPnoRemTable=lldpXPnoRemTable, lldpXPnoLocPortRxDValue=lldpXPnoLocPortRxDValue, lldpXPnoLocPortStatusRT3=lldpXPnoLocPortStatusRT3, lldpXPnoObjects=lldpXPnoObjects, lldpXPnoConfigAliasTxEnable=lldpXPnoConfigAliasTxEnable, lldpXPnoLocTable=lldpXPnoLocTable, lldpXPnoLocPortMrrtStatus=lldpXPnoLocPortMrrtStatus, lldpXPnoConfigMrpTxEnable=lldpXPnoConfigMrpTxEnable, lldpXPnoRemoteData=lldpXPnoRemoteData, lldpXPnoRemEntry=lldpXPnoRemEntry, lldpXPnoCompliances=lldpXPnoCompliances, lldpXPnoConfig=lldpXPnoConfig, lldpXPnoConfigEntry=lldpXPnoConfigEntry, lldpXPnoRemPortMrpUuId=lldpXPnoRemPortMrpUuId, lldpXPnoRemPortTxDValue=lldpXPnoRemPortTxDValue, lldpXPnoRemPortNoS=lldpXPnoRemPortNoS, lldpXPnoConfigSPDTxEnable=lldpXPnoConfigSPDTxEnable, lldpXPnoConfigPortStatusTxEnable=lldpXPnoConfigPortStatusTxEnable, lldpXPnoRemPortMrrtStatus=lldpXPnoRemPortMrrtStatus, lldpXPnoMIB=lldpXPnoMIB, lldpXPnoLocPortTxDValue=lldpXPnoLocPortTxDValue, lldpXPnoLocGroup=lldpXPnoLocGroup, lldpXPnoRemLPDValue=lldpXPnoRemLPDValue, lldpXPnoConformance=lldpXPnoConformance, lldpXPnoCompliance=lldpXPnoCompliance, lldpXPnoConfigTable=lldpXPnoConfigTable, lldpXPnoLocPortNoS=lldpXPnoLocPortNoS, lldpXPnoRemPortRxDValue=lldpXPnoRemPortRxDValue, lldpXPnoConfigGroup=lldpXPnoConfigGroup, lldpXPnoLocEntry=lldpXPnoLocEntry, lldpXPnoLocalData=lldpXPnoLocalData, lldpXPnoMRPGroup=lldpXPnoMRPGroup, lldpXPnoRemPortStatusRT2=lldpXPnoRemPortStatusRT2)
