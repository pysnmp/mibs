#
# PySNMP MIB module SAEUROPE-ADMINISTRATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saeurope/SAEUROPE-ADMINISTRATION-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:02:04 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
common, = mibBuilder.importSymbols("SAEUROPE-ROOT-MIB", "common")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, IpAddress, Integer32, ModuleIdentity, ObjectIdentity, Unsigned32, Bits, TimeTicks, NotificationType, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "NotificationType", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
saEuropeAdministration = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6))
adminVendor = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminVendor.setStatus('mandatory')
if mibBuilder.loadTexts: adminVendor.setDescription('Displays the Manufacturer of the Device.\n                  Displayed in human-readable format.')
adminModelNumber = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminModelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adminModelNumber.setDescription('Displays the Model Number of the Device. \n                  Displayed in human-readable format.')
adminSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminSerialNumber.setStatus('mandatory')
if mibBuilder.loadTexts: adminSerialNumber.setDescription('Returns the Serial Number of the Device. \n                  Displayed in human-readable format.')
adminVendorInfo = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminVendorInfo.setStatus('mandatory')
if mibBuilder.loadTexts: adminVendorInfo.setDescription('Returns Vendor-specific Information.\n                  Displayed in human-readable format.')
adminAlarmDetectionControl = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("detectionDisabled", 1), ("detectionEnabled", 2), ("detectionEnabledAndRegenerate", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminAlarmDetectionControl.setStatus('mandatory')
if mibBuilder.loadTexts: adminAlarmDetectionControl.setDescription('This object is used to control the detection of alarms\n                  in this Device.\n\n                  When a threshold from either the property table or the\n                  discrete property table is crossed in a manner\n                  described by that MIB, then an alarm is said to have\n                  occurred. When the alarm is detected, an entry is\n                  placed in the alarm log table, which serves as a log\n                  of the most recent alarm events.  When an alarm is\n                  detected, then an alarm trap is also generated. A\n                  property which is not in the nominal state will have\n                  an entry in the currentAlarmTable.\n\n                  The detectionDisabled(1) value prevents the threshold\n                  detection process associated with the property table and \n                  discrete property table from running. The device will not\n                  generate alarms. The contents of the alarmLogTable,\n                  currentAlarmTable, each instance of discreteAlarmState,\n                  and each instance of currentAlarmState remain in the\n                  state prior to detectionDisabled being applied.\n\n                  The detectionEnabled(2) value permits alarm detection\n                  to run.  The detection process continues from the state\n                  the transponder was in prior to detectionDisabled being\n                  set. Alarms that occurred during detectionDisabled state \n                  are lost.\n\n                  The detectionEnabledAndRegenerate(3) value clears all alarm\n                  information and permits alarm detection to run. All alarm \n                  properties, both discrete and analog, are restored to the\n                  nominal value before alarm detection runs. Any properties\n                  which where in an alarm state to not produce a return to\n                  nominal alarm.  Setting this value clears the alarmLogTable\n                  and the currentAlarmTable.\n\n                  The detectionEnabledAndRegenerate(3) value is transient.\n                  When setting adminAlarmDetectionControl to\n                  detectionEnabledAndRegnerate(3), the response will contain\n                  detectionEnabledAndRegnerate(3). Subsequent reads of the\n                  object report detectionEnabled(2).\n\n                  Note: The detectionDisabled setting is not supported. The \n                  device will always return detectionEnabled and will only \n                  accept detectionEnabled and detectionEnabledAndRegenerate \n                  as a setting.')
adminTime = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminTime.setStatus('mandatory')
if mibBuilder.loadTexts: adminTime.setDescription('All values are signed 32 bit integers.\n                  Time since the Epoch (00:00:00 UTC, January 1, 1970),\n                  measured in seconds(POSIX).')
adminState = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("responding", 1), ("localControl", 2), ("maintenance", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminState.setStatus('mandatory')
if mibBuilder.loadTexts: adminState.setDescription('This object gives the current state of the device.\n                  The responding value informs that the device is working\n                  in normal way and it can be controlled remotely.\n                  The localControl value informs that the device is\n                  controlled locally and remote control is not possible.\n                  The maintenance value informs that the device is in\n                  maintenance mode.  It could be due to upgrading of the\n                  software.')
adminRestart = MibScalar((1, 3, 6, 1, 4, 1, 1482, 20, 1, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("warmRestart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRestart.setStatus('mandatory')
if mibBuilder.loadTexts: adminRestart.setDescription('This object is used to restart the device.')
mibBuilder.exportSymbols("SAEUROPE-ADMINISTRATION-MIB", adminTime=adminTime, adminState=adminState, saEuropeAdministration=saEuropeAdministration, adminModelNumber=adminModelNumber, adminVendor=adminVendor, adminVendorInfo=adminVendorInfo, adminSerialNumber=adminSerialNumber, adminAlarmDetectionControl=adminAlarmDetectionControl, adminRestart=adminRestart)
