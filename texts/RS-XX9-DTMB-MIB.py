#
# PySNMP MIB module RS-XX9-DTMB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-DTMB-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:40:32 2024
# On host fv-az658-333 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9Dtmb, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9Dtmb", "rsXx9MibModule")
SwitchOnOff, NotificationPriority, NotificationState, IndexTransmitter, NotificationMask, IndexAB = mibBuilder.importSymbols("RS-XX9-TC-MIB", "SwitchOnOff", "NotificationPriority", "NotificationState", "IndexTransmitter", "NotificationMask", "IndexAB")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Gauge32, Integer32, ModuleIdentity, Counter32, TimeTicks, Counter64, Unsigned32, iso, MibIdentifier, Bits, IpAddress, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Gauge32", "Integer32", "ModuleIdentity", "Counter32", "TimeTicks", "Counter64", "Unsigned32", "iso", "MibIdentifier", "Bits", "IpAddress", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsXx9DtmbMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 12))
rsXx9DtmbMibModule.setRevisions(('2015-07-06 12:00', '2015-02-27 15:00', '2014-12-22 16:00', '2014-01-30 11:00', '2013-09-02 11:00', '2013-05-29 15:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9DtmbMibModule.setRevisionsDescriptions(('fixed range of dtmbModulationTimeInterleaver\n                change labels of DtmbCodeRate\n                added dtmbStateTable, dtmbLocalizationTable, dtmbOutModulationTable\n                added dtmbTest \n                ', 'updated description texts', 'updated description texts\n                ', 'obsoleted dtmbModulationControlFrame\n                update description texts', 'updated revision with the following changes:\n                - added DTMB traps (dtmbEncoderSummary, dtmbManualConfiguration, dtmbActiveConfiguration)\n                - added dtmbStatusNotificationTable, containing current trap values\n                - added configuration parameters: InfoPacketReplacement, NetworkMode\n                - added dtmbTestCarrierPower\n                - fixed dtmbTestMode and dtmbConfigurationTpsSource', 'Preliminary release.',))
if mibBuilder.loadTexts: rsXx9DtmbMibModule.setLastUpdated('201506231100Z')
if mibBuilder.loadTexts: rsXx9DtmbMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9DtmbMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9DtmbMibModule.setDescription('This MIB defines DTMB specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX9-SMI-MIB        - mandatory for this MIB\n                - RS-XX9-TC-MIB         - mandatory for this MIB\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB')
class DtmbChannelBandwidth(TextualConvention, Integer32):
    description = 'mhz6(5)   -  6 MHz\n                mhz7(6)   -  7 MHz\n                mhz8(7)   -  8 MHz'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7))
    namedValues = NamedValues(("mhz6", 5), ("mhz7", 6), ("mhz8", 7))

class DtmbGuardInterval(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 9, 10, 11))
    namedValues = NamedValues(("undefined", 1), ("pn420", 9), ("pn595", 10), ("pn945", 11))

class DtmbModulation(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(5, 6, 7, 8, 9))
    namedValues = NamedValues(("qam16", 5), ("qam64", 6), ("qam32", 7), ("qam4", 8), ("qam4nr", 9))

class DtmbCodeRate(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 9, 10, 11))
    namedValues = NamedValues(("undefined", 1), ("fourTenth", 9), ("sixTenth", 10), ("eightTenth", 11))

rsXx9DtmbNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 0))
dtmbEncoderSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationPriority"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationState"))
if mibBuilder.loadTexts: dtmbEncoderSummary.setStatus('current')
if mibBuilder.loadTexts: dtmbEncoderSummary.setDescription('Encoder summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: fault')
dtmbManualConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationPriority"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationState"))
if mibBuilder.loadTexts: dtmbManualConfiguration.setStatus('current')
if mibBuilder.loadTexts: dtmbManualConfiguration.setDescription('Indicates whether the configured DTMB configuration\n                is consistent and valid over all three layers.\n                If an error is displayed, check whether the sum of all\n                segments over the three layers is exactly 13.\n                \n                Possible values:\n                off(2)     - \n                warning(4) - not valid\n                ok(5)      - valid\n                \n                Notification class: warning\n                ')
dtmbActiveConfiguration = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationPriority"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationState"))
if mibBuilder.loadTexts: dtmbActiveConfiguration.setStatus('current')
if mibBuilder.loadTexts: dtmbActiveConfiguration.setDescription('Indicates whether the active DTMB configuration\n                is consistent and valid over all three layers.\n                If an error is displayed, check whether the sum of all\n                segments over the three layers is exactly 13.\n                \n                Possible values:\n                off(2)     - \n                warning(4) - not valid\n                ok(5)      - valid\n                \n                Notification class: warning\n                ')
dtmbTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationPriority"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationState"))
if mibBuilder.loadTexts: dtmbTest.setStatus('current')
if mibBuilder.loadTexts: dtmbTest.setDescription('One of the test signals is activated. \n                If a test signal is activated, decoding \n                of the transmitted signal by the \n                transmitter will not be possible.\n                \n                Possible values:\n                off(2)     - no test signal generation\n                warning(4) - test signal generation is activated\n                \n                Notification class: warning\n                ')
rsXx9DtmbObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1))
dtmbStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1))
dtmbStatusNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1), )
if mibBuilder.loadTexts: dtmbStatusNotificationTable.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationTable.setDescription('The context information/configuration for the DTMB status notifications.')
dtmbStatusNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-DTMB-MIB", "dtmbStatusNotificationTxIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbStatusNotificationExcIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbStatusNotificationIdx"))
if mibBuilder.loadTexts: dtmbStatusNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationEntry.setDescription('An entry in the dtmbStatusNotificationTable.')
dtmbStatusNotificationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dtmbStatusNotificationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationTxIdx.setDescription('The transmitter index.')
dtmbStatusNotificationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dtmbStatusNotificationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationExcIdx.setDescription('This index distinguishes the exciters.\n                Necessary if you have dual drive transmitters. ')
dtmbStatusNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: dtmbStatusNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationIdx.setDescription('The notification number as below rsXx9DtmbNotifications.\n                This is a helper column and therefore not accessible.')
dtmbStatusNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dtmbEncoderSummary", 1), ("dtmbManualConfiguration", 2), ("dtmbActiveConfiguration", 3), ("dtmbTest", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbStatusNotificationName.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9DtmbNotifications.')
dtmbStatusNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 5), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbStatusNotificationMask.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationMask.setDescription('See TextualConvention for details.')
dtmbStatusNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 6), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbStatusNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationPriority.setDescription('See TextualConvention for details.')
dtmbStatusNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 1, 1, 7), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbStatusNotificationState.setStatus('current')
if mibBuilder.loadTexts: dtmbStatusNotificationState.setDescription('See TextualConvention for details.')
dtmbStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 2), )
if mibBuilder.loadTexts: dtmbStateTable.setStatus('current')
if mibBuilder.loadTexts: dtmbStateTable.setDescription('DTMB state values.')
dtmbStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-DTMB-MIB", "dtmbStatusNotificationTxIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbStatusNotificationExcIdx"))
if mibBuilder.loadTexts: dtmbStateEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbStateEntry.setDescription('An entry in the dtmbStateTable.')
dtmbStTxDelayOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 1, 2, 1, 1), Integer32()).setUnits('1/10 micro second').setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbStTxDelayOffset.setStatus('current')
if mibBuilder.loadTexts: dtmbStTxDelayOffset.setDescription('Transmitting time shift compared to other\n                transmitters in the DTMB network.\n                ')
dtmbSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2))
dtmbConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1), )
if mibBuilder.loadTexts: dtmbConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationTable.setDescription('General DTMB configuration.')
dtmbConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-DTMB-MIB", "dtmbConfigurationTxIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbConfigurationExcIdx"))
if mibBuilder.loadTexts: dtmbConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationEntry.setDescription('An entry in the dtmbConfigurationTable.')
dtmbConfigurationTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: dtmbConfigurationTxIdx.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationTxIdx.setDescription('The transmitter index.')
dtmbConfigurationExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1, 2), IndexAB())
if mibBuilder.loadTexts: dtmbConfigurationExcIdx.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationExcIdx.setDescription('This index distinguishes the exiters.\n                Necessary if you have dual drive transmitters.')
dtmbConfigurationTpsSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("mip", 2), ("manual", 3), ("sip", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbConfigurationTpsSource.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationTpsSource.setDescription('Source set for the TPS parameters (TPS = transmission parameter signaling).\n                off(1) is an undefined setting and shall not be used.\n                The following are possible sources: \n                - MIP (megaframe initialization packet), \n                - SIP (second frame initialization packet)\n                - manually selected default settings.')
dtmbConfigurationInfoPacketReplacement = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("off", 2), ("on", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbConfigurationInfoPacketReplacement.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationInfoPacketReplacement.setDescription('Controls, whether the information packets (MIP or SIP) shall \n                be contained in the outgiung datastream (off-2), or\n                replaced by null-packets (on-3). \n                ')
dtmbConfigurationNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("undefined", 1), ("mfn", 2), ("sfnMip", 3), ("sfnSip", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbConfigurationNetworkMode.setStatus('current')
if mibBuilder.loadTexts: dtmbConfigurationNetworkMode.setDescription('Used to activate time synchronization. \n                \n                MFN: The time of transmission is not controlled. \n                \n                SFN (MIP): The time of transmission of a symbol \n                is the same for all the transmitters of a \n                single-frequency network (SFN). The time of \n                transmission signaled by the Megaframe \n                Information Packet is used. \n                \n                SFN (SIP):  The time of transmission of a symbol \n                is the same for all the transmitters of a \n                single-frequency network (SFN). The time of \n                transmission signaled by the Session Initiation \n                Protocol is used.\n                ')
dtmbModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3), )
if mibBuilder.loadTexts: dtmbModulationTable.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationTable.setDescription('DTMB modulation parameters.')
dtmbModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1), )
dtmbConfigurationEntry.registerAugmentions(("RS-XX9-DTMB-MIB", "dtmbModulationEntry"))
dtmbModulationEntry.setIndexNames(*dtmbConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dtmbModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationEntry.setDescription('An entry in the dtmbModulationTable.')
dtmbModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 3), DtmbChannelBandwidth()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationChannelBandwidth.setDescription('Channel bandwidth occupied by the DTMB signal in the frequency spectrum. \n                6 MHz, 7 MHz or 8 MHz can be set. \n                The choice depends on the required bandwidth of the channel to be transmitted. ')
dtmbModulationGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 5), DtmbGuardInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationGuardInterval.setDescription('Padding mode for the guard interval. \n                The value can be changed if Manual was selected as the TPS source.')
dtmbModulationConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 6), DtmbModulation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationConstellation.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationConstellation.setDescription('Sets up the modulation mode.\n                The value can be changed if Manual was selected as the TPS source.')
dtmbModulationCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 7), DtmbCodeRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationCodeRate.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationCodeRate.setDescription('Sets the code rate. The code rate is used to set \n                the ratio of information data to (error correction values + information data). \n                4/10 provides the greatest error correction and the lowest data transfer rate \n                8/10 provides the lowest error correction and the greatest data transfer rate. \n                The value can be changed if Manual was selected as the TPS source.\n                ')
dtmbModulationTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("s240", 3), ("s720", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationTimeInterleaver.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationTimeInterleaver.setDescription('Sets the mode for the time interleaver. \n                The time interleaver distributes the payload data over \n                many symbols in order to reduce noise sensitivity. \n                The setting 720 symbols (s720-3) is recommended for \n                a high error tolerance. If, on the other hand, the resulting \n                delay is to be kept short, the setting 240 symbols (s240-2) is more suitable. \n                The value can be changed if Manual was selected as the TPS source.')
dtmbModulationControlFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 9), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationControlFrame.setStatus('obsolete')
if mibBuilder.loadTexts: dtmbModulationControlFrame.setDescription('obsolete parameter. ')
dtmbModulationCarrierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("single", 2), ("multi", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationCarrierMode.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationCarrierMode.setDescription('configures whether the signal should be transmitted in \n                Single Carrier Mode (previously: ADTB-T) or in \n                Multicarrier Mode (previously: DMB-T) with 3780 single carriers.')
dtmbModulationDualPilotTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 11), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationDualPilotTone.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationDualPilotTone.setDescription('configures whether two additional pilot signals are to be inserted into the spectrum. \n                The pilots are at +/- half symbol rate. \n                The setting can be changed here. \n                This parameter is effective only if Carrier Mode= Single has been selected.')
dtmbModulationGuardIntervalPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("variable", 2), ("constant", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbModulationGuardIntervalPN.setStatus('current')
if mibBuilder.loadTexts: dtmbModulationGuardIntervalPN.setDescription('Sets which PN sequence (pseudo random noise sequence) \n                is used for the guard interval. \n                Constant (3): The PN sequence Index 0 is always used \n                Variable (2): All PN sequences will be used. \n                ')
dtmbTestTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 4), )
if mibBuilder.loadTexts: dtmbTestTable.setStatus('current')
if mibBuilder.loadTexts: dtmbTestTable.setDescription('Configures the test mode of the exciter.')
dtmbTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 4, 1), )
dtmbConfigurationEntry.registerAugmentions(("RS-XX9-DTMB-MIB", "dtmbTestEntry"))
dtmbTestEntry.setIndexNames(*dtmbConfigurationEntry.getIndexNames())
if mibBuilder.loadTexts: dtmbTestEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbTestEntry.setDescription('An entry in the dtmbTestTable.')
dtmbTestMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("prbs", 2), ("singleCarrier", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbTestMode.setStatus('current')
if mibBuilder.loadTexts: dtmbTestMode.setDescription('sets which test signal is to be generated.\n                - Off (1): switches off test signal generation.\n                - PRBS (2): Generates a pseudo-random binary sequence insted of the payload.\n                - Single Carrier (3): Generates an unmodulated single carrier. \n                This test signal can be used to measure the phase noise of the synthesizer. \n                The phase noise must be measured via the RF Monitor Out connector (X61). \n                The cable connected to RF Out (X60) must be removed. In order to protect the amplifiers, \n                this test signal is only generated if the output of the exciter is open.')
dtmbTestCarrierPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbTestCarrierPower.setStatus('current')
if mibBuilder.loadTexts: dtmbTestCarrierPower.setDescription('sets level of the single carrier. This parameter is effective \n                only if Carrier Mode = Single has been selected. ')
dtmbLocalizationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 5), )
if mibBuilder.loadTexts: dtmbLocalizationTable.setStatus('current')
if mibBuilder.loadTexts: dtmbLocalizationTable.setDescription('DTMB localization parameters.\n                ')
dtmbLocalizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 5, 1), ).setIndexNames((0, "RS-XX9-DTMB-MIB", "dtmbConfigurationTxIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbConfigurationExcIdx"))
if mibBuilder.loadTexts: dtmbLocalizationEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbLocalizationEntry.setDescription('An entry in the dtmbLocalizationTable.')
dtmbLocalizationTxControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbLocalizationTxControl.setStatus('current')
if mibBuilder.loadTexts: dtmbLocalizationTxControl.setDescription('Description.')
dtmbLocalizationTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dtmbLocalizationTxAddress.setStatus('current')
if mibBuilder.loadTexts: dtmbLocalizationTxAddress.setDescription('Description.')
dtmbOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3))
dtmbOutModulationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1), )
if mibBuilder.loadTexts: dtmbOutModulationTable.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationTable.setDescription('Currently active DTMB modulation parameters.')
dtmbOutModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1), ).setIndexNames((0, "RS-XX9-DTMB-MIB", "dtmbConfigurationTxIdx"), (0, "RS-XX9-DTMB-MIB", "dtmbConfigurationExcIdx"))
if mibBuilder.loadTexts: dtmbOutModulationEntry.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationEntry.setDescription('An entry in the dtmbOutModulationTable.')
dtmbOutModulationChannelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 3), DtmbChannelBandwidth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationChannelBandwidth.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationChannelBandwidth.setDescription('Channel bandwidth occupied by the DTMB signal in the frequency spectrum. \n                6 MHz, 7 MHz or 8 MHz can be set. \n                The choice depends on the required bandwidth of the channel to be transmitted. ')
dtmbOutModulationGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 5), DtmbGuardInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationGuardInterval.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationGuardInterval.setDescription('Padding mode for the guard interval. \n                The value can be changed if Manual was selected as the TPS source.')
dtmbOutModulationConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 6), DtmbModulation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationConstellation.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationConstellation.setDescription('Shows the modulation mode.\n                The value can be changed if Manual was selected as the TPS source.')
dtmbOutModulationCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 7), DtmbCodeRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationCodeRate.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationCodeRate.setDescription('Shows the code rate. The code rate is used to set \n                the ratio of information data to (error correction values + information data). \n                4/10 provides the greatest error correction and the lowest data transfer rate \n                8/10 provides the lowest error correction and the greatest data transfer rate. \n                The value can be changed if Manual was selected as the TPS source.\n                ')
dtmbOutModulationTimeInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("off", 2), ("s240", 3), ("s720", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationTimeInterleaver.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationTimeInterleaver.setDescription('Shows the mode for the time interleaver. \n                The time interleaver distributes the payload data over \n                many symbols in order to reduce noise sensitivity. \n                The setting 720 symbols (s720-3) is recommended for \n                a high error tolerance. If, on the other hand, the resulting \n                delay is to be kept short, the setting 240 symbols (s240-2) is more suitable. \n                The value can be changed if Manual was selected as the TPS source.')
dtmbOutModulationCarrierMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("single", 2), ("multi", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationCarrierMode.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationCarrierMode.setDescription('Shows whether the signal should be transmitted in \n                Single Carrier Mode (previously: ADTB-T) or in \n                Multicarrier Mode (previously: DMB-T) with 3780 single carriers.')
dtmbOutModulationDualPilotTone = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 11), SwitchOnOff()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationDualPilotTone.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationDualPilotTone.setDescription('Shows whether two additional pilot signals are to be inserted into the spectrum. \n                The pilots are at +/- half symbol rate. \n                This parameter is effective only if Carrier Mode= Single has been selected.')
dtmbOutModulationGuardIntervalPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("variable", 2), ("constant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dtmbOutModulationGuardIntervalPN.setStatus('current')
if mibBuilder.loadTexts: dtmbOutModulationGuardIntervalPN.setDescription('Shows which PN sequence (pseudo random noise sequence) \n                is used for the guard interval. \n                Constant (3): The PN sequence Index 0 is always used \n                Variable (2): All PN sequences will be used. \n                ')
rsXx9DtmbConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2))
rsXx9DtmbCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 1))
dtmbBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 1, 1)).setObjects(("RS-XX9-DTMB-MIB", "dtmbObjBasic"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtmbBasicCompliance = dtmbBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: dtmbBasicCompliance.setDescription('The compliance statement for XX9000 DTMB encoding.')
rsXx9DtmbGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 2))
dtmbObjBasic = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 2, 1)).setObjects(("RS-XX9-DTMB-MIB", "dtmbConfigurationTpsSource"), ("RS-XX9-DTMB-MIB", "dtmbModulationChannelBandwidth"), ("RS-XX9-DTMB-MIB", "dtmbModulationGuardInterval"), ("RS-XX9-DTMB-MIB", "dtmbModulationConstellation"), ("RS-XX9-DTMB-MIB", "dtmbModulationCodeRate"), ("RS-XX9-DTMB-MIB", "dtmbModulationTimeInterleaver"), ("RS-XX9-DTMB-MIB", "dtmbModulationCarrierMode"), ("RS-XX9-DTMB-MIB", "dtmbModulationDualPilotTone"), ("RS-XX9-DTMB-MIB", "dtmbModulationGuardIntervalPN"), ("RS-XX9-DTMB-MIB", "dtmbStTxDelayOffset"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationChannelBandwidth"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationGuardInterval"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationConstellation"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationCodeRate"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationTimeInterleaver"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationCarrierMode"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationDualPilotTone"), ("RS-XX9-DTMB-MIB", "dtmbOutModulationGuardIntervalPN"), ("RS-XX9-DTMB-MIB", "dtmbLocalizationTxAddress"), ("RS-XX9-DTMB-MIB", "dtmbLocalizationTxControl"), ("RS-XX9-DTMB-MIB", "dtmbTestMode"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationName"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationMask"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationPriority"), ("RS-XX9-DTMB-MIB", "dtmbStatusNotificationState"), ("RS-XX9-DTMB-MIB", "dtmbConfigurationInfoPacketReplacement"), ("RS-XX9-DTMB-MIB", "dtmbConfigurationNetworkMode"), ("RS-XX9-DTMB-MIB", "dtmbTestCarrierPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtmbObjBasic = dtmbObjBasic.setStatus('current')
if mibBuilder.loadTexts: dtmbObjBasic.setDescription('Basic DTMB objects group.')
dtmbNotifyBasic = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 2, 2)).setObjects(("RS-XX9-DTMB-MIB", "dtmbEncoderSummary"), ("RS-XX9-DTMB-MIB", "dtmbManualConfiguration"), ("RS-XX9-DTMB-MIB", "dtmbActiveConfiguration"), ("RS-XX9-DTMB-MIB", "dtmbTest"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtmbNotifyBasic = dtmbNotifyBasic.setStatus('current')
if mibBuilder.loadTexts: dtmbNotifyBasic.setDescription('General DTMB notifications.')
dtmbObjBasicObsolete = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 12, 2, 2, 3)).setObjects(("RS-XX9-DTMB-MIB", "dtmbModulationControlFrame"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    dtmbObjBasicObsolete = dtmbObjBasicObsolete.setStatus('obsolete')
if mibBuilder.loadTexts: dtmbObjBasicObsolete.setDescription('absoleted DTMB objects group.')
mibBuilder.exportSymbols("RS-XX9-DTMB-MIB", dtmbStatusNotificationIdx=dtmbStatusNotificationIdx, dtmbStatusNotificationMask=dtmbStatusNotificationMask, dtmbSetup=dtmbSetup, dtmbModulationChannelBandwidth=dtmbModulationChannelBandwidth, dtmbConfigurationTxIdx=dtmbConfigurationTxIdx, dtmbEncoderSummary=dtmbEncoderSummary, dtmbModulationControlFrame=dtmbModulationControlFrame, dtmbOutModulationGuardInterval=dtmbOutModulationGuardInterval, dtmbConfigurationTable=dtmbConfigurationTable, dtmbModulationCodeRate=dtmbModulationCodeRate, dtmbOutModulationEntry=dtmbOutModulationEntry, dtmbStatusNotificationExcIdx=dtmbStatusNotificationExcIdx, dtmbLocalizationTable=dtmbLocalizationTable, dtmbTestCarrierPower=dtmbTestCarrierPower, rsXx9DtmbGroups=rsXx9DtmbGroups, dtmbOutput=dtmbOutput, dtmbConfigurationInfoPacketReplacement=dtmbConfigurationInfoPacketReplacement, dtmbStateEntry=dtmbStateEntry, rsXx9DtmbNotifications=rsXx9DtmbNotifications, DtmbModulation=DtmbModulation, dtmbActiveConfiguration=dtmbActiveConfiguration, dtmbStatus=dtmbStatus, dtmbOutModulationCodeRate=dtmbOutModulationCodeRate, dtmbStateTable=dtmbStateTable, dtmbOutModulationTable=dtmbOutModulationTable, dtmbTestTable=dtmbTestTable, dtmbModulationEntry=dtmbModulationEntry, dtmbOutModulationCarrierMode=dtmbOutModulationCarrierMode, dtmbOutModulationGuardIntervalPN=dtmbOutModulationGuardIntervalPN, rsXx9DtmbMibModule=rsXx9DtmbMibModule, dtmbManualConfiguration=dtmbManualConfiguration, dtmbOutModulationDualPilotTone=dtmbOutModulationDualPilotTone, dtmbModulationConstellation=dtmbModulationConstellation, dtmbConfigurationEntry=dtmbConfigurationEntry, dtmbModulationGuardInterval=dtmbModulationGuardInterval, dtmbLocalizationTxAddress=dtmbLocalizationTxAddress, rsXx9DtmbObjects=rsXx9DtmbObjects, DtmbGuardInterval=DtmbGuardInterval, dtmbNotifyBasic=dtmbNotifyBasic, dtmbOutModulationChannelBandwidth=dtmbOutModulationChannelBandwidth, dtmbOutModulationConstellation=dtmbOutModulationConstellation, dtmbConfigurationExcIdx=dtmbConfigurationExcIdx, dtmbObjBasic=dtmbObjBasic, dtmbObjBasicObsolete=dtmbObjBasicObsolete, rsXx9DtmbCompliances=rsXx9DtmbCompliances, dtmbStatusNotificationTable=dtmbStatusNotificationTable, dtmbTestMode=dtmbTestMode, dtmbLocalizationTxControl=dtmbLocalizationTxControl, dtmbStatusNotificationName=dtmbStatusNotificationName, dtmbStatusNotificationState=dtmbStatusNotificationState, dtmbConfigurationNetworkMode=dtmbConfigurationNetworkMode, dtmbModulationCarrierMode=dtmbModulationCarrierMode, dtmbModulationTimeInterleaver=dtmbModulationTimeInterleaver, PYSNMP_MODULE_ID=rsXx9DtmbMibModule, dtmbTestEntry=dtmbTestEntry, dtmbConfigurationTpsSource=dtmbConfigurationTpsSource, dtmbModulationDualPilotTone=dtmbModulationDualPilotTone, dtmbStatusNotificationPriority=dtmbStatusNotificationPriority, dtmbTest=dtmbTest, dtmbModulationTable=dtmbModulationTable, dtmbStatusNotificationEntry=dtmbStatusNotificationEntry, DtmbCodeRate=DtmbCodeRate, dtmbStatusNotificationTxIdx=dtmbStatusNotificationTxIdx, dtmbStTxDelayOffset=dtmbStTxDelayOffset, dtmbModulationGuardIntervalPN=dtmbModulationGuardIntervalPN, dtmbLocalizationEntry=dtmbLocalizationEntry, dtmbOutModulationTimeInterleaver=dtmbOutModulationTimeInterleaver, rsXx9DtmbConformance=rsXx9DtmbConformance, DtmbChannelBandwidth=DtmbChannelBandwidth, dtmbBasicCompliance=dtmbBasicCompliance)
