#
# PySNMP MIB module USERGROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/hirschmann/usrgrp.mib
# Produced by pysmi-1.1.12 at Fri Jul 19 10:05:38 2024
# On host fv-az1771-969 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
hmConfiguration, = mibBuilder.importSymbols("HMPRIV-MGMT-SNMP-MIB", "hmConfiguration")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, Bits, TimeTicks, ModuleIdentity, MibIdentifier, Counter64, ObjectIdentity, Counter32, Unsigned32, Gauge32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TextualConvention = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "Bits", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter64", "ObjectIdentity", "Counter32", "Unsigned32", "Gauge32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TextualConvention")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hmUserGroup = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 14, 3))
hmUserGroup.setRevisions(('2007-09-13 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hmUserGroup.setRevisionsDescriptions(('First release in SMIv2',))
if mibBuilder.loadTexts: hmUserGroup.setLastUpdated('200709131200Z')
if mibBuilder.loadTexts: hmUserGroup.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hmUserGroup.setContactInfo('Customer Support\r\n           Postal: \r\n           Hirschmann Automation and Control GmbH\r\n           Stuttgarter Str. 45-51\r\n           72654 Neckartenzlingen\r\n           Germany\r\n           Tel: +49 7127 14 1981\r\n           Web: http://www.hicomcenter.com/\r\n           E-Mail: hicomcenter@hirschmann.com')
if mibBuilder.loadTexts: hmUserGroup.setDescription('The Hirschmann Private Usergroup MIB definitions for Platform devices.')
class MemberID(TextualConvention, OctetString):
    description = 'mac address in canonical byte order.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

hmUserGroupTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 1), )
if mibBuilder.loadTexts: hmUserGroupTable.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupTable.setDescription('A list of user group definitions.')
hmUserGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 1, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmUserGroupID"))
if mibBuilder.loadTexts: hmUserGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupEntry.setDescription('user group definition')
hmUserGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUserGroupID.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupID.setDescription('The user group number identifying this instance.')
hmUserGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserGroupDescription.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupDescription.setDescription('A textual description of the user group instance.')
hmUserGroupRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserGroupRestricted.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupRestricted.setDescription('If set to true(1) any member of this group is restricted to ports\r\n                         - which have hmPortSecPermission set to group(2) and\r\n                         - the group is in hmPortSecAllowedGroupIDs.\r\n\r\n                         If set to false(2) the user may also connect to a port if permitted\r\n                         by other hmPortSecPermission settings, e.g. known(3) or world(4).\r\n\r\n                         The following access restrictions apply:\r\n\r\n                         UserRestr. UserGroupRestr. PortSecPermission  access allowed\r\n                         --------------------------------------------------------------------\r\n                          false        false            user          hmPortSecAllowedUserID\r\n                          false        false            group         hmPortSecAllowedGroupIDs\r\n                          false        false            known         any user group member\r\n                          false        false            world             yes\r\n\r\n                          true         false/true       user          hmPortSecAllowedUserID\r\n                          true         false/true       group             no\r\n                          true         false/true       known             no\r\n                          true         false/true       world             no\r\n\r\n                          false        true             user          hmPortSecAllowedUserID\r\n                          false        true             group         hmPortSecAllowedGroupIDs\r\n                          false        true             known             no\r\n                          false        true             world             no\r\n                        ')
hmUserGroupSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("portDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserGroupSecAction.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupSecAction.setDescription('This variable specifies the action which is taken if a\r\n                         user tries to connect to the given port when he is not\r\n                         allowed to do so. Setting the variable to none(1)\r\n                         disables any action. A value of trapOnly(2) generates\r\n                         a trap. Setting the value to portDisable(3) will\r\n                         send a trap, and additionally disable the port until\r\n                         it is re-enabled by management.')
hmUserGroupMemberTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 2), )
if mibBuilder.loadTexts: hmUserGroupMemberTable.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupMemberTable.setDescription('A list of users which are members of a given user group.')
hmUserGroupMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 2, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmUserGroupMemberGroupID"), (0, "USERGROUP-MIB", "hmUserGroupMemberUserID"))
if mibBuilder.loadTexts: hmUserGroupMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupMemberEntry.setDescription('An user group member entry.')
hmUserGroupMemberGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUserGroupMemberGroupID.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupMemberGroupID.setDescription('user group id of this member.')
hmUserGroupMemberUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 2, 1, 2), MemberID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUserGroupMemberUserID.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupMemberUserID.setDescription('user ID of this member.')
hmUserTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 3), )
if mibBuilder.loadTexts: hmUserTable.setStatus('current')
if mibBuilder.loadTexts: hmUserTable.setDescription('List of all user group members.')
hmUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 3, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmUserID"))
if mibBuilder.loadTexts: hmUserEntry.setStatus('current')
if mibBuilder.loadTexts: hmUserEntry.setDescription('An user entry.')
hmUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 3, 1, 1), MemberID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmUserID.setStatus('current')
if mibBuilder.loadTexts: hmUserID.setDescription('User ID.')
hmUserRestricted = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserRestricted.setStatus('current')
if mibBuilder.loadTexts: hmUserRestricted.setDescription('If set to true(1) the user may only connect to ports which\r\n                         have hmPortSecPermission set to user(1) and hmPortSecAllowedUserID\r\n                         set to hmUserID.\r\n                         If set to false(2) the user may also connect to a port if permitted\r\n                         by other hmPortSecPermission settings, e.g. group(2), known(3) or\r\n                         world(4).\r\n\r\n                         The following access restrictions apply:\r\n\r\n                         UserRestr. UserGroupRestr. PortSecPermission  access allowed\r\n                         ---------------------------------------------------------------------\r\n                          false        false            user          hmPortSecAllowedUserID\r\n                          false        false            group         hmPortSecAllowedGroupIDs\r\n                          false        false            known         any user group member\r\n                          false        false            world             yes\r\n\r\n                          true         false/true       user          hmPortSecAllowedUserID\r\n                          true         false/true       group             no\r\n                          true         false/true       known             no\r\n                          true         false/true       world             no\r\n\r\n                          false        true             user          hmPortSecAllowedUserID\r\n                          false        true             group         hmPortSecAllowedGroupIDs\r\n                          false        true             known             no\r\n                          false        true             world             no\r\n                        ')
hmPortSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 4), )
if mibBuilder.loadTexts: hmPortSecurityTable.setStatus('current')
if mibBuilder.loadTexts: hmPortSecurityTable.setDescription('List of port security entries.')
hmPortSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmPortSecSlotID"), (0, "USERGROUP-MIB", "hmPortSecPortID"))
if mibBuilder.loadTexts: hmPortSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: hmPortSecurityEntry.setDescription('A single port security entry.')
hmPortSecSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecSlotID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecSlotID.setDescription('Slot number the switch unit is plugged in.')
hmPortSecPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecPortID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecPortID.setDescription('Port number within the group.')
hmPortSecPermission = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("user", 1), ("group", 2), ("known", 3), ("world", 4), ("uplink", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecPermission.setStatus('current')
if mibBuilder.loadTexts: hmPortSecPermission.setDescription('This variable specifies the security level of the port.\r\n                         If set to user(1) only the user defined by hmPortSecAllowedUserID\r\n                         may connect to this port. In group(2) mode only members of the\r\n                         user group specified by hmPortSecAllowedGroupIDs are allowed.\r\n                         known(3) means that all users belonging to any user group\r\n                         (all known users) are accepted. Setting the value to world(4)\r\n                         disables the security features, i.e. any user is permitted.\r\n                         For backbone ports the value uplink(5) should be used.\r\n                           If a user does not match the allowed permission he is not able\r\n                         to connect to the network over this port, additionally the actions\r\n                         configured through hmPortSecAction are taken.')
hmPortSecAllowedUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 4), MemberID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecAllowedUserID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecAllowedUserID.setDescription('This variable specifies the allowed user ID if\r\n                         hmPortSecPermission has been set to user(1).')
hmPortSecAllowedGroupIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecAllowedGroupIDs.setStatus('current')
if mibBuilder.loadTexts: hmPortSecAllowedGroupIDs.setDescription('This variable specifies the allowed user groups if\r\n                         hmPortSecPermission has been set to group(2).\r\n                         Each group is represented by a single bit. If a\r\n                         group does not exist the value of the bit is ignored.')
hmPortSecConnectedUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 6), MemberID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecConnectedUserID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecConnectedUserID.setDescription('This variable reflects the user ID of a connected user\r\n                         actually seen on this port. If there is no user connected\r\n                         the value will be 0x00:00:00:00:00:00.')
hmPortSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("portDisable", 3), ("autoDisable", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecAction.setStatus('current')
if mibBuilder.loadTexts: hmPortSecAction.setDescription('This variable specifies the action which is taken if a\r\n                         user tries to connect to the given port when he is not\r\n                         allowed to do so. Setting the variable to none(1)\r\n                         disables any action. A value of trapOnly(2) generates\r\n                         a trap. Setting the value to portDisable(3) will\r\n                         send a trap, and additionally disable the port until\r\n                         it is re-enabled by management. Setting the value to\r\n                         autoDisable(3) will send a trap, and additionally\r\n                         auto-disable the port for the amount of time specified per port.')
hmPortSecAutoReconfigure = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecAutoReconfigure.setStatus('current')
if mibBuilder.loadTexts: hmPortSecAutoReconfigure.setDescription('This variable controls whether the agent should\r\n                         re-configure the port when another user with an\r\n                         incompatible user group setting has been detected.\r\n                         The default setting, true(1), should be used if a\r\n                         single user is connected to the port.\r\n                         The value false(2) might be useful if more than one\r\n                         user is connected to the port (workgroup mode).')
hmPortSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledWithWrongAddr", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecPortStatus.setStatus('current')
if mibBuilder.loadTexts: hmPortSecPortStatus.setDescription('This variable shows the current status of the port with\r\n                                         respect to port security. If the address seen on the port\r\n                                         is allowed, the status is enabled(1), if it is not allowed,\r\n                                         the status is disabled(2) if hmUserGroupSecurityAction is\r\n                                         portDisable(3), or enabledWithWrongAddr(3) if\r\n                                         hmUserGroupSecurityAction is none(1) or trapOnly(2).')
hmPortSecAllowedUserIPID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecAllowedUserIPID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecAllowedUserIPID.setDescription('This variable specifies the allowed user IP ID if\r\n                         hmPortSecPermission has been set to user(1).')
hmPortSecDynamicLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecDynamicLimit.setStatus('current')
if mibBuilder.loadTexts: hmPortSecDynamicLimit.setDescription('This variable signifies the limit of dynamically learned allowed MAC addresses\r\n             for a specific port.')
hmPortSecDynamicCount = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecDynamicCount.setStatus('current')
if mibBuilder.loadTexts: hmPortSecDynamicCount.setDescription('The current number of dynamically learned allowed MAC addresses on this port.')
hmUserGroupSecurityAction = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("portDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserGroupSecurityAction.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupSecurityAction.setDescription('This variable specifies the action which is taken if a\r\n                         user tries to connect to the given port when he is not\r\n                         allowed to do so. Setting the variable to none(1)\r\n                         disables any action. A value of trapOnly(2) generates\r\n                         a trap. Setting the value to portDisable(3) will\r\n                         send a trap, and additionally disable the port until\r\n                         it is re-enabled by management.')
hmUserGroupPortSecurityMode = MibScalar((1, 3, 6, 1, 4, 1, 248, 14, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("macAddressBased", 1), ("ipAddressBased", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmUserGroupPortSecurityMode.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupPortSecurityMode.setDescription('This variable specifies the mode of the hmPortSecurityTable.')
hmPortSecExtendedGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 14, 3, 10))
hmPortSecExtendedTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1), )
if mibBuilder.loadTexts: hmPortSecExtendedTable.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtendedTable.setDescription('List of extended port security entries.')
hmPortSecExtendedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmPortSecExtSlotID"), (0, "USERGROUP-MIB", "hmPortSecExtPortID"))
if mibBuilder.loadTexts: hmPortSecExtendedEntry.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtendedEntry.setDescription('A single extended port security entry.')
hmPortSecExtSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hmPortSecExtSlotID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtSlotID.setDescription('Slot number the switch unit is plugged in.')
hmPortSecExtPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hmPortSecExtPortID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtPortID.setDescription('Port number within the group.')
hmPortSecExtAction = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("trapOnly", 2), ("portDisable", 3))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecExtAction.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtAction.setDescription('This variable specifies the action which is taken if a\r\n                         user tries to connect to the given port when he is not\r\n                         allowed to do so. Setting the variable to none(1)\r\n                         disables any action. A value of trapOnly(2) generates\r\n                         a trap. Setting the value to portDisable(3) will\r\n                         send a trap, and additionally disable the port until\r\n                         it is re-enabled by management.')
hmPortSecExtPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("enabledWithWrongAddr", 3))).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hmPortSecExtPortStatus.setStatus('current')
if mibBuilder.loadTexts: hmPortSecExtPortStatus.setDescription('This variable shows the current status of the port with\r\n                        respect to port security. If the address seen on the port\r\n                        is allowed, the status is enabled(1), if it is not allowed,\r\n                        the status is disabled(2) if hmUserGroupSecurityAction is\r\n                        portDisable(3), or enabledWithWrongAddr(3) if\r\n         \t\t\t\thmUserGroupSecurityAction is none(1) or trapOnly(2).')
hmPortSecMultipleAdressesTable = MibTable((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2), )
if mibBuilder.loadTexts: hmPortSecMultipleAdressesTable.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMultipleAdressesTable.setDescription('List of port security entries with multiple allowed addresses.')
hmPortSecMultipleAdressesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1), ).setIndexNames((0, "USERGROUP-MIB", "hmPortSecMASlotID"), (0, "USERGROUP-MIB", "hmPortSecMAPortID"), (0, "USERGROUP-MIB", "hmPortSecMAExtendedIndex"))
if mibBuilder.loadTexts: hmPortSecMultipleAdressesEntry.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMultipleAdressesEntry.setDescription('A single port security entry with multiple allowed addresses.')
hmPortSecMASlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: hmPortSecMASlotID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMASlotID.setDescription('Slot number the switch unit is plugged in.')
hmPortSecMAPortID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: hmPortSecMAPortID.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMAPortID.setDescription('Port number within the group.')
hmPortSecMAExtendedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: hmPortSecMAExtendedIndex.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMAExtendedIndex.setDescription('Number of adresses.')
hmPortSecMAAllowedUserIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 4), MemberID()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIDs.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIDs.setDescription('This variable specifies the allowed user ID if\r\n                         hmPortSecPermission has been set to user(1).')
hmPortSecMAAllowedUserIPIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIPIDs.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIPIDs.setDescription('This variable specifies the allowed user IP ID if\r\n                         hmPortSecPermission has been set to user(1).')
hmPortSecMAAllowedUserIDMask = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 14, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48)).clone(48)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIDMask.setStatus('current')
if mibBuilder.loadTexts: hmPortSecMAAllowedUserIDMask.setDescription('The number of bits from left ro right, that are used\r\n                        from the MAC address.')
hmUserGroupEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 14, 3, 0))
if mibBuilder.loadTexts: hmUserGroupEvent.setStatus('current')
if mibBuilder.loadTexts: hmUserGroupEvent.setDescription('The events of hmUserGroup.')
hmNewUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 3, 0, 1)).setObjects(("USERGROUP-MIB", "hmPortSecConnectedUserID"))
if mibBuilder.loadTexts: hmNewUserTrap.setStatus('current')
if mibBuilder.loadTexts: hmNewUserTrap.setDescription('This trap is sent if an unknown MAC address is detected on a port.')
hmPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 3, 0, 2)).setObjects(("USERGROUP-MIB", "hmPortSecPermission"), ("USERGROUP-MIB", "hmPortSecAction"), ("USERGROUP-MIB", "hmPortSecConnectedUserID"), ("USERGROUP-MIB", "hmPortSecAllowedUserID"), ("USERGROUP-MIB", "hmPortSecAllowedUserIPID"), ("USERGROUP-MIB", "hmPortSecAllowedGroupIDs"))
if mibBuilder.loadTexts: hmPortSecurityTrap.setStatus('current')
if mibBuilder.loadTexts: hmPortSecurityTrap.setDescription('This trap is sent if a MAC address / IP address is detected on a port\r\n                      which is not acceptable for the current setting of\r\n                      hmPortSecPermission AND ...SecAction is either set to trapOnly(2)\r\n                      or portDisable(3).')
hmPortSecConfigErrorTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 14, 3, 0, 3)).setObjects(("USERGROUP-MIB", "hmPortSecConnectedUserID"))
if mibBuilder.loadTexts: hmPortSecConfigErrorTrap.setStatus('current')
if mibBuilder.loadTexts: hmPortSecConfigErrorTrap.setDescription('This trap is sent when two or more users with incompatible\r\n                      user group settings have been detected at the port.')
mibBuilder.exportSymbols("USERGROUP-MIB", hmPortSecAllowedUserIPID=hmPortSecAllowedUserIPID, hmUserGroupMemberEntry=hmUserGroupMemberEntry, hmUserTable=hmUserTable, hmPortSecAutoReconfigure=hmPortSecAutoReconfigure, hmUserGroupPortSecurityMode=hmUserGroupPortSecurityMode, hmUserGroupEvent=hmUserGroupEvent, hmUserRestricted=hmUserRestricted, hmPortSecMultipleAdressesTable=hmPortSecMultipleAdressesTable, hmPortSecConnectedUserID=hmPortSecConnectedUserID, hmUserGroupSecurityAction=hmUserGroupSecurityAction, hmUserGroupTable=hmUserGroupTable, hmUserGroupEntry=hmUserGroupEntry, hmUserGroupMemberTable=hmUserGroupMemberTable, hmPortSecMAAllowedUserIPIDs=hmPortSecMAAllowedUserIPIDs, hmPortSecExtPortStatus=hmPortSecExtPortStatus, hmUserGroupMemberUserID=hmUserGroupMemberUserID, hmPortSecMAExtendedIndex=hmPortSecMAExtendedIndex, hmPortSecDynamicLimit=hmPortSecDynamicLimit, hmUserGroupID=hmUserGroupID, hmPortSecConfigErrorTrap=hmPortSecConfigErrorTrap, hmUserID=hmUserID, hmPortSecPortID=hmPortSecPortID, hmPortSecAllowedGroupIDs=hmPortSecAllowedGroupIDs, hmPortSecDynamicCount=hmPortSecDynamicCount, MemberID=MemberID, hmPortSecExtAction=hmPortSecExtAction, hmPortSecExtendedTable=hmPortSecExtendedTable, hmUserGroupSecAction=hmUserGroupSecAction, hmUserEntry=hmUserEntry, PYSNMP_MODULE_ID=hmUserGroup, hmPortSecurityEntry=hmPortSecurityEntry, hmPortSecExtPortID=hmPortSecExtPortID, hmUserGroupDescription=hmUserGroupDescription, hmPortSecurityTable=hmPortSecurityTable, hmPortSecMultipleAdressesEntry=hmPortSecMultipleAdressesEntry, hmPortSecurityTrap=hmPortSecurityTrap, hmPortSecPortStatus=hmPortSecPortStatus, hmPortSecMAAllowedUserIDs=hmPortSecMAAllowedUserIDs, hmUserGroupMemberGroupID=hmUserGroupMemberGroupID, hmPortSecAction=hmPortSecAction, hmPortSecMAPortID=hmPortSecMAPortID, hmPortSecPermission=hmPortSecPermission, hmUserGroup=hmUserGroup, hmPortSecMAAllowedUserIDMask=hmPortSecMAAllowedUserIDMask, hmPortSecMASlotID=hmPortSecMASlotID, hmNewUserTrap=hmNewUserTrap, hmUserGroupRestricted=hmUserGroupRestricted, hmPortSecExtendedEntry=hmPortSecExtendedEntry, hmPortSecExtendedGroup=hmPortSecExtendedGroup, hmPortSecAllowedUserID=hmPortSecAllowedUserID, hmPortSecExtSlotID=hmPortSecExtSlotID, hmPortSecSlotID=hmPortSecSlotID)
