#
# PySNMP MIB module VALERE-DC-POWER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltek/VALERE-DC-POWER-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:55:35 2024
# On host fv-az530-296 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysUpTime, = mibBuilder.importSymbols("SNMPv2-MIB", "sysUpTime")
ModuleIdentity, Integer32, Counter64, Bits, IpAddress, Gauge32, MibIdentifier, ObjectIdentity, TimeTicks, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, Counter32, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Counter64", "Bits", "IpAddress", "Gauge32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "Counter32", "enterprises")
TextualConvention, AutonomousType, TestAndIncr, TimeStamp, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "AutonomousType", "TestAndIncr", "TimeStamp", "TimeInterval", "DisplayString")
vpwrDcPowerMgt = ModuleIdentity((1, 3, 6, 1, 4, 1, 13858))
if mibBuilder.loadTexts: vpwrDcPowerMgt.setLastUpdated('0512020000Z')
if mibBuilder.loadTexts: vpwrDcPowerMgt.setOrganization('Valere Power Inc.')
if mibBuilder.loadTexts: vpwrDcPowerMgt.setContactInfo('Contact: Valere Customer Support\n\t                          Postal:  661 N. Plano Road, Suite 300\n\t                                   Richardson, TX-75081\n\t                          Web:      http://www.valerepower.com\n\t                          email:    support@valerepower.com\n\t                          Phone     866-240-6614\n\t                         ')
if mibBuilder.loadTexts: vpwrDcPowerMgt.setDescription(' MIB Version 0.8\n\t                      Need description here.\n\t                      History\n\t\t\t\t\t\t\t\t\t\tAdd table to retrieve module inventory info\n\t\t\t\t\t\t  MIB Version 0.7\n\t\t\t\t\t\t  Dec 1, 05\t\t\n\t\t\t\t\t\t                Fixed HP Openview error\n\t\t\t\t\t\t                Fixed warnings generated by MG-SOFT\n\t\t\t\t\t\t\t\t\t\tAdd table to retrieve rectifier inventory info\n\t\t\t\t\t\t  MIB Version 0.6\t\t\t\t\n\t                      Feb 10, 2004  Added additional traps.\n\t                                    Defined Ringers and other modules.\n\t                      Feb 08, 2003  Changed vpwrTrapDestinationTable to vpwrTrapTable\n\t                                    Corrected entry for vpwrTrapTable to be VpwrTrapTableEntry\n\t                                    This fixes errors generated by MG-SOFT mib compiler.\n\t                      Oct 30, 2002  initial release - version 0.4\n\t                    ')
class PositiveInteger(TextualConvention, Integer32):
    description = 'This data type is a non-zero and non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 2147483647)

class NonNegativeInteger(TextualConvention, Integer32):
    description = 'This data type is a non-negative value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

vpwrDcPowerProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 1))
vpwrDcPowerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2))
vpwrDcPowerRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3))
vpwrDcPowerLvd = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4))
vpwrDcPowerTest = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 5))
vpwrDcPowerModuleIdent = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 6))
vpwrDcPowerBatteryGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7))
vpwrDcPowerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 8))
vpwrDcPowerSnmpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 9))
vpwrDcPowerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 10))
vpwrDcPowerTrapsMsgString = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 11))
vpwrDcPowerRinger = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12))
vpwrDcPowerDcDcConverter = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13))
vpwrDcPowerDcAcInverter = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14))
vpwrDcPowerBayController = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 15))
vpwrDcPowerIoModule = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16))
vpwrDcPowerDist = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 17))
vpwrDcPowerTrio = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 18))
vpwrSystemIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 1))
vpwrSystemConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 2))
vpwrSystemParameterGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 3))
vpwrSystemPanelIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 4))
vpwrSystemBayctrlIdentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 2, 5))
vpwrLvdConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 1))
vpwrLvdAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 2))
vpwrLvdTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 4, 3))
vpwrRectifierConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 1))
vpwrRectifierAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 2))
vpwrRectifierTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 3, 3))
vpwrBatteryTempGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 1))
vpwrBatteryCurrentGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 2))
vpwrBatteryBoostGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 3))
vpwrBatteryDischargeTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 7, 4))
vpwrRingerConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 1))
vpwrRingerAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 2))
vpwrRingerTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 12, 3))
vpwrDcDcConverterConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 1))
vpwrDcDcConverterAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 2))
vpwrDcDcConverterTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 13, 3))
vpwrDcAcInverterConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 1))
vpwrDcAcInverterAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 2))
vpwrDcAcInverterTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 14, 3))
vpwrIoModuleConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 1))
vpwrIoModuleAlarmGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 2))
vpwrIoModuleTestGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 13858, 16, 3))
vpwrIdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentManufacturer.setDescription('The name of the DC Power manufacturer.')
vpwrIdentModel = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentModel.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentModel.setDescription('The DC Power Model designation.')
vpwrIdentControllerVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentControllerVersion.setDescription('The hardware/firmware version(s).  This variable\n\t           may or may not have the same value as\n\t           vpwrIdentAgentSoftwareVersion.')
vpwrIdentAgentSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentAgentSoftwareVersion.setDescription('The SNMP agent software version.  This variable may or\n\t           may not have the same value as\n\t           vpwrIdentControllerFirmwareVersion.')
vpwrIdentName = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrIdentName.setStatus('current')
if mibBuilder.loadTexts: vpwrIdentName.setDescription('A string identifying the system.  This object should be\n\t           set by the administrator.')
vpwrSystemIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6), )
if mibBuilder.loadTexts: vpwrSystemIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemIdentTable.setDescription(' This table describes shelves and modules\n\t     that make up the sysetm.\n\t   ')
vpwrSystemIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemIdentEntry.setDescription('An entry containing information applicable to a\n               particular alarm.')
vpwrBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrBayIndex.setDescription('Identifies Bay number that this module belongs to.\n\t              The possible values are 1 through 16 limited by vpwrSystemShelfCapacity.')
vpwrModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleIndex.setDescription('This object identifies the module by its position in the shelf.\n\t              Module numbering is left to right starting with module 1.  So, the\n\t              module in the first slot has an index of 1, the next module is 2 and\n\t              so on.')
vpwrModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOID.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleOID.setDescription('It indicates the type of the module by specifiying its OID')
vpwrModuleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleCurrent.setDescription('The meaning of this object depends upon the module type\n\t                                which is indicated by vpwrModuleOID as follows\n\t                                  - Current for Rectifier module.\n\t                                  - Not Applicable for LVD module\n\t                               ')
vpwrModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1), ("moduleStatusDisabled", 2), ("moduleStatusRingerAOn", 3), ("moduleStatusRingerBOn", 4), ("moduleStatusUnknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleOperStatus.setDescription('This object indicates current over all status of the module.')
vpwrModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 1, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleCapacity.setDescription('The meaning of this object depends upon the module type\n\t                                which is indicated by vpwrModuleOID as follows\n\t                                  - Capacity for Rectifier module.\n\t                                  - Not Applicable for LVD module\n\t                               ')
vpwrPanelIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1), )
if mibBuilder.loadTexts: vpwrPanelIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelIdentTable.setDescription(' This table describes shelves and modules\n\t     that make up the panels.\n\t   ')
vpwrPanelIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrPanelBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrPanelModuleIndex"))
if mibBuilder.loadTexts: vpwrPanelIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelIdentEntry.setDescription('An entry containing information applicable to a\n\t      particular panel making up the system.')
vpwrPanelBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelBayIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelBayIndex.setDescription('Identifies bay number that this module belongs to.\n\t              The possible values are 1 through 16, starting from the top.')
vpwrPanelModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 2), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleIndex.setDescription('This object identifies the module within the panel.\n\t              The orentation of modules within the panel is mappable.')
vpwrPanelModuleOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOID.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleOID.setDescription('It indicates the type of the module by specifiying its OID')
vpwrPanelModuleCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleCurrent.setDescription('This is the Current of the first shunt of the module.')
vpwrPanelModuleOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOperStatus.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleOperStatus.setDescription('This object indicates over all status of the module.')
vpwrPanelModuleCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleCapacity.setDescription('This is the overall Capacity of the module and is for reference only.')
vpwrBayctrlIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1), )
if mibBuilder.loadTexts: vpwrBayctrlIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlIdentTable.setDescription(' This table describes bay controllers\n\t     that make up the system.\n\t   ')
vpwrBayctrlIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayctrlIndex"))
if mibBuilder.loadTexts: vpwrBayctrlIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlIdentEntry.setDescription('An entry containing information applicable to a\n\t      particular bay controller making up the system.')
vpwrBayctrlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlIndex.setDescription('Identifies bay number that this module belongs to.\n\t              The possible values are 0 through 15, starting from the top.')
vpwrBayctrlOID = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOID.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlOID.setDescription('It indicates the type of the module by specifiying its OID')
vpwrBayctrlCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlCurrent.setDescription('This is the total output Current of the bay')
vpwrBayctrlOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("moduleStatusOK", 0), ("moduleStatusAlarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOperStatus.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlOperStatus.setDescription('This object indicates over all status of the bay')
vpwrBayctrlCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 2, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlCapacity.setDescription('This is the overall Capacity of the bay and is for reference only.')
vpwrSystemTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensation.setDescription('  This parameter enables/disables temperature compensation.\n\t                     ')
vpwrSystemTempCompStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompStartTemperature.setDescription('  The temperature at which temperature compensation becomes\n\t                        active.\n\t                     ')
vpwrSystemTempCompStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 3), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompStopVoltage.setDescription('  When temperature compensation is active, vpwrSystemTempCompStopVoltage is the\n\t                        limit to which float voltage will be reduced.\n\t\t\t\t    For example, to set this voltage to 51.75 volts enter a value of 5175.\n\t                     ')
vpwrSystemTempCompensationSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensationSlope.setDescription('  The rate at which float voltage is changed, within the specified limits,\n\t                        when temperature compensation is active.\n\t                     ')
vpwrSystemThermalSenseType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemThermalSenseType.setDescription('  This parameter selects the temperature sensing point for temperature\n\t                        compensation (in)activation.\n\t                     ')
vpwrSystemHVAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 6), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemHVAlarmSetpoint.setDescription('System High voltage alarm voltage setting.\n\t                               ')
vpwrSystemBDAlarmSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 7), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemBDAlarmSetpoint.setDescription('System Battery Discharge voltage setting.')
vpwrSystemInternalTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTempLThreshold.setDescription('Temperature value at which temperature compensation inactive (clear)\n\t                                trap would be sent if temperature compensation was active when this \n\t                                value is reached.\n\t                                ')
vpwrSystemInternalTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 2, 9), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTempUThreshold.setDescription('Temperature value at which temperature compensation active (set) trap \n\t                                would be sent.\n\t                               ')
vpwrSystemShelfCapacity = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemShelfCapacity.setDescription('  It describes the maximum number of shelves that can/are controlled\n\t                        by the controller. Each shelf is uniquely numbered in the range\n\t                        from 1 to  vpwrShelfCapacity.\n\t                     ')
vpwrSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemVoltage.setDescription('  The current system voltage.\n\t                     ')
vpwrSystemCurrent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 3), Integer32()).setUnits(' Amperes').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemCurrent.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemCurrent.setDescription('  The current system current.\n\t                     ')
vpwrSystemControllerState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("systemControllerStateUnknown", 0), ("systemControllerStateNormal", 1), ("systemControllerStateChange", 2), ("systemControllerStateAlarm", 3), ("systemControllerStateMenu", 4), ("systemControllerStateIrActive", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemControllerState.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemControllerState.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemControllerState.setDescription('  Current System state as shown on the enhanced display.\n\t                     ')
vpwrSystemInternalTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 5), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemInternalTemperature.setDescription('  The current controller internal temperature.\n\t                     ')
vpwrSystemTempCompensationState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("systemTempCompInactive", 0), ("systemTempCompActive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setReference(' ')
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemTempCompensationState.setDescription('  Active or Inactive. Applicable only if temperature compensation is enabled.\n\t                        This means that the controller is temperature compensating the float voltage.\n\t                     ')
vpwrSystemType = MibScalar((1, 3, 6, 1, 4, 1, 13858, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sysTypeUnknow", 0), ("sysType48V", 1), ("sysType24V", 2), ("sysType12V", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrSystemType.setStatus('current')
if mibBuilder.loadTexts: vpwrSystemType.setDescription('This parameter describes the type of the system being managed.\n\t                      This object is set by Valere Power Inc.\n\t                     ')
vpwrLvdWarningSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 1), Integer32()).setUnits(' * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdWarningSetpoint.setDescription('LVD Warning voltage setpoint.')
vpwrLvdDisconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdDisconnectSetpoint.setDescription('LVD disconnect voltage setpoint.')
vpwrLvdReconnectSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 3), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdReconnectSetpoint.setDescription('LVD Reconnect voltage setpoint.')
vpwrLvdReconnectDelayTimer = MibScalar((1, 3, 6, 1, 4, 1, 13858, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdReconnectDelayTimer.setDescription('The delay time, in seconds, before LVD is reconnected')
vpwrLvdContactorConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5), )
if mibBuilder.loadTexts: vpwrLvdContactorConfigTable.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorConfigTable.setDescription(' This table describes shelves and modules\n\t     that make up the sysetm.\n\t   ')
vpwrLvdContactorConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBayIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrLvdContactorIndex"))
if mibBuilder.loadTexts: vpwrLvdContactorConfigEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorConfigEntry.setDescription('An entry containing information applicable to a\n\t           particular module making up the system.')
vpwrLvdContactorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 1), PositiveInteger()).setUnits(' None').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrLvdContactorIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorIndex.setDescription('contactor index')
vpwrLvdContactorWarningSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 2), PositiveInteger()).setUnits(' * .01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorWarningSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorWarningSetpoint.setDescription('LVD Warning voltage setpoint.')
vpwrLvdContactorDisconnectSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 3), PositiveInteger()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorDisconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorDisconnectSetpoint.setDescription('LVD disconnect voltage setpoint.')
vpwrLvdContactorReconnectSetpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 4), PositiveInteger()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorReconnectSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorReconnectSetpoint.setDescription('LVD Reconnect voltage setpoint.')
vpwrLvdContactorReconnectDelayTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 5), PositiveInteger().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setUnits(' Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorReconnectDelayTimer.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorReconnectDelayTimer.setDescription('The delay time, in seconds, before LVD is reconnected')
vpwrLvdContactorState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("contactorOpen", 0), ("contactorClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrLvdContactorState.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdContactorState.setDescription('The delay time, in seconds, before LVD is reconnected')
vpwrRectifierFVSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 1), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierFVSetpoint.setDescription('System Float Voltage setting')
vpwrRectifierHVSDSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 2), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierHVSDSetpoint.setDescription('System High Voltage Shutdown voltage setting')
vpwrRectifierCurrentLimitAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rectCurrentLimitDisabled", 0), ("rectCurrentLimitEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierCurrentLimitAdminState.setReference(' ')
if mibBuilder.loadTexts: vpwrRectifierCurrentLimitAdminState.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierCurrentLimitAdminState.setDescription('  This parameter allows enabling or disabling boost.\n\t                     ')
vpwrRectifierCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 13858, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 200))).setUnits('Amperes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRectifierCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: vpwrRectifierCurrentLimit.setDescription('Rectifier current limit setpoint')
vpwrAlarmsPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmsPresent.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmsPresent.setDescription('The present number of active alarm conditions.')
vpwrAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 2), )
if mibBuilder.loadTexts: vpwrAlarmTable.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmTable.setDescription('A list of alarm table entries.  The table contains\n\t           zero, one, or many rows at any moment, depending upon\n\t           the number of alarm conditions in effect.  The table\n\t           is initially empty at agent startup.  The agent\n\t           creates a row in the table each time a condition is\n\t           detected and deletes that row when that condition no\n\t           longer pertains.  \n\t           The vpwrAlarmIndex, for each type of module starts at 1\n\t           and is limited by the total number of alarams that can be\n\t           generated by the module.\n\n\t           Alarms are named by an AutonomousType (OBJECT\n\t           IDENTIFIER), vpwrAlarmDescr, to allow a single table to\n\t           reflect alarms for different type of modules.\n\n\t           The number of rows in the table at any given time is\n\t           reflected by the value of vpwrAlarmsPresent.')
vpwrAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrAlarmIndex"))
if mibBuilder.loadTexts: vpwrAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmEntry.setDescription('An entry containing information applicable to a\n\t           particular alarm.')
vpwrAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 1), PositiveInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmIndex.setDescription('Identifies the alarm associated with the module. \n\t            It is unique on per module type basis. For example,\n\t            multiple rectifiers can have the same alarm and therefore same\n\t            vpwrAlarmIndex active at any one time.\n\t           ')
vpwrAlarmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 2), AutonomousType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmDescr.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmDescr.setDescription('A reference to an alarm description object.  The\n\t           object referenced should not be accessible, but rather\n\t           be used to provide a unique description of the alarm\n\t           condition.')
vpwrAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 2, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrAlarmTime.setStatus('current')
if mibBuilder.loadTexts: vpwrAlarmTime.setDescription('The value of sysUpTime when the alarm condition was\n\t           detected.')
vpwrBatteryTempTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1), )
if mibBuilder.loadTexts: vpwrBatteryTempTable.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempTable.setDescription('This table describes battery temperature probes.\n\t   ')
vpwrBatteryTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrBatteryTempIndex"))
if mibBuilder.loadTexts: vpwrBatteryTempEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempEntry.setDescription('An entry containing information applicable to a\n\t           particular temperature probe.')
vpwrBatteryTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempIndex.setDescription('Index into temperature table')
vpwrBatteryTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempName.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempName.setDescription('A string identifying probe location.')
vpwrBatteryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 1, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBatteryTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTemp.setDescription('Current temperature as recorded by the probe.')
vpwrBatteryTempLThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 2), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempLThreshold.setDescription('Temperature value at which a clear trap would be sent.\n\t                                All three battery temperature must be at or below this value\n\t                                to trigger this trap.\n\t                                ')
vpwrBatteryTempUThreshold = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 3), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryTempUThreshold.setDescription('Temperature value at which a set trap would be sent.\n\t                               Any one of the three battery temperatures at or exceeding this limit\n\t                               would trigger the trap.\n\t                               ')
batteryTempCompensation = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("tempCompDisabled", 0), ("tempCompEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompensation.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompensation.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompensation.setDescription('  This parameter enables/disables temperature compensation.\n\t                     ')
batteryTempCompHighStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighStartTemperature.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompHighStartTemperature.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompHighStartTemperature.setDescription('  The temperature at which temperature compensation becomes\n\t                        active.\n\t                     ')
batteryTempCompHighStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 6), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighStopVoltage.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompHighStopVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompHighStopVoltage.setDescription('  When temperature compensation is active, batteryTempCompHighStopVoltage is the\n\t                        limit to which float voltage will be reduced.\n\t\t\t\t    For example, to set this voltage to 51.75 volts enter a value of 5175.\n\t                     ')
batteryTempCompHighSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompHighSlope.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompHighSlope.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompHighSlope.setDescription('  The rate at which float voltage is changed, within the specified limits,\n\t                        when temperature compensation is active.\n\t                     ')
batteryTempCompLowStartTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 8), Integer32()).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowStartTemperature.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompLowStartTemperature.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompLowStartTemperature.setDescription('  The temperature at which temperature compensation becomes\n\t                        active.\n\t                     ')
batteryTempCompLowStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 9), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowStopVoltage.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompLowStopVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompLowStopVoltage.setDescription('  When temperature compensation is active, batteryTempCompLowStopVoltage is the\n\t                        limit to which float voltage will be reduced.\n\t\t\t\t    For example, to set this voltage to 51.75 volts enter a value of 5175.\n\t                     ')
batteryTempCompLowSlope = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 250))).setUnits(' milli-Volts per degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompLowSlope.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompLowSlope.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompLowSlope.setDescription('  The rate at which float voltage is changed, within the specified limits,\n\t                        when temperature compensation is active.\n\t                     ')
batteryTempCompRunawayTemperature = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(25, 60))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompRunawayTemperature.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompRunawayTemperature.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompRunawayTemperature.setDescription('  The temperature at which system voltage will be set to \n\t                         batteryTempCompRunawayStopVoltage.\n\t                     ')
batteryTempCompRunawayStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 12), Integer32()).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompRunawayStopVoltage.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompRunawayStopVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompRunawayStopVoltage.setDescription('  When temperature compensation is enabled, float voltage will be reduced to\n\t                         batteryTempCompRunawayStopVoltage if temperature\n\t                         reaches batteryTempCompRunawayTemperature.\n\t                     ')
batteryTempCompSenseSource = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompSenseSource.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompSenseSource.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompSenseSource.setDescription('  This parameter selects the temperature sensing point for temperature\n\t                        compensation (in)activation.\n\t                     ')
batteryTempCompRunawayState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTempCompRunawayState.setReference(' ')
if mibBuilder.loadTexts: batteryTempCompRunawayState.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompRunawayState.setDescription('  This parameter selects the temperature sensing point for temperature\n\t                        compensation (in)activation.\n\t                     ')
thermalProbeTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15), )
if mibBuilder.loadTexts: thermalProbeTable.setStatus('current')
if mibBuilder.loadTexts: thermalProbeTable.setDescription('This table describes battery temperature probes.\n\t   ')
thermalProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15, 1), )
vpwrBatteryTempEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "thermalProbeEntry"))
thermalProbeEntry.setIndexNames(*vpwrBatteryTempEntry.getIndexNames())
if mibBuilder.loadTexts: thermalProbeEntry.setStatus('current')
if mibBuilder.loadTexts: thermalProbeEntry.setDescription('An entry containing information applicable to a\n\t           particular temperature probe.')
thermalProbeState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 7, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 0), ("present", 1), ("removed", 2), ("shorted", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: thermalProbeState.setStatus('current')
if mibBuilder.loadTexts: thermalProbeState.setDescription('State of thermal probe.')
vpwrTrapTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 9, 1), )
if mibBuilder.loadTexts: vpwrTrapTable.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapTable.setDescription('A list of possible trap destinations depending upon\n\t    the criticality of the trap.\n\t   ')
vpwrTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrTrapIpIndex"))
if mibBuilder.loadTexts: vpwrTrapEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapEntry.setDescription('An entry containing information applicable to a\n\t           particular trap destination.')
vpwrTrapIpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrTrapIpIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapIpIndex.setDescription('Trap Entry Index ')
vpwrTrapIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapIpAddress.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapIpAddress.setDescription('Trap destination IP Address')
vpwrTrapCriticality = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 9, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCriticality.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapCriticality.setDescription('Criticality of traps sent to this IP Address')
vpwrReadCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrReadCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrReadCommunityString.setDescription(' This allows setting password to be able to do Get operations')
vpwrWriteCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrWriteCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrWriteCommunityString.setDescription(' This allows setting password to be able to do Get and Set\n\t                        operations.\n\t                        The read-access is not allowed in the actual implementation.\n\t                      ')
vpwrTrapCommunityString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(3, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrTrapCommunityString.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapCommunityString.setDescription(' This allows setting community string required for the\n\t                        trap to be accepted at the destination.\n\t                      ')
vpwrTrapPowerMajorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,1)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapPowerMajorAlarm.setDescription('Major Alarm')
vpwrTrapPowerMinorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,2)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapPowerMinorAlarm.setDescription('Minor Alarm')
vpwrTrapACFAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,3)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapACFAlarm.setDescription('AC Fail Alarm')
vpwrTrapHVAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,4)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapHVAlarm.setDescription('High Voltage Warning Alarm')
vpwrTrapHVSDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,5)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapHVSDAlarm.setDescription('High Voltage Shutdown Alarm')
vpwrTrapBDAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,6)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBDAlarm.setDescription('Battery on Discharge Alarm')
vpwrTrapLVDWarningAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,7)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLVDWarningAlarm.setDescription('LVD Warning Alarm')
vpwrTrapLVDOpenAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,8)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLVDOpenAlarm.setDescription('LVD Open Alarm')
vpwrTrapDistAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,9)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapDistAlarm.setDescription('Distribution Open Alarm')
vpwrTrapAuxAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,10)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapAuxAlarm.setDescription('Auxiliary System Alarm')
vpwrTrapSystemRedundancyAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,11)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemRedundancyAlarm.setDescription('System Redundant Capacity Alarm')
vpwrTrapIShareAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,12)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapIShareAlarm.setDescription('Rectifier Current Share Alarm')
vpwrTrapModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,13)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapModuleFailAlarm.setDescription('Single Rectifier Fail Alarm')
vpwrTrapMultipleModuleFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,14)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapMultipleModuleFailAlarm.setDescription('Multiple Rectifier Fail Alarm')
vpwrTrapModuleCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,15)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapModuleCommAlarm.setDescription('Module Communication Alarm')
vpwrTrapSystemOverTemperatureAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,16)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemOverTemperatureAlarm.setDescription('System Over Temperature Alarm')
vpwrTrapSystemOK = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,17)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemOK.setDescription('SYSTEM OK - No Active Alarms')
vpwrTrapModuleInserted = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,18)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VALERE-DC-POWER-MIB", "vpwrBayIndex"), ("VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrTrapModuleInserted.setDescription('A new module has been inserted into the system.')
vpwrTrapModuleRemoved = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,19)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"), ("VALERE-DC-POWER-MIB", "vpwrBayIndex"), ("VALERE-DC-POWER-MIB", "vpwrModuleIndex"))
if mibBuilder.loadTexts: vpwrTrapModuleRemoved.setDescription('A module has been removed from the system.')
vpwrTrapThermalCompActive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,20)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalCompActive.setDescription('Thermal compensation has become active.')
vpwrTrapThermalCompInactive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,21)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalCompInactive.setDescription('Thermal compensation has been de-activated.')
vpwrTrapInternalTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,22)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapInternalTempAlarmSet.setDescription('Internal Temperature upper threshold exceeded.')
vpwrTrapInternalTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,23)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapInternalTempAlarmCleared.setDescription('Internal Temperature within limits')
vpwrTrapBatteryTempAlarmSet = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,24)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryTempAlarmSet.setDescription('At least one Battery Temperature exceeded upper threshold.')
vpwrTrapBatteryTempAlarmCleared = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,25)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryTempAlarmCleared.setDescription('All Battery Temperatures within limits.')
vpwrTrapLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,26)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLoginFail.setDescription('Admin login failed due to wrong username/password.')
vpwrTrapLoginSuccess = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,27)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLoginSuccess.setDescription('Admin login successful.')
vpwrTrapLogout = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,28)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapLogout.setDescription('Admin logout.')
vpwrTrapAdminPwdChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,29)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapAdminPwdChange.setDescription('Config change submitted with invalid access.')
vpwrTrapIllegalConfigSubmit = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,30)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapIllegalConfigSubmit.setDescription('Config change submitted with invalid access.')
vpwrTrapCfgChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,31)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapCfgChange.setDescription('Config change submitted.')
vpwrTrapClearEventHistory = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,32)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapClearEventHistory.setDescription('Clear Event history buffer clear request.')
vpwrTrapSwDownloadNoReboot = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,33)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSwDownloadNoReboot.setDescription('System software upgrade without reboot.')
vpwrTrapSwDownloadAndReboot = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,34)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSwDownloadAndReboot.setDescription('System reboot due to software upgrade.')
vpwrTrapSystemClockChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,35)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemClockChange.setDescription('System clock updated.')
vpwrTrapModuleAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,36)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapModuleAlarm.setDescription('Module Alarm.')
vpwrTrapOIDChange = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,37)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapOIDChange.setDescription('Change in OID.')
vpwrTrapThermalRunaway = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,38)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalRunaway.setDescription('Thermal Runaway Alarm.')
vpwrTrapBatteryDischargeTestAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,39)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryDischargeTestAlarm.setDescription('System Voltage dropped to BDT Alarm Setpoint.')
vpwrTrapRingerAAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,40)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapRingerAAlarm.setDescription('Ringer A Fail Alarm.')
vpwrTrapRingerBAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,41)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapRingerBAlarm.setDescription('Ringer B Fail Alarm.')
vpwrTrapSingleRingerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,42)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSingleRingerAlarm.setDescription('Single Ringer Fail Alarm.')
vpwrTrapMultipleRingerAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,43)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapMultipleRingerAlarm.setDescription('Multiple Ringer Fail Alarm.')
vpwrTrapThermalProbeAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,44)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapThermalProbeAlarm.setDescription('Thermal Probe Missing Alarm.')
vpwrTrapRingerCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,45)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapRingerCommAlarm.setDescription('Ringer Communication Alarm.')
vpwrTrapDistributionCommAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,46)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapDistributionCommAlarm.setDescription('Distribution Communication Alarm.')
vpwrTrapConverterAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,47)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapConverterAlarm.setDescription('Single Converter Fail Alarm.')
vpwrTrapMultipleConvFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,48)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapMultipleConvFailAlarm.setDescription('Multiple Converter Fail Alarm.')
vpwrTrapUnmappedAddressAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,49)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapUnmappedAddressAlarm.setDescription('Unmapped I2C Address.')
vpwrTrapConfigErrorAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,50)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapConfigErrorAlarm.setDescription('Configuration Error.')
vpwrTrapDisplayFirmwareMismatchAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,51)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapDisplayFirmwareMismatchAlarm.setDescription('Display Firmware Mismatch.')
vpwrTrapConverterInputFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,52)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapConverterInputFailAlarm.setDescription('Converter Input Fail Alarm.')
vpwrTrapBatteryRechgIlimitFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,53)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapBatteryRechgIlimitFailAlarm.setDescription('Battery Recharge Current Limit Fail.')
vpwrTrapSystemAlive = NotificationType((1, 3, 6, 1, 4, 1, 13858, 10) + (0,54)).setObjects(("VALERE-DC-POWER-MIB", "vpwrTrapsMsgString"))
if mibBuilder.loadTexts: vpwrTrapSystemAlive.setDescription('Periodic Keepalive trap.')
vpwrLvdAlarmContactorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 1))
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmContactorOpen.setDescription('Contactor open')
vpwrLvdAlarmCBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 2))
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmCBOpen.setDescription('Circuit Breaker open')
vpwrTrapLvdFuseOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 3))
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapLvdFuseOpen.setDescription('Fuse open')
vpwrLvdAlarmWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 4, 2, 4))
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setStatus('current')
if mibBuilder.loadTexts: vpwrLvdAlarmWarning.setDescription('Plant Voltage below warning threshold')
vpwrRectAlarmDCFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 1))
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmDCFail.setDescription('\n\t       ')
vpwrRectAlarmBoostFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 2))
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmBoostFail.setDescription('\n\t       ')
vpwrRectAlarmACFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 3))
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmACFail.setDescription('\n\t       ')
vpwrRectAlarmHVSD = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 4))
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmHVSD.setDescription('\n\t       ')
vpwrRectAlarmFanFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 5))
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmFanFail.setDescription('\n\t       ')
vpwrRectAlarmAmbTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 6))
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmAmbTemp.setDescription('\n\t       ')
vpwrRectAlarmIntTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 7))
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmIntTemp.setDescription('\n\t       ')
vpwrRectAlarmIShare = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 8))
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmIShare.setDescription('\n\t       ')
vpwrRectAlarmUV = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 9))
if mibBuilder.loadTexts: vpwrRectAlarmUV.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmUV.setDescription('\n\t       ')
vpwrRectAlarmLowVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 10))
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmLowVoltage.setDescription('\n\t       ')
vpwrRectAlarmReserved = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 11))
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmReserved.setDescription('\n\t       ')
vpwrRectAlarmDCEnable = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 12))
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmDCEnable.setDescription('\n\t       ')
vpwrRectAlarmRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 13))
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmRemoteShutdown.setDescription('\n\t       ')
vpwrRectAlarmModDisableShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 14))
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmModDisableShutdown.setDescription('\n\t       ')
vpwrRectAlarmShortPinShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 15))
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmShortPinShutdown.setDescription('\n\t       ')
vpwrRectAlarmBoostComm = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 3, 2, 16))
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setStatus('current')
if mibBuilder.loadTexts: vpwrRectAlarmBoostComm.setDescription('\n\t       ')
vpwrTrapsMsgString = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127)))
if mibBuilder.loadTexts: vpwrTrapsMsgString.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapsMsgString.setDescription(' Place holder for trap notification message string')
vpwrTrapUserIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 2), IpAddress())
if mibBuilder.loadTexts: vpwrTrapUserIpAddress.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapUserIpAddress.setDescription('Place holder for IP address of the user accessing the system')
vpwrTrapEventTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 13858, 11, 3), IpAddress())
if mibBuilder.loadTexts: vpwrTrapEventTimeStamp.setStatus('current')
if mibBuilder.loadTexts: vpwrTrapEventTimeStamp.setDescription('Place holder for time-stamp.')
sysRelayConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 3), )
if mibBuilder.loadTexts: sysRelayConfigTable.setStatus('current')
if mibBuilder.loadTexts: sysRelayConfigTable.setDescription('This table describes battery temperature probes.\n\t   ')
sysRelayConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysRelayIndex"))
if mibBuilder.loadTexts: sysRelayConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sysRelayConfigEntry.setDescription('An entry containing information applicable to a\n\t           particular temperature probe.')
sysRelayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRelayIndex.setStatus('current')
if mibBuilder.loadTexts: sysRelayIndex.setDescription('Index into temperature table')
sysRelayDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRelayDefaultName.setStatus('current')
if mibBuilder.loadTexts: sysRelayDefaultName.setDescription('A string identifying probe location.')
sysRelayCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRelayCustomName.setStatus('current')
if mibBuilder.loadTexts: sysRelayCustomName.setDescription('A string identifying probe location.')
sysRelayAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("alarmNone", 0), ("alarmMajor", 1), ("alarmMinor", 2), ("alarmMajorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRelayAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: sysRelayAlarmSeverity.setDescription('Current temperature as recorded by the probe.')
sysAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 4), )
if mibBuilder.loadTexts: sysAlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: sysAlarmConfigTable.setDescription('This table describes battery temperature probes.\n\t   ')
sysAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysAlarmIndex"))
if mibBuilder.loadTexts: sysAlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sysAlarmConfigEntry.setDescription('An entry containing information applicable to a\n\t           particular temperature probe.')
sysAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: sysAlarmIndex.setDescription('Index into temperature table')
sysAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmDefaultName.setStatus('current')
if mibBuilder.loadTexts: sysAlarmDefaultName.setDescription('A string identifying probe location.')
sysAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmCustomName.setStatus('current')
if mibBuilder.loadTexts: sysAlarmCustomName.setDescription('A string identifying probe location.')
sysAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: sysAlarmSeverity.setDescription('Alarm Severity as denoted by Major and Minor Alarm Mask')
sysAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setStatus('current')
if mibBuilder.loadTexts: sysAlarmToRelayMapping.setDescription('No additional mapping = 0\n\t                                Map to Relay A  = 1\n\t                                Map to Relay B  = 2\n\t                                Map to Relay C  = 4\n\t                                Map to Relay D  = 8\n\t                                Map to Relay E  = 16\n\t                                Map to Relay F  = 32\n\t                                Map to Relay A and B  = (1 + 2) and so on\n\t                                The major/minor classification of alarms automatically\n\t                                associates it with Major/Minor relay. Assigning a null\n\t                                mapping here does not override sysRelayAlarmSeverity for\n\t                                the alarm.\n\t                                It should be used to define mapping to additional relays.\n\t                               ')
sysAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmOperStatus.setStatus('current')
if mibBuilder.loadTexts: sysAlarmOperStatus.setDescription('Indicates current alarm status')
sysAuxAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 8, 5), )
if mibBuilder.loadTexts: sysAuxAlarmConfigTable.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmConfigTable.setDescription('This table describes battery temperature probes.\n\t   ')
sysAuxAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "sysAuxAlarmIndex"))
if mibBuilder.loadTexts: sysAuxAlarmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmConfigEntry.setDescription('An entry containing information applicable to a\n\t           particular temperature probe.')
sysAuxAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmIndex.setDescription('Index into temperature table')
sysAuxAlarmDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmDefaultName.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmDefaultName.setDescription('A string identifying probe location.')
sysAuxAlarmCustomName = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmCustomName.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmCustomName.setDescription('A string identifying probe location.')
sysAuxAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("major", 1), ("minor", 2), ("majorAndMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmSeverity.setDescription('Aux Alarm Severity')
sysAuxAlarmToRelayMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmToRelayMapping.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmToRelayMapping.setDescription('No additional mapping = 0\n\t                                Map to Relay A  = 1\n\t                                Map to Relay B  = 2\n\t                                Map to Relay C  = 4\n\t                                Map to Relay D  = 8\n\t                                Map to Relay E  = 16\n\t                                Map to Relay F  = 32\n\t                                Map to Relay A and B  = (1 + 2) and so on\n\t                                The major/minor classification of alarms automatically\n\t                                associates it with Major/Minor relay. Assigning a null\n\t                                mapping here does not override sysRelayAlarmSeverity for\n\t                                the alarm.\n\t                                It should be used to define mapping to additional relays.\n\t                               ')
sysAuxAlarmPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("alarmOnOpen", 0), ("alarmOnClose", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAuxAlarmPolarity.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmPolarity.setDescription('Current temperature as recorded by the probe.')
sysAuxAlarmOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 8, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAuxAlarmOperStatus.setStatus('current')
if mibBuilder.loadTexts: sysAuxAlarmOperStatus.setDescription('Indicates current alarm status')
sysAlarmComFailState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmComFailState.setStatus('current')
if mibBuilder.loadTexts: sysAlarmComFailState.setDescription('Enable/Disable generation of comm fail alarm.')
sysAlarmIShareState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("other", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmIShareState.setStatus('current')
if mibBuilder.loadTexts: sysAlarmIShareState.setDescription('Enable/Disable generation of current share alarm.')
sysAlarmRedundancyState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("nPlus1", 1), ("nPlus2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlarmRedundancyState.setStatus('current')
if mibBuilder.loadTexts: sysAlarmRedundancyState.setDescription('Enable/Disable generation of redundancy alarm.')
vpwrRingerParameterTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1), )
if mibBuilder.loadTexts: vpwrRingerParameterTable.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterTable.setDescription('A list of alarm table entries.  The table contains\n\t           zero, one, or many rows at any moment, depending upon\n\t           the number of alarm conditions in effect.  The table\n\t           is initially empty at agent startup.  The agent\n\t           creates a row in the table each time a condition is\n\t           detected and deletes that row when that condition no\n\t           longer pertains.  \n\t           The vpwrAlarmIndex, for each type of module starts at 1\n\t           and is limited by the total number of alarams that can be\n\t           generated by the module.\n\n\t           Alarms are named by an AutonomousType (OBJECT\n\t           IDENTIFIER), vpwrAlarmDescr, to allow a single table to\n\t           reflect alarms for different type of modules.\n\n\t           The number of rows in the table at any given time is\n\t           reflected by the value of vpwrAlarmsPresent.')
vpwrRingerParameterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1), ).setIndexNames((0, "VALERE-DC-POWER-MIB", "vpwrModuleIndex"), (0, "VALERE-DC-POWER-MIB", "vpwrRingerIndex"))
if mibBuilder.loadTexts: vpwrRingerParameterEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterEntry.setDescription('An entry containing information applicable to a\n\t           particular alarm.')
vpwrRingerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrRingerIndex.setReference(' ')
if mibBuilder.loadTexts: vpwrRingerIndex.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerIndex.setDescription('  This parameter allows selecting ringer A or Ringer B as the active ringer.\n\t                     ')
vpwrRingerParameterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ringerDisabled", 0), ("ringerAOn", 1), ("ringerBOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterAdminState.setReference(' ')
if mibBuilder.loadTexts: vpwrRingerParameterAdminState.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterAdminState.setDescription('  This parameter allows selecting ringer A or Ringer B as the active ringer.\n\t                     ')
vpwrRingerParameterAcVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterAcVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrRingerParameterAcVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterAcVoltage.setDescription('\n\t                     ')
vpwrRingerParameterDcVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5600))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterDcVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrRingerParameterDcVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterDcVoltage.setDescription('\n\t                     ')
vpwrRingerParameterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 50))).setUnits(' Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrRingerParameterFrequency.setReference(' ')
if mibBuilder.loadTexts: vpwrRingerParameterFrequency.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerParameterFrequency.setDescription('\n\t                     ')
vpwrRingerNumberPresent = MibScalar((1, 3, 6, 1, 4, 1, 13858, 12, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrRingerNumberPresent.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerNumberPresent.setDescription('The present number of active alarm conditions.')
vpwrRingerAlarmaAFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 1))
if mibBuilder.loadTexts: vpwrRingerAlarmaAFailed.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmaAFailed.setDescription('Ringer A Failed')
vpwrRingerAlarmAOTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 2))
if mibBuilder.loadTexts: vpwrRingerAlarmAOTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmAOTemp.setDescription('Ringer A Heatsink Over-Temperature')
vpwrRingerAlarmAOCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 3))
if mibBuilder.loadTexts: vpwrRingerAlarmAOCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmAOCurrent.setDescription('Ringer A Over-Current protection')
vpwrRingerAlarmaBFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 4))
if mibBuilder.loadTexts: vpwrRingerAlarmaBFailed.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmaBFailed.setDescription('Ringer A Failed')
vpwrRingerAlarmBOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 5))
if mibBuilder.loadTexts: vpwrRingerAlarmBOverTemp.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmBOverTemp.setDescription('Ringer A Heatsink Over-Temperature')
vpwrRingerAlarmBOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 13858, 12, 2, 6))
if mibBuilder.loadTexts: vpwrRingerAlarmBOverCurrent.setStatus('current')
if mibBuilder.loadTexts: vpwrRingerAlarmBOverCurrent.setDescription('Ringer A Over-Current protection')
vpwrBoostAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("boostDisabled", 0), ("boostEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostAdminState.setReference(' ')
if mibBuilder.loadTexts: vpwrBoostAdminState.setStatus('current')
if mibBuilder.loadTexts: vpwrBoostAdminState.setDescription('  This parameter allows enabling or disabling boost.\n\t                     ')
vpwrBoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrBoostVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrBoostVoltage.setDescription('\n\t                     ')
vpwrBoostDuration = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('Hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostDuration.setReference(' ')
if mibBuilder.loadTexts: vpwrBoostDuration.setStatus('current')
if mibBuilder.loadTexts: vpwrBoostDuration.setDescription('\n\t                     ')
vpwrBoostOperState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("boostInactive", 0), ("boostActive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBoostOperState.setReference(' ')
if mibBuilder.loadTexts: vpwrBoostOperState.setStatus('current')
if mibBuilder.loadTexts: vpwrBoostOperState.setDescription('  This parameter allows starting or stoping boost if it is enabled.\n\t                     ')
vpwrBatteryCurrentLimitAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("battetyCurrentLimitDisabled", 0), ("battetyCurrentLimitEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBatteryCurrentLimitAdminState.setReference(' ')
if mibBuilder.loadTexts: vpwrBatteryCurrentLimitAdminState.setStatus('current')
if mibBuilder.loadTexts: vpwrBatteryCurrentLimitAdminState.setDescription('  This parameter allows enabling or disabling battery current limit.\n\t                     ')
vpwrBattetyCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Ampere').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBattetyCurrentLimitValue.setReference(' ')
if mibBuilder.loadTexts: vpwrBattetyCurrentLimitValue.setStatus('current')
if mibBuilder.loadTexts: vpwrBattetyCurrentLimitValue.setDescription('\n\t                     ')
vpwrBattetyCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 40))).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBattetyCurrentValue.setReference(' ')
if mibBuilder.loadTexts: vpwrBattetyCurrentValue.setStatus('current')
if mibBuilder.loadTexts: vpwrBattetyCurrentValue.setDescription('\n\t                     ')
vpwrBDTAdminState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtDisabled", 0), ("bdtEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAdminState.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTAdminState.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTAdminState.setDescription('  Enable /Disable Battery Discharge Test execution.\n\t                     ')
vpwrBDTDuration = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(17, 50))).setUnits('Minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTDuration.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTDuration.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTDuration.setDescription('\n\t                     ')
vpwrBDTAlarmVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7000, 11000))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAlarmVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTAlarmVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTAlarmVoltage.setDescription('\n\t                     ')
vpwrBDTAbortVoltage = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5600))).setUnits(' *.01 Volts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAbortVoltage.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTAbortVoltage.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTAbortVoltage.setDescription('\n\t                     ')
vpwrBDTAlarmCoefficient = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setUnits('None').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTAlarmCoefficient.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTAlarmCoefficient.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTAlarmCoefficient.setDescription('\n\t                     ')
vpwrBDTOperState = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtInactive", 0), ("bdtActive", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTOperState.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTOperState.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTOperState.setDescription('  Start/Stop Battery Discharge Test execution.\n\t                     ')
vpwrBDTClearAlarm = MibScalar((1, 3, 6, 1, 4, 1, 13858, 7, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("bdtNoAlarm", 0), ("bdtAlarmPresent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vpwrBDTClearAlarm.setReference(' ')
if mibBuilder.loadTexts: vpwrBDTClearAlarm.setStatus('current')
if mibBuilder.loadTexts: vpwrBDTClearAlarm.setDescription('  Clears any active bdt alarm.\n\t                     ')
vpwrModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 1), )
if mibBuilder.loadTexts: vpwrModuleIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleIdentTable.setDescription(' This table describes shelves and modules\n\t     that make up the sysetm.\n\t   ')
vpwrModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1), )
vpwrSystemIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrModuleIdentEntry"))
vpwrModuleIdentEntry.setIndexNames(*vpwrSystemIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrModuleIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleIdentEntry.setDescription('An entry containing information applicable to a\n               particular Module.')
vpwrModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleSerialNumber.setDescription('Serial Number of the module')
vpwrModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleModelNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleModelNumber.setDescription('Model Number of the module.')
vpwrModuleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleFwVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleFwVersion.setDescription('Firmware version of the module.')
vpwrModuleTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleTestDate.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleTestDate.setDescription('Date when the module was last tested.')
vpwrModuleOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrModuleOperHours.setStatus('current')
if mibBuilder.loadTexts: vpwrModuleOperHours.setDescription('Cumulative Operating Hours.')
vpwrPanelModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 2), )
if mibBuilder.loadTexts: vpwrPanelModuleIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleIdentTable.setDescription(' This table describes shelves and modules\n\t     that make up the sysetm.\n\t   ')
vpwrPanelModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1), )
VpwrPanelIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrPanelModuleIdentEntry"))
vpwrPanelModuleIdentEntry.setIndexNames(*VpwrPanelIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrPanelModuleIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleIdentEntry.setDescription('An entry containing information applicable to a\n               particular alarm.')
vpwrPanelModuleSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleSerialNumber.setDescription('Serial Number of the module')
vpwrPanelModuleModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleModelNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleModelNumber.setDescription('Model Number of the module.')
vpwrPanelModuleFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleFwVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleFwVersion.setDescription('Firmware version of the module.')
vpwrPanelModuleTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleTestDate.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleTestDate.setDescription('Date when the module was last tested.')
vpwrPanelModuleOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrPanelModuleOperHours.setStatus('current')
if mibBuilder.loadTexts: vpwrPanelModuleOperHours.setDescription('Cumulative Operating Hours.')
vpwrBayctrlModuleIdentTable = MibTable((1, 3, 6, 1, 4, 1, 13858, 6, 3), )
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentTable.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentTable.setDescription(' This table describes bay controllers that make up the sysetm.\n\t   ')
vpwrBayctrlModuleIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1), )
VpwrBayctrlIdentEntry.registerAugmentions(("VALERE-DC-POWER-MIB", "vpwrBayctrlModuleIdentEntry"))
vpwrBayctrlModuleIdentEntry.setIndexNames(*VpwrBayctrlIdentEntry.getIndexNames())
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentEntry.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlModuleIdentEntry.setDescription('An entry containing information applicable to a particular bay controller.')
vpwrBayctrlSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlSerialNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlSerialNumber.setDescription('Serial Number of the bay controller')
vpwrBayctrlModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlModelNumber.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlModelNumber.setDescription('Model Number of the bay controller.')
vpwrBayctrlFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlFwVersion.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlFwVersion.setDescription('Firmware version of the bay controller.')
vpwrBayctrlTestDate = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlTestDate.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlTestDate.setDescription('Date when the bayctrl was last tested.')
vpwrBayctrlOperHours = MibTableColumn((1, 3, 6, 1, 4, 1, 13858, 6, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vpwrBayctrlOperHours.setStatus('current')
if mibBuilder.loadTexts: vpwrBayctrlOperHours.setDescription('Cumulative Operating Hours.')
mibBuilder.exportSymbols("VALERE-DC-POWER-MIB", vpwrBDTClearAlarm=vpwrBDTClearAlarm, vpwrBoostDuration=vpwrBoostDuration, vpwrDcDcConverterTestGroup=vpwrDcDcConverterTestGroup, vpwrIdentControllerVersion=vpwrIdentControllerVersion, vpwrLvdAlarmContactorOpen=vpwrLvdAlarmContactorOpen, vpwrBatteryCurrentLimitAdminState=vpwrBatteryCurrentLimitAdminState, vpwrDcDcConverterAlarmGroup=vpwrDcDcConverterAlarmGroup, vpwrTrapTable=vpwrTrapTable, vpwrBatteryTempGroup=vpwrBatteryTempGroup, batteryTempCompRunawayState=batteryTempCompRunawayState, vpwrTrapBatteryTempAlarmCleared=vpwrTrapBatteryTempAlarmCleared, vpwrSystemThermalSenseType=vpwrSystemThermalSenseType, vpwrTrapBDAlarm=vpwrTrapBDAlarm, vpwrPanelModuleCapacity=vpwrPanelModuleCapacity, vpwrBatteryTempTable=vpwrBatteryTempTable, vpwrBatteryTempName=vpwrBatteryTempName, sysAuxAlarmIndex=sysAuxAlarmIndex, sysAuxAlarmPolarity=sysAuxAlarmPolarity, vpwrBayctrlIndex=vpwrBayctrlIndex, sysRelayIndex=sysRelayIndex, sysAuxAlarmToRelayMapping=sysAuxAlarmToRelayMapping, sysAlarmIShareState=sysAlarmIShareState, vpwrBatteryTemp=vpwrBatteryTemp, vpwrRingerParameterFrequency=vpwrRingerParameterFrequency, sysAlarmIndex=sysAlarmIndex, vpwrRingerNumberPresent=vpwrRingerNumberPresent, vpwrRectAlarmAmbTemp=vpwrRectAlarmAmbTemp, thermalProbeState=thermalProbeState, vpwrRingerAlarmAOCurrent=vpwrRingerAlarmAOCurrent, vpwrPanelModuleCurrent=vpwrPanelModuleCurrent, vpwrTrapHVAlarm=vpwrTrapHVAlarm, vpwrRectifierAlarmGroup=vpwrRectifierAlarmGroup, vpwrDcPowerDcDcConverter=vpwrDcPowerDcDcConverter, vpwrBayctrlCurrent=vpwrBayctrlCurrent, vpwrTrapsMsgString=vpwrTrapsMsgString, vpwrSystemVoltage=vpwrSystemVoltage, vpwrTrapInternalTempAlarmSet=vpwrTrapInternalTempAlarmSet, vpwrTrapPowerMinorAlarm=vpwrTrapPowerMinorAlarm, vpwrRectAlarmACFail=vpwrRectAlarmACFail, vpwrDcPowerLvd=vpwrDcPowerLvd, vpwrTrapOIDChange=vpwrTrapOIDChange, vpwrTrapRingerCommAlarm=vpwrTrapRingerCommAlarm, vpwrModuleTestDate=vpwrModuleTestDate, vpwrBayctrlCapacity=vpwrBayctrlCapacity, sysAlarmConfigEntry=sysAlarmConfigEntry, vpwrBDTAdminState=vpwrBDTAdminState, vpwrRectifierFVSetpoint=vpwrRectifierFVSetpoint, vpwrModuleIndex=vpwrModuleIndex, vpwrRectAlarmRemoteShutdown=vpwrRectAlarmRemoteShutdown, vpwrIdentAgentSoftwareVersion=vpwrIdentAgentSoftwareVersion, vpwrDcPowerIoModule=vpwrDcPowerIoModule, NonNegativeInteger=NonNegativeInteger, vpwrLvdReconnectSetpoint=vpwrLvdReconnectSetpoint, vpwrBatteryTempEntry=vpwrBatteryTempEntry, vpwrRectifierTestGroup=vpwrRectifierTestGroup, vpwrRingerIndex=vpwrRingerIndex, vpwrDcAcInverterTestGroup=vpwrDcAcInverterTestGroup, vpwrPanelBayIndex=vpwrPanelBayIndex, vpwrReadCommunityString=vpwrReadCommunityString, vpwrLvdAlarmWarning=vpwrLvdAlarmWarning, vpwrLvdAlarmGroup=vpwrLvdAlarmGroup, sysRelayDefaultName=sysRelayDefaultName, vpwrAlarmTable=vpwrAlarmTable, vpwrModuleOperStatus=vpwrModuleOperStatus, vpwrTrapSingleRingerAlarm=vpwrTrapSingleRingerAlarm, vpwrTrapConfigErrorAlarm=vpwrTrapConfigErrorAlarm, vpwrRectAlarmIShare=vpwrRectAlarmIShare, vpwrRectAlarmBoostComm=vpwrRectAlarmBoostComm, batteryTempCompLowStopVoltage=batteryTempCompLowStopVoltage, vpwrDcPowerDcAcInverter=vpwrDcPowerDcAcInverter, vpwrBoostAdminState=vpwrBoostAdminState, vpwrBayctrlFwVersion=vpwrBayctrlFwVersion, vpwrTrapModuleFailAlarm=vpwrTrapModuleFailAlarm, vpwrDcDcConverterConfigGroup=vpwrDcDcConverterConfigGroup, vpwrPanelModuleFwVersion=vpwrPanelModuleFwVersion, vpwrLvdContactorState=vpwrLvdContactorState, vpwrTrapThermalProbeAlarm=vpwrTrapThermalProbeAlarm, vpwrAlarmsPresent=vpwrAlarmsPresent, vpwrLvdContactorReconnectSetpoint=vpwrLvdContactorReconnectSetpoint, vpwrDcPowerModuleIdent=vpwrDcPowerModuleIdent, vpwrSystemInternalTemperature=vpwrSystemInternalTemperature, thermalProbeEntry=thermalProbeEntry, batteryTempCompHighStartTemperature=batteryTempCompHighStartTemperature, thermalProbeTable=thermalProbeTable, vpwrSystemIdentGroup=vpwrSystemIdentGroup, vpwrRectifierConfigGroup=vpwrRectifierConfigGroup, vpwrDcPowerTrio=vpwrDcPowerTrio, vpwrSystemType=vpwrSystemType, vpwrTrapIShareAlarm=vpwrTrapIShareAlarm, vpwrTrapLoginSuccess=vpwrTrapLoginSuccess, vpwrTrapDistributionCommAlarm=vpwrTrapDistributionCommAlarm, vpwrTrapCfgChange=vpwrTrapCfgChange, vpwrTrapUserIpAddress=vpwrTrapUserIpAddress, sysRelayAlarmSeverity=sysRelayAlarmSeverity, vpwrRectAlarmDCFail=vpwrRectAlarmDCFail, vpwrSystemPanelIdentGroup=vpwrSystemPanelIdentGroup, vpwrSystemConfigGroup=vpwrSystemConfigGroup, vpwrTrapThermalCompActive=vpwrTrapThermalCompActive, vpwrLvdTestGroup=vpwrLvdTestGroup, vpwrPanelModuleOID=vpwrPanelModuleOID, vpwrTrapInternalTempAlarmCleared=vpwrTrapInternalTempAlarmCleared, vpwrTrapSystemClockChange=vpwrTrapSystemClockChange, vpwrRectAlarmModDisableShutdown=vpwrRectAlarmModDisableShutdown, vpwrRingerAlarmAOTemp=vpwrRingerAlarmAOTemp, batteryTempCompHighSlope=batteryTempCompHighSlope, sysAuxAlarmSeverity=sysAuxAlarmSeverity, vpwrBDTAlarmVoltage=vpwrBDTAlarmVoltage, PYSNMP_MODULE_ID=vpwrDcPowerMgt, vpwrPanelModuleOperStatus=vpwrPanelModuleOperStatus, vpwrRectifierCurrentLimitAdminState=vpwrRectifierCurrentLimitAdminState, vpwrBDTAlarmCoefficient=vpwrBDTAlarmCoefficient, vpwrRingerTestGroup=vpwrRingerTestGroup, vpwrTrapCommunityString=vpwrTrapCommunityString, vpwrSystemShelfCapacity=vpwrSystemShelfCapacity, vpwrDcPowerSnmpConfig=vpwrDcPowerSnmpConfig, vpwrModuleIdentEntry=vpwrModuleIdentEntry, vpwrPanelModuleIdentTable=vpwrPanelModuleIdentTable, vpwrPanelModuleIdentEntry=vpwrPanelModuleIdentEntry, vpwrRingerAlarmBOverCurrent=vpwrRingerAlarmBOverCurrent, vpwrBDTDuration=vpwrBDTDuration, vpwrIoModuleTestGroup=vpwrIoModuleTestGroup, vpwrLvdContactorReconnectDelayTimer=vpwrLvdContactorReconnectDelayTimer, vpwrBayIndex=vpwrBayIndex, vpwrTrapIpIndex=vpwrTrapIpIndex, vpwrLvdAlarmCBOpen=vpwrLvdAlarmCBOpen, vpwrPanelModuleOperHours=vpwrPanelModuleOperHours, vpwrDcPowerTrapsMsgString=vpwrDcPowerTrapsMsgString, vpwrDcAcInverterConfigGroup=vpwrDcAcInverterConfigGroup, vpwrTrapConverterInputFailAlarm=vpwrTrapConverterInputFailAlarm, sysAlarmSeverity=sysAlarmSeverity, vpwrTrapLVDWarningAlarm=vpwrTrapLVDWarningAlarm, vpwrRingerParameterAcVoltage=vpwrRingerParameterAcVoltage, vpwrBayctrlOperStatus=vpwrBayctrlOperStatus, batteryTempCompensation=batteryTempCompensation, vpwrTrapLogout=vpwrTrapLogout, vpwrTrapLoginFail=vpwrTrapLoginFail, vpwrSystemHVAlarmSetpoint=vpwrSystemHVAlarmSetpoint, vpwrDcPowerAlarmGroup=vpwrDcPowerAlarmGroup, batteryTempCompRunawayTemperature=batteryTempCompRunawayTemperature, vpwrTrapLVDOpenAlarm=vpwrTrapLVDOpenAlarm, vpwrRectAlarmBoostFail=vpwrRectAlarmBoostFail, vpwrDcAcInverterAlarmGroup=vpwrDcAcInverterAlarmGroup, vpwrTrapUnmappedAddressAlarm=vpwrTrapUnmappedAddressAlarm, vpwrRectAlarmIntTemp=vpwrRectAlarmIntTemp, vpwrLvdContactorWarningSetpoint=vpwrLvdContactorWarningSetpoint, vpwrTrapSwDownloadNoReboot=vpwrTrapSwDownloadNoReboot, vpwrModuleFwVersion=vpwrModuleFwVersion, vpwrPanelModuleIndex=vpwrPanelModuleIndex, vpwrBatteryBoostGroup=vpwrBatteryBoostGroup, sysRelayConfigEntry=sysRelayConfigEntry, vpwrAlarmDescr=vpwrAlarmDescr, vpwrPanelModuleSerialNumber=vpwrPanelModuleSerialNumber, vpwrLvdWarningSetpoint=vpwrLvdWarningSetpoint, vpwrRingerParameterEntry=vpwrRingerParameterEntry, vpwrSystemBayctrlIdentGroup=vpwrSystemBayctrlIdentGroup, vpwrTrapSwDownloadAndReboot=vpwrTrapSwDownloadAndReboot, vpwrSystemParameterGroup=vpwrSystemParameterGroup, vpwrTrapCriticality=vpwrTrapCriticality, vpwrRectAlarmShortPinShutdown=vpwrRectAlarmShortPinShutdown, vpwrBattetyCurrentLimitValue=vpwrBattetyCurrentLimitValue, vpwrRectAlarmDCEnable=vpwrRectAlarmDCEnable, vpwrRectAlarmLowVoltage=vpwrRectAlarmLowVoltage, sysAlarmOperStatus=sysAlarmOperStatus, vpwrBatteryTempUThreshold=vpwrBatteryTempUThreshold, vpwrRingerParameterAdminState=vpwrRingerParameterAdminState, batteryTempCompRunawayStopVoltage=batteryTempCompRunawayStopVoltage, vpwrPanelModuleTestDate=vpwrPanelModuleTestDate, vpwrTrapBatteryDischargeTestAlarm=vpwrTrapBatteryDischargeTestAlarm, vpwrRingerParameterTable=vpwrRingerParameterTable, vpwrTrapRingerBAlarm=vpwrTrapRingerBAlarm, vpwrTrapBatteryRechgIlimitFailAlarm=vpwrTrapBatteryRechgIlimitFailAlarm, vpwrTrapIpAddress=vpwrTrapIpAddress, sysAlarmComFailState=sysAlarmComFailState, vpwrModuleIdentTable=vpwrModuleIdentTable, vpwrLvdContactorConfigEntry=vpwrLvdContactorConfigEntry, batteryTempCompLowStartTemperature=batteryTempCompLowStartTemperature, vpwrDcPowerSystem=vpwrDcPowerSystem, vpwrTrapSystemOverTemperatureAlarm=vpwrTrapSystemOverTemperatureAlarm, vpwrTrapSystemOK=vpwrTrapSystemOK, sysAlarmToRelayMapping=sysAlarmToRelayMapping, vpwrSystemControllerState=vpwrSystemControllerState, vpwrSystemCurrent=vpwrSystemCurrent, vpwrLvdDisconnectSetpoint=vpwrLvdDisconnectSetpoint, vpwrTrapModuleRemoved=vpwrTrapModuleRemoved, vpwrRingerAlarmaBFailed=vpwrRingerAlarmaBFailed, vpwrSystemTempCompStopVoltage=vpwrSystemTempCompStopVoltage, vpwrTrapAuxAlarm=vpwrTrapAuxAlarm, vpwrBayctrlTestDate=vpwrBayctrlTestDate, vpwrSystemInternalTempUThreshold=vpwrSystemInternalTempUThreshold, vpwrLvdConfigGroup=vpwrLvdConfigGroup, vpwrBayctrlIdentEntry=vpwrBayctrlIdentEntry, vpwrTrapModuleAlarm=vpwrTrapModuleAlarm, vpwrBDTOperState=vpwrBDTOperState, vpwrBayctrlSerialNumber=vpwrBayctrlSerialNumber, vpwrSystemTempCompStartTemperature=vpwrSystemTempCompStartTemperature, sysAuxAlarmDefaultName=sysAuxAlarmDefaultName, vpwrSystemTempCompensation=vpwrSystemTempCompensation, vpwrTrapDisplayFirmwareMismatchAlarm=vpwrTrapDisplayFirmwareMismatchAlarm, sysAlarmCustomName=sysAlarmCustomName, vpwrBayctrlModuleIdentTable=vpwrBayctrlModuleIdentTable, vpwrBayctrlOID=vpwrBayctrlOID, sysAuxAlarmConfigTable=sysAuxAlarmConfigTable, vpwrDcPowerBayController=vpwrDcPowerBayController, vpwrRectAlarmFanFail=vpwrRectAlarmFanFail, vpwrIdentName=vpwrIdentName, batteryTempCompLowSlope=batteryTempCompLowSlope, vpwrModuleSerialNumber=vpwrModuleSerialNumber, vpwrTrapLvdFuseOpen=vpwrTrapLvdFuseOpen, vpwrBayctrlOperHours=vpwrBayctrlOperHours, vpwrRingerConfigGroup=vpwrRingerConfigGroup, vpwrTrapMultipleModuleFailAlarm=vpwrTrapMultipleModuleFailAlarm, vpwrModuleCurrent=vpwrModuleCurrent, vpwrTrapEventTimeStamp=vpwrTrapEventTimeStamp, vpwrModuleModelNumber=vpwrModuleModelNumber, vpwrPanelIdentTable=vpwrPanelIdentTable, vpwrRectAlarmReserved=vpwrRectAlarmReserved, vpwrRectifierHVSDSetpoint=vpwrRectifierHVSDSetpoint, vpwrTrapThermalRunaway=vpwrTrapThermalRunaway, vpwrRingerAlarmaAFailed=vpwrRingerAlarmaAFailed, vpwrWriteCommunityString=vpwrWriteCommunityString, vpwrTrapBatteryTempAlarmSet=vpwrTrapBatteryTempAlarmSet, vpwrDcPowerTraps=vpwrDcPowerTraps, vpwrAlarmTime=vpwrAlarmTime, sysAlarmConfigTable=sysAlarmConfigTable, vpwrDcPowerProducts=vpwrDcPowerProducts, vpwrPanelModuleModelNumber=vpwrPanelModuleModelNumber, vpwrTrapModuleInserted=vpwrTrapModuleInserted, vpwrTrapAdminPwdChange=vpwrTrapAdminPwdChange, vpwrBayctrlModelNumber=vpwrBayctrlModelNumber, vpwrLvdContactorDisconnectSetpoint=vpwrLvdContactorDisconnectSetpoint, vpwrRectifierCurrentLimit=vpwrRectifierCurrentLimit, PositiveInteger=PositiveInteger, vpwrRingerParameterDcVoltage=vpwrRingerParameterDcVoltage, sysAuxAlarmCustomName=sysAuxAlarmCustomName, vpwrIoModuleAlarmGroup=vpwrIoModuleAlarmGroup, vpwrTrapPowerMajorAlarm=vpwrTrapPowerMajorAlarm, vpwrRingerAlarmBOverTemp=vpwrRingerAlarmBOverTemp, vpwrTrapIllegalConfigSubmit=vpwrTrapIllegalConfigSubmit, vpwrAlarmIndex=vpwrAlarmIndex, sysAlarmRedundancyState=sysAlarmRedundancyState, vpwrPanelIdentEntry=vpwrPanelIdentEntry, vpwrBDTAbortVoltage=vpwrBDTAbortVoltage, vpwrTrapACFAlarm=vpwrTrapACFAlarm, sysAuxAlarmOperStatus=sysAuxAlarmOperStatus, vpwrTrapHVSDAlarm=vpwrTrapHVSDAlarm, vpwrTrapConverterAlarm=vpwrTrapConverterAlarm, vpwrBatteryCurrentGroup=vpwrBatteryCurrentGroup, vpwrDcPowerBatteryGroup=vpwrDcPowerBatteryGroup, vpwrSystemBDAlarmSetpoint=vpwrSystemBDAlarmSetpoint, vpwrTrapSystemRedundancyAlarm=vpwrTrapSystemRedundancyAlarm, vpwrDcPowerRectifier=vpwrDcPowerRectifier, sysRelayConfigTable=sysRelayConfigTable, vpwrLvdReconnectDelayTimer=vpwrLvdReconnectDelayTimer, vpwrModuleOperHours=vpwrModuleOperHours)
mibBuilder.exportSymbols("VALERE-DC-POWER-MIB", vpwrTrapModuleCommAlarm=vpwrTrapModuleCommAlarm, vpwrTrapThermalCompInactive=vpwrTrapThermalCompInactive, vpwrRectAlarmHVSD=vpwrRectAlarmHVSD, vpwrTrapEntry=vpwrTrapEntry, vpwrBatteryTempLThreshold=vpwrBatteryTempLThreshold, batteryTempCompSenseSource=batteryTempCompSenseSource, vpwrTrapRingerAAlarm=vpwrTrapRingerAAlarm, sysRelayCustomName=sysRelayCustomName, vpwrRectAlarmUV=vpwrRectAlarmUV, vpwrBatteryDischargeTestGroup=vpwrBatteryDischargeTestGroup, vpwrTrapSystemAlive=vpwrTrapSystemAlive, vpwrDcPowerTest=vpwrDcPowerTest, vpwrBattetyCurrentValue=vpwrBattetyCurrentValue, vpwrRingerAlarmGroup=vpwrRingerAlarmGroup, vpwrTrapMultipleConvFailAlarm=vpwrTrapMultipleConvFailAlarm, vpwrSystemTempCompensationSlope=vpwrSystemTempCompensationSlope, vpwrModuleCapacity=vpwrModuleCapacity, vpwrSystemIdentEntry=vpwrSystemIdentEntry, sysAuxAlarmConfigEntry=sysAuxAlarmConfigEntry, vpwrAlarmEntry=vpwrAlarmEntry, vpwrDcPowerMgt=vpwrDcPowerMgt, vpwrSystemTempCompensationState=vpwrSystemTempCompensationState, vpwrDcPowerRinger=vpwrDcPowerRinger, vpwrIoModuleConfigGroup=vpwrIoModuleConfigGroup, vpwrBayctrlIdentTable=vpwrBayctrlIdentTable, vpwrDcPowerDist=vpwrDcPowerDist, vpwrSystemIdentTable=vpwrSystemIdentTable, vpwrLvdContactorIndex=vpwrLvdContactorIndex, vpwrTrapClearEventHistory=vpwrTrapClearEventHistory, vpwrModuleOID=vpwrModuleOID, vpwrSystemInternalTempLThreshold=vpwrSystemInternalTempLThreshold, vpwrBatteryTempIndex=vpwrBatteryTempIndex, vpwrTrapMultipleRingerAlarm=vpwrTrapMultipleRingerAlarm, vpwrBoostVoltage=vpwrBoostVoltage, vpwrBoostOperState=vpwrBoostOperState, vpwrBayctrlModuleIdentEntry=vpwrBayctrlModuleIdentEntry, sysAlarmDefaultName=sysAlarmDefaultName, vpwrTrapDistAlarm=vpwrTrapDistAlarm, vpwrIdentManufacturer=vpwrIdentManufacturer, batteryTempCompHighStopVoltage=batteryTempCompHighStopVoltage, vpwrIdentModel=vpwrIdentModel, vpwrLvdContactorConfigTable=vpwrLvdContactorConfigTable)
