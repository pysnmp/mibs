#
# PySNMP MIB module IEEE8021-EVB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-EVB-MIB
# Produced by pysmi-1.1.12 at Mon Jul 22 05:57:20 2024
# On host fv-az700-995 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ieee8021BridgePhyPort, = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPort")
ieee802dot1mibs, IEEE8021PbbComponentIdentifier, IEEE8021BridgePortNumber = mibBuilder.importSymbols("IEEE8021-TC-MIB", "ieee802dot1mibs", "IEEE8021PbbComponentIdentifier", "IEEE8021BridgePortNumber")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
MibIdentifier, Counter64, Bits, IpAddress, TimeTicks, ModuleIdentity, Counter32, Gauge32, Integer32, ObjectIdentity, iso, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "Bits", "IpAddress", "TimeTicks", "ModuleIdentity", "Counter32", "Gauge32", "Integer32", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
RowStatus, DisplayString, TextualConvention, StorageType, MacAddress, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "StorageType", "MacAddress", "TruthValue")
ieee8021BridgeEvbMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 24))
ieee8021BridgeEvbMib.setRevisions(('2018-06-21 00:00', '2014-12-15 00:00', '2012-02-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.\n            ieee8021BridgeEvbVSIMvFormat added.\n            ieee8021BridgeEvbVsiMgrID16 added and \n            ieee8021BridgeEvbVsiMgrID deprecated.\n            ieee8021BridgeEvbVDPCounterDiscontinuity description\n            clarified. Conformance and groups fixed.\n            Fixed maintenance item to IEEE Std 802.1Qbg-2012.', 'Initial version published in IEEE Std 802.1Qbg.',))
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setLastUpdated('201806210000Z')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setContactInfo('  WG-URL: http://www.ieee802.org/1/\n          WG-EMail: stds-802-1-L@ieee.org\n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021BridgeEvbMib.setDescription('The EVB MIB module for managing devices that support\n        Edge Virtual Bridging.\n\n        Unless otherwise indicated, the references in this MIB\n        module are to IEEE Std 802.1Q.\n\n        Copyright (C) IEEE (2018).\n        This version of this MIB module is part of IEEE Std 802.1Q;\n        see the draft itself for full legal notices.')
ieee8021BridgeEvbNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 0))
ieee8021BridgeEvbObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 1))
ieee8021BridgeEvbConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2))
ieee8021BridgeEvbSys = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 1, 1))
ieee8021BridgeEvbSysType = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("evbBridge", 1), ("evbStation", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysType.setReference('5.23,5.24')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysType.setDescription('The evbSysType determines if this is an EVB Bridge \n                  or EVB station.')
ieee8021BridgeEvbSysNumExternalPorts = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumExternalPorts.setReference('12.4.2, 12.5.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumExternalPorts.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysNumExternalPorts.setDescription('The evbSysNumExternalPorts parameter indicates how \n                  many externally accessible port are available.')
ieee8021BridgeEvbSysEvbLldpTxEnable = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpTxEnable.setReference('D.2.12')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpTxEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpTxEnable.setDescription("This object is used to initialize the LLDP EVB \n                  objects for new SBPs and URPS.\n                  When set to 'true' a new SBP or URP will place the local\n                  EVB objects in the LLDP nearest Customer database;\n                  when set to 'false' a new SBP or URP will not place\n                  the local EVB objects in the LLDP database.")
ieee8021BridgeEvbSysEvbLldpManual = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpManual.setReference('D.2.12')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpManual.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpManual.setDescription("This object is used to initialize the LLDP EVB \n                  objects for new SBPs and URPS.\n                  When set to 'false' the operating configuration\n                  will be determined by the comparison between \n                  the local and remote LLDP EVB objects \n                  (automatic), regardless of the setting of \n                  ieee8021BridgeEvbSysLldpTxEnable. \n                  When ieee8021BridgeEvbSysLldpManual is 'true' the\n                  configuration will be determined by the setting\n                  of the local EVB objects only (manual).")
ieee8021BridgeEvbSysEvbLldpGidCapable = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpGidCapable.setReference('D.2.12')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpGidCapable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEvbLldpGidCapable.setDescription('The value of this object is used as the default \n                  value of the BGID or SGID bit of the EVB LLDP TLV string.')
ieee8021BridgeEvbSysEcpAckTimer = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpAckTimer.setReference('D.2.12.6, 43.3.6.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpAckTimer.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpAckTimer.setDescription('A value indicating the  Bridge Proposed ECP ackTimer.')
ieee8021BridgeEvbSysEcpDfltAckTimerExp = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpDfltAckTimerExp.setReference('D.2.12.6, 43.3.6.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpDfltAckTimerExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpDfltAckTimerExp.setDescription('The exponent of 2 indicating the  Bridge Proposed ECP ackTimer\n        in tens of microseconds.')
ieee8021BridgeEvbSysEcpMaxRetries = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpMaxRetries.setReference('D.2.12.5, 43.3.7.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysEcpMaxRetries.setDescription('A value indicating the Bridge ECP maxRetries.')
ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setReference('D.2.12, 41.5.5.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay.setDescription('A value indicating the  Bridge Resource VDP Timeout.')
ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp.setReference('D.2.12, 41.5.5.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp.setDescription('The exponent of 2 indicating the  Bridge Resource VDP \n     Timeout in tens of microseconds.')
ieee8021BridgeEvbSysVdpDfltReinitKeepAlive = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setReference('D.2.12, 41.5.5.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAlive.setDescription('A value indicating the Bridge Proposed VDP Keep Alive Timeout.')
ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp = MibScalar((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp.setReference('D.2.12, 41.5.5.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp.setDescription('The exponent of 2 indicating the Bridge Proposed VDP Keep\n     Alive Timeout in tens of microseconds.')
ieee8021BridgeEvbSbpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10), )
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpTable.setReference('12.26.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpTable.setDescription('A table that contains Station-facing Bridge Port (SBP) \n          details.')
ieee8021BridgeEvbSbpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1), ).setIndexNames((0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpComponentID"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpPortNumber"))
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpEntry.setDescription('A list of objects describing SBP.')
ieee8021BridgeEvbSbpComponentID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpComponentID.setReference('12.4.1.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpComponentID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpComponentID.setDescription('The SBP component ID')
ieee8021BridgeEvbSbpPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpPortNumber.setReference('12.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpPortNumber.setDescription('The SBP port number.')
ieee8021BridgeEvbSbpLldpManual = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpLldpManual.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpLldpManual.setDescription('The evbSbpLldpManual parameter switches EVB TLVs to manual mode. \n    In manual mode the running parameters are determined solely from\n    the local LLDP database values.')
ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 4), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay.setReference('D.2.12, 41.5.5.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay.setDescription('The value used to initialize the waitWhile timer \n                (41.5.5.7) by the station VDP state machine when\n                the state machine is waiting for a response.')
ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp.setReference('D.2.12, 41.5.5.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp.setDescription('The exponent of 2 used to calculate the value to initialize\n                the waitWhile timer \n                (41.5.5.7) by the station VDP state machine when\n                the state machine is waiting for a response.')
ieee8021BridgeEvbSbpVdpOperReinitKeepAlive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 5), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAlive.setReference('D.2.12, 41.5.5.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAlive.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAlive.setDescription('The value used to initialize the waitWhile timer \n                 (41.5.5.5) by the station VDP state machine in \n                 order to determine when to transmit a keep alive\n                 message.')
ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp.setReference('D.2.12, 41.5.5.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp.setDescription('The exponent of 2 used to calculate the value to initialize\n                 the waitWhile timer \n                 (41.5.5.5) by the station VDP state machine in \n                 order to determine when to transmit a keep alive\n                 message.')
ieee8021BridgeEvbSbpVdpOperToutKeepAlive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 1, 10, 1, 6), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperToutKeepAlive.setReference('D.2.12, 41.5.5.13')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperToutKeepAlive.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpVdpOperToutKeepAlive.setDescription('The value used to initialize the waitWhile timer\n                 (41.5.5.13) by the EVBCB VDP state machine in order to\n                 determine when to transmit a keep alive message.')
ieee8021BridgeEvbVSIDBObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 1, 2))
ieee8021BridgeEvbVSIDBTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1), )
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setReference('12.26.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBTable.setDescription('A table that contains database of the active Virtual Station \n         Interfaces.')
ieee8021BridgeEvbVSIDBEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1), ).setIndexNames((0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIComponentID"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIPortNumber"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIIDType"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIID"))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBEntry.setDescription('A list of objects containing database of the active Virtual Station\n         Interfaces.')
ieee8021BridgeEvbVSIComponentID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setReference('12.4.1.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIComponentID.setDescription('The evbVSIComponentID is the ComponentID for the \n                C-VLAN component of the EVB Bridge or for the edge\n                relay of the EVB station.')
ieee8021BridgeEvbVSIPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setReference('12.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIPortNumber.setDescription('The evbVSIPortNumber is the Port Number for the SBP\n                or URP where the VSI is accessed.')
ieee8021BridgeEvbVSIIDType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("vsiidIpv4", 1), ("vsiidIpv6", 2), ("vsiidMAC", 3), ("vsiidLocal", 4), ("vsiidUUID", 5))))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIIDType.setReference('41.2.6')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIIDType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIIDType.setDescription('This object specifies the VSIID Type for the VSIID in the DCN ')
ieee8021BridgeEvbVSIID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setReference('41.2.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIID.setDescription('This object specifies the VSIID that uniquely identifies the VSI \n    in the DCN ')
ieee8021BridgeEvbVSITimeSinceCreate = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 5), Unsigned32()).setUnits('centi-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setReference('41')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITimeSinceCreate.setDescription('This object specifies the time since creation ')
ieee8021BridgeEvbVsiVdpOperCmd = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preAssociate", 1), ("preAssociateWithRsrcReservation", 2), ("associate", 3), ("deAssociate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setReference('41.2.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiVdpOperCmd.setDescription('This object identifies the type of TLV.')
ieee8021BridgeEvbVsiOperRevert = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setReference('41.2.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperRevert.setDescription('The evbOperRevert status indicator shows the most \n                recent value of the KEEP indicator from the VDP\n                protocol exchange.')
ieee8021BridgeEvbVsiOperHard = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setReference('41.2.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperHard.setDescription('The evbVsiHard status indicator shows the most\n                recent value of the HARD indicator from the VDP\n                protocol exchange.')
ieee8021BridgeEvbVsiOperReason = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("success", 0), ("invalidFormat", 1), ("insufficientResources", 2), ("otherfailure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setReference('41.2.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVsiOperReason.setDescription('This object indicates the outcome of a request.')
ieee8021BridgeEvbVSIMgrID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setReference('41.1.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID.setDescription('This object identifies the VSI Manager with a database that holds\n    the detailed  VSI type and or instance definitions.')
ieee8021BridgeEvbVSIType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setReference('41.2.4')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIType.setDescription(' The VTID is an integer value used to identify\n                 a pre-configured set of  controls and attributes\n                 that are associated with a set of VSIs.')
ieee8021BridgeEvbVSITypeVersion = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setReference('41.2.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSITypeVersion.setDescription('The VSI Type Version is an integer identifier designating the\n   expected/desired VTID version.  The VTID version allows a VSI\n   Manager Database to contain multiple versions of a  given VSI\n   Type, allowing smooth migration to newer VSI types.')
ieee8021BridgeEvbVSIMvFormat = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("basic", 1), ("partial", 2), ("vlanOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setReference('41.2.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMvFormat.setDescription('This object specifies the MAC/VLAN format.\n    basic   - Basic MAC/VLAN format\n    partial - Partial MAC/VLAN format\n    vlanOnly - Vlan-only MAC/VLAN format\n   ')
ieee8021BridgeEvbVSINumMACs = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setReference('41.2.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSINumMACs.setDescription('This object specifies the the number of MAC address/VLAN ID pairs\n   contained in the repeated portion of the MAC/VLANs field in the\n   VDP TLV.')
ieee8021BridgeEvbVDPMachineState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("preAssociate", 1), ("preAssociateWithRsrcReservation", 2), ("associate", 3), ("deAssociate", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setReference('41.5.5.14')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPMachineState.setDescription('This object specifies the VDP state machine. ')
ieee8021BridgeEvbVDPCommandsSucceeded = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setReference('41.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsSucceeded.setDescription('This object specifies the VDP number of successful commands since\n    creation.')
ieee8021BridgeEvbVDPCommandsFailed = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setReference('41.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandsFailed.setDescription('This object specifies the VDP number of failed commands since \n   creation ')
ieee8021BridgeEvbVDPCommandReverts = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setReference('41.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCommandReverts.setDescription('This object specifies the VDP command reverts since creation  ')
ieee8021BridgeEvbVDPCounterDiscontinuity = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 19), TimeTicks()).setUnits('hundredths of a second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCounterDiscontinuity.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVDPCounterDiscontinuity.setDescription('The time (in hundredths of a second) since the\n             last counter discontinuity for any of the counters\n             in the row.')
ieee8021BridgeEvbVSIMgrID16 = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 20), OctetString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID16.setReference('41.1.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID16.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMgrID16.setDescription('This object identifies the VSI Manager with a database that holds\n    the detailed  VSI type and or instance definitions.')
ieee8021BridgeEvbVSIFilterFormat = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vid", 1), ("macVid", 2), ("groupidVid", 3), ("groupidMacVid", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIFilterFormat.setReference('41.2.8, 41.2.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIFilterFormat.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIFilterFormat.setDescription('This object specifies the MAC/VLAN format:\n    vid (see 41.2.9.1)\n    macVid (see 41.2.9.2)\n    groupidVid (see 41.2.9.3)\n    groupidMacVid (see 41.2.9.4)\n   ')
ieee8021BridgeEvbVSIDBMacTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 2), )
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setReference('12.26.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacTable.setDescription('A table that contains database of the active Virtual Station \n        Interfaces.')
ieee8021BridgeEvbVSIDBMacEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 2, 1), ).setIndexNames((0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIComponentID"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIPortNumber"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIIDType"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIID"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbGroupID"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIMac"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBMacEntry.setDescription('A list of objects containing database of the MAC/VLANs \n         associated with Virtual Station Interfaces.')
ieee8021BridgeEvbGroupID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setReference('41.2.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbGroupID.setDescription('Group ID')
ieee8021BridgeEvbVSIMac = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 2, 1, 2), MacAddress())
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setReference('41.2.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIMac.setDescription('The mac-address part of the MAC/VLANs for a VSI.')
ieee8021BridgeEvbVSIVlanId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 2, 2, 1, 3), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIVlanId.setReference('41.2.9')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIVlanId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIVlanId.setDescription('The Vlan ID part of the MAC/VLANs for a VSI.')
ieee8021BridgeEvbSChannelObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 1, 3))
ieee8021BridgeEvbUAPConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1), )
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setReference('12.26.4.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigTable.setDescription('A table that contains  configuration parameters for UAP.')
ieee8021BridgeEvbUAPConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigEntry.setDescription('A list of objects containing information to configure the \n         attributes for UAP.')
ieee8021BridgeEvbUAPComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 1), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPComponentId.setDescription('The ComponentID of the port for the UAP.')
ieee8021BridgeEvbUAPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 2), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPPort.setDescription('The port number of the port for the UAP.')
ieee8021BridgeEvbUapConfigIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUapConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUapConfigIfIndex.setDescription('The value of the instance of the IfIndex object,\n         defined in the IF-MIB, for the interface corresponding\n         to this port, or the value 0 if the port has not been\n         bound to an underlying frame source and sink.')
ieee8021BridgeEvbUAPSchCdcpAdminEnable = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setReference('42.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchCdcpAdminEnable.setDescription('Administrative staus of CDCP.')
ieee8021BridgeEvbUAPSchAdminCDCPRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cdcpRoleB", 1), ("cdcpRoleS", 2))).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setReference('42.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPRole.setDescription("The administratively configured value for the local \n   port's role parameter. The value of AdminRole is not reflected in \n   the S-channel TLV. The AdminRole may take the value S or B. \n   S indicates  the sender is unwilling to accept S-channels \n   configuration  (mode, # channels supported, channel index) from \n   its neighbor and that the sender is willing to accept SVID \n   assignments from the neighbor.  Stations usually take the S role.\n   B indicates the sender is willing to accept  S-channels \n   configuration (mode, # channels supported, channel index)  \n   from its neighbor and that the sender is willing do the best \n   it can to fill  the SVID assignments\n   from the neighbor. Bridges usually take the B role.")
ieee8021BridgeEvbUAPSchAdminCDCPChanCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 167))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setReference('42.4.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPChanCap.setDescription('The administratively configured value for the \n                     Number of Channels supported parameter. This \n                     value is included as the ChanCap parameter in \n                     the S-channel TLV.')
ieee8021BridgeEvbUAPSchOperCDCPChanCap = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 167))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setReference('42.4.8')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperCDCPChanCap.setDescription('The operational value for the Number of Channels \n                   supported parameter. This value is included  \n                   as the ChnCap parameter in the S-channel TLV.')
ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 8), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setReference('42.4.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow.setDescription('Determines the lowest S-VIDs available for \n                     assignment by CDCP.')
ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 9), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setReference('42.4.7')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh.setDescription('Determines the highest S-VIDs available for\n                     assignment by CDCP.')
ieee8021BridgeEvbUAPSchOperState = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("running", 1), ("notRunning", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setReference('42.4.14')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPSchOperState.setDescription('The current runnning state of CDCP.')
ieee8021BridgeEvbSchCdcpRemoteEnabled = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setReference('42.4.14')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteEnabled.setDescription('CDCP state for the remote S-channel.')
ieee8021BridgeEvbSchCdcpRemoteRole = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cdcpRoleB", 1), ("cdcpRoleS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setReference('42.4.12')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchCdcpRemoteRole.setDescription("The  value for the remote port's role parameter.")
ieee8021BridgeEvbUAPConfigStorageType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 13), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigStorageType.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigStorageType.setDescription('The storage type for this row. Rows in this table that\n         were created through an external process may have a storage\n         type of readOnly or permanent.\n         For a storage type of permanent, none of the columns have\n         to be writable.')
ieee8021BridgeEvbUAPConfigRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 1, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPConfigRowStatus.setDescription('RowStatus for creating a UAP table entry.')
ieee8021BridgeEvbCAPConfigTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2), )
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setReference('12.26.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigTable.setDescription('A table that contains  configuration information for \n   the S-Channel Access Ports (CAP).')
ieee8021BridgeEvbCAPConfigEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgePhyPort"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbSchID"))
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigEntry.setDescription('A list of objects containing information for the S-Channel \n    Access Ports (CAP)')
ieee8021BridgeEvbSchID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: ieee8021BridgeEvbSchID.setReference('42.4.3')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSchID.setDescription('This object represents the SVID for a ieee8021BridgeEvbSysType \n    of evbBridge and a SCID(S-Channel ID) for a \n    ieee8021BridgeEvbSysType of evbStation.')
ieee8021BridgeEvbCAPComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 2), IEEE8021PbbComponentIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPComponentId.setDescription('Component ID for S-channel Access Port.')
ieee8021BridgeEvbCapConfigIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCapConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCapConfigIfIndex.setDescription('The value of the instance of the IfIndex object,\n         defined in the IF-MIB, for the interface corresponding\n         to this port, or the value 0 if the port has not been\n         bound to an underlying frame source and sink.\n         The underlying IfEntry indexed by this column MUST be persistent\n         across reinitializations of the management system.')
ieee8021BridgeEvbCAPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 4), IEEE8021BridgePortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPPort.setDescription('Port number for the S-Channel Access Port.')
ieee8021BridgeEvbCAPSChannelID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setReference('42.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPSChannelID.setDescription('S-Channel ID (SCID) for this CAP.')
ieee8021BridgeEvbCAPAssociateSBPOrURPCompID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 6), IEEE8021PbbComponentIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPCompID.setReference('12.4.1.5')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPCompID.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPCompID.setDescription('Component ID of the Server Edge Port to be \n                associated with the CAP.')
ieee8021BridgeEvbCAPAssociateSBPOrURPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 7), IEEE8021BridgePortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPPort.setReference('12.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPAssociateSBPOrURPPort.setDescription('Port number of the Server Edge Port to be \n   associated with the CAP.')
ieee8021BridgeEvbCAPRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPRowStatus.setDescription('RowStatus to create/destroy this table.')
ieee8021BridgeEvbURPTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3), )
if mibBuilder.loadTexts: ieee8021BridgeEvbURPTable.setReference('12.26.5.1')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPTable.setDescription('A table that contains  configuration information for \n   the Uplink Relay Ports(URP).')
ieee8021BridgeEvbURPEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1), ).setIndexNames((0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPComponentId"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbURPEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPEntry.setDescription('A list of objects containing information for the Uplink \n    Relay Ports(URP).')
ieee8021BridgeEvbURPComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeEvbURPComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPComponentId.setDescription('Component ID that the URP belongs to.')
ieee8021BridgeEvbURPPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbURPPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPPort.setDescription('port number of the urp.')
ieee8021BridgeEvbURPIfIndex = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPIfIndex.setDescription('The value of the instance of the IfIndex object,\n         defined in the IF-MIB, for the interface corresponding\n         to this port, or the value 0 if the port has not been\n         bound to an underlying frame source and sink.\n\n         It is an implementation specific decision as to whether\n         this object may be modified if it has been created or\n         if 0 is a legal value.\n\n         The underlying IfEntry indexed by this column MUST be \n         persistent across reinitializations of the management\n         system. ')
ieee8021BridgeEvbURPBindToISSPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 4), IEEE8021BridgePortNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPBindToISSPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPBindToISSPort.setDescription('The evbURPBindToISSPort is the ISS Port Number where \n                 the URP is attached. \n                 This binding is optional and only required in some \n                 systems.')
ieee8021BridgeEvbURPLldpManual = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPLldpManual.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPLldpManual.setDescription('The evbUrpLldpManual parameter control how the EVB\n                  TLV determines the operating values for parameters.\n                  When set TRUE only the local EVB TLV will be used to \n                  determine the parameters.')
ieee8021BridgeEvbURPVdpOperRsrcWaitDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 9), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRsrcWaitDelay.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRsrcWaitDelay.setDescription('The parameter evbURPVdpOperRsrcWaitDelay is the \n                  exponent of 2 used to set the VDP resourceWaitDelay\n                  timer at the EVB Bridge.')
ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp.setDescription('The parameter evbURPVdpOperRsrcWaitDelay is the \n                  exponent of 2 used to set the VDP resourceWaitDelay\n                  timer at the EVB Bridge.')
ieee8021BridgeEvbURPVdpOperRespWaitDelay = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 10), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRespWaitDelay.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperRespWaitDelay.setDescription('The evbUrpVdpOperRespWaitDelay is how long a \n                  EVb station VDP will wait for a response from \n                  the EVB Bridge VDP.')
ieee8021BridgeEvbURPVdpOperReinitKeepAlive = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 11), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperReinitKeepAlive.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperReinitKeepAlive.setDescription('The evbURPVdpOperReinitKeepAlive is the exponent \n                  of 2 used to determine the time interval of Keep \n                  Alives transmitted by the EVB station.')
ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp.setDescription('The evbURPVdpOperReinitKeepAlive is the exponent \n                  of 2 used to determine the time interval of Keep \n                  Alives transmitted by the EVB station.')
ieee8021BridgeEvbEcpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4), )
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTable.setReference('12.26.4.2')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTable.setDescription('A table that contains  configuration information for \n    the Edge Control Protocol (ECP).')
ieee8021BridgeEvbEcpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1), ).setIndexNames((0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpComponentId"), (0, "IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpPort"))
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpEntry.setDescription('A list of objects containing information for theEdge Control\n     Protocol (ECP).')
ieee8021BridgeEvbEcpComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 1), IEEE8021PbbComponentIdentifier())
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpComponentId.setDescription('Component ID .')
ieee8021BridgeEvbEcpPort = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 2), IEEE8021BridgePortNumber())
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpPort.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpPort.setDescription('Port number.')
ieee8021BridgeEvbEcpOperAckTimerInit = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 3), Unsigned32()).setUnits('micro-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperAckTimerInit.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperAckTimerInit.setDescription('The initial value used to initialize ackTimer \n                       (43.3.6.1).')
ieee8021BridgeEvbEcpOperAckTimerInitExp = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperAckTimerInitExp.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperAckTimerInitExp.setDescription('The initial value used to initialize ackTimer. \n                  Expressed as exp where 10*2exp microseconds is the\n                  duration of the ack timer(43.3.6.1).')
ieee8021BridgeEvbEcpOperMaxRetries = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpOperMaxRetries.setDescription('This integer variable defines the maximum number\n                   of times that the ECP transmit state machine will\n                   retry a transmission if no ACK is received.')
ieee8021BridgeEvbEcpTxFrameCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxFrameCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxFrameCount.setDescription('The evbECPTxFrameCount is the number of ECP frame\n                  transmitted since ECP was instanciated.')
ieee8021BridgeEvbEcpTxRetryCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxRetryCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxRetryCount.setDescription('The evbECPTxRetryCount is the number of times \n                   ECP re-tried transmission since ECP was \n                   instanciated.')
ieee8021BridgeEvbEcpTxFailures = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxFailures.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpTxFailures.setDescription('The evbECPTxFailures is the number of times ECP \n                  failed to successfully deliver a frame since ECP\n                  was instanciated.')
ieee8021BridgeEvbEcpRxFrameCount = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 24, 1, 3, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpRxFrameCount.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpRxFrameCount.setDescription('The evbECPRxFrameCount is the number\n                   of frames received since ECP was instanciated.')
ieee8021BridgeEvbGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2, 1))
ieee8021BridgeEvbCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 24, 2, 2))
ieee8021BridgeEvbSysGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 1)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysType"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysNumExternalPorts"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpTxEnable"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpGidCapable"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEcpAckTimer"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEcpMaxRetries"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysVdpDfltReinitKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbSysGroup = ieee8021BridgeEvbSysGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysGroup.setDescription('The collection of objects used to represent a EVB \n         management objects.')
ieee8021BridgeEvbSbpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 3)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperReinitKeepAlive"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperToutKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbSbpGroup = ieee8021BridgeEvbSbpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpGroup.setDescription('The collection of objects used to represent a SBP \n    management objects.')
ieee8021BridgeEvbVSIDBGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 4)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSITimeSinceCreate"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiVdpOperCmd"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperRevert"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperHard"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperReason"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIMgrID"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIType"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSITypeVersion"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIMvFormat"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSINumMACs"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPMachineState"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandsSucceeded"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandsFailed"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandReverts"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCounterDiscontinuity"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbVSIDBGroup = ieee8021BridgeEvbVSIDBGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBGroup.setDescription('The collection of objects used to represent a EVB VSI\n         DB table.')
ieee8021BridgeEvbUAPGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 5)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPComponentId"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPPort"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUapConfigIfIndex"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchCdcpAdminEnable"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPRole"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPChanCap"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchOperCDCPChanCap"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPSchOperState"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSchCdcpRemoteEnabled"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSchCdcpRemoteRole"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPConfigStorageType"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbUAPGroup = ieee8021BridgeEvbUAPGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbUAPGroup.setDescription('The collection of objects used to represent a EVB UAP \n          table.')
ieee8021BridgeEvbCAPConfigGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 6)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPComponentId"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCapConfigIfIndex"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPPort"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPSChannelID"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPAssociateSBPOrURPCompID"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPAssociateSBPOrURPPort"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbCAPConfigGroup = ieee8021BridgeEvbCAPConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbCAPConfigGroup.setDescription('The collection of objects used to represent a EVB \n             CAP management objects.')
ieee8021BridgeEvbsURPGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 7)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPIfIndex"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPBindToISSPort"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperRsrcWaitDelay"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperRespWaitDelay"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperReinitKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsURPGroup = ieee8021BridgeEvbsURPGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbsURPGroup.setDescription('The collection of objects used to represent a EVBS URP \n           management objects.')
ieee8021BridgeEvbEcpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 8)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpOperAckTimerInit"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpOperMaxRetries"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxFrameCount"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxRetryCount"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxFailures"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpRxFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbEcpGroup = ieee8021BridgeEvbEcpGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpGroup.setDescription('The collection of objects used to represent a EVB CAP \n       management objects.')
ieee8021BridgeEvbSysV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 9)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysType"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysNumExternalPorts"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpTxEnable"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpGidCapable"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEvbLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEcpDfltAckTimerExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysEcpMaxRetries"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbSysV2Group = ieee8021BridgeEvbSysV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSysV2Group.setDescription('The collection of objects used to represent a EVB \n         management objects.')
ieee8021BridgeEvbSbpV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 10)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpVdpOperToutKeepAlive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbSbpV2Group = ieee8021BridgeEvbSbpV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbSbpV2Group.setDescription('The collection of objects used to represent a SBP \n    management objects.')
ieee8021BridgeEvbVSIDBV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 11)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSITimeSinceCreate"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiVdpOperCmd"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperRevert"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperHard"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVsiOperReason"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIMgrID16"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIType"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSITypeVersion"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIFilterFormat"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSINumMACs"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPMachineState"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandsSucceeded"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandsFailed"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCommandReverts"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVDPCounterDiscontinuity"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIVlanId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbVSIDBV2Group = ieee8021BridgeEvbVSIDBV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbVSIDBV2Group.setDescription('The collection of objects used to represent a EVB VSI\n         DB table.')
ieee8021BridgeEvbsURPV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 12)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPIfIndex"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPBindToISSPort"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPLldpManual"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperRespWaitDelay"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsURPV2Group = ieee8021BridgeEvbsURPV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbsURPV2Group.setDescription('The collection of objects used to represent a EVBS URP \n           management objects.')
ieee8021BridgeEvbEcpV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 24, 2, 1, 13)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpOperAckTimerInitExp"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpOperMaxRetries"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxFrameCount"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxRetryCount"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpTxFailures"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpRxFrameCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbEcpV2Group = ieee8021BridgeEvbEcpV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbEcpV2Group.setDescription('The collection of objects used to represent a EVB CAP \n       management objects.')
ieee8021BridgeEvbbCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 1)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIDBGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbbCompliance = ieee8021BridgeEvbbCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbbCompliance.setDescription('The compliance statement for devices supporting EVB\n        as defined in IEEE 802.1Q.')
ieee8021BridgeEvbsCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 2)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIDBGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbsURPGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsCompliance = ieee8021BridgeEvbsCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021BridgeEvbsCompliance.setDescription('The compliance statement for devices supporting EVBS\n        as defined in IEEE 802.1Q.')
ieee8021BridgeEvbbComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 3)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIDBV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSbpV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbbComplianceV2 = ieee8021BridgeEvbbComplianceV2.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbbComplianceV2.setDescription('The compliance statement for devices supporting EVB\n        as defined in IEEE 802.1Q.')
ieee8021BridgeEvbsComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 24, 2, 2, 4)).setObjects(("IEEE8021-EVB-MIB", "ieee8021BridgeEvbSysV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbVSIDBV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbsURPV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbEcpV2Group"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbUAPGroup"), ("IEEE8021-EVB-MIB", "ieee8021BridgeEvbCAPConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021BridgeEvbsComplianceV2 = ieee8021BridgeEvbsComplianceV2.setStatus('current')
if mibBuilder.loadTexts: ieee8021BridgeEvbsComplianceV2.setDescription('The compliance statement for devices supporting EVBS\n        as defined in IEEE 802.1Q.')
mibBuilder.exportSymbols("IEEE8021-EVB-MIB", ieee8021BridgeEvbConformance=ieee8021BridgeEvbConformance, ieee8021BridgeEvbURPVdpOperRespWaitDelay=ieee8021BridgeEvbURPVdpOperRespWaitDelay, ieee8021BridgeEvbSbpComponentID=ieee8021BridgeEvbSbpComponentID, ieee8021BridgeEvbSChannelObjects=ieee8021BridgeEvbSChannelObjects, ieee8021BridgeEvbUAPConfigStorageType=ieee8021BridgeEvbUAPConfigStorageType, ieee8021BridgeEvbSbpV2Group=ieee8021BridgeEvbSbpV2Group, PYSNMP_MODULE_ID=ieee8021BridgeEvbMib, ieee8021BridgeEvbUAPConfigTable=ieee8021BridgeEvbUAPConfigTable, ieee8021BridgeEvbUAPConfigEntry=ieee8021BridgeEvbUAPConfigEntry, ieee8021BridgeEvbSysGroup=ieee8021BridgeEvbSysGroup, ieee8021BridgeEvbUAPSchOperCDCPChanCap=ieee8021BridgeEvbUAPSchOperCDCPChanCap, ieee8021BridgeEvbVSIIDType=ieee8021BridgeEvbVSIIDType, ieee8021BridgeEvbVSIFilterFormat=ieee8021BridgeEvbVSIFilterFormat, ieee8021BridgeEvbSysEcpAckTimer=ieee8021BridgeEvbSysEcpAckTimer, ieee8021BridgeEvbURPLldpManual=ieee8021BridgeEvbURPLldpManual, ieee8021BridgeEvbVSIComponentID=ieee8021BridgeEvbVSIComponentID, ieee8021BridgeEvbUAPSchAdminCDCPChanCap=ieee8021BridgeEvbUAPSchAdminCDCPChanCap, ieee8021BridgeEvbVSIType=ieee8021BridgeEvbVSIType, ieee8021BridgeEvbEcpPort=ieee8021BridgeEvbEcpPort, ieee8021BridgeEvbVsiOperRevert=ieee8021BridgeEvbVsiOperRevert, ieee8021BridgeEvbEcpOperAckTimerInit=ieee8021BridgeEvbEcpOperAckTimerInit, ieee8021BridgeEvbCAPConfigEntry=ieee8021BridgeEvbCAPConfigEntry, ieee8021BridgeEvbVSIDBMacEntry=ieee8021BridgeEvbVSIDBMacEntry, ieee8021BridgeEvbEcpGroup=ieee8021BridgeEvbEcpGroup, ieee8021BridgeEvbNotifications=ieee8021BridgeEvbNotifications, ieee8021BridgeEvbVSINumMACs=ieee8021BridgeEvbVSINumMACs, ieee8021BridgeEvbCAPComponentId=ieee8021BridgeEvbCAPComponentId, ieee8021BridgeEvbSysEcpDfltAckTimerExp=ieee8021BridgeEvbSysEcpDfltAckTimerExp, ieee8021BridgeEvbUAPGroup=ieee8021BridgeEvbUAPGroup, ieee8021BridgeEvbVSIMgrID16=ieee8021BridgeEvbVSIMgrID16, ieee8021BridgeEvbUAPSchCdcpAdminEnable=ieee8021BridgeEvbUAPSchCdcpAdminEnable, ieee8021BridgeEvbSysVdpDfltReinitKeepAlive=ieee8021BridgeEvbSysVdpDfltReinitKeepAlive, ieee8021BridgeEvbObjects=ieee8021BridgeEvbObjects, ieee8021BridgeEvbUAPConfigRowStatus=ieee8021BridgeEvbUAPConfigRowStatus, ieee8021BridgeEvbURPBindToISSPort=ieee8021BridgeEvbURPBindToISSPort, ieee8021BridgeEvbCAPConfigTable=ieee8021BridgeEvbCAPConfigTable, ieee8021BridgeEvbVSIDBTable=ieee8021BridgeEvbVSIDBTable, ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh=ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolHigh, ieee8021BridgeEvbVSIDBV2Group=ieee8021BridgeEvbVSIDBV2Group, ieee8021BridgeEvbSbpTable=ieee8021BridgeEvbSbpTable, ieee8021BridgeEvbSchID=ieee8021BridgeEvbSchID, ieee8021BridgeEvbCAPSChannelID=ieee8021BridgeEvbCAPSChannelID, ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp=ieee8021BridgeEvbSysVdpDfltRsrcWaitDelayExp, ieee8021BridgeEvbURPComponentId=ieee8021BridgeEvbURPComponentId, ieee8021BridgeEvbVsiVdpOperCmd=ieee8021BridgeEvbVsiVdpOperCmd, ieee8021BridgeEvbVDPMachineState=ieee8021BridgeEvbVDPMachineState, ieee8021BridgeEvbSysEvbLldpGidCapable=ieee8021BridgeEvbSysEvbLldpGidCapable, ieee8021BridgeEvbEcpOperMaxRetries=ieee8021BridgeEvbEcpOperMaxRetries, ieee8021BridgeEvbVDPCounterDiscontinuity=ieee8021BridgeEvbVDPCounterDiscontinuity, ieee8021BridgeEvbVSIMvFormat=ieee8021BridgeEvbVSIMvFormat, ieee8021BridgeEvbSysEvbLldpManual=ieee8021BridgeEvbSysEvbLldpManual, ieee8021BridgeEvbURPPort=ieee8021BridgeEvbURPPort, ieee8021BridgeEvbGroupID=ieee8021BridgeEvbGroupID, ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp=ieee8021BridgeEvbURPVdpOperRsrcWaitDelayExp, ieee8021BridgeEvbSysEvbLldpTxEnable=ieee8021BridgeEvbSysEvbLldpTxEnable, ieee8021BridgeEvbUAPSchAdminCDCPRole=ieee8021BridgeEvbUAPSchAdminCDCPRole, ieee8021BridgeEvbSbpLldpManual=ieee8021BridgeEvbSbpLldpManual, ieee8021BridgeEvbVDPCommandsSucceeded=ieee8021BridgeEvbVDPCommandsSucceeded, ieee8021BridgeEvbCapConfigIfIndex=ieee8021BridgeEvbCapConfigIfIndex, ieee8021BridgeEvbUAPSchOperState=ieee8021BridgeEvbUAPSchOperState, ieee8021BridgeEvbSchCdcpRemoteRole=ieee8021BridgeEvbSchCdcpRemoteRole, ieee8021BridgeEvbVsiOperReason=ieee8021BridgeEvbVsiOperReason, ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp=ieee8021BridgeEvbSysVdpDfltReinitKeepAliveExp, ieee8021BridgeEvbEcpTxFailures=ieee8021BridgeEvbEcpTxFailures, ieee8021BridgeEvbEcpOperAckTimerInitExp=ieee8021BridgeEvbEcpOperAckTimerInitExp, ieee8021BridgeEvbCAPAssociateSBPOrURPPort=ieee8021BridgeEvbCAPAssociateSBPOrURPPort, ieee8021BridgeEvbURPIfIndex=ieee8021BridgeEvbURPIfIndex, ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp=ieee8021BridgeEvbSbpVdpOperReinitKeepAliveExp, ieee8021BridgeEvbCAPPort=ieee8021BridgeEvbCAPPort, ieee8021BridgeEvbVSIMac=ieee8021BridgeEvbVSIMac, ieee8021BridgeEvbSbpPortNumber=ieee8021BridgeEvbSbpPortNumber, ieee8021BridgeEvbURPVdpOperRsrcWaitDelay=ieee8021BridgeEvbURPVdpOperRsrcWaitDelay, ieee8021BridgeEvbGroups=ieee8021BridgeEvbGroups, ieee8021BridgeEvbCAPRowStatus=ieee8021BridgeEvbCAPRowStatus, ieee8021BridgeEvbEcpV2Group=ieee8021BridgeEvbEcpV2Group, ieee8021BridgeEvbURPVdpOperReinitKeepAlive=ieee8021BridgeEvbURPVdpOperReinitKeepAlive, ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp=ieee8021BridgeEvbSbpVdpOperRsrcWaitDelayExp, ieee8021BridgeEvbURPEntry=ieee8021BridgeEvbURPEntry, ieee8021BridgeEvbEcpEntry=ieee8021BridgeEvbEcpEntry, ieee8021BridgeEvbsURPV2Group=ieee8021BridgeEvbsURPV2Group, ieee8021BridgeEvbVSIPortNumber=ieee8021BridgeEvbVSIPortNumber, ieee8021BridgeEvbVsiOperHard=ieee8021BridgeEvbVsiOperHard, ieee8021BridgeEvbVSIVlanId=ieee8021BridgeEvbVSIVlanId, ieee8021BridgeEvbUAPPort=ieee8021BridgeEvbUAPPort, ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay=ieee8021BridgeEvbSbpVdpOperRsrcWaitDelay, ieee8021BridgeEvbSysType=ieee8021BridgeEvbSysType, ieee8021BridgeEvbSysNumExternalPorts=ieee8021BridgeEvbSysNumExternalPorts, ieee8021BridgeEvbSys=ieee8021BridgeEvbSys, ieee8021BridgeEvbbCompliance=ieee8021BridgeEvbbCompliance, ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay=ieee8021BridgeEvbSysVdpDfltRsrcWaitDelay, ieee8021BridgeEvbEcpTable=ieee8021BridgeEvbEcpTable, ieee8021BridgeEvbVSITimeSinceCreate=ieee8021BridgeEvbVSITimeSinceCreate, ieee8021BridgeEvbSysEcpMaxRetries=ieee8021BridgeEvbSysEcpMaxRetries, ieee8021BridgeEvbVSIID=ieee8021BridgeEvbVSIID, ieee8021BridgeEvbURPTable=ieee8021BridgeEvbURPTable, ieee8021BridgeEvbEcpTxRetryCount=ieee8021BridgeEvbEcpTxRetryCount, ieee8021BridgeEvbVSIDBGroup=ieee8021BridgeEvbVSIDBGroup, ieee8021BridgeEvbEcpComponentId=ieee8021BridgeEvbEcpComponentId, ieee8021BridgeEvbSbpEntry=ieee8021BridgeEvbSbpEntry, ieee8021BridgeEvbVSIMgrID=ieee8021BridgeEvbVSIMgrID, ieee8021BridgeEvbCAPConfigGroup=ieee8021BridgeEvbCAPConfigGroup, ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow=ieee8021BridgeEvbUAPSchAdminCDCPSVIDPoolLow, ieee8021BridgeEvbbComplianceV2=ieee8021BridgeEvbbComplianceV2, ieee8021BridgeEvbSysV2Group=ieee8021BridgeEvbSysV2Group, ieee8021BridgeEvbEcpTxFrameCount=ieee8021BridgeEvbEcpTxFrameCount, ieee8021BridgeEvbVSIDBMacTable=ieee8021BridgeEvbVSIDBMacTable, ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp=ieee8021BridgeEvbURPVdpOperReinitKeepAliveExp, ieee8021BridgeEvbSbpGroup=ieee8021BridgeEvbSbpGroup, ieee8021BridgeEvbSbpVdpOperReinitKeepAlive=ieee8021BridgeEvbSbpVdpOperReinitKeepAlive, ieee8021BridgeEvbVSIDBObjects=ieee8021BridgeEvbVSIDBObjects, ieee8021BridgeEvbMib=ieee8021BridgeEvbMib, ieee8021BridgeEvbUAPComponentId=ieee8021BridgeEvbUAPComponentId, ieee8021BridgeEvbVDPCommandsFailed=ieee8021BridgeEvbVDPCommandsFailed, ieee8021BridgeEvbVSITypeVersion=ieee8021BridgeEvbVSITypeVersion, ieee8021BridgeEvbSchCdcpRemoteEnabled=ieee8021BridgeEvbSchCdcpRemoteEnabled, ieee8021BridgeEvbsComplianceV2=ieee8021BridgeEvbsComplianceV2, ieee8021BridgeEvbVDPCommandReverts=ieee8021BridgeEvbVDPCommandReverts, ieee8021BridgeEvbCAPAssociateSBPOrURPCompID=ieee8021BridgeEvbCAPAssociateSBPOrURPCompID, ieee8021BridgeEvbCompliances=ieee8021BridgeEvbCompliances, ieee8021BridgeEvbEcpRxFrameCount=ieee8021BridgeEvbEcpRxFrameCount, ieee8021BridgeEvbsCompliance=ieee8021BridgeEvbsCompliance, ieee8021BridgeEvbSbpVdpOperToutKeepAlive=ieee8021BridgeEvbSbpVdpOperToutKeepAlive, ieee8021BridgeEvbUapConfigIfIndex=ieee8021BridgeEvbUapConfigIfIndex, ieee8021BridgeEvbsURPGroup=ieee8021BridgeEvbsURPGroup, ieee8021BridgeEvbVSIDBEntry=ieee8021BridgeEvbVSIDBEntry)
