#
# PySNMP MIB module CTRON-SFPS-ESYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-SFPS-ESYS-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:10:11 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint")
sfpsATMSvcHistoryMgr, sfpsATMSvcHistoryEvent, sfpsSystemConfig, sfpsATMPorts, sfpsATMPortsMgr, sfpsSystemStats, sfpsATMElan, sfpsATMAnibIfoStats, sfpsSystemPool, sfpsATMResolverCounters, sfpsATMResolver, sfpsMemHeapStats = mibBuilder.importSymbols("CTRON-SFPS-INCLUDE-MIB", "sfpsATMSvcHistoryMgr", "sfpsATMSvcHistoryEvent", "sfpsSystemConfig", "sfpsATMPorts", "sfpsATMPortsMgr", "sfpsSystemStats", "sfpsATMElan", "sfpsATMAnibIfoStats", "sfpsSystemPool", "sfpsATMResolverCounters", "sfpsATMResolver", "sfpsMemHeapStats")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, Bits, ObjectIdentity, Counter32, NotificationType, Unsigned32, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Integer32, Gauge32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "Bits", "ObjectIdentity", "Counter32", "NotificationType", "Unsigned32", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Integer32", "Gauge32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class HexInteger(Integer32):
    pass

class SfpsSwitchInstance(Integer32):
    pass

class SfpsAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

sfpsSysConfigTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1), )
if mibBuilder.loadTexts: sfpsSysConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigTable.setDescription('This table contains the configuration and aministrative\n                 information of each SFPS instance.  Essentially, a\n                 separate SFPS instance exists for each switch module.\n                 If SFPS is not configured on a module, than an entry\n                 will not exist.')
sfpsSysConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsSysConfigSwitchInstance"))
if mibBuilder.loadTexts: sfpsSysConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigEntry.setDescription('Each entry specifies the SFPS configuration for the\n                 SFPS instance.')
sfpsSysConfigSwitchInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigSwitchInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigSwitchInstance.setDescription('Switch Identifier to designate the instance of this entry.')
sfpsSysConfigAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigAdminStatus.setDescription('The administrative status of the switch.')
sfpsSysConfigAdminReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigAdminReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigAdminReset.setDescription('Setting reset will cause a soft reset of the switch.')
sfpsSysConfigOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3), ("pending-disable", 4), ("pending-enable", 5), ("invalid-config", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigOperStatus.setDescription('Displays the operational status of the switch.')
sfpsSysConfigOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 5), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigOperTime.setDescription('Displays the operation uptime of the switch.')
sfpsSysConfigLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigLastChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigLastChange.setDescription('Displays the number of time ticks since the last operational\n                status change.')
sfpsSysConfigVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigVersion.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigVersion.setDescription('Displays the version of this image.')
sfpsSysConfigMIBRev = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigMIBRev.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigMIBRev.setDescription('Displays the MIB version of the Engine component.')
sfpsSysConfigHostMgmtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigHostMgmtPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigHostMgmtPort.setDescription('Displays the Host Management port.')
sfpsSysConfigHostCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlPort.setDescription('Displays the logical port number for the Host Control Port.\n                The Host Control Port is the port that unknown packets are\n                sent to for call processing.')
sfpsSysConfigHostDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostDataPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigHostDataPort.setDescription('')
sfpsSysConfigHostCtrlThrottleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlThrottleCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigHostCtrlThrottleCount.setDescription('')
sfpsSysConfigHostDataThrottleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigHostDataThrottleCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigHostDataThrottleCount.setDescription('')
sfpsSysConfigTrunkSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigTrunkSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigTrunkSwitch.setDescription('')
sfpsSysConfigSwitchMode = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("vNET", 1), ("vLAN", 2), ("aNVLLobo", 3), ("aNVLFrontEnd", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigSwitchMode.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigSwitchMode.setDescription('Displays the mode that the switch is running.')
sfpsSysConfigSwitchMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 21), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigSwitchMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigSwitchMAC.setDescription("Displays the Switch's Base MAC address.")
sfpsSysConfigMgmtAccessType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mgmt-Only", 1), ("mgmt-and-Access", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysConfigMgmtAccessType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigMgmtAccessType.setDescription('Determines whether the port can be used for management only\n                or to be also used as an Access port.')
sfpsSysConfigChassisMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 23), SfpsAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigChassisMAC.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigChassisMAC.setDescription('')
sfpsSysConfigChassisIP = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 1, 1, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysConfigChassisIP.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysConfigChassisIP.setDescription('')
sfpsSysStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1), )
if mibBuilder.loadTexts: sfpsSysStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsTable.setDescription('This table contains the statistics information fo\n                 each SFPS switch instance.  Essentially, a separate\n                 SFPS instance exists for each switch module.  If SFPS\n                 is not configured on a module, than an entry will not\n                 exist.')
sfpsSysStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsSysStatsSwitchInstance"))
if mibBuilder.loadTexts: sfpsSysStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsEntry.setDescription('Each entry contains the SFPS statistics for the SFPS\n                instance.')
sfpsSysStatsSwitchInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 1), SfpsSwitchInstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsSwitchInstance.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsSwitchInstance.setDescription('The primary index to the SFPS switch table.  This\n                 identifies the SFPS switch for which the entry\n                 exists.')
sfpsSysStatsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysStatsAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsAdminStatus.setDescription('Sets the administrative state of the SFPS switch\n                 statistics.  Writing a value of enabled(3) causes\n                 these counters to become active for this SFPS switch\n                 instance.  Writing a value of disabled(2) causes\n                 these counters to become inactive for this SFPS\n                 switch instance.')
sfpsSysStatsReset = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsSysStatsReset.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsReset.setDescription('Resets the SFPS switch counters for this SFPS switch\n                 instance. Writing a value of reset(2) resets the SFPS\n                 switch counters to 0 and causes sfpsSysStatsOperTime\n                 to also be reset to 0.')
sfpsSysStatsOperTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOperTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsOperTime.setDescription('Indicates the amount of time (# of time ticks) that\n                 the SFPS switch statistics have been active for this\n                 SFPS swtich instance.')
sfpsSysStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsInPkts.setDescription('Indicates the total number of SFPS packets that have\n                 been received, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsOutPkts.setDescription('Indicates the total number of SFPS packets that have\n                 been switched, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsDiscardPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsDiscardPkts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsDiscardPkts.setDescription('Indicates the total number of SFPS packets that have\n                 been discarded, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsFilteredPkts.setDescription('Indicates the total number of SFPS packets that have\n                 been filtered, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsInOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsInOctets.setDescription('Indicates the total number of SFPS octets that have\n                 been received, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsOutOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsOutOctets.setDescription('Indicates the total number of SFPS octets that have\n                 been switched, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsDiscardOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsDiscardOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsDiscardOctets.setDescription('Indicates the total number of SFPS octets that have\n                 been discarded, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsSysStatsFilteredOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsSysStatsFilteredOctets.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsSysStatsFilteredOctets.setDescription('Indicates the total number of SFPS octets that have\n                 been filtered, on this SFPS switch instance, during\n                 the time of sfpsSysStatsOperTime.')
sfpsVccPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6), )
if mibBuilder.loadTexts: sfpsVccPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortTable.setDescription('')
sfpsVccPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsVccPortLogPort"))
if mibBuilder.loadTexts: sfpsVccPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortEntry.setDescription('')
sfpsVccPortLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortLogPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortLogPort.setDescription('')
sfpsVccPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPhyPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortPhyPort.setDescription('')
sfpsVccPortVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortVpi.setDescription('')
sfpsVccPortVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortVci.setDescription('')
sfpsVccPortPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("atmLec", 1), ("atmSvc", 2), ("atmPvc", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPortType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortPortType.setDescription('')
sfpsVccPortLogPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pendingUp", 1), ("portUp", 2), ("portDown", 3), ("other", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortLogPortType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortLogPortType.setDescription('')
sfpsVccPortPhyLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsVccPortPhyLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsVccPortPhyLinkState.setDescription('')
sfpsATMResolveSystemLearnTableSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveSystemLearnTableSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveSystemLearnTableSize.setDescription('')
sfpsATMResolveCountersVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersVerb.setDescription('')
sfpsATMResolveCountersUptime = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersUptime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersUptime.setDescription('')
sfpsATMResolveCountersQueryMACReq = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACReq.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACReq.setDescription('')
sfpsATMResolveCountersQueryMACFail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACFail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACFail.setDescription('')
sfpsATMResolveCountersQueryMACGood = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACGood.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACGood.setDescription('')
sfpsATMResolveCountersQueryMACDaSaChecks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaChecks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaChecks.setDescription('')
sfpsATMResolveCountersQueryMACDaSaHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaHits.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaHits.setDescription('')
sfpsATMResolveCountersQueryMACDaSaMissess = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaMissess.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACDaSaMissess.setDescription('')
sfpsATMResolveCountersQueryMACVdirChecks = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirChecks.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirChecks.setDescription('')
sfpsATMResolveCountersQueryMACVdirHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirHits.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirHits.setDescription('')
sfpsATMResolveCountersQueryMACVdirMisses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirMisses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACVdirMisses.setDescription('')
sfpsATMResolveCountersQueryMACErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACErrors.setDescription('')
sfpsATMResolveCountersQueryMACLecPortSuppress = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACLecPortSuppress.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACLecPortSuppress.setDescription('')
sfpsATMResolveCountersQueryMACStandbyDrops = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACStandbyDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryMACStandbyDrops.setDescription('')
sfpsATMResolveCountersQueryDaSaRequests = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaRequests.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaRequests.setDescription('')
sfpsATMResolveCountersQueryDaSaHits = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaHits.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaHits.setDescription('')
sfpsATMResolveCountersQueryDaSaMisses = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaMisses.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaMisses.setDescription('')
sfpsATMResolveCountersQueryDaSaErrors = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaErrors.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveCountersQueryDaSaErrors.setDescription('')
sfpsATMResolveDiagAPIVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIVerb.setDescription('')
sfpsATMResolveDiagAPIInDA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInDA.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInDA.setDescription('')
sfpsATMResolveDiagAPIInSA = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSA.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSA.setDescription('')
sfpsATMResolveDiagAPIInSrcLecPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSrcLecPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIInSrcLecPort.setDescription('')
sfpsATMResolveDiagAPIOutStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutStatus.setDescription('')
sfpsATMResolveDiagAPIOutPort = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMResolveDiagAPIOutPort.setDescription('')
sfpsPoolTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1), )
if mibBuilder.loadTexts: sfpsPoolTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTable.setDescription('')
sfpsPoolTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsPoolTableIndex"))
if mibBuilder.loadTexts: sfpsPoolTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableEntry.setDescription('')
sfpsPoolTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableIndex.setDescription('')
sfpsPoolTableName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableName.setDescription('')
sfpsPoolTableRAM = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableRAM.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableRAM.setDescription('')
sfpsPoolTableBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableBlockSize.setDescription('')
sfpsPoolTableBlockCount = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableBlockCount.setDescription('')
sfpsPoolTableBlockMax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableBlockMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableBlockMax.setDescription('')
sfpsPoolTableObjSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableObjSize.setDescription('')
sfpsPoolTableObjInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjInUse.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableObjInUse.setDescription('')
sfpsPoolTableObjMax = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableObjMax.setDescription('')
sfpsPoolTableObjInBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsPoolTableObjInBlock.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsPoolTableObjInBlock.setDescription('')
sfpsAnibIfoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1), )
if mibBuilder.loadTexts: sfpsAnibIfoStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsTable.setDescription('')
sfpsAnibIfoStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsAnibIfoStatsPhysIntf"))
if mibBuilder.loadTexts: sfpsAnibIfoStatsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsTableEntry.setDescription('')
sfpsAnibIfoStatsPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPhysIntf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPhysIntf.setDescription('')
sfpsAnibIfoStatsCtrlMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsCtrlMessages.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsCtrlMessages.setDescription('')
sfpsAnibIfoStatsIlmiMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsIlmiMessages.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsIlmiMessages.setDescription('')
sfpsAnibIfoStatsUniMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsUniMessages.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsUniMessages.setDescription('')
sfpsAnibIfoStatsLaneMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsLaneMessages.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsLaneMessages.setDescription('')
sfpsAnibIfoStatsPCSPoolSize = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolSize.setDescription('')
sfpsAnibIfoStatsPCSPoolDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSPoolDrops.setDescription('')
sfpsAnibIfoStatsPoolIlmiDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolIlmiDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolIlmiDrops.setDescription('')
sfpsAnibIfoStatsPoolUniDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolUniDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolUniDrops.setDescription('')
sfpsAnibIfoStatsPoolLaneDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolLaneDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPoolLaneDrops.setDescription('')
sfpsAnibIfoStatsPCSAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSAvail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSAvail.setDescription('')
sfpsAnibIfoStatsPCSInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSInUse.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsPCSInUse.setDescription('')
sfpsAnibIfoStatsStandbyLeArpsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyLeArpsDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyLeArpsDrops.setDescription('')
sfpsAnibIfoStatsStandbyUnknownsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyUnknownsDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyUnknownsDrops.setDescription('')
sfpsAnibIfoStatsStandbyANIBUnknownsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 4, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyANIBUnknownsDrops.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsAnibIfoStatsStandbyANIBUnknownsDrops.setDescription('')
sfpsMemHeapStatsHeapInit = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 1), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapInit.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapInit.setDescription('')
sfpsMemHeapStatsHeapMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 2), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapMax.setDescription('')
sfpsMemHeapStatsHeapEnd = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 3), HexInteger()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapEnd.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapEnd.setDescription('')
sfpsMemHeapStatsHeapSize = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapSize.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapSize.setDescription('')
sfpsMemHeapStatsFragCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsFragCount.setDescription('')
sfpsMemHeapStatsFragLargest = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragLargest.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsFragLargest.setDescription('')
sfpsMemHeapStatsFragBytes = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsFragBytes.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsFragBytes.setDescription('')
sfpsMemHeapStatsHeapUsed = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsed.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsed.setDescription('')
sfpsMemHeapStatsHeapAvail = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapAvail.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapAvail.setDescription('')
sfpsMemHeapStatsHeapUseMax = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUseMax.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUseMax.setDescription('')
sfpsMemHeapStatsHeapUsePercent = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 1, 1, 2, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsePercent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsMemHeapStatsHeapUsePercent.setDescription('')
sfpsATMPortsTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1), )
if mibBuilder.loadTexts: sfpsATMPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsTable.setDescription('')
sfpsATMPortsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMPortsPhysIntf"))
if mibBuilder.loadTexts: sfpsATMPortsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsTableEntry.setDescription('')
sfpsATMPortsPhysIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsPhysIntf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsPhysIntf.setDescription('')
sfpsATMPortsTotalLECPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalLECPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsTotalLECPorts.setDescription('')
sfpsATMPortsTotalPVCPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalPVCPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsTotalPVCPorts.setDescription('')
sfpsATMPortsTotalSVCPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsTotalSVCPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsTotalSVCPorts.setDescription('')
sfpsATMPortsBaseIntfNum = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsBaseIntfNum.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsBaseIntfNum.setDescription('')
sfpsATMPortsInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMPortsInUse.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsInUse.setDescription('')
sfpsATMPortsMgrVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("set", 2), ("setToDefaults", 3), ("coldResetNV", 4), ("warmResetNB", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrVerb.setDescription('')
sfpsATMPortsMgrPhysIntf = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrPhysIntf.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrPhysIntf.setDescription('')
sfpsATMPortsMgrTotalLECPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalLECPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalLECPorts.setDescription('')
sfpsATMPortsMgrTotalPVCPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalPVCPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalPVCPorts.setDescription('')
sfpsATMPortsMgrTotalSVCPorts = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalSVCPorts.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrTotalSVCPorts.setDescription('')
sfpsATMPortsMgrVerbStatus = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ok", 1), ("exceededMaxAllotment", 2), ("badIf", 3), ("error", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMPortsMgrVerbStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMPortsMgrVerbStatus.setDescription('')
sfpsATMLecPortTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7), )
if mibBuilder.loadTexts: sfpsATMLecPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortTable.setDescription('')
sfpsATMLecPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMLecPortLogPort"))
if mibBuilder.loadTexts: sfpsATMLecPortTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortTableEntry.setDescription('')
sfpsATMLecPortLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortLogPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortLogPort.setDescription('')
sfpsATMLecPortPhyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortPhyPort.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortPhyPort.setDescription('')
sfpsATMLecPortElanName = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortElanName.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortElanName.setDescription('')
sfpsATMLecPortPhyLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortPhyLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortPhyLinkState.setDescription('')
sfpsATMLecPortLECType = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 1, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMLecPortLECType.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMLecPortLECType.setDescription('')
sfpsATMSvcHistoryEventTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1), )
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTable.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTable.setDescription('')
sfpsATMSvcHistoryEventTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1), ).setIndexNames((0, "CTRON-SFPS-ESYS-MIB", "sfpsATMSvcHistoryEventIndex"))
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTableEntry.setDescription('')
sfpsATMSvcHistoryEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventIndex.setDescription('incrementing value based on number of events')
sfpsATMSvcHistoryEventATMAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventATMAddr.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventATMAddr.setDescription('the atm address for the port manager port based on the lec\n                 client mib.')
sfpsATMSvcHistoryEventPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventPortNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventPortNumber.setDescription('port manager port')
sfpsATMSvcHistoryEventEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("idle", 1), ("opening", 2), ("openResponse", 3), ("peerOpenResponse", 4), ("openAck", 5), ("open", 6), ("closeResponse", 7), ("closeAck", 8), ("close", 9), ("clean", 10), ("cleanCloseResp", 11), ("cleanCloseAck", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEvent.setDescription('state change logged to the Event Log')
sfpsATMSvcHistoryEventEventChange = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("error", 1), ("normal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEventChange.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventEventChange.setDescription('reason for the Event')
sfpsATMSvcHistoryEventVccHand = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVccHand.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVccHand.setDescription('value associated with a connection on Port Number')
sfpsATMSvcHistoryEventVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVpi.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVpi.setDescription('vpi associated with connection on Port Number')
sfpsATMSvcHistoryEventVci = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVci.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventVci.setDescription('vci associated with connection on Port Number')
sfpsATMSvcHistoryEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 2, 1, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTime.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryEventTime.setDescription('system time when Event occurs')
sfpsATMSvcHistoryMgrVerb = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("resetSvcHistory", 2), ("isableSvcLogging", 3), ("enableSvcLogging", 4), ("enableSvcLogsNoWrapping", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrVerb.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrVerb.setDescription("allows you to reset the SvcHistoryEvent table\n                 disable logging so no new entries are compiled in the\n                 SvcHistoryEvent table enable logging so new entries are\n                 added to the SvcHistoryEvent table enable logging in the\n                 SvcHistoryEvent table so that when the max number of entries\n                 is reached the table is full and doesn't wrap around and\n                 continue adding entries")
sfpsATMSvcHistoryMgrSvcHistoryWraps = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrSvcHistoryWraps.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrSvcHistoryWraps.setDescription('displays if the table is going to wrap')
sfpsATMSvcHistoryMgrLogState = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("enabledNoWrap", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrLogState.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrLogState.setDescription('displays whether the table is enabled to log new entries\n                  or not and if it is enabled whether the table will wrap')
sfpsATMSvcHistoryMgrEntriesCount = MibScalar((1, 3, 6, 1, 4, 1, 52, 4, 2, 4, 2, 4, 8, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrEntriesCount.setStatus('mandatory')
if mibBuilder.loadTexts: sfpsATMSvcHistoryMgrEntriesCount.setDescription('displays the number of current entries from the beginnning\n                 of the table (not from before it wrapped)')
mibBuilder.exportSymbols("CTRON-SFPS-ESYS-MIB", sfpsATMResolveCountersQueryMACVdirHits=sfpsATMResolveCountersQueryMACVdirHits, sfpsPoolTableEntry=sfpsPoolTableEntry, sfpsSysStatsReset=sfpsSysStatsReset, sfpsSysStatsInOctets=sfpsSysStatsInOctets, sfpsMemHeapStatsHeapInit=sfpsMemHeapStatsHeapInit, sfpsMemHeapStatsHeapUsed=sfpsMemHeapStatsHeapUsed, sfpsATMSvcHistoryEventVci=sfpsATMSvcHistoryEventVci, sfpsSysConfigOperTime=sfpsSysConfigOperTime, sfpsATMResolveCountersQueryMACDaSaMissess=sfpsATMResolveCountersQueryMACDaSaMissess, sfpsAnibIfoStatsPhysIntf=sfpsAnibIfoStatsPhysIntf, sfpsPoolTableObjInBlock=sfpsPoolTableObjInBlock, sfpsMemHeapStatsHeapMax=sfpsMemHeapStatsHeapMax, sfpsAnibIfoStatsLaneMessages=sfpsAnibIfoStatsLaneMessages, sfpsAnibIfoStatsPoolIlmiDrops=sfpsAnibIfoStatsPoolIlmiDrops, sfpsATMSvcHistoryEventTable=sfpsATMSvcHistoryEventTable, sfpsATMPortsInUse=sfpsATMPortsInUse, sfpsATMResolveCountersQueryDaSaMisses=sfpsATMResolveCountersQueryDaSaMisses, sfpsPoolTableObjMax=sfpsPoolTableObjMax, sfpsATMResolveCountersQueryMACVdirChecks=sfpsATMResolveCountersQueryMACVdirChecks, sfpsSysConfigSwitchMode=sfpsSysConfigSwitchMode, sfpsATMSvcHistoryMgrSvcHistoryWraps=sfpsATMSvcHistoryMgrSvcHistoryWraps, sfpsAnibIfoStatsTable=sfpsAnibIfoStatsTable, sfpsATMPortsTotalSVCPorts=sfpsATMPortsTotalSVCPorts, HexInteger=HexInteger, sfpsMemHeapStatsHeapUseMax=sfpsMemHeapStatsHeapUseMax, sfpsATMResolveDiagAPIInSA=sfpsATMResolveDiagAPIInSA, sfpsSysConfigEntry=sfpsSysConfigEntry, sfpsATMResolveDiagAPIInSrcLecPort=sfpsATMResolveDiagAPIInSrcLecPort, sfpsATMSvcHistoryEventVccHand=sfpsATMSvcHistoryEventVccHand, sfpsATMSvcHistoryMgrEntriesCount=sfpsATMSvcHistoryMgrEntriesCount, sfpsATMResolveCountersUptime=sfpsATMResolveCountersUptime, sfpsATMResolveCountersQueryMACStandbyDrops=sfpsATMResolveCountersQueryMACStandbyDrops, sfpsSysStatsDiscardPkts=sfpsSysStatsDiscardPkts, sfpsSysConfigTable=sfpsSysConfigTable, sfpsSysConfigMIBRev=sfpsSysConfigMIBRev, sfpsSysStatsOutPkts=sfpsSysStatsOutPkts, sfpsATMResolveDiagAPIOutStatus=sfpsATMResolveDiagAPIOutStatus, sfpsMemHeapStatsFragBytes=sfpsMemHeapStatsFragBytes, sfpsATMLecPortTableEntry=sfpsATMLecPortTableEntry, sfpsAnibIfoStatsPoolUniDrops=sfpsAnibIfoStatsPoolUniDrops, sfpsATMResolveDiagAPIInDA=sfpsATMResolveDiagAPIInDA, sfpsSysStatsTable=sfpsSysStatsTable, sfpsVccPortVpi=sfpsVccPortVpi, sfpsATMResolveCountersQueryMACErrors=sfpsATMResolveCountersQueryMACErrors, sfpsSysConfigMgmtAccessType=sfpsSysConfigMgmtAccessType, sfpsATMPortsMgrPhysIntf=sfpsATMPortsMgrPhysIntf, sfpsAnibIfoStatsStandbyUnknownsDrops=sfpsAnibIfoStatsStandbyUnknownsDrops, sfpsMemHeapStatsFragLargest=sfpsMemHeapStatsFragLargest, sfpsSysStatsFilteredOctets=sfpsSysStatsFilteredOctets, sfpsATMLecPortTable=sfpsATMLecPortTable, sfpsATMPortsMgrVerb=sfpsATMPortsMgrVerb, sfpsATMSvcHistoryEventEvent=sfpsATMSvcHistoryEventEvent, sfpsATMResolveCountersQueryMACGood=sfpsATMResolveCountersQueryMACGood, sfpsPoolTableBlockSize=sfpsPoolTableBlockSize, sfpsSysStatsInPkts=sfpsSysStatsInPkts, sfpsATMResolveCountersQueryMACLecPortSuppress=sfpsATMResolveCountersQueryMACLecPortSuppress, sfpsAnibIfoStatsCtrlMessages=sfpsAnibIfoStatsCtrlMessages, sfpsSysConfigHostCtrlThrottleCount=sfpsSysConfigHostCtrlThrottleCount, sfpsATMLecPortPhyLinkState=sfpsATMLecPortPhyLinkState, sfpsPoolTableName=sfpsPoolTableName, sfpsSysStatsOperTime=sfpsSysStatsOperTime, sfpsAnibIfoStatsPoolLaneDrops=sfpsAnibIfoStatsPoolLaneDrops, sfpsVccPortLogPort=sfpsVccPortLogPort, sfpsAnibIfoStatsUniMessages=sfpsAnibIfoStatsUniMessages, sfpsSysConfigHostDataThrottleCount=sfpsSysConfigHostDataThrottleCount, sfpsPoolTable=sfpsPoolTable, sfpsATMSvcHistoryEventIndex=sfpsATMSvcHistoryEventIndex, sfpsATMPortsMgrTotalSVCPorts=sfpsATMPortsMgrTotalSVCPorts, sfpsSysStatsSwitchInstance=sfpsSysStatsSwitchInstance, sfpsATMPortsTable=sfpsATMPortsTable, sfpsSysConfigHostDataPort=sfpsSysConfigHostDataPort, sfpsVccPortPortType=sfpsVccPortPortType, sfpsSysStatsEntry=sfpsSysStatsEntry, sfpsVccPortTable=sfpsVccPortTable, sfpsPoolTableIndex=sfpsPoolTableIndex, sfpsAnibIfoStatsPCSPoolDrops=sfpsAnibIfoStatsPCSPoolDrops, sfpsATMResolveCountersQueryMACReq=sfpsATMResolveCountersQueryMACReq, sfpsAnibIfoStatsIlmiMessages=sfpsAnibIfoStatsIlmiMessages, sfpsAnibIfoStatsPCSInUse=sfpsAnibIfoStatsPCSInUse, sfpsSysConfigAdminReset=sfpsSysConfigAdminReset, sfpsATMResolveCountersQueryDaSaErrors=sfpsATMResolveCountersQueryDaSaErrors, SfpsAddress=SfpsAddress, sfpsATMResolveSystemLearnTableSize=sfpsATMResolveSystemLearnTableSize, sfpsSysConfigOperStatus=sfpsSysConfigOperStatus, sfpsATMResolveCountersQueryMACFail=sfpsATMResolveCountersQueryMACFail, sfpsSysConfigAdminStatus=sfpsSysConfigAdminStatus, sfpsSysConfigSwitchInstance=sfpsSysConfigSwitchInstance, sfpsSysStatsAdminStatus=sfpsSysStatsAdminStatus, sfpsSysConfigSwitchMAC=sfpsSysConfigSwitchMAC, sfpsATMPortsTotalLECPorts=sfpsATMPortsTotalLECPorts, sfpsPoolTableBlockCount=sfpsPoolTableBlockCount, sfpsATMResolveCountersQueryDaSaRequests=sfpsATMResolveCountersQueryDaSaRequests, sfpsATMSvcHistoryMgrLogState=sfpsATMSvcHistoryMgrLogState, sfpsSysConfigHostCtrlPort=sfpsSysConfigHostCtrlPort, sfpsATMLecPortLogPort=sfpsATMLecPortLogPort, SfpsSwitchInstance=SfpsSwitchInstance, sfpsMemHeapStatsHeapEnd=sfpsMemHeapStatsHeapEnd, sfpsATMLecPortPhyPort=sfpsATMLecPortPhyPort, sfpsATMResolveCountersQueryMACDaSaChecks=sfpsATMResolveCountersQueryMACDaSaChecks, sfpsAnibIfoStatsPCSAvail=sfpsAnibIfoStatsPCSAvail, sfpsATMLecPortElanName=sfpsATMLecPortElanName, sfpsATMPortsPhysIntf=sfpsATMPortsPhysIntf, sfpsSysConfigChassisMAC=sfpsSysConfigChassisMAC, sfpsSysStatsOutOctets=sfpsSysStatsOutOctets, sfpsVccPortPhyPort=sfpsVccPortPhyPort, sfpsATMPortsTotalPVCPorts=sfpsATMPortsTotalPVCPorts, sfpsSysConfigTrunkSwitch=sfpsSysConfigTrunkSwitch, sfpsATMSvcHistoryEventEventChange=sfpsATMSvcHistoryEventEventChange, sfpsVccPortVci=sfpsVccPortVci, sfpsATMLecPortLECType=sfpsATMLecPortLECType, sfpsSysConfigVersion=sfpsSysConfigVersion, sfpsSysConfigLastChange=sfpsSysConfigLastChange, sfpsMemHeapStatsHeapUsePercent=sfpsMemHeapStatsHeapUsePercent, sfpsVccPortLogPortType=sfpsVccPortLogPortType, sfpsATMSvcHistoryEventATMAddr=sfpsATMSvcHistoryEventATMAddr, sfpsPoolTableRAM=sfpsPoolTableRAM, sfpsMemHeapStatsHeapSize=sfpsMemHeapStatsHeapSize, sfpsPoolTableObjSize=sfpsPoolTableObjSize, sfpsATMResolveCountersQueryMACDaSaHits=sfpsATMResolveCountersQueryMACDaSaHits, sfpsATMSvcHistoryEventTableEntry=sfpsATMSvcHistoryEventTableEntry, sfpsATMResolveDiagAPIOutPort=sfpsATMResolveDiagAPIOutPort, sfpsATMSvcHistoryEventVpi=sfpsATMSvcHistoryEventVpi, sfpsATMResolveCountersVerb=sfpsATMResolveCountersVerb, sfpsATMPortsMgrVerbStatus=sfpsATMPortsMgrVerbStatus, sfpsSysStatsFilteredPkts=sfpsSysStatsFilteredPkts, sfpsAnibIfoStatsTableEntry=sfpsAnibIfoStatsTableEntry, sfpsATMSvcHistoryEventTime=sfpsATMSvcHistoryEventTime, sfpsSysConfigChassisIP=sfpsSysConfigChassisIP, sfpsVccPortPhyLinkState=sfpsVccPortPhyLinkState, sfpsATMResolveCountersQueryMACVdirMisses=sfpsATMResolveCountersQueryMACVdirMisses, sfpsSysStatsDiscardOctets=sfpsSysStatsDiscardOctets, sfpsATMPortsMgrTotalLECPorts=sfpsATMPortsMgrTotalLECPorts, sfpsPoolTableObjInUse=sfpsPoolTableObjInUse, sfpsMemHeapStatsHeapAvail=sfpsMemHeapStatsHeapAvail, sfpsPoolTableBlockMax=sfpsPoolTableBlockMax, sfpsATMSvcHistoryEventPortNumber=sfpsATMSvcHistoryEventPortNumber, sfpsVccPortEntry=sfpsVccPortEntry, sfpsATMResolveDiagAPIVerb=sfpsATMResolveDiagAPIVerb, sfpsATMSvcHistoryMgrVerb=sfpsATMSvcHistoryMgrVerb, sfpsATMPortsTableEntry=sfpsATMPortsTableEntry, sfpsATMResolveCountersQueryDaSaHits=sfpsATMResolveCountersQueryDaSaHits, sfpsATMPortsBaseIntfNum=sfpsATMPortsBaseIntfNum, sfpsATMPortsMgrTotalPVCPorts=sfpsATMPortsMgrTotalPVCPorts, sfpsAnibIfoStatsStandbyLeArpsDrops=sfpsAnibIfoStatsStandbyLeArpsDrops, sfpsAnibIfoStatsStandbyANIBUnknownsDrops=sfpsAnibIfoStatsStandbyANIBUnknownsDrops, sfpsMemHeapStatsFragCount=sfpsMemHeapStatsFragCount, sfpsSysConfigHostMgmtPort=sfpsSysConfigHostMgmtPort, sfpsAnibIfoStatsPCSPoolSize=sfpsAnibIfoStatsPCSPoolSize)
