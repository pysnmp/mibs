#
# PySNMP MIB module XIRRUS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/xirrus_aos/XIRRUS-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:16:46 2024
# On host fv-az692-788 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
IpAddress, iso, Bits, ModuleIdentity, TimeTicks, enterprises, NotificationType, Unsigned32, Gauge32, MibIdentifier, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "Bits", "ModuleIdentity", "TimeTicks", "enterprises", "NotificationType", "Unsigned32", "Gauge32", "MibIdentifier", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "Integer32")
RowStatus, DisplayString, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "MacAddress")
xirrus = ModuleIdentity((1, 3, 6, 1, 4, 1, 21013))
xirrus.setRevisions(('2016-05-23 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: xirrus.setRevisionsDescriptions(('xirrus mib',))
if mibBuilder.loadTexts: xirrus.setLastUpdated('201605231200Z')
if mibBuilder.loadTexts: xirrus.setOrganization('Xirrus')
if mibBuilder.loadTexts: xirrus.setContactInfo('support@xirrus.com')
if mibBuilder.loadTexts: xirrus.setDescription('Xirrus enterprise MIB tree')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1))
xmManage = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 1))
xsArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2))
xs3500Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 100))
xs3700Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 101))
xs3900Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 102))
xs3500_512Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 103)).setLabel("xs3500-512Array")
xs3700_1GArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 104)).setLabel("xs3700-1GArray")
xs3900_1GArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 105)).setLabel("xs3900-1GArray")
xs4Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 106))
xs8Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 107))
xs16Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 108))
xn4Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 109))
xn8Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 110))
xn16Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 111))
xs12Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 112))
xn12Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 113))
xr4420Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 114))
xr4430Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 115))
xr4820Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 116))
xr4830Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 117))
xr6820Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 118))
xr6830Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 119))
xr7220Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 120))
xr7230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 121))
xr7620Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 122))
xr7630Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 123))
xr1220Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 124))
xr1230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 125))
xr2420Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 126))
xr2430Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 127))
xr2220Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 128))
xr2230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 129))
xr1120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 130))
xr1130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 131))
xr1120hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 132))
xr1130hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 133))
xr520hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 134))
xr1230hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 135))
xr2420hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 136))
xr2430hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 137))
xr2220hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 138))
xr2230hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 139))
xr520Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 142))
xr530Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 143))
xr1220hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 144))
xr530hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 145))
xr420hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 146))
xr430hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 147))
xr2425Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 148))
xr2435Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 149))
xr2425hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 150))
xr2225Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 151))
xr2235Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 152))
xr620Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 153))
xr620hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 154))
xr630Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 155))
xr2426Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 156))
xr2436Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 157))
xr2426hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 158))
xr2226Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 159))
xr2226hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 160))
xr2236Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 161))
xr630hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 162))
xr2225hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 163))
xr2235hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 164))
xr2236hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 165))
xr2435hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 166))
xr2436hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 167))
xr1126Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 168))
xr1136Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 169))
xr1226Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 170))
xr1236Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 171))
xr1126hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 172))
xr1136hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 173))
xr1226hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 174))
xr1236hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 175))
xr4426Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 176))
xr4436Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 177))
xr4826Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 178))
xr4836Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 179))
xr6826Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 180))
xr6836Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 181))
xr7226Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 182))
xr7236Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 183))
xr7626Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 184))
xr7636Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 185))
xd1_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 186)).setLabel("xd1-130Array")
xd2_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 187)).setLabel("xd2-130Array")
xd4_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 188)).setLabel("xd4-130Array")
xd8_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 189)).setLabel("xd8-130Array")
xh1_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 190)).setLabel("xh1-130Array")
xh2_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 191)).setLabel("xh2-130Array")
xh4_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 192)).setLabel("xh4-130Array")
xh8_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 193)).setLabel("xh8-130Array")
xd1_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 194)).setLabel("xd1-240Array")
xd2_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 195)).setLabel("xd2-240Array")
xd4_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 196)).setLabel("xd4-240Array")
xd8_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 197)).setLabel("xd8-240Array")
xh1_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 198)).setLabel("xh1-240Array")
xh2_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 199)).setLabel("xh2-240Array")
xh4_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 200)).setLabel("xh4-240Array")
xh8_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 201)).setLabel("xh8-240Array")
xd1_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 202)).setLabel("xd1-120Array")
xd2_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 203)).setLabel("xd2-120Array")
xd4_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 204)).setLabel("xd4-120Array")
xd8_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 205)).setLabel("xd8-120Array")
xh1_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 206)).setLabel("xh1-120Array")
xh2_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 207)).setLabel("xh2-120Array")
xh4_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 208)).setLabel("xh4-120Array")
xh8_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 209)).setLabel("xh8-120Array")
xr1147Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 210))
xr1247Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 211))
xr2247Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 212))
xr2447Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 213))
xr1147hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 214))
xr1247hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 215))
xr2247hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 216))
xr2447hArray = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 217))
xr4447Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 218))
xr4847Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 219))
xr6847Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 220))
xr7247Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 221))
xr7647Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 222))
xa1_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 223)).setLabel("xa1-120Array")
xa2_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 224)).setLabel("xa2-120Array")
xa4_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 225)).setLabel("xa4-120Array")
xa8_120Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 226)).setLabel("xa8-120Array")
xa1_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 227)).setLabel("xa1-130Array")
xa2_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 228)).setLabel("xa2-130Array")
xa4_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 229)).setLabel("xa4-130Array")
xa8_130Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 230)).setLabel("xa8-130Array")
xa1_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 231)).setLabel("xa1-240Array")
xa2_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 232)).setLabel("xa2-240Array")
xa4_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 233)).setLabel("xa4-240Array")
xa8_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 234)).setLabel("xa8-240Array")
xd1_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 235)).setLabel("xd1-230Array")
xd2_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 236)).setLabel("xd2-230Array")
xd3_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 237)).setLabel("xd3-230Array")
xd4_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 238)).setLabel("xd4-230Array")
xd8_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 239)).setLabel("xd8-230Array")
xh1_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 240)).setLabel("xh1-230Array")
xh2_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 241)).setLabel("xh2-230Array")
xh3_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 242)).setLabel("xh3-230Array")
xh4_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 243)).setLabel("xh4-230Array")
xh8_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 244)).setLabel("xh8-230Array")
xa1_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 245)).setLabel("xa1-230Array")
xa2_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 246)).setLabel("xa2-230Array")
xa3_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 247)).setLabel("xa3-230Array")
xa4_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 248)).setLabel("xa4-230Array")
xa8_230Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 249)).setLabel("xa8-230Array")
xa3_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 250)).setLabel("xa3-240Array")
xh3_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 251)).setLabel("xh3-240Array")
xd3_240Array = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 252)).setLabel("xd3-240Array")
acl = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2))
admin = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4))
cdp = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5))
dateTime = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6))
dhcp = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8))
dns = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10))
filter = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11))
interface = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12))
networkMap = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13))
radius = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14))
roamAssist = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16))
snmpAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18))
ssid = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20))
stations = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22))
statistics = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24))
syslog = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26))
system = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28))
tunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29))
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30))
cluster = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31))
envCtrl = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32))
location = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 33))
group = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34))
mdm = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35))
netflow = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 36))
wifiTag = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37))
wpr = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38))
oauth = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39))
proxyFwd = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 40))
proxyMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41))
lldp = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 42))
position = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43))
traps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50))
aclEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("allow", 1), ("deny", 2), ("deny-include-blocked-rogues", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclEnable.setStatus('current')
if mibBuilder.loadTexts: aclEnable.setDescription('Access Control List enable')
aclTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 2), )
if mibBuilder.loadTexts: aclTable.setStatus('current')
if mibBuilder.loadTexts: aclTable.setDescription('Access Control List for the Array')
aclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "aclIndex"))
if mibBuilder.loadTexts: aclEntry.setStatus('current')
if mibBuilder.loadTexts: aclEntry.setDescription('ACL table entry')
aclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: aclIndex.setStatus('current')
if mibBuilder.loadTexts: aclIndex.setDescription('Access Control List Index')
aclMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclMacAddress.setStatus('current')
if mibBuilder.loadTexts: aclMacAddress.setDescription('Mac address to be allowed or denied')
aclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclRowStatus.setStatus('current')
if mibBuilder.loadTexts: aclRowStatus.setDescription('Status of the ACL row entry')
aclTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclTableReset.setStatus('current')
if mibBuilder.loadTexts: aclTableReset.setDescription('Reset Access Control List (clear all entries)')
aclSsidTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4), )
if mibBuilder.loadTexts: aclSsidTable.setStatus('current')
if mibBuilder.loadTexts: aclSsidTable.setDescription('Access Control List per SSID')
aclSsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "aclSsidIndex"))
if mibBuilder.loadTexts: aclSsidEntry.setStatus('current')
if mibBuilder.loadTexts: aclSsidEntry.setDescription('ACL per SSID table entry')
aclSsidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: aclSsidIndex.setStatus('current')
if mibBuilder.loadTexts: aclSsidIndex.setDescription('ACL per SSID index')
aclSsidMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclSsidMacAddress.setStatus('current')
if mibBuilder.loadTexts: aclSsidMacAddress.setDescription('Mac address to be allowed or denied')
aclSsidName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclSsidName.setStatus('current')
if mibBuilder.loadTexts: aclSsidName.setDescription('SSID this ACL entry belongs to')
aclSsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aclSsidRowStatus.setStatus('current')
if mibBuilder.loadTexts: aclSsidRowStatus.setDescription('Status of the ACL row entry')
aclSsidTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aclSsidTableReset.setStatus('current')
if mibBuilder.loadTexts: aclSsidTableReset.setDescription('Reset ACL (clear all entries) for given SSID')
adminTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1), )
if mibBuilder.loadTexts: adminTable.setStatus('current')
if mibBuilder.loadTexts: adminTable.setDescription('Administrator List for the Array')
adminEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "adminIndex"))
if mibBuilder.loadTexts: adminEntry.setStatus('current')
if mibBuilder.loadTexts: adminEntry.setDescription('Admin table entry')
adminIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: adminIndex.setStatus('current')
if mibBuilder.loadTexts: adminIndex.setDescription('Admin Index')
adminUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminUsername.setStatus('current')
if mibBuilder.loadTexts: adminUsername.setDescription('Admin username')
adminPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminPassword.setStatus('current')
if mibBuilder.loadTexts: adminPassword.setDescription('Admin password')
adminPasswordForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminPasswordForm.setStatus('current')
if mibBuilder.loadTexts: adminPasswordForm.setDescription('Admin password form')
adminPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("read-only", 0), ("read-write", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminPrivilege.setStatus('current')
if mibBuilder.loadTexts: adminPrivilege.setDescription('Admin privilege')
adminRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminRowStatus.setStatus('current')
if mibBuilder.loadTexts: adminRowStatus.setDescription('Status of the admin row entry')
adminPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adminPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: adminPrivilegeLevel.setDescription('Admin privilege level')
adminTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTableReset.setStatus('current')
if mibBuilder.loadTexts: adminTableReset.setDescription('Reset administrator list (clear all entries and restore default)')
adminTableClear = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminTableClear.setStatus('current')
if mibBuilder.loadTexts: adminTableClear.setDescription('Clear all entries in administrator list')
adminRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4))
adminRadiusEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusEnable.setStatus('current')
if mibBuilder.loadTexts: adminRadiusEnable.setDescription('Enable or disable admin authentication via Radius')
adminRadiusPriServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusPriServer.setStatus('current')
if mibBuilder.loadTexts: adminRadiusPriServer.setDescription('Admin Primary Radius server host name or IP address')
adminRadiusPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusPriServerPort.setStatus('current')
if mibBuilder.loadTexts: adminRadiusPriServerPort.setDescription('Admin Primary Radius server port')
adminRadiusPriServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusPriServerSecret.setStatus('current')
if mibBuilder.loadTexts: adminRadiusPriServerSecret.setDescription('Admin Primary Radius server secret')
adminRadiusPriServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusPriServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: adminRadiusPriServerSecretEnc.setDescription('Admin Primary Radius server secret (encrypted)')
adminRadiusSecServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusSecServer.setStatus('current')
if mibBuilder.loadTexts: adminRadiusSecServer.setDescription('Admin Secondary Radius server host name or IP address')
adminRadiusSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusSecServerPort.setStatus('current')
if mibBuilder.loadTexts: adminRadiusSecServerPort.setDescription('Admin Secondary Radius server port')
adminRadiusSecServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusSecServerSecret.setStatus('current')
if mibBuilder.loadTexts: adminRadiusSecServerSecret.setDescription('Admin Secondary Radius server secret')
adminRadiusSecServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusSecServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: adminRadiusSecServerSecretEnc.setDescription('Admin Secondary Radius server secret (encrypted)')
adminRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: adminRadiusTimeout.setDescription('Timeout before server is retried after it initially failed')
adminRadiusAuthType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("chap", 0), ("pap", 1), ("ms-chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminRadiusAuthType.setStatus('current')
if mibBuilder.loadTexts: adminRadiusAuthType.setDescription('Set authentication protocol for admin authentication via RADIUS')
adminHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5), )
if mibBuilder.loadTexts: adminHistoryTable.setStatus('current')
if mibBuilder.loadTexts: adminHistoryTable.setDescription('Administrator history list')
adminHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "adminHistoryIndex"))
if mibBuilder.loadTexts: adminHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: adminHistoryEntry.setDescription('Administrator history table entry')
adminHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: adminHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: adminHistoryIndex.setDescription('Admin history table index')
adminHistoryUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHistoryUsername.setStatus('current')
if mibBuilder.loadTexts: adminHistoryUsername.setDescription('Admin username')
adminHistoryIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHistoryIPAddress.setStatus('current')
if mibBuilder.loadTexts: adminHistoryIPAddress.setDescription('IP Address admin logged in from')
adminHistoryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("console", 0), ("telnet", 1), ("ssh", 2), ("https", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHistoryInterface.setStatus('current')
if mibBuilder.loadTexts: adminHistoryInterface.setDescription('Interface admin logged in via')
adminHistoryLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHistoryLoginTime.setStatus('current')
if mibBuilder.loadTexts: adminHistoryLoginTime.setDescription('Admin login time')
adminHistoryLogoutTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 5, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminHistoryLogoutTime.setStatus('current')
if mibBuilder.loadTexts: adminHistoryLogoutTime.setDescription('Admin logout time')
adminPrivLevelTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 6), )
if mibBuilder.loadTexts: adminPrivLevelTable.setStatus('current')
if mibBuilder.loadTexts: adminPrivLevelTable.setDescription('Administrator privilege level table')
adminPrivLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "adminPrivLevelNumber"))
if mibBuilder.loadTexts: adminPrivLevelEntry.setStatus('current')
if mibBuilder.loadTexts: adminPrivLevelEntry.setDescription('Administrator privilege level table entry')
adminPrivLevelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminPrivLevelNumber.setStatus('current')
if mibBuilder.loadTexts: adminPrivLevelNumber.setDescription('Administrator privilege level number')
adminPrivLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPrivLevelName.setStatus('current')
if mibBuilder.loadTexts: adminPrivLevelName.setDescription('Administrator privilege level name')
adminPrivSectionTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 7), )
if mibBuilder.loadTexts: adminPrivSectionTable.setStatus('current')
if mibBuilder.loadTexts: adminPrivSectionTable.setDescription('Administrator privilege section table')
adminPrivSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 7, 1), ).setIndexNames((0, "XIRRUS-MIB", "adminPrivSectionIndex"))
if mibBuilder.loadTexts: adminPrivSectionEntry.setStatus('current')
if mibBuilder.loadTexts: adminPrivSectionEntry.setDescription('Administrator privilege section table entry')
adminPrivSectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: adminPrivSectionIndex.setStatus('current')
if mibBuilder.loadTexts: adminPrivSectionIndex.setDescription('Administrator privilege section table index')
adminPrivSectionName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adminPrivSectionName.setStatus('current')
if mibBuilder.loadTexts: adminPrivSectionName.setDescription('Administrator privilege section name')
adminPrivSectionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adminPrivSectionLevel.setStatus('current')
if mibBuilder.loadTexts: adminPrivSectionLevel.setDescription('Administrator privilege level required by config section')
cdpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1), )
if mibBuilder.loadTexts: cdpInfoTable.setStatus('current')
if mibBuilder.loadTexts: cdpInfoTable.setDescription('Cisco Discovery Protocol information table')
cdpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "cdpInfoIndex"))
if mibBuilder.loadTexts: cdpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: cdpInfoEntry.setDescription('CDP info table entry')
cdpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cdpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: cdpInfoIndex.setDescription('CDP info table index')
cdpInfoHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoHostname.setStatus('current')
if mibBuilder.loadTexts: cdpInfoHostname.setDescription('Device hostname')
cdpInfoIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoIPAddress.setStatus('current')
if mibBuilder.loadTexts: cdpInfoIPAddress.setDescription('Device IP Address')
cdpInfoModel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoModel.setStatus('current')
if mibBuilder.loadTexts: cdpInfoModel.setDescription('Device model')
cdpInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoInterface.setStatus('current')
if mibBuilder.loadTexts: cdpInfoInterface.setDescription('Device interface')
cdpInfoNativeVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoNativeVlan.setStatus('current')
if mibBuilder.loadTexts: cdpInfoNativeVlan.setDescription('Device native vlan')
cdpInfoCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoCapabilities.setStatus('current')
if mibBuilder.loadTexts: cdpInfoCapabilities.setDescription('Device capabilities')
cdpInfoSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdpInfoSoftware.setStatus('current')
if mibBuilder.loadTexts: cdpInfoSoftware.setDescription('Device software')
cdpEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpEnable.setStatus('current')
if mibBuilder.loadTexts: cdpEnable.setDescription('Enable or disable CDP')
cdpInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpInterval.setStatus('current')
if mibBuilder.loadTexts: cdpInterval.setDescription('CDP message interval (in seconds)')
cdpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdpHoldTime.setStatus('current')
if mibBuilder.loadTexts: cdpHoldTime.setDescription('CDP message hold time (in seconds)')
dateTimeSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeSet.setStatus('current')
if mibBuilder.loadTexts: dateTimeSet.setDescription('Date and time. To set use the following format: MMDDhhmmYYYY')
dateTimeZoneHours = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-12, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeZoneHours.setStatus('current')
if mibBuilder.loadTexts: dateTimeZoneHours.setDescription('Hours offset from UTC')
dateTimeZoneMins = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeZoneMins.setStatus('current')
if mibBuilder.loadTexts: dateTimeZoneMins.setDescription('Minutes offset from UTC')
dateTimeDSTAdjust = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateTimeDSTAdjust.setStatus('current')
if mibBuilder.loadTexts: dateTimeDSTAdjust.setDescription('Enable or disable DST adjustment')
ntp = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5))
ntpEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpEnable.setStatus('current')
if mibBuilder.loadTexts: ntpEnable.setDescription('Enable or disable NTP')
ntpPrimary = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimary.setStatus('current')
if mibBuilder.loadTexts: ntpPrimary.setDescription('Primary NTP IP address')
ntpSecondary = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSecondary.setStatus('current')
if mibBuilder.loadTexts: ntpSecondary.setDescription('Secondary NTP IP address')
ntpPrimaryAuthType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryAuthType.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryAuthType.setDescription('Primary NTP server authentication type')
ntpPrimaryAuthKeyID = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryAuthKeyID.setDescription('Primary NTP server authentication key ID')
ntpPrimaryAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryAuthKey.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryAuthKey.setDescription('Primary NTP server authentication key')
ntpPrimaryAuthKeyEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpPrimaryAuthKeyEnc.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryAuthKeyEnc.setDescription('Primary NTP server authentication key (encrypted)')
ntpSecondaryAuthType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("md5", 1), ("sha1", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSecondaryAuthType.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryAuthType.setDescription('Secondary NTP server authentication type')
ntpSecondaryAuthKeyID = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSecondaryAuthKeyID.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryAuthKeyID.setDescription('Secondary NTP server authentication key ID')
ntpSecondaryAuthKey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSecondaryAuthKey.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryAuthKey.setDescription('Secondary NTP server authentication key')
ntpSecondaryAuthKeyEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 6, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpSecondaryAuthKeyEnc.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryAuthKeyEnc.setDescription('Secondary NTP server authentication key (encrypted)')
dhcpPoolTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpPoolTableReset.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolTableReset.setDescription('Reset DHCP table (clear all entries)')
dhcpPoolTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dhcpPoolTable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolTable.setDescription('DHCP pool table for the Array')
dhcpPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "dhcpPoolIndex"))
if mibBuilder.loadTexts: dhcpPoolEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolEntry.setDescription('DHCP pool table entry')
dhcpPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: dhcpPoolIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolIndex.setDescription('DHCP pool table index')
dhcpPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolName.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolName.setDescription('DHCP pool name')
dhcpPoolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolEnable.setDescription('Enable or disable DHCP pool')
dhcpPoolRangeStartIP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolRangeStartIP.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolRangeStartIP.setDescription('DHCP pool address range start')
dhcpPoolRangeEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolRangeEndIP.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolRangeEndIP.setDescription('DHCP pool address range end')
dhcpPoolDefaultLease = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDefaultLease.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDefaultLease.setDescription('DHCP pool default lease (in seconds)')
dhcpPoolMaxLease = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMaxLease.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolMaxLease.setDescription('DHCP pool max lease (in seconds)')
dhcpPoolMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolMask.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolMask.setDescription('DHCP pool subnet mask')
dhcpPoolGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 9), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolGateway.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolGateway.setDescription('DHCP pool gateway')
dhcpPoolDNSDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDNSDomain.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDNSDomain.setDescription('DHCP pool DNS domain')
dhcpPoolDNSServer1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDNSServer1.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDNSServer1.setDescription('DHCP pool DNS first server')
dhcpPoolDNSServer2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDNSServer2.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDNSServer2.setDescription('DHCP pool DNS second server')
dhcpPoolDNSServer3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolDNSServer3.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolDNSServer3.setDescription('DHCP pool DNS third server')
dhcpPoolNAT = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolNAT.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolNAT.setDescription('Enable or disable NAT')
dhcpPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 8, 2, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: dhcpPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: dhcpPoolRowStatus.setDescription('Status of the DHCP pool row entry')
dnsDomain = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsDomain.setStatus('current')
if mibBuilder.loadTexts: dnsDomain.setDescription('DNS Domain')
dnsSrv1 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsSrv1.setStatus('current')
if mibBuilder.loadTexts: dnsSrv1.setDescription('DNS first server')
dnsSrv2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsSrv2.setStatus('current')
if mibBuilder.loadTexts: dnsSrv2.setDescription('DNS second server')
dnsSrv3 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsSrv3.setStatus('current')
if mibBuilder.loadTexts: dnsSrv3.setDescription('DNS third server')
dnsUseDhcp = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsUseDhcp.setStatus('current')
if mibBuilder.loadTexts: dnsUseDhcp.setDescription('Enable or disable updates to DNS settings via DHCP')
filterMoveDown = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMoveDown.setStatus('current')
if mibBuilder.loadTexts: filterMoveDown.setDescription('Decrease filter priority (Global filter list)')
filterMoveUp = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterMoveUp.setStatus('current')
if mibBuilder.loadTexts: filterMoveUp.setDescription('Increase filter priority (Global filter list)')
filterTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTableReset.setStatus('current')
if mibBuilder.loadTexts: filterTableReset.setDescription('Reset filter table and filter list table (clear all entries)')
filterTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4), )
if mibBuilder.loadTexts: filterTable.setStatus('current')
if mibBuilder.loadTexts: filterTable.setDescription('Filter table for the Array')
filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "filterIndex"))
if mibBuilder.loadTexts: filterEntry.setStatus('current')
if mibBuilder.loadTexts: filterEntry.setDescription('Filter table entry')
filterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: filterIndex.setStatus('current')
if mibBuilder.loadTexts: filterIndex.setDescription('Filter table index')
filterName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterName.setStatus('current')
if mibBuilder.loadTexts: filterName.setDescription('Filter name')
filterEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterEnable.setStatus('current')
if mibBuilder.loadTexts: filterEnable.setDescription('Enable/disable filter')
filterType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterType.setStatus('current')
if mibBuilder.loadTexts: filterType.setDescription('Filter type: allow/deny traffic')
filterProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterProtocol.setStatus('current')
if mibBuilder.loadTexts: filterProtocol.setDescription('Protocol to filter on (0 - any protocol, 255 - any IP protocol)')
filterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterPort.setStatus('current')
if mibBuilder.loadTexts: filterPort.setDescription('Port to filter on (0 - any port)')
filterSrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 0), ("ssid", 1), ("vlan", 2), ("ip", 3), ("mac", 4), ("interface", 5), ("group", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcType.setStatus('current')
if mibBuilder.loadTexts: filterSrcType.setDescription('Filter source type')
filterSrcInvertSense = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcInvertSense.setStatus('current')
if mibBuilder.loadTexts: filterSrcInvertSense.setDescription('Invert sense of filter source address')
filterSrcSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcSsid.setStatus('current')
if mibBuilder.loadTexts: filterSrcSsid.setDescription('Filter source SSID')
filterSrcVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcVlan.setStatus('current')
if mibBuilder.loadTexts: filterSrcVlan.setDescription('Filter source VLAN')
filterSrcIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 11), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcIPAddress.setStatus('current')
if mibBuilder.loadTexts: filterSrcIPAddress.setDescription('Filter source IP address')
filterSrcIPAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 12), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcIPAddressMask.setStatus('current')
if mibBuilder.loadTexts: filterSrcIPAddressMask.setDescription('Filter source IP address mask')
filterSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: filterSrcMacAddress.setDescription('Filter source MAC address')
filterSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: filterSrcMacAddressMask.setDescription('Filter source MAC address mask')
filterSrcIface = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("iap", 0), ("wds-client-1", 1), ("wds-client-2", 2), ("wds-client-3", 3), ("wds-client-4", 4), ("wds-all", 5), ("gig", 6), ("wds-host-1", 7), ("wds-host-2", 8), ("wds-host-3", 9), ("wds-host-4", 10), ("tunnel", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcIface.setStatus('current')
if mibBuilder.loadTexts: filterSrcIface.setDescription('Filter source interface')
filterDstType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("any", 0), ("ssid", 1), ("vlan", 2), ("ip", 3), ("mac", 4), ("interface", 5), ("group", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstType.setStatus('current')
if mibBuilder.loadTexts: filterDstType.setDescription('Filter destination type')
filterDstInvertSense = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstInvertSense.setStatus('current')
if mibBuilder.loadTexts: filterDstInvertSense.setDescription('Invert sense of filter destination address')
filterDstSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstSsid.setStatus('current')
if mibBuilder.loadTexts: filterDstSsid.setDescription('Filter destination SSID')
filterDstVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstVlan.setStatus('current')
if mibBuilder.loadTexts: filterDstVlan.setDescription('Filter destination VLAN')
filterDstIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 20), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstIPAddress.setStatus('current')
if mibBuilder.loadTexts: filterDstIPAddress.setDescription('Filter destination IP address')
filterDstIPAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 21), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstIPAddressMask.setStatus('current')
if mibBuilder.loadTexts: filterDstIPAddressMask.setDescription('Filter destination IP address mask')
filterDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: filterDstMacAddress.setDescription('Filter destination MAC address')
filterDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: filterDstMacAddressMask.setDescription('Filter destination MAC address mask')
filterDstIface = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("iap", 0), ("wds-client-1", 1), ("wds-client-2", 2), ("wds-client-3", 3), ("wds-client-4", 4), ("wds-all", 5), ("gig", 6), ("wds-host-1", 7), ("wds-host-2", 8), ("wds-host-3", 9), ("wds-host-4", 10), ("tunnel", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstIface.setStatus('current')
if mibBuilder.loadTexts: filterDstIface.setDescription('Filter destination interface')
filterSetQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSetQOS.setStatus('current')
if mibBuilder.loadTexts: filterSetQOS.setDescription('Modify QoS setting for this filter (0..3), if -1 - do not modify QoS setting')
filterSetVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSetVlan.setStatus('current')
if mibBuilder.loadTexts: filterSetVlan.setDescription('Modify VLAN setting for this filter (0..4095), if -1 - do not modify VLAN setting')
filterPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterPriority.setStatus('current')
if mibBuilder.loadTexts: filterPriority.setDescription('Filter priority')
filterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 28), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterRowStatus.setStatus('current')
if mibBuilder.loadTexts: filterRowStatus.setDescription('Status of the filter row entry')
filterList = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterList.setStatus('current')
if mibBuilder.loadTexts: filterList.setDescription('Filter list this filter belongs to')
filterPortRange = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterPortRange.setStatus('current')
if mibBuilder.loadTexts: filterPortRange.setDescription('Port range ending number (0 - no range)')
filterSrcGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSrcGroup.setStatus('current')
if mibBuilder.loadTexts: filterSrcGroup.setDescription('Filter source user group')
filterDstGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDstGroup.setStatus('current')
if mibBuilder.loadTexts: filterDstGroup.setDescription('Filter destination user group')
filterLog = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterLog.setStatus('current')
if mibBuilder.loadTexts: filterLog.setDescription('Enable/disable filter packet logging')
filterPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterPackets.setStatus('current')
if mibBuilder.loadTexts: filterPackets.setDescription('The number of packets that matched the filter')
filterBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterBytes.setStatus('current')
if mibBuilder.loadTexts: filterBytes.setDescription('The number of bytes that matched the filter')
filterApplication = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterApplication.setStatus('current')
if mibBuilder.loadTexts: filterApplication.setDescription('Application GUID to filter on')
filterLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("layer-2", 0), ("layer-3", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterLayer.setStatus('current')
if mibBuilder.loadTexts: filterLayer.setDescription('Filter layer')
filterSetDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSetDSCP.setStatus('current')
if mibBuilder.loadTexts: filterSetDSCP.setDescription('Modify QoS setting for this filter (0..63), if -1 - do not modify DSCP setting')
filterTrafficLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 4000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTrafficLimit.setStatus('current')
if mibBuilder.loadTexts: filterTrafficLimit.setDescription('Filter traffic limit (10 to 1000000 if pps, 10 to 4000000 if Kbps)')
filterTrafficLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("all-pps", 1), ("all-kbps", 2), ("sta-pps", 3), ("sta-kbps", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTrafficLimitType.setStatus('current')
if mibBuilder.loadTexts: filterTrafficLimitType.setDescription('Filter traffic limit type')
filterTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTimeOn.setStatus('current')
if mibBuilder.loadTexts: filterTimeOn.setDescription('Time on for this filter in minutes after midnight')
filterTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterTimeOff.setStatus('current')
if mibBuilder.loadTexts: filterTimeOff.setDescription('Time off for this filter in minutes after midnight')
filterDays = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterDays.setStatus('current')
if mibBuilder.loadTexts: filterDays.setDescription('Days of the week the filter is active')
filterSetIP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 4, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterSetIP.setStatus('current')
if mibBuilder.loadTexts: filterSetIP.setDescription('Modify IP setting for this filter')
filterListTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5), )
if mibBuilder.loadTexts: filterListTable.setStatus('current')
if mibBuilder.loadTexts: filterListTable.setDescription('Filter list table for the Array')
filterListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "filterListIndex"))
if mibBuilder.loadTexts: filterListEntry.setStatus('current')
if mibBuilder.loadTexts: filterListEntry.setDescription('Filter list table entry')
filterListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: filterListIndex.setStatus('current')
if mibBuilder.loadTexts: filterListIndex.setDescription('Filter list table index')
filterListName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterListName.setStatus('current')
if mibBuilder.loadTexts: filterListName.setDescription('Filter list name')
filterListEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterListEnable.setStatus('current')
if mibBuilder.loadTexts: filterListEnable.setDescription('Enable/disable filter list')
filterListLength = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterListLength.setStatus('current')
if mibBuilder.loadTexts: filterListLength.setDescription('Number of filters in filter list')
filterListReset = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterListReset.setStatus('current')
if mibBuilder.loadTexts: filterListReset.setDescription('Delete all filters from filter list')
filterListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 5, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterListRowStatus.setStatus('current')
if mibBuilder.loadTexts: filterListRowStatus.setDescription('Status of the filter list row entry')
filterStateful = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterStateful.setStatus('current')
if mibBuilder.loadTexts: filterStateful.setDescription('Enable or disable stateful filtering')
filterTrackApps = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: filterTrackApps.setStatus('current')
if mibBuilder.loadTexts: filterTrackApps.setDescription('Enable or disable application tracking')
filterAppTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8), )
if mibBuilder.loadTexts: filterAppTable.setStatus('current')
if mibBuilder.loadTexts: filterAppTable.setDescription('Filter application table for the Array')
filterAppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8, 1), ).setIndexNames((0, "XIRRUS-MIB", "filterAppIndex"))
if mibBuilder.loadTexts: filterAppEntry.setStatus('current')
if mibBuilder.loadTexts: filterAppEntry.setDescription('Filter application table entry')
filterAppIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: filterAppIndex.setStatus('current')
if mibBuilder.loadTexts: filterAppIndex.setDescription('Filter application table index')
filterAppGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterAppGuid.setStatus('current')
if mibBuilder.loadTexts: filterAppGuid.setDescription('Filter application global unique identifier')
filterAppCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterAppCategory.setStatus('current')
if mibBuilder.loadTexts: filterAppCategory.setDescription('Filter application category global unique identifier')
filterAppDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterAppDescription.setStatus('current')
if mibBuilder.loadTexts: filterAppDescription.setDescription('Filter application description')
filterAppCatTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 9), )
if mibBuilder.loadTexts: filterAppCatTable.setStatus('current')
if mibBuilder.loadTexts: filterAppCatTable.setDescription('Filter application category table for the Array')
filterAppCatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 9, 1), ).setIndexNames((0, "XIRRUS-MIB", "filterAppCatIndex"))
if mibBuilder.loadTexts: filterAppCatEntry.setStatus('current')
if mibBuilder.loadTexts: filterAppCatEntry.setDescription('Filter application category table entry')
filterAppCatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: filterAppCatIndex.setStatus('current')
if mibBuilder.loadTexts: filterAppCatIndex.setDescription('Filter application category table index')
filterAppCatGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterAppCatGuid.setStatus('current')
if mibBuilder.loadTexts: filterAppCatGuid.setDescription('Filter application category global unique identifier')
filterAppCatDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterAppCatDescription.setStatus('current')
if mibBuilder.loadTexts: filterAppCatDescription.setDescription('Filter application category description')
filterAppListTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10), )
if mibBuilder.loadTexts: filterAppListTable.setStatus('current')
if mibBuilder.loadTexts: filterAppListTable.setDescription('Filter Custom Application Lists')
filterAppListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10, 1), ).setIndexNames((0, "XIRRUS-MIB", "filterAppListIndex"))
if mibBuilder.loadTexts: filterAppListEntry.setStatus('current')
if mibBuilder.loadTexts: filterAppListEntry.setDescription('Filter Custom Application Lists table entry')
filterAppListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: filterAppListIndex.setStatus('current')
if mibBuilder.loadTexts: filterAppListIndex.setDescription('Filter Custom Application List Index')
filterAppListGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterAppListGuid.setStatus('current')
if mibBuilder.loadTexts: filterAppListGuid.setDescription('Filter Custom Application List GUID')
filterAppListDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterAppListDesc.setStatus('current')
if mibBuilder.loadTexts: filterAppListDesc.setDescription('Filter Custom Application List Description')
filterAppListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: filterAppListRowStatus.setStatus('current')
if mibBuilder.loadTexts: filterAppListRowStatus.setDescription('Filter Custom Application List Row Status')
appListMemberTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11), )
if mibBuilder.loadTexts: appListMemberTable.setStatus('current')
if mibBuilder.loadTexts: appListMemberTable.setDescription('Filter Custom Application Lists Members')
appListMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11, 1), ).setIndexNames((0, "XIRRUS-MIB", "appListMemberIndex"))
if mibBuilder.loadTexts: appListMemberEntry.setStatus('current')
if mibBuilder.loadTexts: appListMemberEntry.setDescription('Filter Custom Application Lists Member table entry')
appListMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: appListMemberIndex.setStatus('current')
if mibBuilder.loadTexts: appListMemberIndex.setDescription('Filter Custom Application List Member Index')
appListMemberGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appListMemberGuid.setStatus('current')
if mibBuilder.loadTexts: appListMemberGuid.setDescription('Filter Custom Application List Member GUID')
appListMemberApp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: appListMemberApp.setStatus('current')
if mibBuilder.loadTexts: appListMemberApp.setDescription('Filter Custom Application List Member Application')
appListMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 11, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: appListMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: appListMemberRowStatus.setDescription('Filter Custom Application List Member Row Status')
iap = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1))
ethernet = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2))
console = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3))
iapTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1), )
if mibBuilder.loadTexts: iapTable.setStatus('current')
if mibBuilder.loadTexts: iapTable.setDescription('Table of IAPs')
iapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "iapIndex"))
if mibBuilder.loadTexts: iapEntry.setStatus('current')
if mibBuilder.loadTexts: iapEntry.setDescription('IAP table entry')
iapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: iapIndex.setStatus('current')
if mibBuilder.loadTexts: iapIndex.setDescription('IAP table index')
iapName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapName.setStatus('current')
if mibBuilder.loadTexts: iapName.setDescription('IAP name')
iapMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMacAddress.setStatus('current')
if mibBuilder.loadTexts: iapMacAddress.setDescription('IAP Mac address')
iapNumStations = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapNumStations.setStatus('current')
if mibBuilder.loadTexts: iapNumStations.setDescription('Number of associated stations per IAP')
iapEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapEnable.setStatus('current')
if mibBuilder.loadTexts: iapEnable.setDescription('Bring IAP up or down')
iapCellSize = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("manual", 0), ("small", 1), ("medium", 2), ("large", 3), ("max", 4), ("auto", 5), ("monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapCellSize.setStatus('current')
if mibBuilder.loadTexts: iapCellSize.setDescription('Set up RF cell size base on Tx pwr and Rx Threshold')
iapTxPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapTxPwr.setStatus('current')
if mibBuilder.loadTexts: iapTxPwr.setDescription('Maximum Tx power output from radio')
iapRxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapRxThreshold.setStatus('current')
if mibBuilder.loadTexts: iapRxThreshold.setDescription('Rx (deferred) threshold setting')
iapChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapChannel.setStatus('current')
if mibBuilder.loadTexts: iapChannel.setDescription('Set channel (0 to set monitor mode for abg2 only)')
iapAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internal", 1), ("external", 2), ("omni", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapAntenna.setStatus('current')
if mibBuilder.loadTexts: iapAntenna.setDescription('Set antenna (abg only radios)')
iapDot11Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11g", 1), ("monitor", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapDot11Mode.setStatus('current')
if mibBuilder.loadTexts: iapDot11Mode.setDescription('Set 802.11 mode (band), where dot11a mode is 5GHz band and dot11g mode is 2.4GHz band (abg only radios)')
iapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapDescription.setStatus('current')
if mibBuilder.loadTexts: iapDescription.setDescription('IAP description')
iapWdsClientLink = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapWdsClientLink.setStatus('current')
if mibBuilder.loadTexts: iapWdsClientLink.setDescription('Assign this IAP to a WDS client link (1-4), 0 means no link')
iapWdsHostLink = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapWdsHostLink.setStatus('current')
if mibBuilder.loadTexts: iapWdsHostLink.setDescription('Assign this IAP to a WDS host link (1-4), 0 means no link')
iapChannelBondMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 0, 1, 2))).clone(namedValues=NamedValues(("minus1", -1), ("off", 0), ("plus1", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapChannelBondMode.setStatus('current')
if mibBuilder.loadTexts: iapChannelBondMode.setDescription('Channel bonding 40Mhz setting (802.11n)')
iapBondedChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapBondedChannel.setStatus('current')
if mibBuilder.loadTexts: iapBondedChannel.setDescription('Bonded channel (802.11n)')
iapMaxStationsHour = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMaxStationsHour.setStatus('current')
if mibBuilder.loadTexts: iapMaxStationsHour.setDescription('Maximum number of associated stations over last hour')
iapMaxStationsDay = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMaxStationsDay.setStatus('current')
if mibBuilder.loadTexts: iapMaxStationsDay.setDescription('Maximum number of associated stations over last day')
iapMaxStationsWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMaxStationsWeek.setStatus('current')
if mibBuilder.loadTexts: iapMaxStationsWeek.setDescription('Maximum number of associated stations over last week')
iapMaxStationsMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMaxStationsMonth.setStatus('current')
if mibBuilder.loadTexts: iapMaxStationsMonth.setDescription('Maximum number of associated stations over last month')
iapMaxStationsYear = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapMaxStationsYear.setStatus('current')
if mibBuilder.loadTexts: iapMaxStationsYear.setDescription('Maximum number of associated stations over last year')
iapChannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("default", 0), ("manual", 1), ("auto", 2), ("radar", 3), ("locked", 4), ("monitor", 5), ("timeshare", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapChannelMode.setStatus('current')
if mibBuilder.loadTexts: iapChannelMode.setDescription('Channel mode (on set, use 4 to lock, 0 to unlock channel)')
iapWifiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 24, 25, 31))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11b", 2), ("dot11ab", 3), ("dot11g", 4), ("dot11ag", 5), ("dot11bg", 6), ("dot11abg", 7), ("dot11n", 8), ("dot11an", 9), ("dot11bn", 10), ("dot11abn", 11), ("dot11gn", 12), ("dot11agn", 13), ("dot11bgn", 14), ("dot11abgn", 15), ("dot11ac", 16), ("dot11nac", 24), ("dot11anac", 25), ("dot11abgnac", 31)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapWifiMode.setStatus('current')
if mibBuilder.loadTexts: iapWifiMode.setDescription('Wifi mode')
iapPresent = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-present", 0), ("present", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapPresent.setStatus('current')
if mibBuilder.loadTexts: iapPresent.setDescription('Indicates whether IAP slot is populated')
iapWdsLinkDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapWdsLinkDistance.setStatus('current')
if mibBuilder.loadTexts: iapWdsLinkDistance.setDescription('WDS link distance (in miles)')
iapResetsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapResetsMonitor.setStatus('current')
if mibBuilder.loadTexts: iapResetsMonitor.setDescription('Number of monitor radio resets')
iapResetsBeacon = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapResetsBeacon.setStatus('current')
if mibBuilder.loadTexts: iapResetsBeacon.setDescription('Number of interface beacon resets')
iapResetsPhy = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapResetsPhy.setStatus('current')
if mibBuilder.loadTexts: iapResetsPhy.setDescription('Number of interface PHY resets')
iapResetsMac = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapResetsMac.setStatus('current')
if mibBuilder.loadTexts: iapResetsMac.setDescription('Number of interface MAC resets')
iapResetsSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapResetsSystem.setStatus('current')
if mibBuilder.loadTexts: iapResetsSystem.setDescription('Number of system resets')
iapSpatialStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-present", 0), ("type-1x1", 1), ("type-2x2", 2), ("type-2x3", 3), ("type-3x3", 4), ("type-4x4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapSpatialStreams.setStatus('current')
if mibBuilder.loadTexts: iapSpatialStreams.setDescription('Number of spatial streams on the IAP')
iapChannelBond80Mhz = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapChannelBond80Mhz.setStatus('current')
if mibBuilder.loadTexts: iapChannelBond80Mhz.setDescription('Channel bonding 80Mhz setting')
iapBondedChannelList = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapBondedChannelList.setStatus('current')
if mibBuilder.loadTexts: iapBondedChannelList.setDescription('IAP Bonded Channel List')
iapType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("not-present", 0), ("unknown", 1), ("dot11abgn", 2), ("dot11abgnac", 3), ("dot11an", 4), ("dot11anac", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapType.setStatus('current')
if mibBuilder.loadTexts: iapType.setDescription('IAP type')
iapChannelBond160Mhz = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iapChannelBond160Mhz.setStatus('current')
if mibBuilder.loadTexts: iapChannelBond160Mhz.setDescription('Channel bonding 160Mhz setting')
pysmi_global = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2)).setLabel("global")
global11a = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3))
global11bg = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4))
wds = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5))
global11n = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6))
global11ac = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8))
globalIAPEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-down", 0), ("all-up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPEnable.setStatus('current')
if mibBuilder.loadTexts: globalIAPEnable.setDescription('Bring all IAPs up or down')
globalIAPCellSize = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("small", 1), ("medium", 2), ("large", 3), ("max", 4), ("auto", 5), ("monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPCellSize.setStatus('current')
if mibBuilder.loadTexts: globalIAPCellSize.setDescription('Set up RF cell size base on Tx pwr and Rx Threshold')
globalIAPTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPTxPwr.setStatus('current')
if mibBuilder.loadTexts: globalIAPTxPwr.setDescription('Maximum Tx power output from any radio')
globalIAPRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPRxThreshold.setStatus('current')
if mibBuilder.loadTexts: globalIAPRxThreshold.setDescription('Rx (deferred) threshold setting')
globalIAPBeaconRate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPBeaconRate.setStatus('current')
if mibBuilder.loadTexts: globalIAPBeaconRate.setDescription('Time between beacons in kilo_microseconds')
globalIAPBeaconDTIM = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPBeaconDTIM.setStatus('current')
if mibBuilder.loadTexts: globalIAPBeaconDTIM.setDescription('Number of beacons between DTIM being transmitted')
globalIAPLongRetry = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPLongRetry.setStatus('current')
if mibBuilder.loadTexts: globalIAPLongRetry.setDescription('Long retry')
globalIAPShortRetry = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPShortRetry.setStatus('current')
if mibBuilder.loadTexts: globalIAPShortRetry.setDescription('Short retry')
globalIAPMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPMaxStations.setStatus('current')
if mibBuilder.loadTexts: globalIAPMaxStations.setDescription('Limit the number of STA that can be associated per IAP')
globalIAPInactiveTime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPInactiveTime.setStatus('current')
if mibBuilder.loadTexts: globalIAPInactiveTime.setDescription('Time, in seconds, without any activity before removing the client from the association table')
globalIAPReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: globalIAPReauthPeriod.setDescription('Time (sec) between 802.1x re_authentication attempts')
globalIAPSta2Sta = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("forward", 0), ("block", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPSta2Sta.setStatus('current')
if mibBuilder.loadTexts: globalIAPSta2Sta.setDescription('Block or forward intra-Array STA to STA traffic')
globalMgmt = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMgmt.setStatus('current')
if mibBuilder.loadTexts: globalMgmt.setDescription('Enable management on the WLAN interfaces')
leds = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14))
autoChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 15))
rogueDetect = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16))
fastRoaming = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17))
autoCell = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24))
ids = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33))
rfMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 40))
globalLoadBalancing = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalLoadBalancing.setStatus('current')
if mibBuilder.loadTexts: globalLoadBalancing.setDescription('Enable/disable load balancing across IAPs')
globalCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64))).clone(namedValues=NamedValues(("not-set", 0), ("united-states", 1), ("canada", 2), ("australia", 3), ("new-zealand", 4), ("austria", 5), ("belgium", 6), ("denmark", 7), ("finland", 8), ("france", 9), ("germany", 10), ("hungary", 11), ("ireland", 12), ("italy", 13), ("luxembourg", 14), ("netherlands", 15), ("norway", 16), ("poland", 17), ("portugal", 18), ("slovenia", 19), ("spain", 20), ("sweden", 21), ("switzerland", 22), ("united-kingdom", 23), ("japan", 24), ("united-states-ext", 25), ("mexico", 26), ("thailand", 27), ("greece", 28), ("israel", 29), ("south-africa", 30), ("brazil", 31), ("india", 32), ("singapore", 33), ("malaysia", 34), ("korea", 35), ("hong-kong", 36), ("china", 37), ("macao", 38), ("united-states-outdoor", 39), ("united-status-weather-radar", 40), ("russia", 41), ("united-states-non-dfs", 42), ("united-arab-emirates", 43), ("argentina", 44), ("bahrain", 45), ("brunei", 46), ("bahamas", 47), ("chile", 48), ("colombia", 49), ("dominican-republic", 50), ("egypt", 51), ("indonesia", 52), ("kuwait", 53), ("lebanon", 54), ("oman", 55), ("peru", 56), ("philippines", 57), ("qatar", 58), ("saudi-arabia", 59), ("taiwan", 60), ("turkey", 61), ("trinidad", 62), ("ukraine", 63), ("venezuela", 64)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalCountryCode.setStatus('current')
if mibBuilder.loadTexts: globalCountryCode.setDescription('Country code')
globalSharpCell = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalSharpCell.setStatus('current')
if mibBuilder.loadTexts: globalSharpCell.setDescription('Enable/disable sharp cell TX power shaping')
globalIAPMaxPhones = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPMaxPhones.setStatus('current')
if mibBuilder.loadTexts: globalIAPMaxPhones.setDescription('Limit the number of phones that can be associated per IAP. Note this is not used and essentially deprecated.')
globalNumStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalNumStations.setStatus('current')
if mibBuilder.loadTexts: globalNumStations.setDescription('Number of stations associated with array')
globalBroadcastRates = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("optimized", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalBroadcastRates.setStatus('current')
if mibBuilder.loadTexts: globalBroadcastRates.setDescription('Select standard or optimized broadcast rates')
globalPublicSafety = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalPublicSafety.setStatus('current')
if mibBuilder.loadTexts: globalPublicSafety.setDescription('Enable/disable public safety band')
globalDot11hSupport = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalDot11hSupport.setStatus('current')
if mibBuilder.loadTexts: globalDot11hSupport.setDescription('Enable/disable support for 802.11h beacons')
globalLoopbackTest = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disabled", 0), ("alert-only", 1), ("repair-without-reboot", 2), ("reboot-allowed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalLoopbackTest.setStatus('current')
if mibBuilder.loadTexts: globalLoopbackTest.setDescription('IAP radio assurance mode')
globalArpFilter = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("passthru", 1), ("proxy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalArpFilter.setStatus('current')
if mibBuilder.loadTexts: globalArpFilter.setDescription('Enable/disable ARP filtering')
globalIAPChannelReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIAPChannelReset.setStatus('current')
if mibBuilder.loadTexts: globalIAPChannelReset.setDescription('Reset all channels back to factory defaults')
globalWfaMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalWfaMode.setStatus('current')
if mibBuilder.loadTexts: globalWfaMode.setDescription('Enable/disable WiFi Alliance mode')
globalMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMaxStations.setStatus('current')
if mibBuilder.loadTexts: globalMaxStations.setDescription('Maximum number of associated stations per array')
globalMulticastMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("standard", 0), ("convert", 1), ("snoop", 2), ("prune", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMulticastMode.setStatus('current')
if mibBuilder.loadTexts: globalMulticastMode.setDescription('Select multicast mode')
globalAutoBandEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalAutoBandEnable.setStatus('current')
if mibBuilder.loadTexts: globalAutoBandEnable.setDescription('Automatically assign bands (2.4GHz or 5GHz) to all IAPs')
globalWmmPowerSave = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalWmmPowerSave.setStatus('current')
if mibBuilder.loadTexts: globalWmmPowerSave.setDescription('Enable/disable WMM power save mode')
globalDscpMappingMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalDscpMappingMode.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingMode.setDescription('Enable/disable DSCP to QoS mapping')
globalDscpMappingTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 37), )
if mibBuilder.loadTexts: globalDscpMappingTable.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingTable.setDescription('DSCP to QoS mapping')
globalDscpMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 37, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalDscpMappingIndex"))
if mibBuilder.loadTexts: globalDscpMappingEntry.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingEntry.setDescription('DSCP to QoS mapping entry')
globalDscpMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: globalDscpMappingIndex.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingIndex.setDescription('DSCP to QoS mapping index')
globalDscpMappingDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 37, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalDscpMappingDscp.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingDscp.setDescription('DSCP value mapped')
globalDscpMappingQos = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 37, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalDscpMappingQos.setStatus('current')
if mibBuilder.loadTexts: globalDscpMappingQos.setDescription('QoS setting')
globalMulticastExcludeTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 38), )
if mibBuilder.loadTexts: globalMulticastExcludeTable.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeTable.setDescription('Multicast conversion exclude list')
globalMulticastExcludeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 38, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalMulticastExcludeIndex"))
if mibBuilder.loadTexts: globalMulticastExcludeEntry.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeEntry.setDescription('Multicast conversion exclude list entry')
globalMulticastExcludeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 38, 1, 1), Integer32())
if mibBuilder.loadTexts: globalMulticastExcludeIndex.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeIndex.setDescription('Multicast conversion exclude list Index')
globalMulticastExcludeIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 38, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastExcludeIpAddress.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeIpAddress.setDescription('Multicast IP address excluded from conversion')
globalMulticastExcludeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 38, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastExcludeRowStatus.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeRowStatus.setDescription('Status of the multicast conversion exclude list row entry')
globalMulticastExcludeTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMulticastExcludeTableReset.setStatus('current')
if mibBuilder.loadTexts: globalMulticastExcludeTableReset.setDescription('Reset multicast conversion exclude list')
globalExtractStaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 41), )
if mibBuilder.loadTexts: globalExtractStaInfoTable.setStatus('current')
if mibBuilder.loadTexts: globalExtractStaInfoTable.setDescription('Station information to be extracted table')
globalExtractStaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 41, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalExtractStaInfoIndex"))
if mibBuilder.loadTexts: globalExtractStaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: globalExtractStaInfoEntry.setDescription('Station information to be extracted table entry')
globalExtractStaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 41, 1, 1), Integer32())
if mibBuilder.loadTexts: globalExtractStaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: globalExtractStaInfoIndex.setDescription('Station information to be extracted table index')
globalExtractStaInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 41, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: globalExtractStaInfoType.setStatus('current')
if mibBuilder.loadTexts: globalExtractStaInfoType.setDescription('Type of station information to be extracted')
globalExtractStaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 41, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalExtractStaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: globalExtractStaInfoStatus.setDescription('Enable/disable station information to be extracted')
globalStaAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalStaAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: globalStaAuthTimeout.setDescription('Time to complete 802.1x authentication (seconds)')
globalIPv6Filter = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalIPv6Filter.setStatus('current')
if mibBuilder.loadTexts: globalIPv6Filter.setDescription('Enable/disable IPv6 packet filtering')
globalMulticastForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 44), )
if mibBuilder.loadTexts: globalMulticastForwardingTable.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingTable.setDescription('Multicast conversion forwarding list')
globalMulticastForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 44, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalMulticastForwardingIndex"))
if mibBuilder.loadTexts: globalMulticastForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingEntry.setDescription('Multicast conversion forwarding list entry')
globalMulticastForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 44, 1, 1), Integer32())
if mibBuilder.loadTexts: globalMulticastForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingIndex.setDescription('Multicast conversion forwarding list Index')
globalMulticastForwardingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 44, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastForwardingIpAddress.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingIpAddress.setDescription('Multicast IP address forwarding from conversion')
globalMulticastForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 44, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastForwardingRowStatus.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingRowStatus.setDescription('Status of the multicast conversion forwarding list row entry')
globalMulticastForwardingTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMulticastForwardingTableReset.setStatus('current')
if mibBuilder.loadTexts: globalMulticastForwardingTableReset.setDescription('Reset multicast conversion forwarding list')
globalMulticastVlanForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 46), )
if mibBuilder.loadTexts: globalMulticastVlanForwardingTable.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingTable.setDescription('Multicast conversion vlan forwarding list')
globalMulticastVlanForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 46, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalMulticastVlanForwardingIndex"))
if mibBuilder.loadTexts: globalMulticastVlanForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingEntry.setDescription('Multicast conversion vlan forwarding list entry')
globalMulticastVlanForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 46, 1, 1), Integer32())
if mibBuilder.loadTexts: globalMulticastVlanForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingIndex.setDescription('Multicast conversion vlan forwarding list Index')
globalMulticastVlanForwardingVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 46, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastVlanForwardingVlanNumber.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingVlanNumber.setDescription('Multicast IP vlan forwarding from conversion')
globalMulticastVlanForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 46, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastVlanForwardingRowStatus.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingRowStatus.setDescription('Status of the multicast conversion vlan forwarding list row entry')
globalMulticastVlanForwardingTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMulticastVlanForwardingTableReset.setStatus('current')
if mibBuilder.loadTexts: globalMulticastVlanForwardingTableReset.setDescription('Reset multicast conversion vlan forwarding list')
globalMulticastDnsFilteringTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 48), )
if mibBuilder.loadTexts: globalMulticastDnsFilteringTable.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringTable.setDescription('Multicast DNS filtering list')
globalMulticastDnsFilteringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 48, 1), ).setIndexNames((0, "XIRRUS-MIB", "globalMulticastDnsFilteringIndex"))
if mibBuilder.loadTexts: globalMulticastDnsFilteringEntry.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringEntry.setDescription('Multicast DNS filtering list entry')
globalMulticastDnsFilteringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 48, 1, 1), Integer32())
if mibBuilder.loadTexts: globalMulticastDnsFilteringIndex.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringIndex.setDescription('Multicast DNS filtering list Index')
globalMulticastDnsFilteringName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 48, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastDnsFilteringName.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringName.setDescription('Multicast DNS filtering list')
globalMulticastDnsFilteringRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 48, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: globalMulticastDnsFilteringRowStatus.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringRowStatus.setDescription('Status of the multicast DNS filtering list row entry')
globalMulticastDnsFilteringTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalMulticastDnsFilteringTableReset.setStatus('current')
if mibBuilder.loadTexts: globalMulticastDnsFilteringTableReset.setDescription('Reset multicast DNS filtering list')
globalDot11kSupport = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalDot11kSupport.setStatus('current')
if mibBuilder.loadTexts: globalDot11kSupport.setDescription('Enable/disable support for 802.11k beacons')
globalDot11wProtectedManagement = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalDot11wProtectedManagement.setStatus('current')
if mibBuilder.loadTexts: globalDot11wProtectedManagement.setDescription('Enable/disable support for 802.11w Protected Management')
globalExtractIpAddrDhcpPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: globalExtractIpAddrDhcpPeriod.setStatus('current')
if mibBuilder.loadTexts: globalExtractIpAddrDhcpPeriod.setDescription('Station IP address extraction via DHCP period')
ledsEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("iapUp", 1), ("associated", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledsEnable.setStatus('current')
if mibBuilder.loadTexts: ledsEnable.setDescription('Enable/Disable LED operations')
ledsActivityTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 2), )
if mibBuilder.loadTexts: ledsActivityTable.setStatus('current')
if mibBuilder.loadTexts: ledsActivityTable.setDescription('LED activity table')
ledsActivityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "ledsActivityIndex"))
if mibBuilder.loadTexts: ledsActivityEntry.setStatus('current')
if mibBuilder.loadTexts: ledsActivityEntry.setDescription('LED activity table entry')
ledsActivityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: ledsActivityIndex.setStatus('current')
if mibBuilder.loadTexts: ledsActivityIndex.setDescription('LED activity table index')
ledsActivityPacketType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ledsActivityPacketType.setStatus('current')
if mibBuilder.loadTexts: ledsActivityPacketType.setDescription('Packet type')
ledsActivityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ledsActivityStatus.setStatus('current')
if mibBuilder.loadTexts: ledsActivityStatus.setDescription('Enable/disable blinking')
autoChannelEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("negotiate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelEnable.setStatus('current')
if mibBuilder.loadTexts: autoChannelEnable.setDescription('Set to 1 to enable auto channel configuration, 2 to negotiate airtime with other arrays before enabling auto channel configuration')
autoChannelPowerUp = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelPowerUp.setStatus('current')
if mibBuilder.loadTexts: autoChannelPowerUp.setDescription('Enable/disable auto channel configuration at power up')
autoChannelSchedule = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 15, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelSchedule.setStatus('current')
if mibBuilder.loadTexts: autoChannelSchedule.setDescription("Times to run auto channel in 'hh:mm hh:mm ...' format")
rogueDetectEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("standard", 1), ("advanced", 2), ("standard-auto-block", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectEnable.setStatus('current')
if mibBuilder.loadTexts: rogueDetectEnable.setDescription('Enable/disable rogue AP detection')
rogueDetectSSIDTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2), )
if mibBuilder.loadTexts: rogueDetectSSIDTable.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDTable.setDescription('Rogue detect SSID table for the Array')
rogueDetectSSIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "rogueDetectSSIDIndex"))
if mibBuilder.loadTexts: rogueDetectSSIDEntry.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDEntry.setDescription('Rogue detect SSID table entry')
rogueDetectSSIDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rogueDetectSSIDIndex.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDIndex.setDescription('Rogue detect SSID table index')
rogueDetectSSIDName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectSSIDName.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDName.setDescription('SSID')
rogueDetectSSIDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("known", 1), ("approved", 2), ("blocked", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectSSIDStatus.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDStatus.setDescription('SSID status')
rogueDetectSSIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectSSIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDRowStatus.setDescription('Status of the rogue detect SSID table row entry')
rogueDetectSSIDMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("bssid-or-ssid", 0), ("bssid", 1), ("ssid", 2), ("manufacturer", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectSSIDMatch.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDMatch.setDescription('SSID match')
rogueDetectAPTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3), )
if mibBuilder.loadTexts: rogueDetectAPTable.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPTable.setDescription("Table of rogue AP's")
rogueDetectAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1), ).setIndexNames((0, "XIRRUS-MIB", "rogueDetectAPIndex"))
if mibBuilder.loadTexts: rogueDetectAPEntry.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPEntry.setDescription('Rogue AP table entry')
rogueDetectAPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: rogueDetectAPIndex.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPIndex.setDescription('Rogue AP index')
rogueDetectAPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("known", 1), ("approved", 2), ("blocked", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPStatus.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPStatus.setDescription('Rogue AP status')
rogueDetectAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPSSID.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPSSID.setDescription('Rogue AP SSID')
rogueDetectAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPBSSID.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPBSSID.setDescription('Rogue AP BSSID')
rogueDetectAPManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPManufacturer.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPManufacturer.setDescription('Rogue AP manufacturer')
rogueDetectAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPChannel.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPChannel.setDescription('Rogue AP channel')
rogueDetectAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPRSSI.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPRSSI.setDescription('Rogue AP RSSI')
rogueDetectAPSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPSecurity.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPSecurity.setDescription('Rogue AP security')
rogueDetectAPIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPIPAddress.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPIPAddress.setDescription('Rogue AP IP Address')
rogueDetectAPTimeDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPTimeDiscovered.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPTimeDiscovered.setDescription('Rogue AP time discovered')
rogueDetectAPTimeLastActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPTimeLastActive.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPTimeLastActive.setDescription('Rogue AP IP time last active')
rogueDetectAPType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibss", 1), ("ess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPType.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPType.setDescription('Rogue AP type')
rogueDetectSSIDTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectSSIDTableReset.setStatus('current')
if mibBuilder.loadTexts: rogueDetectSSIDTableReset.setDescription('Reset rogue detect SSID table (clear all entries)')
rogueDetectAPOrigTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5), )
if mibBuilder.loadTexts: rogueDetectAPOrigTable.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTable.setDescription("Table of rogue AP's (original)")
rogueDetectAPOrigTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "rogueDetectAPOrigTableIndex"))
if mibBuilder.loadTexts: rogueDetectAPOrigTableEntry.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableEntry.setDescription('Rogue AP original table entry')
rogueDetectAPOrigTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: rogueDetectAPOrigTableIndex.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableIndex.setDescription('Rogue AP index')
rogueDetectAPOrigTableSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableSSID.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableSSID.setDescription('Rogue AP SSID')
rogueDetectAPOrigTableBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableBSSID.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableBSSID.setDescription('Rogue AP BSSID')
rogueDetectAPOrigTableManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableManufacturer.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableManufacturer.setDescription('Rogue AP manufacturer')
rogueDetectAPOrigTableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableChannel.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableChannel.setDescription('Rogue AP channel')
rogueDetectAPOrigTableBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dot11a", 1), ("dot11g", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableBand.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableBand.setDescription('Rogue AP 802.11 band')
rogueDetectAPOrigTableRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableRSSI.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableRSSI.setDescription('Rogue AP RSSI')
rogueDetectAPOrigTableSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableSecurity.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableSecurity.setDescription('Rogue AP security')
rogueDetectAPOrigTableIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableIPAddress.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableIPAddress.setDescription('Rogue AP IP Address')
rogueDetectAPOrigTableTimeDiscovered = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableTimeDiscovered.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableTimeDiscovered.setDescription('Rogue AP time discovered')
rogueDetectAPOrigTableTimeLastActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableTimeLastActive.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableTimeLastActive.setDescription('Rogue AP IP time last active')
rogueDetectAPOrigTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("not-active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableActive.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableActive.setDescription('Is Rogue AP active?')
rogueDetectAPOrigTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibss", 1), ("ess", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rogueDetectAPOrigTableType.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTableType.setDescription('Rogue AP type')
rogueDetectAutoBlockEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("wep-and-none", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectAutoBlockEnc.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockEnc.setDescription('Encryption type for automatic blocking of unknown rogue APs')
rogueDetectAutoBlockRSSI = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-95, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectAutoBlockRSSI.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockRSSI.setDescription('Minimum RSSI value for automatic blocking of unknown rogue APs')
rogueDetectAutoBlockType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("ibss", 1), ("ess", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectAutoBlockType.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockType.setDescription('Type of rogue AP networks to automatically block')
rogueDetectAPOrigTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 9), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectAPOrigTablePeriod.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAPOrigTablePeriod.setDescription('Specify period for rogue AP table entries (in seconds, 0 - all table entries)')
rogueDetectAutoBlockWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 10), )
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistTable.setDescription('Rogue AP Auto Block channel whitelist')
rogueDetectAutoBlockWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 10, 1), ).setIndexNames((0, "XIRRUS-MIB", "rogueDetectAutoBlockWhitelistIndex"))
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistEntry.setDescription('Rogue AP Auto Block channel whitelist entry')
rogueDetectAutoBlockWhitelistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistIndex.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistIndex.setDescription('Rogue AP Auto Block channel whitelist Index')
rogueDetectAutoBlockWhitelistChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistChannel.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistChannel.setDescription('Rogue AP Auto Block channel whitelist channel')
rogueDetectAutoBlockWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistRowStatus.setDescription('Status of the Rogue AP Auto Block channel whitelist row entry')
rogueDetectAutoBlockWhitelistTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 16, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistTableReset.setStatus('current')
if mibBuilder.loadTexts: rogueDetectAutoBlockWhitelistTableReset.setDescription('Reset Rogue AP Auto Block channel whitelist')
fastRoamingEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("broadcast", 1), ("tunnel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingEnable.setStatus('current')
if mibBuilder.loadTexts: fastRoamingEnable.setDescription('Enable/disable fast roaming')
fastRoamingPeerMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("target-only", 0), ("in-range", 1), ("all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingPeerMode.setStatus('current')
if mibBuilder.loadTexts: fastRoamingPeerMode.setDescription('Set fast roaming peer mode')
fastRoamingTargetArrayTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingTargetArrayTableReset.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetArrayTableReset.setDescription('Reset fast roaming target array table (clear all entries)')
fastRoamingLayer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("layer-2-only", 0), ("layer-2-and-3", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fastRoamingLayer.setStatus('current')
if mibBuilder.loadTexts: fastRoamingLayer.setDescription('Set fast roaming layer')
fastRoamingTargetTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6), )
if mibBuilder.loadTexts: fastRoamingTargetTable.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetTable.setDescription('Fast roaming target array table')
fastRoamingTargetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "fastRoamingTargetIndex"))
if mibBuilder.loadTexts: fastRoamingTargetEntry.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetEntry.setDescription('Fast roaming target array table entry')
fastRoamingTargetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: fastRoamingTargetIndex.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetIndex.setDescription('Fast roaming target array table index')
fastRoamingTargetType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mac", 0), ("ip", 1), ("hostname", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastRoamingTargetType.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetType.setDescription('Type of the fast roaming target array table row entry')
fastRoamingTargetMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastRoamingTargetMacAddress.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetMacAddress.setDescription('Base IAP MAC address of the target array')
fastRoamingTargetIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastRoamingTargetIpAddress.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetIpAddress.setDescription('IP address of the target array')
fastRoamingTargetHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastRoamingTargetHostname.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetHostname.setDescription('Hostname of the target array')
fastRoamingTargetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 17, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fastRoamingTargetRowStatus.setStatus('current')
if mibBuilder.loadTexts: fastRoamingTargetRowStatus.setDescription('Status of the fast roaming target array table row entry')
autoCellEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCellEnable.setStatus('current')
if mibBuilder.loadTexts: autoCellEnable.setDescription('Enable auto cell size configuration')
autoCellOverlap = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCellOverlap.setStatus('current')
if mibBuilder.loadTexts: autoCellOverlap.setDescription('Set auto cell size overlap (in percents)')
autoCellPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCellPeriod.setStatus('current')
if mibBuilder.loadTexts: autoCellPeriod.setDescription('Set period to run auto cell size assignment (in seconds from 60 to 3000000, 0 - none)')
autoCellMinTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCellMinTxPwr.setStatus('current')
if mibBuilder.loadTexts: autoCellMinTxPwr.setDescription('Set auto cell size minimum Tx power')
autoCellByChan = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 24, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoCellByChan.setStatus('current')
if mibBuilder.loadTexts: autoCellByChan.setDescription('Enable auto cell by channel configuration')
idsEventTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1), )
if mibBuilder.loadTexts: idsEventTable.setStatus('current')
if mibBuilder.loadTexts: idsEventTable.setDescription('IDS event table')
idsEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "idsEventIndex"))
if mibBuilder.loadTexts: idsEventEntry.setStatus('current')
if mibBuilder.loadTexts: idsEventEntry.setDescription('IDS event table entry')
idsEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: idsEventIndex.setStatus('current')
if mibBuilder.loadTexts: idsEventIndex.setDescription('IDS event index')
idsEventId = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("beacon-flood", 1), ("probe-req-flood", 2), ("auth-flood", 3), ("assoc-flood", 4), ("disassoc-flood", 5), ("deauth-flood", 6), ("eap-flood", 7), ("ap-impersonation", 8), ("disassoc-attack", 9), ("deauth-attack", 10), ("duration-attack", 11), ("mic-error-attack", 12), ("null-probe-resp", 13), ("seq-num-anomaly", 14), ("sta-impersonation", 15), ("sta-broadcast", 16), ("evil-twin-attack", 17), ("rf-jamming", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventId.setStatus('current')
if mibBuilder.loadTexts: idsEventId.setDescription('IDS event detected')
idsEventTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventTime.setStatus('current')
if mibBuilder.loadTexts: idsEventTime.setDescription('IDS event detection time')
idsEventTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: idsEventTimestamp.setDescription('IDS event detection time (in seconds)')
idsEventIAP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventIAP.setStatus('current')
if mibBuilder.loadTexts: idsEventIAP.setDescription('IAP IDS event was detected on')
idsEventChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventChannel.setStatus('current')
if mibBuilder.loadTexts: idsEventChannel.setDescription('Channel IDS event was detected on')
idsEventPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventPeriod.setStatus('current')
if mibBuilder.loadTexts: idsEventPeriod.setDescription('IDS event detection time period (in seconds)')
idsEventCurPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventCurPackets.setStatus('current')
if mibBuilder.loadTexts: idsEventCurPackets.setDescription('IDS event current number of packets received')
idsEventAvgPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventAvgPackets.setStatus('current')
if mibBuilder.loadTexts: idsEventAvgPackets.setDescription('IDS event average number of packets received')
idsEventMaxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventMaxPackets.setStatus('current')
if mibBuilder.loadTexts: idsEventMaxPackets.setDescription('IDS event maximum number of packets received')
idsEventMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventMacAddress.setStatus('current')
if mibBuilder.loadTexts: idsEventMacAddress.setDescription('IDS event MAC address')
idsEventSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idsEventSSID.setStatus('current')
if mibBuilder.loadTexts: idsEventSSID.setDescription('IDS event SSID')
idsDosAttack = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2))
idsImpersonation = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3))
idsBeaconFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsBeaconFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsBeaconFloodMode.setDescription('Beacon flood detection mode')
idsBeaconFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsBeaconFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsBeaconFloodThreshold.setDescription('Number of packets received in a period of time to trigger beacon flood detection')
idsBeaconFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsBeaconFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsBeaconFloodPeriod.setDescription('Time period for beacon flood detection (in seconds, must be an increment of 10)')
idsProbeReqFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsProbeReqFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsProbeReqFloodMode.setDescription('Probe request flood detection mode')
idsProbeReqFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsProbeReqFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsProbeReqFloodThreshold.setDescription('Number of packets received in a period of time to trigger probe request flood detection')
idsProbeReqFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsProbeReqFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsProbeReqFloodPeriod.setDescription('Time period for probe request flood detection (in seconds, must be an increment of 10)')
idsAuthFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAuthFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsAuthFloodMode.setDescription('Authentication flood detection mode')
idsAuthFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAuthFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsAuthFloodThreshold.setDescription('Number of packets received in a period of time to trigger authentication flood detection')
idsAuthFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAuthFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsAuthFloodPeriod.setDescription('Time period for authentication flood detection (in seconds, must be an increment of 10)')
idsAssocFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAssocFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsAssocFloodMode.setDescription('Association flood detection mode')
idsAssocFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAssocFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsAssocFloodThreshold.setDescription('Number of packets received in a period of time to trigger association flood detection')
idsAssocFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAssocFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsAssocFloodPeriod.setDescription('Time period for association flood detection (in seconds, must be an increment of 10)')
idsDisassocFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsDisassocFloodMode.setDescription('Disassociation flood detection mode')
idsDisassocFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsDisassocFloodThreshold.setDescription('Number of packets received in a period of time to trigger disassociation flood detection')
idsDisassocFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsDisassocFloodPeriod.setDescription('Time period for disassociation flood detection (in seconds, must be an increment of 10)')
idsDeauthFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsDeauthFloodMode.setDescription('Deauthentication flood detection mode')
idsDeauthFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsDeauthFloodThreshold.setDescription('Number of packets received in a period of time to trigger deauthentication flood detection')
idsDeauthFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsDeauthFloodPeriod.setDescription('Time period for deauthentication flood detection (in seconds, must be an increment of 10)')
idsEAPFloodMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("manual", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsEAPFloodMode.setStatus('current')
if mibBuilder.loadTexts: idsEAPFloodMode.setDescription('EAP flood detection mode')
idsEAPFloodThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsEAPFloodThreshold.setStatus('current')
if mibBuilder.loadTexts: idsEAPFloodThreshold.setDescription('Number of packets received in a period of time to trigger EAP flood detection')
idsEAPFloodPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsEAPFloodPeriod.setStatus('current')
if mibBuilder.loadTexts: idsEAPFloodPeriod.setDescription('Time period for EAP flood detection (in seconds, must be an increment of 10)')
idsNullProbeRespEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsNullProbeRespEnable.setStatus('current')
if mibBuilder.loadTexts: idsNullProbeRespEnable.setDescription('Enable/disable null probe response detection')
idsNullProbeRespThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsNullProbeRespThreshold.setStatus('current')
if mibBuilder.loadTexts: idsNullProbeRespThreshold.setDescription('Number of packets received in a period of time to trigger null probe response detection')
idsNullProbeRespPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsNullProbeRespPeriod.setStatus('current')
if mibBuilder.loadTexts: idsNullProbeRespPeriod.setDescription('Time period for null probe response detection (in seconds, must be an increment of 10)')
idsMICErrorAttackEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsMICErrorAttackEnable.setStatus('current')
if mibBuilder.loadTexts: idsMICErrorAttackEnable.setDescription('Enable/disable MIC error attack detection')
idsMICErrorAttackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsMICErrorAttackThreshold.setStatus('current')
if mibBuilder.loadTexts: idsMICErrorAttackThreshold.setDescription('Number of errors captured in a period of time to trigger MIC error attack detection')
idsMICErrorAttackPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsMICErrorAttackPeriod.setStatus('current')
if mibBuilder.loadTexts: idsMICErrorAttackPeriod.setDescription('Time period for MIC error attack detection (in seconds, must be an increment of 10)')
idsDisassocAttackEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocAttackEnable.setStatus('current')
if mibBuilder.loadTexts: idsDisassocAttackEnable.setDescription('Enable/disable disassociation attack detection')
idsDisassocAttackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocAttackThreshold.setStatus('current')
if mibBuilder.loadTexts: idsDisassocAttackThreshold.setDescription('Number of spoofed packets captured in a period of time to trigger disassociation attack detection')
idsDisassocAttackPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDisassocAttackPeriod.setStatus('current')
if mibBuilder.loadTexts: idsDisassocAttackPeriod.setDescription('Time period for disassociation attack detection (in seconds, must be an increment of 10)')
idsDeauthAttackEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthAttackEnable.setStatus('current')
if mibBuilder.loadTexts: idsDeauthAttackEnable.setDescription('Enable/disable deauthentication attack detection')
idsDeauthAttackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthAttackThreshold.setStatus('current')
if mibBuilder.loadTexts: idsDeauthAttackThreshold.setDescription('Number of spoofed packets captured in a period of time to trigger deauthentication attack detection')
idsDeauthAttackPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDeauthAttackPeriod.setStatus('current')
if mibBuilder.loadTexts: idsDeauthAttackPeriod.setDescription('Time period for deauthentication attack detection (in seconds, must be an increment of 10)')
idsDurationAttackEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDurationAttackEnable.setStatus('current')
if mibBuilder.loadTexts: idsDurationAttackEnable.setDescription('Enable/disable duration attack detection')
idsDurationAttackThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDurationAttackThreshold.setStatus('current')
if mibBuilder.loadTexts: idsDurationAttackThreshold.setDescription('Number of bad NAV occurrences in a period of time to trigger duration attack detection')
idsDurationAttackPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDurationAttackPeriod.setStatus('current')
if mibBuilder.loadTexts: idsDurationAttackPeriod.setDescription('Time period for duration attack detection (in seconds)')
idsDurationAttackNAV = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsDurationAttackNAV.setStatus('current')
if mibBuilder.loadTexts: idsDurationAttackNAV.setDescription('NAV value to trigger duration attack detection')
idsAPImpersonationEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAPImpersonationEnable.setStatus('current')
if mibBuilder.loadTexts: idsAPImpersonationEnable.setDescription('Enable/disable AP impersonation detection')
idsAPImpersonationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAPImpersonationThreshold.setStatus('current')
if mibBuilder.loadTexts: idsAPImpersonationThreshold.setDescription('Number of spoofed packets captured in a period of time to trigger AP impersonation detection')
idsAPImpersonationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsAPImpersonationPeriod.setStatus('current')
if mibBuilder.loadTexts: idsAPImpersonationPeriod.setDescription('Time period for AP impersonation detection (in seconds, must be an increment of 10)')
idsStationImpersonationEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsStationImpersonationEnable.setStatus('current')
if mibBuilder.loadTexts: idsStationImpersonationEnable.setDescription('Enable/disable station impersonation detection')
idsStationImpersonationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsStationImpersonationThreshold.setStatus('current')
if mibBuilder.loadTexts: idsStationImpersonationThreshold.setDescription('Number of events detected in a period of time to trigger station impersonation detection')
idsStationImpersonationPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsStationImpersonationPeriod.setStatus('current')
if mibBuilder.loadTexts: idsStationImpersonationPeriod.setDescription('Time period for station impersonation detection (in seconds)')
idsSeqNumAnomalyMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("mgmt", 1), ("data", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsSeqNumAnomalyMode.setStatus('current')
if mibBuilder.loadTexts: idsSeqNumAnomalyMode.setDescription('Packet sequence number anomaly detection mode')
idsEvilTwinAttackEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsEvilTwinAttackEnable.setStatus('current')
if mibBuilder.loadTexts: idsEvilTwinAttackEnable.setDescription('Enable/disable evil twin attack detection')
idsSeqNumAnomalyGap = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsSeqNumAnomalyGap.setStatus('current')
if mibBuilder.loadTexts: idsSeqNumAnomalyGap.setDescription('Sequence number gap considered as a normal sequence number change')
idsEventTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 33, 4), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: idsEventTablePeriod.setStatus('current')
if mibBuilder.loadTexts: idsEventTablePeriod.setDescription('Specify period for IDS event table entries (in seconds, 0 - all table entries)')
rfMonitorMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("dedicated", 1), ("timeshare", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfMonitorMode.setStatus('current')
if mibBuilder.loadTexts: rfMonitorMode.setDescription('Set RF monitor mode')
rfMonitorTimeshareScanInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 40, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfMonitorTimeshareScanInterval.setStatus('current')
if mibBuilder.loadTexts: rfMonitorTimeshareScanInterval.setDescription('Set RF monitor timeshare scanning interval (seconds between off channel scans)')
rfMonitorTimeshareStationThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 40, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfMonitorTimeshareStationThreshold.setStatus('current')
if mibBuilder.loadTexts: rfMonitorTimeshareStationThreshold.setDescription('Set RF monitor timeshare station threshold (station count above which scanning stops)')
rfMonitorTimeshareTrafficThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 2, 40, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfMonitorTimeshareTrafficThreshold.setStatus('current')
if mibBuilder.loadTexts: rfMonitorTimeshareTrafficThreshold.setDescription('Set RF monitor timeshare traffic threshold (packets/second above which scanning stops)')
global11aIAPEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-down", 0), ("all-up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPEnable.setStatus('current')
if mibBuilder.loadTexts: global11aIAPEnable.setDescription('Bring all IAPs up or down')
global11aIAPCellSize = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("small", 1), ("medium", 2), ("large", 3), ("max", 4), ("auto", 5), ("monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPCellSize.setStatus('current')
if mibBuilder.loadTexts: global11aIAPCellSize.setDescription('Set up RF cell size base on Tx pwr and Rx Threshold')
global11aIAPTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPTxPwr.setStatus('current')
if mibBuilder.loadTexts: global11aIAPTxPwr.setDescription('Maximum Tx power output from any radio')
global11aIAPRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPRxThreshold.setStatus('current')
if mibBuilder.loadTexts: global11aIAPRxThreshold.setDescription('Rx (deferred) threshold setting')
global11aIAPAutoChannelEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("negotiate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoChannelEnable.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoChannelEnable.setDescription('Set to 1 to enable auto channel configuration, 2 to negotiate airtime with other arrays before enabling auto channel configuration')
global11aIAPFragThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPFragThreshold.setStatus('current')
if mibBuilder.loadTexts: global11aIAPFragThreshold.setDescription('Fragmentation threshold')
global11aIAPRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: global11aIAPRTSThreshold.setDescription('RTS threshold')
rates11a = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8))
global11aIAPAutoCellEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoCellEnable.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoCellEnable.setDescription('Enable auto cell size configuration')
autoChannelList11a = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10))
global11aIAPChannelReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPChannelReset.setStatus('current')
if mibBuilder.loadTexts: global11aIAPChannelReset.setDescription('Reset all 5GHz channels back to factory defaults')
global11aIAPAutoCellOverlap = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoCellOverlap.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoCellOverlap.setDescription('Set auto cell size overlap (in percents)')
global11aIAPAutoCellPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoCellPeriod.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoCellPeriod.setDescription('Set period to run auto cell size assignment (in seconds from 60 to 3000000, 0 - none)')
global11aIAPAutoCellMinTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoCellMinTxPwr.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoCellMinTxPwr.setDescription('Set auto cell size minimum Tx power')
global11aIAPMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPMaxStations.setStatus('current')
if mibBuilder.loadTexts: global11aIAPMaxStations.setDescription('Maximum number of associated stations per array')
global11aIAPMaxIapStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPMaxIapStations.setStatus('current')
if mibBuilder.loadTexts: global11aIAPMaxIapStations.setDescription('Maximum number of associated stations per IAP')
global11aIAPAutoCellByChan = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11aIAPAutoCellByChan.setStatus('current')
if mibBuilder.loadTexts: global11aIAPAutoCellByChan.setDescription('Enable auto cell by channel')
rates11aSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("optimize-range", 2), ("optimize-throughput", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11aSet.setStatus('current')
if mibBuilder.loadTexts: rates11aSet.setDescription('Set rates to a pre-defined set')
rates11aTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 2), )
if mibBuilder.loadTexts: rates11aTable.setStatus('current')
if mibBuilder.loadTexts: rates11aTable.setDescription('802.11a Rates for the Array')
rates11aEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "rates11aIndex"))
if mibBuilder.loadTexts: rates11aEntry.setStatus('current')
if mibBuilder.loadTexts: rates11aEntry.setDescription('Rates table entry')
rates11aIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rates11aIndex.setStatus('current')
if mibBuilder.loadTexts: rates11aIndex.setDescription('Rates table index')
rates11aRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rates11aRate.setStatus('current')
if mibBuilder.loadTexts: rates11aRate.setDescription('802.11a rate')
rates11aStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("basic", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11aStatus.setStatus('current')
if mibBuilder.loadTexts: rates11aStatus.setDescription('802.11a rate status')
autoChannelList11aSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("use-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelList11aSet.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aSet.setDescription('Set channel list to defaults or all available channels')
autoChannelList11aTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 2), )
if mibBuilder.loadTexts: autoChannelList11aTable.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aTable.setDescription('802.11a auto channel list')
autoChannelList11aEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "autoChannelList11aIndex"))
if mibBuilder.loadTexts: autoChannelList11aEntry.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aEntry.setDescription('Auto channel list entry')
autoChannelList11aIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: autoChannelList11aIndex.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aIndex.setDescription('Auto channel list index')
autoChannelList11aChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChannelList11aChannel.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aChannel.setDescription('Channel number')
autoChannelList11aStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelList11aStatus.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11aStatus.setDescription('Channel status')
global11bgIAPEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("all-down", 0), ("all-up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPEnable.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPEnable.setDescription('Bring all IAPs up or down')
global11bgIAPCellSize = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 0), ("small", 1), ("medium", 2), ("large", 3), ("max", 4), ("auto", 5), ("monitor", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPCellSize.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPCellSize.setDescription('Set up RF cell size base on Tx pwr and Rx Threshold')
global11bgIAPTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPTxPwr.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPTxPwr.setDescription('Maximum Tx power output from any radio')
global11bgIAPRxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 0))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPRxThreshold.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPRxThreshold.setDescription('Rx (deferred) threshold setting')
global11bgIAPAutoChannelEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("negotiate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoChannelEnable.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoChannelEnable.setDescription('Set to 1 to enable auto channel configuration, 2 to negotiate airtime with other arrays before enabling auto channel configuration')
global11bgIAPFragThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 2346))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPFragThreshold.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPFragThreshold.setDescription('Fragmentation threshold')
global11bgIAPRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2347))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPRTSThreshold.setDescription('RTS threshold')
global11bgIAPgOnly = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPgOnly.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPgOnly.setDescription('Enable/disable 802.11g only mode')
global11bgIAPgProtect = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("auto-cts", 1), ("auto-rts", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPgProtect.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPgProtect.setDescription('Enable/disable automatic 802.11g protection')
global11bgIAPPreamble = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long-only", 0), ("auto-length", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPPreamble.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPPreamble.setDescription('Set preamble')
global11bgIAPSlotTime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("auto-time", 0), ("short-only", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPSlotTime.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPSlotTime.setDescription('Set slot time')
rates11bg = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12))
global11bgIAPAutoCellEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoCellEnable.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoCellEnable.setDescription('Enable auto cell size configuration')
autoChannelList11bg = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14))
global11bgIAPChannelReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPChannelReset.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPChannelReset.setDescription('Reset all 2.4GHz channels back to factory defaults')
global11bgIAPAutoCellOverlap = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoCellOverlap.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoCellOverlap.setDescription('Set auto cell size overlap (in percents)')
global11bgIAPAutoCellPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoCellPeriod.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoCellPeriod.setDescription('Set period to run auto cell size assignment (in seconds from 60 to 3000000, 0 - none)')
global11bgIAPAutoCellMinTxPwr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-15, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoCellMinTxPwr.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoCellMinTxPwr.setDescription('Set auto cell size minimum Tx power')
global11bgIAPMaxStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPMaxStations.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPMaxStations.setDescription('Maximum number of associated stations per array')
global11bgIAPMaxIapStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPMaxIapStations.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPMaxIapStations.setDescription('Maximum number of associated stations per IAP')
global11bgIAPAutoCellByChan = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11bgIAPAutoCellByChan.setStatus('current')
if mibBuilder.loadTexts: global11bgIAPAutoCellByChan.setDescription('Enable auto cell by channel')
rates11bgSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("default", 1), ("optimize-range", 2), ("optimize-throughput", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11bgSet.setStatus('current')
if mibBuilder.loadTexts: rates11bgSet.setDescription('Set rates to a pre-defined set')
rates11bgTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 2), )
if mibBuilder.loadTexts: rates11bgTable.setStatus('current')
if mibBuilder.loadTexts: rates11bgTable.setDescription('802.11bg Rates for the Array')
rates11bgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "rates11bgIndex"))
if mibBuilder.loadTexts: rates11bgEntry.setStatus('current')
if mibBuilder.loadTexts: rates11bgEntry.setDescription('Rates table entry')
rates11bgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: rates11bgIndex.setStatus('current')
if mibBuilder.loadTexts: rates11bgIndex.setDescription('Rates table index')
rates11bgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rates11bgRate.setStatus('current')
if mibBuilder.loadTexts: rates11bgRate.setDescription('802.11bg rate')
rates11bgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("basic", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11bgStatus.setStatus('current')
if mibBuilder.loadTexts: rates11bgStatus.setDescription('802.11bg rate status')
autoChannelList11bgSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("default", 1), ("use-all", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelList11bgSet.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgSet.setDescription('Set channel list to defaults or all available channels')
autoChannelList11bgTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 2), )
if mibBuilder.loadTexts: autoChannelList11bgTable.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgTable.setDescription('802.11bg auto channel list')
autoChannelList11bgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "autoChannelList11bgIndex"))
if mibBuilder.loadTexts: autoChannelList11bgEntry.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgEntry.setDescription('Auto channel list entry')
autoChannelList11bgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: autoChannelList11bgIndex.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgIndex.setDescription('Auto channel list index')
autoChannelList11bgChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: autoChannelList11bgChannel.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgChannel.setDescription('Channel number')
autoChannelList11bgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 4, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoChannelList11bgStatus.setStatus('current')
if mibBuilder.loadTexts: autoChannelList11bgStatus.setDescription('Channel status')
wdsAutoChannel = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsAutoChannel.setStatus('current')
if mibBuilder.loadTexts: wdsAutoChannel.setDescription('Automatically assign IAPs and channels for WDS client links')
wdsClientLinkTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkTableReset.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkTableReset.setDescription('Reset all WDS client links to off')
wdsClientLinkTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3), )
if mibBuilder.loadTexts: wdsClientLinkTable.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkTable.setDescription('Table of WDS client links')
wdsClientLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1), ).setIndexNames((0, "XIRRUS-MIB", "wdsClientLinkIndex"))
if mibBuilder.loadTexts: wdsClientLinkEntry.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkEntry.setDescription('WDS client link table entry')
wdsClientLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: wdsClientLinkIndex.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkIndex.setDescription('WDS client link table index')
wdsClientLinkEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkEnable.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkEnable.setDescription('Enable/disable WDS client link')
wdsClientLinkMaxIAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkMaxIAPs.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkMaxIAPs.setDescription('Maximum number of IAPs for WDS client link during auto channel')
wdsClientLinkTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkTarget.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkTarget.setDescription('Base IAP MAC address of target array for WDS client link')
wdsClientLinkSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkSSID.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkSSID.setDescription('SSID to use for association to target array')
wdsClientLinkUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkUsername.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkUsername.setDescription('Username to use for association to target array')
wdsClientLinkPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkPassword.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkPassword.setDescription('Password to use for association to target array')
wdsClientLinkPasswordForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsClientLinkPasswordForm.setStatus('current')
if mibBuilder.loadTexts: wdsClientLinkPasswordForm.setDescription('Password form')
wdsHostLinkTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4), )
if mibBuilder.loadTexts: wdsHostLinkTable.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkTable.setDescription('Table of WDS host links')
wdsHostLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "wdsHostLinkIndex"))
if mibBuilder.loadTexts: wdsHostLinkEntry.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkEntry.setDescription('WDS host link table entry')
wdsHostLinkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: wdsHostLinkIndex.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkIndex.setDescription('WDS host link table index')
wdsHostLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsHostLinkState.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkState.setDescription('WDS host link state')
wdsHostLinkNumIAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsHostLinkNumIAPs.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkNumIAPs.setDescription('Number of IAPs for WDS host link')
wdsHostLinkSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsHostLinkSource.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkSource.setDescription('Base IAP MAC address of source array for WDS host link')
wdsHostLinkSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsHostLinkSSID.setStatus('current')
if mibBuilder.loadTexts: wdsHostLinkSSID.setDescription('WDS host link SSID')
wdsAllowStations = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsAllowStations.setStatus('current')
if mibBuilder.loadTexts: wdsAllowStations.setDescription('Enable/disable stations on WDS host links')
wdsStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsStpEnable.setStatus('current')
if mibBuilder.loadTexts: wdsStpEnable.setDescription('Enable/disable Spanning Tree Protocol on WDS links')
wdsRoamThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsRoamThreshold.setStatus('current')
if mibBuilder.loadTexts: wdsRoamThreshold.setDescription('Minimum RSSI difference (in dB) required to trigger a roam')
wdsRoamAvgWeight = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wdsRoamAvgWeight.setStatus('current')
if mibBuilder.loadTexts: wdsRoamAvgWeight.setDescription('RSSI averaging weight for roaming (0 = no averaging)')
global11nEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nEnable.setStatus('current')
if mibBuilder.loadTexts: global11nEnable.setDescription('Enable or disable 802.11n MIMO operation')
global11nTxChains = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nTxChains.setStatus('current')
if mibBuilder.loadTexts: global11nTxChains.setDescription('Set number of TX chains used for 802.11n operation')
global11nRxChains = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nRxChains.setStatus('current')
if mibBuilder.loadTexts: global11nRxChains.setDescription('Set number of RX chains used for 802.11n operation')
global11nGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("short", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nGuardInterval.setStatus('current')
if mibBuilder.loadTexts: global11nGuardInterval.setDescription('Set 802.11n guard interval')
global11nAutoBond = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nAutoBond.setStatus('current')
if mibBuilder.loadTexts: global11nAutoBond.setDescription('Enable or disable 802.11n 5GHz automatic channel bonding')
global11nBondedChannelWidth5GHz = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nBondedChannelWidth5GHz.setStatus('current')
if mibBuilder.loadTexts: global11nBondedChannelWidth5GHz.setDescription('Set 5GHz band 802.11n bonded channel width')
global11nBondedChannelWidth2GHz = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dynamic", 0), ("static", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11nBondedChannelWidth2GHz.setStatus('current')
if mibBuilder.loadTexts: global11nBondedChannelWidth2GHz.setDescription('Set 2.4GHz band 802.11n bonded channel width')
rates11n = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8))
rates11nSet = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("default", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11nSet.setStatus('current')
if mibBuilder.loadTexts: rates11nSet.setDescription('Set 802.11n rates to a pre-defined set')
rates11nTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8, 2), )
if mibBuilder.loadTexts: rates11nTable.setStatus('current')
if mibBuilder.loadTexts: rates11nTable.setDescription('Set 802.11n rates')
rates11nEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "rates11nMCSIndex"))
if mibBuilder.loadTexts: rates11nEntry.setStatus('current')
if mibBuilder.loadTexts: rates11nEntry.setDescription('Rates table entry')
rates11nMCSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rates11nMCSIndex.setStatus('current')
if mibBuilder.loadTexts: rates11nMCSIndex.setDescription('Modulation & coding scheme (MCS) index')
rates11nMCSStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 6, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("basic", 1), ("supported", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rates11nMCSStatus.setStatus('current')
if mibBuilder.loadTexts: rates11nMCSStatus.setDescription('Set status for MCS index')
iapSsidToBssidMappingTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7), )
if mibBuilder.loadTexts: iapSsidToBssidMappingTable.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingTable.setDescription('SSID to BSSID mapping table')
iapSsidToBssidMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7, 1), ).setIndexNames((0, "XIRRUS-MIB", "iapSsidToBssidMappingIndex"))
if mibBuilder.loadTexts: iapSsidToBssidMappingEntry.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingEntry.setDescription('SSID to BSSID mapping table entry')
iapSsidToBssidMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: iapSsidToBssidMappingIndex.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingIndex.setDescription('SSID to BSSID mapping table index')
iapSsidToBssidMappingIAP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapSsidToBssidMappingIAP.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingIAP.setDescription('IAP name')
iapSsidToBssidMappingSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapSsidToBssidMappingSSID.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingSSID.setDescription('SSID name')
iapSsidToBssidMappingBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 7, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapSsidToBssidMappingBSSID.setStatus('current')
if mibBuilder.loadTexts: iapSsidToBssidMappingBSSID.setDescription('BSSID for IAP/SSID specified')
global11acEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acEnable.setStatus('current')
if mibBuilder.loadTexts: global11acEnable.setDescription('Enable or disable 802.11ac MIMO operation')
global11acGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("long", 0), ("short", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acGuardInterval.setStatus('current')
if mibBuilder.loadTexts: global11acGuardInterval.setDescription('Set 802.11ac guard interval')
global11acMaxMCS1SS = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mcs7", 0), ("mcs8", 1), ("mcs9", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acMaxMCS1SS.setStatus('current')
if mibBuilder.loadTexts: global11acMaxMCS1SS.setDescription('Set max MCS for 1 spatial stream for 802.11ac operation')
global11acMaxMCS2SS = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mcs7", 0), ("mcs8", 1), ("mcs9", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acMaxMCS2SS.setStatus('current')
if mibBuilder.loadTexts: global11acMaxMCS2SS.setDescription('Set max MCS for 2 spatial streams for 802.11ac operation')
global11acMaxMCS3SS = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mcs7", 0), ("mcs8", 1), ("mcs9", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acMaxMCS3SS.setStatus('current')
if mibBuilder.loadTexts: global11acMaxMCS3SS.setDescription('Set max MCS for 3 spatial streams for 802.11ac operation')
global11acMaxMCS4SS = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("mcs7", 0), ("mcs8", 1), ("mcs9", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acMaxMCS4SS.setStatus('current')
if mibBuilder.loadTexts: global11acMaxMCS4SS.setDescription('Set max MCS for 4 spatial streams for 802.11ac operation')
global11acTxBeamForming = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acTxBeamForming.setStatus('current')
if mibBuilder.loadTexts: global11acTxBeamForming.setDescription('Enable or disable 802.11ac Wave 2 TX Beam Forming')
global11acMultiUserMimo = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acMultiUserMimo.setStatus('current')
if mibBuilder.loadTexts: global11acMultiUserMimo.setDescription('Enable or disable 802.11ac Wave 2 Multi-User MIMO')
global11acWave2Capability = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: global11acWave2Capability.setStatus('current')
if mibBuilder.loadTexts: global11acWave2Capability.setDescription('Status of 802.11ac Wave 2 Capability')
global11acAutoBond = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 1, 8, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: global11acAutoBond.setStatus('current')
if mibBuilder.loadTexts: global11acAutoBond.setDescription('Enable or disable 802.11ac 5GHz automatic channel bonding')
ethTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1), )
if mibBuilder.loadTexts: ethTable.setStatus('current')
if mibBuilder.loadTexts: ethTable.setDescription('Table of ethernet interfaces')
ethEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "ethIndex"))
if mibBuilder.loadTexts: ethEntry.setStatus('current')
if mibBuilder.loadTexts: ethEntry.setDescription('Ethernet table entry')
ethIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ethIndex.setStatus('current')
if mibBuilder.loadTexts: ethIndex.setDescription('Ethernet table index')
ethName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethName.setStatus('current')
if mibBuilder.loadTexts: ethName.setDescription('Ethernet interface name')
ethEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethEnable.setStatus('current')
if mibBuilder.loadTexts: ethEnable.setDescription('Enable or disable this interface')
ethDHCPBind = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDHCPBind.setStatus('current')
if mibBuilder.loadTexts: ethDHCPBind.setDescription('Use DHCP')
ethIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIPAddress.setStatus('current')
if mibBuilder.loadTexts: ethIPAddress.setDescription('IP address')
ethIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethIPMask.setStatus('current')
if mibBuilder.loadTexts: ethIPMask.setDescription('IP Mask')
ethGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethGateway.setStatus('current')
if mibBuilder.loadTexts: ethGateway.setDescription('Gateway IP address')
ethAutoneg = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethAutoneg.setStatus('current')
if mibBuilder.loadTexts: ethAutoneg.setDescription('Enable/disable autonegotiation')
ethDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDuplex.setStatus('current')
if mibBuilder.loadTexts: ethDuplex.setDescription('Duplex settings')
ethSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("speed-10Mbps", 1), ("speed-100Mbps", 2), ("speed-1000Mbps", 3), ("speed-2500Mbps", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethSpeed.setStatus('current')
if mibBuilder.loadTexts: ethSpeed.setDescription('Speed settings: 10 and 100 for fast eth, 100, 1000, and 2500 for gig eth')
ethMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1732))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethMTU.setStatus('current')
if mibBuilder.loadTexts: ethMTU.setDescription('MTU size')
ethMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethMgmt.setStatus('current')
if mibBuilder.loadTexts: ethMgmt.setDescription('Enable/disable management (gig eth only)')
ethDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethDefault.setStatus('current')
if mibBuilder.loadTexts: ethDefault.setDescription('Reset to default values')
ethPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("link-backup", 0), ("load-balance", 3), ("bridge", 4), ("ieee802dot3ad", 5), ("broadcast", 6), ("mirror", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethPortMode.setStatus('current')
if mibBuilder.loadTexts: ethPortMode.setDescription('Select the configuration of the gig eth ports')
ethBond = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethBond.setStatus('current')
if mibBuilder.loadTexts: ethBond.setDescription('Specify bond for this gig eth port')
ethLED = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethLED.setStatus('current')
if mibBuilder.loadTexts: ethLED.setDescription('Enable/disable LED operation')
bondTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2), )
if mibBuilder.loadTexts: bondTable.setStatus('current')
if mibBuilder.loadTexts: bondTable.setDescription('Table of bond interfaces')
bondEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "bondIndex"))
if mibBuilder.loadTexts: bondEntry.setStatus('current')
if mibBuilder.loadTexts: bondEntry.setDescription('Bond table entry')
bondIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: bondIndex.setStatus('current')
if mibBuilder.loadTexts: bondIndex.setDescription('Bond table index')
bondName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bondName.setStatus('current')
if mibBuilder.loadTexts: bondName.setDescription('Bond name')
bondMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 5, 6))).clone(namedValues=NamedValues(("link-backup", 0), ("load-balance", 3), ("ieee802dot3ad", 5), ("broadcast", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bondMode.setStatus('current')
if mibBuilder.loadTexts: bondMode.setDescription('Bond mode')
bondMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bondMirror.setStatus('current')
if mibBuilder.loadTexts: bondMirror.setDescription('Specify mirror bond to mirror traffic')
bondActiveVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bondActiveVlans.setStatus('current')
if mibBuilder.loadTexts: bondActiveVlans.setDescription('Specify VLANs active on bond')
consoleBaud = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 115200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaud.setStatus('current')
if mibBuilder.loadTexts: consoleBaud.setDescription('Baud rate')
consoleByteSize = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(7, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleByteSize.setStatus('current')
if mibBuilder.loadTexts: consoleByteSize.setDescription('Byte/word size in bits')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("odd", 1), ("even", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
if mibBuilder.loadTexts: consoleParity.setDescription('Number of parity bits')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
if mibBuilder.loadTexts: consoleStopBits.setDescription('Number of stop bits')
consoleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleTimeout.setDescription('Inactivity timeout')
consoleMgmt = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 12, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleMgmt.setStatus('current')
if mibBuilder.loadTexts: consoleMgmt.setDescription('Enable or disable management')
neighborArrayTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1), )
if mibBuilder.loadTexts: neighborArrayTable.setStatus('current')
if mibBuilder.loadTexts: neighborArrayTable.setDescription('Table of neighbor arrays seen by our array')
neighborArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "neighborArrayIndex"))
if mibBuilder.loadTexts: neighborArrayEntry.setStatus('current')
if mibBuilder.loadTexts: neighborArrayEntry.setDescription('Table entry for neighbor array')
neighborArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: neighborArrayIndex.setStatus('current')
if mibBuilder.loadTexts: neighborArrayIndex.setDescription('Neighbor array index')
neighborArrayHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayHostname.setStatus('current')
if mibBuilder.loadTexts: neighborArrayHostname.setDescription('Hostname of the neighbor array')
neighborArrayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayLocation.setStatus('current')
if mibBuilder.loadTexts: neighborArrayLocation.setDescription('Location of the neighbor array')
neighborArrayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayIPAddress.setStatus('current')
if mibBuilder.loadTexts: neighborArrayIPAddress.setDescription('IP Address of the neighbor array')
neighborArrayModel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayModel.setStatus('current')
if mibBuilder.loadTexts: neighborArrayModel.setDescription('Model of the neighbor array')
neighborArrayNumIAPsUp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayNumIAPsUp.setStatus('current')
if mibBuilder.loadTexts: neighborArrayNumIAPsUp.setDescription('Number of IAPs enabled on the neighbor array')
neighborArrayNumSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayNumSSIDs.setStatus('current')
if mibBuilder.loadTexts: neighborArrayNumSSIDs.setDescription('Number of SSIDs defined on the neighbor array')
neighborArrayNumActiveSSIDs = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayNumActiveSSIDs.setStatus('current')
if mibBuilder.loadTexts: neighborArrayNumActiveSSIDs.setDescription('Number of active SSIDs on the neighbor array')
neighborArrayNumStationsAssoc = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayNumStationsAssoc.setStatus('current')
if mibBuilder.loadTexts: neighborArrayNumStationsAssoc.setDescription('Number of stations associated with the neighbor array')
neighborArrayInRange = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-in-range", 0), ("in-range", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayInRange.setStatus('current')
if mibBuilder.loadTexts: neighborArrayInRange.setDescription('Flag indicating whether neighbor array is in our range')
neighborArrayFastRoam = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-fast-roam", 0), ("fast-roam", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayFastRoam.setStatus('current')
if mibBuilder.loadTexts: neighborArrayFastRoam.setDescription('Flag indicating whether stations can fast roam between us and neighbor array')
neighborArrayUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 13, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: neighborArrayUptime.setStatus('current')
if mibBuilder.loadTexts: neighborArrayUptime.setDescription('Uptime (in D:H:M) of the neighbor array')
radiusEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("active-directory", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusEnable.setStatus('current')
if mibBuilder.loadTexts: radiusEnable.setDescription('Radius server enabled')
radiusServerExternal = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2))
radiusServerInternal = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3))
radiusServerAD = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4))
radiusPriServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPriServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusPriServerIPAddress.setDescription('Primary Radius server IP address')
radiusPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPriServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusPriServerPort.setDescription('Primary Radius server port')
radiusPriServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPriServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusPriServerSecret.setDescription('Primary Radius server secret')
radiusSecServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusSecServerIPAddress.setDescription('Secondary Radius server IP address')
radiusSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusSecServerPort.setDescription('Secondary Radius server port')
radiusSecServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusSecServerSecret.setDescription('Secondary Radius server secret')
radiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusTimeout.setDescription('Timeout until the primary server is retired _ given up on')
radiusAcctEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctEnable.setStatus('current')
if mibBuilder.loadTexts: radiusAcctEnable.setDescription('Enable or disable Radius Accounting')
radiusAcctPriServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPriServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPriServerIPAddress.setDescription('Primary Radius Accounting server IP address')
radiusAcctPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPriServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPriServerPort.setDescription('Primary Radius Accounting server port')
radiusAcctPriServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPriServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPriServerSecret.setDescription('Primary Radius Accounting server secret')
radiusAcctSecServerIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctSecServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: radiusAcctSecServerIPAddress.setDescription('Secondary Radius Accounting server IP address')
radiusAcctSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctSecServerPort.setStatus('current')
if mibBuilder.loadTexts: radiusAcctSecServerPort.setDescription('Secondary Radius Accounting server port')
radiusAcctSecServerSecret = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctSecServerSecret.setStatus('current')
if mibBuilder.loadTexts: radiusAcctSecServerSecret.setDescription('Secondary Radius Accounting server secret')
radiusAcctInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctInterval.setStatus('current')
if mibBuilder.loadTexts: radiusAcctInterval.setDescription('Interim accounting update interval')
radiusNasIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusNasIdentifier.setStatus('current')
if mibBuilder.loadTexts: radiusNasIdentifier.setDescription('Radius NAS Identifier')
radiusPriServerHostname = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPriServerHostname.setStatus('current')
if mibBuilder.loadTexts: radiusPriServerHostname.setDescription('Primary Radius server hostname')
radiusSecServerHostname = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecServerHostname.setStatus('current')
if mibBuilder.loadTexts: radiusSecServerHostname.setDescription('Secondary Radius server hostname')
radiusAcctPriServerHostname = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPriServerHostname.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPriServerHostname.setDescription('Primary Radius Accounting server hostname')
radiusAcctSecServerHostname = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctSecServerHostname.setStatus('current')
if mibBuilder.loadTexts: radiusAcctSecServerHostname.setDescription('Secondary Radius Accounting server hostname')
radiusPriServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusPriServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: radiusPriServerSecretEnc.setDescription('Primary Radius server secret (encrypted)')
radiusSecServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusSecServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: radiusSecServerSecretEnc.setDescription('Secondary Radius server secret (encrypted)')
radiusAcctPriServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctPriServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: radiusAcctPriServerSecretEnc.setDescription('Primary Radius Accounting server secret (encrypted)')
radiusAcctSecServerSecretEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusAcctSecServerSecretEnc.setStatus('current')
if mibBuilder.loadTexts: radiusAcctSecServerSecretEnc.setDescription('Secondary Radius Accounting server secret (encrypted)')
radiusDASPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusDASPort.setStatus('current')
if mibBuilder.loadTexts: radiusDASPort.setDescription('RADIUS Dynamic Authorization port')
radiusDASTimeWindow = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 10000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusDASTimeWindow.setStatus('current')
if mibBuilder.loadTexts: radiusDASTimeWindow.setDescription('RADIUS Dynamic Authorization time window (in seconds)')
radiusDASEventTimestamp = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("optional", 0), ("required", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusDASEventTimestamp.setStatus('current')
if mibBuilder.loadTexts: radiusDASEventTimestamp.setDescription('Specify whether Event-Timestamp attribute is required for RADIUS Dynamic Authorization replay protection')
radiusCalledStationIdFormat = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("bssid-ssid", 0), ("bssid", 1), ("ethernet-mac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusCalledStationIdFormat.setStatus('current')
if mibBuilder.loadTexts: radiusCalledStationIdFormat.setDescription('Specify Called-Station-Id attribute format used in RADIUS packets')
radiusStationMACFormat = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("lower", 0), ("upper", 1), ("lower-hyphen", 2), ("upper-hyphen", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusStationMACFormat.setStatus('current')
if mibBuilder.loadTexts: radiusStationMACFormat.setDescription('Specify station MAC address format used in a User-Name attribute during RADIUS MAC authentication')
radiusFailoverTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusFailoverTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusFailoverTimeout.setDescription('Timeout before failover to another server after current server failed')
radiusUserTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1), )
if mibBuilder.loadTexts: radiusUserTable.setStatus('current')
if mibBuilder.loadTexts: radiusUserTable.setDescription('Table containing Radius User details')
radiusUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "radiusUserIndex"))
if mibBuilder.loadTexts: radiusUserEntry.setStatus('current')
if mibBuilder.loadTexts: radiusUserEntry.setDescription('Radius user table entry')
radiusUserIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusUserIndex.setStatus('current')
if mibBuilder.loadTexts: radiusUserIndex.setDescription('Radius user table index')
radiusUserID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserID.setStatus('current')
if mibBuilder.loadTexts: radiusUserID.setDescription('Radius user ID')
radiusUserPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserPassword.setStatus('current')
if mibBuilder.loadTexts: radiusUserPassword.setDescription('Radius user password')
radiusUserSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserSSID.setStatus('current')
if mibBuilder.loadTexts: radiusUserSSID.setDescription('Radius user SSID')
radiusUserRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserRowStatus.setStatus('current')
if mibBuilder.loadTexts: radiusUserRowStatus.setDescription('Status of the radius user table entry')
radiusUserGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserGroup.setStatus('current')
if mibBuilder.loadTexts: radiusUserGroup.setDescription('Radius user group')
radiusUserPasswordForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusUserPasswordForm.setStatus('current')
if mibBuilder.loadTexts: radiusUserPasswordForm.setDescription('Password form')
radiusUserTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusUserTableReset.setStatus('current')
if mibBuilder.loadTexts: radiusUserTableReset.setDescription('Reset Radius user table (clear all entries)')
activeDirectoryUser = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryUser.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryUser.setDescription('Active Directory domain administrator user name')
activeDirectoryPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryPassword.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryPassword.setDescription('Active Directory domain administrator password')
activeDirectoryDomainController = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryDomainController.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryDomainController.setDescription('Active Directory domain controller')
activeDirectoryWorkgroup = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryWorkgroup.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryWorkgroup.setDescription('Active Directory workgroup')
activeDirectoryRealm = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryRealm.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryRealm.setDescription('Active Directory realm')
activeDirectoryJoin = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("join", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryJoin.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryJoin.setDescription('Join Active Directory domain')
activeDirectoryLeave = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 14, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("leave", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDirectoryLeave.setStatus('current')
if mibBuilder.loadTexts: activeDirectoryLeave.setDescription('Leave Active Directory domain')
roamAssistEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roamAssistEnable.setStatus('current')
if mibBuilder.loadTexts: roamAssistEnable.setDescription('Enable or disable roaming assist')
roamAssistPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roamAssistPeriod.setStatus('current')
if mibBuilder.loadTexts: roamAssistPeriod.setDescription('Roaming assist backoff period (in seconds)')
roamAssistThreshold = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-50, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roamAssistThreshold.setStatus('current')
if mibBuilder.loadTexts: roamAssistThreshold.setDescription('Roaming RSSI threshold in db relative to nearest array RSSI')
roamAssistDataRate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roamAssistDataRate.setStatus('current')
if mibBuilder.loadTexts: roamAssistDataRate.setDescription('Minimum packet data rate before roaming (in Mbps)')
roamAssistDevices = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 15, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: roamAssistDevices.setStatus('current')
if mibBuilder.loadTexts: roamAssistDevices.setDescription('Device types or classes to assist')
wep = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1))
wpa = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2))
wepDefaultKeyID = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: wepDefaultKeyID.setDescription('Default encryption key id for WEP')
wepKeyTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2), )
if mibBuilder.loadTexts: wepKeyTable.setStatus('current')
if mibBuilder.loadTexts: wepKeyTable.setDescription('WEP encryption key table for the Array')
wepKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "wepKeyNum"))
if mibBuilder.loadTexts: wepKeyEntry.setStatus('current')
if mibBuilder.loadTexts: wepKeyEntry.setDescription('WEP key table entry')
wepKeyNum = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wepKeyNum.setStatus('current')
if mibBuilder.loadTexts: wepKeyNum.setDescription('WEP key number')
wepKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep40", 1), ("wep128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wepKeySize.setStatus('current')
if mibBuilder.loadTexts: wepKeySize.setDescription('WEP key size - 40 or 128 bits')
wepKeyString = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyString.setStatus('current')
if mibBuilder.loadTexts: wepKeyString.setDescription('WEP encryption key')
wepKeyStringForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wepKeyStringForm.setStatus('current')
if mibBuilder.loadTexts: wepKeyStringForm.setDescription('Key string form')
wpaTKIP = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaTKIP.setStatus('current')
if mibBuilder.loadTexts: wpaTKIP.setDescription('TKIP enable or disable')
wpaAES = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaAES.setStatus('current')
if mibBuilder.loadTexts: wpaAES.setDescription('AES enable or disable')
wpaEAP = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaEAP.setStatus('current')
if mibBuilder.loadTexts: wpaEAP.setDescription('EAP enable or disable')
wpaPSK = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaPSK.setStatus('current')
if mibBuilder.loadTexts: wpaPSK.setDescription('PSK enable or disable')
wpaPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 64), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaPassphrase.setStatus('current')
if mibBuilder.loadTexts: wpaPassphrase.setDescription('PSK ASCII passphrase or Hex key')
wpaRekey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaRekey.setStatus('current')
if mibBuilder.loadTexts: wpaRekey.setDescription('Rekey every 60 to 1000000 seconds, 0 - never')
wpaPassphraseEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 16, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wpaPassphraseEnc.setStatus('current')
if mibBuilder.loadTexts: wpaPassphraseEnc.setDescription('PSK ASCII passphrase or Hex key (encrypted)')
snmpAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentEnable.setStatus('current')
if mibBuilder.loadTexts: snmpAgentEnable.setDescription('Enable or disable SNMPv2')
snmpAgentReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpAgentReadWriteCommunity.setDescription('SNMP read-write community string')
snmpAgentTrapHost = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapHost.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapHost.setDescription('SNMP trap IP address or host name')
snmpAgentTrapPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapPort.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapPort.setDescription('SNMP trap port')
snmpAgentTrapAuth = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapAuth.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapAuth.setDescription('Enable/disable traps for authentication failures')
snmpAgentReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpAgentReadOnlyCommunity.setDescription('SNMP read-only community string')
snmpAgentTrapHost2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapHost2.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapHost2.setDescription('SNMP trap IP address or host name (host 2)')
snmpAgentTrapPort2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapPort2.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapPort2.setDescription('SNMP trap port (host 2)')
snmpAgentTrapHost3 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapHost3.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapHost3.setDescription('SNMP trap IP address or host name (host 3)')
snmpAgentTrapPort3 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapPort3.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapPort3.setDescription('SNMP trap port (host 3) ')
snmpAgentTrapHost4 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapHost4.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapHost4.setDescription('SNMP trap IP address or host name (host 4)')
snmpAgentTrapPort4 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentTrapPort4.setStatus('current')
if mibBuilder.loadTexts: snmpAgentTrapPort4.setDescription('SNMP trap port (host 4)')
snmpAgentV3Enable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3Enable.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3Enable.setDescription('Enable or disable SNMPv3')
snmpAgentV3AuthType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("md5", 0), ("sha", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3AuthType.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3AuthType.setDescription('SNMPv3 authentication type')
snmpAgentV3PrivProtocol = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("des", 0), ("aes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3PrivProtocol.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3PrivProtocol.setDescription('SNMPv3 privacy protocol')
snmpAgentV3ReadWriteUser = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUser.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUser.setDescription('SNMPv3 read-write user')
snmpAgentV3ReadWriteUserAuthPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserAuthPassphrase.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserAuthPassphrase.setDescription('SNMPv3 read-write user authentication passphrase')
snmpAgentV3ReadWriteUserAuthPassphraseEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserAuthPassphraseEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserAuthPassphraseEnc.setDescription('SNMPv3 read-write user authentication passphrase (encrypted)')
snmpAgentV3ReadWriteUserPrivPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserPrivPassphrase.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserPrivPassphrase.setDescription('SNMPv3 read-write user privacy passphrase')
snmpAgentV3ReadWriteUserPrivPassphraseEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserPrivPassphraseEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadWriteUserPrivPassphraseEnc.setDescription('SNMPv3 read-write user privacy passphrase (encrypted)')
snmpAgentV3ReadOnlyUser = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUser.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUser.setDescription('SNMPv3 read-only user')
snmpAgentV3ReadOnlyUserAuthPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserAuthPassphrase.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserAuthPassphrase.setDescription('SNMPv3 read-only user authentication passphrase')
snmpAgentV3ReadOnlyUserAuthPassphraseEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserAuthPassphraseEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserAuthPassphraseEnc.setDescription('SNMPv3 read-only user authentication passphrase (encrypted)')
snmpAgentV3ReadOnlyUserPrivPassphrase = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserPrivPassphrase.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserPrivPassphrase.setDescription('SNMPv3 read-only user privacy passphrase')
snmpAgentV3ReadOnlyUserPrivPassphraseEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserPrivPassphraseEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentV3ReadOnlyUserPrivPassphraseEnc.setDescription('SNMPv3 read-only user privacy passphrase (encrypted)')
snmpAgentEngineID = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(24, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentEngineID.setStatus('current')
if mibBuilder.loadTexts: snmpAgentEngineID.setDescription('SNMP agent engine ID (in hex)')
snmpAgentRestart = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentRestart.setStatus('current')
if mibBuilder.loadTexts: snmpAgentRestart.setDescription('Restart SNMP agent')
snmpAgentKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentKeepAlive.setStatus('current')
if mibBuilder.loadTexts: snmpAgentKeepAlive.setDescription('SNMP trap keepalive time (in minutes)')
snmpAgentReadWriteCommunityEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentReadWriteCommunityEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentReadWriteCommunityEnc.setDescription('SNMP read-write community string (encrypted)')
snmpAgentReadOnlyCommunityEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 18, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpAgentReadOnlyCommunityEnc.setStatus('current')
if mibBuilder.loadTexts: snmpAgentReadOnlyCommunityEnc.setDescription('SNMP read-only community string (encrypted)')
ssidTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1), )
if mibBuilder.loadTexts: ssidTable.setStatus('current')
if mibBuilder.loadTexts: ssidTable.setDescription('SSID table for the Array')
ssidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "ssidIndex"))
if mibBuilder.loadTexts: ssidEntry.setStatus('current')
if mibBuilder.loadTexts: ssidEntry.setDescription('SSID table entry')
ssidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ssidIndex.setStatus('current')
if mibBuilder.loadTexts: ssidIndex.setDescription('SSID table index')
ssidName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidName.setStatus('current')
if mibBuilder.loadTexts: ssidName.setDescription('SSID name')
ssidBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidBroadcast.setStatus('current')
if mibBuilder.loadTexts: ssidBroadcast.setDescription('Enable/disable SSID broadcast')
ssidBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("both", 1), ("dot11a", 2), ("dot11bg", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidBand.setStatus('current')
if mibBuilder.loadTexts: ssidBand.setDescription('SSID 802.11 band')
ssidQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidQOS.setStatus('current')
if mibBuilder.loadTexts: ssidQOS.setDescription('SSID QoS level')
ssidVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidVlan.setStatus('current')
if mibBuilder.loadTexts: ssidVlan.setDescription('SSID vlan ID')
ssidDhcpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidDhcpPool.setStatus('current')
if mibBuilder.loadTexts: ssidDhcpPool.setDescription('SSID DHCP pool')
ssidEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa", 2), ("wpa2", 3), ("wpa-both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidEncryption.setStatus('current')
if mibBuilder.loadTexts: ssidEncryption.setDescription('SSID encryption type')
ssidDefaultSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidDefaultSecurity.setStatus('current')
if mibBuilder.loadTexts: ssidDefaultSecurity.setDescription('Use default security settings')
ssidWepDefaultKeyID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepDefaultKeyID.setStatus('current')
if mibBuilder.loadTexts: ssidWepDefaultKeyID.setDescription('Default encryption key id for WEP')
ssidWepKey1Size = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep40", 1), ("wep128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidWepKey1Size.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey1Size.setDescription('WEP key 1 size - 40 or 128 bits')
ssidWepKey1String = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey1String.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey1String.setDescription('WEP encryption key 1')
ssidWepKey2Size = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep40", 1), ("wep128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidWepKey2Size.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey2Size.setDescription('WEP key 2 size - 40 or 128 bits')
ssidWepKey2String = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey2String.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey2String.setDescription('WEP encryption key 2')
ssidWepKey3Size = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep40", 1), ("wep128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidWepKey3Size.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey3Size.setDescription('WEP key 3 size - 40 or 128 bits')
ssidWepKey3String = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey3String.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey3String.setDescription('WEP encryption key 3')
ssidWepKey4Size = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wep40", 1), ("wep128", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidWepKey4Size.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey4Size.setDescription('WEP key 4 size - 40 or 128 bits')
ssidWepKey4String = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey4String.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey4String.setDescription('WEP encryption key 4')
ssidWpaEAP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaEAP.setStatus('current')
if mibBuilder.loadTexts: ssidWpaEAP.setDescription('EAP enable or disable')
ssidWpaPSK = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("u-psk", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaPSK.setStatus('current')
if mibBuilder.loadTexts: ssidWpaPSK.setDescription('PSK enable, disable or U-PSK')
ssidWpaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 21), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 128), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaPassphrase.setStatus('current')
if mibBuilder.loadTexts: ssidWpaPassphrase.setDescription('PSK ASCII passphrase or Hex key')
ssidRadiusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("external", 1), ("internal", 2), ("active-directory", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusEnable.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusEnable.setDescription('Radius server enabled')
ssidRadiusPriServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 23), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusPriServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusPriServerIPAddress.setDescription('Primary Radius server IP address')
ssidRadiusPriServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusPriServerPort.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusPriServerPort.setDescription('Primary Radius server port')
ssidRadiusPriServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusPriServerSecret.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusPriServerSecret.setDescription('Primary Radius server secret')
ssidRadiusSecServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 26), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusSecServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusSecServerIPAddress.setDescription('Secondary Radius server IP address')
ssidRadiusSecServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusSecServerPort.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusSecServerPort.setDescription('Secondary Radius server port')
ssidRadiusSecServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusSecServerSecret.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusSecServerSecret.setDescription('Secondary Radius server secret')
ssidRadiusTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusTimeout.setDescription('Timeout until the primary server is retired _ given up on')
ssidRadiusAcctEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctEnable.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctEnable.setDescription('Enable or disable Radius Accounting')
ssidRadiusAcctPriServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 31), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctPriServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctPriServerIPAddress.setDescription('Primary Radius Accounting server IP address')
ssidRadiusAcctPriServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctPriServerPort.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctPriServerPort.setDescription('Primary Radius Accounting server port')
ssidRadiusAcctPriServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctPriServerSecret.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctPriServerSecret.setDescription('Primary Radius Accounting server secret')
ssidRadiusAcctSecServerIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 34), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctSecServerIPAddress.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctSecServerIPAddress.setDescription('Secondary Radius Accounting server IP address')
ssidRadiusAcctSecServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctSecServerPort.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctSecServerPort.setDescription('Secondary Radius Accounting server port')
ssidRadiusAcctSecServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctSecServerSecret.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctSecServerSecret.setDescription('Secondary Radius Accounting server secret')
ssidRadiusAcctInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctInterval.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctInterval.setDescription('Interim accounting update interval')
ssidAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("open", 0), ("radius-mac", 1), ("dot1x", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidAuthentication.setStatus('current')
if mibBuilder.loadTexts: ssidAuthentication.setDescription('SSID authentication type')
ssidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 39), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRowStatus.setStatus('current')
if mibBuilder.loadTexts: ssidRowStatus.setDescription('Status of the SSID row entry')
ssidRoamingLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("layer-2-only", 0), ("layer-2-and-3", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRoamingLayer.setStatus('current')
if mibBuilder.loadTexts: ssidRoamingLayer.setDescription('Fast roaming layer allowed for this SSID')
ssidRadiusPriServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusPriServerHostname.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusPriServerHostname.setDescription('Primary Radius server hostname')
ssidRadiusSecServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusSecServerHostname.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusSecServerHostname.setDescription('Secondary Radius server hostname')
ssidRadiusAcctPriServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctPriServerHostname.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctPriServerHostname.setDescription('Primary Radius Accounting server hostname')
ssidRadiusAcctSecServerHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctSecServerHostname.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctSecServerHostname.setDescription('Secondary Radius Accounting server hostname')
ssidWepKey1StringForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey1StringForm.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey1StringForm.setDescription('WEP key 1 string form')
ssidWepKey2StringForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey2StringForm.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey2StringForm.setDescription('WEP key 2 string form')
ssidWepKey3StringForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey3StringForm.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey3StringForm.setDescription('WEP key 3 string form')
ssidWepKey4StringForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWepKey4StringForm.setStatus('current')
if mibBuilder.loadTexts: ssidWepKey4StringForm.setDescription('WEP key 4 string form')
ssidWpaPassphraseForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaPassphraseForm.setStatus('current')
if mibBuilder.loadTexts: ssidWpaPassphraseForm.setDescription('PSK passphrase form')
ssidRadiusPriServerSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusPriServerSecretForm.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusPriServerSecretForm.setDescription('Primary Radius server secret form')
ssidRadiusSecServerSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusSecServerSecretForm.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusSecServerSecretForm.setDescription('Secondary Radius server secret form')
ssidRadiusAcctPriServerSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctPriServerSecretForm.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctPriServerSecretForm.setDescription('Primary Radius Accounting server secret form')
ssidRadiusAcctSecServerSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusAcctSecServerSecretForm.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusAcctSecServerSecretForm.setDescription('Secondary Radius Accounting server secret form')
ssidFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidFilterList.setStatus('current')
if mibBuilder.loadTexts: ssidFilterList.setDescription('SSID filter list')
ssidWpaTKIP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaTKIP.setStatus('current')
if mibBuilder.loadTexts: ssidWpaTKIP.setDescription('TKIP enable or disable')
ssidWpaAES = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaAES.setStatus('current')
if mibBuilder.loadTexts: ssidWpaAES.setDescription('AES enable or disable')
ssidActiveIAPs = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidActiveIAPs.setStatus('current')
if mibBuilder.loadTexts: ssidActiveIAPs.setDescription('Define active IAPs for this SSID')
ssidAclEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("allow", 1), ("deny", 2), ("deny-include-blocked-rogues", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidAclEnable.setStatus('current')
if mibBuilder.loadTexts: ssidAclEnable.setDescription('SSID access control list enable/disable')
ssidFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("disable-ssid", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidFallback.setStatus('current')
if mibBuilder.loadTexts: ssidFallback.setDescription('Define network connectivity fallback mode for this SSID')
ssidTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidTunnel.setStatus('current')
if mibBuilder.loadTexts: ssidTunnel.setDescription('Specify tunnel for bridging SSID data traffic')
ssidMdmAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("airwatch", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidMdmAuth.setStatus('current')
if mibBuilder.loadTexts: ssidMdmAuth.setDescription('MDM authentication type used by this SSID')
ssidDhcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidDhcpOption.setStatus('current')
if mibBuilder.loadTexts: ssidDhcpOption.setDescription('Enable or disable insertion of relay agent information option in station DHCP requests')
ssidWpaUPSKCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaUPSKCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ssidWpaUPSKCacheTimeout.setDescription('U-PSK cache timeout (in minutes)')
ssidWpaUPSKServerConnError = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("allow", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidWpaUPSKServerConnError.setStatus('current')
if mibBuilder.loadTexts: ssidWpaUPSKServerConnError.setDescription('U-PSK server connection error action')
ssidVlanPool = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidVlanPool.setStatus('current')
if mibBuilder.loadTexts: ssidVlanPool.setDescription('SSID VLAN pool')
ssidExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 66), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidExpiration.setStatus('current')
if mibBuilder.loadTexts: ssidExpiration.setDescription('SSID Expiration')
ssidDateOn = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 67), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidDateOn.setStatus('current')
if mibBuilder.loadTexts: ssidDateOn.setDescription('SSID Scheduling Date On')
ssidDateOff = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 68), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidDateOff.setStatus('current')
if mibBuilder.loadTexts: ssidDateOff.setDescription('SSID Scheduling Date Off')
ssidRadiusFailoverTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 1, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidRadiusFailoverTimeout.setStatus('current')
if mibBuilder.loadTexts: ssidRadiusFailoverTimeout.setDescription('Timeout before failover to another server after current server failed')
ssidTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidTableReset.setStatus('current')
if mibBuilder.loadTexts: ssidTableReset.setDescription('Reset SSID table (clear all entries and restore default)')
ssidTableClear = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidTableClear.setStatus('current')
if mibBuilder.loadTexts: ssidTableClear.setDescription('Clear all entries in SSID table')
ssidLimitsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4), )
if mibBuilder.loadTexts: ssidLimitsTable.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTable.setDescription('SSID limits table for the Array')
ssidLimitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "ssidLimitsIndex"))
if mibBuilder.loadTexts: ssidLimitsEntry.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsEntry.setDescription('SSID limits table entry')
ssidLimitsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: ssidLimitsIndex.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsIndex.setDescription('SSID limits table index')
ssidLimitsSsidName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidLimitsSsidName.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsSsidName.setDescription('SSID name')
ssidLimitsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsEnable.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsEnable.setDescription('Enable or disable SSID')
ssidLimitsTrafficLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTrafficLimit.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTrafficLimit.setDescription('Traffic limit for SSID (10 to 1000000 pps, 0 - unlimited)')
ssidLimitsTrafficLimitSta = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTrafficLimitSta.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTrafficLimitSta.setDescription('Traffic limit per station for SSID (10 to 100000 pps, 0 - unlimited)')
ssidLimitsTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTimeOn.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTimeOn.setDescription('Set daily time SSID is active (in minutes, -1 - always)')
ssidLimitsTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTimeOff.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTimeOff.setDescription('Set daily time SSID is inactive (in minutes, -1 - never)')
ssidLimitsDaysOnMon = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnMon.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnMon.setDescription('SSID is on/off on Monday')
ssidLimitsDaysOnTue = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnTue.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnTue.setDescription('SSID is on/off on Tuesday')
ssidLimitsDaysOnWed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnWed.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnWed.setDescription('SSID is on/off on Wednesday')
ssidLimitsDaysOnThu = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnThu.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnThu.setDescription('SSID is on/off on Thursday')
ssidLimitsDaysOnFri = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnFri.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnFri.setDescription('SSID is on/off on Friday')
ssidLimitsDaysOnSat = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnSat.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnSat.setDescription('SSID is on/off on Saturday')
ssidLimitsDaysOnSun = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsDaysOnSun.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsDaysOnSun.setDescription('SSID is on/off on Sunday')
ssidLimitsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidLimitsActive.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsActive.setDescription('Flag indicating whether SSID is currently active')
ssidLimitsStationLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsStationLimit.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsStationLimit.setDescription('Station limit for SSID')
ssidLimitsTrafficLimitKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTrafficLimitKbps.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTrafficLimitKbps.setDescription('Traffic limit for SSID (10 to 4000000 kbps, 0 - unlimited)')
ssidLimitsTrafficLimitKbpsSta = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidLimitsTrafficLimitKbpsSta.setStatus('current')
if mibBuilder.loadTexts: ssidLimitsTrafficLimitKbpsSta.setDescription('Traffic limit per station for SSID (10 to 400000 kbps, 0 - unlimited)')
ssidWprTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5), )
if mibBuilder.loadTexts: ssidWprTable.setStatus('current')
if mibBuilder.loadTexts: ssidWprTable.setDescription('SSID Web Page Redirect (WPR) table for the Array')
ssidWprEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "ssidWprIndex"))
if mibBuilder.loadTexts: ssidWprEntry.setStatus('current')
if mibBuilder.loadTexts: ssidWprEntry.setDescription('SSID WPR table entry')
ssidWprIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: ssidWprIndex.setStatus('current')
if mibBuilder.loadTexts: ssidWprIndex.setDescription('SSID WPR table index')
ssidWprSsidName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ssidWprSsidName.setStatus('current')
if mibBuilder.loadTexts: ssidWprSsidName.setDescription('SSID name')
ssidWprEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprEnable.setStatus('current')
if mibBuilder.loadTexts: ssidWprEnable.setDescription('Enable or disable WPR for SSID')
ssidWprServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("external", 0), ("internal", 1), ("cloud", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprServerType.setStatus('current')
if mibBuilder.loadTexts: ssidWprServerType.setDescription('Server type for WPR')
ssidWprUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprUrl.setStatus('current')
if mibBuilder.loadTexts: ssidWprUrl.setDescription('URL for WPR')
ssidWprSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprSharedSecret.setStatus('current')
if mibBuilder.loadTexts: ssidWprSharedSecret.setDescription('Shared secret for WPR')
ssidWprScreenType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("splash", 0), ("login", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprScreenType.setStatus('current')
if mibBuilder.loadTexts: ssidWprScreenType.setDescription('Screen type for WPR')
ssidWprScreenTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprScreenTimeout.setStatus('current')
if mibBuilder.loadTexts: ssidWprScreenTimeout.setDescription('Splash screen timeout (0 - no timeout)')
ssidWprLandingPage = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprLandingPage.setStatus('current')
if mibBuilder.loadTexts: ssidWprLandingPage.setDescription('Landing page URL for WPR')
ssidWprSharedSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprSharedSecretForm.setStatus('current')
if mibBuilder.loadTexts: ssidWprSharedSecretForm.setDescription('WPR shared secret form')
ssidWprAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("chap", 0), ("pap", 1), ("ms-chap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprAuthType.setStatus('current')
if mibBuilder.loadTexts: ssidWprAuthType.setDescription('WPR authentication protocol')
ssidWprHttpsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprHttpsEnable.setStatus('current')
if mibBuilder.loadTexts: ssidWprHttpsEnable.setDescription('Enable or disable HTTPS login for WPR')
ssidWprBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprBackground.setStatus('current')
if mibBuilder.loadTexts: ssidWprBackground.setDescription('Custom background file for WPR')
ssidWprLogoImage = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprLogoImage.setStatus('current')
if mibBuilder.loadTexts: ssidWprLogoImage.setDescription('Custom logo file for WPR')
ssidWprHeaderText = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprHeaderText.setStatus('current')
if mibBuilder.loadTexts: ssidWprHeaderText.setDescription('Custom header text file for WPR')
ssidWprFooterText = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprFooterText.setStatus('current')
if mibBuilder.loadTexts: ssidWprFooterText.setDescription('Custom footer text file for WPR')
ssidWprAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: ssidWprAuthTimeout.setDescription('WPR station authentication timeout in minutes (0 - no timeout)')
ssidWprHttpsPassthru = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 5, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidWprHttpsPassthru.setStatus('current')
if mibBuilder.loadTexts: ssidWprHttpsPassthru.setDescription('Enable or disable WPR HTTPS Passthru')
ssidHoneypotWhitelistTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 6), )
if mibBuilder.loadTexts: ssidHoneypotWhitelistTable.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistTable.setDescription('SSID honeypot whitelist')
ssidHoneypotWhitelistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "ssidHoneypotWhitelistIndex"))
if mibBuilder.loadTexts: ssidHoneypotWhitelistEntry.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistEntry.setDescription('SSID honeypot whitelist table entry')
ssidHoneypotWhitelistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: ssidHoneypotWhitelistIndex.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistIndex.setDescription('SSID honeypot whitelist index')
ssidHoneypotWhitelistSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidHoneypotWhitelistSSID.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistSSID.setDescription('SSID name')
ssidHoneypotWhitelistRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidHoneypotWhitelistRowStatus.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistRowStatus.setDescription('Status of the SSID honeypot whitelist row entry')
ssidHoneypotWhitelistTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidHoneypotWhitelistTableReset.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotWhitelistTableReset.setDescription('Reset SSID honeypot whitelist (clear all entries)')
ssidHoneypotBroadcastTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 8), )
if mibBuilder.loadTexts: ssidHoneypotBroadcastTable.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastTable.setDescription('SSID honeypot broadcast')
ssidHoneypotBroadcastEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 8, 1), ).setIndexNames((0, "XIRRUS-MIB", "ssidHoneypotBroadcastIndex"))
if mibBuilder.loadTexts: ssidHoneypotBroadcastEntry.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastEntry.setDescription('SSID honeypot broadcast table entry')
ssidHoneypotBroadcastIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: ssidHoneypotBroadcastIndex.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastIndex.setDescription('SSID honeypot broadcast index')
ssidHoneypotBroadcastSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 8, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidHoneypotBroadcastSSID.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastSSID.setDescription('SSID name')
ssidHoneypotBroadcastRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ssidHoneypotBroadcastRowStatus.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastRowStatus.setDescription('Status of the SSID honeypot broadcast row entry')
ssidHoneypotBroadcastTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 20, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ssidHoneypotBroadcastTableReset.setStatus('current')
if mibBuilder.loadTexts: ssidHoneypotBroadcastTableReset.setDescription('Reset SSID honeypot broadcast (clear all entries)')
stationAssociationTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1), )
if mibBuilder.loadTexts: stationAssociationTable.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTable.setDescription('Table of stations associated with array')
stationAssociationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationAssociationIndex"))
if mibBuilder.loadTexts: stationAssociationEntry.setStatus('current')
if mibBuilder.loadTexts: stationAssociationEntry.setDescription('Table entry for associated station')
stationAssociationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: stationAssociationIndex.setStatus('current')
if mibBuilder.loadTexts: stationAssociationIndex.setDescription('Station association index')
stationAssociationMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationAssociationMACAddress.setDescription('MAC address of the station')
stationAssociationManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationManufacturer.setStatus('current')
if mibBuilder.loadTexts: stationAssociationManufacturer.setDescription("Manufacturer of the station's network card")
stationAssociationIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationIPAddress.setStatus('current')
if mibBuilder.loadTexts: stationAssociationIPAddress.setDescription('IP Address of the station')
stationAssociationNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationNetbiosName.setStatus('current')
if mibBuilder.loadTexts: stationAssociationNetbiosName.setDescription('Netbios name of the station')
stationAssociationIAP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationIAP.setStatus('current')
if mibBuilder.loadTexts: stationAssociationIAP.setDescription('IAP station associated with')
stationAssociationSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationSSID.setStatus('current')
if mibBuilder.loadTexts: stationAssociationSSID.setDescription('SSID station associated with')
stationAssociationVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationVLAN.setStatus('current')
if mibBuilder.loadTexts: stationAssociationVLAN.setDescription('VLAN of the station')
stationAssociationRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSI.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSI.setDescription("Station's RSSI (last packet received)")
stationAssociationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTime.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTime.setDescription('Time (in D:H:M) station is associated')
stationAssociationTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTxRate.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTxRate.setDescription('Tx rate of the station')
stationAssociationRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRxRate.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRxRate.setDescription('Rx rate of the station')
stationAssociationRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa1.setDescription("Station's RSSI for last Probe Request on IAP a1")
stationAssociationRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa2.setDescription("Station's RSSI for last Probe Request on IAP a2")
stationAssociationRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa3.setDescription("Station's RSSI for last Probe Request on IAP a3")
stationAssociationRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa4.setDescription("Station's RSSI for last Probe Request on IAP a4")
stationAssociationRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa5.setDescription("Station's RSSI for last Probe Request on IAP a5")
stationAssociationRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa6.setDescription("Station's RSSI for last Probe Request on IAP a6")
stationAssociationRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa7.setDescription("Station's RSSI for last Probe Request on IAP a7")
stationAssociationRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa8.setDescription("Station's RSSI for last Probe Request on IAP a8")
stationAssociationRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa9.setDescription("Station's RSSI for last Probe Request on IAP a9")
stationAssociationRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa10.setDescription("Station's RSSI for last Probe Request on IAP a10")
stationAssociationRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa11.setDescription("Station's RSSI for last Probe Request on IAP a11")
stationAssociationRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIa12.setDescription("Station's RSSI for last Probe Request on IAP a12")
stationAssociationRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIabg1.setDescription("Station's RSSI for last Probe Request on IAP abg1")
stationAssociationRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIabg2.setDescription("Station's RSSI for last Probe Request on IAP abg2")
stationAssociationRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIabg3.setDescription("Station's RSSI for last Probe Request on IAP abg3")
stationAssociationRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationAssociationRSSIabg4.setDescription("Station's RSSI for last Probe Request on IAP abg4")
stationAssociationEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa", 2), ("wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationEncType.setStatus('current')
if mibBuilder.loadTexts: stationAssociationEncType.setDescription('Station encryption type')
stationAssociationCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("rc4", 1), ("tkip", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationCipher.setStatus('current')
if mibBuilder.loadTexts: stationAssociationCipher.setDescription('Cipher suite used by station')
stationAssociationKeyMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eap", 1), ("psk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationKeyMgmt.setStatus('current')
if mibBuilder.loadTexts: stationAssociationKeyMgmt.setDescription('Key management algorithm used by station')
stationAssociationBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11bg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationBand.setStatus('current')
if mibBuilder.loadTexts: stationAssociationBand.setDescription('802.11 band station is on')
stationAssociationChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationChannel.setStatus('current')
if mibBuilder.loadTexts: stationAssociationChannel.setDescription('Channel station is on')
stationAssociationMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11bg", 2), ("dot11abg", 3), ("dot11a", 4), ("dot11ab", 5), ("dot11ag", 6), ("dot11g", 7), ("dot11n", 8), ("dot11bn", 9), ("dot11gn", 10), ("dot11bgn", 11), ("dot11an", 12), ("dot11abn", 13), ("dot11agn", 14), ("dot11abgn", 15), ("dot11anac", 16), ("dot11abgnac", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationMediaType.setStatus('current')
if mibBuilder.loadTexts: stationAssociationMediaType.setDescription('Station media type')
stationAssociationUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationUserName.setStatus('current')
if mibBuilder.loadTexts: stationAssociationUserName.setDescription('Station user name')
stationAssociationTimeRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa1.setDescription("Station's elapsed time since last Probe Request on IAP a1 (milliseconds)")
stationAssociationTimeRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa2.setDescription("Station's elapsed time since last Probe Request on IAP a2 (milliseconds)")
stationAssociationTimeRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa3.setDescription("Station's elapsed time since last Probe Request on IAP a3 (milliseconds)")
stationAssociationTimeRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa4.setDescription("Station's elapsed time since last Probe Request on IAP a4 (milliseconds)")
stationAssociationTimeRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa5.setDescription("Station's elapsed time since last Probe Request on IAP a5 (milliseconds)")
stationAssociationTimeRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa6.setDescription("Station's elapsed time since last Probe Request on IAP a6 (milliseconds)")
stationAssociationTimeRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa7.setDescription("Station's elapsed time since last Probe Request on IAP a7 (milliseconds)")
stationAssociationTimeRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa8.setDescription("Station's elapsed time since last Probe Request on IAP a8 (milliseconds)")
stationAssociationTimeRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa9.setDescription("Station's elapsed time since last Probe Request on IAP a9 (milliseconds)")
stationAssociationTimeRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa10.setDescription("Station's elapsed time since last Probe Request on IAP a10 (milliseconds)")
stationAssociationTimeRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa11.setDescription("Station's elapsed time since last Probe Request on IAP a11 (milliseconds)")
stationAssociationTimeRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIa12.setDescription("Station's elapsed time since last Probe Request on IAP a12 (milliseconds)")
stationAssociationTimeRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg1.setDescription("Station's elapsed time since last Probe Request on IAP abg1 (milliseconds)")
stationAssociationTimeRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg2.setDescription("Station's elapsed time since last Probe Request on IAP abg2 (milliseconds)")
stationAssociationTimeRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg3.setDescription("Station's elapsed time since last Probe Request on IAP abg3 (milliseconds)")
stationAssociationTimeRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationAssociationTimeRSSIabg4.setDescription("Station's elapsed time since last Probe Request on IAP abg4 (milliseconds)")
stationAssociationHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationHostname.setStatus('current')
if mibBuilder.loadTexts: stationAssociationHostname.setDescription('Station hostname')
stationAssociationDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationDeviceType.setStatus('current')
if mibBuilder.loadTexts: stationAssociationDeviceType.setDescription('Station device type')
stationAssociationDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationDeviceClass.setStatus('current')
if mibBuilder.loadTexts: stationAssociationDeviceClass.setDescription('Station device class')
stationAssociationUserAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationUserAgent.setStatus('current')
if mibBuilder.loadTexts: stationAssociationUserAgent.setDescription('User-agent string')
stationAssociationDeviceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("manufacturer", 1), ("netbios-name", 2), ("dhcp-hostname", 3), ("user-agent-string", 4), ("internal-rules", 5), ("external-rules", 6), ("cache", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationDeviceSource.setStatus('current')
if mibBuilder.loadTexts: stationAssociationDeviceSource.setDescription('Station device source')
stationAssociationDeviceSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationDeviceSourceIndex.setStatus('current')
if mibBuilder.loadTexts: stationAssociationDeviceSourceIndex.setDescription('Station device source index')
stationAssociationOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("none", 0), ("b", 1), ("g", 2), ("bg", 3), ("a", 4), ("ab", 5), ("ag", 6), ("abg", 7), ("n", 8), ("bn", 9), ("gn", 10), ("bgn", 11), ("an", 12), ("abn", 13), ("agn", 14), ("abgn", 15), ("ac", 16), ("bac", 17), ("gac", 18), ("bgac", 19), ("aac", 20), ("abac", 21), ("agac", 22), ("abgac", 23), ("nac", 24), ("bnac", 25), ("gnac", 26), ("bgnac", 27), ("anac", 28), ("abnac", 29), ("agnac", 30), ("abgnac", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssociationOperatingMode.setStatus('current')
if mibBuilder.loadTexts: stationAssociationOperatingMode.setDescription('Station Operating Mode')
stationUnassociatedTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2), )
if mibBuilder.loadTexts: stationUnassociatedTable.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTable.setDescription('Table of unassociated stations')
stationUnassociatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationUnassociatedIndex"))
if mibBuilder.loadTexts: stationUnassociatedEntry.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedEntry.setDescription('Table entry for unassociated station')
stationUnassociatedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: stationUnassociatedIndex.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedIndex.setDescription('Station index')
stationUnassociatedMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedMACAddress.setDescription('MAC address of the station')
stationUnassociatedManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedManufacturer.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedManufacturer.setDescription("Manufacturer of the station's network card")
stationUnassociatedNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedNetbiosName.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedNetbiosName.setDescription('Netbios name of the station')
stationUnassociatedMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11bg", 2), ("dot11abg", 3), ("dot11a", 4), ("dot11ab", 5), ("dot11ag", 6), ("dot11g", 7), ("dot11n", 8), ("dot11bn", 9), ("dot11gn", 10), ("dot11bgn", 11), ("dot11an", 12), ("dot11abn", 13), ("dot11agn", 14), ("dot11abgn", 15), ("dot11anac", 16), ("dot11abgnac", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedMediaType.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedMediaType.setDescription('Station media type')
stationUnassociatedTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTxRate.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTxRate.setDescription('Tx rate of the station')
stationUnassociatedRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRxRate.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRxRate.setDescription('Rx rate of the station')
stationUnassociatedRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSI.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSI.setDescription("Station's RSSI (last packet received)")
stationUnassociatedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTime.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTime.setDescription('Time (in seconds) since Rx')
stationUnassociatedRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa1.setDescription("Station's RSSI for last Probe Request on IAP a1")
stationUnassociatedRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa2.setDescription("Station's RSSI for last Probe Request on IAP a2")
stationUnassociatedRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa3.setDescription("Station's RSSI for last Probe Request on IAP a3")
stationUnassociatedRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa4.setDescription("Station's RSSI for last Probe Request on IAP a4")
stationUnassociatedRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa5.setDescription("Station's RSSI for last Probe Request on IAP a5")
stationUnassociatedRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa6.setDescription("Station's RSSI for last Probe Request on IAP a6")
stationUnassociatedRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa7.setDescription("Station's RSSI for last Probe Request on IAP a7")
stationUnassociatedRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa8.setDescription("Station's RSSI for last Probe Request on IAP a8")
stationUnassociatedRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa9.setDescription("Station's RSSI for last Probe Request on IAP a9")
stationUnassociatedRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa10.setDescription("Station's RSSI for last Probe Request on IAP a10")
stationUnassociatedRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa11.setDescription("Station's RSSI for last Probe Request on IAP a11")
stationUnassociatedRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIa12.setDescription("Station's RSSI for last Probe Request on IAP a12")
stationUnassociatedRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIabg1.setDescription("Station's RSSI for last Probe Request on IAP abg1")
stationUnassociatedRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIabg2.setDescription("Station's RSSI for last Probe Request on IAP abg2")
stationUnassociatedRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIabg3.setDescription("Station's RSSI for last Probe Request on IAP abg3")
stationUnassociatedRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedRSSIabg4.setDescription("Station's RSSI for last Probe Request on IAP abg4")
stationUnassociatedTimeRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa1.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a1 (milliseconds)")
stationUnassociatedTimeRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa2.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a2 (milliseconds)")
stationUnassociatedTimeRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa3.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a3 (milliseconds)")
stationUnassociatedTimeRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa4.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a4 (milliseconds)")
stationUnassociatedTimeRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa5.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a5 (milliseconds)")
stationUnassociatedTimeRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa6.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a6 (milliseconds)")
stationUnassociatedTimeRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa7.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a7 (milliseconds)")
stationUnassociatedTimeRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa8.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a8 (milliseconds)")
stationUnassociatedTimeRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa9.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a9 (milliseconds)")
stationUnassociatedTimeRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa10.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a10 (milliseconds)")
stationUnassociatedTimeRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa11.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a11 (milliseconds)")
stationUnassociatedTimeRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIa12.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP a12 (milliseconds)")
stationUnassociatedTimeRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg1.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP abg1 (milliseconds)")
stationUnassociatedTimeRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg2.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP abg2 (milliseconds)")
stationUnassociatedTimeRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg3.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP abg3 (milliseconds)")
stationUnassociatedTimeRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTimeRSSIabg4.setDescription("Station's elapsed time since last Probe Request on last Probe Request on IAP abg4 (milliseconds)")
stationDeauthMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationDeauthMacAddress.setStatus('current')
if mibBuilder.loadTexts: stationDeauthMacAddress.setDescription('Mac address of the station to deauthenticate')
stationAssocTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4), )
if mibBuilder.loadTexts: stationAssocTable.setStatus('current')
if mibBuilder.loadTexts: stationAssocTable.setDescription('Table of stations (indexed by station MAC address) associated with array')
stationAssocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationAssocMACAddress"))
if mibBuilder.loadTexts: stationAssocEntry.setStatus('current')
if mibBuilder.loadTexts: stationAssocEntry.setDescription('Table entry for associated station')
stationAssocMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationAssocMACAddress.setDescription('MAC address of the station')
stationAssocManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocManufacturer.setStatus('current')
if mibBuilder.loadTexts: stationAssocManufacturer.setDescription("Manufacturer of the station's network card")
stationAssocIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocIPAddress.setStatus('current')
if mibBuilder.loadTexts: stationAssocIPAddress.setDescription('IP Address of the station')
stationAssocNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocNetbiosName.setStatus('current')
if mibBuilder.loadTexts: stationAssocNetbiosName.setDescription('Netbios name of the station')
stationAssocIAP = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocIAP.setStatus('current')
if mibBuilder.loadTexts: stationAssocIAP.setDescription('IAP station associated with')
stationAssocSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocSSID.setStatus('current')
if mibBuilder.loadTexts: stationAssocSSID.setDescription('SSID station associated with')
stationAssocVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocVLAN.setStatus('current')
if mibBuilder.loadTexts: stationAssocVLAN.setDescription('VLAN of the station')
stationAssocRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSI.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSI.setDescription("Station's RSSI (last packet received)")
stationAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTime.setStatus('current')
if mibBuilder.loadTexts: stationAssocTime.setDescription('Time (in D:H:M) station is associated')
stationAssocTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTxRate.setStatus('current')
if mibBuilder.loadTexts: stationAssocTxRate.setDescription('Tx rate of the station')
stationAssocRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRxRate.setStatus('current')
if mibBuilder.loadTexts: stationAssocRxRate.setDescription('Rx rate of the station')
stationAssocRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa1.setDescription("Station's RSSI for last Probe Request on IAP a1")
stationAssocRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa2.setDescription("Station's RSSI for last Probe Request on IAP a2")
stationAssocRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa3.setDescription("Station's RSSI for last Probe Request on IAP a3")
stationAssocRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa4.setDescription("Station's RSSI for last Probe Request on IAP a4")
stationAssocRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa5.setDescription("Station's RSSI for last Probe Request on IAP a5")
stationAssocRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa6.setDescription("Station's RSSI for last Probe Request on IAP a6")
stationAssocRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa7.setDescription("Station's RSSI for last Probe Request on IAP a7")
stationAssocRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa8.setDescription("Station's RSSI for last Probe Request on IAP a8")
stationAssocRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa9.setDescription("Station's RSSI for last Probe Request on IAP a9")
stationAssocRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa10.setDescription("Station's RSSI for last Probe Request on IAP a10")
stationAssocRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa11.setDescription("Station's RSSI for last Probe Request on IAP a11")
stationAssocRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIa12.setDescription("Station's RSSI for last Probe Request on IAP a12")
stationAssocRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIabg1.setDescription("Station's RSSI for last Probe Request on IAP abg1")
stationAssocRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIabg2.setDescription("Station's RSSI for last Probe Request on IAP abg2")
stationAssocRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIabg3.setDescription("Station's RSSI for last Probe Request on IAP abg3")
stationAssocRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationAssocRSSIabg4.setDescription("Station's RSSI for last Probe Request on IAP abg4")
stationAssocEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("wep", 1), ("wpa", 2), ("wpa2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocEncType.setStatus('current')
if mibBuilder.loadTexts: stationAssocEncType.setDescription('Station encryption type')
stationAssocCipher = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("rc4", 1), ("tkip", 2), ("aes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocCipher.setStatus('current')
if mibBuilder.loadTexts: stationAssocCipher.setDescription('Cipher suite used by station')
stationAssocKeyMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eap", 1), ("psk", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocKeyMgmt.setStatus('current')
if mibBuilder.loadTexts: stationAssocKeyMgmt.setDescription('Key management algorithm used by station')
stationAssocBand = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("dot11a", 0), ("dot11bg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocBand.setStatus('current')
if mibBuilder.loadTexts: stationAssocBand.setDescription('802.11 band station is on')
stationAssocChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocChannel.setStatus('current')
if mibBuilder.loadTexts: stationAssocChannel.setDescription('Channel station is on')
stationAssocMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11bg", 2), ("dot11abg", 3), ("dot11a", 4), ("dot11ab", 5), ("dot11ag", 6), ("dot11g", 7), ("dot11n", 8), ("dot11bn", 9), ("dot11gn", 10), ("dot11bgn", 11), ("dot11an", 12), ("dot11abn", 13), ("dot11agn", 14), ("dot11abgn", 15), ("dot11anac", 16), ("dot11abgnac", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocMediaType.setStatus('current')
if mibBuilder.loadTexts: stationAssocMediaType.setDescription('Station media type')
stationAssocUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocUserName.setStatus('current')
if mibBuilder.loadTexts: stationAssocUserName.setDescription('Station user name')
stationAssocTimeRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa1.setDescription("Station's elapsed time since last Probe Request on IAP a1 (milliseconds)")
stationAssocTimeRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa2.setDescription("Station's elapsed time since last Probe Request on IAP a2 (milliseconds)")
stationAssocTimeRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa3.setDescription("Station's elapsed time since last Probe Request on IAP a3 (milliseconds)")
stationAssocTimeRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa4.setDescription("Station's elapsed time since last Probe Request on IAP a4 (milliseconds)")
stationAssocTimeRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa5.setDescription("Station's elapsed time since last Probe Request on IAP a5 (milliseconds)")
stationAssocTimeRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa6.setDescription("Station's elapsed time since last Probe Request on IAP a6 (milliseconds)")
stationAssocTimeRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa7.setDescription("Station's elapsed time since last Probe Request on IAP a7 (milliseconds)")
stationAssocTimeRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa8.setDescription("Station's elapsed time since last Probe Request on IAP a8 (milliseconds)")
stationAssocTimeRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa9.setDescription("Station's elapsed time since last Probe Request on IAP a9 (milliseconds)")
stationAssocTimeRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa10.setDescription("Station's elapsed time since last Probe Request on IAP a10 (milliseconds)")
stationAssocTimeRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa11.setDescription("Station's elapsed time since last Probe Request on IAP a11 (milliseconds)")
stationAssocTimeRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIa12.setDescription("Station's elapsed time since last Probe Request on IAP a12 (milliseconds)")
stationAssocTimeRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIabg1.setDescription("Station's elapsed time since last Probe Request on IAP abg1 (milliseconds)")
stationAssocTimeRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIabg2.setDescription("Station's elapsed time since last Probe Request on IAP abg2 (milliseconds)")
stationAssocTimeRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIabg3.setDescription("Station's elapsed time since last Probe Request on IAP abg3 (milliseconds)")
stationAssocTimeRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocTimeRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationAssocTimeRSSIabg4.setDescription("Station's elapsed time since last Probe Request on IAP abg4 (milliseconds)")
stationAssocHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 51), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocHostname.setStatus('current')
if mibBuilder.loadTexts: stationAssocHostname.setDescription('Station hostname')
stationAssocDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 52), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocDeviceType.setStatus('current')
if mibBuilder.loadTexts: stationAssocDeviceType.setDescription('Station device type')
stationAssocDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 53), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocDeviceClass.setStatus('current')
if mibBuilder.loadTexts: stationAssocDeviceClass.setDescription('Station device class')
stationAssocUserAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocUserAgent.setStatus('current')
if mibBuilder.loadTexts: stationAssocUserAgent.setDescription('User-agent string')
stationAssocDeviceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 0), ("manufacturer", 1), ("netbios-name", 2), ("dhcp-hostname", 3), ("user-agent-string", 4), ("internal-rules", 5), ("external-rules", 6), ("cache", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocDeviceSource.setStatus('current')
if mibBuilder.loadTexts: stationAssocDeviceSource.setDescription('Station device source')
stationAssocDeviceSourceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 4, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAssocDeviceSourceIndex.setStatus('current')
if mibBuilder.loadTexts: stationAssocDeviceSourceIndex.setDescription('Station device source index')
stationUnassocTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5), )
if mibBuilder.loadTexts: stationUnassocTable.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTable.setDescription('Table of unassociated stations (indexed by station MAC address)')
stationUnassocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationUnassocMACAddress"))
if mibBuilder.loadTexts: stationUnassocEntry.setStatus('current')
if mibBuilder.loadTexts: stationUnassocEntry.setDescription('Table entry for unassociated station')
stationUnassocMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationUnassocMACAddress.setDescription('MAC address of the station')
stationUnassocManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocManufacturer.setStatus('current')
if mibBuilder.loadTexts: stationUnassocManufacturer.setDescription("Manufacturer of the station's network card")
stationUnassocNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocNetbiosName.setStatus('current')
if mibBuilder.loadTexts: stationUnassocNetbiosName.setDescription('Netbios name of the station')
stationUnassocMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("dot11b", 1), ("dot11bg", 2), ("dot11abg", 3), ("dot11a", 4), ("dot11ab", 5), ("dot11ag", 6), ("dot11g", 7), ("dot11n", 8), ("dot11bn", 9), ("dot11gn", 10), ("dot11bgn", 11), ("dot11an", 12), ("dot11abn", 13), ("dot11agn", 14), ("dot11abgn", 15), ("dot11anac", 16), ("dot11abgnac", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocMediaType.setStatus('current')
if mibBuilder.loadTexts: stationUnassocMediaType.setDescription('Station media type')
stationUnassocTxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTxRate.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTxRate.setDescription('Tx rate of the station')
stationUnassocRxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRxRate.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRxRate.setDescription('Rx rate of the station')
stationUnassocRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSI.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSI.setDescription("Station's RSSI (last packet received)")
stationUnassocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTime.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTime.setDescription('Time (in seconds) since Rx')
stationUnassocRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa1.setDescription("Station's RSSI for last Probe Request on IAP a1")
stationUnassocRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa2.setDescription("Station's RSSI for last Probe Request on IAP a2")
stationUnassocRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa3.setDescription("Station's RSSI for last Probe Request on IAP a3")
stationUnassocRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa4.setDescription("Station's RSSI for last Probe Request on IAP a4")
stationUnassocRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa5.setDescription("Station's RSSI for last Probe Request on IAP a5")
stationUnassocRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa6.setDescription("Station's RSSI for last Probe Request on IAP a6")
stationUnassocRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa7.setDescription("Station's RSSI for last Probe Request on IAP a7")
stationUnassocRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa8.setDescription("Station's RSSI for last Probe Request on IAP a8")
stationUnassocRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa9.setDescription("Station's RSSI for last Probe Request on IAP a9")
stationUnassocRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa10.setDescription("Station's RSSI for last Probe Request on IAP a10")
stationUnassocRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa11.setDescription("Station's RSSI for last Probe Request on IAP a11")
stationUnassocRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIa12.setDescription("Station's RSSI for last Probe Request on IAP a12")
stationUnassocRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIabg1.setDescription("Station's RSSI for last Probe Request on IAP abg1")
stationUnassocRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIabg2.setDescription("Station's RSSI for last Probe Request on IAP abg2")
stationUnassocRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIabg3.setDescription("Station's RSSI for last Probe Request on IAP abg3")
stationUnassocRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationUnassocRSSIabg4.setDescription("Station's RSSI for last Probe Request on IAP abg4")
stationUnassocTimeRSSIa1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa1.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa1.setDescription("Station's elapsed time since last Probe Request on IAP a1 (milliseconds)")
stationUnassocTimeRSSIa2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa2.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa2.setDescription("Station's elapsed time since last Probe Request on IAP a2 (milliseconds)")
stationUnassocTimeRSSIa3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa3.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa3.setDescription("Station's elapsed time since last Probe Request on IAP a3 (milliseconds)")
stationUnassocTimeRSSIa4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa4.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa4.setDescription("Station's elapsed time since last Probe Request on IAP a4 (milliseconds)")
stationUnassocTimeRSSIa5 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa5.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa5.setDescription("Station's elapsed time since last Probe Request on IAP a5 (milliseconds)")
stationUnassocTimeRSSIa6 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa6.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa6.setDescription("Station's elapsed time since last Probe Request on IAP a6 (milliseconds)")
stationUnassocTimeRSSIa7 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa7.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa7.setDescription("Station's elapsed time since last Probe Request on IAP a7 (milliseconds)")
stationUnassocTimeRSSIa8 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa8.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa8.setDescription("Station's elapsed time since last Probe Request on IAP a8 (milliseconds)")
stationUnassocTimeRSSIa9 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa9.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa9.setDescription("Station's elapsed time since last Probe Request on IAP a9 (milliseconds)")
stationUnassocTimeRSSIa10 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa10.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa10.setDescription("Station's elapsed time since last Probe Request on IAP a10 (milliseconds)")
stationUnassocTimeRSSIa11 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa11.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa11.setDescription("Station's elapsed time since last Probe Request on IAP a11 (milliseconds)")
stationUnassocTimeRSSIa12 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIa12.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIa12.setDescription("Station's elapsed time since last Probe Request on IAP a12 (milliseconds)")
stationUnassocTimeRSSIabg1 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg1.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg1.setDescription("Station's elapsed time since last Probe Request on IAP abg1 (milliseconds)")
stationUnassocTimeRSSIabg2 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg2.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg2.setDescription("Station's elapsed time since last Probe Request on IAP abg2 (milliseconds)")
stationUnassocTimeRSSIabg3 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg3.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg3.setDescription("Station's elapsed time since last Probe Request on IAP abg3 (milliseconds)")
stationUnassocTimeRSSIabg4 = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 5, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg4.setStatus('current')
if mibBuilder.loadTexts: stationUnassocTimeRSSIabg4.setDescription("Station's elapsed time since last Probe Request on IAP abg4 (milliseconds)")
stationAssurance = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6))
stationAssuranceEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceEnable.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceEnable.setDescription('Enable/disable station assurance')
stationAssurancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssurancePeriod.setStatus('current')
if mibBuilder.loadTexts: stationAssurancePeriod.setDescription('Station assurance check period (in seconds)')
stationAssuranceAssocTime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceAssocTime.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceAssocTime.setDescription('Minimum average associated time (in seconds)')
stationAssuranceAuthFailures = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceAuthFailures.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceAuthFailures.setDescription('Maximum number of authentication failures')
stationAssuranceErrorRate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceErrorRate.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceErrorRate.setDescription('Maximum packet error rate (as a percentage)')
stationAssuranceRetryRate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceRetryRate.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceRetryRate.setDescription('Maximum packet retry rate (as a percentage)')
stationAssuranceDataRate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceDataRate.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceDataRate.setDescription('Minimum packet data rate (in Mbps)')
stationAssuranceRSSI = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, -50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceRSSI.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceRSSI.setDescription('Minimum received signal strength (in dB)')
stationAssuranceSNR = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 25))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceSNR.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceSNR.setDescription('Minimum signal to noise ratio (in dB)')
stationAssuranceDistance = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceDistance.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceDistance.setDescription('Maximum distance from array (in feet)')
stationAssuranceTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11), )
if mibBuilder.loadTexts: stationAssuranceTable.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceTable.setDescription('Station assurance table')
stationAssuranceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1), ).setIndexNames((0, "XIRRUS-MIB", "staAssuranceIndex"))
if mibBuilder.loadTexts: stationAssuranceEntry.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceEntry.setDescription('Station assurance table entry')
staAssuranceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: staAssuranceIndex.setStatus('current')
if mibBuilder.loadTexts: staAssuranceIndex.setDescription('Station assurance index')
staAssuranceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceMACAddress.setStatus('current')
if mibBuilder.loadTexts: staAssuranceMACAddress.setDescription('Station MAC address')
staAssuranceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceIPAddress.setStatus('current')
if mibBuilder.loadTexts: staAssuranceIPAddress.setDescription('Station IP Address')
staAssuranceNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceNetbiosName.setStatus('current')
if mibBuilder.loadTexts: staAssuranceNetbiosName.setDescription('Station netbios name')
staAssuranceManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceManufacturer.setStatus('current')
if mibBuilder.loadTexts: staAssuranceManufacturer.setDescription("Manufacturer of the station's network card")
staAssuranceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceTime.setStatus('current')
if mibBuilder.loadTexts: staAssuranceTime.setDescription('Last alarm time')
staAssuranceTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceTimestamp.setDescription('Last alarm time (in seconds)')
staAssuranceAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAssocTime.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAssocTime.setDescription('Associated time')
staAssuranceAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAuthFailures.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAuthFailures.setDescription('Number of authentication failures')
staAssuranceErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceErrorRate.setStatus('current')
if mibBuilder.loadTexts: staAssuranceErrorRate.setDescription('Packet error rate')
staAssuranceRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRetryRate.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRetryRate.setDescription('Packet retry rate')
staAssuranceDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDataRate.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDataRate.setDescription('Packet data rate')
staAssuranceRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRSSI.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRSSI.setDescription('Received signal strength')
staAssuranceSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceSNR.setStatus('current')
if mibBuilder.loadTexts: staAssuranceSNR.setDescription('Signal to noise ratio')
staAssuranceDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDistance.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDistance.setDescription('Distance from array')
staAssuranceDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDeviceType.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDeviceType.setDescription('Station device type')
staAssuranceDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDeviceClass.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDeviceClass.setDescription('Station device class')
staAssuranceActiveAlarmTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceActiveAlarmTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceActiveAlarmTimestamp.setDescription('Last active alarm time (in seconds)')
staAssuranceActiveAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("assoc-time", 1), ("auth-fails", 2), ("error-rate", 3), ("retry-rate", 4), ("data-rate", 5), ("rssi", 6), ("snr", 7), ("distance", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceActiveAlarmType.setStatus('current')
if mibBuilder.loadTexts: staAssuranceActiveAlarmType.setDescription('Last active alarm type')
staAssuranceAssocTimeTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAssocTimeTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAssocTimeTimestamp.setDescription('Last associated time alarm time (in seconds)')
staAssuranceAuthFailuresTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAuthFailuresTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAuthFailuresTimestamp.setDescription('Last authentication failures alarm time (in seconds)')
staAssuranceErrorRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceErrorRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceErrorRateTimestamp.setDescription('Last packet error rate alarm time (in seconds)')
staAssuranceRetryRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRetryRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRetryRateTimestamp.setDescription('Last packet retry rate alarm time (in seconds)')
staAssuranceDataRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDataRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDataRateTimestamp.setDescription('Last packet data rate alarm time (in seconds)')
staAssuranceRSSITimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRSSITimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRSSITimestamp.setDescription('Last RSSI alarm time (in seconds)')
staAssuranceSNRTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceSNRTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceSNRTimestamp.setDescription('Last SNR alarm time (in seconds)')
staAssuranceDistanceTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDistanceTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDistanceTimestamp.setDescription('Last distance alarm time (in seconds)')
staAssuranceAssocTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAssocTimeActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAssocTimeActive.setDescription('Flag indicating whether associated time alarm is currently active')
staAssuranceAuthFailuresActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAuthFailuresActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAuthFailuresActive.setDescription('Flag indicating whether authentication failures alarm is currently active')
staAssuranceErrorRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceErrorRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceErrorRateActive.setDescription('Flag indicating whether error rate alarm is currently active')
staAssuranceRetryRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRetryRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRetryRateActive.setDescription('Flag indicating whether retry rate alarm is currently active')
staAssuranceDataRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDataRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDataRateActive.setDescription('Flag indicating whether data rate alarm is currently active')
staAssuranceRSSIActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceRSSIActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceRSSIActive.setDescription('Flag indicating whether RSSI alarm is currently active')
staAssuranceSNRActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceSNRActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceSNRActive.setDescription('Flag indicating whether SNR alarm is currently active')
staAssuranceDistanceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceDistanceActive.setStatus('current')
if mibBuilder.loadTexts: staAssuranceDistanceActive.setDescription('Flag indicating whether distance alarm is currently active')
staAssuranceAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 11, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("assoc-time", 1), ("auth-fails", 2), ("error-rate", 3), ("retry-rate", 4), ("data-rate", 5), ("rssi", 6), ("snr", 7), ("distance", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssuranceAlarmType.setStatus('current')
if mibBuilder.loadTexts: staAssuranceAlarmType.setDescription('Last alarm type')
stationAssurTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12), )
if mibBuilder.loadTexts: stationAssurTable.setStatus('current')
if mibBuilder.loadTexts: stationAssurTable.setDescription('Station assurance table (indexed by station MAC address)')
stationAssurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1), ).setIndexNames((0, "XIRRUS-MIB", "staAssurMACAddress"))
if mibBuilder.loadTexts: stationAssurEntry.setStatus('current')
if mibBuilder.loadTexts: stationAssurEntry.setDescription('Station assurance table entry')
staAssurMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurMACAddress.setStatus('current')
if mibBuilder.loadTexts: staAssurMACAddress.setDescription('Station MAC address')
staAssurIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurIPAddress.setStatus('current')
if mibBuilder.loadTexts: staAssurIPAddress.setDescription('Station IP Address')
staAssurNetbiosName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurNetbiosName.setStatus('current')
if mibBuilder.loadTexts: staAssurNetbiosName.setDescription('Station netbios name')
staAssurManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurManufacturer.setStatus('current')
if mibBuilder.loadTexts: staAssurManufacturer.setDescription("Manufacturer of the station's network card")
staAssurTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurTime.setStatus('current')
if mibBuilder.loadTexts: staAssurTime.setDescription('Last alarm time')
staAssurTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurTimestamp.setDescription('Last alarm time (in seconds)')
staAssurAssocTime = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAssocTime.setStatus('current')
if mibBuilder.loadTexts: staAssurAssocTime.setDescription('Associated time')
staAssurAuthFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAuthFailures.setStatus('current')
if mibBuilder.loadTexts: staAssurAuthFailures.setDescription('Number of authentication failures')
staAssurErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurErrorRate.setStatus('current')
if mibBuilder.loadTexts: staAssurErrorRate.setDescription('Packet error rate')
staAssurRetryRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRetryRate.setStatus('current')
if mibBuilder.loadTexts: staAssurRetryRate.setDescription('Packet retry rate')
staAssurDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDataRate.setStatus('current')
if mibBuilder.loadTexts: staAssurDataRate.setDescription('Packet data rate')
staAssurRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRSSI.setStatus('current')
if mibBuilder.loadTexts: staAssurRSSI.setDescription('Received signal strength')
staAssurSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurSNR.setStatus('current')
if mibBuilder.loadTexts: staAssurSNR.setDescription('Signal to noise ratio')
staAssurDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDistance.setStatus('current')
if mibBuilder.loadTexts: staAssurDistance.setDescription('Distance from array')
staAssurDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDeviceType.setStatus('current')
if mibBuilder.loadTexts: staAssurDeviceType.setDescription('Station device type')
staAssurDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDeviceClass.setStatus('current')
if mibBuilder.loadTexts: staAssurDeviceClass.setDescription('Station device class')
staAssurActiveAlarmTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurActiveAlarmTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurActiveAlarmTimestamp.setDescription('Last active alarm time (in seconds)')
staAssurActiveAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("assoc-time", 1), ("auth-fails", 2), ("error-rate", 3), ("retry-rate", 4), ("data-rate", 5), ("rssi", 6), ("snr", 7), ("distance", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurActiveAlarmType.setStatus('current')
if mibBuilder.loadTexts: staAssurActiveAlarmType.setDescription('Last active alarm type')
staAssurAssocTimeTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAssocTimeTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurAssocTimeTimestamp.setDescription('Last associated time alarm time (in seconds)')
staAssurAuthFailuresTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAuthFailuresTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurAuthFailuresTimestamp.setDescription('Last authentication failures alarm time (in seconds)')
staAssurErrorRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurErrorRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurErrorRateTimestamp.setDescription('Last packet error rate alarm time (in seconds)')
staAssurRetryRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRetryRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurRetryRateTimestamp.setDescription('Last packet retry rate alarm time (in seconds)')
staAssurDataRateTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDataRateTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurDataRateTimestamp.setDescription('Last packet data rate alarm time (in seconds)')
staAssurRSSITimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRSSITimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurRSSITimestamp.setDescription('Last RSSI alarm time (in seconds)')
staAssurSNRTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurSNRTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurSNRTimestamp.setDescription('Last SNR alarm time (in seconds)')
staAssurDistanceTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDistanceTimestamp.setStatus('current')
if mibBuilder.loadTexts: staAssurDistanceTimestamp.setDescription('Last distance alarm time (in seconds)')
staAssurAssocTimeActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAssocTimeActive.setStatus('current')
if mibBuilder.loadTexts: staAssurAssocTimeActive.setDescription('Flag indicating whether associated time alarm is currently active')
staAssurAuthFailuresActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAuthFailuresActive.setStatus('current')
if mibBuilder.loadTexts: staAssurAuthFailuresActive.setDescription('Flag indicating whether authentication failures alarm is currently active')
staAssurErrorRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurErrorRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssurErrorRateActive.setDescription('Flag indicating whether error rate alarm is currently active')
staAssurRetryRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRetryRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssurRetryRateActive.setDescription('Flag indicating whether retry rate alarm is currently active')
staAssurDataRateActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDataRateActive.setStatus('current')
if mibBuilder.loadTexts: staAssurDataRateActive.setDescription('Flag indicating whether data rate alarm is currently active')
staAssurRSSIActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurRSSIActive.setStatus('current')
if mibBuilder.loadTexts: staAssurRSSIActive.setDescription('Flag indicating whether RSSI alarm is currently active')
staAssurSNRActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurSNRActive.setStatus('current')
if mibBuilder.loadTexts: staAssurSNRActive.setDescription('Flag indicating whether SNR alarm is currently active')
staAssurDistanceActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurDistanceActive.setStatus('current')
if mibBuilder.loadTexts: staAssurDistanceActive.setDescription('Flag indicating whether distance alarm is currently active')
staAssurAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 12, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("assoc-time", 1), ("auth-fails", 2), ("error-rate", 3), ("retry-rate", 4), ("data-rate", 5), ("rssi", 6), ("snr", 7), ("distance", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staAssurAlarmType.setStatus('current')
if mibBuilder.loadTexts: staAssurAlarmType.setDescription('Last alarm type')
stationAssuranceTableClear = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("history", 0), ("all", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceTableClear.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceTableClear.setDescription('Clear station assurance table information')
stationAssuranceTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 6, 14), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAssuranceTablePeriod.setStatus('current')
if mibBuilder.loadTexts: stationAssuranceTablePeriod.setDescription('Specify period for station assurance table entries (in seconds, 0 - all table entries)')
stationUnassociatedTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 7), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationUnassociatedTablePeriod.setStatus('current')
if mibBuilder.loadTexts: stationUnassociatedTablePeriod.setDescription('Specify period for unassociated station table entries (in seconds, 0 - all table entries)')
stationLocTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8), )
if mibBuilder.loadTexts: stationLocTable.setStatus('current')
if mibBuilder.loadTexts: stationLocTable.setDescription('Table of stations and their location (indexed by station MAC address)')
stationLocEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationLocMACAddress"))
if mibBuilder.loadTexts: stationLocEntry.setStatus('current')
if mibBuilder.loadTexts: stationLocEntry.setDescription('Table entry for station location')
stationLocMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationLocMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationLocMACAddress.setDescription('MAC address of the station')
stationLocRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationLocRSSI.setStatus('current')
if mibBuilder.loadTexts: stationLocRSSI.setDescription("Station's RSSI (last packet received)")
stationLocPositionX = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationLocPositionX.setStatus('current')
if mibBuilder.loadTexts: stationLocPositionX.setDescription('Station position X coordinate')
stationLocPositionY = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationLocPositionY.setStatus('current')
if mibBuilder.loadTexts: stationLocPositionY.setDescription('Station position Y coordinate')
stationLocPositionZ = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 22, 8, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationLocPositionZ.setStatus('current')
if mibBuilder.loadTexts: stationLocPositionZ.setDescription('Station position Z coordinate')
ethStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1), )
if mibBuilder.loadTexts: ethStatsTable.setStatus('current')
if mibBuilder.loadTexts: ethStatsTable.setDescription('Table of ethernet statistics')
ethStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "ethStatsIndex"))
if mibBuilder.loadTexts: ethStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ethStatsEntry.setDescription('Table entry for ethernet statistics')
ethStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ethStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ethStatsIndex.setDescription('Ethernet statistics index')
ethStatsIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIfaceName.setStatus('current')
if mibBuilder.loadTexts: ethStatsIfaceName.setDescription('Interface name')
ethStatsIfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIfaceStatus.setStatus('current')
if mibBuilder.loadTexts: ethStatsIfaceStatus.setDescription('Interface status')
ethStatsIfaceLink = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIfaceLink.setStatus('current')
if mibBuilder.loadTexts: ethStatsIfaceLink.setDescription('Interface link status')
ethStatsIfaceDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("half", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIfaceDuplex.setStatus('current')
if mibBuilder.loadTexts: ethStatsIfaceDuplex.setDescription('Interface duplex')
ethStatsIfaceSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsIfaceSpeed.setStatus('current')
if mibBuilder.loadTexts: ethStatsIfaceSpeed.setDescription('Interface speed')
ethStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxBytes.setDescription('Bytes received')
ethStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxPackets.setDescription('Packets received')
ethStatsRxCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxCompressed.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxCompressed.setDescription('Compressed packets received')
ethStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxMulticast.setDescription('Multicast packets received')
ethStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxDropped.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxDropped.setDescription('Rx dropped packets')
ethStatsRxFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxFifoErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxFifoErrors.setDescription('Rx fifo errors')
ethStatsRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxFrameErrors.setDescription('Rx frame errors')
ethStatsRxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsRxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsRxTotalErrors.setDescription('Rx total errors')
ethStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxBytes.setDescription('Bytes transmitted')
ethStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxPackets.setDescription('Packets transmitted')
ethStatsTxCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxCompressed.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxCompressed.setDescription('Compressed packets transmitted')
ethStatsTxCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxCarrierErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxCarrierErrors.setDescription('Tx carrier errors')
ethStatsTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxDropped.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxDropped.setDescription('Tx dropped packets')
ethStatsTxFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxFifoErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxFifoErrors.setDescription('Tx fifo errors')
ethStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxCollisions.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxCollisions.setDescription('Tx collisions')
ethStatsTxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: ethStatsTxTotalErrors.setDescription('Tx total errors')
ethStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: ethStatsTimePeriod.setDescription('Time period over which stats were collected')
iapStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2), )
if mibBuilder.loadTexts: iapStatsTable.setStatus('current')
if mibBuilder.loadTexts: iapStatsTable.setDescription('Table of IAP statistics')
iapStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "iapStatsIndex"))
if mibBuilder.loadTexts: iapStatsEntry.setStatus('current')
if mibBuilder.loadTexts: iapStatsEntry.setDescription('Table entry for IAP statistics')
iapStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: iapStatsIndex.setStatus('current')
if mibBuilder.loadTexts: iapStatsIndex.setDescription('IAP statistics index')
iapStatsIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsIfaceName.setStatus('current')
if mibBuilder.loadTexts: iapStatsIfaceName.setDescription('Interface name')
iapStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxBytes.setDescription('Bytes received')
iapStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxPackets.setDescription('Packets received')
iapStatsRxUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxUnicast.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxUnicast.setDescription('Unicast packets received')
iapStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxMulticast.setDescription('Multicast packets received')
iapStatsRxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxBroadcast.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxBroadcast.setDescription('Broadcast packets received')
iapStatsRxManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxManagement.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxManagement.setDescription('Management packets received')
iapStatsRxBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxBeacons.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxBeacons.setDescription('Beacons received')
iapStatsRxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRTS.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRTS.setDescription('RTS packets received')
iapStatsRxCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxCTS.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxCTS.setDescription('CTS packets received')
iapStatsRxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxFragments.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxFragments.setDescription('Fragments received')
iapStatsRxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxTotalErrors.setDescription('Rx total errors')
iapStatsRxTotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxTotalRetries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxTotalRetries.setDescription('Rx total retries')
iapStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxDropped.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxDropped.setDescription('Rx dropped packets')
iapStatsRxUnassociated = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxUnassociated.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxUnassociated.setDescription('Rx packets from unassociated stations')
iapStatsRxCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxCRCErrors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxCRCErrors.setDescription('Rx CRC errors')
iapStatsRxFragErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxFragErrors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxFragErrors.setDescription('Rx fragment errors')
iapStatsRxEncErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxEncErrors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxEncErrors.setDescription('Rx encryption errors')
iapStatsRxOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxOverruns.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxOverruns.setDescription('Rx overruns')
iapStatsRxDuplicates = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxDuplicates.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxDuplicates.setDescription('Rx duplicates')
iapStatsRxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate1Bytes.setDescription('Bytes received at rate 1Mbps')
iapStatsRxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate1Packets.setDescription('Packets received at rate 1Mbps')
iapStatsRxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate1Errors.setDescription('Rx errors at rate 1Mbps')
iapStatsRxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate1Retries.setDescription('Rx retries at rate 1Mbps')
iapStatsRxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate2Bytes.setDescription('Bytes received at rate 2Mbps')
iapStatsRxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate2Packets.setDescription('Packets received at rate 2Mbps')
iapStatsRxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate2Errors.setDescription('Rx errors at rate 2Mbps')
iapStatsRxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate2Retries.setDescription('Rx retries at rate 2Mbps')
iapStatsRxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate5Bytes.setDescription('Bytes received at rate 5.5Mbps')
iapStatsRxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate5Packets.setDescription('Packets received at rate 5.5Mbps')
iapStatsRxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate5Errors.setDescription('Rx errors at rate 5.5Mbps')
iapStatsRxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate5Retries.setDescription('Rx retries at rate 5.5Mbps')
iapStatsRxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate11Bytes.setDescription('Bytes received at rate 11Mbps')
iapStatsRxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate11Packets.setDescription('Packets received at rate 11Mbps')
iapStatsRxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate11Errors.setDescription('Rx errors at rate 11Mbps')
iapStatsRxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate11Retries.setDescription('Rx retries at rate 11Mbps')
iapStatsRxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate6Bytes.setDescription('Bytes received at rate 6Mbps')
iapStatsRxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate6Packets.setDescription('Packets received at rate 6Mbps')
iapStatsRxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate6Errors.setDescription('Rx errors at rate 6Mbps')
iapStatsRxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate6Retries.setDescription('Rx retries at rate 6Mbps')
iapStatsRxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate9Bytes.setDescription('Bytes received at rate 9Mbps')
iapStatsRxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate9Packets.setDescription('Packets received at rate 9Mbps')
iapStatsRxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate9Errors.setDescription('Rx errors at rate 9Mbps')
iapStatsRxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate9Retries.setDescription('Rx retries at rate 9Mbps')
iapStatsRxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate12Bytes.setDescription('Bytes received at rate 12Mbps')
iapStatsRxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate12Packets.setDescription('Packets received at rate 12Mbps')
iapStatsRxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate12Errors.setDescription('Rx errors at rate 12Mbps')
iapStatsRxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate12Retries.setDescription('Rx retries at rate 12Mbps')
iapStatsRxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate18Bytes.setDescription('Bytes received at rate 18Mbps')
iapStatsRxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate18Packets.setDescription('Packets received at rate 18Mbps')
iapStatsRxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate18Errors.setDescription('Rx errors at rate 18Mbps')
iapStatsRxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate18Retries.setDescription('Rx retries at rate 18Mbps')
iapStatsRxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate24Bytes.setDescription('Bytes received at rate 24Mbps')
iapStatsRxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate24Packets.setDescription('Packets received at rate 24Mbps')
iapStatsRxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate24Errors.setDescription('Rx errors at rate 24Mbps')
iapStatsRxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate24Retries.setDescription('Rx retries at rate 24Mbps')
iapStatsRxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate36Bytes.setDescription('Bytes received at rate 36Mbps')
iapStatsRxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate36Packets.setDescription('Packets received at rate 36Mbps')
iapStatsRxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate36Errors.setDescription('Rx errors at rate 36Mbps')
iapStatsRxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate36Retries.setDescription('Rx retries at rate 36Mbps')
iapStatsRxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate48Bytes.setDescription('Bytes received at rate 48Mbps')
iapStatsRxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate48Packets.setDescription('Packets received at rate 48Mbps')
iapStatsRxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate48Errors.setDescription('Rx errors at rate 48Mbps')
iapStatsRxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate48Retries.setDescription('Rx retries at rate 48Mbps')
iapStatsRxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate54Bytes.setDescription('Bytes received at rate 54Mbps')
iapStatsRxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate54Packets.setDescription('Packets received at rate 54Mbps')
iapStatsRxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate54Errors.setDescription('Rx errors at rate 54Mbps')
iapStatsRxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsRxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsRxRate54Retries.setDescription('Rx retries at rate 54Mbps')
iapStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxBytes.setDescription('Bytes transmitted')
iapStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxPackets.setDescription('Packets transmitted')
iapStatsTxUnicast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxUnicast.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxUnicast.setDescription('Unicast packets transmitted')
iapStatsTxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxMulticast.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxMulticast.setDescription('Multicast packets transmitted')
iapStatsTxBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxBroadcast.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxBroadcast.setDescription('Broadcast packets transmitted')
iapStatsTxManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxManagement.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxManagement.setDescription('Management packets transmitted')
iapStatsTxBeacons = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxBeacons.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxBeacons.setDescription('Beacons transmitted')
iapStatsTxRTS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRTS.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRTS.setDescription('RTS packets transmitted')
iapStatsTxCTS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxCTS.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxCTS.setDescription('CTS packets transmitted')
iapStatsTxFragments = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxFragments.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxFragments.setDescription('Fragments transmitted')
iapStatsTxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxTotalErrors.setDescription('Tx total errors')
iapStatsTxTotalRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxTotalRetries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxTotalRetries.setDescription('Tx total retries')
iapStatsTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxDropped.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxDropped.setDescription('Tx dropped packets')
iapStatsTxUnassociated = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxUnassociated.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxUnassociated.setDescription('Tx packets to unassociated stations')
iapStatsTxACKFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxACKFailures.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxACKFailures.setDescription('Tx ACK failures')
iapStatsTxRTSFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRTSFailures.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRTSFailures.setDescription('Tx RTS failures')
iapStatsTxRTSRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRTSRetries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRTSRetries.setDescription('Tx RTS retries')
iapStatsTxSingleRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxSingleRetries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxSingleRetries.setDescription('Tx single retries')
iapStatsTxMultipleRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxMultipleRetries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxMultipleRetries.setDescription('Tx multiple retries')
iapStatsTxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate1Bytes.setDescription('Bytes transmitted at rate 1Mbps')
iapStatsTxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate1Packets.setDescription('Packets transmitted at rate 1Mbps')
iapStatsTxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate1Errors.setDescription('Tx errors at rate 1Mbps')
iapStatsTxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate1Retries.setDescription('Tx retries at rate 1Mbps')
iapStatsTxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate2Bytes.setDescription('Bytes transmitted at rate 2Mbps')
iapStatsTxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate2Packets.setDescription('Packets transmitted at rate 2Mbps')
iapStatsTxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate2Errors.setDescription('Tx errors at rate 2Mbps')
iapStatsTxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate2Retries.setDescription('Tx retries at rate 2Mbps')
iapStatsTxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate5Bytes.setDescription('Bytes transmitted at rate 5.5Mbps')
iapStatsTxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate5Packets.setDescription('Packets transmitted at rate 5.5Mbps')
iapStatsTxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate5Errors.setDescription('Tx errors at rate 5.5Mbps')
iapStatsTxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate5Retries.setDescription('Tx retries at rate 5.5Mbps')
iapStatsTxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate11Bytes.setDescription('Bytes transmitted at rate 11Mbps')
iapStatsTxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate11Packets.setDescription('Packets transmitted at rate 11Mbps')
iapStatsTxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate11Errors.setDescription('Tx errors at rate 11Mbps')
iapStatsTxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate11Retries.setDescription('Tx retries at rate 11Mbps')
iapStatsTxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate6Bytes.setDescription('Bytes transmitted at rate 6Mbps')
iapStatsTxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate6Packets.setDescription('Packets transmitted at rate 6Mbps')
iapStatsTxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate6Errors.setDescription('Tx errors at rate 6Mbps')
iapStatsTxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate6Retries.setDescription('Tx retries at rate 6Mbps')
iapStatsTxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate9Bytes.setDescription('Bytes transmitted at rate 9Mbps')
iapStatsTxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate9Packets.setDescription('Packets transmitted at rate 9Mbps')
iapStatsTxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate9Errors.setDescription('Tx errors at rate 9Mbps')
iapStatsTxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate9Retries.setDescription('Tx retries at rate 9Mbps')
iapStatsTxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate12Bytes.setDescription('Bytes transmitted at rate 12Mbps')
iapStatsTxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate12Packets.setDescription('Packets transmitted at rate 12Mbps')
iapStatsTxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate12Errors.setDescription('Tx errors at rate 12Mbps')
iapStatsTxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate12Retries.setDescription('Tx retries at rate 12Mbps')
iapStatsTxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate18Bytes.setDescription('Bytes transmitted at rate 18Mbps')
iapStatsTxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate18Packets.setDescription('Packets transmitted at rate 18Mbps')
iapStatsTxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate18Errors.setDescription('Tx errors at rate 18Mbps')
iapStatsTxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate18Retries.setDescription('Tx retries at rate 18Mbps')
iapStatsTxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate24Bytes.setDescription('Bytes transmitted at rate 24Mbps')
iapStatsTxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate24Packets.setDescription('Packets transmitted at rate 24Mbps')
iapStatsTxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate24Errors.setDescription('Tx errors at rate 24Mbps')
iapStatsTxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate24Retries.setDescription('Tx retries at rate 24Mbps')
iapStatsTxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate36Bytes.setDescription('Bytes transmitted at rate 36Mbps')
iapStatsTxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate36Packets.setDescription('Packets transmitted at rate 36Mbps')
iapStatsTxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate36Errors.setDescription('Tx errors at rate 36Mbps')
iapStatsTxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate36Retries.setDescription('Tx retries at rate 36Mbps')
iapStatsTxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate48Bytes.setDescription('Bytes transmitted at rate 48Mbps')
iapStatsTxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate48Packets.setDescription('Packets transmitted at rate 48Mbps')
iapStatsTxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate48Errors.setDescription('Tx errors at rate 48Mbps')
iapStatsTxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate48Retries.setDescription('Tx retries at rate 48Mbps')
iapStatsTxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate54Bytes.setDescription('Bytes transmitted at rate 54Mbps')
iapStatsTxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate54Packets.setDescription('Packets transmitted at rate 54Mbps')
iapStatsTxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate54Errors.setDescription('Tx errors at rate 54Mbps')
iapStatsTxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxRate54Retries.setDescription('Tx retries at rate 54Mbps')
iapStatsTxUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTxUtilization.setStatus('current')
if mibBuilder.loadTexts: iapStatsTxUtilization.setDescription('Total mS during which IAP has been transmitting')
iapStatsNoiseTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsNoiseTotal.setStatus('current')
if mibBuilder.loadTexts: iapStatsNoiseTotal.setDescription('Total silence*bytes for all packets received by IAP')
iapStatsNoiseDenominator = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsNoiseDenominator.setStatus('current')
if mibBuilder.loadTexts: iapStatsNoiseDenominator.setDescription('Total bytes in all packets received by IAP')
iapStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 2, 1, 140), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: iapStatsTimePeriod.setDescription('Time period over which stats were collected')
stationStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3), )
if mibBuilder.loadTexts: stationStatsTable.setStatus('current')
if mibBuilder.loadTexts: stationStatsTable.setDescription('Table of station statistics')
stationStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationStatsIndex"))
if mibBuilder.loadTexts: stationStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stationStatsEntry.setDescription('Table entry for station statistics')
stationStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: stationStatsIndex.setStatus('current')
if mibBuilder.loadTexts: stationStatsIndex.setDescription('Station statistics index')
stationStatsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationStatsMACAddress.setDescription('MAC address of the station')
stationStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxBytes.setDescription('Bytes received')
stationStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxPackets.setDescription('Packets received')
stationStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxErrors.setDescription('Rx errors')
stationStatsRxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRetries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRetries.setDescription('Rx retries')
stationStatsRxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate1Bytes.setDescription('Bytes received at rate 1Mbps')
stationStatsRxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate1Packets.setDescription('Packets received at rate 1Mbps')
stationStatsRxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate1Errors.setDescription('Rx errors at rate 1Mbps')
stationStatsRxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate1Retries.setDescription('Rx retries at rate 1Mbps')
stationStatsRxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate2Bytes.setDescription('Bytes received at rate 2Mbps')
stationStatsRxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate2Packets.setDescription('Packets received at rate 2Mbps')
stationStatsRxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate2Errors.setDescription('Rx errors at rate 2Mbps')
stationStatsRxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate2Retries.setDescription('Rx retries at rate 2Mbps')
stationStatsRxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate5Bytes.setDescription('Bytes received at rate 5.5Mbps')
stationStatsRxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate5Packets.setDescription('Packets received at rate 5.5Mbps')
stationStatsRxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate5Errors.setDescription('Rx errors at rate 5.5Mbps')
stationStatsRxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate5Retries.setDescription('Rx retries at rate 5.5Mbps')
stationStatsRxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate11Bytes.setDescription('Bytes received at rate 11Mbps')
stationStatsRxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate11Packets.setDescription('Packets received at rate 11Mbps')
stationStatsRxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate11Errors.setDescription('Rx errors at rate 11Mbps')
stationStatsRxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate11Retries.setDescription('Rx retries at rate 11Mbps')
stationStatsRxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate6Bytes.setDescription('Bytes received at rate 6Mbps')
stationStatsRxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate6Packets.setDescription('Packets received at rate 6Mbps')
stationStatsRxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate6Errors.setDescription('Rx errors at rate 6Mbps')
stationStatsRxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate6Retries.setDescription('Rx retries at rate 6Mbps')
stationStatsRxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate9Bytes.setDescription('Bytes received at rate 9Mbps')
stationStatsRxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate9Packets.setDescription('Packets received at rate 9Mbps')
stationStatsRxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate9Errors.setDescription('Rx errors at rate 9Mbps')
stationStatsRxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate9Retries.setDescription('Rx retries at rate 9Mbps')
stationStatsRxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate12Bytes.setDescription('Bytes received at rate 12Mbps')
stationStatsRxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate12Packets.setDescription('Packets received at rate 12Mbps')
stationStatsRxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate12Errors.setDescription('Rx errors at rate 12Mbps')
stationStatsRxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate12Retries.setDescription('Rx retries at rate 12Mbps')
stationStatsRxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate18Bytes.setDescription('Bytes received at rate 18Mbps')
stationStatsRxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate18Packets.setDescription('Packets received at rate 18Mbps')
stationStatsRxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate18Errors.setDescription('Rx errors at rate 18Mbps')
stationStatsRxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate18Retries.setDescription('Rx retries at rate 18Mbps')
stationStatsRxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate24Bytes.setDescription('Bytes received at rate 24Mbps')
stationStatsRxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate24Packets.setDescription('Packets received at rate 24Mbps')
stationStatsRxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate24Errors.setDescription('Rx errors at rate 24Mbps')
stationStatsRxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate24Retries.setDescription('Rx retries at rate 24Mbps')
stationStatsRxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate36Bytes.setDescription('Bytes received at rate 36Mbps')
stationStatsRxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate36Packets.setDescription('Packets received at rate 36Mbps')
stationStatsRxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate36Errors.setDescription('Rx errors at rate 36Mbps')
stationStatsRxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate36Retries.setDescription('Rx retries at rate 36Mbps')
stationStatsRxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate48Bytes.setDescription('Bytes received at rate 48Mbps')
stationStatsRxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate48Packets.setDescription('Packets received at rate 48Mbps')
stationStatsRxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate48Errors.setDescription('Rx errors at rate 48Mbps')
stationStatsRxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate48Retries.setDescription('Rx retries at rate 48Mbps')
stationStatsRxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate54Bytes.setDescription('Bytes received at rate 54Mbps')
stationStatsRxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate54Packets.setDescription('Packets received at rate 54Mbps')
stationStatsRxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate54Errors.setDescription('Rx errors at rate 54Mbps')
stationStatsRxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsRxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsRxRate54Retries.setDescription('Rx retries at rate 54Mbps')
stationStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxBytes.setDescription('Bytes transmitted')
stationStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxPackets.setDescription('Packets transmitted')
stationStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxErrors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxErrors.setDescription('Tx errors')
stationStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRetries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRetries.setDescription('Tx retries')
stationStatsTxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate1Bytes.setDescription('Bytes transmitted at rate 1Mbps')
stationStatsTxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate1Packets.setDescription('Packets transmitted at rate 1Mbps')
stationStatsTxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate1Errors.setDescription('Tx errors at rate 1Mbps')
stationStatsTxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate1Retries.setDescription('Tx retries at rate 1Mbps')
stationStatsTxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate2Bytes.setDescription('Bytes transmitted at rate 2Mbps')
stationStatsTxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate2Packets.setDescription('Packets transmitted at rate 2Mbps')
stationStatsTxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate2Errors.setDescription('Tx errors at rate 2Mbps')
stationStatsTxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate2Retries.setDescription('Tx retries at rate 2Mbps')
stationStatsTxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate5Bytes.setDescription('Bytes transmitted at rate 5.5Mbps')
stationStatsTxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate5Packets.setDescription('Packets transmitted at rate 5.5Mbps')
stationStatsTxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate5Errors.setDescription('Tx errors at rate 5.5Mbps')
stationStatsTxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate5Retries.setDescription('Tx retries at rate 5.5Mbps')
stationStatsTxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate11Bytes.setDescription('Bytes transmitted at rate 11Mbps')
stationStatsTxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate11Packets.setDescription('Packets transmitted at rate 11Mbps')
stationStatsTxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate11Errors.setDescription('Tx errors at rate 11Mbps')
stationStatsTxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate11Retries.setDescription('Tx retries at rate 11Mbps')
stationStatsTxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate6Bytes.setDescription('Bytes transmitted at rate 6Mbps')
stationStatsTxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate6Packets.setDescription('Packets transmitted at rate 6Mbps')
stationStatsTxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate6Errors.setDescription('Tx errors at rate 6Mbps')
stationStatsTxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate6Retries.setDescription('Tx retries at rate 6Mbps')
stationStatsTxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate9Bytes.setDescription('Bytes transmitted at rate 9Mbps')
stationStatsTxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate9Packets.setDescription('Packets transmitted at rate 9Mbps')
stationStatsTxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate9Errors.setDescription('Tx errors at rate 9Mbps')
stationStatsTxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate9Retries.setDescription('Tx retries at rate 9Mbps')
stationStatsTxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate12Bytes.setDescription('Bytes transmitted at rate 12Mbps')
stationStatsTxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate12Packets.setDescription('Packets transmitted at rate 12Mbps')
stationStatsTxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate12Errors.setDescription('Tx errors at rate 12Mbps')
stationStatsTxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate12Retries.setDescription('Tx retries at rate 12Mbps')
stationStatsTxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate18Bytes.setDescription('Bytes transmitted at rate 18Mbps')
stationStatsTxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate18Packets.setDescription('Packets transmitted at rate 18Mbps')
stationStatsTxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate18Errors.setDescription('Tx errors at rate 18Mbps')
stationStatsTxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate18Retries.setDescription('Tx retries at rate 18Mbps')
stationStatsTxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate24Bytes.setDescription('Bytes transmitted at rate 24Mbps')
stationStatsTxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate24Packets.setDescription('Packets transmitted at rate 24Mbps')
stationStatsTxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate24Errors.setDescription('Tx errors at rate 24Mbps')
stationStatsTxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate24Retries.setDescription('Tx retries at rate 24Mbps')
stationStatsTxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate36Bytes.setDescription('Bytes transmitted at rate 36Mbps')
stationStatsTxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate36Packets.setDescription('Packets transmitted at rate 36Mbps')
stationStatsTxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate36Errors.setDescription('Tx errors at rate 36Mbps')
stationStatsTxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate36Retries.setDescription('Tx retries at rate 36Mbps')
stationStatsTxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate48Bytes.setDescription('Bytes transmitted at rate 48Mbps')
stationStatsTxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate48Packets.setDescription('Packets transmitted at rate 48Mbps')
stationStatsTxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate48Errors.setDescription('Tx errors at rate 48Mbps')
stationStatsTxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate48Retries.setDescription('Tx retries at rate 48Mbps')
stationStatsTxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate54Bytes.setDescription('Bytes transmitted at rate 54Mbps')
stationStatsTxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate54Packets.setDescription('Packets transmitted at rate 54Mbps')
stationStatsTxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate54Errors.setDescription('Tx errors at rate 54Mbps')
stationStatsTxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: stationStatsTxRate54Retries.setDescription('Tx retries at rate 54Mbps')
stationStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 3, 1, 107), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: stationStatsTimePeriod.setDescription('Time period over which stats were collected')
vlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4), )
if mibBuilder.loadTexts: vlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTable.setDescription('Table of VLAN statistics')
vlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanStatsIndex"))
if mibBuilder.loadTexts: vlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStatsEntry.setDescription('Table entry for VLAN statistics')
vlanStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vlanStatsIndex.setDescription('VLAN statistics index')
vlanStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsName.setStatus('current')
if mibBuilder.loadTexts: vlanStatsName.setDescription('VLAN name')
vlanStatsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsNumber.setStatus('current')
if mibBuilder.loadTexts: vlanStatsNumber.setDescription('VLAN number')
vlanStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxBytes.setDescription('Bytes received')
vlanStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxPackets.setDescription('Packets received')
vlanStatsRxCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxCompressed.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxCompressed.setDescription('Compressed packets received')
vlanStatsRxMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxMulticast.setDescription('Multicast packets received')
vlanStatsRxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxDropped.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxDropped.setDescription('Rx dropped packets')
vlanStatsRxFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxFifoErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxFifoErrors.setDescription('Rx fifo errors')
vlanStatsRxFrameErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxFrameErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxFrameErrors.setDescription('Rx frame errors')
vlanStatsRxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsRxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsRxTotalErrors.setDescription('Rx total errors')
vlanStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxBytes.setDescription('Bytes transmitted')
vlanStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxPackets.setDescription('Packets transmitted')
vlanStatsTxCompressed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxCompressed.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxCompressed.setDescription('Compressed packets transmitted')
vlanStatsTxCarrierErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxCarrierErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxCarrierErrors.setDescription('Tx carrier errors')
vlanStatsTxDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxDropped.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxDropped.setDescription('Tx dropped packets')
vlanStatsTxFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxFifoErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxFifoErrors.setDescription('Tx fifo errors')
vlanStatsTxCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxCollisions.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxCollisions.setDescription('Tx collisions')
vlanStatsTxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTxTotalErrors.setDescription('Tx total errors')
vlanStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 4, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTimePeriod.setDescription('Time period over which stats were collected')
wdsStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5), )
if mibBuilder.loadTexts: wdsStatsTable.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTable.setDescription('Table of statistics for WDS links')
wdsStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1), ).setIndexNames((0, "XIRRUS-MIB", "wdsStatsIndex"))
if mibBuilder.loadTexts: wdsStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wdsStatsEntry.setDescription('Table entry for WDS link statistics')
wdsStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: wdsStatsIndex.setStatus('current')
if mibBuilder.loadTexts: wdsStatsIndex.setDescription('WDS link statistics index')
wdsStatsLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsLinkName.setStatus('current')
if mibBuilder.loadTexts: wdsStatsLinkName.setDescription('Name of the WDS lnk')
wdsStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxBytes.setDescription('Bytes received')
wdsStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxPackets.setDescription('Packets received')
wdsStatsRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxErrors.setDescription('Rx errors')
wdsStatsRxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRetries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRetries.setDescription('Rx retries')
wdsStatsRxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate1Bytes.setDescription('Bytes received at rate 1Mbps')
wdsStatsRxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate1Packets.setDescription('Packets received at rate 1Mbps')
wdsStatsRxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate1Errors.setDescription('Rx errors at rate 1Mbps')
wdsStatsRxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate1Retries.setDescription('Rx retries at rate 1Mbps')
wdsStatsRxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate2Bytes.setDescription('Bytes received at rate 2Mbps')
wdsStatsRxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate2Packets.setDescription('Packets received at rate 2Mbps')
wdsStatsRxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate2Errors.setDescription('Rx errors at rate 2Mbps')
wdsStatsRxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate2Retries.setDescription('Rx retries at rate 2Mbps')
wdsStatsRxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate5Bytes.setDescription('Bytes received at rate 5.5Mbps')
wdsStatsRxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate5Packets.setDescription('Packets received at rate 5.5Mbps')
wdsStatsRxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate5Errors.setDescription('Rx errors at rate 5.5Mbps')
wdsStatsRxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate5Retries.setDescription('Rx retries at rate 5.5Mbps')
wdsStatsRxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate11Bytes.setDescription('Bytes received at rate 11Mbps')
wdsStatsRxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate11Packets.setDescription('Packets received at rate 11Mbps')
wdsStatsRxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate11Errors.setDescription('Rx errors at rate 11Mbps')
wdsStatsRxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate11Retries.setDescription('Rx retries at rate 11Mbps')
wdsStatsRxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate6Bytes.setDescription('Bytes received at rate 6Mbps')
wdsStatsRxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate6Packets.setDescription('Packets received at rate 6Mbps')
wdsStatsRxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate6Errors.setDescription('Rx errors at rate 6Mbps')
wdsStatsRxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate6Retries.setDescription('Rx retries at rate 6Mbps')
wdsStatsRxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate9Bytes.setDescription('Bytes received at rate 9Mbps')
wdsStatsRxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate9Packets.setDescription('Packets received at rate 9Mbps')
wdsStatsRxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate9Errors.setDescription('Rx errors at rate 9Mbps')
wdsStatsRxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate9Retries.setDescription('Rx retries at rate 9Mbps')
wdsStatsRxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate12Bytes.setDescription('Bytes received at rate 12Mbps')
wdsStatsRxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate12Packets.setDescription('Packets received at rate 12Mbps')
wdsStatsRxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate12Errors.setDescription('Rx errors at rate 12Mbps')
wdsStatsRxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate12Retries.setDescription('Rx retries at rate 12Mbps')
wdsStatsRxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate18Bytes.setDescription('Bytes received at rate 18Mbps')
wdsStatsRxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate18Packets.setDescription('Packets received at rate 18Mbps')
wdsStatsRxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate18Errors.setDescription('Rx errors at rate 18Mbps')
wdsStatsRxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate18Retries.setDescription('Rx retries at rate 18Mbps')
wdsStatsRxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate24Bytes.setDescription('Bytes received at rate 24Mbps')
wdsStatsRxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate24Packets.setDescription('Packets received at rate 24Mbps')
wdsStatsRxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate24Errors.setDescription('Rx errors at rate 24Mbps')
wdsStatsRxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate24Retries.setDescription('Rx retries at rate 24Mbps')
wdsStatsRxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate36Bytes.setDescription('Bytes received at rate 36Mbps')
wdsStatsRxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate36Packets.setDescription('Packets received at rate 36Mbps')
wdsStatsRxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate36Errors.setDescription('Rx errors at rate 36Mbps')
wdsStatsRxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate36Retries.setDescription('Rx retries at rate 36Mbps')
wdsStatsRxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate48Bytes.setDescription('Bytes received at rate 48Mbps')
wdsStatsRxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate48Packets.setDescription('Packets received at rate 48Mbps')
wdsStatsRxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate48Errors.setDescription('Rx errors at rate 48Mbps')
wdsStatsRxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate48Retries.setDescription('Rx retries at rate 48Mbps')
wdsStatsRxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate54Bytes.setDescription('Bytes received at rate 54Mbps')
wdsStatsRxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate54Packets.setDescription('Packets received at rate 54Mbps')
wdsStatsRxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate54Errors.setDescription('Rx errors at rate 54Mbps')
wdsStatsRxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsRxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsRxRate54Retries.setDescription('Rx retries at rate 54Mbps')
wdsStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxBytes.setDescription('Bytes transmitted')
wdsStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxPackets.setDescription('Packets transmitted')
wdsStatsTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxErrors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxErrors.setDescription('Tx errors')
wdsStatsTxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRetries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRetries.setDescription('Tx retries')
wdsStatsTxRate1Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate1Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate1Bytes.setDescription('Bytes transmitted at rate 1Mbps')
wdsStatsTxRate1Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate1Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate1Packets.setDescription('Packets transmitted at rate 1Mbps')
wdsStatsTxRate1Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate1Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate1Errors.setDescription('Tx errors at rate 1Mbps')
wdsStatsTxRate1Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate1Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate1Retries.setDescription('Tx retries at rate 1Mbps')
wdsStatsTxRate2Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate2Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate2Bytes.setDescription('Bytes transmitted at rate 2Mbps')
wdsStatsTxRate2Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate2Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate2Packets.setDescription('Packets transmitted at rate 2Mbps')
wdsStatsTxRate2Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate2Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate2Errors.setDescription('Tx errors at rate 2Mbps')
wdsStatsTxRate2Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate2Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate2Retries.setDescription('Tx retries at rate 2Mbps')
wdsStatsTxRate5Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate5Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate5Bytes.setDescription('Bytes transmitted at rate 5.5Mbps')
wdsStatsTxRate5Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate5Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate5Packets.setDescription('Packets transmitted at rate 5.5Mbps')
wdsStatsTxRate5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate5Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate5Errors.setDescription('Tx errors at rate 5.5Mbps')
wdsStatsTxRate5Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate5Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate5Retries.setDescription('Tx retries at rate 5.5Mbps')
wdsStatsTxRate11Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate11Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate11Bytes.setDescription('Bytes transmitted at rate 11Mbps')
wdsStatsTxRate11Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate11Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate11Packets.setDescription('Packets transmitted at rate 11Mbps')
wdsStatsTxRate11Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate11Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate11Errors.setDescription('Tx errors at rate 11Mbps')
wdsStatsTxRate11Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate11Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate11Retries.setDescription('Tx retries at rate 11Mbps')
wdsStatsTxRate6Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate6Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate6Bytes.setDescription('Bytes transmitted at rate 6Mbps')
wdsStatsTxRate6Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate6Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate6Packets.setDescription('Packets transmitted at rate 6Mbps')
wdsStatsTxRate6Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate6Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate6Errors.setDescription('Tx errors at rate 6Mbps')
wdsStatsTxRate6Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate6Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate6Retries.setDescription('Tx retries at rate 6Mbps')
wdsStatsTxRate9Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate9Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate9Bytes.setDescription('Bytes transmitted at rate 9Mbps')
wdsStatsTxRate9Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate9Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate9Packets.setDescription('Packets transmitted at rate 9Mbps')
wdsStatsTxRate9Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate9Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate9Errors.setDescription('Tx errors at rate 9Mbps')
wdsStatsTxRate9Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate9Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate9Retries.setDescription('Tx retries at rate 9Mbps')
wdsStatsTxRate12Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate12Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate12Bytes.setDescription('Bytes transmitted at rate 12Mbps')
wdsStatsTxRate12Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate12Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate12Packets.setDescription('Packets transmitted at rate 12Mbps')
wdsStatsTxRate12Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate12Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate12Errors.setDescription('Tx errors at rate 12Mbps')
wdsStatsTxRate12Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate12Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate12Retries.setDescription('Tx retries at rate 12Mbps')
wdsStatsTxRate18Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate18Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate18Bytes.setDescription('Bytes transmitted at rate 18Mbps')
wdsStatsTxRate18Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate18Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate18Packets.setDescription('Packets transmitted at rate 18Mbps')
wdsStatsTxRate18Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate18Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate18Errors.setDescription('Tx errors at rate 18Mbps')
wdsStatsTxRate18Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate18Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate18Retries.setDescription('Tx retries at rate 18Mbps')
wdsStatsTxRate24Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate24Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate24Bytes.setDescription('Bytes transmitted at rate 24Mbps')
wdsStatsTxRate24Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate24Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate24Packets.setDescription('Packets transmitted at rate 24Mbps')
wdsStatsTxRate24Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate24Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate24Errors.setDescription('Tx errors at rate 24Mbps')
wdsStatsTxRate24Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate24Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate24Retries.setDescription('Tx retries at rate 24Mbps')
wdsStatsTxRate36Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate36Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate36Bytes.setDescription('Bytes transmitted at rate 36Mbps')
wdsStatsTxRate36Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate36Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate36Packets.setDescription('Packets transmitted at rate 36Mbps')
wdsStatsTxRate36Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate36Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate36Errors.setDescription('Tx errors at rate 36Mbps')
wdsStatsTxRate36Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate36Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate36Retries.setDescription('Tx retries at rate 36Mbps')
wdsStatsTxRate48Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate48Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate48Bytes.setDescription('Bytes transmitted at rate 48Mbps')
wdsStatsTxRate48Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate48Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate48Packets.setDescription('Packets transmitted at rate 48Mbps')
wdsStatsTxRate48Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate48Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate48Errors.setDescription('Tx errors at rate 48Mbps')
wdsStatsTxRate48Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate48Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate48Retries.setDescription('Tx retries at rate 48Mbps')
wdsStatsTxRate54Bytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate54Bytes.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate54Bytes.setDescription('Bytes transmitted at rate 54Mbps')
wdsStatsTxRate54Packets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate54Packets.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate54Packets.setDescription('Packets transmitted at rate 54Mbps')
wdsStatsTxRate54Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate54Errors.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate54Errors.setDescription('Tx errors at rate 54Mbps')
wdsStatsTxRate54Retries = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 5, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wdsStatsTxRate54Retries.setStatus('current')
if mibBuilder.loadTexts: wdsStatsTxRate54Retries.setDescription('Tx retries at rate 54Mbps')
spectrumAnalysisTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6), )
if mibBuilder.loadTexts: spectrumAnalysisTable.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisTable.setDescription('Spectrum analysis information table')
spectrumAnalysisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "spectrumAnalysisIndex"))
if mibBuilder.loadTexts: spectrumAnalysisEntry.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisEntry.setDescription('Table entry for spectrum analysis information')
spectrumAnalysisIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: spectrumAnalysisIndex.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisIndex.setDescription('Spectrum analysis information index')
spectrumAnalysisChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisChannel.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisChannel.setDescription('Channel number')
spectrumAnalysisPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisPackets.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisPackets.setDescription('Packets per second')
spectrumAnalysisBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisBytes.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisBytes.setDescription('Bytes per second')
spectrumAnalysisErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisErrorRate.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisErrorRate.setDescription('Error rate (in percent)')
spectrumAnalysisAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisAverageDataRate.setDescription('Average data rate (in Mbps)')
spectrumAnalysisAverageRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisAverageRSSI.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisAverageRSSI.setDescription('Average RSSI')
spectrumAnalysisSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisSignalToNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisSignalToNoiseRatio.setDescription('Signal to noise ratio')
spectrumAnalysisNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisNoiseFloor.setDescription('Noise floor')
spectrumAnalysisDot11Busy = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisDot11Busy.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisDot11Busy.setDescription('802.11 medium busy (in percent)')
spectrumAnalysisNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spectrumAnalysisNoise.setStatus('current')
if mibBuilder.loadTexts: spectrumAnalysisNoise.setDescription('Noise (in percent)')
realtimeMonitorTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7), )
if mibBuilder.loadTexts: realtimeMonitorTable.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorTable.setDescription('Real time IAP information table')
realtimeMonitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1), ).setIndexNames((0, "XIRRUS-MIB", "realtimeMonitorIndex"))
if mibBuilder.loadTexts: realtimeMonitorEntry.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorEntry.setDescription('Table entry for real time IAP information')
realtimeMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: realtimeMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorIndex.setDescription('Real time IAP information index')
realtimeMonitorIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorIfaceName.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorIfaceName.setDescription('Interface name')
realtimeMonitorChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorChannel.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorChannel.setDescription('Channel number')
realtimeMonitorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorPackets.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorPackets.setDescription('Packets per second')
realtimeMonitorBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorBytes.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorBytes.setDescription('Bytes per second')
realtimeMonitorErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorErrorRate.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorErrorRate.setDescription('Error rate (in percent)')
realtimeMonitorAverageDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorAverageDataRate.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorAverageDataRate.setDescription('Average data rate (in Mbps)')
realtimeMonitorAverageRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorAverageRSSI.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorAverageRSSI.setDescription('Average RSSI')
realtimeMonitorSignalToNoiseRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorSignalToNoiseRatio.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorSignalToNoiseRatio.setDescription('Signal to noise ratio')
realtimeMonitorNoiseFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorNoiseFloor.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorNoiseFloor.setDescription('Noise floor')
realtimeMonitorDot11Busy = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorDot11Busy.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorDot11Busy.setDescription('802.11 medium busy (in percent)')
realtimeMonitorNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 7, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: realtimeMonitorNoise.setStatus('current')
if mibBuilder.loadTexts: realtimeMonitorNoise.setDescription('Noise (in percent)')
stationAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8), )
if mibBuilder.loadTexts: stationAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTable.setDescription('Table of station application statistics')
stationAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationAppStatsIndex"))
if mibBuilder.loadTexts: stationAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsEntry.setDescription('Table entry for station application statistics')
stationAppStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 1), Integer32())
if mibBuilder.loadTexts: stationAppStatsIndex.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsIndex.setDescription('Station application statistics index')
stationAppStatsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsMACAddress.setDescription('MAC address of the station')
stationAppStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsGuid.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsGuid.setDescription('Global Unique ID of the application')
stationAppStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTxPackets.setDescription('Packets transmitted')
stationAppStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsRxPackets.setDescription('Packets received')
stationAppStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTxBytes.setDescription('Bytes transmitted')
stationAppStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsRxBytes.setDescription('Bytes received')
stationAppStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 8, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTimePeriod.setDescription('Time period over which application stats were collected')
stationAppCatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9), )
if mibBuilder.loadTexts: stationAppCatStatsTable.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsTable.setDescription('Table of station application category statistics')
stationAppCatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1), ).setIndexNames((0, "XIRRUS-MIB", "stationAppCatStatsIndex"))
if mibBuilder.loadTexts: stationAppCatStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsEntry.setDescription('Table entry for station application category statistics')
stationAppCatStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: stationAppCatStatsIndex.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsIndex.setDescription('Station application category statistics index')
stationAppCatStatsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsMACAddress.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsMACAddress.setDescription('MAC address of the station')
stationAppCatStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsGuid.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsGuid.setDescription('Global Unique ID of the application category')
stationAppCatStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsTxPackets.setDescription('Packets transmitted')
stationAppCatStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsRxPackets.setDescription('Packets received')
stationAppCatStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsTxBytes.setDescription('Bytes transmitted')
stationAppCatStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsRxBytes.setDescription('Bytes received')
stationAppCatStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 9, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stationAppCatStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: stationAppCatStatsTimePeriod.setDescription('Time period over which application category stats were collected')
vlanMgmtAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10), )
if mibBuilder.loadTexts: vlanMgmtAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsTable.setDescription('Table of VLAN management application statistics')
vlanMgmtAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanMgmtAppStatsIndex"))
if mibBuilder.loadTexts: vlanMgmtAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsEntry.setDescription('Table entry for VLAN management application statistics')
vlanMgmtAppStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanMgmtAppStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsIndex.setDescription('VLAN management application statistics index')
vlanMgmtAppStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsVlan.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsVlan.setDescription('VLAN')
vlanMgmtAppStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsGuid.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsGuid.setDescription('Global Unique ID of the application')
vlanMgmtAppStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsTxPackets.setDescription('Packets transmitted')
vlanMgmtAppStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsRxPackets.setDescription('Packets received')
vlanMgmtAppStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsTxBytes.setDescription('Bytes transmitted')
vlanMgmtAppStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsRxBytes.setDescription('Bytes received')
vlanMgmtAppStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 10, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsTimePeriod.setDescription('Time period over which management application stats were collected')
vlanMgmtAppCatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11), )
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTable.setDescription('Table of VLAN management application category statistics')
vlanMgmtAppCatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanMgmtAppCatStatsIndex"))
if mibBuilder.loadTexts: vlanMgmtAppCatStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsEntry.setDescription('Table entry for VLAN management application category statistics')
vlanMgmtAppCatStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanMgmtAppCatStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsIndex.setDescription('VLAN management application category statistics index')
vlanMgmtAppCatStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsVlan.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsVlan.setDescription('VLAN')
vlanMgmtAppCatStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsGuid.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsGuid.setDescription('Global Unique ID of the application category')
vlanMgmtAppCatStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTxPackets.setDescription('Packets transmitted')
vlanMgmtAppCatStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsRxPackets.setDescription('Packets received')
vlanMgmtAppCatStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTxBytes.setDescription('Bytes transmitted')
vlanMgmtAppCatStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsRxBytes.setDescription('Bytes received')
vlanMgmtAppCatStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 11, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppCatStatsTimePeriod.setDescription('Time period over which management application category stats were collected')
vlanStaAppStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12), )
if mibBuilder.loadTexts: vlanStaAppStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsTable.setDescription('Table of VLAN station application statistics')
vlanStaAppStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanStaAppStatsIndex"))
if mibBuilder.loadTexts: vlanStaAppStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsEntry.setDescription('Table entry for VLAN station application statistics')
vlanStaAppStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanStaAppStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsIndex.setDescription('VLAN station application statistics index')
vlanStaAppStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsVlan.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsVlan.setDescription('VLAN')
vlanStaAppStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsGuid.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsGuid.setDescription('Global Unique ID of the application')
vlanStaAppStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsTxPackets.setDescription('Packets transmitted')
vlanStaAppStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsRxPackets.setDescription('Packets received')
vlanStaAppStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsTxBytes.setDescription('Bytes transmitted')
vlanStaAppStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsRxBytes.setDescription('Bytes received')
vlanStaAppStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 12, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsTimePeriod.setDescription('Time period over which station application stats were collected')
vlanStaAppCatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13), )
if mibBuilder.loadTexts: vlanStaAppCatStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsTable.setDescription('Table of VLAN station application category statistics')
vlanStaAppCatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanStaAppCatStatsIndex"))
if mibBuilder.loadTexts: vlanStaAppCatStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsEntry.setDescription('Table entry for VLAN station application category statistics')
vlanStaAppCatStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanStaAppCatStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsIndex.setDescription('VLAN station application category statistics index')
vlanStaAppCatStatsVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsVlan.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsVlan.setDescription('VLAN')
vlanStaAppCatStatsGuid = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsGuid.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsGuid.setDescription('Global Unique ID of the application category')
vlanStaAppCatStatsTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsTxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsTxPackets.setDescription('Packets transmitted')
vlanStaAppCatStatsRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsRxPackets.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsRxPackets.setDescription('Packets received')
vlanStaAppCatStatsTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsTxBytes.setDescription('Bytes transmitted')
vlanStaAppCatStatsRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsRxBytes.setDescription('Bytes received')
vlanStaAppCatStatsTimePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanStaAppCatStatsTimePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppCatStatsTimePeriod.setDescription('Time period over which station application category stats were collected')
stationAppStatsTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 14), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAppStatsTablePeriod.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTablePeriod.setDescription('Specify period for station application statistics table entries (in seconds, 0 - all table entries)')
stationAppStatsTableClear = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stationAppStatsTableClear.setStatus('current')
if mibBuilder.loadTexts: stationAppStatsTableClear.setDescription('Clear the application statistics table (zero all counts)')
vlanStaAppStatsTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 16), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanStaAppStatsTablePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanStaAppStatsTablePeriod.setDescription('Specify period for VLAN station application statistics table entries (in seconds, 0 - all table entries)')
vlanMgmtAppStatsTablePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 24, 17), Counter32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMgmtAppStatsTablePeriod.setStatus('current')
if mibBuilder.loadTexts: vlanMgmtAppStatsTablePeriod.setDescription('Specify period for management station application statistics table entries (in seconds, 0 - all table entries)')
syslogEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEnable.setStatus('current')
if mibBuilder.loadTexts: syslogEnable.setDescription('Enable or disable syslog feature')
syslogLevel = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevel.setStatus('current')
if mibBuilder.loadTexts: syslogLevel.setDescription('Local syslog level')
syslogServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServer.setStatus('current')
if mibBuilder.loadTexts: syslogServer.setDescription('Primary syslog server IP address or host name')
syslogConsole = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogConsole.setStatus('current')
if mibBuilder.loadTexts: syslogConsole.setDescription('Enable or disable displaying log messages on the console')
syslogSize = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSize.setStatus('current')
if mibBuilder.loadTexts: syslogSize.setDescription('Local log file size')
syslogTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6), )
if mibBuilder.loadTexts: syslogTable.setStatus('current')
if mibBuilder.loadTexts: syslogTable.setDescription('Event log table')
syslogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "syslogIndex"))
if mibBuilder.loadTexts: syslogEntry.setStatus('current')
if mibBuilder.loadTexts: syslogEntry.setDescription('Syslog table entry')
syslogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: syslogIndex.setStatus('current')
if mibBuilder.loadTexts: syslogIndex.setDescription('Syslog index')
syslogTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogTimestamp.setStatus('current')
if mibBuilder.loadTexts: syslogTimestamp.setDescription('Syslog timestamp')
syslogPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogPriority.setStatus('current')
if mibBuilder.loadTexts: syslogPriority.setDescription('Syslog priority')
syslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogMessage.setStatus('current')
if mibBuilder.loadTexts: syslogMessage.setDescription('Syslog message')
syslogSecServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecServer.setStatus('current')
if mibBuilder.loadTexts: syslogSecServer.setDescription('Secondary syslog server IP address or host name')
syslogLevelConsole = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevelConsole.setStatus('current')
if mibBuilder.loadTexts: syslogLevelConsole.setDescription('Console syslog level')
syslogLevelPriServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevelPriServer.setStatus('current')
if mibBuilder.loadTexts: syslogLevelPriServer.setDescription('Primary server syslog level')
syslogLevelSecServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevelSecServer.setStatus('current')
if mibBuilder.loadTexts: syslogLevelSecServer.setDescription('Secondary server syslog level')
syslogTerServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTerServer.setStatus('current')
if mibBuilder.loadTexts: syslogTerServer.setDescription('Tertiary syslog server IP address or host name')
syslogLevelTerServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogLevelTerServer.setStatus('current')
if mibBuilder.loadTexts: syslogLevelTerServer.setDescription('Tertiary server syslog level')
syslogEmailServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailServer.setStatus('current')
if mibBuilder.loadTexts: syslogEmailServer.setDescription('Email syslog SMTP server IP address or host name')
syslogEmailLevel = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailLevel.setStatus('current')
if mibBuilder.loadTexts: syslogEmailLevel.setDescription('Email syslog level')
syslogEmailFromAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailFromAddress.setStatus('current')
if mibBuilder.loadTexts: syslogEmailFromAddress.setDescription('Email Syslog from address')
syslogEmailToAddress = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailToAddress.setStatus('current')
if mibBuilder.loadTexts: syslogEmailToAddress.setDescription('Email Syslog recipient addresses')
syslogEmailUsername = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailUsername.setStatus('current')
if mibBuilder.loadTexts: syslogEmailUsername.setDescription('Email Syslog SMTP server username')
syslogEmailPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailPassword.setStatus('current')
if mibBuilder.loadTexts: syslogEmailPassword.setDescription('Email Syslog SMTP server user password')
syslogEmailPasswordEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailPasswordEnc.setStatus('current')
if mibBuilder.loadTexts: syslogEmailPasswordEnc.setDescription('Email Syslog SMTP server user password (encrypted)')
syslogEmailPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogEmailPort.setStatus('current')
if mibBuilder.loadTexts: syslogEmailPort.setDescription('Email Syslog SMTP server port')
syslogPriServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogPriServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogPriServerPort.setDescription('Primary syslog server port')
syslogSecServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogSecServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogSecServerPort.setDescription('Secondary syslog server port')
syslogTerServerPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTerServerPort.setStatus('current')
if mibBuilder.loadTexts: syslogTerServerPort.setDescription('Tertiary syslog server port')
syslogStationFormat = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("standard", 0), ("key-value", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStationFormat.setStatus('current')
if mibBuilder.loadTexts: syslogStationFormat.setDescription('Station information format in syslog messages')
syslogTimeFormat = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("rfc3164", 0), ("rfc3339", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogTimeFormat.setStatus('current')
if mibBuilder.loadTexts: syslogTimeFormat.setDescription('Time format in syslog messages')
syslogStationUrlLog = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 26, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogStationUrlLog.setStatus('current')
if mibBuilder.loadTexts: syslogStationUrlLog.setDescription('Enable or disable station URL logging')
systemHostname = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHostname.setStatus('current')
if mibBuilder.loadTexts: systemHostname.setDescription('Array hostname')
systemLocation = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLocation.setStatus('current')
if mibBuilder.loadTexts: systemLocation.setDescription('Array location')
systemContactName = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactName.setStatus('current')
if mibBuilder.loadTexts: systemContactName.setDescription('Contact name')
systemContactEmail = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactEmail.setStatus('current')
if mibBuilder.loadTexts: systemContactEmail.setDescription('Contact email address')
systemContactPhone = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemContactPhone.setStatus('current')
if mibBuilder.loadTexts: systemContactPhone.setDescription('Contact telephone number')
systemTelnetEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTelnetEnable.setStatus('current')
if mibBuilder.loadTexts: systemTelnetEnable.setDescription('Enable/disable telnet')
systemTelnetTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTelnetTimeout.setStatus('current')
if mibBuilder.loadTexts: systemTelnetTimeout.setDescription('Telnet timeout')
systemSshEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSshEnable.setStatus('current')
if mibBuilder.loadTexts: systemSshEnable.setDescription('Enable/disable ssh')
systemSshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSshTimeout.setStatus('current')
if mibBuilder.loadTexts: systemSshTimeout.setDescription('Ssh timeout')
systemHttpsEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHttpsEnable.setStatus('current')
if mibBuilder.loadTexts: systemHttpsEnable.setDescription('Enable/disable https')
systemHttpsTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHttpsTimeout.setStatus('current')
if mibBuilder.loadTexts: systemHttpsTimeout.setDescription('Https timeout')
systemReboot = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reboot", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReboot.setStatus('current')
if mibBuilder.loadTexts: systemReboot.setDescription('Reboot array')
systemReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemReset.setStatus('current')
if mibBuilder.loadTexts: systemReset.setDescription('Reset all settings to factory defaults and reboot')
systemSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("save", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSaveCfg.setStatus('current')
if mibBuilder.loadTexts: systemSaveCfg.setDescription('Save running configuration to flash')
systemUptime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemUptime.setStatus('current')
if mibBuilder.loadTexts: systemUptime.setDescription('Display time since last boot')
systemArrayInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16))
hardwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1))
softwareConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2))
componentTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1), )
if mibBuilder.loadTexts: componentTable.setStatus('current')
if mibBuilder.loadTexts: componentTable.setDescription('Hardware component info table')
componentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "componentIndex"))
if mibBuilder.loadTexts: componentEntry.setStatus('current')
if mibBuilder.loadTexts: componentEntry.setDescription('Component table entry')
componentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: componentIndex.setStatus('current')
if mibBuilder.loadTexts: componentIndex.setDescription('Component table index')
componentName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentName.setStatus('current')
if mibBuilder.loadTexts: componentName.setDescription('Component name')
componentPart = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentPart.setStatus('current')
if mibBuilder.loadTexts: componentPart.setDescription('Component part number')
componentSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentSerial.setStatus('current')
if mibBuilder.loadTexts: componentSerial.setDescription('Component serial number')
componentDate = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: componentDate.setStatus('current')
if mibBuilder.loadTexts: componentDate.setDescription('Component date')
fpgaTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2), )
if mibBuilder.loadTexts: fpgaTable.setStatus('current')
if mibBuilder.loadTexts: fpgaTable.setDescription('FPGA info table')
fpgaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "fpgaIndex"))
if mibBuilder.loadTexts: fpgaEntry.setStatus('current')
if mibBuilder.loadTexts: fpgaEntry.setDescription('FPGA table entry')
fpgaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: fpgaIndex.setStatus('current')
if mibBuilder.loadTexts: fpgaIndex.setDescription('FPGA table index')
fpgaName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaName.setStatus('current')
if mibBuilder.loadTexts: fpgaName.setDescription('FPGA name')
fpgaBootVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaBootVersion.setStatus('current')
if mibBuilder.loadTexts: fpgaBootVersion.setDescription('FPGA boot version')
fpgaSWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fpgaSWVersion.setStatus('current')
if mibBuilder.loadTexts: fpgaSWVersion.setDescription('FPGA software version')
interfaceMACAddressTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 3), )
if mibBuilder.loadTexts: interfaceMACAddressTable.setStatus('current')
if mibBuilder.loadTexts: interfaceMACAddressTable.setDescription('Interface MAC address table')
interfaceMACAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 3, 1), ).setIndexNames((0, "XIRRUS-MIB", "interfaceMACAddressIndex"))
if mibBuilder.loadTexts: interfaceMACAddressEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceMACAddressEntry.setDescription('Interface MAC address table entry')
interfaceMACAddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: interfaceMACAddressIndex.setStatus('current')
if mibBuilder.loadTexts: interfaceMACAddressIndex.setDescription('Interface MAC address table index')
interfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceName.setStatus('current')
if mibBuilder.loadTexts: interfaceName.setDescription('Interface name')
interfaceMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceMACAddress.setStatus('current')
if mibBuilder.loadTexts: interfaceMACAddress.setDescription('Interface MAC address')
arrayModel = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arrayModel.setStatus('current')
if mibBuilder.loadTexts: arrayModel.setDescription('Array model')
bootLoaderVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bootLoaderVersion.setStatus('current')
if mibBuilder.loadTexts: bootLoaderVersion.setDescription('Boot loader version')
iapDriverVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iapDriverVersion.setStatus('current')
if mibBuilder.loadTexts: iapDriverVersion.setDescription('IAP driver version')
softwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: softwareVersion.setStatus('current')
if mibBuilder.loadTexts: softwareVersion.setDescription('Software version')
timeThisBoot = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeThisBoot.setStatus('current')
if mibBuilder.loadTexts: timeThisBoot.setDescription('Time of this boot')
timeLastBoot = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeLastBoot.setStatus('current')
if mibBuilder.loadTexts: timeLastBoot.setDescription('Time of the last boot')
scdFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 16, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scdFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: scdFirmwareVersion.setDescription('SCD firmware version')
systemMIBVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemMIBVersion.setStatus('current')
if mibBuilder.loadTexts: systemMIBVersion.setDescription('MIB version')
systemGroupName = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemGroupName.setStatus('current')
if mibBuilder.loadTexts: systemGroupName.setDescription('Array group name')
systemStandbyEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStandbyEnable.setStatus('current')
if mibBuilder.loadTexts: systemStandbyEnable.setDescription('Enable/disable standby')
systemStandbyTarget = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStandbyTarget.setStatus('current')
if mibBuilder.loadTexts: systemStandbyTarget.setDescription('Target array to monitor for failure')
systemTempTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21), )
if mibBuilder.loadTexts: systemTempTable.setStatus('current')
if mibBuilder.loadTexts: systemTempTable.setDescription('System temperature table')
systemTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21, 1), ).setIndexNames((0, "XIRRUS-MIB", "systemTempIndex"))
if mibBuilder.loadTexts: systemTempEntry.setStatus('current')
if mibBuilder.loadTexts: systemTempEntry.setDescription('System temperature table entry')
systemTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21, 1, 1), Integer32())
if mibBuilder.loadTexts: systemTempIndex.setStatus('current')
if mibBuilder.loadTexts: systemTempIndex.setDescription('System temperature table index')
systemTempComponent = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTempComponent.setStatus('current')
if mibBuilder.loadTexts: systemTempComponent.setDescription('System component name')
systemTempCelsius = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTempCelsius.setStatus('current')
if mibBuilder.loadTexts: systemTempCelsius.setDescription('System component temperature (Celsius)')
systemTempFahrenheit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemTempFahrenheit.setStatus('current')
if mibBuilder.loadTexts: systemTempFahrenheit.setDescription('System component temperature (Fahrenheit)')
systemFipsMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemFipsMode.setStatus('current')
if mibBuilder.loadTexts: systemFipsMode.setDescription('Enable/disable FIPS mode')
systemTelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemTelnetPort.setStatus('current')
if mibBuilder.loadTexts: systemTelnetPort.setDescription('Telnet port')
systemSshPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemSshPort.setStatus('current')
if mibBuilder.loadTexts: systemSshPort.setDescription('Ssh port')
systemHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHttpsPort.setStatus('current')
if mibBuilder.loadTexts: systemHttpsPort.setDescription('Https port')
systemLicenseKey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(23, 23)).setFixedLength(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLicenseKey.setStatus('current')
if mibBuilder.loadTexts: systemLicenseKey.setDescription('Set array software license key')
systemLicenseFeatures = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLicenseFeatures.setStatus('current')
if mibBuilder.loadTexts: systemLicenseFeatures.setDescription('Software license features')
systemRemoteServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteServer.setStatus('current')
if mibBuilder.loadTexts: systemRemoteServer.setDescription('Specify TFTP server for remote software image')
systemRemoteImage = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteImage.setStatus('current')
if mibBuilder.loadTexts: systemRemoteImage.setDescription('Specify a remote array software image')
systemRemoteConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemRemoteConfigFile.setStatus('current')
if mibBuilder.loadTexts: systemRemoteConfigFile.setDescription('Specify a remote array configuration file')
systemHttpsCertificate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reset", 0), ("self", 1), ("xirrus", 2), ("new", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemHttpsCertificate.setStatus('current')
if mibBuilder.loadTexts: systemHttpsCertificate.setDescription('Set HTTPS certificate')
systemPCIAuditMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPCIAuditMode.setStatus('current')
if mibBuilder.loadTexts: systemPCIAuditMode.setDescription('Enable/disable PCI (Payment Card Industry) audit mode')
systemNetworkAssurance = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNetworkAssurance.setStatus('current')
if mibBuilder.loadTexts: systemNetworkAssurance.setDescription('Enable/disable network assurance')
systemLicenseVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLicenseVersion.setStatus('current')
if mibBuilder.loadTexts: systemLicenseVersion.setDescription('Software license version')
systemLicenseExpDate = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLicenseExpDate.setStatus('current')
if mibBuilder.loadTexts: systemLicenseExpDate.setDescription('Software license expiration date')
licenseFeatureTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36), )
if mibBuilder.loadTexts: licenseFeatureTable.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureTable.setDescription('Software license feature list')
licenseFeatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36, 1), ).setIndexNames((0, "XIRRUS-MIB", "licenseFeatureIndex"))
if mibBuilder.loadTexts: licenseFeatureEntry.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureEntry.setDescription('Software license feature table entry')
licenseFeatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: licenseFeatureIndex.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureIndex.setDescription('License feature table index')
licenseFeatureName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureName.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureName.setDescription('License feature name')
licenseFeatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureStatus.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureStatus.setDescription('License feature status')
licenseFeatureDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 36, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licenseFeatureDesc.setStatus('current')
if mibBuilder.loadTexts: licenseFeatureDesc.setDescription('License feature description')
systemRDKMode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemRDKMode.setStatus('current')
if mibBuilder.loadTexts: systemRDKMode.setDescription('Rapid Deployment Kit mode')
systemMaxAuthAttempts = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemMaxAuthAttempts.setStatus('current')
if mibBuilder.loadTexts: systemMaxAuthAttempts.setDescription('Maximum number of authentication (login) attempts (0 means unlimited)')
systemLoginReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemLoginReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: systemLoginReauthPeriod.setDescription('Time between failed CLI login attempts')
systemPreLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 40), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPreLoginBanner.setStatus('current')
if mibBuilder.loadTexts: systemPreLoginBanner.setDescription('Set pre-login banner message')
systemPostLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 41), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemPostLoginBanner.setStatus('current')
if mibBuilder.loadTexts: systemPostLoginBanner.setDescription('Set post-login banner message')
systemResetReason = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResetReason.setStatus('current')
if mibBuilder.loadTexts: systemResetReason.setDescription('Reason for last reboot')
systemResetCode = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reboot-req", 0), ("power-on", 1), ("power-brown-out", 2), ("scd-restart", 3), ("gpc", 4), ("unavailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemResetCode.setStatus('current')
if mibBuilder.loadTexts: systemResetCode.setDescription('Code for last reboot')
systemNetworkAssurancePeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNetworkAssurancePeriod.setStatus('current')
if mibBuilder.loadTexts: systemNetworkAssurancePeriod.setDescription('Set network assurance period (in seconds)')
systemLicenseProductType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unknown", 0), ("array2x3", 1), ("array2x2", 2), ("array3x3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLicenseProductType.setStatus('current')
if mibBuilder.loadTexts: systemLicenseProductType.setDescription('Software license product type')
systemLicenseMaxNumIAPs = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemLicenseMaxNumIAPs.setStatus('current')
if mibBuilder.loadTexts: systemLicenseMaxNumIAPs.setDescription('Software license maximum number of IAPs')
systemCrashInfo = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 47), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCrashInfo.setStatus('current')
if mibBuilder.loadTexts: systemCrashInfo.setDescription('System crash information')
systemCompassHeading = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemCompassHeading.setStatus('current')
if mibBuilder.loadTexts: systemCompassHeading.setDescription('System compass heading (in degrees, -1 - unknown)')
systemXirconEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("enable-aos-only", 1), ("enable-boot-only", 2), ("enable-aos-boot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemXirconEnable.setStatus('current')
if mibBuilder.loadTexts: systemXirconEnable.setDescription('Enable/disable xircon access')
systemXirconTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemXirconTimeout.setStatus('current')
if mibBuilder.loadTexts: systemXirconTimeout.setDescription('Xircon inactivity timeout')
systemXirconPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1025, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemXirconPort.setStatus('current')
if mibBuilder.loadTexts: systemXirconPort.setDescription('Xircon port')
systemStpEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStpEnable.setStatus('current')
if mibBuilder.loadTexts: systemStpEnable.setDescription('Enable/disable Spanning Tree Protocol')
systemFanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemFanSpeed.setStatus('current')
if mibBuilder.loadTexts: systemFanSpeed.setDescription('System fan speed (RPM)')
systemXmsControl = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemXmsControl.setStatus('current')
if mibBuilder.loadTexts: systemXmsControl.setDescription('Allow all user management or restrict to console and XMS only')
systemActivation = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemActivation.setStatus('current')
if mibBuilder.loadTexts: systemActivation.setDescription('Enable/disable array activation')
systemActivationInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemActivationInterval.setStatus('current')
if mibBuilder.loadTexts: systemActivationInterval.setDescription('Array activation polling interval (minutes)')
systemStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 28, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemStatusLed.setStatus('current')
if mibBuilder.loadTexts: systemStatusLed.setDescription('Enable/disable Status LED')
tunnelTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1), )
if mibBuilder.loadTexts: tunnelTable.setStatus('current')
if mibBuilder.loadTexts: tunnelTable.setDescription('Tunnel table')
tunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "tunnelIndex"))
if mibBuilder.loadTexts: tunnelEntry.setStatus('current')
if mibBuilder.loadTexts: tunnelEntry.setDescription('Tunnel table entry')
tunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: tunnelIndex.setStatus('current')
if mibBuilder.loadTexts: tunnelIndex.setDescription('Tunnel table index')
tunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelName.setStatus('current')
if mibBuilder.loadTexts: tunnelName.setDescription('Tunnel name')
tunnelEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelEnable.setStatus('current')
if mibBuilder.loadTexts: tunnelEnable.setDescription('Enable or disable tunnel')
tunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("gre", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelType.setStatus('current')
if mibBuilder.loadTexts: tunnelType.setDescription('Tunnel type')
tunnelLocalEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelLocalEndpoint.setStatus('current')
if mibBuilder.loadTexts: tunnelLocalEndpoint.setDescription('Tunnel local endpoint')
tunnelPriRemoteEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelPriRemoteEndpoint.setStatus('current')
if mibBuilder.loadTexts: tunnelPriRemoteEndpoint.setDescription('Tunnel primary remote endpoint')
tunnelSecRemoteEndpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelSecRemoteEndpoint.setStatus('current')
if mibBuilder.loadTexts: tunnelSecRemoteEndpoint.setDescription('Tunnel secondary remote endpoint')
tunnelMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(68, 1732))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelMTU.setStatus('current')
if mibBuilder.loadTexts: tunnelMTU.setDescription('Tunnel MTU')
tunnelSsids = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelSsids.setStatus('current')
if mibBuilder.loadTexts: tunnelSsids.setDescription('Define SSIDs for which data traffic should be bridged via this tunnel')
tunnelDhcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelDhcpOption.setStatus('current')
if mibBuilder.loadTexts: tunnelDhcpOption.setDescription('Enable or disable insertion of relay agent information option in station DHCP requests')
tunnelFailoverInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelFailoverInterval.setStatus('current')
if mibBuilder.loadTexts: tunnelFailoverInterval.setDescription('Ping interval for remote endpoint failover mechanism')
tunnelFailoverNumFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 1000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelFailoverNumFailures.setStatus('current')
if mibBuilder.loadTexts: tunnelFailoverNumFailures.setDescription('Number of ping failures for remote endpoint failover mechanism')
tunnelRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelRowStatus.setStatus('current')
if mibBuilder.loadTexts: tunnelRowStatus.setDescription('Status of the tunnel row entry')
tunnelVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 320))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tunnelVlanList.setStatus('current')
if mibBuilder.loadTexts: tunnelVlanList.setDescription('Define VLANs for which data traffic should be bridged via this tunnel')
tunnelTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 29, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tunnelTableReset.setStatus('current')
if mibBuilder.loadTexts: tunnelTableReset.setDescription('Delete all tunnels')
vlanTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanTableReset.setStatus('current')
if mibBuilder.loadTexts: vlanTableReset.setDescription('Reset VLAN table (clear all entries)')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('VLAN table for the Array')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('VLAN table entry')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('VLAN table index')
vlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanName.setStatus('current')
if mibBuilder.loadTexts: vlanName.setDescription('VLAN name')
vlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanNumber.setStatus('current')
if mibBuilder.loadTexts: vlanNumber.setDescription('VLAN number')
vlanMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanMgmt.setStatus('current')
if mibBuilder.loadTexts: vlanMgmt.setDescription('Enable/disable management via VLAN')
vlanDHCPBind = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanDHCPBind.setStatus('current')
if mibBuilder.loadTexts: vlanDHCPBind.setDescription('Use DHCP to get IP settings for VLAN')
vlanIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanIPAddress.setStatus('current')
if mibBuilder.loadTexts: vlanIPAddress.setDescription('VLAN IP address')
vlanIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanIPMask.setStatus('current')
if mibBuilder.loadTexts: vlanIPMask.setDescription('VLAN IP Mask')
vlanGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanGateway.setStatus('current')
if mibBuilder.loadTexts: vlanGateway.setDescription('VLAN gateway IP address')
vlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanRowStatus.setDescription('Status of the VLAN row entry')
vlanTunnelServer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTunnelServer.setStatus('current')
if mibBuilder.loadTexts: vlanTunnelServer.setDescription('VLAN tunnel server IP address or host name')
vlanTunnelSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTunnelSecret.setStatus('current')
if mibBuilder.loadTexts: vlanTunnelSecret.setDescription('VLAN tunnel server password')
vlanTunnelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTunnelPort.setStatus('current')
if mibBuilder.loadTexts: vlanTunnelPort.setDescription('VLAN tunnel server port number')
vlanTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-connected", 0), ("connected", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTunnelState.setStatus('current')
if mibBuilder.loadTexts: vlanTunnelState.setDescription('VLAN tunnel state')
vlanTunnelSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanTunnelSecretForm.setStatus('current')
if mibBuilder.loadTexts: vlanTunnelSecretForm.setDescription('VLAN tunnel server password form')
vlanFastRoaming = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanFastRoaming.setStatus('current')
if mibBuilder.loadTexts: vlanFastRoaming.setDescription('Enable/disable fast roaming (at layer 3) for VLAN')
spanningTreeTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3), )
if mibBuilder.loadTexts: spanningTreeTable.setStatus('current')
if mibBuilder.loadTexts: spanningTreeTable.setDescription('Spanning tree state table')
spanningTreeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1), ).setIndexNames((0, "XIRRUS-MIB", "spanningTreeIndex"))
if mibBuilder.loadTexts: spanningTreeEntry.setStatus('current')
if mibBuilder.loadTexts: spanningTreeEntry.setDescription('Spanning tree table entry')
spanningTreeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: spanningTreeIndex.setStatus('current')
if mibBuilder.loadTexts: spanningTreeIndex.setDescription('Spanning tree table index')
spanningTreeVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeVlanName.setStatus('current')
if mibBuilder.loadTexts: spanningTreeVlanName.setDescription('VLAN name')
spanningTreeVlanNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeVlanNumber.setStatus('current')
if mibBuilder.loadTexts: spanningTreeVlanNumber.setDescription('VLAN number')
spanningTreeGigLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeGigLinkState.setStatus('current')
if mibBuilder.loadTexts: spanningTreeGigLinkState.setDescription('Gigabit link state')
spanningTreeWDSClientLink1State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSClientLink1State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSClientLink1State.setDescription('WDS client link 1 state')
spanningTreeWDSClientLink2State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSClientLink2State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSClientLink2State.setDescription('WDS client link 2 state')
spanningTreeWDSClientLink3State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSClientLink3State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSClientLink3State.setDescription('WDS client link 3 state')
spanningTreeWDSClientLink4State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSClientLink4State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSClientLink4State.setDescription('WDS client link 4 state')
spanningTreeWDSHostLink1State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSHostLink1State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSHostLink1State.setDescription('WDS host link 1 state')
spanningTreeWDSHostLink2State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSHostLink2State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSHostLink2State.setDescription('WDS host link 2 state')
spanningTreeWDSHostLink3State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSHostLink3State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSHostLink3State.setDescription('WDS host link 3 state')
spanningTreeWDSHostLink4State = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 3, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spanningTreeWDSHostLink4State.setStatus('current')
if mibBuilder.loadTexts: spanningTreeWDSHostLink4State.setDescription('WDS host link 4 state')
vlanDefaultNumber = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanDefaultNumber.setStatus('current')
if mibBuilder.loadTexts: vlanDefaultNumber.setDescription('VLAN number(1-4095) to assign as default, 0 - no VLAN as default')
vlanNativeNumber = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanNativeNumber.setStatus('current')
if mibBuilder.loadTexts: vlanNativeNumber.setDescription('VLAN number(1-4095) to assign as native, 0 - no VLAN as native')
vlanUndefinedTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 6), )
if mibBuilder.loadTexts: vlanUndefinedTable.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedTable.setDescription('Table of undefined VLANs detected')
vlanUndefinedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 6, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanUndefinedIndex"))
if mibBuilder.loadTexts: vlanUndefinedEntry.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedEntry.setDescription('Undefined VLAN table entry')
vlanUndefinedIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanUndefinedIndex.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedIndex.setDescription('Undefined VLAN table index')
vlanUndefinedNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanUndefinedNumber.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedNumber.setDescription('Undefined VLAN number')
vlanUndefinedInfo = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanUndefinedInfo.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedInfo.setDescription('Undefined VLANs detected')
vlanUndefinedClear = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanUndefinedClear.setStatus('current')
if mibBuilder.loadTexts: vlanUndefinedClear.setDescription('Clear undefined VLAN information')
vlanPoolTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9), )
if mibBuilder.loadTexts: vlanPoolTable.setStatus('current')
if mibBuilder.loadTexts: vlanPoolTable.setDescription('VLAN pool table for the Array')
vlanPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9, 1), ).setIndexNames((0, "XIRRUS-MIB", "vlanPoolIndex"))
if mibBuilder.loadTexts: vlanPoolEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPoolEntry.setDescription('VLAN pool table entry')
vlanPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: vlanPoolIndex.setStatus('current')
if mibBuilder.loadTexts: vlanPoolIndex.setDescription('VLAN pool table index')
vlanPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanPoolName.setStatus('current')
if mibBuilder.loadTexts: vlanPoolName.setDescription('VLAN pool name')
vlanPoolListMember = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanPoolListMember.setStatus('current')
if mibBuilder.loadTexts: vlanPoolListMember.setDescription('VLAN pool list member')
vlanPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 9, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: vlanPoolRowStatus.setDescription('Status of the VLAN pool row entry')
vlanPoolTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 30, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPoolTableReset.setStatus('current')
if mibBuilder.loadTexts: vlanPoolTableReset.setDescription('Reset VLAN pool table (clear all entries)')
clusterArrayTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1), )
if mibBuilder.loadTexts: clusterArrayTable.setStatus('current')
if mibBuilder.loadTexts: clusterArrayTable.setDescription('Table of cluster arrays')
clusterArrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "clusterArrayIndex"))
if mibBuilder.loadTexts: clusterArrayEntry.setStatus('current')
if mibBuilder.loadTexts: clusterArrayEntry.setDescription('Cluster array table entry')
clusterArrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: clusterArrayIndex.setStatus('current')
if mibBuilder.loadTexts: clusterArrayIndex.setDescription('Cluster array table index')
clusterArrayHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayHostname.setStatus('current')
if mibBuilder.loadTexts: clusterArrayHostname.setDescription('Hostname or IP address of the cluster array')
clusterArrayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayIPAddress.setStatus('current')
if mibBuilder.loadTexts: clusterArrayIPAddress.setDescription('IP address of the cluster array')
clusterArrayUsername = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayUsername.setStatus('current')
if mibBuilder.loadTexts: clusterArrayUsername.setDescription('Username for cluster array login')
clusterArrayPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayPassword.setStatus('current')
if mibBuilder.loadTexts: clusterArrayPassword.setDescription('Password for cluster array login')
clusterArrayPasswordForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayPasswordForm.setStatus('current')
if mibBuilder.loadTexts: clusterArrayPasswordForm.setDescription('Password form')
clusterArrayCluster = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayCluster.setStatus('current')
if mibBuilder.loadTexts: clusterArrayCluster.setDescription('Name of the array parent cluster')
clusterArrayRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusterArrayRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusterArrayRowStatus.setDescription('Status of the cluster array row entry')
clusterArrayTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 31, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusterArrayTableReset.setStatus('current')
if mibBuilder.loadTexts: clusterArrayTableReset.setDescription('Reset cluster array table (clear all entries)')
envCtrlTemperature = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlTemperature.setStatus('current')
if mibBuilder.loadTexts: envCtrlTemperature.setDescription('Outdoor enclosure environmental controller temperature (Celsius)')
envCtrlHumidity = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlHumidity.setStatus('current')
if mibBuilder.loadTexts: envCtrlHumidity.setDescription('Outdoor enclosure environmental controller humidity (percent)')
envCtrlCoolRPM1 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlCoolRPM1.setStatus('current')
if mibBuilder.loadTexts: envCtrlCoolRPM1.setDescription('Outdoor enclosure environmental controller cooling fan 1 RPM')
envCtrlCoolRPM2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlCoolRPM2.setStatus('current')
if mibBuilder.loadTexts: envCtrlCoolRPM2.setDescription('Outdoor enclosure environmental controller cooling fan 2 RPM')
envCtrlCoolRPM3 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlCoolRPM3.setStatus('current')
if mibBuilder.loadTexts: envCtrlCoolRPM3.setDescription('Outdoor enclosure environmental controller cooling fan 3 RPM')
envCtrlCoolRPM4 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlCoolRPM4.setStatus('current')
if mibBuilder.loadTexts: envCtrlCoolRPM4.setDescription('Outdoor enclosure environmental controller cooling fan 4 RPM')
envCtrlHeatRPM1 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlHeatRPM1.setStatus('current')
if mibBuilder.loadTexts: envCtrlHeatRPM1.setDescription('Outdoor enclosure environmental controller heating fan 1 RPM')
envCtrlHeatRPM2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlHeatRPM2.setStatus('current')
if mibBuilder.loadTexts: envCtrlHeatRPM2.setDescription('Outdoor enclosure environmental controller heating fan 2 RPM')
envCtrlArrayOn = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlArrayOn.setStatus('current')
if mibBuilder.loadTexts: envCtrlArrayOn.setDescription('Outdoor enclosure environmental controller installed')
envCtrlCoolOn = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlCoolOn.setStatus('current')
if mibBuilder.loadTexts: envCtrlCoolOn.setDescription('Outdoor enclosure environmental controller cooling fan on')
envCtrlHeatOn = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlHeatOn.setStatus('current')
if mibBuilder.loadTexts: envCtrlHeatOn.setDescription('Outdoor enclosure environmental controller heating fan on')
envCtrlSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 32, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: envCtrlSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: envCtrlSoftwareVersion.setDescription('Outdoor enclosure environmental controller software version')
locationReportingOn = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 33, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationReportingOn.setStatus('current')
if mibBuilder.loadTexts: locationReportingOn.setDescription('Location server reporting enable/disable')
locationReportingUrl = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 33, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationReportingUrl.setStatus('current')
if mibBuilder.loadTexts: locationReportingUrl.setDescription('Location server URL')
locationReportingKey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 33, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 49))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationReportingKey.setStatus('current')
if mibBuilder.loadTexts: locationReportingKey.setDescription('Location server key')
locationReportingPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 33, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(15, 50000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: locationReportingPeriod.setStatus('current')
if mibBuilder.loadTexts: locationReportingPeriod.setDescription('Location server reporting period')
groupTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1), )
if mibBuilder.loadTexts: groupTable.setStatus('current')
if mibBuilder.loadTexts: groupTable.setDescription('Group table for the array')
groupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "groupIndex"))
if mibBuilder.loadTexts: groupEntry.setStatus('current')
if mibBuilder.loadTexts: groupEntry.setDescription('Group table entry')
groupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: groupIndex.setStatus('current')
if mibBuilder.loadTexts: groupIndex.setDescription('Group table index')
groupName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupName.setStatus('current')
if mibBuilder.loadTexts: groupName.setDescription('Group name')
groupRadiusFilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupRadiusFilterID.setStatus('current')
if mibBuilder.loadTexts: groupRadiusFilterID.setDescription('Radius Filter-ID (Attribute Type 11) mapped to this group')
groupEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupEnable.setStatus('current')
if mibBuilder.loadTexts: groupEnable.setDescription('Enable or disable group')
groupVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupVlan.setStatus('current')
if mibBuilder.loadTexts: groupVlan.setDescription('Group VLAN ID')
groupQOS = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupQOS.setStatus('current')
if mibBuilder.loadTexts: groupQOS.setDescription('Group QoS level')
groupDhcpPool = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDhcpPool.setStatus('current')
if mibBuilder.loadTexts: groupDhcpPool.setDescription('Group DHCP pool')
groupFilterList = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupFilterList.setStatus('current')
if mibBuilder.loadTexts: groupFilterList.setDescription('Group filter list')
groupRoamingLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("layer-2-only", 0), ("layer-2-and-3", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupRoamingLayer.setStatus('current')
if mibBuilder.loadTexts: groupRoamingLayer.setDescription('Fast roaming layer allowed for this group')
groupStationLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3840))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupStationLimit.setStatus('current')
if mibBuilder.loadTexts: groupStationLimit.setDescription('Station limit for group')
groupTrafficLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTrafficLimit.setStatus('current')
if mibBuilder.loadTexts: groupTrafficLimit.setDescription('Traffic limit for group (10 to 1000000 pps, 0 - unlimited)')
groupTrafficLimitSta = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTrafficLimitSta.setStatus('current')
if mibBuilder.loadTexts: groupTrafficLimitSta.setDescription('Traffic limit per station for group (10 to 100000 pps, 0 - unlimited)')
groupTimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTimeOn.setStatus('current')
if mibBuilder.loadTexts: groupTimeOn.setDescription('Set daily time group is active (in minutes, -1 - always)')
groupTimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 1439))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTimeOff.setStatus('current')
if mibBuilder.loadTexts: groupTimeOff.setDescription('Set daily time group is inactive (in minutes, -1 - never)')
groupDaysOnMon = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnMon.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnMon.setDescription('Group is on/off on Monday')
groupDaysOnTue = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnTue.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnTue.setDescription('Group is on/off on Tuesday')
groupDaysOnWed = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnWed.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnWed.setDescription('Group is on/off on Wednesday')
groupDaysOnThu = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnThu.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnThu.setDescription('Group is on/off on Thursday')
groupDaysOnFri = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnFri.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnFri.setDescription('Group is on/off on Friday')
groupDaysOnSat = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnSat.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnSat.setDescription('Group is on/off on Saturday')
groupDaysOnSun = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDaysOnSun.setStatus('current')
if mibBuilder.loadTexts: groupDaysOnSun.setDescription('Group is on/off on Sunday')
groupWprEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprEnable.setStatus('current')
if mibBuilder.loadTexts: groupWprEnable.setDescription('Enable or disable WPR for group')
groupWprSplashEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprSplashEnable.setStatus('current')
if mibBuilder.loadTexts: groupWprSplashEnable.setDescription('Enable or disable splash screen for WPR')
groupWprSplashTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprSplashTimeout.setStatus('current')
if mibBuilder.loadTexts: groupWprSplashTimeout.setDescription('Splash screen timeout (0 - no timeout)')
groupWprLandingPage = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprLandingPage.setStatus('current')
if mibBuilder.loadTexts: groupWprLandingPage.setDescription('Landing page URL for WPR')
groupActive = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: groupActive.setStatus('current')
if mibBuilder.loadTexts: groupActive.setDescription('Flag indicating whether group is currently active')
groupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupRowStatus.setStatus('current')
if mibBuilder.loadTexts: groupRowStatus.setDescription('Status of the group row entry')
groupWprBackground = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupWprBackground.setStatus('current')
if mibBuilder.loadTexts: groupWprBackground.setDescription('Custom background file for WPR')
groupWprLogoImage = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupWprLogoImage.setStatus('current')
if mibBuilder.loadTexts: groupWprLogoImage.setDescription('Custom logo file for WPR')
groupWprHeaderText = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupWprHeaderText.setStatus('current')
if mibBuilder.loadTexts: groupWprHeaderText.setDescription('Custom header text file for WPR')
groupWprFooterText = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupWprFooterText.setStatus('current')
if mibBuilder.loadTexts: groupWprFooterText.setDescription('Custom footer text file for WPR')
groupFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("disable-group", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupFallback.setStatus('current')
if mibBuilder.loadTexts: groupFallback.setDescription('Define network connectivity fallback mode for this group')
groupDeviceID = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupDeviceID.setStatus('current')
if mibBuilder.loadTexts: groupDeviceID.setDescription('Device ID mapped to this group')
groupTrafficLimitKbps = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTrafficLimitKbps.setStatus('current')
if mibBuilder.loadTexts: groupTrafficLimitKbps.setDescription('Traffic limit for group (10 to 4000000 kbps, 0 - unlimited)')
groupTrafficLimitKbpsSta = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 400000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupTrafficLimitKbpsSta.setStatus('current')
if mibBuilder.loadTexts: groupTrafficLimitKbpsSta.setDescription('Traffic limit per station for group (10 to 400000 kbps, 0 - unlimited)')
groupVlanPool = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupVlanPool.setStatus('current')
if mibBuilder.loadTexts: groupVlanPool.setDescription('Group VLAN pool')
groupWprServerType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("external", 0), ("internal", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprServerType.setStatus('current')
if mibBuilder.loadTexts: groupWprServerType.setDescription('Server type for WPR')
groupWprUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprUrl.setStatus('current')
if mibBuilder.loadTexts: groupWprUrl.setDescription('URL for WPR')
groupWprSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprSharedSecret.setStatus('current')
if mibBuilder.loadTexts: groupWprSharedSecret.setDescription('Shared secret for WPR')
groupWprSharedSecretForm = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("clear", 0), ("encrypted", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprSharedSecretForm.setStatus('current')
if mibBuilder.loadTexts: groupWprSharedSecretForm.setDescription('WPR shared secret form')
groupWprScreenType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("splash", 0), ("login", 1), ("none", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprScreenType.setStatus('current')
if mibBuilder.loadTexts: groupWprScreenType.setDescription('Screen type for WPR')
groupWprHttpsEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprHttpsEnable.setStatus('current')
if mibBuilder.loadTexts: groupWprHttpsEnable.setDescription('Enable or disable HTTPS login for WPR')
groupWprAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("chap", 0), ("pap", 1), ("ms-chap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprAuthType.setStatus('current')
if mibBuilder.loadTexts: groupWprAuthType.setDescription('WPR authentication protocol')
groupWprAuthTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10080))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: groupWprAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: groupWprAuthTimeout.setDescription('WPR station authentication timeout in minutes (0 - no timeout)')
groupTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 34, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: groupTableReset.setStatus('current')
if mibBuilder.loadTexts: groupTableReset.setDescription('Reset group table (clear all entries)')
mdmAirWatchApiURL = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiURL.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiURL.setDescription('AirWatch API URL')
mdmAirWatchApiKey = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiKey.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiKey.setDescription('AirWatch API key')
mdmAirWatchApiUsername = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiUsername.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiUsername.setDescription('AirWatch API username')
mdmAirWatchApiPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiPassword.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiPassword.setDescription('AirWatch API password')
mdmAirWatchApiPasswordEnc = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiPasswordEnc.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiPasswordEnc.setDescription('AirWatch API password (encrypted)')
mdmAirWatchApiTimeout = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiTimeout.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiTimeout.setDescription('AirWatch API timeout (in seconds)')
mdmAirWatchApiPollPeriod = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiPollPeriod.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiPollPeriod.setDescription('AirWatch API poll period (in seconds)')
mdmAirWatchApiAccessError = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("block", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchApiAccessError.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchApiAccessError.setDescription('AirWatch API access error action')
mdmAirWatchRedirectURL = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 35, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmAirWatchRedirectURL.setStatus('current')
if mibBuilder.loadTexts: mdmAirWatchRedirectURL.setDescription('AirWatch station redirect URL')
netflowEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 36, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("v5", 1), ("v9", 2), ("ipfix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netflowEnable.setStatus('current')
if mibBuilder.loadTexts: netflowEnable.setDescription('Enable or disable NetFlow probe')
netflowCollectorHost = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 36, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netflowCollectorHost.setStatus('current')
if mibBuilder.loadTexts: netflowCollectorHost.setDescription('Netflow collector IP address or host name')
netflowCollectorPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 36, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netflowCollectorPort.setStatus('current')
if mibBuilder.loadTexts: netflowCollectorPort.setDescription('NetFlow collector port')
wifiTagEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagEnable.setStatus('current')
if mibBuilder.loadTexts: wifiTagEnable.setDescription('Enable or disable WiFi Tag')
wifiTagUdpPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagUdpPort.setStatus('current')
if mibBuilder.loadTexts: wifiTagUdpPort.setDescription('WiFi Tag UDP Port')
wifiTagChannel1 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagChannel1.setStatus('current')
if mibBuilder.loadTexts: wifiTagChannel1.setDescription('WiFi Tag Channel 1')
wifiTagChannel2 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagChannel2.setStatus('current')
if mibBuilder.loadTexts: wifiTagChannel2.setDescription('WiFi Tag Channel 2')
wifiTagChannel3 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagChannel3.setStatus('current')
if mibBuilder.loadTexts: wifiTagChannel3.setDescription('WiFi Tag Channel 3')
wifiTagEkahauServer = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 37, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wifiTagEkahauServer.setStatus('current')
if mibBuilder.loadTexts: wifiTagEkahauServer.setDescription('Ekahau server host name or IP address')
wprWhitelistSsidTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1), )
if mibBuilder.loadTexts: wprWhitelistSsidTable.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidTable.setDescription('WPR whitelist per SSID')
wprWhitelistSsidEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "wprWhitelistSsidIndex"))
if mibBuilder.loadTexts: wprWhitelistSsidEntry.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidEntry.setDescription('WPR whitelist per SSID table entry')
wprWhitelistSsidIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: wprWhitelistSsidIndex.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidIndex.setDescription('WPR whitelist per SSID index')
wprWhitelistSsidDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistSsidDomain.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidDomain.setDescription('WPR whitelist domain name')
wprWhitelistSsidName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistSsidName.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidName.setDescription('SSID this WPR whitelist domain belongs to')
wprWhitelistSsidRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistSsidRowStatus.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidRowStatus.setDescription('Status of the WPR whitelist row entry')
wprWhitelistGroupTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2), )
if mibBuilder.loadTexts: wprWhitelistGroupTable.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupTable.setDescription('WPR whitelist per user group')
wprWhitelistGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2, 1), ).setIndexNames((0, "XIRRUS-MIB", "wprWhitelistGroupIndex"))
if mibBuilder.loadTexts: wprWhitelistGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupEntry.setDescription('WPR whitelist per user group table entry')
wprWhitelistGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: wprWhitelistGroupIndex.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupIndex.setDescription('WPR whitelist per user group index')
wprWhitelistGroupDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistGroupDomain.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupDomain.setDescription('WPR whitelist domain name')
wprWhitelistGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistGroupName.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupName.setDescription('User group this WPR whitelist domain belongs to')
wprWhitelistGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wprWhitelistGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupRowStatus.setDescription('Status of the WPR whitelist row entry')
wprWhitelistSsidTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wprWhitelistSsidTableReset.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistSsidTableReset.setDescription('Reset WPR whitelist (clear all entries) for given SSID')
wprWhitelistGroupTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 38, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wprWhitelistGroupTableReset.setStatus('current')
if mibBuilder.loadTexts: wprWhitelistGroupTableReset.setDescription('Reset WPR whitelist (clear all entries) for given user group')
oauthTokenTable = MibTable((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1), )
if mibBuilder.loadTexts: oauthTokenTable.setStatus('current')
if mibBuilder.loadTexts: oauthTokenTable.setDescription('OAUTH Token table')
oauthTokenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1), ).setIndexNames((0, "XIRRUS-MIB", "oauthTokenIndex"))
if mibBuilder.loadTexts: oauthTokenEntry.setStatus('current')
if mibBuilder.loadTexts: oauthTokenEntry.setDescription('OAUTH token table entry')
oauthTokenIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: oauthTokenIndex.setStatus('current')
if mibBuilder.loadTexts: oauthTokenIndex.setDescription('OAUTH Token index')
oauthTokenId = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenId.setStatus('current')
if mibBuilder.loadTexts: oauthTokenId.setDescription('OAUTH Token Id')
oauthTokenClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenClientId.setStatus('current')
if mibBuilder.loadTexts: oauthTokenClientId.setDescription('OAUTH Token Client ID')
oauthTokenGrantType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenGrantType.setStatus('current')
if mibBuilder.loadTexts: oauthTokenGrantType.setDescription('OAUTH Token Grant Type')
oauthTokenExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenExpiration.setStatus('current')
if mibBuilder.loadTexts: oauthTokenExpiration.setDescription('OAUTH Token Expiration')
oauthTokenUserAgent = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenUserAgent.setStatus('current')
if mibBuilder.loadTexts: oauthTokenUserAgent.setDescription('OAUTH Token User Agent')
oauthTokenScope = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenScope.setStatus('current')
if mibBuilder.loadTexts: oauthTokenScope.setDescription('OAUTH Token Scope')
oauthTokenCode = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenCode.setStatus('current')
if mibBuilder.loadTexts: oauthTokenCode.setDescription('OAUTH Token Code')
oauthTokenType = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oauthTokenType.setStatus('current')
if mibBuilder.loadTexts: oauthTokenType.setDescription('OAUTH Token Type')
oauthTokenRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 1, 1, 10), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oauthTokenRowStatus.setStatus('current')
if mibBuilder.loadTexts: oauthTokenRowStatus.setDescription('Status of the OAUTH Token row entry')
oauthTableReset = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 39, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oauthTableReset.setStatus('current')
if mibBuilder.loadTexts: oauthTableReset.setDescription('Reset OAUTH table (clear all entries)')
proxyFwdProxyType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 40, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("bluecoat", 1), ("netboxblue", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyFwdProxyType.setStatus('current')
if mibBuilder.loadTexts: proxyFwdProxyType.setDescription('Disable or enable proxy forwarding')
proxyFwdBlueCoatUrl = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 40, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyFwdBlueCoatUrl.setStatus('current')
if mibBuilder.loadTexts: proxyFwdBlueCoatUrl.setDescription('URL of BlueCoat proxy server')
proxyFwdNetBoxBlueUrl = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 40, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyFwdNetBoxBlueUrl.setStatus('current')
if mibBuilder.loadTexts: proxyFwdNetBoxBlueUrl.setDescription('URL of NetBoxBlue proxy server')
lldpEnable = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 42, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpEnable.setStatus('current')
if mibBuilder.loadTexts: lldpEnable.setDescription('Enable or disable LLDP')
lldpInterval = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 42, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpInterval.setStatus('current')
if mibBuilder.loadTexts: lldpInterval.setDescription('LLDP message interval (in seconds)')
lldpHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 42, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpHoldTime.setStatus('current')
if mibBuilder.loadTexts: lldpHoldTime.setDescription('LLDP message hold time (in seconds)')
lldpRequestPower = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 42, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lldpRequestPower.setStatus('current')
if mibBuilder.loadTexts: lldpRequestPower.setDescription('Enable or disable LLDP power request')
positionInfoX = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoX.setStatus('current')
if mibBuilder.loadTexts: positionInfoX.setDescription('System X coordinate (float converted to string)')
positionInfoY = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoY.setStatus('current')
if mibBuilder.loadTexts: positionInfoY.setDescription('System Y coordinate (float converted to string)')
positionInfoZ = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoZ.setStatus('current')
if mibBuilder.loadTexts: positionInfoZ.setDescription('System Z coordinate (float converted to string)')
positionInfoScale = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoScale.setStatus('current')
if mibBuilder.loadTexts: positionInfoScale.setDescription('System scale (feet/unit) (float converted to string)')
positionInfoAngle = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoAngle.setStatus('current')
if mibBuilder.loadTexts: positionInfoAngle.setDescription('System angle (degrees from north) (float converted to string)')
positionInfoMount = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("face-down", 0), ("face-up", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoMount.setStatus('current')
if mibBuilder.loadTexts: positionInfoMount.setDescription('System mounting orientation')
positionInfoScope = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("map", 0), ("global", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoScope.setStatus('current')
if mibBuilder.loadTexts: positionInfoScope.setDescription('System location scope')
positionInfoMap = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 43, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: positionInfoMap.setStatus('current')
if mibBuilder.loadTexts: positionInfoMap.setDescription('System location map')
adminTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 1))
stationTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 2))
generalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3))
envCtrlTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 4))
iapTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 5))
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 100))
adminLogin = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 1, 1)).setObjects(("XIRRUS-MIB", "adminUsername"))
if mibBuilder.loadTexts: adminLogin.setStatus('current')
if mibBuilder.loadTexts: adminLogin.setDescription('Admin Logged into Array')
adminLogout = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 1, 2)).setObjects(("XIRRUS-MIB", "adminUsername"))
if mibBuilder.loadTexts: adminLogout.setStatus('current')
if mibBuilder.loadTexts: adminLogout.setDescription('Admin Logged out from Array')
stationACLFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 2, 1)).setObjects(("XIRRUS-MIB", "stationAssociationMACAddress"))
if mibBuilder.loadTexts: stationACLFailure.setStatus('current')
if mibBuilder.loadTexts: stationACLFailure.setDescription('Station rejected by ACL')
stationRadiusAuthFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 2, 2)).setObjects(("XIRRUS-MIB", "stationAssociationMACAddress"))
if mibBuilder.loadTexts: stationRadiusAuthFailure.setStatus('current')
if mibBuilder.loadTexts: stationRadiusAuthFailure.setDescription('Station failed Radius server authentication')
resetArray = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 1))
if mibBuilder.loadTexts: resetArray.setStatus('current')
if mibBuilder.loadTexts: resetArray.setDescription('Admin requested reset of the Array')
rebootArray = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 2))
if mibBuilder.loadTexts: rebootArray.setStatus('current')
if mibBuilder.loadTexts: rebootArray.setDescription('Administrator requested a reboot of Array')
softwareUploadFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 3))
if mibBuilder.loadTexts: softwareUploadFailure.setStatus('current')
if mibBuilder.loadTexts: softwareUploadFailure.setDescription('Array software image upload failed')
softwareUploadSuccess = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 4))
if mibBuilder.loadTexts: softwareUploadSuccess.setStatus('current')
if mibBuilder.loadTexts: softwareUploadSuccess.setDescription('Array software image upload succeeded')
softwareUpgradeFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 5))
if mibBuilder.loadTexts: softwareUpgradeFailure.setStatus('current')
if mibBuilder.loadTexts: softwareUpgradeFailure.setDescription('Array software upgrade failed')
softwareUpgradeSuccess = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 6))
if mibBuilder.loadTexts: softwareUpgradeSuccess.setStatus('current')
if mibBuilder.loadTexts: softwareUpgradeSuccess.setDescription('Array software upgrade succeeded')
dhcpRenewFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 7)).setObjects(("XIRRUS-MIB", "ethStatsIfaceName"))
if mibBuilder.loadTexts: dhcpRenewFailure.setStatus('current')
if mibBuilder.loadTexts: dhcpRenewFailure.setDescription('Unable to get DHCP Address')
cfgChange = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 8)).setObjects(("XIRRUS-MIB", "cfgModuleOID"))
if mibBuilder.loadTexts: cfgChange.setStatus('current')
if mibBuilder.loadTexts: cfgChange.setDescription('Configuration change')
keepAlive = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 9)).setObjects(("XIRRUS-MIB", "systemHostname"))
if mibBuilder.loadTexts: keepAlive.setStatus('current')
if mibBuilder.loadTexts: keepAlive.setDescription('Keepalive notice')
encDoorOpened = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 10))
if mibBuilder.loadTexts: encDoorOpened.setStatus('current')
if mibBuilder.loadTexts: encDoorOpened.setDescription('Enclosure door opened')
encDoorClosed = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 11))
if mibBuilder.loadTexts: encDoorClosed.setStatus('current')
if mibBuilder.loadTexts: encDoorClosed.setDescription('Enclosure door closed')
flashPartitionCorrupt = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 12))
if mibBuilder.loadTexts: flashPartitionCorrupt.setStatus('current')
if mibBuilder.loadTexts: flashPartitionCorrupt.setDescription('Flash partition corrupt')
licenseUpdate = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 13))
if mibBuilder.loadTexts: licenseUpdate.setStatus('current')
if mibBuilder.loadTexts: licenseUpdate.setDescription('License updated')
radioMixInvalid = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 3, 14))
if mibBuilder.loadTexts: radioMixInvalid.setStatus('current')
if mibBuilder.loadTexts: radioMixInvalid.setDescription('Invalid Radio Mix')
envCtrlTempOver = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 4, 1))
if mibBuilder.loadTexts: envCtrlTempOver.setStatus('current')
if mibBuilder.loadTexts: envCtrlTempOver.setDescription('Outdoor enclosure temperature too high')
envCtrlTempUnder = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 4, 2))
if mibBuilder.loadTexts: envCtrlTempUnder.setStatus('current')
if mibBuilder.loadTexts: envCtrlTempUnder.setDescription('Outdoor enclosure temperature too low')
envCtrlHumidOver = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 4, 3))
if mibBuilder.loadTexts: envCtrlHumidOver.setStatus('current')
if mibBuilder.loadTexts: envCtrlHumidOver.setDescription('Outdoor enclosure humidity too high')
envCtrlFanFail = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 4, 4))
if mibBuilder.loadTexts: envCtrlFanFail.setStatus('current')
if mibBuilder.loadTexts: envCtrlFanFail.setDescription('Outdoor enclosure fan failure')
iapBeaconProbeFailure = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 5, 1)).setObjects(("XIRRUS-MIB", "iapStatsIfaceName"))
if mibBuilder.loadTexts: iapBeaconProbeFailure.setStatus('current')
if mibBuilder.loadTexts: iapBeaconProbeFailure.setDescription('No received beacons (or probe responses) from IAP, alert only')
iapBeaconProbeFailurePhyReset = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 5, 2)).setObjects(("XIRRUS-MIB", "iapStatsIfaceName"))
if mibBuilder.loadTexts: iapBeaconProbeFailurePhyReset.setStatus('current')
if mibBuilder.loadTexts: iapBeaconProbeFailurePhyReset.setDescription('No received beacons (or probe responses) from IAP, resetting interface PHY')
iapBeaconProbeFailureMacReset = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 5, 3)).setObjects(("XIRRUS-MIB", "iapStatsIfaceName"))
if mibBuilder.loadTexts: iapBeaconProbeFailureMacReset.setStatus('current')
if mibBuilder.loadTexts: iapBeaconProbeFailureMacReset.setDescription('No received beacons (or probe responses) from IAP, resetting interface MAC')
iapBeaconProbeFailureArrayReboot = NotificationType((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 5, 4)).setObjects(("XIRRUS-MIB", "iapStatsIfaceName"))
if mibBuilder.loadTexts: iapBeaconProbeFailureArrayReboot.setStatus('current')
if mibBuilder.loadTexts: iapBeaconProbeFailureArrayReboot.setDescription('No received beacons (or probe responses) from IAP, scheduling array reboot')
cfgModuleOID = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 50, 100, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cfgModuleOID.setStatus('current')
if mibBuilder.loadTexts: cfgModuleOID.setDescription('Configuration module OID')
proxyMgmtEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtEnabled.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtEnabled.setDescription('Disable or enable all proxy client services for management traffic')
proxyMgmtCustom = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtCustom.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtCustom.setDescription('Disable or enable custom tsocks configuration for proxy client')
proxyMgmtHttpEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpEnabled.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpEnabled.setDescription('Disable or enable HTTP proxy client')
proxyMgmtHttpHost = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpHost.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpHost.setDescription('Hostname used with HTTP proxy client')
proxyMgmtHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpPort.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpPort.setDescription('Port used with HTTP proxy client')
proxyMgmtHttpUsername = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpUsername.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpUsername.setDescription('Username used with HTTP proxy client')
proxyMgmtHttpPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpPassword.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpPassword.setDescription('Password used with HTTP proxy client')
proxyMgmtHttpType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("http", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpType.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpType.setDescription('HTTP proxy client Type')
proxyMgmtHttpsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsEnabled.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsEnabled.setDescription('Disable or enable HTTPS proxy client')
proxyMgmtHttpsHost = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsHost.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsHost.setDescription('Hostname used with HTTPS proxy client')
proxyMgmtHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsPort.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsPort.setDescription('Port used with HTTPS proxy client')
proxyMgmtHttpsUsername = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsUsername.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsUsername.setDescription('Username used with HTTPS proxy client')
proxyMgmtHttpsPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsPassword.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsPassword.setDescription('Password used with HTTPS proxy client')
proxyMgmtHttpsType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("https", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtHttpsType.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtHttpsType.setDescription('HTTPS proxy client Type')
proxyMgmtSocksEnabled = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksEnabled.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksEnabled.setDescription('Disable or enable SOCKS proxy client')
proxyMgmtSocksIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 16), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksIpAddr.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksIpAddr.setDescription('Ip Address used with SOCKS proxy client')
proxyMgmtSocksPort = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksPort.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksPort.setDescription('Port used with SOCKS proxy client')
proxyMgmtSocksUsername = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 18), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksUsername.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksUsername.setDescription('Username used with SOCKS proxy client')
proxyMgmtSocksPassword = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksPassword.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksPassword.setDescription('Password used with SOCKS proxy client')
proxyMgmtSocksType = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("socks4", 2), ("socks5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSocksType.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSocksType.setDescription('SOCKS proxy client Type')
proxyMgmtSubnet01 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet01.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet01.setDescription('Socks Proxy Client Whitelist Local Network 01')
proxyMgmtMask01 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 22), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask01.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask01.setDescription('Socks Proxy Client Whitelist Local Network Mask 01')
proxyMgmtSubnet02 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 23), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet02.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet02.setDescription('Socks Proxy Client Whitelist Local Network 02')
proxyMgmtMask02 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 24), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask02.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask02.setDescription('Socks Proxy Client Whitelist Local Network Mask 02')
proxyMgmtSubnet03 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet03.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet03.setDescription('Socks Proxy Client Whitelist Local Network 03')
proxyMgmtMask03 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask03.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask03.setDescription('Socks Proxy Client Whitelist Local Network Mask 03')
proxyMgmtSubnet04 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 27), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet04.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet04.setDescription('Socks Proxy Client Whitelist Local Network 04')
proxyMgmtMask04 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask04.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask04.setDescription('Socks Proxy Client Whitelist Local Network Mask 04')
proxyMgmtSubnet05 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 29), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet05.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet05.setDescription('Socks Proxy Client Whitelist Local Network 05')
proxyMgmtMask05 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 30), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask05.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask05.setDescription('Socks Proxy Client Whitelist Local Network Mask 05')
proxyMgmtSubnet06 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 31), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet06.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet06.setDescription('Socks Proxy Client Whitelist Local Network 06')
proxyMgmtMask06 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 32), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask06.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask06.setDescription('Socks Proxy Client Whitelist Local Network Mask 06')
proxyMgmtSubnet07 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 33), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet07.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet07.setDescription('Socks Proxy Client Whitelist Local Network 07')
proxyMgmtMask07 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 34), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask07.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask07.setDescription('Socks Proxy Client Whitelist Local Network Mask 07')
proxyMgmtSubnet08 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 35), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet08.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet08.setDescription('Socks Proxy Client Whitelist Local Network 08')
proxyMgmtMask08 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask08.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask08.setDescription('Socks Proxy Client Whitelist Local Network Mask 08')
proxyMgmtSubnet09 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet09.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet09.setDescription('Socks Proxy Client Whitelist Local Network 09')
proxyMgmtMask09 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 38), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask09.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask09.setDescription('Socks Proxy Client Whitelist Local Network Mask 09')
proxyMgmtSubnet10 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtSubnet10.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtSubnet10.setDescription('Socks Proxy Client Whitelist Local Network 10')
proxyMgmtMask10 = MibScalar((1, 3, 6, 1, 4, 1, 21013, 1, 2, 41, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proxyMgmtMask10.setStatus('current')
if mibBuilder.loadTexts: proxyMgmtMask10.setDescription('Socks Proxy Client Whitelist Local Network Mask 10')
mibBuilder.exportSymbols("XIRRUS-MIB", syslog=syslog, globalDscpMappingTable=globalDscpMappingTable, iapPresent=iapPresent, radiusPriServerSecret=radiusPriServerSecret, stationUnassociatedRSSIabg2=stationUnassociatedRSSIabg2, filterEntry=filterEntry, adminUsername=adminUsername, netflowEnable=netflowEnable, stationUnassociatedTimeRSSIa6=stationUnassociatedTimeRSSIa6, filterAppListIndex=filterAppListIndex, stationStatsRxPackets=stationStatsRxPackets, proxyMgmtSubnet10=proxyMgmtSubnet10, adminPassword=adminPassword, mdmAirWatchApiAccessError=mdmAirWatchApiAccessError, rogueDetectAPOrigTableTimeDiscovered=rogueDetectAPOrigTableTimeDiscovered, rates11aRate=rates11aRate, xa3_240Array=xa3_240Array, neighborArrayNumSSIDs=neighborArrayNumSSIDs, ssidWpaPassphrase=ssidWpaPassphrase, ethStatsTxCarrierErrors=ethStatsTxCarrierErrors, wdsStatsTxRate2Packets=wdsStatsTxRate2Packets, proxyMgmtSubnet03=proxyMgmtSubnet03, filterSetIP=filterSetIP, componentTable=componentTable, stationAssocTimeRSSIa3=stationAssocTimeRSSIa3, tunnelIndex=tunnelIndex, ledsActivityTable=ledsActivityTable, xr430hArray=xr430hArray, groupWprSplashEnable=groupWprSplashEnable, stationAssociationTimeRSSIa4=stationAssociationTimeRSSIa4, iapStatsTxRTS=iapStatsTxRTS, xr2225Array=xr2225Array, iapStatsTxRate6Retries=iapStatsTxRate6Retries, xs3900Array=xs3900Array, vlanStatsTxTotalErrors=vlanStatsTxTotalErrors, ssidRadiusPriServerSecret=ssidRadiusPriServerSecret, vlanDHCPBind=vlanDHCPBind, iapStatsRxRate11Retries=iapStatsRxRate11Retries, xr1136hArray=xr1136hArray, staAssuranceSNRActive=staAssuranceSNRActive, groupDeviceID=groupDeviceID, stationStatsRxRate6Errors=stationStatsRxRate6Errors, vlanMgmtAppStatsIndex=vlanMgmtAppStatsIndex, wpaEAP=wpaEAP, ledsActivityStatus=ledsActivityStatus, stationAssocNetbiosName=stationAssocNetbiosName, filterAppListGuid=filterAppListGuid, wdsStatsRxRate54Errors=wdsStatsRxRate54Errors, stationUnassociatedRSSIa8=stationUnassociatedRSSIa8, idsDeauthAttackPeriod=idsDeauthAttackPeriod, wdsRoamAvgWeight=wdsRoamAvgWeight, locationReportingKey=locationReportingKey, systemTelnetEnable=systemTelnetEnable, iapTable=iapTable, idsStationImpersonationPeriod=idsStationImpersonationPeriod, ssidWpaAES=ssidWpaAES, iapStatsNoiseDenominator=iapStatsNoiseDenominator, ntpPrimaryAuthType=ntpPrimaryAuthType, clusterArrayPassword=clusterArrayPassword, envCtrlFanFail=envCtrlFanFail, stationStatsRxRate6Retries=stationStatsRxRate6Retries, stationAppStatsIndex=stationAppStatsIndex, vlanTunnelSecretForm=vlanTunnelSecretForm, iapBeaconProbeFailureMacReset=iapBeaconProbeFailureMacReset, stationStatsTxRate12Bytes=stationStatsTxRate12Bytes, filterEnable=filterEnable, proxyMgmtMask02=proxyMgmtMask02, stationAppStatsGuid=stationAppStatsGuid, wdsStatsRxRate6Bytes=wdsStatsRxRate6Bytes, oauthTableReset=oauthTableReset, aclIndex=aclIndex, ethStatsIfaceName=ethStatsIfaceName, adminPrivLevelNumber=adminPrivLevelNumber, systemSshTimeout=systemSshTimeout, system=system, autoCellEnable=autoCellEnable, bondMirror=bondMirror, wdsStatsRxRate1Errors=wdsStatsRxRate1Errors, spectrumAnalysisTable=spectrumAnalysisTable, idsDeauthFloodPeriod=idsDeauthFloodPeriod, iapStatsTxRate11Errors=iapStatsTxRate11Errors, vlanMgmtAppStatsRxBytes=vlanMgmtAppStatsRxBytes, wdsStatsTxRate48Bytes=wdsStatsTxRate48Bytes, wdsStatsTxRate18Retries=wdsStatsTxRate18Retries, autoChannelList11bgTable=autoChannelList11bgTable, stationUnassocTime=stationUnassocTime, iapStatsTxRate12Retries=iapStatsTxRate12Retries, stationStatsTxRate1Packets=stationStatsTxRate1Packets, staAssurAssocTimeActive=staAssurAssocTimeActive, iapStatsRxUnassociated=iapStatsRxUnassociated, filterDays=filterDays, staAssuranceSNR=staAssuranceSNR, xsArray=xsArray, spanningTreeWDSClientLink3State=spanningTreeWDSClientLink3State, stationAssuranceTableClear=stationAssuranceTableClear, wdsStatsTxRate5Retries=wdsStatsTxRate5Retries, staAssurAssocTimeTimestamp=staAssurAssocTimeTimestamp, fpgaSWVersion=fpgaSWVersion, idsAPImpersonationEnable=idsAPImpersonationEnable, iapAntenna=iapAntenna, groupEntry=groupEntry, adminRadiusEnable=adminRadiusEnable, iapStatsTxRate5Errors=iapStatsTxRate5Errors, iapChannelBond160Mhz=iapChannelBond160Mhz, cdp=cdp, stationUnassociatedTimeRSSIa9=stationUnassociatedTimeRSSIa9, autoChannelList11aSet=autoChannelList11aSet, syslogEmailPassword=syslogEmailPassword, wdsStatsTxRate11Retries=wdsStatsTxRate11Retries, wepKeyNum=wepKeyNum, stationAssocEntry=stationAssocEntry, stationStatsTxRate24Retries=stationStatsTxRate24Retries, iapStatsTxTotalRetries=iapStatsTxTotalRetries, proxyMgmtHttpsType=proxyMgmtHttpsType, ssidRadiusSecServerSecretForm=ssidRadiusSecServerSecretForm, ssidAuthentication=ssidAuthentication, stationStatsRxRate24Retries=stationStatsRxRate24Retries, proxyMgmtMask07=proxyMgmtMask07, xa4_120Array=xa4_120Array, ntpPrimary=ntpPrimary, spanningTreeEntry=spanningTreeEntry, stationAssocRSSIa11=stationAssocRSSIa11, ssidRadiusAcctPriServerHostname=ssidRadiusAcctPriServerHostname, rates11nEntry=rates11nEntry, wifiTagChannel3=wifiTagChannel3, ssidWprHeaderText=ssidWprHeaderText, spectrumAnalysisAverageDataRate=spectrumAnalysisAverageDataRate, rates11aStatus=rates11aStatus, stationAppStatsRxPackets=stationAppStatsRxPackets, iapStatsTxPackets=iapStatsTxPackets, wdsStatsTxRate54Errors=wdsStatsTxRate54Errors, vlanUndefinedTable=vlanUndefinedTable, groupEnable=groupEnable, tunnelSecRemoteEndpoint=tunnelSecRemoteEndpoint, xa4_240Array=xa4_240Array, globalIAPTxPwr=globalIAPTxPwr, adminRadius=adminRadius, proxyMgmtSocksUsername=proxyMgmtSocksUsername, iapStatsRxRate5Bytes=iapStatsRxRate5Bytes, dnsSrv3=dnsSrv3, xr520Array=xr520Array, wdsStatsTxBytes=wdsStatsTxBytes, iapNumStations=iapNumStations, xd1_130Array=xd1_130Array, systemReboot=systemReboot, proxyMgmtSubnet04=proxyMgmtSubnet04, stationAssuranceDataRate=stationAssuranceDataRate, iapStatsTxRate1Bytes=iapStatsTxRate1Bytes, iapStatsRxBroadcast=iapStatsRxBroadcast, ssidIndex=ssidIndex, stationStatsRxRate54Bytes=stationStatsRxRate54Bytes, stationAssociationRSSIa12=stationAssociationRSSIa12, adminPrivSectionEntry=adminPrivSectionEntry, group=group, globalIAPShortRetry=globalIAPShortRetry, vlanIPMask=vlanIPMask, dateTimeZoneMins=dateTimeZoneMins, xh4_120Array=xh4_120Array, spectrumAnalysisErrorRate=spectrumAnalysisErrorRate, stationAssocTimeRSSIa9=stationAssocTimeRSSIa9, stationStatsTxRate48Packets=stationStatsTxRate48Packets, xd3_240Array=xd3_240Array, globalMulticastExcludeTable=globalMulticastExcludeTable, global11bg=global11bg, ledsActivityIndex=ledsActivityIndex, staAssuranceManufacturer=staAssuranceManufacturer, iapStatsRxRate5Errors=iapStatsRxRate5Errors, stationAssociationDeviceClass=stationAssociationDeviceClass, xr7236Array=xr7236Array, globalPublicSafety=globalPublicSafety, stationUnassocRSSI=stationUnassocRSSI, globalDot11wProtectedManagement=globalDot11wProtectedManagement, globalMulticastForwardingTable=globalMulticastForwardingTable, iapStatsTxRate1Packets=iapStatsTxRate1Packets, xr2247hArray=xr2247hArray, stationStatsRxRate36Bytes=stationStatsRxRate36Bytes, vlanMgmtAppCatStatsGuid=vlanMgmtAppCatStatsGuid, stationAssuranceRSSI=stationAssuranceRSSI, stationStatsTxRate36Bytes=stationStatsTxRate36Bytes, positionInfoMap=positionInfoMap, filterName=filterName, interfaceMACAddress=interfaceMACAddress, staAssuranceDistanceActive=staAssuranceDistanceActive, proxyMgmtSocksEnabled=proxyMgmtSocksEnabled, iapStatsRxRate11Packets=iapStatsRxRate11Packets, global11bgIAPgOnly=global11bgIAPgOnly, xs3700Array=xs3700Array, staAssurDeviceType=staAssurDeviceType, global11aIAPAutoCellEnable=global11aIAPAutoCellEnable, autoChannel=autoChannel, global11aIAPAutoCellPeriod=global11aIAPAutoCellPeriod, radiusEnable=radiusEnable, stationStatsTxRate24Packets=stationStatsTxRate24Packets, flashPartitionCorrupt=flashPartitionCorrupt, snmpAgentTrapPort2=snmpAgentTrapPort2, stationStatsRxRate1Errors=stationStatsRxRate1Errors, iapStatsIndex=iapStatsIndex, proxyMgmtCustom=proxyMgmtCustom, iapStatsTxUnassociated=iapStatsTxUnassociated, groupDaysOnFri=groupDaysOnFri, idsDisassocFloodPeriod=idsDisassocFloodPeriod, dhcpPoolName=dhcpPoolName, global11n=global11n, stationUnassocTimeRSSIa3=stationUnassocTimeRSSIa3, iapStatsTxSingleRetries=iapStatsTxSingleRetries, stationAppStatsEntry=stationAppStatsEntry, filterSetQOS=filterSetQOS, filterLayer=filterLayer, iapStatsRxRate24Errors=iapStatsRxRate24Errors, groupDaysOnSun=groupDaysOnSun, idsSeqNumAnomalyGap=idsSeqNumAnomalyGap, global11bgIAPCellSize=global11bgIAPCellSize, ssidLimitsDaysOnWed=ssidLimitsDaysOnWed, staAssurDistanceActive=staAssurDistanceActive, envCtrlHeatRPM2=envCtrlHeatRPM2, idsProbeReqFloodThreshold=idsProbeReqFloodThreshold, stationAssociationHostname=stationAssociationHostname, wdsStatsRxRate36Packets=wdsStatsRxRate36Packets, xa4_130Array=xa4_130Array, stationUnassocTimeRSSIabg1=stationUnassocTimeRSSIabg1, wprWhitelistSsidEntry=wprWhitelistSsidEntry, staAssurAuthFailuresTimestamp=staAssurAuthFailuresTimestamp, syslogEmailFromAddress=syslogEmailFromAddress, stationUnassocRSSIa11=stationUnassocRSSIa11, spanningTreeGigLinkState=spanningTreeGigLinkState, stationUnassociatedManufacturer=stationUnassociatedManufacturer, leds=leds, radiusAcctEnable=radiusAcctEnable, wprWhitelistGroupEntry=wprWhitelistGroupEntry, systemTempCelsius=systemTempCelsius, syslogSecServerPort=syslogSecServerPort, stationUnassociatedRSSIa6=stationUnassociatedRSSIa6, xs16Array=xs16Array, globalWmmPowerSave=globalWmmPowerSave, iapWdsClientLink=iapWdsClientLink, groupWprHeaderText=groupWprHeaderText, fpgaTable=fpgaTable, xs3500Array=xs3500Array, systemRemoteServer=systemRemoteServer, staAssuranceAssocTime=staAssuranceAssocTime, idsEventChannel=idsEventChannel, stationAssociationTimeRSSIa3=stationAssociationTimeRSSIa3, proxyFwdNetBoxBlueUrl=proxyFwdNetBoxBlueUrl, xr2236hArray=xr2236hArray, global11bgIAPAutoChannelEnable=global11bgIAPAutoChannelEnable, rates11a=rates11a, vlanGateway=vlanGateway, wdsStatsLinkName=wdsStatsLinkName, ids=ids, xr2447hArray=xr2447hArray, xn4Array=xn4Array, wdsStatsTxRate24Packets=wdsStatsTxRate24Packets, stationAssociationTimeRSSIa5=stationAssociationTimeRSSIa5, envCtrlHumidOver=envCtrlHumidOver)
mibBuilder.exportSymbols("XIRRUS-MIB", iapStatsRxTotalRetries=iapStatsRxTotalRetries, stationAssuranceDistance=stationAssuranceDistance, wdsStatsTxRate24Retries=wdsStatsTxRate24Retries, systemResetReason=systemResetReason, wdsStatsTxRate5Packets=wdsStatsTxRate5Packets, wdsStatsRxRate36Bytes=wdsStatsRxRate36Bytes, staAssuranceErrorRateTimestamp=staAssuranceErrorRateTimestamp, radiusDASEventTimestamp=radiusDASEventTimestamp, wdsStatsRxRate9Retries=wdsStatsRxRate9Retries, realtimeMonitorErrorRate=realtimeMonitorErrorRate, spectrumAnalysisDot11Busy=spectrumAnalysisDot11Busy, statistics=statistics, spectrumAnalysisNoise=spectrumAnalysisNoise, ssidHoneypotWhitelistRowStatus=ssidHoneypotWhitelistRowStatus, iapStatsTxBytes=iapStatsTxBytes, stationStatsTable=stationStatsTable, xd4_130Array=xd4_130Array, ssidLimitsDaysOnThu=ssidLimitsDaysOnThu, wdsStatsRxRate48Packets=wdsStatsRxRate48Packets, adminRadiusPriServerSecretEnc=adminRadiusPriServerSecretEnc, stationStatsTxRate2Bytes=stationStatsTxRate2Bytes, wdsStatsRxRate5Bytes=wdsStatsRxRate5Bytes, ssidHoneypotBroadcastSSID=ssidHoneypotBroadcastSSID, staAssuranceMACAddress=staAssuranceMACAddress, stationAssociationDeviceSource=stationAssociationDeviceSource, dateTimeSet=dateTimeSet, proxyMgmtMask08=proxyMgmtMask08, realtimeMonitorPackets=realtimeMonitorPackets, snmpAgentV3ReadOnlyUserPrivPassphrase=snmpAgentV3ReadOnlyUserPrivPassphrase, ssidFallback=ssidFallback, softwareConfig=softwareConfig, adminPrivLevelTable=adminPrivLevelTable, systemNetworkAssurance=systemNetworkAssurance, idsEventTablePeriod=idsEventTablePeriod, ntpSecondary=ntpSecondary, xr2420hArray=xr2420hArray, iapRxThreshold=iapRxThreshold, envCtrlArrayOn=envCtrlArrayOn, stationAssociationTimeRSSIa10=stationAssociationTimeRSSIa10, stationAppCatStatsTxPackets=stationAppCatStatsTxPackets, stationAssuranceEnable=stationAssuranceEnable, vlanPoolName=vlanPoolName, xr1130Array=xr1130Array, stationAssociationRSSIa7=stationAssociationRSSIa7, rogueDetectAPOrigTable=rogueDetectAPOrigTable, xa2_230Array=xa2_230Array, spanningTreeWDSClientLink2State=spanningTreeWDSClientLink2State, stationStatsTxRate18Retries=stationStatsTxRate18Retries, stationAssocTxRate=stationAssocTxRate, proxyMgmtMask01=proxyMgmtMask01, xr1120Array=xr1120Array, envCtrlCoolOn=envCtrlCoolOn, softwareUploadFailure=softwareUploadFailure, stationUnassociatedEntry=stationUnassociatedEntry, rogueDetectAPEntry=rogueDetectAPEntry, xr630hArray=xr630hArray, wdsStatsRxRate48Retries=wdsStatsRxRate48Retries, stationAssociationRSSIabg4=stationAssociationRSSIabg4, componentPart=componentPart, idsEventId=idsEventId, aclRowStatus=aclRowStatus, iapStatsRxCRCErrors=iapStatsRxCRCErrors, encDoorClosed=encDoorClosed, idsStationImpersonationThreshold=idsStationImpersonationThreshold, dhcp=dhcp, vlanPoolEntry=vlanPoolEntry, groupWprLogoImage=groupWprLogoImage, vlanStaAppStatsTimePeriod=vlanStaAppStatsTimePeriod, softwareUpgradeFailure=softwareUpgradeFailure, xr2230hArray=xr2230hArray, stationUnassociatedTimeRSSIa4=stationUnassociatedTimeRSSIa4, ethGateway=ethGateway, licenseUpdate=licenseUpdate, vlanIndex=vlanIndex, adminLogin=adminLogin, ntpSecondaryAuthType=ntpSecondaryAuthType, rogueDetectAutoBlockType=rogueDetectAutoBlockType, stationAssocTimeRSSIa8=stationAssocTimeRSSIa8, stationAssocTimeRSSIa5=stationAssocTimeRSSIa5, fastRoamingTargetMacAddress=fastRoamingTargetMacAddress, global11aIAPAutoCellByChan=global11aIAPAutoCellByChan, stationStatsTxRate12Packets=stationStatsTxRate12Packets, staAssurDataRate=staAssurDataRate, iapStatsTxRate5Bytes=iapStatsTxRate5Bytes, vlanUndefinedNumber=vlanUndefinedNumber, autoCell=autoCell, proxyMgmtMask10=proxyMgmtMask10, idsEAPFloodPeriod=idsEAPFloodPeriod, adminTable=adminTable, pysmi_global=pysmi_global, radiusUserID=radiusUserID, clusterArrayRowStatus=clusterArrayRowStatus, ssidWprHttpsPassthru=ssidWprHttpsPassthru, syslogTable=syslogTable, filterListLength=filterListLength, envCtrlCoolRPM2=envCtrlCoolRPM2, ssidRadiusPriServerHostname=ssidRadiusPriServerHostname, globalDscpMappingEntry=globalDscpMappingEntry, rogueDetectSSIDRowStatus=rogueDetectSSIDRowStatus, rogueDetectAPOrigTableRSSI=rogueDetectAPOrigTableRSSI, dnsUseDhcp=dnsUseDhcp, snmpAgentV3PrivProtocol=snmpAgentV3PrivProtocol, stationAssociationTxRate=stationAssociationTxRate, snmpAgentV3ReadWriteUserPrivPassphrase=snmpAgentV3ReadWriteUserPrivPassphrase, idsDisassocAttackThreshold=idsDisassocAttackThreshold, idsDurationAttackThreshold=idsDurationAttackThreshold, ssid=ssid, wifiTagEkahauServer=wifiTagEkahauServer, xa1_120Array=xa1_120Array, stationStatsRxRate48Errors=stationStatsRxRate48Errors, spectrumAnalysisPackets=spectrumAnalysisPackets, stationUnassociatedMACAddress=stationUnassociatedMACAddress, rogueDetectAutoBlockEnc=rogueDetectAutoBlockEnc, cdpInfoHostname=cdpInfoHostname, snmpAgentV3ReadOnlyUserAuthPassphrase=snmpAgentV3ReadOnlyUserAuthPassphrase, autoCellMinTxPwr=autoCellMinTxPwr, radiusSecServerPort=radiusSecServerPort, positionInfoZ=positionInfoZ, stationAssocRxRate=stationAssocRxRate, groupActive=groupActive, licenseFeatureDesc=licenseFeatureDesc, filterListEnable=filterListEnable, ssidHoneypotBroadcastTable=ssidHoneypotBroadcastTable, xr520hArray=xr520hArray, wepKeyEntry=wepKeyEntry, spanningTreeWDSClientLink4State=spanningTreeWDSClientLink4State, vlanStatsRxFrameErrors=vlanStatsRxFrameErrors, radiusSecServerIPAddress=radiusSecServerIPAddress, ssidWepKey4Size=ssidWepKey4Size, staAssuranceDataRate=staAssuranceDataRate, ssidLimitsDaysOnTue=ssidLimitsDaysOnTue, spectrumAnalysisSignalToNoiseRatio=spectrumAnalysisSignalToNoiseRatio, iapMaxStationsYear=iapMaxStationsYear, idsSeqNumAnomalyMode=idsSeqNumAnomalyMode, softwareVersion=softwareVersion, envCtrlHeatRPM1=envCtrlHeatRPM1, stationStatsRxRate2Bytes=stationStatsRxRate2Bytes, wdsStatsRxRate1Retries=wdsStatsRxRate1Retries, wdsStatsTxRate1Retries=wdsStatsTxRate1Retries, positionInfoX=positionInfoX, filterTrafficLimit=filterTrafficLimit, appListMemberApp=appListMemberApp, globalIPv6Filter=globalIPv6Filter, global11aIAPTxPwr=global11aIAPTxPwr, xh3_240Array=xh3_240Array, vlanStatsRxBytes=vlanStatsRxBytes, staAssurDeviceClass=staAssurDeviceClass, ssidHoneypotWhitelistTable=ssidHoneypotWhitelistTable, vlanMgmtAppCatStatsTxPackets=vlanMgmtAppCatStatsTxPackets, radiusAcctInterval=radiusAcctInterval, tunnelEntry=tunnelEntry, wdsStatsRxRate5Packets=wdsStatsRxRate5Packets, global11nAutoBond=global11nAutoBond, globalDscpMappingQos=globalDscpMappingQos, stationAssurancePeriod=stationAssurancePeriod, wdsStatsRxRate24Bytes=wdsStatsRxRate24Bytes, fpgaIndex=fpgaIndex, idsDisassocFloodMode=idsDisassocFloodMode, rebootArray=rebootArray, wdsStatsRxRate11Retries=wdsStatsRxRate11Retries, xa1_130Array=xa1_130Array, ssidWprEntry=ssidWprEntry, iapStatsRxRate18Packets=iapStatsRxRate18Packets, stationAssocIAP=stationAssocIAP, vlanStaAppStatsTxPackets=vlanStaAppStatsTxPackets, snmpAgentV3Enable=snmpAgentV3Enable, snmpAgentV3ReadOnlyUserAuthPassphraseEnc=snmpAgentV3ReadOnlyUserAuthPassphraseEnc, stationStatsRxRate6Packets=stationStatsRxRate6Packets, radiusCalledStationIdFormat=radiusCalledStationIdFormat, global11nRxChains=global11nRxChains, xr7230Array=xr7230Array, ssidHoneypotBroadcastEntry=ssidHoneypotBroadcastEntry, tunnel=tunnel, autoChannelList11aStatus=autoChannelList11aStatus, ssidWpaEAP=ssidWpaEAP, adminRowStatus=adminRowStatus, stationStatsTxRate18Errors=stationStatsTxRate18Errors, dnsSrv1=dnsSrv1, envCtrlCoolRPM4=envCtrlCoolRPM4, xr1247Array=xr1247Array, vlanStatsTxCarrierErrors=vlanStatsTxCarrierErrors, wdsClientLinkSSID=wdsClientLinkSSID, ethStatsIfaceDuplex=ethStatsIfaceDuplex, cluster=cluster, vlanMgmtAppStatsTable=vlanMgmtAppStatsTable, proxyMgmtHttpsEnabled=proxyMgmtHttpsEnabled, iapStatsRxRate1Retries=iapStatsRxRate1Retries, globalIAPRxThreshold=globalIAPRxThreshold, idsEventTable=idsEventTable, stationAssocIPAddress=stationAssocIPAddress, radiusUserSSID=radiusUserSSID, stationUnassociatedTimeRSSIabg1=stationUnassociatedTimeRSSIabg1, proxyMgmtMask06=proxyMgmtMask06, iapStatsRxRate54Errors=iapStatsRxRate54Errors, groupWprHttpsEnable=groupWprHttpsEnable, mdmAirWatchApiPasswordEnc=mdmAirWatchApiPasswordEnc, stationStatsTxRate2Errors=stationStatsTxRate2Errors, iapStatsRxCTS=iapStatsRxCTS, wdsStatsTxRate54Retries=wdsStatsTxRate54Retries, vlanUndefinedClear=vlanUndefinedClear, iapStatsTxRate54Errors=iapStatsTxRate54Errors, idsBeaconFloodPeriod=idsBeaconFloodPeriod, rogueDetectAPSSID=rogueDetectAPSSID, wdsStatsTxRate6Packets=wdsStatsTxRate6Packets, syslogTimeFormat=syslogTimeFormat, systemStatusLed=systemStatusLed, realtimeMonitorNoise=realtimeMonitorNoise, iapStatsRxRate1Errors=iapStatsRxRate1Errors, stationLocTable=stationLocTable, wdsStatsRxRate54Bytes=wdsStatsRxRate54Bytes, iapStatsRxRate18Bytes=iapStatsRxRate18Bytes, mdmAirWatchApiTimeout=mdmAirWatchApiTimeout, xr2236Array=xr2236Array, filterPriority=filterPriority, autoCellPeriod=autoCellPeriod, iapStatsRxRate36Bytes=iapStatsRxRate36Bytes, iapStatsTxRTSRetries=iapStatsTxRTSRetries, groupRowStatus=groupRowStatus, stationStatsRxRate11Bytes=stationStatsRxRate11Bytes, stationAppCatStatsRxBytes=stationAppCatStatsRxBytes, systemRemoteImage=systemRemoteImage, filterLog=filterLog, iapResetsPhy=iapResetsPhy, stationLocRSSI=stationLocRSSI, ntpSecondaryAuthKeyID=ntpSecondaryAuthKeyID, activeDirectoryJoin=activeDirectoryJoin, tunnelLocalEndpoint=tunnelLocalEndpoint, tunnelRowStatus=tunnelRowStatus, stationAssocDeviceSourceIndex=stationAssocDeviceSourceIndex, ethStatsTxFifoErrors=ethStatsTxFifoErrors, xr2235hArray=xr2235hArray, stationStatsTxRate5Retries=stationStatsTxRate5Retries, ethBond=ethBond, filterDstMacAddressMask=filterDstMacAddressMask, globalMulticastDnsFilteringIndex=globalMulticastDnsFilteringIndex, filterAppDescription=filterAppDescription, stationAssurance=stationAssurance, fastRoamingTargetIndex=fastRoamingTargetIndex, xh1_230Array=xh1_230Array, adminHistoryIPAddress=adminHistoryIPAddress, filterTrafficLimitType=filterTrafficLimitType, globalMulticastForwardingIndex=globalMulticastForwardingIndex, globalDscpMappingIndex=globalDscpMappingIndex, envCtrlCoolRPM3=envCtrlCoolRPM3, wprWhitelistGroupTable=wprWhitelistGroupTable, wdsStatsTxRate6Bytes=wdsStatsTxRate6Bytes, iapStatsTxRate5Packets=iapStatsTxRate5Packets, iapStatsRxManagement=iapStatsRxManagement, wdsStatsRxRate18Packets=wdsStatsRxRate18Packets, iapStatsTxRate6Errors=iapStatsTxRate6Errors, positionInfoScale=positionInfoScale, vlanMgmtAppStatsTablePeriod=vlanMgmtAppStatsTablePeriod, radiusAcctPriServerSecret=radiusAcctPriServerSecret, xh3_230Array=xh3_230Array)
mibBuilder.exportSymbols("XIRRUS-MIB", xr1236hArray=xr1236hArray, filterStateful=filterStateful, staAssuranceTime=staAssuranceTime, iapStatsTxManagement=iapStatsTxManagement, tunnelFailoverInterval=tunnelFailoverInterval, xr2226hArray=xr2226hArray, stationAssociationTimeRSSIa12=stationAssociationTimeRSSIa12, systemReset=systemReset, keepAlive=keepAlive, radiusPriServerPort=radiusPriServerPort, stationAssociationTimeRSSIabg3=stationAssociationTimeRSSIabg3, stationStatsRxRate54Packets=stationStatsRxRate54Packets, iapStatsTxRate54Retries=iapStatsTxRate54Retries, wdsAllowStations=wdsAllowStations, rogueDetectEnable=rogueDetectEnable, radiusServerExternal=radiusServerExternal, wdsStatsTxRate18Packets=wdsStatsTxRate18Packets, xr1230Array=xr1230Array, systemTempFahrenheit=systemTempFahrenheit, ssidHoneypotBroadcastIndex=ssidHoneypotBroadcastIndex, iapResetsBeacon=iapResetsBeacon, stationStatsTxRate9Retries=stationStatsTxRate9Retries, fastRoamingTargetRowStatus=fastRoamingTargetRowStatus, iapStatsRxRate24Bytes=iapStatsRxRate24Bytes, stationAssocMACAddress=stationAssocMACAddress, filterAppCatEntry=filterAppCatEntry, iapType=iapType, globalIAPCellSize=globalIAPCellSize, vlanTable=vlanTable, stationUnassociatedRSSIabg3=stationUnassociatedRSSIabg3, timeLastBoot=timeLastBoot, vlanMgmtAppCatStatsEntry=vlanMgmtAppCatStatsEntry, wdsStatsRxRate48Bytes=wdsStatsRxRate48Bytes, stationAssocTimeRSSIa1=stationAssocTimeRSSIa1, stationAppStatsTxPackets=stationAppStatsTxPackets, xr7220Array=xr7220Array, iapDot11Mode=iapDot11Mode, stationUnassocTimeRSSIa5=stationUnassocTimeRSSIa5, global11ac=global11ac, idsDisassocAttackEnable=idsDisassocAttackEnable, xh4_240Array=xh4_240Array, filterSrcVlan=filterSrcVlan, iapStatsTable=iapStatsTable, stationStatsTxBytes=stationStatsTxBytes, idsImpersonation=idsImpersonation, vlanTableReset=vlanTableReset, xr1236Array=xr1236Array, wprWhitelistSsidTable=wprWhitelistSsidTable, aclSsidRowStatus=aclSsidRowStatus, stationAssocRSSI=stationAssocRSSI, snmpAgentV3AuthType=snmpAgentV3AuthType, systemSshPort=systemSshPort, stationAssuranceAuthFailures=stationAssuranceAuthFailures, ssidBroadcast=ssidBroadcast, realtimeMonitorChannel=realtimeMonitorChannel, groupDaysOnMon=groupDaysOnMon, syslogTerServerPort=syslogTerServerPort, products=products, iapStatsRxRate12Errors=iapStatsRxRate12Errors, vlanStatsTxBytes=vlanStatsTxBytes, idsMICErrorAttackPeriod=idsMICErrorAttackPeriod, systemPreLoginBanner=systemPreLoginBanner, vlanMgmtAppStatsEntry=vlanMgmtAppStatsEntry, ssidLimitsTrafficLimitSta=ssidLimitsTrafficLimitSta, cdpInfoSoftware=cdpInfoSoftware, iapStatsRxRate11Bytes=iapStatsRxRate11Bytes, xa2_240Array=xa2_240Array, systemXmsControl=systemXmsControl, stationUnassocTimeRSSIa11=stationUnassocTimeRSSIa11, vlanStatsTable=vlanStatsTable, radiusUserGroup=radiusUserGroup, networkMap=networkMap, rogueDetectAutoBlockWhitelistRowStatus=rogueDetectAutoBlockWhitelistRowStatus, wepKeyStringForm=wepKeyStringForm, stationUnassocTimeRSSIa4=stationUnassocTimeRSSIa4, wprWhitelistGroupIndex=wprWhitelistGroupIndex, xa8_240Array=xa8_240Array, rogueDetectAPOrigTableEntry=rogueDetectAPOrigTableEntry, stationLocEntry=stationLocEntry, globalMulticastVlanForwardingTableReset=globalMulticastVlanForwardingTableReset, xr1126Array=xr1126Array, systemTelnetTimeout=systemTelnetTimeout, stationAssociationTimeRSSIa8=stationAssociationTimeRSSIa8, global11aIAPAutoCellOverlap=global11aIAPAutoCellOverlap, adminRadiusSecServerSecret=adminRadiusSecServerSecret, stationStatsRxRate12Bytes=stationStatsRxRate12Bytes, ssidLimitsSsidName=ssidLimitsSsidName, global11bgIAPRxThreshold=global11bgIAPRxThreshold, wpaAES=wpaAES, snmpAgentReadWriteCommunityEnc=snmpAgentReadWriteCommunityEnc, stationAssociationTimeRSSIabg1=stationAssociationTimeRSSIabg1, stationUnassocRSSIabg2=stationUnassocRSSIabg2, spanningTreeWDSHostLink4State=spanningTreeWDSHostLink4State, xh1_130Array=xh1_130Array, stationStatsRxRate9Errors=stationStatsRxRate9Errors, ethDefault=ethDefault, staAssuranceSNRTimestamp=staAssuranceSNRTimestamp, ethDHCPBind=ethDHCPBind, stationStatsRxRate36Errors=stationStatsRxRate36Errors, systemLoginReauthPeriod=systemLoginReauthPeriod, oauthTokenTable=oauthTokenTable, idsEventTime=idsEventTime, xh8_230Array=xh8_230Array, cdpInfoIndex=cdpInfoIndex, ssidWprEnable=ssidWprEnable, xr4847Array=xr4847Array, systemHttpsPort=systemHttpsPort, xr6847Array=xr6847Array, xr2247Array=xr2247Array, filterSrcMacAddressMask=filterSrcMacAddressMask, wdsStatsTxRate48Packets=wdsStatsTxRate48Packets, stationAssocRSSIa10=stationAssocRSSIa10, wdsStatsTxRate2Errors=wdsStatsTxRate2Errors, globalArpFilter=globalArpFilter, envCtrlCoolRPM1=envCtrlCoolRPM1, stationAssociationIndex=stationAssociationIndex, ssidLimitsIndex=ssidLimitsIndex, xr1247hArray=xr1247hArray, snmpAgentV3ReadWriteUserAuthPassphraseEnc=snmpAgentV3ReadWriteUserAuthPassphraseEnc, ssidRadiusFailoverTimeout=ssidRadiusFailoverTimeout, clusterArrayTableReset=clusterArrayTableReset, filterSrcIPAddress=filterSrcIPAddress, stationUnassociatedRSSIa1=stationUnassociatedRSSIa1, wdsStatsRxPackets=wdsStatsRxPackets, ethernet=ethernet, stationAssocSSID=stationAssocSSID, ssidLimitsDaysOnFri=ssidLimitsDaysOnFri, systemLicenseProductType=systemLicenseProductType, adminHistoryLogoutTime=adminHistoryLogoutTime, positionInfoAngle=positionInfoAngle, wdsStatsTable=wdsStatsTable, staAssurActiveAlarmTimestamp=staAssurActiveAlarmTimestamp, stationStatsTxRate24Bytes=stationStatsTxRate24Bytes, wdsHostLinkEntry=wdsHostLinkEntry, tunnelSsids=tunnelSsids, stationUnassocRSSIa9=stationUnassocRSSIa9, aclSsidEntry=aclSsidEntry, globalExtractStaInfoStatus=globalExtractStaInfoStatus, autoChannelList11bg=autoChannelList11bg, radiusAcctSecServerSecretEnc=radiusAcctSecServerSecretEnc, xs3900_1GArray=xs3900_1GArray, wepKeyString=wepKeyString, neighborArrayHostname=neighborArrayHostname, stationStatsRxRate11Retries=stationStatsRxRate11Retries, xr6836Array=xr6836Array, radiusAcctPriServerSecretEnc=radiusAcctPriServerSecretEnc, ssidWepKey2StringForm=ssidWepKey2StringForm, iapStatsTxRate6Packets=iapStatsTxRate6Packets, filterAppCatTable=filterAppCatTable, filterListName=filterListName, wpaPassphrase=wpaPassphrase, stationStatsTxRate48Retries=stationStatsTxRate48Retries, syslogEmailUsername=syslogEmailUsername, stationAssociationTimeRSSIa7=stationAssociationTimeRSSIa7, componentSerial=componentSerial, neighborArrayModel=neighborArrayModel, xa8_130Array=xa8_130Array, staAssurDistanceTimestamp=staAssurDistanceTimestamp, stationAssociationRxRate=stationAssociationRxRate, groupWprAuthTimeout=groupWprAuthTimeout, stationAssocRSSIa7=stationAssocRSSIa7, ssidLimitsDaysOnSun=ssidLimitsDaysOnSun, xr6820Array=xr6820Array, systemContactEmail=systemContactEmail, stationAssociationTimeRSSIa11=stationAssociationTimeRSSIa11, stationAssocHostname=stationAssocHostname, rogueDetectAPOrigTablePeriod=rogueDetectAPOrigTablePeriod, stationAssocRSSIabg3=stationAssocRSSIabg3, hardwareConfig=hardwareConfig, groupWprSharedSecret=groupWprSharedSecret, radiusPriServerIPAddress=radiusPriServerIPAddress, wdsStatsTxRate6Retries=wdsStatsTxRate6Retries, idsProbeReqFloodPeriod=idsProbeReqFloodPeriod, stationAssuranceErrorRate=stationAssuranceErrorRate, global11nBondedChannelWidth5GHz=global11nBondedChannelWidth5GHz, xd8_230Array=xd8_230Array, stationStatsRxRate24Bytes=stationStatsRxRate24Bytes, wifiTagChannel2=wifiTagChannel2, globalDot11hSupport=globalDot11hSupport, iapMacAddress=iapMacAddress, global11bgIAPAutoCellPeriod=global11bgIAPAutoCellPeriod, locationReportingOn=locationReportingOn, groupWprSharedSecretForm=groupWprSharedSecretForm, iapStatsRxRate6Bytes=iapStatsRxRate6Bytes, wdsStatsTxRate36Retries=wdsStatsTxRate36Retries, wprWhitelistSsidRowStatus=wprWhitelistSsidRowStatus, rates11aSet=rates11aSet, wprWhitelistSsidName=wprWhitelistSsidName, proxyMgmtSocksIpAddr=proxyMgmtSocksIpAddr, syslogEnable=syslogEnable, ssidActiveIAPs=ssidActiveIAPs, proxyMgmtHttpEnabled=proxyMgmtHttpEnabled, ssidRadiusTimeout=ssidRadiusTimeout, wds=wds, stationAssociationRSSIabg2=stationAssociationRSSIabg2, syslogEmailPasswordEnc=syslogEmailPasswordEnc, xa1_230Array=xa1_230Array, iapStatsTxRate48Bytes=iapStatsTxRate48Bytes, rates11bgTable=rates11bgTable, rates11bg=rates11bg, dhcpPoolMask=dhcpPoolMask, iapStatsTxBeacons=iapStatsTxBeacons, stationAppCatStatsTable=stationAppCatStatsTable, wdsHostLinkSource=wdsHostLinkSource, security=security, cdpInfoEntry=cdpInfoEntry, stationUnassocTimeRSSIabg3=stationUnassocTimeRSSIabg3, wdsStatsRxRate12Packets=wdsStatsRxRate12Packets, stationStatsRxRate12Packets=stationStatsRxRate12Packets, stationAssociationTimeRSSIa1=stationAssociationTimeRSSIa1, aclSsidIndex=aclSsidIndex, iapStatsRxRate18Retries=iapStatsRxRate18Retries, snmpAgentTrapHost2=snmpAgentTrapHost2, iapWifiMode=iapWifiMode, stationStatsRxRate12Errors=stationStatsRxRate12Errors, rogueDetectAPOrigTableActive=rogueDetectAPOrigTableActive, vlanNativeNumber=vlanNativeNumber, wdsStatsTxRate5Errors=wdsStatsTxRate5Errors, globalMulticastVlanForwardingEntry=globalMulticastVlanForwardingEntry, stationStatsRxRate11Packets=stationStatsRxRate11Packets, lldpHoldTime=lldpHoldTime, rogueDetectAPIndex=rogueDetectAPIndex, bondActiveVlans=bondActiveVlans, iapStatsTxRate11Packets=iapStatsTxRate11Packets, realtimeMonitorAverageRSSI=realtimeMonitorAverageRSSI, vlanPoolTableReset=vlanPoolTableReset, systemTempEntry=systemTempEntry, ethStatsTxCollisions=ethStatsTxCollisions, ssidWepDefaultKeyID=ssidWepDefaultKeyID, iapStatsTxRate2Bytes=iapStatsTxRate2Bytes, roamAssistEnable=roamAssistEnable, xr1220hArray=xr1220hArray, idsAssocFloodThreshold=idsAssocFloodThreshold, aclSsidTableReset=aclSsidTableReset, filterType=filterType, systemLicenseMaxNumIAPs=systemLicenseMaxNumIAPs, xr7630Array=xr7630Array, wdsStatsRxRate11Errors=wdsStatsRxRate11Errors, consoleByteSize=consoleByteSize, rates11nMCSStatus=rates11nMCSStatus, stationUnassocRSSIa7=stationUnassocRSSIa7, stationAssuranceTablePeriod=stationAssuranceTablePeriod, proxyMgmtMask09=proxyMgmtMask09, wdsStatsTxRate9Bytes=wdsStatsTxRate9Bytes, stationAssocRSSIa9=stationAssocRSSIa9, xmManage=xmManage, iapStatsRxRate54Retries=iapStatsRxRate54Retries, global11aIAPCellSize=global11aIAPCellSize, licenseFeatureName=licenseFeatureName, stationAssocRSSIa1=stationAssocRSSIa1, iapStatsRxDropped=iapStatsRxDropped, globalDscpMappingMode=globalDscpMappingMode, ssidTable=ssidTable, vlanStatsRxFifoErrors=vlanStatsRxFifoErrors)
mibBuilder.exportSymbols("XIRRUS-MIB", staAssurTimestamp=staAssurTimestamp, systemStandbyTarget=systemStandbyTarget, stationStatsTxPackets=stationStatsTxPackets, stationAssocBand=stationAssocBand, iapStatsRxRate24Retries=iapStatsRxRate24Retries, proxyMgmt=proxyMgmt, iapStatsRxRate9Bytes=iapStatsRxRate9Bytes, groupTrafficLimitSta=groupTrafficLimitSta, systemPostLoginBanner=systemPostLoginBanner, groupTrafficLimitKbpsSta=groupTrafficLimitKbpsSta, xa8_230Array=xa8_230Array, vlanStaAppCatStatsEntry=vlanStaAppCatStatsEntry, oauthTokenId=oauthTokenId, filterSrcSsid=filterSrcSsid, neighborArrayTable=neighborArrayTable, admin=admin, iapChannel=iapChannel, interfaceMACAddressTable=interfaceMACAddressTable, idsEventAvgPackets=idsEventAvgPackets, filterMoveDown=filterMoveDown, wdsStatsRxRate18Retries=wdsStatsRxRate18Retries, roamAssistDataRate=roamAssistDataRate, stationAssociationRSSIa2=stationAssociationRSSIa2, dhcpPoolTableReset=dhcpPoolTableReset, stationUnassociatedTimeRSSIabg3=stationUnassociatedTimeRSSIabg3, wdsStatsTxRate36Bytes=wdsStatsTxRate36Bytes, global11acEnable=global11acEnable, filterListEntry=filterListEntry, stationAssocRSSIabg1=stationAssocRSSIabg1, systemSaveCfg=systemSaveCfg, iapChannelMode=iapChannelMode, wepDefaultKeyID=wepDefaultKeyID, global11nGuardInterval=global11nGuardInterval, rates11nMCSIndex=rates11nMCSIndex, iapStatsTimePeriod=iapStatsTimePeriod, interface=interface, rogueDetectAPOrigTableBand=rogueDetectAPOrigTableBand, wdsStatsRxRate18Bytes=wdsStatsRxRate18Bytes, snmpAgentV3ReadOnlyUserPrivPassphraseEnc=snmpAgentV3ReadOnlyUserPrivPassphraseEnc, cdpInfoTable=cdpInfoTable, iapDescription=iapDescription, idsNullProbeRespPeriod=idsNullProbeRespPeriod, fpgaEntry=fpgaEntry, wdsStatsRxErrors=wdsStatsRxErrors, wprWhitelistGroupTableReset=wprWhitelistGroupTableReset, snmpAgentEnable=snmpAgentEnable, filterAppListTable=filterAppListTable, stationUnassociatedTable=stationUnassociatedTable, PYSNMP_MODULE_ID=xirrus, globalMulticastDnsFilteringTableReset=globalMulticastDnsFilteringTableReset, wdsStatsTxRate11Packets=wdsStatsTxRate11Packets, snmpAgentV3ReadWriteUserPrivPassphraseEnc=snmpAgentV3ReadWriteUserPrivPassphraseEnc, iapStatsRxRate9Packets=iapStatsRxRate9Packets, stationUnassocTimeRSSIa8=stationUnassocTimeRSSIa8, stationStatsTxRate5Packets=stationStatsTxRate5Packets, adminPrivSectionIndex=adminPrivSectionIndex, iapStatsRxRate1Bytes=iapStatsRxRate1Bytes, snmpAgentTrapHost=snmpAgentTrapHost, stationStatsRxRate48Bytes=stationStatsRxRate48Bytes, proxyMgmtSubnet09=proxyMgmtSubnet09, snmpAgentTrapPort3=snmpAgentTrapPort3, ethStatsRxBytes=ethStatsRxBytes, stationAssociationBand=stationAssociationBand, ssidWepKey2Size=ssidWepKey2Size, filterAppCatGuid=filterAppCatGuid, idsStationImpersonationEnable=idsStationImpersonationEnable, systemNetworkAssurancePeriod=systemNetworkAssurancePeriod, realtimeMonitorDot11Busy=realtimeMonitorDot11Busy, xr530Array=xr530Array, ethStatsRxCompressed=ethStatsRxCompressed, iapStatsRxRate5Packets=iapStatsRxRate5Packets, mdmAirWatchApiURL=mdmAirWatchApiURL, autoChannelList11bgStatus=autoChannelList11bgStatus, xd1_120Array=xd1_120Array, ssidRadiusSecServerSecret=ssidRadiusSecServerSecret, ssidHoneypotBroadcastTableReset=ssidHoneypotBroadcastTableReset, oauthTokenIndex=oauthTokenIndex, iapStatsRxFragments=iapStatsRxFragments, wdsStatsRxRate6Retries=wdsStatsRxRate6Retries, iapStatsTxRate2Packets=iapStatsTxRate2Packets, stationAssociationManufacturer=stationAssociationManufacturer, stationAssocKeyMgmt=stationAssocKeyMgmt, stationStatsTxRate5Errors=stationStatsTxRate5Errors, globalMulticastForwardingTableReset=globalMulticastForwardingTableReset, fastRoamingTargetHostname=fastRoamingTargetHostname, spectrumAnalysisNoiseFloor=spectrumAnalysisNoiseFloor, iapStatsRxMulticast=iapStatsRxMulticast, staAssuranceDataRateTimestamp=staAssuranceDataRateTimestamp, vlanUndefinedInfo=vlanUndefinedInfo, stationAssocTimeRSSIa2=stationAssocTimeRSSIa2, idsAPImpersonationThreshold=idsAPImpersonationThreshold, rates11nSet=rates11nSet, iapName=iapName, idsAuthFloodThreshold=idsAuthFloodThreshold, oauthTokenCode=oauthTokenCode, wdsStatsRxRate48Errors=wdsStatsRxRate48Errors, vlanUndefinedEntry=vlanUndefinedEntry, systemLocation=systemLocation, xr1220Array=xr1220Array, stationAssociationRSSIa11=stationAssociationRSSIa11, ethStatsIfaceStatus=ethStatsIfaceStatus, stationUnassocMACAddress=stationUnassocMACAddress, iapSsidToBssidMappingBSSID=iapSsidToBssidMappingBSSID, ssidWepKey4String=ssidWepKey4String, vlanMgmtAppCatStatsVlan=vlanMgmtAppCatStatsVlan, adminEntry=adminEntry, wdsHostLinkIndex=wdsHostLinkIndex, iapStatsTxRate5Retries=iapStatsTxRate5Retries, stationUnassociatedTimeRSSIabg4=stationUnassociatedTimeRSSIabg4, xr2226Array=xr2226Array, ssidDhcpOption=ssidDhcpOption, systemHttpsTimeout=systemHttpsTimeout, filterDstInvertSense=filterDstInvertSense, neighborArrayEntry=neighborArrayEntry, global11bgIAPgProtect=global11bgIAPgProtect, ssidWprSsidName=ssidWprSsidName, ssidMdmAuth=ssidMdmAuth, systemSshEnable=systemSshEnable, cdpHoldTime=cdpHoldTime, dateTime=dateTime, stationStatsRxRate5Errors=stationStatsRxRate5Errors, ssidRadiusSecServerIPAddress=ssidRadiusSecServerIPAddress, stationStatsTxRate48Bytes=stationStatsTxRate48Bytes, stationRadiusAuthFailure=stationRadiusAuthFailure, stationUnassociatedTimeRSSIa5=stationUnassociatedTimeRSSIa5, wdsStatsRxRate18Errors=wdsStatsRxRate18Errors, wdsStatsTxRate11Bytes=wdsStatsTxRate11Bytes, radiusDASPort=radiusDASPort, idsEventPeriod=idsEventPeriod, wdsAutoChannel=wdsAutoChannel, adminPrivilegeLevel=adminPrivilegeLevel, xr2220Array=xr2220Array, ssidWprLogoImage=ssidWprLogoImage, stationAssocTimeRSSIabg3=stationAssocTimeRSSIabg3, stationUnassociatedTxRate=stationUnassociatedTxRate, vlanStaAppStatsVlan=vlanStaAppStatsVlan, idsBeaconFloodMode=idsBeaconFloodMode, staAssuranceErrorRateActive=staAssuranceErrorRateActive, ethStatsIfaceLink=ethStatsIfaceLink, envCtrlTempUnder=envCtrlTempUnder, global11aIAPFragThreshold=global11aIAPFragThreshold, stationAppCatStatsGuid=stationAppCatStatsGuid, stationStatsRxRate1Bytes=stationStatsRxRate1Bytes, iapStatsTxRate48Retries=iapStatsTxRate48Retries, radiusServerInternal=radiusServerInternal, wdsStatsTxRate11Errors=wdsStatsTxRate11Errors, realtimeMonitorEntry=realtimeMonitorEntry, aclTableReset=aclTableReset, dhcpPoolDNSServer3=dhcpPoolDNSServer3, stationStatsTxRate12Errors=stationStatsTxRate12Errors, rogueDetectAPBSSID=rogueDetectAPBSSID, dhcpPoolDNSDomain=dhcpPoolDNSDomain, rates11bgSet=rates11bgSet, stationAssociationOperatingMode=stationAssociationOperatingMode, iapWdsHostLink=iapWdsHostLink, staAssuranceDeviceClass=staAssuranceDeviceClass, iapStatsRxDuplicates=iapStatsRxDuplicates, wdsHostLinkTable=wdsHostLinkTable, generalTraps=generalTraps, global11bgIAPAutoCellMinTxPwr=global11bgIAPAutoCellMinTxPwr, staAssuranceRSSI=staAssuranceRSSI, radius=radius, wpaTKIP=wpaTKIP, wdsClientLinkEntry=wdsClientLinkEntry, xa4_230Array=xa4_230Array, stationAssocTimeRSSIa7=stationAssocTimeRSSIa7, proxyMgmtHttpPort=proxyMgmtHttpPort, clusterArrayUsername=clusterArrayUsername, ssidWepKey1String=ssidWepKey1String, vlanPoolRowStatus=vlanPoolRowStatus, ethStatsTxPackets=ethStatsTxPackets, stationUnassociatedRSSIa2=stationUnassociatedRSSIa2, stationUnassocRSSIa2=stationUnassocRSSIa2, stationAssociationIPAddress=stationAssociationIPAddress, proxyMgmtSubnet08=proxyMgmtSubnet08, locationReportingPeriod=locationReportingPeriod, groupStationLimit=groupStationLimit, proxyFwd=proxyFwd, ssidWpaUPSKServerConnError=ssidWpaUPSKServerConnError, wprWhitelistGroupRowStatus=wprWhitelistGroupRowStatus, stationAssociationDeviceSourceIndex=stationAssociationDeviceSourceIndex, vlanFastRoaming=vlanFastRoaming, ethStatsRxDropped=ethStatsRxDropped, vlanStaAppCatStatsIndex=vlanStaAppCatStatsIndex, locationReportingUrl=locationReportingUrl, staAssurAlarmType=staAssurAlarmType, lldpRequestPower=lldpRequestPower, staAssurDataRateTimestamp=staAssurDataRateTimestamp, cdpInfoInterface=cdpInfoInterface, iapSsidToBssidMappingTable=iapSsidToBssidMappingTable, wdsStatsTxRate54Bytes=wdsStatsTxRate54Bytes, global11acTxBeamForming=global11acTxBeamForming, iapStatsTxRate36Bytes=iapStatsTxRate36Bytes, stationAssociationTimeRSSIa6=stationAssociationTimeRSSIa6, stationAssocTimeRSSIabg1=stationAssocTimeRSSIabg1, wdsStatsRxRate11Bytes=wdsStatsRxRate11Bytes, filterAppGuid=filterAppGuid, iapEntry=iapEntry, staAssuranceAuthFailuresTimestamp=staAssuranceAuthFailuresTimestamp, filterAppCatDescription=filterAppCatDescription, iapStatsRxRate54Packets=iapStatsRxRate54Packets, iapStatsTxRate11Bytes=iapStatsTxRate11Bytes, tunnelTableReset=tunnelTableReset, iapStatsTxRate9Retries=iapStatsTxRate9Retries, wdsStatsRxRate2Errors=wdsStatsRxRate2Errors, wpaPSK=wpaPSK, stationStatsTxRate2Packets=stationStatsTxRate2Packets, autoChannelList11bgIndex=autoChannelList11bgIndex, tunnelMTU=tunnelMTU, stationUnassocNetbiosName=stationUnassocNetbiosName, stationAssociationTable=stationAssociationTable, iapStatsRxRate12Bytes=iapStatsRxRate12Bytes, iapStatsRxFragErrors=iapStatsRxFragErrors, groupTableReset=groupTableReset, rfMonitorTimeshareStationThreshold=rfMonitorTimeshareStationThreshold, ethIPAddress=ethIPAddress, staAssuranceDistanceTimestamp=staAssuranceDistanceTimestamp, global11acMaxMCS2SS=global11acMaxMCS2SS, neighborArrayIndex=neighborArrayIndex, wdsStatsTxPackets=wdsStatsTxPackets, iapEnable=iapEnable, global11a=global11a, xr1226hArray=xr1226hArray, xirrus=xirrus, globalMulticastExcludeIpAddress=globalMulticastExcludeIpAddress, filterAppIndex=filterAppIndex, proxyFwdProxyType=proxyFwdProxyType, rates11nTable=rates11nTable, xh4_230Array=xh4_230Array, componentIndex=componentIndex, adminPrivilege=adminPrivilege, appListMemberIndex=appListMemberIndex, syslogEmailLevel=syslogEmailLevel, filterDstIPAddressMask=filterDstIPAddressMask, location=location, globalIAPBeaconRate=globalIAPBeaconRate, stationStatsTxRate5Bytes=stationStatsTxRate5Bytes, ssidRadiusPriServerSecretForm=ssidRadiusPriServerSecretForm, wdsStatsRxRate5Errors=wdsStatsRxRate5Errors, staAssurAuthFailuresActive=staAssurAuthFailuresActive, snmpAgentKeepAlive=snmpAgentKeepAlive, ethTable=ethTable, systemActivation=systemActivation, wdsClientLinkPassword=wdsClientLinkPassword, vlanStaAppCatStatsGuid=vlanStaAppCatStatsGuid, groupWprServerType=groupWprServerType, iapSsidToBssidMappingSSID=iapSsidToBssidMappingSSID, syslogLevelTerServer=syslogLevelTerServer, iapTxPwr=iapTxPwr, wpaRekey=wpaRekey, stationAssociationDeviceType=stationAssociationDeviceType, radiusUserIndex=radiusUserIndex, autoChannelList11a=autoChannelList11a, radiusSecServerSecret=radiusSecServerSecret)
mibBuilder.exportSymbols("XIRRUS-MIB", syslogConsole=syslogConsole, idsDeauthFloodThreshold=idsDeauthFloodThreshold, stationUnassociatedRSSIa3=stationUnassociatedRSSIa3, interfaceMACAddressIndex=interfaceMACAddressIndex, envCtrlTempOver=envCtrlTempOver, wprWhitelistGroupName=wprWhitelistGroupName, iapStatsTxRate9Packets=iapStatsTxRate9Packets, traps=traps, wdsStatsTxRate36Errors=wdsStatsTxRate36Errors, idsEventCurPackets=idsEventCurPackets, ssidTableReset=ssidTableReset, iapStatsRxRate9Retries=iapStatsRxRate9Retries, stationStatsTxRate36Retries=stationStatsTxRate36Retries, iapStatsRxBytes=iapStatsRxBytes, wdsStatsTxRate12Bytes=wdsStatsTxRate12Bytes, realtimeMonitorIndex=realtimeMonitorIndex, staAssuranceAlarmType=staAssuranceAlarmType, iapStatsIfaceName=iapStatsIfaceName, stationStatsRxRate6Bytes=stationStatsRxRate6Bytes, ledsActivityPacketType=ledsActivityPacketType, dns=dns, iapStatsTxRate6Bytes=iapStatsTxRate6Bytes, xh8_120Array=xh8_120Array, staAssurAuthFailures=staAssurAuthFailures, radiusSecServerHostname=radiusSecServerHostname, wdsStatsTxRate2Bytes=wdsStatsTxRate2Bytes, autoCellByChan=autoCellByChan, envCtrlTemperature=envCtrlTemperature, licenseFeatureTable=licenseFeatureTable, wdsClientLinkMaxIAPs=wdsClientLinkMaxIAPs, stationUnassociatedTimeRSSIa3=stationUnassociatedTimeRSSIa3, vlanStatsRxCompressed=vlanStatsRxCompressed, iapStatsTxTotalErrors=iapStatsTxTotalErrors, iapStatsTxRate18Packets=iapStatsTxRate18Packets, wdsStatsRxRate2Packets=wdsStatsRxRate2Packets, rogueDetectAutoBlockWhitelistChannel=rogueDetectAutoBlockWhitelistChannel, filterProtocol=filterProtocol, spanningTreeWDSHostLink1State=spanningTreeWDSHostLink1State, wdsStatsTxRate5Bytes=wdsStatsTxRate5Bytes, realtimeMonitorSignalToNoiseRatio=realtimeMonitorSignalToNoiseRatio, idsProbeReqFloodMode=idsProbeReqFloodMode, vlanIPAddress=vlanIPAddress, systemFipsMode=systemFipsMode, stationStatsTxRate24Errors=stationStatsTxRate24Errors, stationAssuranceTable=stationAssuranceTable, stationStatsTxRate9Packets=stationStatsTxRate9Packets, xd4_230Array=xd4_230Array, rogueDetectAPRSSI=rogueDetectAPRSSI, iapStatsTxMultipleRetries=iapStatsTxMultipleRetries, iapStatsTxRate18Retries=iapStatsTxRate18Retries, adminPrivSectionName=adminPrivSectionName, idsDurationAttackEnable=idsDurationAttackEnable, ssidWprServerType=ssidWprServerType, clusterArrayIndex=clusterArrayIndex, rates11bgRate=rates11bgRate, stationAssocRSSIa8=stationAssocRSSIa8, wdsClientLinkIndex=wdsClientLinkIndex, iapStatsRxRTS=iapStatsRxRTS, adminHistoryLoginTime=adminHistoryLoginTime, iapBeaconProbeFailureArrayReboot=iapBeaconProbeFailureArrayReboot, vlanMgmtAppCatStatsIndex=vlanMgmtAppCatStatsIndex, stationStatsTxRate11Retries=stationStatsTxRate11Retries, vlanStatsTxCollisions=vlanStatsTxCollisions, rogueDetectAPTimeLastActive=rogueDetectAPTimeLastActive, stationUnassocTimeRSSIabg2=stationUnassocTimeRSSIabg2, aclSsidMacAddress=aclSsidMacAddress, ssidLimitsTrafficLimitKbps=ssidLimitsTrafficLimitKbps, syslogStationUrlLog=syslogStationUrlLog, radiusPriServerSecretEnc=radiusPriServerSecretEnc, idsBeaconFloodThreshold=idsBeaconFloodThreshold, rogueDetectSSIDTable=rogueDetectSSIDTable, iapStatsRxRate36Errors=iapStatsRxRate36Errors, globalMulticastDnsFilteringEntry=globalMulticastDnsFilteringEntry, activeDirectoryLeave=activeDirectoryLeave, ntpPrimaryAuthKeyID=ntpPrimaryAuthKeyID, ntpSecondaryAuthKeyEnc=ntpSecondaryAuthKeyEnc, rates11n=rates11n, filterApplication=filterApplication, xh2_120Array=xh2_120Array, ssidDateOn=ssidDateOn, staAssuranceDistance=staAssuranceDistance, neighborArrayInRange=neighborArrayInRange, ssidHoneypotWhitelistSSID=ssidHoneypotWhitelistSSID, idsEventIndex=idsEventIndex, licenseFeatureEntry=licenseFeatureEntry, systemRDKMode=systemRDKMode, stationUnassocRSSIa8=stationUnassocRSSIa8, iapStatsRxRate1Packets=iapStatsRxRate1Packets, stationAssocTimeRSSIa4=stationAssocTimeRSSIa4, snmpAgentTrapAuth=snmpAgentTrapAuth, wprWhitelistGroupDomain=wprWhitelistGroupDomain, iapStatsTxRate11Retries=iapStatsTxRate11Retries, stationStatsTxRate6Retries=stationStatsTxRate6Retries, staAssurErrorRateTimestamp=staAssurErrorRateTimestamp, radiusAcctPriServerPort=radiusAcctPriServerPort, rates11aTable=rates11aTable, wpaPassphraseEnc=wpaPassphraseEnc, systemTempIndex=systemTempIndex, snmpAgentRestart=snmpAgentRestart, roamAssistDevices=roamAssistDevices, ssidDefaultSecurity=ssidDefaultSecurity, globalIAPMaxStations=globalIAPMaxStations, xh2_240Array=xh2_240Array, ethStatsRxMulticast=ethStatsRxMulticast, idsEventEntry=idsEventEntry, stationAssociationUserName=stationAssociationUserName, iapStatsTxRate24Bytes=iapStatsTxRate24Bytes, ethStatsTxCompressed=ethStatsTxCompressed, componentEntry=componentEntry, adminRadiusSecServer=adminRadiusSecServer, wdsStatsRxRetries=wdsStatsRxRetries, ethSpeed=ethSpeed, stationStatsRxRate54Errors=stationStatsRxRate54Errors, clusterArrayEntry=clusterArrayEntry, syslogSize=syslogSize, bootLoaderVersion=bootLoaderVersion, systemHostname=systemHostname, vlan=vlan, staAssuranceIndex=staAssuranceIndex, stationStatsRxErrors=stationStatsRxErrors, envCtrlTraps=envCtrlTraps, xr1126hArray=xr1126hArray, filterTimeOff=filterTimeOff, xr1226Array=xr1226Array, stationLocPositionZ=stationLocPositionZ, globalMulticastMode=globalMulticastMode, xd1_240Array=xd1_240Array, stationUnassocRSSIabg4=stationUnassocRSSIabg4, wdsStatsRxRate9Errors=wdsStatsRxRate9Errors, globalMulticastVlanForwardingRowStatus=globalMulticastVlanForwardingRowStatus, spectrumAnalysisChannel=spectrumAnalysisChannel, vlanStaAppStatsRxBytes=vlanStaAppStatsRxBytes, dhcpPoolRangeStartIP=dhcpPoolRangeStartIP, tunnelDhcpOption=tunnelDhcpOption, stationAssocTimeRSSIa11=stationAssocTimeRSSIa11, syslogLevelSecServer=syslogLevelSecServer, stationAssocManufacturer=stationAssocManufacturer, snmpAgentTrapHost4=snmpAgentTrapHost4, rogueDetectAPOrigTableIndex=rogueDetectAPOrigTableIndex, globalDot11kSupport=globalDot11kSupport, dhcpPoolEntry=dhcpPoolEntry, adminRadiusPriServerSecret=adminRadiusPriServerSecret, wdsHostLinkState=wdsHostLinkState, wdsStatsTxRate54Packets=wdsStatsTxRate54Packets, iapStatsTxRate54Bytes=iapStatsTxRate54Bytes, ssidHoneypotWhitelistIndex=ssidHoneypotWhitelistIndex, rogueDetectAPStatus=rogueDetectAPStatus, ssidWprSharedSecretForm=ssidWprSharedSecretForm, stationAssocTimeRSSIa6=stationAssocTimeRSSIa6, iap=iap, globalSharpCell=globalSharpCell, stationAssocTimeRSSIabg4=stationAssocTimeRSSIabg4, groupRoamingLayer=groupRoamingLayer, dhcpPoolIndex=dhcpPoolIndex, stationAssociationRSSIa6=stationAssociationRSSIa6, stationUnassocTimeRSSIa9=stationUnassocTimeRSSIa9, stationAssocRSSIa6=stationAssocRSSIa6, stationStatsTxRate36Errors=stationStatsTxRate36Errors, xr1136Array=xr1136Array, iapStatsTxRate12Bytes=iapStatsTxRate12Bytes, iapStatsRxRate54Bytes=iapStatsRxRate54Bytes, ethIndex=ethIndex, neighborArrayNumActiveSSIDs=neighborArrayNumActiveSSIDs, staAssurRSSI=staAssurRSSI, rogueDetectAutoBlockWhitelistTableReset=rogueDetectAutoBlockWhitelistTableReset, vlanStatsEntry=vlanStatsEntry, global11bgIAPTxPwr=global11bgIAPTxPwr, ssidVlanPool=ssidVlanPool, stationAppStatsTableClear=stationAppStatsTableClear, globalMulticastForwardingRowStatus=globalMulticastForwardingRowStatus, globalCountryCode=globalCountryCode, filterDstSsid=filterDstSsid, radiusFailoverTimeout=radiusFailoverTimeout, stationUnassocTimeRSSIa1=stationUnassocTimeRSSIa1, dateTimeDSTAdjust=dateTimeDSTAdjust, rogueDetectAPIPAddress=rogueDetectAPIPAddress, dhcpPoolDNSServer1=dhcpPoolDNSServer1, global11acMultiUserMimo=global11acMultiUserMimo, iapStatsTxRate18Errors=iapStatsTxRate18Errors, radiusAcctSecServerSecret=radiusAcctSecServerSecret, ssidRadiusAcctSecServerHostname=ssidRadiusAcctSecServerHostname, iapSsidToBssidMappingIAP=iapSsidToBssidMappingIAP, vlanStaAppCatStatsVlan=vlanStaAppCatStatsVlan, stationUnassocTxRate=stationUnassocTxRate, systemLicenseExpDate=systemLicenseExpDate, stationUnassociatedRSSIa7=stationUnassociatedRSSIa7, ssidVlan=ssidVlan, staAssuranceRSSITimestamp=staAssuranceRSSITimestamp, vlanStaAppCatStatsTxBytes=vlanStaAppCatStatsTxBytes, iapStatsRxRate6Retries=iapStatsRxRate6Retries, stationStatsEntry=stationStatsEntry, vlanStaAppCatStatsRxPackets=vlanStaAppCatStatsRxPackets, realtimeMonitorIfaceName=realtimeMonitorIfaceName, stationStatsTxRate1Errors=stationStatsTxRate1Errors, xd4_120Array=xd4_120Array, rogueDetectSSIDIndex=rogueDetectSSIDIndex, encDoorOpened=encDoorOpened, globalExtractStaInfoType=globalExtractStaInfoType, wdsStatsTxRetries=wdsStatsTxRetries, wdsStatsRxRate1Bytes=wdsStatsRxRate1Bytes, wdsStatsTxRate1Errors=wdsStatsTxRate1Errors, stationStatsTxRate54Errors=stationStatsTxRate54Errors, dhcpPoolNAT=dhcpPoolNAT, wdsStatsRxRate36Retries=wdsStatsRxRate36Retries, ssidWprUrl=ssidWprUrl, scdFirmwareVersion=scdFirmwareVersion, xd2_130Array=xd2_130Array, mdmAirWatchApiUsername=mdmAirWatchApiUsername, xr2235Array=xr2235Array, wdsClientLinkEnable=wdsClientLinkEnable, consoleBaud=consoleBaud, stationStatsTxRate11Bytes=stationStatsTxRate11Bytes, globalMulticastDnsFilteringRowStatus=globalMulticastDnsFilteringRowStatus, iapStatsTxDropped=iapStatsTxDropped, adminLogout=adminLogout, systemTelnetPort=systemTelnetPort, stationUnassociatedRSSIa4=stationUnassociatedRSSIa4, iapBondedChannelList=iapBondedChannelList, systemUptime=systemUptime, systemFanSpeed=systemFanSpeed, stationAppStatsTxBytes=stationAppStatsTxBytes, spanningTreeTable=spanningTreeTable, stationAssuranceSNR=stationAssuranceSNR, adminRadiusPriServerPort=adminRadiusPriServerPort, ethStatsRxFifoErrors=ethStatsRxFifoErrors, rogueDetectAPOrigTableManufacturer=rogueDetectAPOrigTableManufacturer, spanningTreeWDSHostLink2State=spanningTreeWDSHostLink2State, stationStatsTxRate1Retries=stationStatsTxRate1Retries, proxyMgmtHttpsPort=proxyMgmtHttpsPort, globalIAPLongRetry=globalIAPLongRetry, stationAppStatsMACAddress=stationAppStatsMACAddress, iapStatsTxRate24Errors=iapStatsTxRate24Errors, rogueDetectSSIDEntry=rogueDetectSSIDEntry, ssidHoneypotWhitelistEntry=ssidHoneypotWhitelistEntry, stationStatsRxRate5Retries=stationStatsRxRate5Retries, snmpAgentReadOnlyCommunityEnc=snmpAgentReadOnlyCommunityEnc, stationStatsRxRate1Packets=stationStatsRxRate1Packets, rogueDetectAPManufacturer=rogueDetectAPManufacturer, staAssuranceRetryRateActive=staAssuranceRetryRateActive, groupRadiusFilterID=groupRadiusFilterID, iapIndex=iapIndex, adminRadiusTimeout=adminRadiusTimeout, iapStatsTxRate1Errors=iapStatsTxRate1Errors, staAssurErrorRateActive=staAssurErrorRateActive, wdsStatsTxRate12Retries=wdsStatsTxRate12Retries, xr2430Array=xr2430Array, staAssurRSSIActive=staAssurRSSIActive, staAssuranceErrorRate=staAssuranceErrorRate, fastRoamingEnable=fastRoamingEnable, groupWprSplashTimeout=groupWprSplashTimeout, xr2225hArray=xr2225hArray, resetArray=resetArray, iapStatsRxRate2Bytes=iapStatsRxRate2Bytes, oauthTokenClientId=oauthTokenClientId)
mibBuilder.exportSymbols("XIRRUS-MIB", vlanRowStatus=vlanRowStatus, groupTrafficLimit=groupTrafficLimit, stationStatsRxRate36Packets=stationStatsRxRate36Packets, aclMacAddress=aclMacAddress, idsEventIAP=idsEventIAP, wdsStatsRxRate54Packets=wdsStatsRxRate54Packets, wdsHostLinkSSID=wdsHostLinkSSID, neighborArrayLocation=neighborArrayLocation, vlanMgmtAppCatStatsTimePeriod=vlanMgmtAppCatStatsTimePeriod, ethName=ethName, wdsClientLinkTableReset=wdsClientLinkTableReset, groupDaysOnWed=groupDaysOnWed, global11aIAPAutoCellMinTxPwr=global11aIAPAutoCellMinTxPwr, activeDirectoryWorkgroup=activeDirectoryWorkgroup, ethStatsTxDropped=ethStatsTxDropped, staAssurSNR=staAssurSNR, staAssuranceDataRateActive=staAssuranceDataRateActive, stationAssocCipher=stationAssocCipher, xr7226Array=xr7226Array, filterAppCategory=filterAppCategory, radiusNasIdentifier=radiusNasIdentifier, groupTimeOn=groupTimeOn, realtimeMonitorTable=realtimeMonitorTable, xr7620Array=xr7620Array, global11nBondedChannelWidth2GHz=global11nBondedChannelWidth2GHz, netflow=netflow, groupTable=groupTable, wdsStatsRxRate24Packets=wdsStatsRxRate24Packets, rates11bgIndex=rates11bgIndex, rfMonitor=rfMonitor, adminPrivLevelEntry=adminPrivLevelEntry, snmpAgentTrapPort=snmpAgentTrapPort, staAssurNetbiosName=staAssurNetbiosName, lldpInterval=lldpInterval, ssidRadiusSecServerHostname=ssidRadiusSecServerHostname, ssidLimitsTrafficLimit=ssidLimitsTrafficLimit, radiusUserTable=radiusUserTable, ssidWepKey3Size=ssidWepKey3Size, rogueDetectSSIDMatch=rogueDetectSSIDMatch, filterAppListEntry=filterAppListEntry, ethStatsRxTotalErrors=ethStatsRxTotalErrors, iapCellSize=iapCellSize, stationAppCatStatsIndex=stationAppCatStatsIndex, filterSrcIface=filterSrcIface, vlanPoolListMember=vlanPoolListMember, stationUnassociatedRSSIa9=stationUnassociatedRSSIa9, wdsStatsTxRate2Retries=wdsStatsTxRate2Retries, vlanMgmtAppCatStatsTable=vlanMgmtAppCatStatsTable, wdsStatsRxRate24Retries=wdsStatsRxRate24Retries, radiusUserEntry=radiusUserEntry, netflowCollectorPort=netflowCollectorPort, xh1_120Array=xh1_120Array, snmpAgentTrapPort4=snmpAgentTrapPort4, xr620Array=xr620Array, wdsStpEnable=wdsStpEnable, xr2425hArray=xr2425hArray, xr2436Array=xr2436Array, wdsStatsTxRate9Retries=wdsStatsTxRate9Retries, filter=filter, idsAPImpersonationPeriod=idsAPImpersonationPeriod, wdsStatsRxBytes=wdsStatsRxBytes, iapStatsTxRate24Retries=iapStatsTxRate24Retries, idsAuthFloodMode=idsAuthFloodMode, rogueDetectAPOrigTableType=rogueDetectAPOrigTableType, stationAssocRSSIa4=stationAssocRSSIa4, bondEntry=bondEntry, proxyMgmtHttpUsername=proxyMgmtHttpUsername, stationUnassocTimeRSSIabg4=stationUnassocTimeRSSIabg4, filterTableReset=filterTableReset, ssidTunnel=ssidTunnel, xd8_240Array=xd8_240Array, oauthTokenUserAgent=oauthTokenUserAgent, groupFallback=groupFallback, radiusAcctSecServerPort=radiusAcctSecServerPort, proxyMgmtMask04=proxyMgmtMask04, ssidRadiusAcctPriServerPort=ssidRadiusAcctPriServerPort, stationStatsRxRate11Errors=stationStatsRxRate11Errors, ethIPMask=ethIPMask, xr2435hArray=xr2435hArray, ssidWepKey3String=ssidWepKey3String, groupWprEnable=groupWprEnable, xa3_230Array=xa3_230Array, rfMonitorTimeshareScanInterval=rfMonitorTimeshareScanInterval, tunnelFailoverNumFailures=tunnelFailoverNumFailures, stationAssociationSSID=stationAssociationSSID, rogueDetectSSIDStatus=rogueDetectSSIDStatus, proxyMgmtSocksPassword=proxyMgmtSocksPassword, iapStatsRxRate18Errors=iapStatsRxRate18Errors, iapStatsTxUtilization=iapStatsTxUtilization, stationUnassociatedTimeRSSIa1=stationUnassociatedTimeRSSIa1, wdsStatsRxRate6Packets=wdsStatsRxRate6Packets, stationAssociationRSSIa4=stationAssociationRSSIa4, wprWhitelistSsidDomain=wprWhitelistSsidDomain, iapBeaconProbeFailure=iapBeaconProbeFailure, oauthTokenType=oauthTokenType, ethStatsIndex=ethStatsIndex, iapStatsRxRate48Retries=iapStatsRxRate48Retries, global11acMaxMCS4SS=global11acMaxMCS4SS, ssidRoamingLayer=ssidRoamingLayer, stationAssociationRSSIabg3=stationAssociationRSSIabg3, fastRoamingTargetArrayTableReset=fastRoamingTargetArrayTableReset, systemLicenseFeatures=systemLicenseFeatures, ssidRowStatus=ssidRowStatus, activeDirectoryUser=activeDirectoryUser, systemMaxAuthAttempts=systemMaxAuthAttempts, radiusUserPasswordForm=radiusUserPasswordForm, staAssuranceRetryRateTimestamp=staAssuranceRetryRateTimestamp, systemTempTable=systemTempTable, stationStatsTxRate18Bytes=stationStatsTxRate18Bytes, iapStatsRxEncErrors=iapStatsRxEncErrors, globalMulticastExcludeIndex=globalMulticastExcludeIndex, vlanUndefinedIndex=vlanUndefinedIndex, wdsHostLinkNumIAPs=wdsHostLinkNumIAPs, dhcpRenewFailure=dhcpRenewFailure, staAssuranceAssocTimeTimestamp=staAssuranceAssocTimeTimestamp, xs3500_512Array=xs3500_512Array, ethEntry=ethEntry, xs12Array=xs12Array, staAssurMACAddress=staAssurMACAddress, licenseFeatureIndex=licenseFeatureIndex, xa8_120Array=xa8_120Array, groupDaysOnSat=groupDaysOnSat, oauthTokenEntry=oauthTokenEntry, stationAssocTimeRSSIabg2=stationAssocTimeRSSIabg2, stationAssocRSSIabg4=stationAssocRSSIabg4, ssidWpaUPSKCacheTimeout=ssidWpaUPSKCacheTimeout, xa2_120Array=xa2_120Array, filterPort=filterPort, stationStatsTxRate36Packets=stationStatsTxRate36Packets, stationUnassocRSSIa12=stationUnassocRSSIa12, iapSpatialStreams=iapSpatialStreams, globalIAPMaxPhones=globalIAPMaxPhones, vlanStatsNumber=vlanStatsNumber, stationUnassociatedRSSIabg4=stationUnassociatedRSSIabg4, dhcpPoolDNSServer2=dhcpPoolDNSServer2, oauthTokenRowStatus=oauthTokenRowStatus, dhcpPoolEnable=dhcpPoolEnable, stationUnassocRSSIa6=stationUnassocRSSIa6, mdmAirWatchRedirectURL=mdmAirWatchRedirectURL, roamAssistThreshold=roamAssistThreshold, rfMonitorTimeshareTrafficThreshold=rfMonitorTimeshareTrafficThreshold, iapStatsRxOverruns=iapStatsRxOverruns, rfMonitorMode=rfMonitorMode, ethMTU=ethMTU, globalAutoBandEnable=globalAutoBandEnable, autoChannelEnable=autoChannelEnable, wdsStatsRxRate1Packets=wdsStatsRxRate1Packets, systemCrashInfo=systemCrashInfo, interfaceMACAddressEntry=interfaceMACAddressEntry, xr2426hArray=xr2426hArray, syslogIndex=syslogIndex, filterSrcType=filterSrcType, wifiTagEnable=wifiTagEnable, stationStatsRxRate5Packets=stationStatsRxRate5Packets, filterIndex=filterIndex, stationUnassociatedTimeRSSIa11=stationUnassociatedTimeRSSIa11, filterAppEntry=filterAppEntry, idsEventTimestamp=idsEventTimestamp, iapStatsRxRate48Bytes=iapStatsRxRate48Bytes, iapStatsRxRate5Retries=iapStatsRxRate5Retries, ethStatsTxTotalErrors=ethStatsTxTotalErrors, iapMaxStationsMonth=iapMaxStationsMonth, stationAssocRSSIa12=stationAssocRSSIa12, global11bgIAPFragThreshold=global11bgIAPFragThreshold, xr4436Array=xr4436Array, global11bgIAPMaxStations=global11bgIAPMaxStations, stationAssociationTimeRSSIa9=stationAssociationTimeRSSIa9, dhcpPoolRangeEndIP=dhcpPoolRangeEndIP, wprWhitelistSsidIndex=wprWhitelistSsidIndex, xr2436hArray=xr2436hArray, adminRadiusSecServerPort=adminRadiusSecServerPort, filterMoveUp=filterMoveUp, stationStatsTxRate11Packets=stationStatsTxRate11Packets, ssidWprLandingPage=ssidWprLandingPage, rates11aIndex=rates11aIndex, ssidBand=ssidBand, ssidRadiusEnable=ssidRadiusEnable, filterPackets=filterPackets, systemPCIAuditMode=systemPCIAuditMode, staAssuranceIPAddress=staAssuranceIPAddress, clusterArrayIPAddress=clusterArrayIPAddress, wdsStatsRxRate24Errors=wdsStatsRxRate24Errors, vlanMgmtAppCatStatsTxBytes=vlanMgmtAppCatStatsTxBytes, stationUnassocTimeRSSIa2=stationUnassocTimeRSSIa2, stationUnassocRSSIabg1=stationUnassocRSSIabg1, wprWhitelistSsidTableReset=wprWhitelistSsidTableReset, idsAuthFloodPeriod=idsAuthFloodPeriod, groupWprLandingPage=groupWprLandingPage, globalExtractStaInfoIndex=globalExtractStaInfoIndex, radiusAcctSecServerHostname=radiusAcctSecServerHostname, stationStatsMACAddress=stationStatsMACAddress, stationStatsRxRate5Bytes=stationStatsRxRate5Bytes, syslogSecServer=syslogSecServer, syslogEntry=syslogEntry, ledsEnable=ledsEnable, stations=stations, aclTable=aclTable, ssidAclEnable=ssidAclEnable, ssidLimitsStationLimit=ssidLimitsStationLimit, stationAssociationKeyMgmt=stationAssociationKeyMgmt, iapStatsTxRate9Bytes=iapStatsTxRate9Bytes, syslogTerServer=syslogTerServer, stationLocPositionY=stationLocPositionY, iapStatsTxRate1Retries=iapStatsTxRate1Retries, stationStatsTxRetries=stationStatsTxRetries, timeThisBoot=timeThisBoot, filterDstIface=filterDstIface, iapStatsRxRate12Retries=iapStatsRxRate12Retries, ssidLimitsEntry=ssidLimitsEntry, ssidWprBackground=ssidWprBackground, vlanStaAppStatsGuid=vlanStaAppStatsGuid, iapStatsRxRate6Errors=iapStatsRxRate6Errors, ssidRadiusAcctSecServerIPAddress=ssidRadiusAcctSecServerIPAddress, xr630Array=xr630Array, ssidLimitsTable=ssidLimitsTable, xh2_230Array=xh2_230Array, radiusPriServerHostname=radiusPriServerHostname, wdsStatsRxRate2Retries=wdsStatsRxRate2Retries, appListMemberRowStatus=appListMemberRowStatus, wepKeyTable=wepKeyTable, autoChannelList11bgChannel=autoChannelList11bgChannel, rogueDetectAPOrigTableBSSID=rogueDetectAPOrigTableBSSID, stationAssocTimeRSSIa12=stationAssocTimeRSSIa12, staAssurDistance=staAssurDistance, wdsStatsTxRate1Bytes=wdsStatsTxRate1Bytes, stationUnassociatedMediaType=stationUnassociatedMediaType, xd2_240Array=xd2_240Array, vlanStatsTxDropped=vlanStatsTxDropped, vlanMgmtAppStatsGuid=vlanMgmtAppStatsGuid, vlanStaAppStatsEntry=vlanStaAppStatsEntry, xr1147Array=xr1147Array, vlanTunnelSecret=vlanTunnelSecret, global11bgIAPRTSThreshold=global11bgIAPRTSThreshold, iapStatsTxACKFailures=iapStatsTxACKFailures, ethLED=ethLED, syslogEmailToAddress=syslogEmailToAddress, iapStatsTxRate36Errors=iapStatsTxRate36Errors, xd1_230Array=xd1_230Array, stationAssuranceEntry=stationAssuranceEntry, fastRoamingPeerMode=fastRoamingPeerMode, stationUnassociatedRSSIa5=stationUnassociatedRSSIa5, proxyFwdBlueCoatUrl=proxyFwdBlueCoatUrl, stationStatsTxRate6Errors=stationStatsTxRate6Errors, iapMaxStationsDay=iapMaxStationsDay, tunnelEnable=tunnelEnable, xr1130hArray=xr1130hArray, rogueDetectAPOrigTableIPAddress=rogueDetectAPOrigTableIPAddress, wdsStatsIndex=wdsStatsIndex, staAssuranceRetryRate=staAssuranceRetryRate, wpr=wpr, ledsActivityEntry=ledsActivityEntry, xr4420Array=xr4420Array, ssidRadiusPriServerPort=ssidRadiusPriServerPort, stationUnassociatedRSSIa12=stationUnassociatedRSSIa12)
mibBuilder.exportSymbols("XIRRUS-MIB", stationAssuranceAssocTime=stationAssuranceAssocTime, staAssuranceTimestamp=staAssuranceTimestamp, consoleParity=consoleParity, ntpEnable=ntpEnable, ssidLimitsEnable=ssidLimitsEnable, appListMemberEntry=appListMemberEntry, ssidHoneypotWhitelistTableReset=ssidHoneypotWhitelistTableReset, stationAssocEncType=stationAssocEncType, vlanStatsRxMulticast=vlanStatsRxMulticast, systemCompassHeading=systemCompassHeading, wdsStatsTxRate9Errors=wdsStatsTxRate9Errors, stationUnassociatedRSSIabg1=stationUnassociatedRSSIabg1, stationStatsRxRate24Packets=stationStatsRxRate24Packets, systemResetCode=systemResetCode, idsDisassocFloodThreshold=idsDisassocFloodThreshold, idsEAPFloodMode=idsEAPFloodMode, aclEnable=aclEnable, adminPrivSectionLevel=adminPrivSectionLevel, staAssuranceDeviceType=staAssuranceDeviceType, spanningTreeVlanName=spanningTreeVlanName, wdsStatsRxRate9Packets=wdsStatsRxRate9Packets, mdm=mdm, arrayModel=arrayModel, globalIAPChannelReset=globalIAPChannelReset, stationStatsTxRate54Bytes=stationStatsTxRate54Bytes, wdsStatsRxRate11Packets=wdsStatsRxRate11Packets, ethStatsTxBytes=ethStatsTxBytes, filterList=filterList, global11bgIAPSlotTime=global11bgIAPSlotTime, stationUnassociatedTimeRSSIa7=stationUnassociatedTimeRSSIa7, iapStatsRxRate36Packets=iapStatsRxRate36Packets, mdmAirWatchApiPassword=mdmAirWatchApiPassword, interfaceName=interfaceName, dhcpPoolTable=dhcpPoolTable, softwareUpgradeSuccess=softwareUpgradeSuccess, consoleStopBits=consoleStopBits, iapStatsRxRate36Retries=iapStatsRxRate36Retries, stationUnassociatedTimeRSSIa10=stationUnassociatedTimeRSSIa10, iapStatsEntry=iapStatsEntry, iapStatsNoiseTotal=iapStatsNoiseTotal, staAssurAssocTime=staAssurAssocTime, proxyMgmtSubnet06=proxyMgmtSubnet06, iapChannelBondMode=iapChannelBondMode, snmpAgent=snmpAgent, iapResetsSystem=iapResetsSystem, stationStatsRxRate54Retries=stationStatsRxRate54Retries, wdsStatsTxRate24Errors=wdsStatsTxRate24Errors, rogueDetectAPOrigTableChannel=rogueDetectAPOrigTableChannel, systemHttpsCertificate=systemHttpsCertificate, snmpAgentTrapHost3=snmpAgentTrapHost3, proxyMgmtMask05=proxyMgmtMask05, xd2_230Array=xd2_230Array, snmpAgentV3ReadOnlyUser=snmpAgentV3ReadOnlyUser, ssidWprSharedSecret=ssidWprSharedSecret, autoChannelPowerUp=autoChannelPowerUp, syslogEmailPort=syslogEmailPort, stationUnassociatedNetbiosName=stationUnassociatedNetbiosName, systemMIBVersion=systemMIBVersion, iapStatsRxRate2Packets=iapStatsRxRate2Packets, proxyMgmtSubnet02=proxyMgmtSubnet02, groupName=groupName, stationUnassociatedTablePeriod=stationUnassociatedTablePeriod, wdsStatsRxRate12Retries=wdsStatsRxRate12Retries, stationStatsIndex=stationStatsIndex, filterTimeOn=filterTimeOn, wep=wep, xr530hArray=xr530hArray, ssidWepKey1Size=ssidWepKey1Size, wdsStatsTxRate12Packets=wdsStatsTxRate12Packets, wdsStatsTxRate1Packets=wdsStatsTxRate1Packets, stationUnassocRSSIa10=stationUnassocRSSIa10, globalIAPEnable=globalIAPEnable, filterDstVlan=filterDstVlan, autoChannelSchedule=autoChannelSchedule, iapMaxStationsHour=iapMaxStationsHour, stationUnassociatedTimeRSSIa8=stationUnassociatedTimeRSSIa8, vlanMgmtAppStatsTxPackets=vlanMgmtAppStatsTxPackets, systemArrayInfo=systemArrayInfo, spanningTreeWDSHostLink3State=spanningTreeWDSHostLink3State, vlanTunnelPort=vlanTunnelPort, global11acGuardInterval=global11acGuardInterval, staAssuranceActiveAlarmType=staAssuranceActiveAlarmType, vlanStatsRxDropped=vlanStatsRxDropped, systemStandbyEnable=systemStandbyEnable, ssidLimitsTrafficLimitKbpsSta=ssidLimitsTrafficLimitKbpsSta, stationAssocRSSIa5=stationAssocRSSIa5, wdsStatsTxRate18Errors=wdsStatsTxRate18Errors, ssidRadiusPriServerIPAddress=ssidRadiusPriServerIPAddress, proxyMgmtHttpHost=proxyMgmtHttpHost, stationAssociationTimeRSSIabg4=stationAssociationTimeRSSIabg4, rogueDetectAPType=rogueDetectAPType, staAssurIPAddress=staAssurIPAddress, globalMulticastVlanForwardingVlanNumber=globalMulticastVlanForwardingVlanNumber, stationAssocTime=stationAssocTime, iapStatsTxRate2Errors=iapStatsTxRate2Errors, positionInfoY=positionInfoY, vlanTunnelServer=vlanTunnelServer, filterListReset=filterListReset, wdsStatsTxRate24Bytes=wdsStatsTxRate24Bytes, stationAssocDeviceSource=stationAssocDeviceSource, realtimeMonitorAverageDataRate=realtimeMonitorAverageDataRate, stationAssociationUserAgent=stationAssociationUserAgent, oauthTokenExpiration=oauthTokenExpiration, stationStatsRxRate2Packets=stationStatsRxRate2Packets, oauthTokenScope=oauthTokenScope, rogueDetectAutoBlockRSSI=rogueDetectAutoBlockRSSI, ethPortMode=ethPortMode, snmpAgentReadOnlyCommunity=snmpAgentReadOnlyCommunity, dhcpPoolMaxLease=dhcpPoolMaxLease, syslogPriServerPort=syslogPriServerPort, stationUnassociatedTimeRSSIa12=stationUnassociatedTimeRSSIa12, systemContactName=systemContactName, rogueDetectAPOrigTableSecurity=rogueDetectAPOrigTableSecurity, stationUnassocTimeRSSIa12=stationUnassocTimeRSSIa12, ssidRadiusAcctEnable=ssidRadiusAcctEnable, xr2447Array=xr2447Array, staAssuranceAssocTimeActive=staAssuranceAssocTimeActive, iapStatsTxRate36Retries=iapStatsTxRate36Retries, acl=acl, ethStatsIfaceSpeed=ethStatsIfaceSpeed, xr7636Array=xr7636Array, roamAssist=roamAssist, ssidRadiusAcctInterval=ssidRadiusAcctInterval, vlanMgmtAppStatsTxBytes=vlanMgmtAppStatsTxBytes, ssidWprAuthType=ssidWprAuthType, global11bgIAPChannelReset=global11bgIAPChannelReset, proxyMgmtHttpsPassword=proxyMgmtHttpsPassword, stationAssocUserName=stationAssocUserName, mdmAirWatchApiKey=mdmAirWatchApiKey, adminRadiusPriServer=adminRadiusPriServer, stationAssociationCipher=stationAssociationCipher, stationUnassociatedRSSIa10=stationUnassociatedRSSIa10, stationStatsRxRate24Errors=stationStatsRxRate24Errors, ssidHoneypotBroadcastRowStatus=ssidHoneypotBroadcastRowStatus, filterAppTable=filterAppTable, spectrumAnalysisIndex=spectrumAnalysisIndex, xh8_130Array=xh8_130Array, mdmAirWatchApiPollPeriod=mdmAirWatchApiPollPeriod, wdsStatsRxRate6Errors=wdsStatsRxRate6Errors, globalMulticastExcludeRowStatus=globalMulticastExcludeRowStatus, wifiTag=wifiTag, staAssurSNRActive=staAssurSNRActive, bondMode=bondMode, stationAssociationRSSIabg1=stationAssociationRSSIabg1, stationAssociationRSSIa1=stationAssociationRSSIa1, stationUnassocRSSIa3=stationUnassocRSSIa3, vlanNumber=vlanNumber, iapStatsTxRate24Packets=iapStatsTxRate24Packets, position=position, bondIndex=bondIndex, xr1147hArray=xr1147hArray, groupWprUrl=groupWprUrl, systemTempComponent=systemTempComponent, stationAssocRSSIabg2=stationAssocRSSIabg2, idsEventMacAddress=idsEventMacAddress, stationAssuranceRetryRate=stationAssuranceRetryRate, realtimeMonitorNoiseFloor=realtimeMonitorNoiseFloor, tunnelName=tunnelName, autoChannelList11bgSet=autoChannelList11bgSet, stationAssocMediaType=stationAssocMediaType, idsNullProbeRespThreshold=idsNullProbeRespThreshold, stationStatsRxRate18Bytes=stationStatsRxRate18Bytes, groupIndex=groupIndex, stationAssociationMediaType=stationAssociationMediaType, wdsClientLinkTarget=wdsClientLinkTarget, proxyMgmtHttpsUsername=proxyMgmtHttpsUsername, ssidLimitsDaysOnMon=ssidLimitsDaysOnMon, iapMaxStationsWeek=iapMaxStationsWeek, globalDscpMappingDscp=globalDscpMappingDscp, iapSsidToBssidMappingIndex=iapSsidToBssidMappingIndex, stationStatsRxRate2Errors=stationStatsRxRate2Errors, aclEntry=aclEntry, idsDeauthFloodMode=idsDeauthFloodMode, fastRoamingLayer=fastRoamingLayer, wdsStatsTxErrors=wdsStatsTxErrors, ssidEntry=ssidEntry, ssidExpiration=ssidExpiration, xr4447Array=xr4447Array, cdpInfoCapabilities=cdpInfoCapabilities, adminHistoryIndex=adminHistoryIndex, vlanMgmt=vlanMgmt, globalMulticastDnsFilteringTable=globalMulticastDnsFilteringTable, systemXirconTimeout=systemXirconTimeout, neighborArrayFastRoam=neighborArrayFastRoam, filterPortRange=filterPortRange, globalMgmt=globalMgmt, stationStatsTxRate6Packets=stationStatsTxRate6Packets, stationAssociationEncType=stationAssociationEncType, adminRadiusSecServerSecretEnc=adminRadiusSecServerSecretEnc, rogueDetectAPOrigTableTimeLastActive=rogueDetectAPOrigTableTimeLastActive, radiusAcctPriServerIPAddress=radiusAcctPriServerIPAddress, idsDisassocAttackPeriod=idsDisassocAttackPeriod, global11aIAPRTSThreshold=global11aIAPRTSThreshold, groupDaysOnTue=groupDaysOnTue, ssidDateOff=ssidDateOff, dhcpPoolDefaultLease=dhcpPoolDefaultLease, stationAssociationRSSIa10=stationAssociationRSSIa10, adminHistoryInterface=adminHistoryInterface, stationAssociationRSSIa5=stationAssociationRSSIa5, proxyMgmtSubnet07=proxyMgmtSubnet07, stationAssocUserAgent=stationAssocUserAgent, vlanMgmtAppCatStatsRxPackets=vlanMgmtAppCatStatsRxPackets, xr7247Array=xr7247Array, filterListRowStatus=filterListRowStatus, adminTraps=adminTraps, filterDstGroup=filterDstGroup, lldp=lldp, filterAppCatIndex=filterAppCatIndex, syslogServer=syslogServer, iapStatsTxFragments=iapStatsTxFragments, ntpPrimaryAuthKeyEnc=ntpPrimaryAuthKeyEnc, groupTimeOff=groupTimeOff, ssidRadiusSecServerPort=ssidRadiusSecServerPort, adminTableReset=adminTableReset, cdpInfoModel=cdpInfoModel, rates11bgStatus=rates11bgStatus, radiusUserRowStatus=radiusUserRowStatus, aclSsidTable=aclSsidTable, fastRoamingTargetType=fastRoamingTargetType, vlanStatsIndex=vlanStatsIndex, stationUnassocTimeRSSIa6=stationUnassocTimeRSSIa6, vlanPoolTable=vlanPoolTable, ssidEncryption=ssidEncryption, iapStatsRxRate2Retries=iapStatsRxRate2Retries, stationStatsRxRate2Retries=stationStatsRxRate2Retries, ethEnable=ethEnable, ssidWpaPassphraseForm=ssidWpaPassphraseForm, adminPasswordForm=adminPasswordForm, iapStatsTxRate54Packets=iapStatsTxRate54Packets, wdsStatsTxRate6Errors=wdsStatsTxRate6Errors, vlanPoolIndex=vlanPoolIndex, xh8_240Array=xh8_240Array, vlanStaAppCatStatsTimePeriod=vlanStaAppCatStatsTimePeriod, stationUnassocRSSIa4=stationUnassocRSSIa4, idsDosAttack=idsDosAttack, ethStatsRxFrameErrors=ethStatsRxFrameErrors, wdsStatsRxRate36Errors=wdsStatsRxRate36Errors, idsEventSSID=idsEventSSID, iapChannelBond80Mhz=iapChannelBond80Mhz, global11bgIAPPreamble=global11bgIAPPreamble, filterSrcGroup=filterSrcGroup, global11bgIAPAutoCellByChan=global11bgIAPAutoCellByChan, global11acAutoBond=global11acAutoBond, xh2_130Array=xh2_130Array, radiusUserTableReset=radiusUserTableReset, vlanStatsTxFifoErrors=vlanStatsTxFifoErrors, ssidRadiusAcctPriServerSecretForm=ssidRadiusAcctPriServerSecretForm, staAssurRetryRateTimestamp=staAssurRetryRateTimestamp, tunnelTable=tunnelTable, xd8_130Array=xd8_130Array, ssidWprFooterText=ssidWprFooterText, filterSetDSCP=filterSetDSCP, oauth=oauth, stationAssociationRSSIa8=stationAssociationRSSIa8)
mibBuilder.exportSymbols("XIRRUS-MIB", idsAssocFloodPeriod=idsAssocFloodPeriod, netflowCollectorHost=netflowCollectorHost, globalMulticastForwardingEntry=globalMulticastForwardingEntry, ethStatsTimePeriod=ethStatsTimePeriod, xr6826Array=xr6826Array, ntpPrimaryAuthKey=ntpPrimaryAuthKey, idsDeauthAttackThreshold=idsDeauthAttackThreshold, filterSrcMacAddress=filterSrcMacAddress, iapStatsTxRate48Packets=iapStatsTxRate48Packets, realtimeMonitorBytes=realtimeMonitorBytes, xn12Array=xn12Array, ssidLimitsTimeOn=ssidLimitsTimeOn, stationUnassociatedRSSI=stationUnassociatedRSSI, systemRemoteConfigFile=systemRemoteConfigFile, wifiTagChannel1=wifiTagChannel1, ssidWpaPSK=ssidWpaPSK, vlanStatsTxPackets=vlanStatsTxPackets, stationAppStatsTable=stationAppStatsTable, iapStatsTxRTSFailures=iapStatsTxRTSFailures, ssidWprIndex=ssidWprIndex, componentDate=componentDate, xr4830Array=xr4830Array, cdpEnable=cdpEnable, globalLoadBalancing=globalLoadBalancing, iapStatsTxCTS=iapStatsTxCTS, autoChannelList11aTable=autoChannelList11aTable, idsNullProbeRespEnable=idsNullProbeRespEnable, fastRoamingTargetEntry=fastRoamingTargetEntry, ssidName=ssidName, stationAssurTable=stationAssurTable, stationStatsTxRate18Packets=stationStatsTxRate18Packets, radiusDASTimeWindow=radiusDASTimeWindow, idsEAPFloodThreshold=idsEAPFloodThreshold, snmpAgentV3ReadWriteUserAuthPassphrase=snmpAgentV3ReadWriteUserAuthPassphrase, filterSrcInvertSense=filterSrcInvertSense, vlanStatsRxTotalErrors=vlanStatsRxTotalErrors, console=console, global11aIAPChannelReset=global11aIAPChannelReset, stationUnassociatedRSSIa11=stationUnassociatedRSSIa11, idsMICErrorAttackEnable=idsMICErrorAttackEnable, stationAssociationEntry=stationAssociationEntry, iapStatsRxRate6Packets=iapStatsRxRate6Packets, iapStatsTxMulticast=iapStatsTxMulticast, activeDirectoryRealm=activeDirectoryRealm, neighborArrayNumIAPsUp=neighborArrayNumIAPsUp, stationAppCatStatsEntry=stationAppCatStatsEntry, clusterArrayPasswordForm=clusterArrayPasswordForm, stationACLFailure=stationACLFailure, iapStatsTxRate9Errors=iapStatsTxRate9Errors, spectrumAnalysisEntry=spectrumAnalysisEntry, licenseFeatureStatus=licenseFeatureStatus, vlanMgmtAppStatsVlan=vlanMgmtAppStatsVlan, stationAppStatsTablePeriod=stationAppStatsTablePeriod, ssidRadiusAcctSecServerPort=ssidRadiusAcctSecServerPort, stationStatsRxRate9Bytes=stationStatsRxRate9Bytes, wdsStatsTxRate12Errors=wdsStatsTxRate12Errors, globalMulticastVlanForwardingIndex=globalMulticastVlanForwardingIndex, vlanStatsRxPackets=vlanStatsRxPackets, positionInfoScope=positionInfoScope, neighborArrayUptime=neighborArrayUptime, stationUnassocTimeRSSIa10=stationUnassocTimeRSSIa10, stationUnassocRSSIa1=stationUnassocRSSIa1, vlanStaAppStatsIndex=vlanStaAppStatsIndex, stationAppStatsTimePeriod=stationAppStatsTimePeriod, neighborArrayIPAddress=neighborArrayIPAddress, iapBondedChannel=iapBondedChannel, wdsStatsRxRate9Bytes=wdsStatsRxRate9Bytes, ssidWepKey4StringForm=ssidWepKey4StringForm, staAssuranceAuthFailuresActive=staAssuranceAuthFailuresActive, cfgChange=cfgChange, wdsStatsRxRate2Bytes=wdsStatsRxRate2Bytes, stationUnassociatedTime=stationUnassociatedTime, vlanStatsTimePeriod=vlanStatsTimePeriod, globalIAPInactiveTime=globalIAPInactiveTime, adminHistoryEntry=adminHistoryEntry, groupWprFooterText=groupWprFooterText, radiusTimeout=radiusTimeout, stationAssociationRSSIa9=stationAssociationRSSIa9, adminTableClear=adminTableClear, idsDurationAttackPeriod=idsDurationAttackPeriod, stationAssociationMACAddress=stationAssociationMACAddress, stationAppCatStatsMACAddress=stationAppCatStatsMACAddress, staAssuranceRSSIActive=staAssuranceRSSIActive, filterAppListRowStatus=filterAppListRowStatus, globalStaAuthTimeout=globalStaAuthTimeout, iapStatsTxRate48Errors=iapStatsTxRate48Errors, global11acMaxMCS3SS=global11acMaxMCS3SS, staAssurRetryRate=staAssurRetryRate, xa2_130Array=xa2_130Array, stationAssociationRSSIa3=stationAssociationRSSIa3, stationUnassocManufacturer=stationUnassocManufacturer, global11aIAPMaxIapStations=global11aIAPMaxIapStations, radiusAcctPriServerHostname=radiusAcctPriServerHostname, tunnelType=tunnelType, appListMemberGuid=appListMemberGuid, syslogMessage=syslogMessage, xr4430Array=xr4430Array, xr2230Array=xr2230Array, spanningTreeVlanNumber=spanningTreeVlanNumber, autoChannelList11aEntry=autoChannelList11aEntry, ethAutoneg=ethAutoneg, rogueDetectAPTable=rogueDetectAPTable, ssidWepKey1StringForm=ssidWepKey1StringForm, iapStatsTxBroadcast=iapStatsTxBroadcast, rogueDetectAutoBlockWhitelistIndex=rogueDetectAutoBlockWhitelistIndex, global11acWave2Capability=global11acWave2Capability, cdpInfoIPAddress=cdpInfoIPAddress, stationAssociationTimeRSSIa2=stationAssociationTimeRSSIa2, stationUnassociatedIndex=stationUnassociatedIndex, cdpInfoNativeVlan=cdpInfoNativeVlan, globalExtractIpAddrDhcpPeriod=globalExtractIpAddrDhcpPeriod, systemLicenseVersion=systemLicenseVersion, globalIAPBeaconDTIM=globalIAPBeaconDTIM, vlanStaAppStatsTablePeriod=vlanStaAppStatsTablePeriod, filterRowStatus=filterRowStatus, globalWfaMode=globalWfaMode, wdsClientLinkPasswordForm=wdsClientLinkPasswordForm, stationStatsRxRate36Retries=stationStatsRxRate36Retries, stationAssocVLAN=stationAssocVLAN, xd8_120Array=xd8_120Array, snmpAgentReadWriteCommunity=snmpAgentReadWriteCommunity, systemActivationInterval=systemActivationInterval, adminIndex=adminIndex, rates11bgEntry=rates11bgEntry, fpgaName=fpgaName, idsEventMaxPackets=idsEventMaxPackets, ssidTableClear=ssidTableClear, xr2426Array=xr2426Array, stationAssociationChannel=stationAssociationChannel, staAssuranceAuthFailures=staAssuranceAuthFailures, fastRoamingTargetTable=fastRoamingTargetTable, proxyMgmtMask03=proxyMgmtMask03, ssidWepKey3StringForm=ssidWepKey3StringForm, systemXirconPort=systemXirconPort, xd3_230Array=xd3_230Array, spectrumAnalysisBytes=spectrumAnalysisBytes, globalMulticastDnsFilteringName=globalMulticastDnsFilteringName, envCtrlSoftwareVersion=envCtrlSoftwareVersion, staAssurManufacturer=staAssurManufacturer, rogueDetectSSIDTableReset=rogueDetectSSIDTableReset, clusterArrayCluster=clusterArrayCluster, xd4_240Array=xd4_240Array, wdsClientLinkUsername=wdsClientLinkUsername, global11acMaxMCS1SS=global11acMaxMCS1SS, filterTrackApps=filterTrackApps, idsEvilTwinAttackEnable=idsEvilTwinAttackEnable, radiusSecServerSecretEnc=radiusSecServerSecretEnc, rogueDetectAPSecurity=rogueDetectAPSecurity, staAssurRetryRateActive=staAssurRetryRateActive, global11bgIAPMaxIapStations=global11bgIAPMaxIapStations, globalNumStations=globalNumStations, wepKeySize=wepKeySize, proxyMgmtSocksPort=proxyMgmtSocksPort, stationAssociationNetbiosName=stationAssociationNetbiosName, xr4826Array=xr4826Array, wdsStatsTxRate48Retries=wdsStatsTxRate48Retries, xr2430hArray=xr2430hArray, adminHistoryUsername=adminHistoryUsername, global11bgIAPAutoCellOverlap=global11bgIAPAutoCellOverlap, wpa=wpa, vlanMgmtAppCatStatsRxBytes=vlanMgmtAppCatStatsRxBytes, iapStatsTxRate12Errors=iapStatsTxRate12Errors, radiusUserPassword=radiusUserPassword, groupVlanPool=groupVlanPool, syslogLevel=syslogLevel, iapStatsTxUnicast=iapStatsTxUnicast, iapStatsRxRate48Packets=iapStatsRxRate48Packets, xr4836Array=xr4836Array, iapStatsRxRate24Packets=iapStatsRxRate24Packets, iapStatsTxRate36Packets=iapStatsTxRate36Packets, filterAppListDesc=filterAppListDesc, stationStatsRxRate9Retries=stationStatsRxRate9Retries, activeDirectoryDomainController=activeDirectoryDomainController, dhcpPoolRowStatus=dhcpPoolRowStatus, fastRoaming=fastRoaming, stationUnassociatedRxRate=stationUnassociatedRxRate, globalMulticastExcludeEntry=globalMulticastExcludeEntry, wdsStatsRxRate54Retries=wdsStatsRxRate54Retries, rogueDetectAPChannel=rogueDetectAPChannel, xn16Array=xn16Array, staAssurSNRTimestamp=staAssurSNRTimestamp, stationAssurEntry=stationAssurEntry, proxyMgmtSocksType=proxyMgmtSocksType, adminPrivLevelName=adminPrivLevelName, stationAppCatStatsTxBytes=stationAppCatStatsTxBytes, stationAssociationRSSI=stationAssociationRSSI, radioMixInvalid=radioMixInvalid, tunnelVlanList=tunnelVlanList, stationUnassocRSSIabg3=stationUnassocRSSIabg3, stationUnassocRxRate=stationUnassocRxRate, rogueDetectSSIDName=rogueDetectSSIDName, systemStpEnable=systemStpEnable, iapTraps=iapTraps, iapStatsTxRate2Retries=iapStatsTxRate2Retries, vlanMgmtAppStatsRxPackets=vlanMgmtAppStatsRxPackets, iapStatsTxRate18Bytes=iapStatsTxRate18Bytes, idsAssocFloodMode=idsAssocFloodMode, systemGroupName=systemGroupName, activeDirectoryPassword=activeDirectoryPassword, stationAssociationVLAN=stationAssociationVLAN, groupVlan=groupVlan, ssidWprTable=ssidWprTable, global11aIAPEnable=global11aIAPEnable, filterSetVlan=filterSetVlan, oauthTokenGrantType=oauthTokenGrantType, lldpEnable=lldpEnable, filterDstType=filterDstType, globalIAPReauthPeriod=globalIAPReauthPeriod, stationStatsTxRate54Packets=stationStatsTxRate54Packets, ssidRadiusAcctPriServerSecret=ssidRadiusAcctPriServerSecret, syslogStationFormat=syslogStationFormat, radiusAcctSecServerIPAddress=radiusAcctSecServerIPAddress, stationAssociationTime=stationAssociationTime, groupWprBackground=groupWprBackground, spanningTreeIndex=spanningTreeIndex, xr2220hArray=xr2220hArray, global11bgIAPAutoCellEnable=global11bgIAPAutoCellEnable, ethStatsEntry=ethStatsEntry, staAssurErrorRate=staAssurErrorRate, radiusStationMACFormat=radiusStationMACFormat, envCtrlHumidity=envCtrlHumidity, wdsClientLinkTable=wdsClientLinkTable, groupQOS=groupQOS, rogueDetectAPOrigTableSSID=rogueDetectAPOrigTableSSID, wdsStatsRxRate12Bytes=wdsStatsRxRate12Bytes, ethStatsTable=ethStatsTable, global11aIAPAutoChannelEnable=global11aIAPAutoChannelEnable, systemHttpsEnable=systemHttpsEnable, stationAssocDeviceClass=stationAssocDeviceClass, stationAssocDeviceType=stationAssocDeviceType, appListMemberTable=appListMemberTable, ssidLimitsTimeOff=ssidLimitsTimeOff, staAssuranceNetbiosName=staAssuranceNetbiosName, xh1_240Array=xh1_240Array, fastRoamingTargetIpAddress=fastRoamingTargetIpAddress, stationAppCatStatsTimePeriod=stationAppCatStatsTimePeriod, rogueDetectAutoBlockWhitelistEntry=rogueDetectAutoBlockWhitelistEntry, idsDurationAttackNAV=idsDurationAttackNAV, dhcpPoolGateway=dhcpPoolGateway, softwareUploadSuccess=softwareUploadSuccess, wifiTagUdpPort=wifiTagUdpPort, xr4426Array=xr4426Array, stationUnassocRSSIa5=stationUnassocRSSIa5, iapStatsRxTotalErrors=iapStatsRxTotalErrors, stationAssociationIAP=stationAssociationIAP, stationStatsTxRate9Bytes=stationStatsTxRate9Bytes, neighborArrayNumStationsAssoc=neighborArrayNumStationsAssoc, xa1_240Array=xa1_240Array, stationAssocTimeRSSIa10=stationAssocTimeRSSIa10, iapStatsRxRate9Errors=iapStatsRxRate9Errors, stationStatsTxRate48Errors=stationStatsTxRate48Errors, envCtrl=envCtrl, vlanStaAppStatsTable=vlanStaAppStatsTable, stationStatsTimePeriod=stationStatsTimePeriod)
mibBuilder.exportSymbols("XIRRUS-MIB", stationUnassocTable=stationUnassocTable, bondTable=bondTable, positionInfoMount=positionInfoMount, stationStatsRxRate9Packets=stationStatsRxRate9Packets, vlanDefaultNumber=vlanDefaultNumber, xr7647Array=xr7647Array, proxyMgmtSubnet01=proxyMgmtSubnet01, groupFilterList=groupFilterList, stationStatsTxRate11Errors=stationStatsTxRate11Errors, staAssurRSSITimestamp=staAssurRSSITimestamp, groupDhcpPool=groupDhcpPool, ssidWepKey2String=ssidWepKey2String, trapObjects=trapObjects, iapStatsRxRate48Errors=iapStatsRxRate48Errors, roamAssistPeriod=roamAssistPeriod, xr1230hArray=xr1230hArray, proxyMgmtSubnet05=proxyMgmtSubnet05, iapBeaconProbeFailurePhyReset=iapBeaconProbeFailurePhyReset, stationStatsRxBytes=stationStatsRxBytes, globalBroadcastRates=globalBroadcastRates, syslogLevelConsole=syslogLevelConsole, xr1120hArray=xr1120hArray, ssidRadiusAcctSecServerSecret=ssidRadiusAcctSecServerSecret, stationStatsRxRate1Retries=stationStatsRxRate1Retries, proxyMgmtEnabled=proxyMgmtEnabled, global11aIAPRxThreshold=global11aIAPRxThreshold, xr2435Array=xr2435Array, stationAssocTable=stationAssocTable, stationStatsRxRate18Retries=stationStatsRxRate18Retries, vlanStatsName=vlanStatsName, iapStatsRxPackets=iapStatsRxPackets, globalExtractStaInfoTable=globalExtractStaInfoTable, xs3700_1GArray=xs3700_1GArray, stationAssocRSSIa2=stationAssocRSSIa2, stationStatsTxRate12Retries=stationStatsTxRate12Retries, tunnelPriRemoteEndpoint=tunnelPriRemoteEndpoint, xr2425Array=xr2425Array, iapSsidToBssidMappingEntry=iapSsidToBssidMappingEntry, ssidWprHttpsEnable=ssidWprHttpsEnable, ssidWprAuthTimeout=ssidWprAuthTimeout, proxyMgmtHttpPassword=proxyMgmtHttpPassword, componentName=componentName, stationAssociationTimeRSSIabg2=stationAssociationTimeRSSIabg2, vlanName=vlanName, xs4Array=xs4Array, ssidRadiusAcctSecServerSecretForm=ssidRadiusAcctSecServerSecretForm, global11nEnable=global11nEnable, iapStatsRxBeacons=iapStatsRxBeacons, staAssurDataRateActive=staAssurDataRateActive, rates11aEntry=rates11aEntry, dateTimeZoneHours=dateTimeZoneHours, vlanStaAppCatStatsTable=vlanStaAppCatStatsTable, filterBytes=filterBytes, xr2420Array=xr2420Array, wdsStatsEntry=wdsStatsEntry, wdsStatsTxRate9Packets=wdsStatsTxRate9Packets, consoleMgmt=consoleMgmt, idsMICErrorAttackThreshold=idsMICErrorAttackThreshold, ssidQOS=ssidQOS, stationStatsTxRate6Bytes=stationStatsTxRate6Bytes, stationTraps=stationTraps, radiusServerAD=radiusServerAD, staAssuranceActiveAlarmTimestamp=staAssuranceActiveAlarmTimestamp, fpgaBootVersion=fpgaBootVersion, ssidWprScreenTimeout=ssidWprScreenTimeout, cdpInterval=cdpInterval, ssidDhcpPool=ssidDhcpPool, stationStatsRxRate48Retries=stationStatsRxRate48Retries, iapDriverVersion=iapDriverVersion, snmpAgentV3ReadWriteUser=snmpAgentV3ReadWriteUser, iapStatsRxRate11Errors=iapStatsRxRate11Errors, dnsSrv2=dnsSrv2, stationAppCatStatsRxPackets=stationAppCatStatsRxPackets, syslogLevelPriServer=syslogLevelPriServer, proxyMgmtHttpType=proxyMgmtHttpType, ethDuplex=ethDuplex, syslogEmailServer=syslogEmailServer, ssidLimitsActive=ssidLimitsActive, vlanStatsTxCompressed=vlanStatsTxCompressed, vlanMgmtAppStatsTimePeriod=vlanMgmtAppStatsTimePeriod, rogueDetectAPTimeDiscovered=rogueDetectAPTimeDiscovered, consoleTimeout=consoleTimeout, stationStatsRxRate48Packets=stationStatsRxRate48Packets, spectrumAnalysisAverageRSSI=spectrumAnalysisAverageRSSI, xr7626Array=xr7626Array, globalLoopbackTest=globalLoopbackTest, globalMaxStations=globalMaxStations, filterDstIPAddress=filterDstIPAddress, xr620hArray=xr620hArray, vlanStaAppStatsRxPackets=vlanStaAppStatsRxPackets, bondName=bondName, stationLocPositionX=stationLocPositionX, autoChannelList11aChannel=autoChannelList11aChannel, stationAppStatsRxBytes=stationAppStatsRxBytes, groupWprAuthType=groupWprAuthType, iapStatsRxRate2Errors=iapStatsRxRate2Errors, xr420hArray=xr420hArray, groupDaysOnThu=groupDaysOnThu, xd2_120Array=xd2_120Array, globalIAPSta2Sta=globalIAPSta2Sta, ssidWprScreenType=ssidWprScreenType, stationUnassocTimeRSSIa7=stationUnassocTimeRSSIa7, wdsStatsTxRate36Packets=wdsStatsTxRate36Packets, aclSsidName=aclSsidName, vlanStaAppStatsTxBytes=vlanStaAppStatsTxBytes, ssidFilterList=ssidFilterList, ssidLimitsDaysOnSat=ssidLimitsDaysOnSat, globalMulticastExcludeTableReset=globalMulticastExcludeTableReset, xs8Array=xs8Array, stationStatsRxRate12Retries=stationStatsRxRate12Retries, envCtrlHeatOn=envCtrlHeatOn, filterListIndex=filterListIndex, stationUnassociatedTimeRSSIa2=stationUnassociatedTimeRSSIa2, syslogPriority=syslogPriority, ethMgmt=ethMgmt, systemContactPhone=systemContactPhone, groupTrafficLimitKbps=groupTrafficLimitKbps, stationUnassociatedTimeRSSIabg2=stationUnassociatedTimeRSSIabg2, vlanEntry=vlanEntry, wdsStatsRxRate5Retries=wdsStatsRxRate5Retries, rogueDetect=rogueDetect, iapResetsMonitor=iapResetsMonitor, clusterArrayTable=clusterArrayTable, stationAssocRSSIa3=stationAssocRSSIa3, wdsStatsRxRate12Errors=wdsStatsRxRate12Errors, systemXirconEnable=systemXirconEnable, idsDeauthAttackEnable=idsDeauthAttackEnable, vlanStaAppCatStatsRxBytes=vlanStaAppCatStatsRxBytes, filterDstMacAddress=filterDstMacAddress, systemLicenseKey=systemLicenseKey, stationUnassocEntry=stationUnassocEntry, ethStatsRxPackets=ethStatsRxPackets, syslogTimestamp=syslogTimestamp, filterTable=filterTable, vlanStaAppCatStatsTxPackets=vlanStaAppCatStatsTxPackets, iapStatsRxRate12Packets=iapStatsRxRate12Packets, autoChannelList11bgEntry=autoChannelList11bgEntry, stationStatsTxRate9Errors=stationStatsTxRate9Errors, stationStatsTxRate54Retries=stationStatsTxRate54Retries, dnsDomain=dnsDomain, xh4_130Array=xh4_130Array, stationStatsRxRate18Packets=stationStatsRxRate18Packets, stationStatsRxRate18Errors=stationStatsRxRate18Errors, iapStatsRxUnicast=iapStatsRxUnicast, clusterArrayHostname=clusterArrayHostname, iapResetsMac=iapResetsMac, ntp=ntp, globalMulticastVlanForwardingTable=globalMulticastVlanForwardingTable, global11bgIAPEnable=global11bgIAPEnable, global11nTxChains=global11nTxChains, iapStatsTxRate12Packets=iapStatsTxRate12Packets, autoChannelList11aIndex=autoChannelList11aIndex, xr6830Array=xr6830Array, stationUnassocMediaType=stationUnassocMediaType, wdsRoamThreshold=wdsRoamThreshold, xr4820Array=xr4820Array, filterSrcIPAddressMask=filterSrcIPAddressMask, stationDeauthMacAddress=stationDeauthMacAddress, ntpSecondaryAuthKey=ntpSecondaryAuthKey, stationStatsTxRate1Bytes=stationStatsTxRate1Bytes, spanningTreeWDSClientLink1State=spanningTreeWDSClientLink1State, rogueDetectAutoBlockWhitelistTable=rogueDetectAutoBlockWhitelistTable, snmpAgentEngineID=snmpAgentEngineID, groupWprScreenType=groupWprScreenType, stationLocMACAddress=stationLocMACAddress, staAssurActiveAlarmType=staAssurActiveAlarmType, vlanTunnelState=vlanTunnelState, global11aIAPMaxStations=global11aIAPMaxStations, adminPrivSectionTable=adminPrivSectionTable, staAssurTime=staAssurTime, proxyMgmtHttpsHost=proxyMgmtHttpsHost, stationStatsTxErrors=stationStatsTxErrors, stationStatsRxRetries=stationStatsRxRetries, globalExtractStaInfoEntry=globalExtractStaInfoEntry, iapWdsLinkDistance=iapWdsLinkDistance, wdsStatsTxRate18Bytes=wdsStatsTxRate18Bytes, globalMulticastForwardingIpAddress=globalMulticastForwardingIpAddress, autoCellOverlap=autoCellOverlap, cfgModuleOID=cfgModuleOID, adminRadiusAuthType=adminRadiusAuthType, stationStatsTxRate2Retries=stationStatsTxRate2Retries, ssidWpaTKIP=ssidWpaTKIP, wdsStatsTxRate48Errors=wdsStatsTxRate48Errors, stationAssocChannel=stationAssocChannel, adminHistoryTable=adminHistoryTable, xn8Array=xn8Array, ssidRadiusAcctPriServerIPAddress=ssidRadiusAcctPriServerIPAddress, filterListTable=filterListTable)
