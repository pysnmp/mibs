#
# PySNMP MIB module APLICENSE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APLICENSE-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 08:58:57 2024
# On host fv-az1149-759 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Unsigned32, TimeTicks, ObjectIdentity, ModuleIdentity, Integer32, iso, IpAddress, MibIdentifier, NotificationType, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Integer32", "iso", "IpAddress", "MibIdentifier", "NotificationType", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "Gauge32")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
apLicenseModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 5))
apLicenseModule.setRevisions(('2012-07-16 00:00', '2014-06-26 00:00', '2017-11-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apLicenseModule.setRevisionsDescriptions(('Updated contact info', 'Updated Organization and Contact info.', 'Updated apLicenseTable to include licensed codec capacities.',))
if mibBuilder.loadTexts: apLicenseModule.setLastUpdated('201711240000Z')
if mibBuilder.loadTexts: apLicenseModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apLicenseModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apLicenseModule.setDescription('The license inventory MIB for Oracle Communications Acme Packet SBCs')
apLicenseMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1))
apLicenseTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1), )
if mibBuilder.loadTexts: apLicenseTable.setStatus('current')
if mibBuilder.loadTexts: apLicenseTable.setDescription('The table of all licenses, including the system-wide\n\t\tconsolidated license (always index 1)')
apLicenseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1), ).setIndexNames((0, "APLICENSE-MIB", "apLicenseIndex"))
if mibBuilder.loadTexts: apLicenseEntry.setStatus('current')
if mibBuilder.loadTexts: apLicenseEntry.setDescription('An entry in the table of all licenses')
apLicenseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apLicenseIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseIndex.setDescription('Unique index for the license table. \n                Index always begins at 1, and increases by 1. \n                The table length depends on the number of licenses \n                installed plus 1. 1st index is always the consolidated\n\t\tsystem-wide license.')
apLicenseKey = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseKey.setStatus('current')
if mibBuilder.loadTexts: apLicenseKey.setDescription('key, not applicable to 1st index, which is consolidated\n\t\tlicense.')
apLicenseCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseCapacity.setStatus('current')
if mibBuilder.loadTexts: apLicenseCapacity.setDescription('Capacity')
apLicenseInstallDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseInstallDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseInstallDate.setDescription('installation date/time')
apLicenseBeginDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseBeginDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseBeginDate.setDescription('begin date/time')
apLicenseExpireDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseExpireDate.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpireDate.setDescription('expiration date/time')
apLicenseSIPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSIPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseSIPFeature.setDescription('true if SIP feature is allowed, false if not')
apLicenseMGCPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseMGCPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseMGCPFeature.setDescription('true if MGCP feature is allowed, false if not')
apLicenseH323Feature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseH323Feature.setStatus('current')
if mibBuilder.loadTexts: apLicenseH323Feature.setDescription('true if H323 feature is allowed, false if not')
apLicenseIWFFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIWFFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseIWFFeature.setDescription('true if IWF feature is allowed, false if not')
apLicenseQOSFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseQOSFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseQOSFeature.setDescription('true if QOS feature is allowed, false if not')
apLicenseACPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseACPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseACPFeature.setDescription('true if ACP feature is allowed, false if not')
apLicenseLPFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseLPFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseLPFeature.setDescription('true if Routing (Local Policy) feature is allowed, false if not')
apLicenseSAGFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSAGFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseSAGFeature.setDescription('true if Load Balancing (SAG) feature is allowed, false if not')
apLicenseACCTFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseACCTFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseACCTFeature.setDescription('true if Accounting feature is allowed, false if not')
apLicenseHAFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseHAFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseHAFeature.setDescription('true if High Availability feature is allowed, false if not')
apLicensePACFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicensePACFeature.setStatus('current')
if mibBuilder.loadTexts: apLicensePACFeature.setDescription('true if PAC feature is allowed, false if not')
apLicenseIKEFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIKEFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseIKEFeature.setDescription('true if IKE feature is allowed, false if not')
apLicenseIPsecTunCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseIPsecTunCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseIPsecTunCap.setDescription('IPsec Tunnel Capacity')
apLicenseAuthFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseAuthFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseAuthFeature.setDescription('true if authorization/authentication feature is allowed,\n\t\tfalse if not')
apLicenseDatabaseRegFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseDatabaseRegFeature.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegFeature.setDescription('true if database registrar functionality is allowed,\n\t\tfalse if not')
apLicenseDatabaseRegCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseDatabaseRegCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegCap.setDescription('Database registration contact capacity')
apLicenseSLBEndpointCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSLBEndpointCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseSLBEndpointCap.setDescription('SLB endpoint capacity')
apLicenseAMRLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseAMRLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseAMRLicensedCap.setDescription('AMR codec licensed capacity')
apLicenseAMRWBLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseAMRWBLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseAMRWBLicensedCap.setDescription('AMR-WB codec licensed capacity')
apLicenseEVRCLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseEVRCLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseEVRCLicensedCap.setDescription('EVRC codec licensed capacity')
apLicenseEVRCBLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseEVRCBLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseEVRCBLicensedCap.setDescription('EVRCB codec licensed capacity')
apLicenseOPUSLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseOPUSLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseOPUSLicensedCap.setDescription('OPUS codec licensed capacity')
apLicenseSILKLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseSILKLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseSILKLicensedCap.setDescription('SILK codec licensed capacity')
apLicenseEVSLicensedCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 5, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apLicenseEVSLicensedCap.setStatus('current')
if mibBuilder.loadTexts: apLicenseEVSLicensedCap.setDescription('EVS codec licensed capacity')
apLicenseNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2))
apLicenseExpirationWarningAcliIndex = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningAcliIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningAcliIndex.setDescription('The index of the License which is going to expire as\n\t\trepresented in the ACLI')
apLicenseExpirationWarningSnmpIndex = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningSnmpIndex.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningSnmpIndex.setDescription('The index of the License which is going to expire as\n\t\trepresented in the SNMP license table')
apLicenseExpirationWarningKey = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningKey.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningKey.setDescription('Key which represents the license that is going to expire')
apLicenseExpirationWarningDays = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 5, 2, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apLicenseExpirationWarningDays.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningDays.setDescription('Days until the license will expire')
apLicenseNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3))
apLicenseNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0))
apLicenseApproachingCapacityNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 1))
if mibBuilder.loadTexts: apLicenseApproachingCapacityNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseApproachingCapacityNotification.setDescription('This trap is sent if the total sessions is approaching\n\t\t the license capacity allowed. (98% or higher)')
apLicenseNotApproachingCapacityNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 2))
if mibBuilder.loadTexts: apLicenseNotApproachingCapacityNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseNotApproachingCapacityNotification.setDescription('This trap is sent if the total sessions is no longer\n\t\tapproaching the license capacity allowed. (less than 90%)')
apLicenseExpirationWarningNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 5, 3, 0, 3)).setObjects(("APLICENSE-MIB", "apLicenseExpirationWarningAcliIndex"), ("APLICENSE-MIB", "apLicenseExpirationWarningSnmpIndex"), ("APLICENSE-MIB", "apLicenseExpirationWarningKey"), ("APLICENSE-MIB", "apLicenseExpirationWarningDays"))
if mibBuilder.loadTexts: apLicenseExpirationWarningNotification.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationWarningNotification.setDescription('This trap is sent when a license is within 7 days\n\t\tof expiration')
apLicenseConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4))
apLicenseCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 1))
apLicenseGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2))
apLicenseNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3))
apLicenseObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2, 1)).setObjects(("APLICENSE-MIB", "apLicenseKey"), ("APLICENSE-MIB", "apLicenseCapacity"), ("APLICENSE-MIB", "apLicenseInstallDate"), ("APLICENSE-MIB", "apLicenseBeginDate"), ("APLICENSE-MIB", "apLicenseExpireDate"), ("APLICENSE-MIB", "apLicenseSIPFeature"), ("APLICENSE-MIB", "apLicenseMGCPFeature"), ("APLICENSE-MIB", "apLicenseH323Feature"), ("APLICENSE-MIB", "apLicenseIWFFeature"), ("APLICENSE-MIB", "apLicenseQOSFeature"), ("APLICENSE-MIB", "apLicenseACPFeature"), ("APLICENSE-MIB", "apLicenseLPFeature"), ("APLICENSE-MIB", "apLicenseSAGFeature"), ("APLICENSE-MIB", "apLicenseACCTFeature"), ("APLICENSE-MIB", "apLicenseHAFeature"), ("APLICENSE-MIB", "apLicensePACFeature"), ("APLICENSE-MIB", "apLicenseIKEFeature"), ("APLICENSE-MIB", "apLicenseIPsecTunCap"), ("APLICENSE-MIB", "apLicenseSLBEndpointCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseObjectsGroup = apLicenseObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseObjectsGroup.setDescription('A collection of objects providing the license inventory,\n\t\tincluding the consolidated system-wide license.')
apLicenseDatabaseRegGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2, 2)).setObjects(("APLICENSE-MIB", "apLicenseAuthFeature"), ("APLICENSE-MIB", "apLicenseDatabaseRegFeature"), ("APLICENSE-MIB", "apLicenseDatabaseRegCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseDatabaseRegGroup = apLicenseDatabaseRegGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseDatabaseRegGroup.setDescription('A collection of objects providing the license inventory for\n\t\t database registration features.')
apLicenseCodecLicensedCapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 2, 3)).setObjects(("APLICENSE-MIB", "apLicenseAMRLicensedCap"), ("APLICENSE-MIB", "apLicenseAMRWBLicensedCap"), ("APLICENSE-MIB", "apLicenseEVRCLicensedCap"), ("APLICENSE-MIB", "apLicenseEVRCBLicensedCap"), ("APLICENSE-MIB", "apLicenseOPUSLicensedCap"), ("APLICENSE-MIB", "apLicenseSILKLicensedCap"), ("APLICENSE-MIB", "apLicenseEVSLicensedCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseCodecLicensedCapGroup = apLicenseCodecLicensedCapGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseCodecLicensedCapGroup.setDescription('A collection of objects providing the licensed codecs capacities')
apLicenseNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3, 1)).setObjects(("APLICENSE-MIB", "apLicenseApproachingCapacityNotification"), ("APLICENSE-MIB", "apLicenseNotApproachingCapacityNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseNotificationsGroup = apLicenseNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseNotificationsGroup.setDescription('A collection of notifications describing license violation.')
apLicenseExpirationNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 5, 4, 3, 2)).setObjects(("APLICENSE-MIB", "apLicenseExpirationWarningNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apLicenseExpirationNotificationsGroup = apLicenseExpirationNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apLicenseExpirationNotificationsGroup.setDescription('A collection of notifications related to license expiration')
mibBuilder.exportSymbols("APLICENSE-MIB", apLicenseExpirationNotificationsGroup=apLicenseExpirationNotificationsGroup, apLicenseExpirationWarningDays=apLicenseExpirationWarningDays, apLicenseInstallDate=apLicenseInstallDate, apLicenseNotifications=apLicenseNotifications, apLicenseACPFeature=apLicenseACPFeature, apLicenseExpirationWarningKey=apLicenseExpirationWarningKey, apLicenseOPUSLicensedCap=apLicenseOPUSLicensedCap, apLicenseKey=apLicenseKey, apLicenseSIPFeature=apLicenseSIPFeature, apLicenseDatabaseRegFeature=apLicenseDatabaseRegFeature, apLicenseExpirationWarningNotification=apLicenseExpirationWarningNotification, apLicenseAuthFeature=apLicenseAuthFeature, apLicenseAMRWBLicensedCap=apLicenseAMRWBLicensedCap, apLicenseApproachingCapacityNotification=apLicenseApproachingCapacityNotification, apLicenseCodecLicensedCapGroup=apLicenseCodecLicensedCapGroup, apLicenseEntry=apLicenseEntry, apLicenseGroups=apLicenseGroups, apLicensePACFeature=apLicensePACFeature, apLicenseIKEFeature=apLicenseIKEFeature, PYSNMP_MODULE_ID=apLicenseModule, apLicenseHAFeature=apLicenseHAFeature, apLicenseModule=apLicenseModule, apLicenseACCTFeature=apLicenseACCTFeature, apLicenseExpirationWarningSnmpIndex=apLicenseExpirationWarningSnmpIndex, apLicenseSILKLicensedCap=apLicenseSILKLicensedCap, apLicenseCompliances=apLicenseCompliances, apLicenseMIBObjects=apLicenseMIBObjects, apLicenseNotificationObjects=apLicenseNotificationObjects, apLicenseQOSFeature=apLicenseQOSFeature, apLicenseExpireDate=apLicenseExpireDate, apLicenseTable=apLicenseTable, apLicenseSAGFeature=apLicenseSAGFeature, apLicenseIndex=apLicenseIndex, apLicenseEVRCLicensedCap=apLicenseEVRCLicensedCap, apLicenseConformance=apLicenseConformance, apLicenseEVSLicensedCap=apLicenseEVSLicensedCap, apLicenseDatabaseRegCap=apLicenseDatabaseRegCap, apLicenseEVRCBLicensedCap=apLicenseEVRCBLicensedCap, apLicenseBeginDate=apLicenseBeginDate, apLicenseAMRLicensedCap=apLicenseAMRLicensedCap, apLicenseIWFFeature=apLicenseIWFFeature, apLicenseDatabaseRegGroup=apLicenseDatabaseRegGroup, apLicenseCapacity=apLicenseCapacity, apLicenseMGCPFeature=apLicenseMGCPFeature, apLicenseNotificationPrefix=apLicenseNotificationPrefix, apLicenseNotificationsGroup=apLicenseNotificationsGroup, apLicenseObjectsGroup=apLicenseObjectsGroup, apLicenseNotApproachingCapacityNotification=apLicenseNotApproachingCapacityNotification, apLicenseNotificationsGroups=apLicenseNotificationsGroups, apLicenseExpirationWarningAcliIndex=apLicenseExpirationWarningAcliIndex, apLicenseH323Feature=apLicenseH323Feature, apLicenseIPsecTunCap=apLicenseIPsecTunCap, apLicenseLPFeature=apLicenseLPFeature, apLicenseSLBEndpointCap=apLicenseSLBEndpointCap)
