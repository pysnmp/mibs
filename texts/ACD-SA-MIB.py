#
# PySNMP MIB module ACD-SA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-SA-MIB
# Produced by pysmi-1.1.12 at Tue May 28 13:04:58 2024
# On host fv-az1789-536 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Bits, Unsigned32, ObjectIdentity, Integer32, NotificationType, iso, IpAddress, ModuleIdentity, TimeTicks, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Bits", "Unsigned32", "ObjectIdentity", "Integer32", "NotificationType", "iso", "IpAddress", "ModuleIdentity", "TimeTicks", "Counter32")
RowStatus, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "DateAndTime")
acdSa = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 12))
acdSa.setRevisions(('2011-12-21 01:00', '2011-03-15 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdSa.setRevisionsDescriptions(('Add support for ETH-SLM metrics.', 'Initial version of MIB module ACD-SA-MIB.',))
if mibBuilder.loadTexts: acdSa.setLastUpdated('201112210100Z')
if mibBuilder.loadTexts: acdSa.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdSa.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdSa.setDescription('The Service Availability database for this Accedian Networks device.')
acdSaNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 0))
acdSaMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1))
acdSaConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2))
acdSaConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1))
acdSaCounter = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2))
acdSaStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3))
class AcdSaMetricType(TextualConvention, Integer32):
    description = 'A value that represents a type of metric that can be used in an\n        instance of Service Availability.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("metricPaaPlr", 1), ("metricPaaOwDelay", 2), ("metricPaaOwDv", 3), ("metricPaaTwDelay", 4), ("metricPaaTwDv", 5), ("metricCfmPlr", 6), ("metricCfmOwDelay", 7), ("metricCfmOwDv", 8), ("metricCfmTwDelay", 9), ("metricCfmTwDv", 10), ("metricCfmSlmNearEndPlr", 11), ("metricCfmSlmFarEndPlr", 12))

class AcdSaValidFlag(TextualConvention, Integer32):
    description = 'The validity flag can have three values: valid, adjusted, or pending.\n        The value of valid indicates the metrics are calculated normally. \n\tThe value of adjusted is used to indicate a change occurred in the \n\tconfiguration during the reporting period which may impact the service \n\tavailability calculation. \n\tThe value of pending indicates that the counters were reset in the \n\tmiddle of a time interval.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("valid", 1), ("adjusted", 2), ("pending", 3))

class AcdSaAdminStateFlag(TextualConvention, Integer32):
    description = 'This flag is used for the administrative state.\n        The value IS indicates the state is In-Service. The value OOS\n\tindicates the state is Out-of-Service.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class AcdSaOperStateFlag(TextualConvention, Integer32):
    description = 'This flag is used for the operational state.\n        The value IS indicates the state is In-Service. The value OOS\n\tindicates the state is Out-of-Service. The value oos-au indicates\n\tthe state is Out-of-Service-Autonomous. This state is entered when\n\tall of the metrics associated with the service instance are disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("is", 1), ("oos", 2), ("oosAu", 3))

acdSaServiceConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1), )
if mibBuilder.loadTexts: acdSaServiceConfigTable.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaServiceConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"))
if mibBuilder.loadTexts: acdSaServiceConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigEntry.setDescription('An entry consisting of all settings for a Service.')
acdSaServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSaServiceIndex.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceIndex.setDescription('Unique value for each service instance.')
acdSaServiceConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSaServiceConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new Service you shall provide a unique name for an empty\n        row with the RowStatus set to Create and Go.')
acdSaServiceConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSaServiceConfigName.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigName.setDescription('A unique name used to identify the Service.')
acdSaServiceConfigAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 4), AcdSaAdminStateFlag().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaServiceConfigAdminState.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigAdminState.setDescription('Administrative state is(1) or oos(2).')
acdSaServiceConfigReportingPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaServiceConfigReportingPeriod.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigReportingPeriod.setDescription('A reporting period over which availability counters are evaluated\n        in addition to the monotonic counters (In minutes).')
acdSaServiceConfigUaWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaServiceConfigUaWindowSize.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigUaWindowSize.setDescription('The number of consecutive seconds over which to assess unavailability.')
acdSaServiceConfigHliWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 999)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaServiceConfigHliWindowSize.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigHliWindowSize.setDescription('The number of consecutive Time Intervals used to assess High Loss Intervals for this instance.')
acdSaServiceConfigTimeInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaServiceConfigTimeInterval.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigTimeInterval.setDescription('The interval of time during which the metric is evaluated. Allowed values\n\tare 1, 5, 10, 20, or 60.')
acdSaMetricConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2), )
if mibBuilder.loadTexts: acdSaMetricConfigTable.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigTable.setDescription('The .....')
acdSaMetricConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"), (0, "ACD-SA-MIB", "acdSaMetricIndex"))
if mibBuilder.loadTexts: acdSaMetricConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigEntry.setDescription('An entry consisting of all settings for a Metric.')
acdSaMetricIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSaMetricIndex.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricIndex.setDescription('Index for each metric instance.')
acdSaMetricConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSaMetricConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new Service you shall provide the a unique name for an empty\n        row with the RowStatus set to Create and Go.  To delete the VLAN set\n        you need to set the RowStatus to destroy.')
acdSaMetricConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSaMetricConfigName.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigName.setDescription('A unique name used to identify the Metric.')
acdSaMetricConfigSrcName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSaMetricConfigSrcName.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigSrcName.setDescription('A unique name used to identify the source metric.')
acdSaMetricConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 5), AcdSaMetricType().clone('metricCfmTwDelay')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaMetricConfigType.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigType.setDescription('Enable or disable the Service Availability entry.')
acdSaMetricConfigThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdSaMetricConfigThreshold.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigThreshold.setDescription('Indicates the delay threshold for this metric when type is \n\tone of metric delay parameters (in micro-seconds). Indicates\n\tthe packet loss threshold for this metric when type is one of\n\tpacket-loss parameter expressed in millionth of percent\n\t(1,000,000 is 1%).')
acdSaServiceCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1), )
if mibBuilder.loadTexts: acdSaServiceCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaServiceCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"))
if mibBuilder.loadTexts: acdSaServiceCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterEntry.setDescription('An entry consisting of all counters for a Service.')
acdSaServiceCounterPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same service\n         instance. This index starts at 1 and increases by one as each new\n         period.')
acdSaServiceCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 2), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterValidFlag.setDescription('Indicates the validity of the service counter during this sampling\n         interval.')
acdSaServiceCounterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterUpTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterUpTime.setDescription('Uptime is a measure of the time a service has been up during this\n         sampling interval.')
acdSaServiceCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterUaTime.setDescription('The UaTime is a measure of the time a service has been unavailable\n         during this sampling interval.')
acdSaServiceCounterMaintTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterMaintTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterMaintTime.setDescription('The MaintTime is a measure of the time a service has been in maintenance\n         during this sampling interval.')
acdSaServiceCounterAvailRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterAvailRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterAvailRatio.setDescription('Indicates the availability ratio in millionth of a percent\n        (1,000,000 is 1%).')
acdSaServiceCounterGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterGaps.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterGaps.setDescription('The gap shall be the number of time the state change from available\n         to unavailable.')
acdSaServiceCounterLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterLargestGap.setDescription('The largest gap shall be the largest number of consecutive unavailable\n         second.')
acdSaServiceCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterChliTime.setDescription('The CHLI time is a counter which increments for every high loss interval. \n\t It is only reset to zero when one of the following conditions occur: \n\t 1) device reboot 2) explicit counter reset.')
acdSaServiceCounterChliRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceCounterChliRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterChliRatio.setDescription('The ratio of high loss intervals divided by the uptime minus the sum of \n\tmaintenance time and unavailable time, expressed in millionth of a percent (1,000,000 is 1%).')
acdSaServiceHistCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2), )
if mibBuilder.loadTexts: acdSaServiceHistCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaServiceHistCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"), (0, "ACD-SA-MIB", "acdSaServiceHistCounterPeriodIndex"))
if mibBuilder.loadTexts: acdSaServiceHistCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterEntry.setDescription('An entry consisting of all counters for a Service.')
acdSaServiceHistCounterPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSaServiceHistCounterPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same service\n         instance. This index starts at 1 and increases by one as each new\n         period.')
acdSaServiceHistCounterIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterIntervalEnd.setDescription('This is the time of the end of this entry.')
acdSaServiceHistCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 3), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterValidFlag.setDescription('Indicates the validity of the service counter during this sampling\n         interval.')
acdSaServiceHistCounterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterUpTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterUpTime.setDescription('Uptime is a measure of the time a service has been up during this\n         sampling interval.')
acdSaServiceHistCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterUaTime.setDescription('The UaTime is a measure of the time a service has been unavailable\n         during this sampling interval.')
acdSaServiceHistCounterMaintTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterMaintTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterMaintTime.setDescription('The MaintTime is a measure of the time a service has been in maintenance\n         during this sampling interval.')
acdSaServiceHistCounterAvailRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterAvailRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterAvailRatio.setDescription('Indicates the availability ratio in millionth of a percent\n        (1,000,000 is 1%).')
acdSaServiceHistCounterGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterGaps.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterGaps.setDescription('The gap shall be the number of time the state change from available\n         to unavailable.')
acdSaServiceHistCounterLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterLargestGap.setDescription('The largest gap shall be the largest number of consecutive unavailable\n         second.')
acdSaServiceHistCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterChliTime.setDescription('The CHLI time is a counter which increments for every High Loss Interval.\n\t It is only reset to zero when one of the following conditions occur:\n\t 1) device reboot 2) explicit counter reset.')
acdSaServiceHistCounterChliRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 2, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceHistCounterChliRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterChliRatio.setDescription('The ratio of high loss intervals divided by the uptime minus the sum of \n\tmaintenance time and unavailable time, expressed in millionth of a percent (1,000,000 is 1%).')
acdSaServiceMonoCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3), )
if mibBuilder.loadTexts: acdSaServiceMonoCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaServiceMonoCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"))
if mibBuilder.loadTexts: acdSaServiceMonoCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterEntry.setDescription('An entry consisting of all monotonic counters for a Service.')
acdSaServiceMonoCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 1), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterValidFlag.setDescription('Indicates the validity of the service counter during this sampling\n         interval.')
acdSaServiceMonoCounterUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterUpTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterUpTime.setDescription('Uptime is a measure of the time a service has been up during this\n         sampling interval.')
acdSaServiceMonoCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterUaTime.setDescription('The UaTime is a measure of the time a service has been unavailable\n         during this sampling interval.')
acdSaServiceMonoCounterMaintTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterMaintTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterMaintTime.setDescription('The MaintTime is a measure of the time a service has been in maintenance\n         during this sampling interval.')
acdSaServiceMonoCounterAvailRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterAvailRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterAvailRatio.setDescription('Indicates the availability ratio in millionth of a percent\n        (1,000,000 is 1%).')
acdSaServiceMonoCounterGaps = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterGaps.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterGaps.setDescription('The gap shall be the number of time the state change from available\n         to unavailable.')
acdSaServiceMonoCounterLargestGap = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterLargestGap.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterLargestGap.setDescription('The largest gap shall be the largest number of consecutive unavailable\n         second.')
acdSaServiceMonoCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterChliTime.setDescription('A counter which increments for every high loss interval. \n\t It is only reset to zero when one of the following conditions occur: \n\t 1) device reboot 2) explicit counter reset.')
acdSaServiceMonoCounterChliRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceMonoCounterChliRatio.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterChliRatio.setDescription('The ratio of high loss intervals divided by the uptime minus the sum of maintenance time and unavailable time,\n\t expressed in millionth of a percent (1,000,000 is 1%).')
acdSaMetricCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 4), )
if mibBuilder.loadTexts: acdSaMetricCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaMetricCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 4, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"), (0, "ACD-SA-MIB", "acdSaMetricIndex"))
if mibBuilder.loadTexts: acdSaMetricCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterEntry.setDescription('An entry consisting of all counters for a Metric.')
acdSaMetricCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 4, 1, 1), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterValidFlag.setDescription('Indicates the validity of the metric counter during this sampling\n         interval.')
acdSaMetricCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterUaTime.setDescription('The UaTime is a measure of the time a metric has been unavailable\n         during this sampling interval.')
acdSaMetricCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterChliTime.setDescription('A counter which increments for every High Loss Interval. It is only reset to zero when one of the following conditions occur: \n\t 1) device reboot 2) explicit counter reset.')
acdSaMetricHistCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5), )
if mibBuilder.loadTexts: acdSaMetricHistCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaMetricHistCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaMetricHistCounterID"), (0, "ACD-SA-MIB", "acdSaMetricHistCounterPeriodIndex"))
if mibBuilder.loadTexts: acdSaMetricHistCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterEntry.setDescription('An entry consisting of all counters for a Metric.')
acdSaMetricHistCounterID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSaMetricHistCounterID.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterID.setDescription('Unique value for each Metric instance. This value follows the\n         ordering of the service table.')
acdSaMetricHistCounterPeriodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 2), Unsigned32())
if mibBuilder.loadTexts: acdSaMetricHistCounterPeriodIndex.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterPeriodIndex.setDescription('An index that uniquely identifies the particular sample this entry\n         represents among all samples associated with the same service\n         instance. This index starts at 1 and increases by one as each new\n         period.')
acdSaMetricHistCounterIntervalEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricHistCounterIntervalEnd.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterIntervalEnd.setDescription('This is the time of the end of this entry.')
acdSaMetricHistCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 4), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricHistCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterValidFlag.setDescription('Indicates the validity of the metric counter during this sampling\n         interval.')
acdSaMetricHistCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricHistCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterUaTime.setDescription('The UaTime is a measure of the time a metric has been unavailable\n         during this sampling interval.')
acdSaMetricHistCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricHistCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterChliTime.setDescription('A counter which increments for every High Loss Interval. It is only reset to zero when one of the following conditions occur: \n\t1) device reboot 2) explicit counter reset.')
acdSaMetricMonoCounterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 6), )
if mibBuilder.loadTexts: acdSaMetricMonoCounterTable.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaMetricMonoCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 6, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceIndex"), (0, "ACD-SA-MIB", "acdSaMetricIndex"))
if mibBuilder.loadTexts: acdSaMetricMonoCounterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterEntry.setDescription('An entry consisting of all counters for a Metric.')
acdSaMetricMonoCounterValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 6, 1, 1), AcdSaValidFlag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricMonoCounterValidFlag.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterValidFlag.setDescription('Indicates the validity of the metric counter during this sampling\n         interval.')
acdSaMetricMonoCounterUaTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricMonoCounterUaTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterUaTime.setDescription('The UaTime is a measure of the time a metric has been unavailable\n         during this sampling interval.')
acdSaMetricMonoCounterChliTime = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 2, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaMetricMonoCounterChliTime.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterChliTime.setDescription('A counter which increments for every high loss interval. It is only reset to zero when one of the following conditions occur: \n\t 1) device reboot 2) explicit counter reset.')
acdSaServiceStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1), )
if mibBuilder.loadTexts: acdSaServiceStatusTable.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusTable.setDescription('This table contains all instance of service availability of this unit.')
acdSaServiceStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1), ).setIndexNames((0, "ACD-SA-MIB", "acdSaServiceStatusID"))
if mibBuilder.loadTexts: acdSaServiceStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusEntry.setDescription('An entry consisting of all status for a Service.')
acdSaServiceStatusID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSaServiceStatusID.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusID.setDescription('Unique value for each service instance.')
acdSaServiceStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceStatusName.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusName.setDescription('A unique name used to identify the Service.')
acdSaServiceStatusAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1, 3), AcdSaAdminStateFlag().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceStatusAdminState.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusAdminState.setDescription('Administrative state is one of is(1) or oos(2).')
acdSaServiceStatusOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1, 4), AcdSaOperStateFlag().clone(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceStatusOperState.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusOperState.setDescription('Operational state is one of is(1), oos(2) or oosAu (3).')
acdSaServiceStatusNbrMetrics = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 12, 1, 3, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSaServiceStatusNbrMetrics.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusNbrMetrics.setDescription('The number of metrics associated with this Service instance.')
acdSaCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 1))
acdSaGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2))
acdSaServiceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 1)).setObjects(("ACD-SA-MIB", "acdSaServiceConfigRowStatus"), ("ACD-SA-MIB", "acdSaServiceConfigName"), ("ACD-SA-MIB", "acdSaServiceConfigAdminState"), ("ACD-SA-MIB", "acdSaServiceConfigReportingPeriod"), ("ACD-SA-MIB", "acdSaServiceConfigUaWindowSize"), ("ACD-SA-MIB", "acdSaServiceConfigHliWindowSize"), ("ACD-SA-MIB", "acdSaServiceConfigTimeInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaServiceConfigGroup = acdSaServiceConfigGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceConfigGroup.setDescription('Objects for the Service configuration Group.')
acdSaMetricConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 2)).setObjects(("ACD-SA-MIB", "acdSaMetricConfigRowStatus"), ("ACD-SA-MIB", "acdSaMetricConfigName"), ("ACD-SA-MIB", "acdSaMetricConfigSrcName"), ("ACD-SA-MIB", "acdSaMetricConfigType"), ("ACD-SA-MIB", "acdSaMetricConfigThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaMetricConfigGroup = acdSaMetricConfigGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricConfigGroup.setDescription('Objects for the Metric configuration Group.')
acdSaServiceCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 3)).setObjects(("ACD-SA-MIB", "acdSaServiceCounterPeriodIndex"), ("ACD-SA-MIB", "acdSaServiceCounterValidFlag"), ("ACD-SA-MIB", "acdSaServiceCounterUpTime"), ("ACD-SA-MIB", "acdSaServiceCounterUaTime"), ("ACD-SA-MIB", "acdSaServiceCounterMaintTime"), ("ACD-SA-MIB", "acdSaServiceCounterAvailRatio"), ("ACD-SA-MIB", "acdSaServiceCounterGaps"), ("ACD-SA-MIB", "acdSaServiceCounterLargestGap"), ("ACD-SA-MIB", "acdSaServiceCounterChliTime"), ("ACD-SA-MIB", "acdSaServiceCounterChliRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaServiceCounterGroup = acdSaServiceCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceCounterGroup.setDescription('Objects for the Service Counter Group.')
acdSaServiceHistCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 4)).setObjects(("ACD-SA-MIB", "acdSaServiceHistCounterIntervalEnd"), ("ACD-SA-MIB", "acdSaServiceHistCounterValidFlag"), ("ACD-SA-MIB", "acdSaServiceHistCounterUpTime"), ("ACD-SA-MIB", "acdSaServiceHistCounterUaTime"), ("ACD-SA-MIB", "acdSaServiceHistCounterMaintTime"), ("ACD-SA-MIB", "acdSaServiceHistCounterAvailRatio"), ("ACD-SA-MIB", "acdSaServiceHistCounterGaps"), ("ACD-SA-MIB", "acdSaServiceHistCounterLargestGap"), ("ACD-SA-MIB", "acdSaServiceHistCounterChliTime"), ("ACD-SA-MIB", "acdSaServiceHistCounterChliRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaServiceHistCounterGroup = acdSaServiceHistCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceHistCounterGroup.setDescription('Objects for the Service History Counter Group.')
acdSaServiceMonoCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 5)).setObjects(("ACD-SA-MIB", "acdSaServiceMonoCounterValidFlag"), ("ACD-SA-MIB", "acdSaServiceMonoCounterUpTime"), ("ACD-SA-MIB", "acdSaServiceMonoCounterUaTime"), ("ACD-SA-MIB", "acdSaServiceMonoCounterMaintTime"), ("ACD-SA-MIB", "acdSaServiceMonoCounterAvailRatio"), ("ACD-SA-MIB", "acdSaServiceMonoCounterGaps"), ("ACD-SA-MIB", "acdSaServiceMonoCounterLargestGap"), ("ACD-SA-MIB", "acdSaServiceMonoCounterChliTime"), ("ACD-SA-MIB", "acdSaServiceMonoCounterChliRatio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaServiceMonoCounterGroup = acdSaServiceMonoCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceMonoCounterGroup.setDescription('Objects for the Service Monotonic Counter Group.')
acdSaMetricCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 6)).setObjects(("ACD-SA-MIB", "acdSaMetricCounterValidFlag"), ("ACD-SA-MIB", "acdSaMetricCounterUaTime"), ("ACD-SA-MIB", "acdSaMetricCounterChliTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaMetricCounterGroup = acdSaMetricCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricCounterGroup.setDescription('Objects for the Metric Counter Group.')
acdSaMetricHistCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 7)).setObjects(("ACD-SA-MIB", "acdSaMetricHistCounterIntervalEnd"), ("ACD-SA-MIB", "acdSaMetricHistCounterValidFlag"), ("ACD-SA-MIB", "acdSaMetricHistCounterUaTime"), ("ACD-SA-MIB", "acdSaMetricHistCounterChliTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaMetricHistCounterGroup = acdSaMetricHistCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricHistCounterGroup.setDescription('Objects for the Metric History Counter Group.')
acdSaMetricMonoCounterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 8)).setObjects(("ACD-SA-MIB", "acdSaMetricMonoCounterValidFlag"), ("ACD-SA-MIB", "acdSaMetricMonoCounterUaTime"), ("ACD-SA-MIB", "acdSaMetricMonoCounterChliTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaMetricMonoCounterGroup = acdSaMetricMonoCounterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaMetricMonoCounterGroup.setDescription('Objects for the Metric History Counter Group.')
acdSaServiceStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 2, 9)).setObjects(("ACD-SA-MIB", "acdSaServiceStatusName"), ("ACD-SA-MIB", "acdSaServiceStatusAdminState"), ("ACD-SA-MIB", "acdSaServiceStatusOperState"), ("ACD-SA-MIB", "acdSaServiceStatusNbrMetrics"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaServiceStatusGroup = acdSaServiceStatusGroup.setStatus('current')
if mibBuilder.loadTexts: acdSaServiceStatusGroup.setDescription('Objects for the Service Status Group.')
acdSaCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 12, 2, 1, 1)).setObjects(("ACD-SA-MIB", "acdSaServiceConfigGroup"), ("ACD-SA-MIB", "acdSaMetricConfigGroup"), ("ACD-SA-MIB", "acdSaServiceCounterGroup"), ("ACD-SA-MIB", "acdSaServiceHistCounterGroup"), ("ACD-SA-MIB", "acdSaServiceMonoCounterGroup"), ("ACD-SA-MIB", "acdSaMetricCounterGroup"), ("ACD-SA-MIB", "acdSaMetricHistCounterGroup"), ("ACD-SA-MIB", "acdSaMetricMonoCounterGroup"), ("ACD-SA-MIB", "acdSaServiceStatusGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSaCompliance = acdSaCompliance.setStatus('current')
if mibBuilder.loadTexts: acdSaCompliance.setDescription('The compliance statement for support of the ACD-SA-MIB module.')
mibBuilder.exportSymbols("ACD-SA-MIB", acdSaServiceStatusOperState=acdSaServiceStatusOperState, acdSaServiceCounterChliRatio=acdSaServiceCounterChliRatio, acdSaServiceHistCounterAvailRatio=acdSaServiceHistCounterAvailRatio, acdSaMetricCounterUaTime=acdSaMetricCounterUaTime, acdSaServiceStatusNbrMetrics=acdSaServiceStatusNbrMetrics, acdSaServiceConfigName=acdSaServiceConfigName, acdSaMetricConfigThreshold=acdSaMetricConfigThreshold, acdSaMetricHistCounterID=acdSaMetricHistCounterID, AcdSaValidFlag=AcdSaValidFlag, acdSaServiceMonoCounterTable=acdSaServiceMonoCounterTable, acdSaServiceConfigTimeInterval=acdSaServiceConfigTimeInterval, acdSaCompliances=acdSaCompliances, AcdSaMetricType=AcdSaMetricType, acdSaServiceHistCounterPeriodIndex=acdSaServiceHistCounterPeriodIndex, acdSaServiceCounterAvailRatio=acdSaServiceCounterAvailRatio, acdSaServiceHistCounterUpTime=acdSaServiceHistCounterUpTime, acdSaMetricHistCounterEntry=acdSaMetricHistCounterEntry, acdSaServiceMonoCounterGroup=acdSaServiceMonoCounterGroup, acdSaServiceConfigEntry=acdSaServiceConfigEntry, acdSaMetricHistCounterTable=acdSaMetricHistCounterTable, acdSaServiceMonoCounterUpTime=acdSaServiceMonoCounterUpTime, acdSaServiceCounterTable=acdSaServiceCounterTable, acdSaServiceStatusID=acdSaServiceStatusID, acdSaMIBObjects=acdSaMIBObjects, acdSaMetricCounterGroup=acdSaMetricCounterGroup, acdSaServiceHistCounterChliRatio=acdSaServiceHistCounterChliRatio, acdSaMetricMonoCounterEntry=acdSaMetricMonoCounterEntry, acdSaConformance=acdSaConformance, acdSaGroups=acdSaGroups, acdSaMetricCounterValidFlag=acdSaMetricCounterValidFlag, acdSaMetricConfigRowStatus=acdSaMetricConfigRowStatus, acdSaServiceIndex=acdSaServiceIndex, acdSaServiceConfigGroup=acdSaServiceConfigGroup, acdSaServiceCounterEntry=acdSaServiceCounterEntry, acdSaMetricHistCounterUaTime=acdSaMetricHistCounterUaTime, acdSaServiceStatusTable=acdSaServiceStatusTable, acdSaServiceHistCounterIntervalEnd=acdSaServiceHistCounterIntervalEnd, acdSaServiceMonoCounterValidFlag=acdSaServiceMonoCounterValidFlag, acdSaServiceHistCounterLargestGap=acdSaServiceHistCounterLargestGap, acdSaServiceMonoCounterLargestGap=acdSaServiceMonoCounterLargestGap, acdSaServiceConfigAdminState=acdSaServiceConfigAdminState, acdSaMetricConfigGroup=acdSaMetricConfigGroup, acdSaMetricCounterEntry=acdSaMetricCounterEntry, acdSaMetricHistCounterChliTime=acdSaMetricHistCounterChliTime, acdSaServiceMonoCounterMaintTime=acdSaServiceMonoCounterMaintTime, acdSaServiceCounterUpTime=acdSaServiceCounterUpTime, AcdSaAdminStateFlag=AcdSaAdminStateFlag, AcdSaOperStateFlag=AcdSaOperStateFlag, acdSaServiceHistCounterMaintTime=acdSaServiceHistCounterMaintTime, acdSaMetricCounterChliTime=acdSaMetricCounterChliTime, acdSaServiceStatusEntry=acdSaServiceStatusEntry, acdSaMetricMonoCounterTable=acdSaMetricMonoCounterTable, acdSaMetricHistCounterPeriodIndex=acdSaMetricHistCounterPeriodIndex, acdSaMetricIndex=acdSaMetricIndex, acdSaCompliance=acdSaCompliance, acdSaServiceMonoCounterEntry=acdSaServiceMonoCounterEntry, acdSaMetricCounterTable=acdSaMetricCounterTable, acdSaServiceMonoCounterUaTime=acdSaServiceMonoCounterUaTime, acdSaNotifications=acdSaNotifications, acdSaMetricMonoCounterUaTime=acdSaMetricMonoCounterUaTime, acdSa=acdSa, acdSaServiceMonoCounterChliRatio=acdSaServiceMonoCounterChliRatio, acdSaServiceStatusAdminState=acdSaServiceStatusAdminState, acdSaServiceMonoCounterChliTime=acdSaServiceMonoCounterChliTime, acdSaServiceHistCounterUaTime=acdSaServiceHistCounterUaTime, acdSaMetricConfigName=acdSaMetricConfigName, acdSaServiceCounterMaintTime=acdSaServiceCounterMaintTime, PYSNMP_MODULE_ID=acdSa, acdSaServiceConfigTable=acdSaServiceConfigTable, acdSaServiceHistCounterChliTime=acdSaServiceHistCounterChliTime, acdSaServiceHistCounterGaps=acdSaServiceHistCounterGaps, acdSaServiceMonoCounterAvailRatio=acdSaServiceMonoCounterAvailRatio, acdSaServiceCounterGroup=acdSaServiceCounterGroup, acdSaMetricHistCounterGroup=acdSaMetricHistCounterGroup, acdSaMetricHistCounterValidFlag=acdSaMetricHistCounterValidFlag, acdSaMetricHistCounterIntervalEnd=acdSaMetricHistCounterIntervalEnd, acdSaServiceMonoCounterGaps=acdSaServiceMonoCounterGaps, acdSaServiceCounterValidFlag=acdSaServiceCounterValidFlag, acdSaMetricConfigSrcName=acdSaMetricConfigSrcName, acdSaServiceStatusName=acdSaServiceStatusName, acdSaServiceHistCounterEntry=acdSaServiceHistCounterEntry, acdSaServiceCounterUaTime=acdSaServiceCounterUaTime, acdSaServiceConfigReportingPeriod=acdSaServiceConfigReportingPeriod, acdSaServiceConfigRowStatus=acdSaServiceConfigRowStatus, acdSaMetricMonoCounterValidFlag=acdSaMetricMonoCounterValidFlag, acdSaStatus=acdSaStatus, acdSaMetricMonoCounterGroup=acdSaMetricMonoCounterGroup, acdSaServiceCounterPeriodIndex=acdSaServiceCounterPeriodIndex, acdSaMetricConfigTable=acdSaMetricConfigTable, acdSaServiceHistCounterTable=acdSaServiceHistCounterTable, acdSaServiceCounterChliTime=acdSaServiceCounterChliTime, acdSaMetricConfigEntry=acdSaMetricConfigEntry, acdSaServiceCounterGaps=acdSaServiceCounterGaps, acdSaMetricMonoCounterChliTime=acdSaMetricMonoCounterChliTime, acdSaServiceConfigHliWindowSize=acdSaServiceConfigHliWindowSize, acdSaServiceHistCounterValidFlag=acdSaServiceHistCounterValidFlag, acdSaServiceStatusGroup=acdSaServiceStatusGroup, acdSaCounter=acdSaCounter, acdSaServiceHistCounterGroup=acdSaServiceHistCounterGroup, acdSaServiceCounterLargestGap=acdSaServiceCounterLargestGap, acdSaConfig=acdSaConfig, acdSaMetricConfigType=acdSaMetricConfigType, acdSaServiceConfigUaWindowSize=acdSaServiceConfigUaWindowSize)
