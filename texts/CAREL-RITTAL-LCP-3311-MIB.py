#
# PySNMP MIB module CAREL-RITTAL-LCP-3311-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/carel/CAREL-RITTAL-LCP-3311-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 12:00:11 2024
# On host fv-az888-540 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Gauge32, enterprises, ModuleIdentity, Integer32, iso, IpAddress, Counter32, Unsigned32, TimeTicks, Counter64, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Gauge32", "enterprises", "ModuleIdentity", "Integer32", "iso", "IpAddress", "Counter32", "Unsigned32", "TimeTicks", "Counter64", "MibIdentifier")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
carel = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839))
carel.setRevisions(('2021-06-29 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: carel.setRevisionsDescriptions(('First draft containing the values outlined in the 3311.320 docs \n                        https://www.rittal.com/imf/none/3_4342/3311320_Instructions_spec__EN',))
if mibBuilder.loadTexts: carel.setLastUpdated('202106290000Z')
if mibBuilder.loadTexts: carel.setOrganization('Epiecs')
if mibBuilder.loadTexts: carel.setContactInfo('EPIECS\n                        epiecs.be\n\n\t\t\tEmail:\tgregorybers@epiecs.be')
if mibBuilder.loadTexts: carel.setDescription('Custom MIB for Rittal LCP 3311 chillers connected to a pco web card')
rittal = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606))
rittalLCP3311 = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2))
sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1))
digital = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1))
analog = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2))
integer = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3))
class DivBy10(TextualConvention, Integer32):
    description = 'Fixed point, one decimal'
    status = 'current'
    displayHint = 'd-1'

compressorOverloadAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorOverloadAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorOverloadAlarm.setDescription('Compressor overload alarm\n        ok (0),\n\t\talarm (1)')
highPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: highPressureAlarm.setStatus('current')
if mibBuilder.loadTexts: highPressureAlarm.setDescription('High pressure alarm\n        ok (0),\n\t\talarm (1)')
remoteOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: remoteOnOff.setStatus('current')
if mibBuilder.loadTexts: remoteOnOff.setDescription('Remote On/Off\n                off (0),\n\t\ton (1)')
inverterAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterAlarm.setStatus('current')
if mibBuilder.loadTexts: inverterAlarm.setDescription('Inverter alarm\n        ok (0),\n\t\talarm (1)')
driveAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driveAlarm.setStatus('current')
if mibBuilder.loadTexts: driveAlarm.setDescription('Power+ drive off-line alarm\n        ok (0),\n\t\talarm (1)')
inverterOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOnOff.setStatus('current')
if mibBuilder.loadTexts: inverterOnOff.setDescription('Inverter On/Off\n                off (0),\n\t\ton (1)')
generalAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generalAlarm.setStatus('current')
if mibBuilder.loadTexts: generalAlarm.setDescription('General alarm\n        alarm (0),\n\t\tok (1)')
resetAllAlarms = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: resetAllAlarms.setStatus('current')
if mibBuilder.loadTexts: resetAllAlarms.setDescription('Reset all alarms\n                no (0),\n\t\tyes (1)')
compressorEnvelopeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorEnvelopeAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorEnvelopeAlarm.setDescription('Compressor forced off working out envelope\n        ok (0),\n\t\talarm (1)')
compressorStartupFailureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorStartupFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorStartupFailureAlarm.setDescription('Compressor startup failure alarm, reached max retries\n        ok (0),\n\t\talarm (1)')
maxDischargeTemperatureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxDischargeTemperatureAlarm.setStatus('current')
if mibBuilder.loadTexts: maxDischargeTemperatureAlarm.setDescription('Maximum discharge temperature has been reached\n        ok (0),\n\t\talarm (1)')
compressorDeltaPressureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDeltaPressureAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorDeltaPressureAlarm.setDescription('Delta pressure too big to startup compressor\n        ok (0),\n\t\talarm (1)')
oilReturnAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oilReturnAlarm.setStatus('current')
if mibBuilder.loadTexts: oilReturnAlarm.setDescription('Oil return alarm for when the compressor is running. Lubrication issue.\n        ok (0),\n\t\talarm (1)')
outputTemperatureTopProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureTopProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureTopProbeAlarm.setDescription('Top output temperature probe broken\n        ok (0),\n\t\talarm (1)')
outputTemperatureMidProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureMidProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureMidProbeAlarm.setDescription('Mid output temperature probe broken\n        ok (0),\n\t\talarm (1)')
outputTemperatureBottomProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureBottomProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureBottomProbeAlarm.setDescription('Bottom output temperature probe broken\n        ok (0),\n\t\talarm (1)')
inputTemperatureTopProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureTopProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureTopProbeAlarm.setDescription('Top input temperature probe broken\n        ok (0),\n\t\talarm (1)')
inputTemperatureMidProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureMidProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureMidProbeAlarm.setDescription('Mid input temperature probe broken\n        ok (0),\n\t\talarm (1)')
inputTemperatureBottomProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureBottomProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureBottomProbeAlarm.setDescription('Bottom input temperature probe broken\n        ok (0),\n\t\talarm (1)')
compressorDischargeTemperatureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargeTemperatureProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorDischargeTemperatureProbeAlarm.setDescription('Compressor discharge temperature probe broken\n        ok (0),\n\t\talarm (1)')
compressorSuctionTemperatureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionTemperatureProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorSuctionTemperatureProbeAlarm.setDescription('Compressor suction temperature probe broken\n        ok (0),\n\t\talarm (1)')
compressorDischargePressureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargePressureProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorDischargePressureProbeAlarm.setDescription('Compressor discharge pressure probe broken\n        ok (0),\n\t\talarm (1)')
compressorSuctionPressureProbeAlarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionPressureProbeAlarm.setStatus('current')
if mibBuilder.loadTexts: compressorSuctionPressureProbeAlarm.setDescription('Compressor suction pressure probe broken\n        ok (0),\n\t\talarm (1)')
reboot = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: reboot.setStatus('current')
if mibBuilder.loadTexts: reboot.setDescription('Reboot the system\n                no (0),\n\t\tyes (1)')
compressorRotorSpeedHz = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorRotorSpeedHz.setStatus('current')
if mibBuilder.loadTexts: compressorRotorSpeedHz.setDescription('Compressor rotor speed in Hz')
driverPowerStatus = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stop", 1), ("run", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: driverPowerStatus.setStatus('current')
if mibBuilder.loadTexts: driverPowerStatus.setDescription('Driver power status\n                stop (1),\n\t\trun (2),\n\t\talarm (3)')
currentErrorCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33))).clone(namedValues=NamedValues(("OK", 0), ("ALA02", 2), ("ALA03", 3), ("ALA04", 4), ("ALA05", 5), ("ALA06", 6), ("ALA07", 7), ("ALA08", 8), ("ALA09", 9), ("ALA10", 10), ("ALA11", 11), ("ALA12", 12), ("ALB01", 13), ("ALB02", 14), ("ALB03", 15), ("ALC01", 16), ("ALC03", 17), ("ALC04", 18), ("ALC05", 19), ("ALC06", 20), ("ALF01", 21), ("ALD02", 22), ("ALD03", 23), ("ALD04", 24), ("ALD05", 25), ("ALD06", 26), ("ALD07", 27), ("ALD08", 28), ("ALD09", 29), ("ALL01", 30), ("ALL02", 31), ("ALL99", 32), ("ALW04", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentErrorCode.setStatus('current')
if mibBuilder.loadTexts: currentErrorCode.setDescription('Current error code')
driverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 4), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: driverTemperature.setStatus('current')
if mibBuilder.loadTexts: driverTemperature.setDescription('Driver Power+ Temperature')
dcBusVoltage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 5), DivBy10()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBusVoltage.setStatus('current')
if mibBuilder.loadTexts: dcBusVoltage.setDescription('Power+ DC Voltage')
motorVoltage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 6), DivBy10()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: motorVoltage.setStatus('current')
if mibBuilder.loadTexts: motorVoltage.setDescription('Motor Voltage')
powerRequest = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 7), DivBy10()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerRequest.setStatus('current')
if mibBuilder.loadTexts: powerRequest.setDescription('Request of power for inverter after envelop')
unitOnOff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("energy-save", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unitOnOff.setStatus('current')
if mibBuilder.loadTexts: unitOnOff.setDescription('Unit on/off state\n          off (0),\n          on (1),\n          energy-save (2),\n          auto (3)\n          ')
envelopeZone = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ok", 0), ("maximum-compression-ratio", 1), ("maximum-discharge-power", 2), ("current-limit", 3), ("maximum-suction-power", 4), ("minimum-compression-ratio", 5), ("minimum-delta-power", 6), ("minimum-discharge-power", 7), ("minimum-suction-power", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: envelopeZone.setStatus('current')
if mibBuilder.loadTexts: envelopeZone.setDescription('envelope zone\n          ok (0),\n\t  maximum compression ratio (1),\n\t  maximum discharge power (2),\n\t  current limit (3),\n\t  maximum suction power(4),\n\t  minimum compression ratio (5),\n\t  minimum delta power (6),\n\t  minimum discharge power(7),\n\t  minimum suction power (8)\n          ')
coolingCapacity = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: coolingCapacity.setStatus('current')
if mibBuilder.loadTexts: coolingCapacity.setDescription('Actual EVD valve cooling capacity')
evdValveSteps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 540))).setUnits('steps').setMaxAccess("readonly")
if mibBuilder.loadTexts: evdValveSteps.setStatus('current')
if mibBuilder.loadTexts: evdValveSteps.setDescription('EVD valve steps position')
fanSpeedPercent = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedPercent.setStatus('current')
if mibBuilder.loadTexts: fanSpeedPercent.setDescription('The fan speed percentage')
fanSpeedRpm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3700))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: fanSpeedRpm.setStatus('current')
if mibBuilder.loadTexts: fanSpeedRpm.setDescription('The fan speed rpm')
evdValveOpening = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: evdValveOpening.setStatus('current')
if mibBuilder.loadTexts: evdValveOpening.setDescription('Actual EVD valve opening')
outputTemperatureTopSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 2), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureTopSensor.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureTopSensor.setDescription('Top sensor output temperature in Celcius')
outputTemperatureMidSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 3), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureMidSensor.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureMidSensor.setDescription('Mid sensor output temperature in Celcius')
outputTemperatureBottomSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 4), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureBottomSensor.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureBottomSensor.setDescription('Bottom sensor output temperature in Celcius')
inputTemperatureTopSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 6), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureTopSensor.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureTopSensor.setDescription('Top sensor input temperature in Celcius')
inputTemperatureMidSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 7), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureMidSensor.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureMidSensor.setDescription('Mid sensor input temperature in Celcius')
inputTemperatureBottomSensor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 8), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureBottomSensor.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureBottomSensor.setDescription('Bottom sensor input temperature in Celcius')
compressorDischargeTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 9), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargeTemperature.setStatus('current')
if mibBuilder.loadTexts: compressorDischargeTemperature.setDescription('Compressor discharge temperature')
compressorSuctionTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 10), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionTemperature.setStatus('current')
if mibBuilder.loadTexts: compressorSuctionTemperature.setDescription('Compressor suction temperature')
compressorDischargePressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 11), DivBy10()).setUnits('bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorDischargePressure.setStatus('current')
if mibBuilder.loadTexts: compressorDischargePressure.setDescription('Compressor discharge pressure')
compressorSuctionPressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 12), DivBy10()).setUnits('bar').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: compressorSuctionPressure.setDescription('Compressor suction pressure')
evaporatorTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 13), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: evaporatorTemperature.setStatus('current')
if mibBuilder.loadTexts: evaporatorTemperature.setDescription('Evaporator temperature from Low pressure conversion')
condensingTemperature = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 14), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: condensingTemperature.setStatus('current')
if mibBuilder.loadTexts: condensingTemperature.setDescription('Condensing temperature from High pressure conversion')
inputTemperatureAverage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 21), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: inputTemperatureAverage.setStatus('current')
if mibBuilder.loadTexts: inputTemperatureAverage.setDescription('Average input temperature in Celcius')
outputTemperatureAverage = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 22), DivBy10()).setUnits('C').setMaxAccess("readonly")
if mibBuilder.loadTexts: outputTemperatureAverage.setStatus('current')
if mibBuilder.loadTexts: outputTemperatureAverage.setDescription('Average output temperature in Celcius')
compressorRotorSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 45), DivBy10()).setUnits('rps').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorRotorSpeed.setStatus('current')
if mibBuilder.loadTexts: compressorRotorSpeed.setDescription('Compressor rotor speed')
compressorMotorCurrent = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 46), DivBy10()).setUnits('A').setMaxAccess("readonly")
if mibBuilder.loadTexts: compressorMotorCurrent.setStatus('current')
if mibBuilder.loadTexts: compressorMotorCurrent.setDescription('Compressor motor current')
lcpSetpoint = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2606, 2, 1, 2, 48), DivBy10()).setUnits('C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: lcpSetpoint.setStatus('current')
if mibBuilder.loadTexts: lcpSetpoint.setDescription('Main LCP setpoint')
mibBuilder.exportSymbols("CAREL-RITTAL-LCP-3311-MIB", motorVoltage=motorVoltage, driveAlarm=driveAlarm, lcpSetpoint=lcpSetpoint, DivBy10=DivBy10, compressorSuctionPressureProbeAlarm=compressorSuctionPressureProbeAlarm, outputTemperatureMidProbeAlarm=outputTemperatureMidProbeAlarm, rittalLCP3311=rittalLCP3311, PYSNMP_MODULE_ID=carel, inputTemperatureMidProbeAlarm=inputTemperatureMidProbeAlarm, generalAlarm=generalAlarm, inputTemperatureTopProbeAlarm=inputTemperatureTopProbeAlarm, outputTemperatureBottomProbeAlarm=outputTemperatureBottomProbeAlarm, reboot=reboot, driverTemperature=driverTemperature, outputTemperatureMidSensor=outputTemperatureMidSensor, inputTemperatureTopSensor=inputTemperatureTopSensor, inputTemperatureMidSensor=inputTemperatureMidSensor, inputTemperatureBottomSensor=inputTemperatureBottomSensor, resetAllAlarms=resetAllAlarms, outputTemperatureTopSensor=outputTemperatureTopSensor, compressorSuctionTemperature=compressorSuctionTemperature, compressorSuctionPressure=compressorSuctionPressure, compressorRotorSpeed=compressorRotorSpeed, rittal=rittal, inverterOnOff=inverterOnOff, outputTemperatureTopProbeAlarm=outputTemperatureTopProbeAlarm, compressorRotorSpeedHz=compressorRotorSpeedHz, outputTemperatureBottomSensor=outputTemperatureBottomSensor, oilReturnAlarm=oilReturnAlarm, outputTemperatureAverage=outputTemperatureAverage, highPressureAlarm=highPressureAlarm, compressorDischargePressure=compressorDischargePressure, inputTemperatureBottomProbeAlarm=inputTemperatureBottomProbeAlarm, carel=carel, compressorDeltaPressureAlarm=compressorDeltaPressureAlarm, evdValveOpening=evdValveOpening, unitOnOff=unitOnOff, compressorOverloadAlarm=compressorOverloadAlarm, compressorDischargeTemperatureProbeAlarm=compressorDischargeTemperatureProbeAlarm, compressorDischargeTemperature=compressorDischargeTemperature, remoteOnOff=remoteOnOff, inputTemperatureAverage=inputTemperatureAverage, envelopeZone=envelopeZone, inverterAlarm=inverterAlarm, compressorStartupFailureAlarm=compressorStartupFailureAlarm, dcBusVoltage=dcBusVoltage, fanSpeedRpm=fanSpeedRpm, evaporatorTemperature=evaporatorTemperature, condensingTemperature=condensingTemperature, evdValveSteps=evdValveSteps, coolingCapacity=coolingCapacity, fanSpeedPercent=fanSpeedPercent, digital=digital, maxDischargeTemperatureAlarm=maxDischargeTemperatureAlarm, compressorSuctionTemperatureProbeAlarm=compressorSuctionTemperatureProbeAlarm, integer=integer, powerRequest=powerRequest, sensors=sensors, compressorEnvelopeAlarm=compressorEnvelopeAlarm, currentErrorCode=currentErrorCode, compressorMotorCurrent=compressorMotorCurrent, analog=analog, compressorDischargePressureProbeAlarm=compressorDischargePressureProbeAlarm, driverPowerStatus=driverPowerStatus)
