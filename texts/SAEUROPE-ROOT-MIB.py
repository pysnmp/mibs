#
# PySNMP MIB module SAEUROPE-ROOT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/saeurope/SAEUROPE-ROOT-MIB
# Produced by pysmi-1.1.12 at Tue Sep 17 13:02:04 2024
# On host fv-az1215-438 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.14 (main, Jul 16 2024, 19:03:10) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
enterprises, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, IpAddress, Integer32, ModuleIdentity, ObjectIdentity, Unsigned32, Bits, TimeTicks, NotificationType, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "IpAddress", "Integer32", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "Bits", "TimeTicks", "NotificationType", "Gauge32", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
saEuropeRoot = ModuleIdentity((1, 3, 6, 1, 4, 1, 1482, 3))
saEuropeRoot.setRevisions(('2020-10-20 11:00', '2015-11-10 13:00', '2003-01-17 09:00', '2002-12-02 12:00', '2002-07-01 11:00', '2002-03-20 12:00', '2002-03-06 16:00', '2002-02-06 16:00', '2002-01-16 11:15', '2002-01-16 11:15', '2001-08-29 12:15',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: saEuropeRoot.setRevisionsDescriptions(('Updated contact info.', 'Updated contact info.', 'V01.00.08\t\t\n     switches, switchesMIBGroups, analogDemodulators and \n     analogDemodulatorsMIBGroups added.', 'V01.00.07\t\t\n     Initial version of the SA Europe Root MIB.\n     Changes to MIB name and OID names, small editorial changes.\n     Contents of the MIB are the same as\n     BarcoNet Root SMIv2 MIB V01.00.06.', 'V01.00.06\t\t\n     enterprises is now imported from SNMPv2-SMI.', 'V01.00.05\t\t\n     Removed trapDestinationMIBGroup, this OID will be included\n     in the trap destination MIB.', 'V01.00.04\t\t\n     Changes made to UTC time, to be compliant with older versions,\n     MODULE-IDENTITY imported from SNMPv2-SMI,\n     barcoNet OID placed placed after the MODULE-IDENTITY definition.', "V01.00.03\t\t\n     siProcessors replaced with tsProcessors,\n     siProcessorsMIBGroups replaced with tsProcessorsMIBGroups,\n     transponders OID replaced with hms OID,\n     transpondersMIBGroups replaced with hmsMIBGroups,\n     hms and netSenseHMS OID's deleted from the BarcoNet Root MIB,\n     hmsMIBGroups and netSenseHMSMIBGroups deleted.", 'V01.00.02\t\t\n     Extended with trapDestinationMIBGroup.', 'V01.00.01\t\t\n     Extended with the following categories:\n         digitalCableReceivers, digitalCableReceiversMIBGroups,\n         digitalTerrestrialModulators, \n         digitalTerrestrialModulatorsMIBGroups,\n         videoOnDemand, videoOnDemandMIBGroups,\n         netSenseHMS and netSenseHMSMIBGroups.', 'V01.00.00\t\t\n     Initial version of the BarcoNet Root MIB',))
if mibBuilder.loadTexts: saEuropeRoot.setLastUpdated('202010201100Z')
if mibBuilder.loadTexts: saEuropeRoot.setOrganization('Synamedia')
if mibBuilder.loadTexts: saEuropeRoot.setContactInfo('www.synamedia.com')
if mibBuilder.loadTexts: saEuropeRoot.setDescription('This MIB implements the Synamedia root object identifiers')
saEurope = MibIdentifier((1, 3, 6, 1, 4, 1, 1482))
mibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1))
commonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 1))
trapControlMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 1, 1))
messagesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 1, 2))
clockMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 1, 3))
devicesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3))
backbonesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 1))
headendsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2))
scramblersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 1))
tsProcessorsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 2))
descramblersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 3))
digitalSatelliteReceiversMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 4))
digitalTerrestrialReceiversMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 5))
mpegIIDecodersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 6))
digitalSwitchesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 7))
upconvertersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 8))
terminalAdaptersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 9))
mpegIIEncodersMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 10))
digitalCableReceiversMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 11))
digitalTerrestrialModulatorsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 12))
videoOnDemandMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 13))
switchesMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 14))
analogDemodulatorsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 2, 15))
monitoringAndManagementMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 3))
hmsMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 1, 3, 4))
copernicus = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 2))
equipment = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20))
common = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 1))
trapControl = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 1, 1))
messages = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 1, 2))
clock = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 1, 3))
devices = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3))
backbones = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 1))
headends = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2))
scramblers = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 1))
tsProcessors = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 2))
descramblers = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 3))
digitalSatelliteReceivers = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 4))
digitalTerrestrialReceivers = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 5))
mpegIIDecoders = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 6))
digitalSwitches = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 7))
upconverters = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 8))
terminalAdapters = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 9))
mpegIIEncoders = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 10))
digitalCableReceivers = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 11))
digitalTerrestrialModulators = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 12))
videoOnDemand = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 13))
switches = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 14))
analogDemodulators = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 2, 15))
monitoringAndManagement = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 3))
hms = MibIdentifier((1, 3, 6, 1, 4, 1, 1482, 20, 3, 4))
mibBuilder.exportSymbols("SAEUROPE-ROOT-MIB", messagesMIBGroups=messagesMIBGroups, switchesMIBGroups=switchesMIBGroups, descramblersMIBGroups=descramblersMIBGroups, mpegIIDecodersMIBGroups=mpegIIDecodersMIBGroups, mpegIIEncoders=mpegIIEncoders, digitalTerrestrialReceiversMIBGroups=digitalTerrestrialReceiversMIBGroups, videoOnDemand=videoOnDemand, mibGroups=mibGroups, trapControl=trapControl, messages=messages, equipment=equipment, hms=hms, scramblersMIBGroups=scramblersMIBGroups, analogDemodulators=analogDemodulators, devicesMIBGroups=devicesMIBGroups, mpegIIEncodersMIBGroups=mpegIIEncodersMIBGroups, backbones=backbones, tsProcessors=tsProcessors, copernicus=copernicus, monitoringAndManagementMIBGroups=monitoringAndManagementMIBGroups, saEuropeRoot=saEuropeRoot, mpegIIDecoders=mpegIIDecoders, descramblers=descramblers, backbonesMIBGroups=backbonesMIBGroups, commonMIBGroups=commonMIBGroups, tsProcessorsMIBGroups=tsProcessorsMIBGroups, headends=headends, digitalSatelliteReceivers=digitalSatelliteReceivers, digitalTerrestrialReceivers=digitalTerrestrialReceivers, digitalSwitches=digitalSwitches, monitoringAndManagement=monitoringAndManagement, digitalSatelliteReceiversMIBGroups=digitalSatelliteReceiversMIBGroups, analogDemodulatorsMIBGroups=analogDemodulatorsMIBGroups, hmsMIBGroups=hmsMIBGroups, digitalSwitchesMIBGroups=digitalSwitchesMIBGroups, digitalCableReceivers=digitalCableReceivers, upconverters=upconverters, PYSNMP_MODULE_ID=saEuropeRoot, digitalTerrestrialModulatorsMIBGroups=digitalTerrestrialModulatorsMIBGroups, devices=devices, saEurope=saEurope, videoOnDemandMIBGroups=videoOnDemandMIBGroups, switches=switches, clock=clock, digitalTerrestrialModulators=digitalTerrestrialModulators, trapControlMIBGroups=trapControlMIBGroups, headendsMIBGroups=headendsMIBGroups, scramblers=scramblers, digitalCableReceiversMIBGroups=digitalCableReceiversMIBGroups, terminalAdaptersMIBGroups=terminalAdaptersMIBGroups, common=common, terminalAdapters=terminalAdapters, clockMIBGroups=clockMIBGroups, upconvertersMIBGroups=upconvertersMIBGroups)
