#
# PySNMP MIB module RITTAL-CMC-III-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rittal/RITTAL-CMC-III-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:18:25 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint")
rittal, = mibBuilder.importSymbols("RITTAL-SMI-MIB", "rittal")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysObjectID, = mibBuilder.importSymbols("SNMPv2-MIB", "sysObjectID")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Bits, TimeTicks, Counter32, ModuleIdentity, MibIdentifier, NotificationType, Gauge32, Unsigned32, iso, ObjectIdentity, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Bits", "TimeTicks", "Counter32", "ModuleIdentity", "MibIdentifier", "NotificationType", "Gauge32", "Unsigned32", "iso", "ObjectIdentity", "Counter64", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
cmcIII = ModuleIdentity((1, 3, 6, 1, 4, 1, 2606, 7))
cmcIII.setRevisions(('2016-02-02 00:00', '2015-10-27 00:00', '2015-01-23 00:00', '2014-07-10 00:00', '2013-11-10 00:00', '2013-05-01 00:00', '2012-08-30 00:00', '2011-09-02 00:00', '2011-04-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmcIII.setRevisionsDescriptions(('added new enums, fixed wrong descriptions.', 'added cmcIIIFiles, cmcIIIVarByTypeTable, cmcIIIVarIntDynTable, cmcIIIUnitLoadTable, cmcIIIUnitMode, cmcIIICapabilityRev,\n                            and all members of cmcIIIRadiusMibGroup, cmcIIIWebCamMibGroup.', 'added new enums.', 'matching of SIZEs.', 'added cmcIIIDevAssembly.', 'extended cmcIIILdapMibGroup, added cmcIIIShutdownMibGroup, cmcIIIModbusMibGroup, cmcIIIDrcMibGroup, added OPC UA support.', 'modified object-grouping.', 'SMIv2 Version of cmcIII MIB.', 'Initial Version of cmcIII MIB.',))
if mibBuilder.loadTexts: cmcIII.setLastUpdated('201602020000Z')
if mibBuilder.loadTexts: cmcIII.setOrganization('RITTAL GmbH & Co. KG')
if mibBuilder.loadTexts: cmcIII.setContactInfo('www.rittal.de\n\n                            RITTAL GmbH & Co. KG\n                            Forschung & Entwicklung\n                            Auf dem Stuetzelberg\n                            D-35745 Herborn\n                            Germany, Europe\n\n                            +49(0)2772 5050\n                            info@rittal.de.')
if mibBuilder.loadTexts: cmcIII.setDescription('The MIB module for representing cmcIII SNMP agent.')
cmcIIINotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 0))
cmcIIIMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 1))
cmcIIIUnit = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 2))
cmcIIISetup = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3))
cmcIIISetupGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2))
cmcIIISetupTimer = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3))
cmcIIISetupTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4))
cmcIIISetupSMTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5))
cmcIIISetupSMS = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6))
cmcIIISetupSysLog = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 7))
cmcIIISetupNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 8))
cmcIIISetupLDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9))
cmcIIISetupShutdown = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10))
cmcIIISetupModbus = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11))
cmcIIISetupRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12))
cmcIIISetupWebCam = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13))
cmcIIIDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4))
cmcIIIDevs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1))
cmcIIIDevInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1))
cmcIIIVars = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2))
cmcIIIVarInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1))
cmcIIIMsgs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3))
cmcIIIMsgInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1))
cmcIIIDrcs = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4))
cmcIIIDrcInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1))
cmcIIIFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5))
cmcIIIFileInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 1))
cmcIIIControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 5))
cmcIIIConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 6))
cmcIIIMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 6, 1))
cmcIIIMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2))
cmcIIIMibMajRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMibMajRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMibMajRev.setDescription('The Major Revision level.\n                            A change in the major revision level represents a major change\n                            in the architecture of the MIB. A change in the major revision\n                            level may indicate a significant change in the information,\n                            correct interpretation of data may require a MIB document\n                            with the same major revision level.')
cmcIIIMibMinRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMibMinRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMibMinRev.setDescription('The Minor Revision level.\n                            A change in the minor revision level may represent some minor\n                            additional support, no changes to any pre-existing information\n                            has occurred.')
cmcIIIAgentRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIAgentRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIAgentRev.setDescription('The SNMP Agent Revision level.')
cmcIIICapabilityRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30000, 39999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIICapabilityRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIICapabilityRev.setDescription('This agents capabilities as used in RITTAL-CMC-III-CAPABILITY-MIB.')
cmcIIIUnitStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2), ("overload", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitStatus.setDescription('General Status of CMCIII PU unit itself\n                            (1) OK\n                            (2) failed\n                            (3) overload (current too high).')
cmcIIIUnitURL = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitURL.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitURL.setDescription('URL of CMCIII PU.')
cmcIIIUnitHWRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitHWRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitHWRev.setDescription('Hardware Revision of CMCIII PU.')
cmcIIIUnitFWRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitFWRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitFWRev.setDescription('Firmware Revision of CMCIII PU.')
cmcIIIUnitOSRev = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitOSRev.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitOSRev.setDescription('Linux Revision of CMCIII PU.')
cmcIIIUnitSerial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitSerial.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitSerial.setDescription('Serial Number of CMCIII PU.')
cmcIIIUnitProd = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitProd.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitProd.setDescription('Production Code of CMCIII PU.')
cmcIIIUnitType = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("pu", 2), ("compact", 3), ("lcp", 4), ("pdu", 5), ("rms", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitType.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitType.setDescription('Type of CMCIII\n                            (1) Unit unknown\n                            (2) Processing Unit\n                            (3) Processing Unit Compact\n                            (4) LCP\n                            (5) PDU\n                            (6) RiMatrix S.')
cmcIIIUnitCurrentSource = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("acAdapter", 2), ("terminalStrip", 3), ("poe", 4), ("usb", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitCurrentSource.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitCurrentSource.setDescription('Current source of CMCIII PU\n                            (1) unknown\n                            (2) AC Adapter Power Supply\n                            (3) Terminal Strip\n                            (4) poe: Power Over Ethernet\n                            (5) usb: Universal Serial Bus.')
cmcIIICan0CurrentConsumption = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIICan0CurrentConsumption.setStatus('current')
if mibBuilder.loadTexts: cmcIIICan0CurrentConsumption.setDescription('Maximal current consumption required by CANopen fieldbus 1.')
cmcIIICan1CurrentConsumption = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIICan1CurrentConsumption.setStatus('current')
if mibBuilder.loadTexts: cmcIIICan1CurrentConsumption.setDescription('Maximal current consumption required by CANopen fieldbus 2.')
cmcIIIUnitUpTime = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitUpTime.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitUpTime.setDescription('Operating time of CMCIII PU in seconds since an epoch.')
cmcIIIUnitMode = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("localInit", 1), ("start", 2), ("pwrDelay", 3), ("restartBus", 4), ("localOnline", 5), ("collectSlaves", 6), ("reorganizeBus", 7), ("online", 8), ("prepareUpgrade", 9), ("upgradeSensor", 10), ("terminate", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitMode.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitMode.setDescription('Current status mode of CMCIII PU and all subsystems\n                            (1) local init ini progress\n                            (2) start local system first time\n                            (3) first start delay\n                            (4) restart bus system, reread configuration\n                            (5) locally online\n                            (6) collect all slaves at the bus\n                            (7) reorganize bus\n                            (8) up and running\n                            (9) prepare for sensor upgrade\n                            (10) upgrade sensors\n                            (11) gentle termination.')
cmcIIIUnitLoadTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 2, 14), )
if mibBuilder.loadTexts: cmcIIIUnitLoadTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitLoadTable.setDescription('A list of system load entries.')
cmcIIIUnitLoadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 2, 14, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIUnitLoadIndex"))
if mibBuilder.loadTexts: cmcIIIUnitLoadEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitLoadEntry.setDescription('Entries of system load table.')
cmcIIIUnitLoadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 2, 14, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: cmcIIIUnitLoadIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitLoadIndex.setDescription('Index for the system load table.\n                            These are the past minutes the load is given for.')
cmcIIIUnitLoadAverage = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 2, 14, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIUnitLoadAverage.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitLoadAverage.setDescription('System load average multiplied by 100.')
cmcIIILastChangeSetup = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeSetup.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeSetup.setDescription('Last change of configuration\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIISetTempUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("celsius", 1), ("fahrenheit", 2))).clone('celsius')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISetTempUnit.setStatus('current')
if mibBuilder.loadTexts: cmcIIISetTempUnit.setDescription('Unit of all temperature values and setpoints.')
cmcIIISetBeeper = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISetBeeper.setStatus('current')
if mibBuilder.loadTexts: cmcIIISetBeeper.setDescription('Audible alarm in CMCIII unit:\n                            (1) beeper is off (general)\n                            (2) beeper is on.')
cmcIIIQuitRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIQuitRelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIQuitRelay.setDescription("Enable or disable acknowledging currently active alarm relay\n                            (with 'C' on CMCIII).")
cmcIIILogicRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("closeAtAlarm", 1), ("openAtAlarm", 2), ("disabled", 3))).clone('closeAtAlarm')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILogicRelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIILogicRelay.setDescription('Logic of alarm relay:\n                            (1) Relay will pick up in case of an alarm\n                            (2) Relay will release in case of an alarm\n                            (3) Relay disabled.')
cmcIIIUnitMsgRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIUnitMsgRelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIUnitMsgRelay.setDescription('Alarm relay in case of Device Messages (detect, lost, changed..):\n                            (1) Relay disabled, relay will not switch in case of a device message\n                            (2) Relay enabled, relay will switch in case of a unit message.')
cmcIIIFunctionRelay = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("warningOnly", 1), ("alarmOnly", 2), ("warningOrAlarm", 3))).clone('warningOnly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIFunctionRelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFunctionRelay.setDescription('Logic of alarm relay:\n                            (1) Relay will switch in case of a warning only\n                            (2) Relay will switch in case of an alarm only\n                            (3) Relay will switch in case of an alarm or warning.')
cmcIIITimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 74)).clone(27)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimeZone.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimeZone.setDescription('Time Zone\n                            0  : (GMT-12:00) International Date Line West\n                            1  : (GMT-11:00) Midway Island, Samoa\n                            2  : (GMT-10:00) Hawaii\n                            3  : (GMT-09:00) Alaska\n                            4  : (GMT-08:00) Pacific Time (US and Canada), Tijuana\n                            5  : (GMT-07:00) Arizona\n                            6  : (GMT-07:00) Chihuahua, La Paz, Mazatlan\n                            7  : (GMT-07:00) Mountain Time (US & Canada)\n                            8  : (GMT-06:00) Central America\n                            9  : (GMT-06:00) Central Time (US and Canada)\n                            10 : (GMT-06:00) Guadalajara, Mexico City, Monterrey\n                            11 : (GMT-06:00) Saskatchewan\n                            12 : (GMT-05:00) Bogota, Lima, Quito\n                            13 : (GMT-05:00) Eastern Time (Us and Canada)\n                            14 : (GMT-05:00) Indiana (East)\n                            15 : (GMT-04:00) Atlantic Time (Canada)\n                            16 : (GMT-04:00) Caracas, La Paz\n                            17 : (GMT-04:00) Santiago\n                            18 : (GMT-03:30) Newfoundland\n                            19 : (GMT-03:00) Brasilia\n                            20 : (GMT-03:00) Buenos Aires, Georgetown\n                            21 : (GMT-03:00) Greenland\n                            22 : (GMT-02:00) Mid-Atlantic\n                            23 : (GMT-01:00) Azores\n                            24 : (GMT-01:00) Cape Verde Is.\n                            25 : (GMT) Casablanca, Monrovia\n                            26 : (GMT) Greenwich Mean Time : Dublin, Lisbon, London\n                            27 : (GMT+01:00) Amsterdam, Berlin, Bern, Rome, Vienna\n                            28 : (GMT+01:00) Belgrade, Bratislava, Budapest, Prague\n                            29 : (GMT+01:00) Brussels, Copenhagen, Madrid, Paris\n                            30 : (GMT+01:00) Sarajevo, Skopje, Warsaw, Zagreb\n                            31 : (GMT+01:00) West Central Africa\n                            32 : (GMT+02:00) Athens, Istanbul, Minsk\n                            33 : (GMT+02:00) Bucharest\n                            34 : (GMT+02:00) Harare, Pretoria\n                            35 : (GMT+02:00) Helsinki, Kyiv, Sofia\n                            36 : (GMT+02:00) Riga, Tallinn, Vilnius\n                            37 : (GMT+02:00) Jerusalem\n                            38 : (GMT+03:00) Baghdad\n                            39 : (GMT+03:00) Kuwait, Riyadh\n                            40 : (GMT+03:00) Moscow, St. Petersburg, Volgograd\n                            41 : (GMT+03:00) Nairobi\n                            42 : (GMT+03:30) Tehran\n                            43 : (GMT+04:00) Abu Dhabi, Muscat\n                            44 : (GMT+04:00) Baku, Tbilisi, Yerevan\n                            45 : (GMT+04:30) Kabul\n                            46 : (GMT+05:00) Ekaterinburg\n                            47 : (GMT+05:00) Islamabad, Karachi, Tashkent\n                            48 : (GMT+05:30) Chennai, Kolkata, Mumbai, New Delhi\n                            49 : (GMT+05:45) Kathmandu\n                            50 : (GMT+06:00) Almaty, Novosibirsk\n                            51 : (GMT+06:00) Astana, Dhaka\n                            52 : (GMT+06:00) Sri Jayawardenepura\n                            53 : (GMT+06:30) Rangoon\n                            54 : (GMT+07:00) Bangkok, Hanoi, Jakarta\n                            55 : (GMT+07:00) Krasnoyarsk\n                            56 : (GMT+08:00) Beijing, Chongqing, Hong Kong, Urumqi\n                            57 : (GMT+08:00) Irkutsk, Ulaan Bataar\n                            58 : (GMT+08:00) Kuala Lumpur, Singapore\n                            59 : (GMT+08:00) Perth\n                            60 : (GMT+08:00) Taipei\n                            61 : (GMT+09:00) Osaka, Sapporo, Tokyo\n                            62 : (GMT+09:00) Seoul\n                            63 : (GMT+09:00) Yakutsk\n                            64 : (GMT+09:30) Adelaide\n                            65 : (GMT+09:30) Darwin\n                            66 : (GMT+10:00) Brisbane\n                            67 : (GMT+10:00) Canberra, Melbourne, Sydney\n                            68 : (GMT+10:00) Guam, Port Moresby\n                            69 : (GMT+10:00) Hobart\n                            70 : (GMT+10:00) Vladivostok\n                            71 : (GMT+11:00) Magadan, Solomon Is., New Caledonia\n                            72 : (GMT+12:00) Auckland, Wellington\n                            73 : (GMT+12:00) Fiji, Kamchatka, Marshall Is.\n                            74 : (GMT+13:00) Nukualofa.')
cmcIIISetupDate = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISetupDate.setStatus('current')
if mibBuilder.loadTexts: cmcIIISetupDate.setDescription('Actual date in format DD.MM.YYYY\n                            Use UTC date to set date.')
cmcIIISetupTime = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISetupTime.setStatus('current')
if mibBuilder.loadTexts: cmcIIISetupTime.setDescription('Actual time in format HH:MM:SS, HH (0-23), MM (0-59), SS (0-59).\n                            Use UTC time to set time.')
cmcIIIWebAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 10), Bits().clone(namedValues=NamedValues(("httpEnabled", 0), ("httpsEnabled", 1))).clone(namedValues=NamedValues(("httpEnabled", 0), ("httpsEnabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebAccess.setDescription('Web access status:\n                            (0) httpEnabled  : http protocol is enabled\n                            (1) httpsEnabled : https protocol is enabled.')
cmcIIIHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIHttpPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIHttpPort.setDescription('TCP/IP port of HTTP daemon.')
cmcIIIHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIHttpsPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIHttpsPort.setDescription('TCP/IP port of HTTPS daemon.')
cmcIIIFtpAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIFtpAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFtpAccess.setDescription('Ftp access:\n                            (1) disabled\n                            (2) enabled.')
cmcIIIFtpPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(21)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIFtpPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFtpPort.setDescription('TCP/IP port of FTP daemon.')
cmcIIISshAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISshAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIISshAccess.setDescription('Ssh access:\n                            (1) disabled\n                            (2) enabled.')
cmcIIISshPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(22)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISshPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIISshPort.setDescription('TCP/IP port of SSH daemon.')
cmcIIITelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITelnetAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIITelnetAccess.setDescription('Telnet access:\n                            (1) disabled\n                            (2) enabled.')
cmcIIITelnetPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITelnetPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIITelnetPort.setDescription('TCP/IP port of telnet daemon.')
cmcIIILanguage = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("english", 1), ("german", 2), ("french", 3), ("spanish", 4), ("portuguese", 5), ("russian", 6), ("chinese", 7), ("japanese", 8))).clone('english')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILanguage.setStatus('current')
if mibBuilder.loadTexts: cmcIIILanguage.setDescription('Language:\n                            (1) English.\n                            (2) German,\n                            (3) French,\n                            (4) Spanish,\n                            (5) Portuguese,\n                            (6) Russian,\n                            (7) Chinese\n                            (8) Japanese.')
cmcIIIOpcUaAccess = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIOpcUaAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOpcUaAccess.setDescription('OPC UA access:\n                            (1) disabled\n                            (2) enabled.')
cmcIIIOpcUaPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 2, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(4840)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIOpcUaPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOpcUaPort.setDescription('TCP/IP port of OPC UA daemon.')
cmcIIINumberOfTimers = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfTimers.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfTimers.setDescription('Number of value table entries=number of outlets available on this unit.')
cmcIIITimerTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2), )
if mibBuilder.loadTexts: cmcIIITimerTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerTable.setDescription('Headline of Timer Table.')
cmcIIITimerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIITimerIndex"))
if mibBuilder.loadTexts: cmcIIITimerEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerEntry.setDescription('Entries of Timer Table.')
cmcIIITimerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIITimerIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerIndex.setDescription('Index for the list of timer entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfTimers.')
cmcIIITimerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("switchedOff", 1), ("switchedOn", 2), ("noTime", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITimerStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerStatus.setDescription('Actual status of the timer.')
cmcIIITimerDayOfWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("sun", 1), ("mon", 2), ("tue", 3), ("wed", 4), ("thu", 5), ("fri", 6), ("sat", 7), ("sat2sun", 8), ("mon2fri", 9), ("mon2sun", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimerDayOfWeek.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerDayOfWeek.setDescription('Selection of day of week for timer to switch.')
cmcIIITimeOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimeOn.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimeOn.setDescription('Time to switch on current function, Format: HH:MM.')
cmcIIITimeOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimeOff.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimeOff.setDescription('Time to switch off current function, Format: HH:MM.')
cmcIIITimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimeControl.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimeControl.setDescription('Control via RTC.')
cmcIIITimerFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))).clone(namedValues=NamedValues(("disKeypads", 1), ("unlDoors", 2), ("disTrapRec1", 3), ("disTrapRec2", 4), ("disTrapRec3", 5), ("disTrapRec4", 6), ("disSMS1", 7), ("disSMS2", 8), ("disSMS3", 9), ("disSMS4", 10), ("schedule1", 11), ("schedule2", 12), ("schedule3", 13), ("schedule4", 14), ("schedule5", 15), ("schedule6", 16), ("schedule7", 17), ("schedule8", 18)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITimerFunction.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerFunction.setDescription('Function which is controlled via timer\n                            1: Unlock of doors via keypad is disabled\n                            2: Doors will be unlocked\n                            3-6: sending traps to this trap receiver will be disabled\n                            7-10: sending SMS to phone number 1..4 will be disabled\n                            11-18: Scheduled alarm off.')
cmcIIINumberOfTrapReceivers = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfTrapReceivers.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfTrapReceivers.setDescription('Number of TrapReceiverTable entries. The number of trap receivers.')
cmcIIITrapReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 2), )
if mibBuilder.loadTexts: cmcIIITrapReceiverTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapReceiverTable.setDescription('A list of trap receiver entries.')
cmcIIITrapReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIITrapReceiverIndex"))
if mibBuilder.loadTexts: cmcIIITrapReceiverEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapReceiverEntry.setDescription('Entries of trapTable.')
cmcIIITrapReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIITrapReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapReceiverIndex.setDescription('Index for the trap receiver table. Its value ranges between\n                            1 and the value of NumberOfTrapReceivers.')
cmcIIITrapReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("snmpv1Trap", 2), ("snmpv2cTrap", 3), ("snmpv2cInform", 4), ("snmpv3Trap", 5), ("snmpv3Inform", 6))).clone('snmpv1Trap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITrapReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapReceiverStatus.setDescription('Enable SNMP version and trap/inform type or disable trap receiver.\n                            Enumeration type snmpv3Inform(6) is not yet supported.')
cmcIIITrapReceiverIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITrapReceiverIpAddress.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapReceiverIpAddress.setDescription('IP address of trap receiver.')
cmcIIISmtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpStatus.setDescription('SMTP (email) usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIISmtpServer = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpServer.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpServer.setDescription('IP address of SMTP server.')
cmcIIISmtpPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(25)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpPort.setDescription('TCP/IP port of SMTP server.')
cmcIIISmtpAuth = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("enabledTls", 3))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpAuth.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpAuth.setDescription('SMTP authentication usage:\n                            (1) disabled\n                            (2) enabled\n                            (3) enabled with TLS support.')
cmcIIISmtpUsername = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpUsername.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpUsername.setDescription('Username required to authenticate at the SMTP server.')
cmcIIISmtpPassword = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpPassword.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpPassword.setDescription('Password required to authenticate at the SMTP server.')
cmcIIISmtpSender = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpSender.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpSender.setDescription('Sender address (FROM:) of the SMTP message.')
cmcIIISmtpReply = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpReply.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReply.setDescription('Reply address (REPLY:) of the SMTP message.')
cmcIIINumberOfSmtpReceivers = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfSmtpReceivers.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfSmtpReceivers.setDescription('Number of SmtpReceiverTable entries. The number of SMTP receivers.')
cmcIIISmtpReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 10), )
if mibBuilder.loadTexts: cmcIIISmtpReceiverTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReceiverTable.setDescription('A list of SMTP receiver entries.')
cmcIIISmtpReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 10, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIISmtpReceiverIndex"))
if mibBuilder.loadTexts: cmcIIISmtpReceiverEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReceiverEntry.setDescription('Entries of SMTPTable.')
cmcIIISmtpReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIISmtpReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReceiverIndex.setDescription('Index for the SMTP receiver table. Its value ranges between\n                            1 and the value of NumberOfSmtpReceivers.')
cmcIIISmtpReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReceiverStatus.setDescription('Enable or disable SMTP receiver.')
cmcIIISmtpReceiverAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 5, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmtpReceiverAddress.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpReceiverAddress.setDescription('IP address of SMTP receiver.')
cmcIIISmsStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsStatus.setDescription('SMS usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIISmsPIN = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsPIN.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsPIN.setDescription('SMS PIN number.')
cmcIIISmsService = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsService.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsService.setDescription('SMS service number.')
cmcIIISmsMSN = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsMSN.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsMSN.setDescription('SMS MSN for ISDN.')
cmcIIISmsPreDial = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsPreDial.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsPreDial.setDescription('SMS PreDial number.')
cmcIIINumberOfSmsReceivers = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfSmsReceivers.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfSmsReceivers.setDescription('Number of SmsReceiverTable entries. The number of SMS receivers.')
cmcIIISmsReceiverTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 7), )
if mibBuilder.loadTexts: cmcIIISmsReceiverTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsReceiverTable.setDescription('A list of SMS receiver entries.')
cmcIIISmsReceiverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 7, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIISmsReceiverIndex"))
if mibBuilder.loadTexts: cmcIIISmsReceiverEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsReceiverEntry.setDescription('Entries of SMSTable.')
cmcIIISmsReceiverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 7, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIISmsReceiverIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsReceiverIndex.setDescription('Index for the SMS receiver table. Its value ranges between\n                            1 and the value of NumberOfSmsReceivers.')
cmcIIISmsReceiverStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsReceiverStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsReceiverStatus.setDescription('Enable or disable SMS receiver.')
cmcIIISmsReceiverNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsReceiverNumber.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsReceiverNumber.setDescription('Phone number of SMS receiver.')
cmcIIISysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISysLogStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIISysLogStatus.setDescription('SysLog usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIISysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8))).clone('local0')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISysLogFacility.setStatus('current')
if mibBuilder.loadTexts: cmcIIISysLogFacility.setDescription('SysLog facility local0..7.')
cmcIIISysLogServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISysLogServer1.setStatus('current')
if mibBuilder.loadTexts: cmcIIISysLogServer1.setDescription('IP address of first SysLog server.')
cmcIIISysLogServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISysLogServer2.setStatus('current')
if mibBuilder.loadTexts: cmcIIISysLogServer2.setDescription('IP address of second SysLog server.')
cmcIIINtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIINtpStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIINtpStatus.setDescription('NTP usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIINtpTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 74)).clone(27)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIINtpTimeZone.setStatus('current')
if mibBuilder.loadTexts: cmcIIINtpTimeZone.setDescription('NTP time zone, see cmcIIITimeZone for valid time zones.')
cmcIIINtpServer1 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 8, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIINtpServer1.setStatus('current')
if mibBuilder.loadTexts: cmcIIINtpServer1.setDescription('IP address of first NTP server.')
cmcIIINtpServer2 = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 8, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIINtpServer2.setStatus('current')
if mibBuilder.loadTexts: cmcIIINtpServer2.setDescription('IP address of second NTP server.')
cmcIIILdapStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapStatus.setDescription('LDAP usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIILdapServer = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapServer.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapServer.setDescription('IP address of LDAP server.')
cmcIIILdapBindDN = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapBindDN.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapBindDN.setDescription('LDAP user name.')
cmcIIILdapBindPW = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapBindPW.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapBindPW.setDescription('LDAP user password.')
cmcIIILdapUserBase = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapUserBase.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapUserBase.setDescription('LDAP base user.')
cmcIIILdapUserSearch = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapUserSearch.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapUserSearch.setDescription('LDAP searchpath user.')
cmcIIILdapUserAttrib = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapUserAttrib.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapUserAttrib.setDescription('LDAP attribute user.')
cmcIIILdapGroupBase = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapGroupBase.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapGroupBase.setDescription('LDAP base group.')
cmcIIILdapGroupSearch = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapGroupSearch.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapGroupSearch.setDescription('LDAP searchpath group.')
cmcIIILdapGroupAttrib = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIILdapGroupAttrib.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapGroupAttrib.setDescription('LDAP attribute group.')
cmcIIINumberOfShutdowns = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfShutdowns.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfShutdowns.setDescription('Number of cmcIIIShutdownTable entries. The number of shutdown servers.')
cmcIIIShutdownTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2), )
if mibBuilder.loadTexts: cmcIIIShutdownTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownTable.setDescription('A list of shutdown entries.')
cmcIIIShutdownEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIShutdownIndex"))
if mibBuilder.loadTexts: cmcIIIShutdownEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownEntry.setDescription('Entries of Shutdown table.')
cmcIIIShutdownIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIShutdownIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownIndex.setDescription('Index for the shutdown server table. Its value ranges between\n                            1 and the value of cmcIIINumberOfShutdowns.')
cmcIIIShutdownServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIShutdownServer.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownServer.setDescription('IP address or name of server to shutdown.')
cmcIIIShutdownName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIShutdownName.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownName.setDescription('Name of server to shutdown.')
cmcIIIShutdownPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(6003)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIShutdownPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownPort.setDescription('Port used to shutdown server.')
cmcIIIShutdownDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIShutdownDelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownDelay.setDescription('Delay of server shutdown.')
cmcIIIShutdownEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIShutdownEnabled.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownEnabled.setDescription('Enable or disable this server shutdown entry.')
cmcIIIModbusStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("shutdown", 1), ("readonly", 2), ("writeonly", 3), ("readwrite", 4))).clone('readonly')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIModbusStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusStatus.setDescription('Modbus daemon running status:\n                            (1) shutdown\n                            (2) readonly\n                            (3) writeonly\n                            (4) readwrite.')
cmcIIIModbusPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(502)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIModbusPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusPort.setDescription('TCP/IP port of Modbus daemon.')
cmcIIINumberOfModbusSources = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfModbusSources.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfModbusSources.setDescription('Number of cmcIIIModbusTable entries. The number of Modbus access settings.')
cmcIIIModbusTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 4), )
if mibBuilder.loadTexts: cmcIIIModbusTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusTable.setDescription('A list of Modbus entries.')
cmcIIIModbusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 4, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIModbusIndex"))
if mibBuilder.loadTexts: cmcIIIModbusEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusEntry.setDescription('Entries of Modbus table.')
cmcIIIModbusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIModbusIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusIndex.setDescription('Index for the Modbus access table. Its value ranges\n                            between 1 and the value of cmcIIINumberOfModbusSources.')
cmcIIIModbusAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noaccess", 1), ("readonly", 2), ("writeonly", 3), ("readwrite", 4))).clone('noaccess')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIModbusAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusAccess.setDescription('Modbus access for this source entry:\n                            (1) noaccess\n                            (2) readonly\n                            (3) writeonly\n                            (4) readwrite\n                            This access is inferior to cmcIIIModbusStatus, e.g.\n                            readwrite access also requires readwrite status.')
cmcIIIModbusSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 3, 11, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIModbusSource.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusSource.setDescription('Source to restrict Modbus access.\n\n                            It can either be a\n                            specific hostname,\n                            IP address, or a subnet represented as\n                            IP/MASK (e.g. 10.10.10.0/255.255.255.0),\n                            or IP/BITS (e.g. 10.10.10.0/24),\n                            or the IPv6 equivalents.\n\n                            The same source can be specified in several separate\n                            entries (presumably with different access tokens),\n                            and the first combination that matches the incoming\n                            request will be selected.')
cmcIIIRadiusStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusStatus.setDescription('Radius usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIIRadiusServer = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusServer.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusServer.setDescription('IP address of Radius server.')
cmcIIIRadiusPort = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusPort.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusPort.setDescription('TCP/IP port of Radius server.')
cmcIIIRadiusPassword = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusPassword.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusPassword.setDescription('Password required to authenticate at the Radius server.')
cmcIIIRadiusGroupMode = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manual", 1), ("byAttribute", 2))).clone('manual')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusGroupMode.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusGroupMode.setDescription('Radius group method:\n                            (1) manual\n                            (2) byAttribute.')
cmcIIIRadiusGroupId = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusGroupId.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusGroupId.setDescription('Radius group id.')
cmcIIIRadiusAuth = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("auto", 1), ("pap", 2), ("chap", 3), ("mschap", 4), ("md5", 5))).clone('pap')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIRadiusAuth.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusAuth.setDescription('Radius authentification method:\n                            (1) auto - not supported\n                            (2) pap\n                            (3) chap\n                            (4) mschap\n                            (5) md5.')
cmcIIIWebCamStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamStatus.setDescription('WebCam usage:\n                            (1) disabled\n                            (2) enabled.')
cmcIIIWebCamServer = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamServer.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamServer.setDescription('IP address of WebCam.')
cmcIIIWebCamUsername = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamUsername.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamUsername.setDescription('Username required to authenticate at the WebCam server.')
cmcIIIWebCamPassword = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamPassword.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamPassword.setDescription('Password required to authenticate at the WebCam server.')
cmcIIIWebCamIntervall = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 100)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamIntervall.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamIntervall.setDescription('WebCam snapshot intervall in 1/10 seconds.')
cmcIIIWebCamNumberofImages = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamNumberofImages.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamNumberofImages.setDescription('WebCam number of images per event.')
cmcIIIWebCamDestination = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 3, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("usb", 1), ("sd", 2))).clone('usb')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIWebCamDestination.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamDestination.setDescription('WebCam storage destination:\n                            (1) usb\n                            (2) sd.')
cmcIIIOverallDevStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 3), ("detected", 4), ("lost", 5), ("changed", 6), ("update", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallDevStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallDevStatus.setDescription('Overall status of all devices.')
cmcIIINumberOfDevs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfDevs.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfDevs.setDescription('Number of devices available.')
cmcIIILastChangeOverallDevStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeOverallDevStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeOverallDevStatus.setDescription('Timestamp of last status change of any device connected to CMCIII PU\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeNumberOfDevs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfDevs.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfDevs.setDescription('Timestamp of last device number change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeDevSettings = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeDevSettings.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeDevSettings.setDescription('Timestamp of last setting change of any device connected to CMCIII PU\n                            according to operating time cmcIIIUnitUpTime.\n                            This timestamp will be affected by SNMP settings only!')
cmcIIILastChangeDevs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeDevs.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeDevs.setDescription('Timestamp of last device change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIDevTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2), )
if mibBuilder.loadTexts: cmcIIIDevTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevTable.setDescription('Headline of device table.')
cmcIIIDevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIDevIndex"))
if mibBuilder.loadTexts: cmcIIIDevEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevEntry.setDescription('Entries of device table.')
cmcIIIDevIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 126)))
if mibBuilder.loadTexts: cmcIIIDevIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevIndex.setDescription('Index of device connected to CMCIII PU.')
cmcIIIDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevName.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevName.setDescription('Name of the device connected to CMCIII PU.')
cmcIIIDevAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDevAlias.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevAlias.setDescription('Descriptional text for device connected to CMCIII PU.')
cmcIIIDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 4), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevType.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevType.setDescription("Type of device chassis connected to CMCIII PU.\n                            The authoritative identification of the device contained\n                            in the entity is allocated within the SMI cmcIIIProducts\n                            subtree (1.3.6.1.4.1.2606.7.7) and provides an easy and\n                            unambiguous means for determining `what kind of box' is\n                            connected.\n                            E.g.: in cmcIIIProductChassis (1.3.6.1.4.1.2606.7.7.4.x)\n                            the placeholder x is used for\n\n                            1 : Not Available\n                            2 : Internal Device of Processing Unit\n                            3 : Virtual Device\n                            4 : Temperature Sensor 7030.110\n                            5 : Temp/Humidity Sensor 7030.111\n                            6 : Vandalism Sensor 7030.130\n                            7 : Access Sensor 7030.120\n                            8 : Door Lock Device 7030.200, .210\n                            9 : Universal Sensor 7030.190\n                            10: Sensor Gateway 7030.100\n                            11: Power Unit 7030.050\n                            12: Pressure Sensor 7030.150\n                            20-25: Gateways to RS422, RS485.")
cmcIIIDevNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevNodeID.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevNodeID.setDescription('Node ID of device connected to CMCIII PU.')
cmcIIIDevStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notAvail", 1), ("ok", 2), ("detect", 3), ("lost", 4), ("changed", 5), ("error", 6), ("fwUpdate", 7), ("fwUpdateRun", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevStatus.setDescription('General Status of device connected to CMCIII PU\n                            (1) Device not available\n                            (2) OK\n                            (3) Device detected, confirmation required\n                            (4) Device lost (disconnected), confirmation required\n                            (5) Device changed\n                            (6) Error\n                            (7) Firmware Update pending\n                            (8) Firmware Update running.')
cmcIIIDevArtNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevArtNr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevArtNr.setDescription('Article number of device connected to CMCIII PU.')
cmcIIIDevLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDevLocation.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevLocation.setDescription('Location of device connected to CMCIII PU.')
cmcIIIDevBus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("canBus1", 1), ("canBus2", 2), ("virtual", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevBus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevBus.setDescription('CAN bus of device connected to CMCIII PU.')
cmcIIIDevPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevPos.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevPos.setDescription('Position (order) of device in CAN bus connected to CMCIII PU.')
cmcIIIDevFW = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevFW.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevFW.setDescription('FW version of device connected to CMCIII PU.')
cmcIIIDevHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevHW.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevHW.setDescription('HW version of device connected to CMCIII PU.')
cmcIIIDevSerial = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevSerial.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevSerial.setDescription('Serial number of device connected to CMCIII PU.')
cmcIIIDevProductWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevProductWeek.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevProductWeek.setDescription('Production week of device connected to CMCIII PU.')
cmcIIIDevLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevLastChange.setDescription('Timestamp of last change of device connected to CMCIII PU\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIDevURL = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevURL.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevURL.setDescription('URL to device page of CMCIII PU (if available).')
cmcIIIDevNumberOfVars = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevNumberOfVars.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevNumberOfVars.setDescription('Number of variables available on this device.\n                            This variable will give the number of rows of the\n                            variable table cmcIIIVarTable belonging to this device.')
cmcIIIDevNumberOfMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevNumberOfMsgs.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevNumberOfMsgs.setDescription('Number of messages available in this device.\n                            This variable will give the number of rows of the message\n                            table cmcIIIMsgTable belonging to this device.')
cmcIIIDevStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevStatusText.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevStatusText.setDescription('Latest status of this device.')
cmcIIIDevCurrentMinConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevCurrentMinConsumption.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevCurrentMinConsumption.setDescription('Standby power consumption of device in mA.')
cmcIIIDevCurrentMaxConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevCurrentMaxConsumption.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevCurrentMaxConsumption.setDescription('Maximal power consumption of device in mA.')
cmcIIIDevEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevEntPhysicalIndex.setDescription('Corresponding entPhysicalIndex of this device. 0 if none exists.')
cmcIIIDevAssembly = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 1, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDevAssembly.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDevAssembly.setDescription('Assembly of this device.')
cmcIIINumberOfVars = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfVars.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfVars.setDescription('Total number of variables available.')
cmcIIILastChangeNumberOfVars = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfVars.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfVars.setDescription('Timestamp of last change number of variables\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeVarSettings = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeVarSettings.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeVarSettings.setDescription('Timestamp of last setting change\n                            according to operating time cmcIIIUnitUpTime\n                            This timestamp will be affected by SNMP settings only!')
cmcIIILastChangeVars = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeVars.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeVars.setDescription('Timestamp of last variable change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIVarByQualityHide = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 5), Bits().clone(namedValues=NamedValues(("notInUse", 0), ("undefined", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("info", 5), ("undefinedNoValue", 21), ("okNoValue", 22), ("warningNoValue", 23), ("alarmNoValue", 24), ("infoNoValue", 25))).clone(namedValues=NamedValues(("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIVarByQualityHide.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityHide.setDescription('Hide entries in cmcIIIVarByQualityTable to reduce table size.')
cmcIIIDynUpdateRate = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 86400)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDynUpdateRate.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDynUpdateRate.setDescription('Update rate in seconds to add/remove entries\n                            from cmcIIIVarIntDynTable and cmcIIIVarStrDynTable.\n                            Note: cmcIIIDynUpdateHistory (>0) has to be at least twice cmcIIIDynUpdateRate.')
cmcIIIDynUpdateHistory = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 1, 7), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(10, 2419200), )).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDynUpdateHistory.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDynUpdateHistory.setDescription('History range in seconds to restrict data view\n                            in cmcIIIVarIntDynTable and cmcIIIVarStrDynTable.\n                            The value 0 will disable the history range restriction completly.\n                            Note: cmcIIIDynUpdateHistory (>0) has to be at least twice cmcIIIDynUpdateRate.')
cmcIIIVarTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2), )
if mibBuilder.loadTexts: cmcIIIVarTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarTable.setDescription('Headline of variable table.')
cmcIIIVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIVarDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarIndex"))
if mibBuilder.loadTexts: cmcIIIVarEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarEntry.setDescription('Entries of variable table.')
cmcIIIVarDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIVarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIndex.setDescription('Index for the list of value entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfVars.')
cmcIIIVarName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarName.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarName.setDescription('Clear name of variable.')
cmcIIIVarType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 100, 110, 111, 112, 113, 120, 121, 122, 123, 124, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 254, 255))).clone(namedValues=NamedValues(("description", 1), ("value", 2), ("setHigh", 3), ("setWarn", 4), ("setLow", 5), ("hysteresis", 6), ("status", 7), ("statusEnum", 8), ("setWarnLow", 9), ("unit", 10), ("alarmDur", 11), ("steps", 12), ("configPar", 13), ("category", 14), ("logic", 15), ("logicEnum", 16), ("setCntrl", 17), ("offset", 18), ("type", 19), ("output", 20), ("outputdelay", 21), ("outputaction", 22), ("outdelayExec", 23), ("outputEnum", 24), ("config", 25), ("configNum", 26), ("configLcpFcs", 27), ("assembly", 28), ("configWiring", 29), ("sensitivity", 30), ("accessTime", 31), ("accessLogic", 32), ("position", 33), ("positionEnum", 34), ("pin", 35), ("sequence", 36), ("outputPWM", 40), ("rotation", 41), ("circuit", 42), ("rizoneArray", 43), ("socketType", 44), ("customValue", 45), ("productDate", 50), ("orderNr", 51), ("devName", 52), ("devLocation", 53), ("currentMin", 54), ("currentMax", 55), ("keycode", 80), ("command", 81), ("commandEnum", 82), ("commandKeypad", 83), ("commandService", 84), ("commandRack", 85), ("unitType", 90), ("swVersion", 91), ("serialNumber", 92), ("mountPos", 93), ("mountPosEnum", 94), ("gsmStatus", 95), ("connected", 96), ("connectedEnum", 97), ("grouping", 100), ("scaleValue", 110), ("scaleUnit", 111), ("scaleStart", 112), ("scaleEnd", 113), ("commandCtrl", 120), ("commandCtrlDP", 121), ("commandCtrlWdt", 122), ("fanAffect", 123), ("waterAffect", 124), ("location", 130), ("building", 131), ("level", 132), ("room", 133), ("row", 134), ("rack", 135), ("operatingTime", 136), ("numberOfRU", 137), ("tagsQuit", 138), ("tagsChanged", 139), ("uid", 140), ("ignore", 254), ("illegal", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarType.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarType.setDescription('Type of variable.')
cmcIIIVarUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarUnit.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarUnit.setDescription('Unit of variable e. g. degree C.')
cmcIIIVarDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notAvail", 1), ("int", 2), ("string", 3), ("enum", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarDataType.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarDataType.setDescription('Datatype of variable.')
cmcIIIVarScale = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarScale.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarScale.setDescription('Scaling factor of variable value,\n                            e. g. -100 -> value has to be divided by 100\n                            +100 -> value has to be multiplied by 100.')
cmcIIIVarConstraints = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarConstraints.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarConstraints.setDescription("Constraints of value,\n                            e. g. [-_ a-zA-Z0-9]+ (if VariableDatatype is 'string').")
cmcIIIVarSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarSteps.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarSteps.setDescription('Steps of variable value (resolution).')
cmcIIIVarValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIVarValueStr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarValueStr.setDescription('Value as string, including sign (+/-) and unit (degree C).')
cmcIIIVarValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIVarValueInt.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarValueInt.setDescription('Value as integer.')
cmcIIIVarLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarLastChange.setDescription('Timestamp of last update or change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIVarAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("readonly", 2), ("readwrite", 3), ("readwriteswitch", 4), ("readwriteextended", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarAccess.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarAccess.setDescription('Access for value.')
cmcIIIVarQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("undefined", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("info", 5), ("undefinedNoValue", 21), ("okNoValue", 22), ("warningNoValue", 23), ("alarmNoValue", 24), ("infoNoValue", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarQuality.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarQuality.setDescription('Quality of variable.')
cmcIIIVarEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarEntPhysicalIndex.setDescription('Corresponding entPhysicalIndex of this variable. 0 if none exists.')
cmcIIIVarByTypeTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3), )
if mibBuilder.loadTexts: cmcIIIVarByTypeTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeTable.setDescription('Headline of variable by type table.')
cmcIIIVarByTypeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIVarByTypeType"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarByTypeDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarByTypeIndex"))
if mibBuilder.loadTexts: cmcIIIVarByTypeEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeEntry.setDescription('Entries of variable by type table.')
cmcIIIVarByTypeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 50, 51, 52, 53, 54, 55, 80, 81, 82, 83, 84, 85, 90, 91, 92, 93, 94, 95, 96, 97, 100, 110, 111, 112, 113, 120, 121, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 254, 255))).clone(namedValues=NamedValues(("description", 1), ("value", 2), ("setHigh", 3), ("setWarn", 4), ("setLow", 5), ("hysteresis", 6), ("status", 7), ("statusEnum", 8), ("setWarnLow", 9), ("unit", 10), ("alarmDur", 11), ("steps", 12), ("configPar", 13), ("category", 14), ("logic", 15), ("logicEnum", 16), ("setCntrl", 17), ("offset", 18), ("type", 19), ("output", 20), ("outputdelay", 21), ("outputaction", 22), ("outdelayExec", 23), ("outputEnum", 24), ("config", 25), ("configNum", 26), ("configLcpFcs", 27), ("assembly", 28), ("configWiring", 29), ("sensitivity", 30), ("accessTime", 31), ("accessLogic", 32), ("position", 33), ("positionEnum", 34), ("pin", 35), ("sequence", 36), ("outputPWM", 40), ("rotation", 41), ("circuit", 42), ("rizoneArray", 43), ("socketType", 44), ("customValue", 45), ("productDate", 50), ("orderNr", 51), ("devName", 52), ("devLocation", 53), ("currentMin", 54), ("currentMax", 55), ("keycode", 80), ("command", 81), ("commandEnum", 82), ("commandKeypad", 83), ("commandService", 84), ("commandRack", 85), ("unitType", 90), ("swVersion", 91), ("serialNumber", 92), ("mountPos", 93), ("mountPosEnum", 94), ("gsmStatus", 95), ("connected", 96), ("connectedEnum", 97), ("grouping", 100), ("scaleValue", 110), ("scaleUnit", 111), ("scaleStart", 112), ("scaleEnd", 113), ("commandCtrl", 120), ("commandCtrlDP", 121), ("location", 130), ("building", 131), ("level", 132), ("room", 133), ("row", 134), ("rack", 135), ("operatingTime", 136), ("numberOfRU", 137), ("tagsQuit", 138), ("tagsChanged", 139), ("uid", 140), ("ignore", 254), ("illegal", 255))))
if mibBuilder.loadTexts: cmcIIIVarByTypeType.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeType.setDescription('Type of variable.')
cmcIIIVarByTypeDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarByTypeDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIVarByTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarByTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeIndex.setDescription('Index for the list of value entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfVars.')
cmcIIIVarByTypeValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByTypeValueStr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeValueStr.setDescription('Value as string, including sign (+/-) and unit (degree C).')
cmcIIIVarByTypeValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByTypeValueInt.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeValueInt.setDescription('Value as integer.')
cmcIIIVarByTypeLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 3, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByTypeLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByTypeLastChange.setDescription('Timestamp of last update or change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIVarByQualityTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4), )
if mibBuilder.loadTexts: cmcIIIVarByQualityTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityTable.setDescription('Headline of variable by quality table.')
cmcIIIVarByQualityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIVarByQualityQuality"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarByQualityDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarByQualityIndex"))
if mibBuilder.loadTexts: cmcIIIVarByQualityEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityEntry.setDescription('Entries of variable by quality table.\n                            The view of this table may be reduced using the bits of cmcIIIVarByQualityHide.')
cmcIIIVarByQualityQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("undefined", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("info", 5), ("undefinedNoValue", 21), ("okNoValue", 22), ("warningNoValue", 23), ("alarmNoValue", 24), ("infoNoValue", 25))))
if mibBuilder.loadTexts: cmcIIIVarByQualityQuality.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityQuality.setDescription('Quality of variable.')
cmcIIIVarByQualityDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarByQualityDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIVarByQualityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarByQualityIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityIndex.setDescription('Index for the list of value entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfVars.')
cmcIIIVarByQualityValueStr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByQualityValueStr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityValueStr.setDescription('Value as string, including sign (+/-) and unit (degree C).')
cmcIIIVarByQualityValueInt = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByQualityValueInt.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityValueInt.setDescription('Value as integer.')
cmcIIIVarByQualityLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarByQualityLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarByQualityLastChange.setDescription('Timestamp of last update or change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIVarIntDynTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5), )
if mibBuilder.loadTexts: cmcIIIVarIntDynTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynTable.setDescription('Headline of dynamically changed variable table of cmcIIIVarDatatype int(2) or enum(4).\n                            This table is updated each cmcIIIVarDynUpdateRate seconds only.\n                            This table has variables updated/changed within the last cmcIIIVarDynUpdateHistory seconds only.\n                            This table has dynamic integer variables (cmcIIIVarDataType = int(2) or enum(4)) only.')
cmcIIIVarIntDynEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIVarIntDynDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarIntDynIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarIntDynLastChange"))
if mibBuilder.loadTexts: cmcIIIVarIntDynEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynEntry.setDescription('Entries of dynamically changed table.')
cmcIIIVarIntDynDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarIntDynDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIVarIntDynIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarIntDynIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynIndex.setDescription('Index for the list of value entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfVars.')
cmcIIIVarIntDynLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cmcIIIVarIntDynLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynLastChange.setDescription('Timestamp of last update or change\n                            according to operating time cmcIIIUnitUpTime.\n                            Entries may be restricted by cmcIIIDynUpdateHistory.')
cmcIIIVarIntDynValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarIntDynValue.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarIntDynValue.setDescription('Value as integer.')
cmcIIIVarStrDynTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6), )
if mibBuilder.loadTexts: cmcIIIVarStrDynTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynTable.setDescription('Headline of dynamically changed variable table of cmcIIIVarDataType string(3).\n                            This table is updated each cmcIIIVarDynUpdateRate seconds only.\n                            This table has variables updated/changed within the last cmcIIIVarDynUpdateHistory seconds only.\n                            This table has dynamic string variables (cmcIIIVarDataType = string(3)) only.\n                            Please note, this table will be empty in most cases as strings are rarely changing.')
cmcIIIVarStrDynEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIVarStrDynDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarStrDynIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIVarStrDynLastChange"))
if mibBuilder.loadTexts: cmcIIIVarStrDynEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynEntry.setDescription('Entries of dynamically changed table.')
cmcIIIVarStrDynDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarStrDynDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIVarStrDynIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIVarStrDynIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynIndex.setDescription('Index for the list of value entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfVars.')
cmcIIIVarStrDynLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cmcIIIVarStrDynLastChange.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynLastChange.setDescription('Timestamp of last update or change\n                            according to operating time cmcIIIUnitUpTime.\n                            Entries may be restricted by cmcIIIDynUpdateHistory.')
cmcIIIVarStrDynValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 2, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIVarStrDynValue.setStatus('current')
if mibBuilder.loadTexts: cmcIIIVarStrDynValue.setDescription('Value as string.')
cmcIIIOverallMsgStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallMsgStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallMsgStatus.setDescription('Overall message status of device.')
cmcIIINumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfMsgs.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfMsgs.setDescription('Number of messages.\n                            All status vars available in cmcIIIVarTable will cause a message in cmcIIIMsgTable.')
cmcIIILastChangeOverallMsgStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeOverallMsgStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeOverallMsgStatus.setDescription('Timestamp of last status change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeNumberOfMsgs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfMsgs.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfMsgs.setDescription('Timestamp of last message number change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeMsgSettings = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeMsgSettings.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeMsgSettings.setDescription('Timestamp of last setting change\n                            according to operating time cmcIIIUnitUpTime\n                            This timestamp will be affected by SNMP settings only!')
cmcIIIMsgTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2), )
if mibBuilder.loadTexts: cmcIIIMsgTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgTable.setDescription('Headline of message table.')
cmcIIIMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIMsgDeviceIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIIMsgIndex"))
if mibBuilder.loadTexts: cmcIIIMsgEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgEntry.setDescription('Entries of message table.')
cmcIIIMsgDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIMsgDeviceIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgDeviceIndex.setDescription('Index for the device. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDevs.')
cmcIIIMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIMsgIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgIndex.setDescription('Index for the list of message entries. Its value ranges\n                            between 1 and the value of cmcIIINumberOfMsgs.')
cmcIIIMsgText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMsgText.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgText.setDescription('Text for each message (entry in the table).')
cmcIIIMsgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("highWarn", 6), ("lowAlarm", 7), ("highAlarm", 8), ("lowWarn", 9), ("setOff", 10), ("setOn", 11), ("open", 12), ("closed", 13), ("locked", 14), ("unlRemote", 15), ("doorOpen", 16), ("service", 17), ("standby", 18), ("busy", 19), ("noAccess", 20), ("lost", 21), ("detected", 22), ("lowVoltage", 23), ("probeopen", 24), ("probeshort", 25), ("calibration", 26), ("inactive", 27), ("active", 28), ("noPower", 29), ("readOnly", 30), ("exchanged", 31)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMsgStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgStatus.setDescription('Actual message status\n                            1: not available\n                            2: configuration has changed (sensor new, changed, lost)\n                            3: error\n                            4: OK\n                            5: alarm, e.g. smoke, vibration...\n                            6: warning of analog value, value reached high warning threshold\n                            7: analog value too low, value reached low threshold (Alarm)\n                            8: analog value too high, value reached high threshold (Alarm)\n                            9: warning of analog value, value reached low warning threshold\n                            10: output is set to OFF\n                            11: output is set to ON\n                            12: door is open\n                            13: door is closed\n                            14: door is locked\n                            15: door is unlocked by remote input, e.g. external card reader\n                            16: door is unlocked by reader or keypad connected\n                            17: door is unlocked by SNMP set command\n                            18: door is unlocked by WEB\n                            19: door is unlocked by timer\n                            20: no access, wrong key code or card number\n                            21: lost\n                            22: detected\n                            23: battery low, wireless sensor\n                            24: sensor cable broken\n                            25: sensor cable short\n                            26: sensor calibration in progress\n                            27: sensor is inactive\n                            28: sensor is active\n                            29: no Power (PSM)\n                            30: read only (SD, USB-Stick)\n\t\t\t\t\t\t\t31: control boards of LCP exchanged.')
cmcIIIMsgRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgRelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgRelay.setDescription('Setup of Alarm relay for this message/alarm\n                            1:        no switching of alarm relay\n                            2:        switching of alarm relay.')
cmcIIIMsgBeeper = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgBeeper.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgBeeper.setDescription('Setup of Alarm beeper for this alarm\n                            1:        no audible alarm\n                            2:        audible alarm.')
cmcIIIMsgTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 7), Bits().clone(namedValues=NamedValues(("receiver1", 0), ("receiver2", 1), ("receiver3", 2), ("receiver4", 3), ("receiver5", 4), ("receiver6", 5), ("receiver7", 6), ("receiver8", 7), ("receiver9", 8), ("receiver10", 9), ("receiver11", 10), ("receiver12", 11), ("receiver13", 12), ("receiver14", 13), ("receiver15", 14), ("receiver16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgTrap.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgTrap.setDescription('Each bit is representing an entry of cmcIIITrapReceiverTable.\n                            If the corresponding cmcIIITrapReceiverStatus is enabled\n                            setting this bit enables sending messages to this receiver.')
cmcIIIMsgSMTP = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 8), Bits().clone(namedValues=NamedValues(("receiver1", 0), ("receiver2", 1), ("receiver3", 2), ("receiver4", 3), ("receiver5", 4), ("receiver6", 5), ("receiver7", 6), ("receiver8", 7), ("receiver9", 8), ("receiver10", 9), ("receiver11", 10), ("receiver12", 11), ("receiver13", 12), ("receiver14", 13), ("receiver15", 14), ("receiver16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgSMTP.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgSMTP.setDescription('Each bit is representing an entry of cmcIIISmtpReceiverTable.\n                            If the corresponding cmcIIISmtpReceiverStatus is enabled\n                            setting this bit enables sending messages to this receiver.')
cmcIIIMsgSMS = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 9), Bits().clone(namedValues=NamedValues(("receiver1", 0), ("receiver2", 1), ("receiver3", 2), ("receiver4", 3), ("receiver5", 4), ("receiver6", 5), ("receiver7", 6), ("receiver8", 7), ("receiver9", 8), ("receiver10", 9), ("receiver11", 10), ("receiver12", 11), ("receiver13", 12), ("receiver14", 13), ("receiver15", 14), ("receiver16", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgSMS.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgSMS.setDescription('Each bit is representing an entry of cmcIIISmsReceiverTable.\n                            If the corresponding cmcIIISmsReceiverStatus is enabled\n                            setting this bit enables sending messages to this receiver.')
cmcIIIMsgQuit = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgQuit.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgQuit.setDescription("Reset of this alarm\n                            1:  auto\n                            2:  manual, alarm needs confirmation, e. g. with 'C' key.")
cmcIIIMsgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgDelay.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgDelay.setDescription('Delay of alarm condition.')
cmcIIIMsgSchedAlarmOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgSchedAlarmOff.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgSchedAlarmOff.setDescription('Alarm condition disabled by scheduler.')
cmcIIIMsgQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("undefined", 1), ("ok", 2), ("warning", 3), ("alarm", 4), ("info", 5), ("undefinedNoValue", 21), ("okNoValue", 22), ("warningNoValue", 23), ("alarmNoValue", 24), ("infoNoValue", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMsgQuality.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgQuality.setDescription('Quality of variable.')
cmcIIIMsgVarIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMsgVarIdx.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgVarIdx.setDescription("Index of variable 'Status' in variable table generating this message.")
cmcIIIMsgVarValueIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIMsgVarValueIdx.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgVarValueIdx.setDescription("Index of variable 'Value' in the variable table.")
cmcIIIMsgStatusText = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 3, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 160))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIMsgStatusText.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMsgStatusText.setDescription('Message status text.')
cmcIIIOverallDrcStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("warning", 2), ("alarm", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallDrcStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallDrcStatus.setDescription('Overall DRC status of devices.')
cmcIIINumberOfDrcs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfDrcs.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfDrcs.setDescription('Number of DRCs available.')
cmcIIIOverallLastChangeDrcStatus = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallLastChangeDrcStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallLastChangeDrcStatus.setDescription('Overall timestamp of last DRC change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeNumberOfDrcs = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfDrcs.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfDrcs.setDescription('Overall timestamp of last DRC number change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIOverallDrcUtilization = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallDrcUtilization.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallDrcUtilization.setDescription('Percentage of occupied RUs.')
cmcIIIOverallDrcPower = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIOverallDrcPower.setStatus('current')
if mibBuilder.loadTexts: cmcIIIOverallDrcPower.setDescription('Total Power in Watts, calculated from all cmcIIITotalDrcPower -values.')
cmcIIIDrcTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2), )
if mibBuilder.loadTexts: cmcIIIDrcTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcTable.setDescription('Headline of DRC table.')
cmcIIIDrcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIDrcIndex"))
if mibBuilder.loadTexts: cmcIIIDrcEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcEntry.setDescription('Entries of DRC table.')
cmcIIIDrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIDrcIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcIndex.setDescription('Index for the DRC. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDrcs.')
cmcIIIDrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 17, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("service", 17), ("lost", 21), ("detected", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcStatus.setDescription('DRC status of device.')
cmcIIILastChangeDrcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeDrcStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeDrcStatus.setDescription('Timestamp of last DRC change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIDrcUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcUnitName.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcUnitName.setDescription('Unit of Installation of DRC.')
cmcIIIDrcLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcLocation.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcLocation.setDescription('Location of Installation of DRC.')
cmcIIIDrcBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcBuilding.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcBuilding.setDescription('Building of Installation of DRC.')
cmcIIIDrcLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcLevel.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcLevel.setDescription('Level of Installation of DRC.')
cmcIIIDrcRoom = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcRoom.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcRoom.setDescription('Room of Installation of DRC.')
cmcIIIDrcRow = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcRow.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcRow.setDescription('Row of Installation of DRC.')
cmcIIIDrcRackNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcRackNr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcRackNr.setDescription('Rack number of Installation of DRC.')
cmcIIIDrcMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcMfgDate.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcMfgDate.setDescription('Manufacture date of DRC, format DD.MM.YYYY.')
cmcIIIDrcSerialNr = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcSerialNr.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcSerialNr.setDescription('Serial number of DRC.')
cmcIIIDrcOpHours = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcOpHours.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcOpHours.setDescription('Operational hours of DRC.')
cmcIIIDrcNumberOfRU = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcNumberOfRU.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcNumberOfRU.setDescription('Number of RUs.')
cmcIIIDrcUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcUtilization.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcUtilization.setDescription('Percentage of occupied RUs.')
cmcIIITotalDrcPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITotalDrcPower.setStatus('current')
if mibBuilder.loadTexts: cmcIIITotalDrcPower.setDescription('Total Power in Watts, calculated from all cmcIIIDrcPower -values.')
cmcIIIDrcSwController = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcSwController.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcSwController.setDescription('Software version of controller.')
cmcIIIDrcSwBootloader = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcSwBootloader.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcSwBootloader.setDescription('Software version of controller bootloader.')
cmcIIIDrcFwController = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcFwController.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcFwController.setDescription('Firmware version of controller.')
cmcIIIDrcSwAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcSwAntenna.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcSwAntenna.setDescription('Software version of antenna module.')
cmcIIIDrcSwAntennaBL = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIDrcSwAntennaBL.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcSwAntennaBL.setDescription('Software version of antenna modul bootloader.')
cmcIIIDrcCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noQuit", 1), ("quit", 2), ("ledAuto", 3), ("ledOnOccupied", 4), ("ledOnFreeRU", 5))).clone('noQuit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIDrcCommand.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcCommand.setDescription('Command (to) send to the DRC\n                            1: no Quit command\n                            2: Quit command\n                            3: LED auto, LED will show status of TAG (detected, lost..)\n                            4: LEDs of occupied RUs will be switched on\n                            5: LEDs of free RUs will be switched on.')
cmcIIITagTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3), )
if mibBuilder.loadTexts: cmcIIITagTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagTable.setDescription('Headline of DRC Tag table.')
cmcIIITagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIITagDrcIndex"), (0, "RITTAL-CMC-III-MIB", "cmcIIITagRuIndex"))
if mibBuilder.loadTexts: cmcIIITagEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagEntry.setDescription('Entries of tag table.')
cmcIIITagDrcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIITagDrcIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagDrcIndex.setDescription('Index for the DRC. Its value ranges\n                            between 1 and the value of cmcIIINumberOfDrcs.')
cmcIIITagRuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIITagRuIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagRuIndex.setDescription('Index for the RU of this DRC. This is the RU for this tag.')
cmcIIITagStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 17, 21, 22))).clone(namedValues=NamedValues(("notAvail", 1), ("configChanged", 2), ("error", 3), ("ok", 4), ("alarm", 5), ("service", 17), ("lost", 21), ("detected", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagStatus.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagStatus.setDescription('Status of the unit at this RU.')
cmcIIITagUID = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagUID.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagUID.setDescription('UID of the tag of the unit mounted at this position (RU).')
cmcIIITagPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagPosition.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagPosition.setDescription('Tag position within this RU, 0,1 or 2.\n                            0: topmost position\n                            1: middle position\n                            2: lowermost position.')
cmcIIITagUnitFormfactor = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagUnitFormfactor.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagUnitFormfactor.setDescription('Formfactor of the chassis (number of RUs).')
cmcIIITagOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagOffset.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagOffset.setDescription('Tag offset.\n                            Offset of the tag related to the topmost position (in one-third of a RU).')
cmcIIITagRuPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagRuPosition.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagRuPosition.setDescription('Position (RU) of the chassis.')
cmcIIITagDeviceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("notDefined", 1), ("blankingPlate", 2), ("componentShelf", 3), ("cableRouting", 4), ("patchPanelCatX", 5), ("patchPanelFibreOptic", 6), ("ups", 7), ("powerSupply", 8), ("kvm", 9), ("switch", 10), ("monitorKeyboardDrawer", 11), ("monitor", 12), ("server", 13), ("storage", 14))).clone('notDefined')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagDeviceClass.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagDeviceClass.setDescription('Class of the device.')
cmcIIITagDescName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagDescName.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagDescName.setDescription('Description name of the unit at this RU.')
cmcIIITagManufacturer = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagManufacturer.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagManufacturer.setDescription('Manufacturer of the unit at this RU.')
cmcIIITagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagType.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagType.setDescription('Type Name of the unit at this RU.')
cmcIIITagSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagSerialNumber.setDescription('Serial number of the Unit at this RU.')
cmcIIITagVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagVendor.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagVendor.setDescription('Vendor of the unit at this RU.')
cmcIIITagMac1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagMac1.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagMac1.setDescription('MAC address 1 of the Unit at this RU.')
cmcIIITagMac2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagMac2.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagMac2.setDescription('MAC address 2 of the unit at this RU.')
cmcIIITagService = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagService.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagService.setDescription('Vendor contact of the unit at this RU.')
cmcIIITagDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagDeviceName.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagDeviceName.setDescription('Name of Unit at this RU.')
cmcIIITagInventoryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagInventoryCode.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagInventoryCode.setDescription('Inventory code of the unit at this RU.')
cmcIIITagPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagPower.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagPower.setDescription('Power in Watts of the unit at this RU.')
cmcIIITagCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagCurrent.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagCurrent.setDescription('Current in Amperes*10 of the unit at this RU.')
cmcIIITagVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagVoltage.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagVoltage.setDescription('Voltage in Volts of the unit at this RU.')
cmcIIITagLastService = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagLastService.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagLastService.setDescription('Last service of the unit at this RU.')
cmcIIITagNextService = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagNextService.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagNextService.setDescription('Next service of the Unit at this RU.')
cmcIIITagLastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagLastUpdate.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagLastUpdate.setDescription('Last update of the unit at this RU.')
cmcIIITagNextUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagNextUpdate.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagNextUpdate.setDescription('Next update of the unit at this RU.')
cmcIIITagInitialStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagInitialStart.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagInitialStart.setDescription('Initial start (YYYYMMDD) of the unit at this RU.')
cmcIIITagCustom = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagCustom.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagCustom.setDescription('Custom field of the unit at this RU.')
cmcIIITagCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noQuit", 1), ("quit", 2), ("ledAuto", 3), ("ledOn", 4))).clone('noQuit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIITagCommand.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagCommand.setDescription('Command (to) send to the unit at this RU.')
cmcIIITagStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagStart.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagStart.setDescription('Start position (bottom) of the chassis of this tag.\n                            The resolution is one-third of a RU.')
cmcIIITagEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 31), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagEnd.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagEnd.setDescription('End position (top) of the chassis of this tag.\n                            The resolution is one-third of a RU.')
cmcIIITagAntennaMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 4, 3, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIITagAntennaMap.setStatus('current')
if mibBuilder.loadTexts: cmcIIITagAntennaMap.setDescription('Tag position mapping to the antennas.\n                            The resolution is one-third of a RU, one RU has three antennas.\n                            Position 1 is at the bottom of the rack.\n                            This value ranges from 1 to cmcIIIDrcNumberOfRU*3.')
cmcIIINumberOfFiles = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIINumberOfFiles.setStatus('current')
if mibBuilder.loadTexts: cmcIIINumberOfFiles.setDescription('Number of Files available.')
cmcIIILastChangeFiles = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeFiles.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeFiles.setDescription('Overall timestamp of last file change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIILastChangeNumberOfFiles = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfFiles.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeNumberOfFiles.setDescription('Overall timestamp of last file number change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIFileTable = MibTable((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2), )
if mibBuilder.loadTexts: cmcIIIFileTable.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileTable.setDescription('Headline of file table.')
cmcIIIFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1), ).setIndexNames((0, "RITTAL-CMC-III-MIB", "cmcIIIFileIndex"))
if mibBuilder.loadTexts: cmcIIIFileEntry.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileEntry.setDescription('Entries of file table.')
cmcIIIFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmcIIIFileIndex.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileIndex.setDescription('Index for the file. Its value ranges\n                            between 1 and the value of cmcIIINumberOfFiles.')
cmcIIILastChangeFile = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIILastChangeFile.setStatus('current')
if mibBuilder.loadTexts: cmcIIILastChangeFile.setDescription('Timestamp of last file change\n                            according to operating time cmcIIIUnitUpTime.')
cmcIIIFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIFileSize.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileSize.setDescription('Size of the file in bytes.')
cmcIIIFileChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIFileChecksum.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileChecksum.setDescription('Checksum of the file.')
cmcIIIFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2606, 7, 4, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmcIIIFileName.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileName.setDescription('Name of the file.')
cmcIIIQuitUnit = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noQuit", 1), ("quit", 2))).clone('noQuit')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIIQuitUnit.setStatus('current')
if mibBuilder.loadTexts: cmcIIIQuitUnit.setDescription("Command to quit (acknowledge) alarms of CMCIII unit.\n                            Setting to 'quit' (2) will have same result as pressing 'C' on CMCIII.\n                            Variable is automatically set back to 'noQuit' (1).")
cmcIIISmsQueue = MibScalar((1, 3, 6, 1, 4, 1, 2606, 7, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmcIIISmsQueue.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsQueue.setDescription('Fast track to send a SMS message based on configuration of\n                            cmcIIISetupSMS.\n                            Message format: MessageText TabulatorAsSeparator ReceiverPhoneNumber\n                            e.g.: Hello World!\\t0123456789')
alarmSensorDevice = NotificationType((1, 3, 6, 1, 4, 1, 2606, 7, 0, 1)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIDevName"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgText"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatusText"))
if mibBuilder.loadTexts: alarmSensorDevice.setStatus('current')
if mibBuilder.loadTexts: alarmSensorDevice.setDescription('Alarm of sensors of device.')
alarmDevice = NotificationType((1, 3, 6, 1, 4, 1, 2606, 7, 0, 2)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIDevName"), ("RITTAL-CMC-III-MIB", "cmcIIIDevAlias"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatusText"))
if mibBuilder.loadTexts: alarmDevice.setStatus('current')
if mibBuilder.loadTexts: alarmDevice.setDescription('Alarm of device.')
reConfigAgent = NotificationType((1, 3, 6, 1, 4, 1, 2606, 7, 0, 3)).setObjects(("SNMPv2-MIB", "sysObjectID"))
if mibBuilder.loadTexts: reConfigAgent.setStatus('current')
if mibBuilder.loadTexts: reConfigAgent.setDescription('Agent reconfiguration.')
shutdownAgent = NotificationType((1, 3, 6, 1, 4, 1, 2606, 7, 0, 4)).setObjects(("SNMPv2-MIB", "sysObjectID"))
if mibBuilder.loadTexts: shutdownAgent.setStatus('current')
if mibBuilder.loadTexts: shutdownAgent.setDescription('Agent shutdown.')
cmcIIIMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2606, 7, 6, 1, 1)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIITrapGroup"), ("RITTAL-CMC-III-MIB", "cmcIIINotificationGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIInfoMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIISetupMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIDeviceMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIITrapGroup"), ("RITTAL-CMC-III-MIB", "cmcIIINotificationGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIInfoMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIISetupMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIDeviceMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIFileMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIControlMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIRelayMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIISmsMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIISyslogMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIITimerMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIILdapMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIINtpMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIModbusMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusMibGroup"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamMibGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIMibCompliance = cmcIIIMibCompliance.setStatus('current')
if mibBuilder.loadTexts: cmcIIIMibCompliance.setDescription('The core compliance statement for all cmcIII implementations.')
cmcIIITrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 1)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIDevName"), ("RITTAL-CMC-III-MIB", "cmcIIIDevAlias"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatusText"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgText"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatusText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIITrapGroup = cmcIIITrapGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIITrapGroup.setDescription('Conformance group for objects contained in cmcIII notifications.')
cmcIIINotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 2)).setObjects(("RITTAL-CMC-III-MIB", "alarmSensorDevice"), ("RITTAL-CMC-III-MIB", "alarmDevice"), ("RITTAL-CMC-III-MIB", "reConfigAgent"), ("RITTAL-CMC-III-MIB", "shutdownAgent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIINotificationGroup = cmcIIINotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIINotificationGroup.setDescription('The cmcIII MIB notification group.')
cmcIIIInfoMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 3)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIMibMajRev"), ("RITTAL-CMC-III-MIB", "cmcIIIMibMinRev"), ("RITTAL-CMC-III-MIB", "cmcIIIAgentRev"), ("RITTAL-CMC-III-MIB", "cmcIIICapabilityRev"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitURL"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitHWRev"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitFWRev"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitOSRev"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitSerial"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitProd"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitType"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitCurrentSource"), ("RITTAL-CMC-III-MIB", "cmcIIICan0CurrentConsumption"), ("RITTAL-CMC-III-MIB", "cmcIIICan1CurrentConsumption"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitUpTime"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitMode"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitLoadAverage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIInfoMibGroup = cmcIIIInfoMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIInfoMibGroup.setDescription('Conformance group for all cmcIII base information.')
cmcIIISetupMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 4)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIILastChangeSetup"), ("RITTAL-CMC-III-MIB", "cmcIIISetTempUnit"), ("RITTAL-CMC-III-MIB", "cmcIIITimeZone"), ("RITTAL-CMC-III-MIB", "cmcIIISetupDate"), ("RITTAL-CMC-III-MIB", "cmcIIISetupTime"), ("RITTAL-CMC-III-MIB", "cmcIIIWebAccess"), ("RITTAL-CMC-III-MIB", "cmcIIIHttpPort"), ("RITTAL-CMC-III-MIB", "cmcIIIHttpsPort"), ("RITTAL-CMC-III-MIB", "cmcIIIFtpAccess"), ("RITTAL-CMC-III-MIB", "cmcIIIFtpPort"), ("RITTAL-CMC-III-MIB", "cmcIIISshAccess"), ("RITTAL-CMC-III-MIB", "cmcIIISshPort"), ("RITTAL-CMC-III-MIB", "cmcIIITelnetAccess"), ("RITTAL-CMC-III-MIB", "cmcIIITelnetPort"), ("RITTAL-CMC-III-MIB", "cmcIIILanguage"), ("RITTAL-CMC-III-MIB", "cmcIIIOpcUaAccess"), ("RITTAL-CMC-III-MIB", "cmcIIIOpcUaPort"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfTrapReceivers"), ("RITTAL-CMC-III-MIB", "cmcIIITrapReceiverStatus"), ("RITTAL-CMC-III-MIB", "cmcIIITrapReceiverIpAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIISetupMibGroup = cmcIIISetupMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIISetupMibGroup.setDescription('Conformance group for default cmcIII setup operations.')
cmcIIIDeviceMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 5)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIOverallDevStatus"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfDevs"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeOverallDevStatus"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeNumberOfDevs"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeDevSettings"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeDevs"), ("RITTAL-CMC-III-MIB", "cmcIIIDevName"), ("RITTAL-CMC-III-MIB", "cmcIIIDevAlias"), ("RITTAL-CMC-III-MIB", "cmcIIIDevType"), ("RITTAL-CMC-III-MIB", "cmcIIIDevNodeID"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIDevArtNr"), ("RITTAL-CMC-III-MIB", "cmcIIIDevLocation"), ("RITTAL-CMC-III-MIB", "cmcIIIDevBus"), ("RITTAL-CMC-III-MIB", "cmcIIIDevPos"), ("RITTAL-CMC-III-MIB", "cmcIIIDevFW"), ("RITTAL-CMC-III-MIB", "cmcIIIDevHW"), ("RITTAL-CMC-III-MIB", "cmcIIIDevSerial"), ("RITTAL-CMC-III-MIB", "cmcIIIDevProductWeek"), ("RITTAL-CMC-III-MIB", "cmcIIIDevLastChange"), ("RITTAL-CMC-III-MIB", "cmcIIIDevURL"), ("RITTAL-CMC-III-MIB", "cmcIIIDevNumberOfVars"), ("RITTAL-CMC-III-MIB", "cmcIIIDevNumberOfMsgs"), ("RITTAL-CMC-III-MIB", "cmcIIIDevStatusText"), ("RITTAL-CMC-III-MIB", "cmcIIIDevCurrentMinConsumption"), ("RITTAL-CMC-III-MIB", "cmcIIIDevCurrentMaxConsumption"), ("RITTAL-CMC-III-MIB", "cmcIIIDevEntPhysicalIndex"), ("RITTAL-CMC-III-MIB", "cmcIIIDevAssembly"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfVars"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeNumberOfVars"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeVarSettings"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeVars"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByQualityHide"), ("RITTAL-CMC-III-MIB", "cmcIIIDynUpdateRate"), ("RITTAL-CMC-III-MIB", "cmcIIIDynUpdateHistory"), ("RITTAL-CMC-III-MIB", "cmcIIIVarName"), ("RITTAL-CMC-III-MIB", "cmcIIIVarType"), ("RITTAL-CMC-III-MIB", "cmcIIIVarUnit"), ("RITTAL-CMC-III-MIB", "cmcIIIVarDataType"), ("RITTAL-CMC-III-MIB", "cmcIIIVarScale"), ("RITTAL-CMC-III-MIB", "cmcIIIVarConstraints"), ("RITTAL-CMC-III-MIB", "cmcIIIVarSteps"), ("RITTAL-CMC-III-MIB", "cmcIIIVarValueStr"), ("RITTAL-CMC-III-MIB", "cmcIIIVarValueInt"), ("RITTAL-CMC-III-MIB", "cmcIIIVarAccess"), ("RITTAL-CMC-III-MIB", "cmcIIIVarLastChange"), ("RITTAL-CMC-III-MIB", "cmcIIIVarQuality"), ("RITTAL-CMC-III-MIB", "cmcIIIVarEntPhysicalIndex"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByTypeValueStr"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByTypeValueInt"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByTypeLastChange"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByQualityValueStr"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByQualityValueInt"), ("RITTAL-CMC-III-MIB", "cmcIIIVarByQualityLastChange"), ("RITTAL-CMC-III-MIB", "cmcIIIVarIntDynValue"), ("RITTAL-CMC-III-MIB", "cmcIIIVarStrDynValue"), ("RITTAL-CMC-III-MIB", "cmcIIIOverallMsgStatus"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfMsgs"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeOverallMsgStatus"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeNumberOfMsgs"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeMsgSettings"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgText"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgTrap"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgSMTP"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgQuit"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgDelay"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgSchedAlarmOff"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgQuality"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgVarIdx"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgVarValueIdx"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgStatusText"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIDeviceMibGroup = cmcIIIDeviceMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDeviceMibGroup.setDescription('Conformance group for all cmcIII device information.')
cmcIIIControlMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 6)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIQuitUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIControlMibGroup = cmcIIIControlMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIControlMibGroup.setDescription('Conformance group for all cmcIII control operations.')
cmcIIIRelayMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 7)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIISetBeeper"), ("RITTAL-CMC-III-MIB", "cmcIIIQuitRelay"), ("RITTAL-CMC-III-MIB", "cmcIIILogicRelay"), ("RITTAL-CMC-III-MIB", "cmcIIIUnitMsgRelay"), ("RITTAL-CMC-III-MIB", "cmcIIIFunctionRelay"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgRelay"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgBeeper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIRelayMibGroup = cmcIIIRelayMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRelayMibGroup.setDescription('Conformance group for cmcIII relay and beeper operations.')
cmcIIISmsMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 8)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIISmsStatus"), ("RITTAL-CMC-III-MIB", "cmcIIISmsPIN"), ("RITTAL-CMC-III-MIB", "cmcIIISmsService"), ("RITTAL-CMC-III-MIB", "cmcIIISmsMSN"), ("RITTAL-CMC-III-MIB", "cmcIIISmsPreDial"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfSmsReceivers"), ("RITTAL-CMC-III-MIB", "cmcIIISmsReceiverStatus"), ("RITTAL-CMC-III-MIB", "cmcIIISmsReceiverNumber"), ("RITTAL-CMC-III-MIB", "cmcIIIMsgSMS"), ("RITTAL-CMC-III-MIB", "cmcIIISmsQueue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIISmsMibGroup = cmcIIISmsMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmsMibGroup.setDescription('Conformance group for cmcIII SMS operations.')
cmcIIISmtpMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 9)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIISmtpStatus"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpServer"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpPort"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpAuth"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpUsername"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpPassword"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpSender"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpReply"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfSmtpReceivers"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpReceiverStatus"), ("RITTAL-CMC-III-MIB", "cmcIIISmtpReceiverAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIISmtpMibGroup = cmcIIISmtpMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIISmtpMibGroup.setDescription('Conformance group for cmcIII SMTP operations.')
cmcIIISyslogMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 10)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIISysLogStatus"), ("RITTAL-CMC-III-MIB", "cmcIIISysLogFacility"), ("RITTAL-CMC-III-MIB", "cmcIIISysLogServer1"), ("RITTAL-CMC-III-MIB", "cmcIIISysLogServer2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIISyslogMibGroup = cmcIIISyslogMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIISyslogMibGroup.setDescription('Conformance group for cmcIII syslog operations.')
cmcIIITimerMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 11)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIINumberOfTimers"), ("RITTAL-CMC-III-MIB", "cmcIIITimerStatus"), ("RITTAL-CMC-III-MIB", "cmcIIITimerDayOfWeek"), ("RITTAL-CMC-III-MIB", "cmcIIITimeOn"), ("RITTAL-CMC-III-MIB", "cmcIIITimeOff"), ("RITTAL-CMC-III-MIB", "cmcIIITimeControl"), ("RITTAL-CMC-III-MIB", "cmcIIITimerFunction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIITimerMibGroup = cmcIIITimerMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIITimerMibGroup.setDescription('Conformance group for cmcIII timer operations.')
cmcIIILdapMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 12)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIILdapStatus"), ("RITTAL-CMC-III-MIB", "cmcIIILdapServer"), ("RITTAL-CMC-III-MIB", "cmcIIILdapBindDN"), ("RITTAL-CMC-III-MIB", "cmcIIILdapBindPW"), ("RITTAL-CMC-III-MIB", "cmcIIILdapUserBase"), ("RITTAL-CMC-III-MIB", "cmcIIILdapUserSearch"), ("RITTAL-CMC-III-MIB", "cmcIIILdapUserAttrib"), ("RITTAL-CMC-III-MIB", "cmcIIILdapGroupBase"), ("RITTAL-CMC-III-MIB", "cmcIIILdapGroupSearch"), ("RITTAL-CMC-III-MIB", "cmcIIILdapGroupAttrib"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIILdapMibGroup = cmcIIILdapMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIILdapMibGroup.setDescription('Conformance group for cmcIII LDAP operations.')
cmcIIINtpMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 13)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIINtpStatus"), ("RITTAL-CMC-III-MIB", "cmcIIINtpTimeZone"), ("RITTAL-CMC-III-MIB", "cmcIIINtpServer1"), ("RITTAL-CMC-III-MIB", "cmcIIINtpServer2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIINtpMibGroup = cmcIIINtpMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIINtpMibGroup.setDescription('Conformance group for cmcIII NTP operations.')
cmcIIIShutdownMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 14)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIINumberOfShutdowns"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownServer"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownName"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownPort"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownDelay"), ("RITTAL-CMC-III-MIB", "cmcIIIShutdownEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIShutdownMibGroup = cmcIIIShutdownMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIShutdownMibGroup.setDescription('Conformance group for cmcIII shutdown server operations.')
cmcIIIModbusMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 15)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIModbusStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIModbusPort"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfModbusSources"), ("RITTAL-CMC-III-MIB", "cmcIIIModbusAccess"), ("RITTAL-CMC-III-MIB", "cmcIIIModbusSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIModbusMibGroup = cmcIIIModbusMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIModbusMibGroup.setDescription('Conformance group for cmcIII modbus operations.')
cmcIIIDrcMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 16)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIOverallDrcStatus"), ("RITTAL-CMC-III-MIB", "cmcIIINumberOfDrcs"), ("RITTAL-CMC-III-MIB", "cmcIIIOverallLastChangeDrcStatus"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeNumberOfDrcs"), ("RITTAL-CMC-III-MIB", "cmcIIIOverallDrcUtilization"), ("RITTAL-CMC-III-MIB", "cmcIIIOverallDrcPower"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcStatus"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeDrcStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcUnitName"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcLocation"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcBuilding"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcLevel"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcRoom"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcRow"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcRackNr"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcMfgDate"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcSerialNr"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcOpHours"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcNumberOfRU"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcUtilization"), ("RITTAL-CMC-III-MIB", "cmcIIITotalDrcPower"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcSwController"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcSwBootloader"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcFwController"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcSwAntenna"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcSwAntennaBL"), ("RITTAL-CMC-III-MIB", "cmcIIIDrcCommand"), ("RITTAL-CMC-III-MIB", "cmcIIITagStatus"), ("RITTAL-CMC-III-MIB", "cmcIIITagUID"), ("RITTAL-CMC-III-MIB", "cmcIIITagPosition"), ("RITTAL-CMC-III-MIB", "cmcIIITagUnitFormfactor"), ("RITTAL-CMC-III-MIB", "cmcIIITagOffset"), ("RITTAL-CMC-III-MIB", "cmcIIITagRuPosition"), ("RITTAL-CMC-III-MIB", "cmcIIITagDeviceClass"), ("RITTAL-CMC-III-MIB", "cmcIIITagDescName"), ("RITTAL-CMC-III-MIB", "cmcIIITagManufacturer"), ("RITTAL-CMC-III-MIB", "cmcIIITagType"), ("RITTAL-CMC-III-MIB", "cmcIIITagSerialNumber"), ("RITTAL-CMC-III-MIB", "cmcIIITagVendor"), ("RITTAL-CMC-III-MIB", "cmcIIITagMac1"), ("RITTAL-CMC-III-MIB", "cmcIIITagMac2"), ("RITTAL-CMC-III-MIB", "cmcIIITagService"), ("RITTAL-CMC-III-MIB", "cmcIIITagDeviceName"), ("RITTAL-CMC-III-MIB", "cmcIIITagInventoryCode"), ("RITTAL-CMC-III-MIB", "cmcIIITagPower"), ("RITTAL-CMC-III-MIB", "cmcIIITagCurrent"), ("RITTAL-CMC-III-MIB", "cmcIIITagVoltage"), ("RITTAL-CMC-III-MIB", "cmcIIITagLastService"), ("RITTAL-CMC-III-MIB", "cmcIIITagNextService"), ("RITTAL-CMC-III-MIB", "cmcIIITagLastUpdate"), ("RITTAL-CMC-III-MIB", "cmcIIITagNextUpdate"), ("RITTAL-CMC-III-MIB", "cmcIIITagInitialStart"), ("RITTAL-CMC-III-MIB", "cmcIIITagCustom"), ("RITTAL-CMC-III-MIB", "cmcIIITagCommand"), ("RITTAL-CMC-III-MIB", "cmcIIITagStart"), ("RITTAL-CMC-III-MIB", "cmcIIITagEnd"), ("RITTAL-CMC-III-MIB", "cmcIIITagAntennaMap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIDrcMibGroup = cmcIIIDrcMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIDrcMibGroup.setDescription('Conformance group for cmcIII Drc operations.')
cmcIIIFileMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 17)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIINumberOfFiles"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeFiles"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeNumberOfFiles"), ("RITTAL-CMC-III-MIB", "cmcIIILastChangeFile"), ("RITTAL-CMC-III-MIB", "cmcIIIFileSize"), ("RITTAL-CMC-III-MIB", "cmcIIIFileChecksum"), ("RITTAL-CMC-III-MIB", "cmcIIIFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIFileMibGroup = cmcIIIFileMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIFileMibGroup.setDescription('Conformance group for cmcIII files.')
cmcIIIRadiusMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 18)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIRadiusStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusServer"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusPort"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusPassword"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusGroupMode"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusGroupId"), ("RITTAL-CMC-III-MIB", "cmcIIIRadiusAuth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIRadiusMibGroup = cmcIIIRadiusMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIRadiusMibGroup.setDescription('Conformance group for cmcIII Radius operations.')
cmcIIIWebCamMibGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2606, 7, 6, 2, 19)).setObjects(("RITTAL-CMC-III-MIB", "cmcIIIWebCamStatus"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamServer"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamUsername"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamPassword"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamIntervall"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamNumberofImages"), ("RITTAL-CMC-III-MIB", "cmcIIIWebCamDestination"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmcIIIWebCamMibGroup = cmcIIIWebCamMibGroup.setStatus('current')
if mibBuilder.loadTexts: cmcIIIWebCamMibGroup.setDescription('Conformance group for cmcIII WebCam operations.')
mibBuilder.exportSymbols("RITTAL-CMC-III-MIB", cmcIIIMsgStatus=cmcIIIMsgStatus, cmcIIISmsReceiverEntry=cmcIIISmsReceiverEntry, cmcIIITagPosition=cmcIIITagPosition, cmcIIIMibRev=cmcIIIMibRev, cmcIIITagDeviceClass=cmcIIITagDeviceClass, cmcIIIShutdownServer=cmcIIIShutdownServer, cmcIIIDrcOpHours=cmcIIIDrcOpHours, cmcIIITagRuPosition=cmcIIITagRuPosition, cmcIIIVarByTypeDeviceIndex=cmcIIIVarByTypeDeviceIndex, cmcIIITelnetAccess=cmcIIITelnetAccess, cmcIIIFileInfo=cmcIIIFileInfo, cmcIIIShutdownName=cmcIIIShutdownName, cmcIIISmsStatus=cmcIIISmsStatus, cmcIIISmtpReceiverEntry=cmcIIISmtpReceiverEntry, cmcIIIModbusTable=cmcIIIModbusTable, cmcIIIWebCamDestination=cmcIIIWebCamDestination, cmcIIISetupTime=cmcIIISetupTime, cmcIIIWebAccess=cmcIIIWebAccess, cmcIIISetupShutdown=cmcIIISetupShutdown, cmcIIINumberOfVars=cmcIIINumberOfVars, cmcIIIVarTable=cmcIIIVarTable, cmcIIILastChangeNumberOfVars=cmcIIILastChangeNumberOfVars, cmcIIISetupSMS=cmcIIISetupSMS, cmcIIIFileEntry=cmcIIIFileEntry, cmcIIITagType=cmcIIITagType, cmcIIIHttpPort=cmcIIIHttpPort, cmcIIILastChangeNumberOfFiles=cmcIIILastChangeNumberOfFiles, cmcIIIWebCamUsername=cmcIIIWebCamUsername, cmcIIITagNextUpdate=cmcIIITagNextUpdate, cmcIIIUnitLoadEntry=cmcIIIUnitLoadEntry, cmcIIIMsgRelay=cmcIIIMsgRelay, cmcIIINumberOfShutdowns=cmcIIINumberOfShutdowns, cmcIIIDevHW=cmcIIIDevHW, cmcIIILastChangeMsgSettings=cmcIIILastChangeMsgSettings, cmcIIISetupSysLog=cmcIIISetupSysLog, cmcIIILdapGroupAttrib=cmcIIILdapGroupAttrib, cmcIIINumberOfDrcs=cmcIIINumberOfDrcs, cmcIIINumberOfSmsReceivers=cmcIIINumberOfSmsReceivers, cmcIIIMsgVarValueIdx=cmcIIIMsgVarValueIdx, cmcIIIDevAlias=cmcIIIDevAlias, cmcIIIMsgEntry=cmcIIIMsgEntry, cmcIIIUnitLoadTable=cmcIIIUnitLoadTable, cmcIIILastChangeDrcStatus=cmcIIILastChangeDrcStatus, cmcIIILastChangeNumberOfDrcs=cmcIIILastChangeNumberOfDrcs, cmcIIIRadiusGroupMode=cmcIIIRadiusGroupMode, cmcIIITagManufacturer=cmcIIITagManufacturer, cmcIIIVarByTypeType=cmcIIIVarByTypeType, cmcIIIVarStrDynTable=cmcIIIVarStrDynTable, cmcIIITrapReceiverStatus=cmcIIITrapReceiverStatus, cmcIIILanguage=cmcIIILanguage, cmcIIIModbusSource=cmcIIIModbusSource, cmcIIILdapGroupSearch=cmcIIILdapGroupSearch, cmcIIIVarByQualityLastChange=cmcIIIVarByQualityLastChange, cmcIIINtpServer2=cmcIIINtpServer2, cmcIIIDrcMfgDate=cmcIIIDrcMfgDate, cmcIIINumberOfModbusSources=cmcIIINumberOfModbusSources, cmcIIICan1CurrentConsumption=cmcIIICan1CurrentConsumption, cmcIIIRadiusServer=cmcIIIRadiusServer, cmcIIIWebCamIntervall=cmcIIIWebCamIntervall, cmcIIIVarByQualityValueInt=cmcIIIVarByQualityValueInt, cmcIIITagCurrent=cmcIIITagCurrent, cmcIIITimerMibGroup=cmcIIITimerMibGroup, cmcIIIDrcSerialNr=cmcIIIDrcSerialNr, cmcIIILastChangeVarSettings=cmcIIILastChangeVarSettings, cmcIIIFtpPort=cmcIIIFtpPort, cmcIIIVarDeviceIndex=cmcIIIVarDeviceIndex, cmcIIISmtpMibGroup=cmcIIISmtpMibGroup, cmcIIILastChangeNumberOfMsgs=cmcIIILastChangeNumberOfMsgs, cmcIIIControl=cmcIIIControl, cmcIIIVarByQualityTable=cmcIIIVarByQualityTable, cmcIIIUnitURL=cmcIIIUnitURL, cmcIIIModbusPort=cmcIIIModbusPort, cmcIIIDynUpdateHistory=cmcIIIDynUpdateHistory, cmcIIIVarStrDynValue=cmcIIIVarStrDynValue, cmcIIILdapStatus=cmcIIILdapStatus, cmcIIISmsReceiverTable=cmcIIISmsReceiverTable, cmcIIIVarStrDynEntry=cmcIIIVarStrDynEntry, cmcIIITagTable=cmcIIITagTable, cmcIIIDevBus=cmcIIIDevBus, cmcIIIUnitMode=cmcIIIUnitMode, cmcIIILastChangeSetup=cmcIIILastChangeSetup, cmcIIINumberOfDevs=cmcIIINumberOfDevs, cmcIIIUnitOSRev=cmcIIIUnitOSRev, cmcIIIDevURL=cmcIIIDevURL, cmcIIIDevType=cmcIIIDevType, cmcIIISetupDate=cmcIIISetupDate, cmcIIILdapBindPW=cmcIIILdapBindPW, cmcIIISetBeeper=cmcIIISetBeeper, cmcIIITagAntennaMap=cmcIIITagAntennaMap, cmcIIITagLastUpdate=cmcIIITagLastUpdate, cmcIIINtpMibGroup=cmcIIINtpMibGroup, alarmSensorDevice=alarmSensorDevice, cmcIIISmsMSN=cmcIIISmsMSN, cmcIIIDevNumberOfMsgs=cmcIIIDevNumberOfMsgs, cmcIIIDynUpdateRate=cmcIIIDynUpdateRate, PYSNMP_MODULE_ID=cmcIII, cmcIIISmsPreDial=cmcIIISmsPreDial, cmcIIISmtpPassword=cmcIIISmtpPassword, cmcIII=cmcIII, cmcIIIDevLastChange=cmcIIIDevLastChange, cmcIIILdapServer=cmcIIILdapServer, cmcIIISmtpReceiverStatus=cmcIIISmtpReceiverStatus, cmcIIISetupSMTP=cmcIIISetupSMTP, cmcIIIHttpsPort=cmcIIIHttpsPort, shutdownAgent=shutdownAgent, cmcIIIDrcInfo=cmcIIIDrcInfo, cmcIIITagSerialNumber=cmcIIITagSerialNumber, cmcIIITimeZone=cmcIIITimeZone, cmcIIIDrcUtilization=cmcIIIDrcUtilization, cmcIIIVarByQualityValueStr=cmcIIIVarByQualityValueStr, cmcIIIMibMajRev=cmcIIIMibMajRev, cmcIIIVarByQualityEntry=cmcIIIVarByQualityEntry, cmcIIITagDescName=cmcIIITagDescName, cmcIIITagStart=cmcIIITagStart, cmcIIIDrcEntry=cmcIIIDrcEntry, cmcIIINumberOfTimers=cmcIIINumberOfTimers, cmcIIISmsReceiverNumber=cmcIIISmsReceiverNumber, cmcIIIVarScale=cmcIIIVarScale, cmcIIIMsgIndex=cmcIIIMsgIndex, cmcIIIMibCompliances=cmcIIIMibCompliances, cmcIIIMibGroups=cmcIIIMibGroups, cmcIIITagStatus=cmcIIITagStatus, cmcIIIDevice=cmcIIIDevice, cmcIIIDrcNumberOfRU=cmcIIIDrcNumberOfRU, cmcIIIUnitHWRev=cmcIIIUnitHWRev, cmcIIIRadiusAuth=cmcIIIRadiusAuth, cmcIIIVarValueInt=cmcIIIVarValueInt, cmcIIITagDrcIndex=cmcIIITagDrcIndex, cmcIIINumberOfMsgs=cmcIIINumberOfMsgs, cmcIIIRadiusPassword=cmcIIIRadiusPassword, cmcIIISmtpAuth=cmcIIISmtpAuth, cmcIIINumberOfSmtpReceivers=cmcIIINumberOfSmtpReceivers, cmcIIITagEnd=cmcIIITagEnd, cmcIIIRadiusMibGroup=cmcIIIRadiusMibGroup, alarmDevice=alarmDevice, cmcIIIVarIntDynIndex=cmcIIIVarIntDynIndex, cmcIIISmtpServer=cmcIIISmtpServer, cmcIIISshAccess=cmcIIISshAccess, cmcIIIWebCamStatus=cmcIIIWebCamStatus, cmcIIIVarAccess=cmcIIIVarAccess, cmcIIITagCommand=cmcIIITagCommand, cmcIIIDrcs=cmcIIIDrcs, cmcIIILastChangeVars=cmcIIILastChangeVars, cmcIIIMsgTrap=cmcIIIMsgTrap, cmcIIIMsgVarIdx=cmcIIIMsgVarIdx, cmcIIIUnitUpTime=cmcIIIUnitUpTime, cmcIIIVarByTypeValueStr=cmcIIIVarByTypeValueStr, cmcIIISmtpPort=cmcIIISmtpPort, cmcIIIDrcFwController=cmcIIIDrcFwController, cmcIIILastChangeFiles=cmcIIILastChangeFiles, cmcIIIVarIntDynDeviceIndex=cmcIIIVarIntDynDeviceIndex, cmcIIITagNextService=cmcIIITagNextService, cmcIIITagOffset=cmcIIITagOffset, cmcIIIRadiusPort=cmcIIIRadiusPort, cmcIIIVarByQualityQuality=cmcIIIVarByQualityQuality, cmcIIISetupTimer=cmcIIISetupTimer, cmcIIIOverallMsgStatus=cmcIIIOverallMsgStatus, cmcIIILastChangeOverallDevStatus=cmcIIILastChangeOverallDevStatus, cmcIIIUnitFWRev=cmcIIIUnitFWRev, cmcIIIShutdownTable=cmcIIIShutdownTable, cmcIIINotifications=cmcIIINotifications, cmcIIITagMac2=cmcIIITagMac2, cmcIIISetupModbus=cmcIIISetupModbus, cmcIIIShutdownEnabled=cmcIIIShutdownEnabled, cmcIIIMsgQuality=cmcIIIMsgQuality, cmcIIISetupGeneral=cmcIIISetupGeneral, cmcIIITagPower=cmcIIITagPower, cmcIIITagCustom=cmcIIITagCustom, cmcIIIVarIndex=cmcIIIVarIndex, cmcIIITrapGroup=cmcIIITrapGroup, cmcIIIControlMibGroup=cmcIIIControlMibGroup, cmcIIIDevEntry=cmcIIIDevEntry, cmcIIISmtpSender=cmcIIISmtpSender, cmcIIIFileMibGroup=cmcIIIFileMibGroup, cmcIIIOverallLastChangeDrcStatus=cmcIIIOverallLastChangeDrcStatus, cmcIIIVarByQualityIndex=cmcIIIVarByQualityIndex, cmcIIIDevSerial=cmcIIIDevSerial, cmcIIIDrcMibGroup=cmcIIIDrcMibGroup, cmcIIIAgentRev=cmcIIIAgentRev, cmcIIIDevs=cmcIIIDevs, cmcIIIDrcSwBootloader=cmcIIIDrcSwBootloader, cmcIIIWebCamServer=cmcIIIWebCamServer, cmcIIIModbusAccess=cmcIIIModbusAccess, cmcIIIVarInfo=cmcIIIVarInfo, cmcIIITotalDrcPower=cmcIIITotalDrcPower, cmcIIIVarLastChange=cmcIIIVarLastChange, cmcIIIVarByTypeTable=cmcIIIVarByTypeTable, cmcIIIMibCompliance=cmcIIIMibCompliance, cmcIIIOverallDrcStatus=cmcIIIOverallDrcStatus, cmcIIILogicRelay=cmcIIILogicRelay, cmcIIISysLogStatus=cmcIIISysLogStatus, cmcIIITimerIndex=cmcIIITimerIndex, cmcIIIVars=cmcIIIVars, cmcIIIVarEntPhysicalIndex=cmcIIIVarEntPhysicalIndex, cmcIIILastChangeFile=cmcIIILastChangeFile, cmcIIITrapReceiverIpAddress=cmcIIITrapReceiverIpAddress, cmcIIIVarStrDynLastChange=cmcIIIVarStrDynLastChange, cmcIIITagMac1=cmcIIITagMac1, cmcIIIDevTable=cmcIIIDevTable, cmcIIIVarStrDynIndex=cmcIIIVarStrDynIndex, cmcIIITelnetPort=cmcIIITelnetPort, cmcIIISetupRadius=cmcIIISetupRadius, cmcIIILastChangeNumberOfDevs=cmcIIILastChangeNumberOfDevs, cmcIIIFileTable=cmcIIIFileTable, cmcIIIDrcRackNr=cmcIIIDrcRackNr, cmcIIITrapReceiverTable=cmcIIITrapReceiverTable, cmcIIIDevCurrentMinConsumption=cmcIIIDevCurrentMinConsumption, cmcIIIMsgDelay=cmcIIIMsgDelay, cmcIIIDevIndex=cmcIIIDevIndex, cmcIIISetupNTP=cmcIIISetupNTP, cmcIIIVarSteps=cmcIIIVarSteps, cmcIIITagService=cmcIIITagService, cmcIIITrapReceiverIndex=cmcIIITrapReceiverIndex, cmcIIISysLogServer1=cmcIIISysLogServer1, cmcIIISmsQueue=cmcIIISmsQueue, cmcIIIOpcUaAccess=cmcIIIOpcUaAccess, cmcIIIMibMinRev=cmcIIIMibMinRev, cmcIIILdapUserSearch=cmcIIILdapUserSearch, cmcIIIMsgInfo=cmcIIIMsgInfo, cmcIIIModbusMibGroup=cmcIIIModbusMibGroup, cmcIIIMsgStatusText=cmcIIIMsgStatusText, cmcIIITimerTable=cmcIIITimerTable, cmcIIIWebCamMibGroup=cmcIIIWebCamMibGroup, cmcIIIOverallDevStatus=cmcIIIOverallDevStatus, cmcIIIOverallDrcUtilization=cmcIIIOverallDrcUtilization, cmcIIILastChangeDevSettings=cmcIIILastChangeDevSettings, cmcIIITagVoltage=cmcIIITagVoltage, cmcIIILdapGroupBase=cmcIIILdapGroupBase, cmcIIIWebCamPassword=cmcIIIWebCamPassword, cmcIIIVarStrDynDeviceIndex=cmcIIIVarStrDynDeviceIndex, cmcIIIUnitProd=cmcIIIUnitProd, cmcIIIUnitLoadAverage=cmcIIIUnitLoadAverage, cmcIIIVarIntDynTable=cmcIIIVarIntDynTable, cmcIIIUnitType=cmcIIIUnitType, cmcIIILdapUserAttrib=cmcIIILdapUserAttrib, cmcIIIShutdownMibGroup=cmcIIIShutdownMibGroup, cmcIIIMsgSMS=cmcIIIMsgSMS, cmcIIIDrcRow=cmcIIIDrcRow, cmcIIISmtpReceiverIndex=cmcIIISmtpReceiverIndex, cmcIIIMsgTable=cmcIIIMsgTable, cmcIIIShutdownIndex=cmcIIIShutdownIndex, cmcIIINotificationGroup=cmcIIINotificationGroup, cmcIIIUnitCurrentSource=cmcIIIUnitCurrentSource, cmcIIIDevNodeID=cmcIIIDevNodeID, cmcIIIFileSize=cmcIIIFileSize, cmcIIIConformance=cmcIIIConformance, cmcIIITimeOff=cmcIIITimeOff, cmcIIIDrcLevel=cmcIIIDrcLevel, cmcIIIUnit=cmcIIIUnit, cmcIIITimerStatus=cmcIIITimerStatus, cmcIIIMsgDeviceIndex=cmcIIIMsgDeviceIndex, cmcIIIQuitRelay=cmcIIIQuitRelay, cmcIIISmtpStatus=cmcIIISmtpStatus, cmcIIITagInitialStart=cmcIIITagInitialStart)
mibBuilder.exportSymbols("RITTAL-CMC-III-MIB", cmcIIIVarByTypeLastChange=cmcIIIVarByTypeLastChange, cmcIIIFunctionRelay=cmcIIIFunctionRelay, cmcIIIVarUnit=cmcIIIVarUnit, cmcIIIVarIntDynLastChange=cmcIIIVarIntDynLastChange, cmcIIIShutdownDelay=cmcIIIShutdownDelay, cmcIIISetup=cmcIIISetup, cmcIIIFileName=cmcIIIFileName, cmcIIINtpServer1=cmcIIINtpServer1, cmcIIILdapUserBase=cmcIIILdapUserBase, cmcIIISetTempUnit=cmcIIISetTempUnit, cmcIIIModbusStatus=cmcIIIModbusStatus, cmcIIIDrcSwController=cmcIIIDrcSwController, cmcIIIDevLocation=cmcIIIDevLocation, cmcIIINtpTimeZone=cmcIIINtpTimeZone, cmcIIISetupMibGroup=cmcIIISetupMibGroup, cmcIIIMsgs=cmcIIIMsgs, cmcIIIFiles=cmcIIIFiles, cmcIIIDrcSwAntenna=cmcIIIDrcSwAntenna, cmcIIIVarByTypeEntry=cmcIIIVarByTypeEntry, cmcIIISmsReceiverIndex=cmcIIISmsReceiverIndex, cmcIIIShutdownEntry=cmcIIIShutdownEntry, cmcIIIVarName=cmcIIIVarName, cmcIIIModbusIndex=cmcIIIModbusIndex, cmcIIILastChangeDevs=cmcIIILastChangeDevs, cmcIIISmsMibGroup=cmcIIISmsMibGroup, cmcIIISetupWebCam=cmcIIISetupWebCam, cmcIIIDrcStatus=cmcIIIDrcStatus, cmcIIITagEntry=cmcIIITagEntry, cmcIIIMsgBeeper=cmcIIIMsgBeeper, cmcIIITagUID=cmcIIITagUID, cmcIIIUnitStatus=cmcIIIUnitStatus, cmcIIISysLogServer2=cmcIIISysLogServer2, cmcIIIDevFW=cmcIIIDevFW, cmcIIIMsgText=cmcIIIMsgText, cmcIIIWebCamNumberofImages=cmcIIIWebCamNumberofImages, cmcIIITimerFunction=cmcIIITimerFunction, cmcIIIVarValueStr=cmcIIIVarValueStr, cmcIIIOverallDrcPower=cmcIIIOverallDrcPower, cmcIIINumberOfFiles=cmcIIINumberOfFiles, cmcIIISmtpReceiverTable=cmcIIISmtpReceiverTable, cmcIIISysLogFacility=cmcIIISysLogFacility, cmcIIIDevStatus=cmcIIIDevStatus, cmcIIITagRuIndex=cmcIIITagRuIndex, cmcIIISetupTrap=cmcIIISetupTrap, cmcIIIDevAssembly=cmcIIIDevAssembly, cmcIIIFileIndex=cmcIIIFileIndex, cmcIIIVarByTypeValueInt=cmcIIIVarByTypeValueInt, cmcIIIUnitLoadIndex=cmcIIIUnitLoadIndex, cmcIIIDeviceMibGroup=cmcIIIDeviceMibGroup, cmcIIIVarByQualityDeviceIndex=cmcIIIVarByQualityDeviceIndex, cmcIIISshPort=cmcIIISshPort, cmcIIIMsgQuit=cmcIIIMsgQuit, cmcIIITimeOn=cmcIIITimeOn, cmcIIIRadiusStatus=cmcIIIRadiusStatus, cmcIIIDrcLocation=cmcIIIDrcLocation, cmcIIIUnitMsgRelay=cmcIIIUnitMsgRelay, cmcIIIFtpAccess=cmcIIIFtpAccess, cmcIIIDrcSwAntennaBL=cmcIIIDrcSwAntennaBL, cmcIIIDevArtNr=cmcIIIDevArtNr, cmcIIIRadiusGroupId=cmcIIIRadiusGroupId, cmcIIIDevEntPhysicalIndex=cmcIIIDevEntPhysicalIndex, cmcIIIDevPos=cmcIIIDevPos, cmcIIICapabilityRev=cmcIIICapabilityRev, cmcIIIDrcCommand=cmcIIIDrcCommand, cmcIIILdapBindDN=cmcIIILdapBindDN, cmcIIIDrcRoom=cmcIIIDrcRoom, cmcIIITimerEntry=cmcIIITimerEntry, cmcIIITagUnitFormfactor=cmcIIITagUnitFormfactor, cmcIIISmtpReply=cmcIIISmtpReply, cmcIIIRelayMibGroup=cmcIIIRelayMibGroup, cmcIIIVarIntDynValue=cmcIIIVarIntDynValue, cmcIIIVarType=cmcIIIVarType, cmcIIIDevName=cmcIIIDevName, cmcIIIQuitUnit=cmcIIIQuitUnit, cmcIIISyslogMibGroup=cmcIIISyslogMibGroup, cmcIIIMsgSMTP=cmcIIIMsgSMTP, cmcIIIUnitSerial=cmcIIIUnitSerial, cmcIIITrapReceiverEntry=cmcIIITrapReceiverEntry, cmcIIISmtpReceiverAddress=cmcIIISmtpReceiverAddress, cmcIIISmsService=cmcIIISmsService, cmcIIIDrcIndex=cmcIIIDrcIndex, cmcIIILdapMibGroup=cmcIIILdapMibGroup, cmcIIIVarEntry=cmcIIIVarEntry, cmcIIIDrcBuilding=cmcIIIDrcBuilding, cmcIIISmsReceiverStatus=cmcIIISmsReceiverStatus, cmcIIIDevStatusText=cmcIIIDevStatusText, cmcIIINumberOfTrapReceivers=cmcIIINumberOfTrapReceivers, cmcIIIOpcUaPort=cmcIIIOpcUaPort, cmcIIIDevInfo=cmcIIIDevInfo, cmcIIIDrcTable=cmcIIIDrcTable, cmcIIIDevProductWeek=cmcIIIDevProductWeek, cmcIIISetupLDAP=cmcIIISetupLDAP, cmcIIISmtpUsername=cmcIIISmtpUsername, cmcIIITagDeviceName=cmcIIITagDeviceName, cmcIIIVarIntDynEntry=cmcIIIVarIntDynEntry, cmcIIIModbusEntry=cmcIIIModbusEntry, cmcIIIVarConstraints=cmcIIIVarConstraints, cmcIIIVarByQualityHide=cmcIIIVarByQualityHide, cmcIIISmsPIN=cmcIIISmsPIN, cmcIIINtpStatus=cmcIIINtpStatus, cmcIIITagLastService=cmcIIITagLastService, cmcIIITagInventoryCode=cmcIIITagInventoryCode, cmcIIIShutdownPort=cmcIIIShutdownPort, cmcIIIVarDataType=cmcIIIVarDataType, cmcIIIVarByTypeIndex=cmcIIIVarByTypeIndex, cmcIIIInfoMibGroup=cmcIIIInfoMibGroup, cmcIIIMsgSchedAlarmOff=cmcIIIMsgSchedAlarmOff, cmcIIITimeControl=cmcIIITimeControl, cmcIIIDrcUnitName=cmcIIIDrcUnitName, cmcIIICan0CurrentConsumption=cmcIIICan0CurrentConsumption, cmcIIIDevCurrentMaxConsumption=cmcIIIDevCurrentMaxConsumption, cmcIIIDevNumberOfVars=cmcIIIDevNumberOfVars, cmcIIITimerDayOfWeek=cmcIIITimerDayOfWeek, cmcIIITagVendor=cmcIIITagVendor, cmcIIIFileChecksum=cmcIIIFileChecksum, reConfigAgent=reConfigAgent, cmcIIIVarQuality=cmcIIIVarQuality, cmcIIILastChangeOverallMsgStatus=cmcIIILastChangeOverallMsgStatus)
