#
# PySNMP MIB module SL-SFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/packetlight/SL-SFP-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:33:01 2024
# On host fv-az693-695 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
Float128TC, Float64TC, Float32TC = mibBuilder.importSymbols("FLOAT-TC-MIB", "Float128TC", "Float64TC", "Float32TC")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfIntervalCount, PerfTotalCount, PerfCurrentCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfIntervalCount", "PerfTotalCount", "PerfCurrentCount")
CleiCode, = mibBuilder.importSymbols("SL-ENTITY-MIB", "CleiCode")
sitelight, = mibBuilder.importSymbols("SL-NE-MIB", "sitelight")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Counter64, Gauge32, ObjectIdentity, iso, ModuleIdentity, MibIdentifier, IpAddress, NotificationType, Unsigned32, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Counter64", "Gauge32", "ObjectIdentity", "iso", "ModuleIdentity", "MibIdentifier", "IpAddress", "NotificationType", "Unsigned32", "Bits", "Integer32")
TimeStamp, TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TextualConvention", "TruthValue", "DisplayString")
slSfp = ModuleIdentity((1, 3, 6, 1, 4, 1, 4515, 1, 10))
if mibBuilder.loadTexts: slSfp.setLastUpdated('200501250000Z')
if mibBuilder.loadTexts: slSfp.setOrganization('PacketLight Networks Ltd.')
if mibBuilder.loadTexts: slSfp.setContactInfo('Omri_Viner@PacketLight.com')
if mibBuilder.loadTexts: slSfp.setDescription('This MIB module describes the SFP Modules')
sfpConf = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1))
sfpDiag = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2))
sfpTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 3))
sfpTune = MibIdentifier((1, 3, 6, 1, 4, 1, 4515, 1, 10, 4))
sfpConfigTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1), )
if mibBuilder.loadTexts: sfpConfigTable.setStatus('current')
if mibBuilder.loadTexts: sfpConfigTable.setDescription('The SFP configuration table. \n\t\tThe table defines the configuration of the SFP-1310 and\n\t\tthe SFP-WDM modules.')
sfpConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1), ).setIndexNames((0, "SL-SFP-MIB", "sfpConfigInterface"))
if mibBuilder.loadTexts: sfpConfigEntry.setStatus('current')
if mibBuilder.loadTexts: sfpConfigEntry.setDescription('An entry in the SFP configuration table.\n\t\tThe index to this table is the same as the ifIndex of the SFP.\n\t\tThe SFP Config Table contain and entry for each\n\t\tmodule of a type SFP.')
sfpConfigInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigInterface.setStatus('current')
if mibBuilder.loadTexts: sfpConfigInterface.setDescription('The Interface Index of the SFP (type=196).')
sfpConfigXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 6, 11, 12, 13, 14, 15, 16, 17, 20))).clone(namedValues=NamedValues(("unknone", 0), ("gbic", 1), ("module", 2), ("sfp1310", 3), ("xfp", 6), ("sfpDwdm", 11), ("qsfp", 12), ("qsfpPlus", 13), ("cfp", 14), ("cxp", 15), ("coherent", 16), ("qsfp28", 17), ("cfp2", 20)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXcvrId.setReference('DWDM MSA Table 2.3.1 and 2.3.2, \n    \t\t\tSFP-8472 Table 3.1 and 3.2')
if mibBuilder.loadTexts: sfpConfigXcvrId.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXcvrId.setDescription('The identifier value specifies the physical device described by the serial information.\n\t\tThis value shall be included in the serial data. The defined identifier values are:\n\t\t\t00h - Unknown or unspecified\n\t\t\t01h - GBIC\n\t\t\t02h - Module/connector soldered to motherboard\n\t\t\t03h - 1310 SFP \n\t\t\t04-0Ah - Reserved for XFP and other platforms\n\t\t\t0Bh - DWDM SFP \n\t\t\t80-FFh - Vendor specific.')
sfpConfig1310ExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("modDef0", 0), ("modDef1", 1), ("modDef2", 2), ("modDef3", 3), ("modDef4", 4), ("modDef5", 5), ("modDef6", 6), ("modDef7", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig1310ExtXcvrId.setReference('SFP-8472 Table 3.1 and 3.3')
if mibBuilder.loadTexts: sfpConfig1310ExtXcvrId.setStatus('current')
if mibBuilder.loadTexts: sfpConfig1310ExtXcvrId.setDescription('The extended identifier value provides additional information about the 1310 transceiver.\n\t\t The defined identifier values are:\n\t\t\t00h GBIC definition is not specified or the GBIC\n\t\t\t\t\tdefinition is not compliant with a defined\n\t\t\t\t\tMOD_DEF. See product specification for details.\n\t\t\t01h GBIC is compliant with MOD_DEF 1\n\t\t\t02h GBIC is compliant with MOD_DEF 2\n\t\t\t03h GBIC is compliant with MOD_DEF 3\n\t\t\t04h GBIC/SFP function is defined by serial ID only\n\t\t\t05h GBIC is compliant with MOD_DEF 5\n\t\t\t06h GBIC is compliant with MOD_DEF 6\n\t\t\t07h GBIC is compliant with MOD_DEF 7\n\t\t\t08-FFh Reserved')
sfpConfigWdmExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigWdmExtXcvrId.setReference('DWDM MSA Table 2.3.1 and 2.3.3')
if mibBuilder.loadTexts: sfpConfigWdmExtXcvrId.setStatus('current')
if mibBuilder.loadTexts: sfpConfigWdmExtXcvrId.setDescription('This field is used to distinguish between different types of DWDM transceivers and\n\t\tdifferent power and environmental classes. The defined identifier values are:\n\t\t\tBits 7..6: Reserved\n\t\t\tBits 5..4: Class of WDM\n\t\t\t\t00: no WDM\n\t\t\t\t01: CWDM\n\t\t\t\t10: DWDM\n\t\t\tBits 3..2: Class of power\n\t\t\t\t00: P<1W\n\t\t\t\t01: [1W,1.5W]\n\t\t\t\t10: P>1.5W\n\t\t\t\t11: reserved\n\t\t\tBits 3..2: Class of temp\n\t\t\t\t00: [-5, 70C]\n\t\t\t\t01: [1W,1.5W]\n\t\t\t\t10: reserved\n\t\t\t\t11: Defined by Bytes 15 - 16.')
sfpConfigConnectorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 32, 33))).clone(namedValues=NamedValues(("conUnknown", 0), ("conSc", 1), ("conFcCopper1", 2), ("conFcCopper2", 3), ("conBncTnc", 4), ("conFcCoaxial", 5), ("conFiberJack", 6), ("conLc", 7), ("conMtRj", 8), ("conMu", 9), ("comSg", 10), ("conOpticalPigtail", 11), ("conHssdc2", 32), ("conCopperPigtail", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigConnectorCode.setReference('DWDM MSA Table 2.3.1 and 2.3.4, \n    \t\t\tSFP-8472 Table 3.1 and 3.4.')
if mibBuilder.loadTexts: sfpConfigConnectorCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigConnectorCode.setDescription('The identifier value specifies the physical device described by the serial information.\n\t\tThis value shall be included in the serial data. The defined identifier values are:\n\t\t\t00h - Unknown or unspecified\n\t\t\t01h - SC\n\t\t\t02h - Fibre Channel Style 1 copper connector\n\t\t\t03h - Fibre Channel Style 2 copper connector \n\t\t\t04h - BNC/TNC\n\t\t\t05h - Fibre Channel coaxial headers \n\t\t\t06h - FiberJack \n\t\t\t07h - LC \n\t\t\t08h - MT-RJ \n\t\t\t09h - MU \n\t\t\t0Ah - SG \n\t\t\t0Bh - Optical pigtail\n\t\t\t0Ch - 1Fh - Reserved \n\t\t\t20h - HSSDC II \n\t\t\t21h - Copper Pigtail\n\t\t\t22h - 7Fh - Reserved \n\t\t\t80-FFh - Vendor specific.')
sfpConfigInfibandCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigInfibandCompliance.setReference('DWDM MSA Table 2.3.1 and 2.3.5, \n    \t\t\tSFP-8472 Table 3.1 and 3.5.')
if mibBuilder.loadTexts: sfpConfigInfibandCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfigInfibandCompliance.setDescription('The following bit significant indicators define the Infiband interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits 0: 1X SX\n\t\t\tBits 1: 1X LX\n\t\t\tBits 2: 1X Copper Active\n\t\t\tBits 3: 1X Copper Passive.')
sfpConfigEsconCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEsconCompliance.setReference('SFP-8472 Table 3.1 and 3.5.')
if mibBuilder.loadTexts: sfpConfigEsconCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfigEsconCompliance.setDescription('The following bit significant indicators define the ESCON interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits 0: ESCON MMF, 1310nm LED\n\t\t\tBits 1: ESCON SMF, 1310nm Laser')
sfpConfigSonetCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigSonetCompliance.setReference('DWDM MSA Table 2.3.1, 2.3.5 and 2.3.5a, \n    \t\t\tSFP-8472 Table 3.1, 3.5 and 3.5a.')
if mibBuilder.loadTexts: sfpConfigSonetCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfigSonetCompliance.setDescription('The following bit significant indicators define the SONET interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits 0: SONET reach specifier bit 1\n\t\t\tBits 1: SONET reach specifier bit 2\n\t\t\tWhere: \n\t\t\t\t00 speed OC-3/OC-12/OC-48 Short        reach - SONET SR compliant\n\t\t\t\t10 speed OC-3/OC-12/OC-48 Short        reach - SONET SR-1 compliant\n\t\t\t\t10 speed OC-3/OC-12/OC-48 Intermediate reach - SONET IR-1 compliant\n\t\t\t\t01 speed OC-3/OC-12/OC-48 Intermediate reach - SONET IR-2 compliant\n\t\t\t\t10 speed OC-3/OC-12/OC-48 Long         reach - SONET LR-1 compliant\n\t\t\t\t01 speed OC-3/OC-12/OC-48 Long         reach - SONET LR-2 compliant\n\t\t\t\t11 speed OC-3/OC-12/OC-48 Long         reach - SONET LR-3 compliant\n\t\t\tBits 2: OC-48, single mode long reach\n\t\t\tBits 3: OC-48, single mode inter. reach\n\t\t\tBits 4: OC-48, multi-mode short reach\n\t\t\tBits 5: OC-12, single mode long reach\n\t\t\tBits 6: OC-12, single mode inter. reach\n\t\t\tBits 7: OC-12 multi-mode short reach\n\t\t\tBits 8: OC-3, single mode long reach\n\t\t\tBits 9: OC-3, single mode inter. reach\n\t\t\tBits 10: OC-3, multi-mode short reach.')
sfpConfigGbeCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigGbeCompliance.setReference('DWDM MSA Table 2.3.1 and 2.3.5, \n    \t\t\tSFP-8472 Table 3.1 and 3.5')
if mibBuilder.loadTexts: sfpConfigGbeCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfigGbeCompliance.setDescription('The following bit significant indicators define the Infiband interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits 0: 1000BASE-T\n\t\t\tBits 1: 1000BASE-CX\n\t\t\tBits 2: 1000BASE-LX\n\t\t\tBits 3: 1000BASE-SX\n\t\t\tBits 4: 100BASE-LX/LX10        -- 1310\n\t\t\tBits 5: 100BASE-FX             -- 1310\n\t\t\tBits 6: BASE-BX10              -- 1310\n\t\t\tBits 7: BASE-PX.')
sfpConfigFcCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigFcCompliance.setReference('DWDM MSA Table 2.3.1 and 2.3.5,\n    \t\t\tSFP-8472 Table 3.1 and 3.5')
if mibBuilder.loadTexts: sfpConfigFcCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfigFcCompliance.setDescription('The following bit significant indicators define the FC interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\t- Fibre Channel link length:\n\t\t\tBits  0: very long distance (V)\n\t\t\tBits  1: short distance (S)\n\t\t\tBits  2: intermediate distance (I)\n\t\t\tBits  3: long distance (L)\n\t\t\t- Fibre Channel transmitter technology\n\t\t\tBits  4: Longwave laser (LC)\n\t\t\tBits  5: Electrical inter-enclosure (EL)\n\t\t\tBits  6: Electrical intra-enclosure (EL)\n\t\t\tBits  7: Shortwave laser w/o OFC (SN)\n\t\t\tBits  8: Shortwave laser w/ OFC (SL)\n\t\t\tBits  9: Longwave laser (LL)\n\t\t\tBits 10: Copper Active          -- 1310\n\t\t\tBits 11: Copper Passive         -- 1310\n\t\t\t- Fibre Channel transmission media\n\t\t\tBits 12: Twin Axial Pair (TW)\n\t\t\tBits 13: Shielded Twisted Pair (TP)\n\t\t\tBits 14: Miniature Coax (MI)\n\t\t\tBits 15: Video Coax (TV)\n\t\t\tBits 16: Multi-mode, 62.5m (M6)\n\t\t\tBits 17: Multi-mode, 50 m (M5)\n\t\t\tBits 18: Single Mode (SM)\n\t\t\t- Fibre Channel speed\n\t\t\tBits 19: 800  MB/Sec          \n\t\t\tBits 20: 400  MB/Sec\n\t\t\tBits 21: 200  MB/Sec\n\t\t\tBits 22: 100  MB/Sec\n\t\t\tBits 23: 1200 MB/Sec\n\t\t\tBits 24: 1600 MB/Sec.')
sfpConfigEncodingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("encUnspecified", 0), ("enc8B10B", 1), ("enc4B5B", 2), ("encNrz", 3), ("encManchester", 4), ("encSonet", 5), ("enc64B66B", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEncodingCode.setReference('DWDM MSA Table 2.3.1 and 2.3.6,\n    \t\t\tSFP-8472 Table 3.1 and 3.6')
if mibBuilder.loadTexts: sfpConfigEncodingCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigEncodingCode.setDescription('The encoding value indicates the serial encoding mechanism that is the \n\t\tnominal design target of the particular transceiver. \n\t\tThe value shall be contained in the serial data. \n\t\tThe\tdefined encoding values are:\n\t\t\t00h: Unspecified\n\t\t\t01h: 8B10B\n\t\t\t02h: 4B5B\n\t\t\t03h: NRZ\n\t\t\t04h: Manchester\n\t\t\t05h: SONET Scrambled\n\t\t\t06h -FFh: Reserved.')
sfpConfigNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigNominalBitRate.setReference('DWDM MSA Table 2.3.1.')
if mibBuilder.loadTexts: sfpConfigNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigNominalBitRate.setDescription('The nominal bit rate (BR, nominal) is specified in units of 100 Megabits \n\t\tper second, rounded off to the nearest 100 Megabits per second. \n\t\tThe bit rate includes those bits necessary to encode and delimit the \n\t\tsignal as well as those bits carrying data information. \n\t\tA value of 0 indicates that the bit rate is not specified and must be\n\t\tdetermined from the transceiver technology. \n\t\tThe actual information transfer rate will depend on the encoding of the data, \n\t\tas defined by the encoding value.')
sfpConfigLength9mKm = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength9mKm.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigLength9mKm.setStatus('current')
if mibBuilder.loadTexts: sfpConfigLength9mKm.setDescription('Addition to EEPROM data from original GBIC definition. \n\t\tThis value specifies the link length that is supported by the transceiver while \n\t\toperating in compliance with the applicable standards using single mode fiber. \n\t\tA value of zero means that the transceiver does not support single mode \n\t\tfiber or that the length information must be determined from the transceiver \n\t\ttechnology.')
sfpConfigLength9m100m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength9m100m.setReference('SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigLength9m100m.setStatus('current')
if mibBuilder.loadTexts: sfpConfigLength9m100m.setDescription('This value specifies the link length that is supported by the transceiver \n\t\twhile operating in compliance with the applicable standards using \n\t\tsingle mode fiber. \n\t\tThe value is in units of 100 meters. A value of 255 means that the transceiver \n\t\tsupports a link length greater than 25.4 km.\n\t\tA value of zero means that the transceiver does not support single mode \n\t\tfiber or that the length information must be determined from the transceiver \n\t\ttechnology.')
sfpConfigLength50m10m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength50m10m.setReference('SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigLength50m10m.setStatus('current')
if mibBuilder.loadTexts: sfpConfigLength50m10m.setDescription('This value specifies the link length that is supported by the transceiver \n\t\twhile operating in compliance with the applicable standards using 50 micron \n\t\tmulti-mode fiber. \n\t\tThe value is in units of 10 meters. A value of 255 means that the transceiver \n\t\tsupports a link length greater than 2.54 km.\n\t\tA value of zero means that the transceiver does not support 50 micron \n\t\tmultimode fiber or that the length information must be determined from the \n\t\ttransceiver technology.')
sfpConfigLength62m10m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLength62m10m.setReference('SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigLength62m10m.setStatus('current')
if mibBuilder.loadTexts: sfpConfigLength62m10m.setDescription('This value specifies the link length that is supported by the transceiver \n\t\twhile operating in compliance with the applicable standards using 62.5 micron \n\t\tmulti-mode fiber. \n\t\tThe value is in units of 10 meters. A value of 255 means that the transceiver \n\t\tsupports a link length greater than 2.54 km.\n\t\tA value of zero means that the transceiver does not support 50 micron \n\t\tmultimode fiber or that the length information must be determined from the \n\t\ttransceiver technology.\n\t\tIt is common for the transceiver to support both 50 micron and 62.5 micron \n\t\tfiber.')
sfpConfigLengthCopper1m = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigLengthCopper1m.setReference('SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigLengthCopper1m.setStatus('current')
if mibBuilder.loadTexts: sfpConfigLengthCopper1m.setDescription('This value specifies the link length that is supported by the transceiver \n\t\twhile operating in compliance with the applicable standards using copper cable. \n\t\tThe value is in units of 1 meter. A value of 255 means that the transceiver \n\t\tsupports a link length greater than 254 meters.\n\t\tA value of zero means that the transceiver does not support copper cables \n\t\tor that the length information must be determined from the \n\t\ttransceiver technology.')
sfpConfigMaxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxTemp.setReference('DWDM MSA Table 2.3.1.')
if mibBuilder.loadTexts: sfpConfigMaxTemp.setStatus('current')
if mibBuilder.loadTexts: sfpConfigMaxTemp.setDescription('This field defines the maximum operating case temperature the module is \n\t\trated for. The maximum case temperature is encoded as a signed twos \n\t\tcomplement value in C, yielding a total range of 128C to +127C. \n\t\tThis field should be used even if a standard operating temperature class \n\t\tis indicated in the Extended Indentifier Byte (Byte 1).')
sfpConfigMinTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMinTemp.setReference('DWDM MSA Table 2.3.1.')
if mibBuilder.loadTexts: sfpConfigMinTemp.setStatus('current')
if mibBuilder.loadTexts: sfpConfigMinTemp.setDescription('This field defines the minimum operating case temperature the module is \n\t\trated for. The maximum case temperature is encoded as a signed twos \n\t\tcomplement value in C, yielding a total range of 128C to +127C. \n\t\tThis field should be used even if a standard operating temperature class \n\t\tis indicated in the Extended Indentifier Byte.')
sfpConfigMaxSupplyCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxSupplyCurrent.setReference('DWDM MSA Table 2.3.1.')
if mibBuilder.loadTexts: sfpConfigMaxSupplyCurrent.setStatus('current')
if mibBuilder.loadTexts: sfpConfigMaxSupplyCurrent.setDescription('This field defines the maximum supply current the module will consume \n\t\tunder worst case conditions. The maximum current is the byte value * 4mA.')
sfpConfigChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigChannelSpacing.setReference('DWDM MSA Table 2.3.1 and Table 2.3.7. XFP INF-8077i Section 5.34.')
if mibBuilder.loadTexts: sfpConfigChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: sfpConfigChannelSpacing.setDescription('In the case of SFP: \n\t\tThis bit field value identifies the densest channel spacing \n\t\tthe module is compatible with and the number of channels over which the \n\t\tmodule may be tuned by user command. \n\t\tIf not tunable, the number of channels is entered as 1.\n\t\tThe bit fields are:\n\t\tBits 7..6: Channel Spacing\n\t\t\t00: 200 GHz (DWDM)\n\t\t\t01: 100 GHz (DWDM)\n\t\t\t10:  50 Ghz (DWDM)\n\t\t\t11: Reserved\n\t\tBits 5..0: Number of channels (1  63).\n\t\tIn the case of XFP:\n\t\tThe value of this field is equal to the guaranteed range of laser \n\t\twavelength (+/- value) from Nominal wavelength.\n\t\t(Wavelength Tol. = value/200 in nm)')
sfpConfigVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 22), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorName.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVendorName.setDescription('The vendor name is a 16 character field that contains ASCII characters, \n\t\tleft-aligned and padded on the right with ASCII spaces (20h). \n\t\tThe vendor name shall be the full name of the corporation, \n\t\ta commonly accepted abbreviation of the name of the corporation, \n\t\tthe SCSI company code for the corporation, or the stock exchange code \n\t\tfor the corporation.\n\t\tAt least one of the vendor name or the vendor OUI fields shall contain \n\t\tvalid serial data.')
sfpConfigOptionalWdm = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigOptionalWdm.setReference('DWDM MSA Table 2.3.1 and 2.3.8.')
if mibBuilder.loadTexts: sfpConfigOptionalWdm.setStatus('current')
if mibBuilder.loadTexts: sfpConfigOptionalWdm.setDescription('The bits in the option field shall specify the options implemented \n\t\tin the transceiver. The following bits are defined:\n            Bits 7: Optional Interrupt Pin Functionality Supported (1 if supported)\n            Bits 6..4: Pilot Tone Functionality\n\t\t\t\t000b: No Pilot Tone Functionality\n\t\t\t\t001b: Pilot Tone Detection Only\n\t\t\t\t010b: Pilot Tone Injection Only\n\t\t\t\t011b: Pilot Tone Injection and Detection\n\t\t\t\t100b: Enhanched Pilot Tone Functionality\n\t\t\t\t101b-111b: Reserved\n\t\t\tBits 3: Variable Optical Attenuator Implemented (1 if implemented)\n\t\t\tBits 2: Extended Transmit Power Monitoring\n\t\t\t\t0: Default (SFF-8472) TX Power Monitoring\n\t\t\t\t1: Extended TX Power Monitoring (+18.2 dBm max)\n\t\t\tBits 1: Wavelength Monitor Type in A2 Byte 106-107\n\t\t\t\t0: Monitor is Wavelength\n\t\t\t\t1: Monitor is Laser Temperature\n\t\t\tBits 0: Variable Decision Threshold (1 if implemented)')
sfpConfigVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorOUI.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigVendorOUI.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVendorOUI.setDescription('The vendor organizationally unique identifier field (vendor OUI) \n\t\tis a 3-byte field that contains the IEEE Company Identifier for the \n\t\tvendor. A value of all zero in the 3-byte field indicates that \n\t\tthe Vendor OUI is unspecified.')
sfpConfigVendorPN = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 25), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorPN.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigVendorPN.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVendorPN.setDescription('The vendor part number (vendor PN) is a 16-byte field that contains \n\t\tASCII characters, left-aligned and padded on the right with ASCII \n\t\tspaces (20h), defining the vendor part number or product name. \n\t\tA value of all zero in the 16-byte field indicates that the\n\t\tvendor PN is unspecified.')
sfpConfigVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 26), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorRev.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigVendorRev.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVendorRev.setDescription('The vendor revision number (vendor rev) is a 4-byte field that \n\t\tcontains ASCII characters, left-aligned and padded on the right with \n\t\tASCII spaces (20h), defining the vendors product revision number. \n\t\tA value of all zero in the 4-byte field indicates that\n\t\tthe vendor PN is unspecified.')
sfpConfigWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigWaveLength.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigWaveLength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigWaveLength.setDescription('In the case of DWDM:\n\t\tNominal transmitter output wavelength in units of 0.01nm.\n\t\tAs an example, a wavelength of 1550.51nm would be encoded as: 155051.\n\t\tIn the case of 1310:\n\t\tThe laser wavelength is equal to the the integer value in nm with 00 at\n\t\tthe end.\n\t\tAs an example, a wavelength of 1310 would be encoded as: 131000.')
sfpConfigExtendedOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigExtendedOptions.setReference('DWDM MSA Table 2.3.1 and 2.3.9, SFP-8472 Table 3.1 and 3.7.')
if mibBuilder.loadTexts: sfpConfigExtendedOptions.setStatus('current')
if mibBuilder.loadTexts: sfpConfigExtendedOptions.setDescription('Specify the bitmap options implemented in the transceiver as described in.\n\t\tThe bits definition is:\n\t\t\t5 RATE_SELECT is implemented\n\t\t\t\tNOTE: Lack of implemention does not indicate lack of\n\t\t\t\tsimultaneous compliance with multiple standard rates.\n\t\t\t\tCompliance with particular standards should be determined\n\t\t\t\tfrom Transceiver Code.\n\t\t\t4 TX_DISABLE is implemented and disables the serial output.\n\t\t\t3 TX_FAULT signal implemented. (See SFP MSA)\n\t\t\t2 Loss of Signal implemented, signal inverted from standard\n\t\t\t\tdefinition in SFP MSA.\n\t\t\t\tNOTE: This is not standard SFP/GBIC behavior and should\n\t\t\t\tbe avoided, since non-interoperable behavior results.\n\t\t\t1 Loss of Signal implemented, signal as defined in SFP MSA.')
sfpConfigMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMaxBitRate.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigMaxBitRate.setDescription('The upper bit rate limit at which the transceiver will still meet its \n\t\tspecifications (BR, max) is specified in units of 1% above the nominal \n\t\tbit rate. \n\t\tA value of zero indicates that this field is not specified.')
sfpConfigMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigMinBitRate.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigMinBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigMinBitRate.setDescription('The lower bit rate limit at which the transceiver will still meet its \n\t\tspecifications (BR, min) is specified in units of 1% below the nominal \n\t\tbit rate. \n\t\tA value of zero indicates that this field is not specified.')
sfpConfigVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 31), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigVendorSN.setReference('DWDM MSA Table 2.3.1, SFP-8472 Table 3.1.')
if mibBuilder.loadTexts: sfpConfigVendorSN.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVendorSN.setDescription('The vendor serial number (vendor SN) is a 16 character field that \n\t\tcontains ASCII characters, left-aligned and padded on the right with \n\t\tASCII spaces (20h), defining thevendors serial number for the transceiver. \n\t\tA value of all zero in the 16-byte field indicates that the vendor PN is \n\t\tunspecified.')
sfpConfigDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 32), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigDateCode.setReference('DWDM MSA Table 2.3.1 and 2.3.10, SFP-8472 Table 3.1 and 3.8.')
if mibBuilder.loadTexts: sfpConfigDateCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigDateCode.setDescription('The date code is an 6-byte field that contains the vendors date \n\t\tcode in ASCII characters. The date code is mandatory. \n\t\tThe date code shall be in the format: <yy><mm><dd>.')
sfpConfigDiagnosticMonitoring = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigDiagnosticMonitoring.setReference('DWDM MSA Table 2.3.1 and 2.3.11, SFP-8472 Table 3.1 and 3.9.')
if mibBuilder.loadTexts: sfpConfigDiagnosticMonitoring.setStatus('current')
if mibBuilder.loadTexts: sfpConfigDiagnosticMonitoring.setDescription('A field with 8 single bit indicators which describe the\n\t\toptional digital diagnostic features implemented in the transceiver. \n\t\tSince transceivers will not necessarily implement all optional \n\t\tfeatures described in this document, the Enhanced Options bit field \n\t\tallows the host system to determine which functions are\n\t\tavailable over the 2 wire serial bus.\n\t\tThe bits assignment is:\n\t\t\t7 Reserved for legacy diagnostic implementations. \n\t\t\t\tMust be 0 for compilance with this document.\n\t\t\t6 Digital diagnostic monitoring implemented (described in this document). \n\t\t\t\tMust be 1 for compliance with this document.\n\t\t\t5 Internally Calibrated\n\t\t\t4 Externally Calibrated\n\t\t\t3 Received power measurement type 0 = OMA, 1 = Average Power\n\t\t\t2 Address change required.')
sfpConfigEnhanceOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigEnhanceOptions.setReference('DWDM MSA Table 2.3.1 and Table 2.3.12, SFP-8472 Table 3.1 and 3.10.')
if mibBuilder.loadTexts: sfpConfigEnhanceOptions.setStatus('current')
if mibBuilder.loadTexts: sfpConfigEnhanceOptions.setDescription('A field with 6 single bit indicators which describe the\n\t\toptional digital diagnostic features implemented in the transceiver. \n\t\tSince transceivers will not necessarily implement all optional features \n\t\tdescribed in this document, the Enhanced Options bit field allows the \n\t\thost system to determine which functions are available over the 2 wire \n\t\tserial bus. A 1 indicates that the particular function is\n\t\timplemented in the transceiver..\n\t\tThe bits assignment is:\n\t\t\tBits 7: Optional Alarm/warning flags implemented for all monitored quantities\n\t\t\tBits 6: Optional Soft TX_DISABLE control and monitoring implemented\n\t\t\tBits 5: Optional Soft TX_FAULT monitoring implemented\n\t\t\tBits 4: Optional Soft RX_LOS monitoring implemented\n\t\t\tBits 3: Option not enabled in DWDM.\n\t\t\t\t\t8472- Optional Soft RATE_SELECT control and monitoring implemented\n\t\t\tBits 2: Option not enabled in DWDM.\n\t\t\t\t\t8472- Optional Application Select control implemented per SFF-8079')
sfpConfig8472Compliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noDiag", 0), ("rev93", 1), ("rev94", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig8472Compliance.setReference('DWDM MSA Table 2.3.1 and 2.3.14, SFP-8472 Table 3.1 and 3.12.')
if mibBuilder.loadTexts: sfpConfig8472Compliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfig8472Compliance.setDescription('An unsigned integer that indicates which feature set(s) are\n\t\timplemented in the transceiver.\n\t\tThe defined values are:\n\t\t\t0 - Digital diagnostic functionality not included or undefined.\n\t\t\t1 - Includes functionality described in Rev 9.3 SFF-8472.\n\t\t\t2 - Includes functionality described in Rev 9.4 SFF-8472.')
sfpConfigTunableWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigTunableWaveLength.setReference('DWDM MSA Table 2.3.27.')
if mibBuilder.loadTexts: sfpConfigTunableWaveLength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigTunableWaveLength.setDescription('Wavelength Tuning Control.\n\t\tThe availability of this function is indicated in the object sfpConfigChannelSpacing, \n\t\twhere number of channels greater than 1 indicates tunability. \n\t\tThe wavelength is set to the channel number written to this byte. \n\t\tFor a value of 0, channel 1 is selected. For values greater than the maximum channel number, \n\t\tthe maximum channel number is selected.\n\t\tThe object value is defaults to 1 on power-up.')
sfpConfigVoaControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigVoaControl.setReference('DWDM MSA Table 2.3.28.')
if mibBuilder.loadTexts: sfpConfigVoaControl.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVoaControl.setDescription('Variable Optical Attenuator Control.\n\t\tUsed to control the wavelength in tunable modules.\n\t\tThe availability of this function is indicated in Bit 3 of sfpConfigOptionalWdm.\n\t\tThe amount of attenuation set is given by the Byte value * 0.1 dB,\n\t\tand thus ranges from 0 to 25.6 dB. \n\t\tThe object value defaults to 0 on power-up.')
sfpConfigVdtControl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigVdtControl.setReference('DWDM MSA Table 2.3.29.')
if mibBuilder.loadTexts: sfpConfigVdtControl.setStatus('current')
if mibBuilder.loadTexts: sfpConfigVdtControl.setDescription('Variable Decision Threshold Control.\n\t\tUsed to control the variable decision threshold function.\n\t\tThe availability of this function is indicated in Bit 0 of sfpConfigOptionalWdm.\n\t\tThe object value is a 2s complement 7 bit value (-128 - +127).\n\t\tThe decision threshold set is given by:\n\t\t\tDecision Threshold = 50% + [VAL/256]*100%\n\t\tThe object value defaults to 0 on power-up corresponding to 50%.')
sfpConfigPilotToneModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigPilotToneModulation.setReference('DWDM MSA Table 2.3.30.')
if mibBuilder.loadTexts: sfpConfigPilotToneModulation.setStatus('current')
if mibBuilder.loadTexts: sfpConfigPilotToneModulation.setDescription('Pilot Tone Injection Modulation Depth.\n\t\tWhen basic MSA pilot tone injection functionality is implemented \n\t\t(as indicated in the Serial ID fields by bits 4-6 of of sfpConfigOptionalWdm) \n\t\tTjis object may be used by the vendor to indicate modulation \n\t\tdepth per unit control swing on pin 7.\n\t\tThe modulation depth per control swing is given by:\n\t\t\tModulation Depth = 0.2% * VAL / Vpp(pin7)\n\t\tA value of 0 indicates that the modulation depth per input swing \n\t\tis within the range')
sfpConfigCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCleiCode.setReference('GR-383-CORE')
if mibBuilder.loadTexts: sfpConfigCleiCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCleiCode.setDescription('The COMMON LANGUAGE Equipment Code.\n            The CLEI code contains an intelligent \n            ten-character code that identifies the \n            telecommunications equipment.\n            The Clei Code resides in the SEEP of the SFP.')
sfpConfigXfpExtXcvrId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpExtXcvrId.setReference('XFP INF-8077i Table 47.')
if mibBuilder.loadTexts: sfpConfigXfpExtXcvrId.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpExtXcvrId.setDescription('This field is used to distinguish between different types of DWDM transceivers and\n\t\tdifferent power and environmental classes. The defined identifier values are:\n\t\t\tBits 7..6: \n\t\t\t\t00: Power Level 1 Module (1.5 W max. power dissipation.)\n\t\t\t\t01: Power Level 2 Module (2.5W Max)\n\t\t\t\t10: Power Level 3 Module (3.5W max. power dissipation.)\n\t\t\t\t11: Power Level 4 Module (>3.5W max. power dissipation.)\n\t\t\tBit 5: CDR exist\n\t\t\t\t0: Module with CDR function\n\t\t\t\t1: Non-CDR version of XFP\n\t\t\tBits 5: TX ref clock is required\n\t\t\t\t0: TX Ref Clock Input Required\n\t\t\t\t1: TX Ref Clock Input Not Required\n\t\t\tBits 3: CLEI code is present\n\t\t\t\t0: No CLEI code present in Table 02h\n\t\t\t\t1: CLEI code present in Table 02h\n\t\t\tBits 2..0: Resesrved')
sfpConfigXfpEncodingCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpEncodingCode.setReference('XFP INF-8077i Table 50.')
if mibBuilder.loadTexts: sfpConfigXfpEncodingCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpEncodingCode.setDescription('The encoding value indicates the serial encoding mechanism that is the \n\t\tnominal design target of the particular transceiver. \n\t\tThe value shall be contained in the serial data. \n\t\tThe\tdefined encoding values are:\n\t\t\tBit 7: 64B/66B\n\t\t\tBit 6: 8B/10B\n\t\t\tBit 5: SONET scrambled\n\t\t\tBit 4: NRZ\n\t\t\tBit 3: RZ\n\t\t\tBits 2-0: Reserved.')
sfpConfigXfpMinBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpMinBitRate.setReference('XFP INF-8077i Section 5.20.')
if mibBuilder.loadTexts: sfpConfigXfpMinBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpMinBitRate.setDescription('The minimum bit rate (BR, minimum) is specified in units of 100 Megabits\n\t\tper second, rounded off to the nearest 100 Megabits per second. The bit\n\t\trate includes those bits necessary to encode and delimit the signal as well\n\t\tas those bits carrying data information. A value of 0 indicates that the minimum\n\t\tbit rate is not specified andmust be determined from the transceiver\n\t\ttechnology. The actual information transfer rate will depend on the encoding\n\t\tof the data, as defined by the encoding value. Specific CDR rate\n\t\tsupport is indicated in Byte 164.')
sfpConfigXfpMaxBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpMaxBitRate.setReference('XFP INF-8077i Section 5.21.')
if mibBuilder.loadTexts: sfpConfigXfpMaxBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpMaxBitRate.setDescription('The maximum bit rate (BR, maximum) is specified in units of 100 Megabits\n\t\tper second, rounded off to the nearest 100 Megabits per second. The\n\t\tbit rate includes those bits necessary to encode and delimit the signal as\n\t\twell as those bits carrying data information. A value of 0 indicates that the\n\t\tmaximum bit rate is not specified and must be determined from the transceiver\n\t\ttechnology. The actual information transfer rate will depend on the\n\t\tencoding of the data, as defined by the encoding value. Specific CDR rate\n\t\tsupport is indicated in Byte 164.')
sfpConfig10GSonetCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GSonetCompliance.setReference('XFP MSA Table 49.')
if mibBuilder.loadTexts: sfpConfig10GSonetCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfig10GSonetCompliance.setDescription('The following bit significant indicators define the SONET interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits 0-1: Reserved\n\t\t\tBits 2: I-64.5 - 1550 nm, 25 km, SM, IO\n\t\t\tBits 3: I-64.3 - 1550 nm, 25 km, SM, IO\n\t\t\tBits 4: I-64.2 - 1550 nm, 25 km, SM, IO\n\t\t\tBits 5: I-64.2r - 1550 nm, 2 km, SM, VSR\n\t\t\tBits 6: I-64.1/VSR2000-2R1/P1I1-2D1 - 1310 nm, 2 km, SM, VSR\n\t\t\tBits 7: I-64.1r/VSR600-2R1 - 1310 nm, 0.6 km, Laser-MM Fibre-SM, VSR\n\t\t\tBits 8: Reserved\n\t\t\tBits 9: S-64.5b - 1550 nm, 40 km, SH\n\t\t\tBits 10: S-64.5a - 1550 nm, 40 km, SH\n\t\t\tBits 11: S-64.3b\n\t\t\tBits 12: S-64.3a - 1550 nm, 40 km, SM, SH\n\t\t\tBits 13: S-64.2b - 1550 nm, 40 km, SM, SH\n\t\t\tBits 14: S-64.2a - 1550 nm, 40 km, SM, SH\n\t\t\tBits 15: S-64.1 - 1310 nm, 20 km, IO\n\t\t\tBits 16-17: Reserved\n\t\t\tBits 18: G.959.1 P1L1-2D2 - 1550 nm, SM, 80 km, LH\n\t\t\tBits 19: L-64.3 - 1550 nm, 80 km, LH\n\t\t\tBits 20: L-64.2c - 1550 nm, 80 km, LH\n\t\t\tBits 21: L-64.2b - 1550 nm, 80 km, LH\n\t\t\tBits 22: L-64.2a - 1550 nm, 80 km, LH\n\t\t\tBits 23: L-64.1 - 1310 nm, SM, 40 km, SH\n\t\t\tBits 24-28: Reserved\n\t\t\tBits 29: V-64.3 - 1550 nm, SM, 120 km, VL \n\t\t\tBits 30: V-64.2b - 1550 nm, SM, 120 km, VL\n\t\t\tBits 31: V-64.2a - 1550 nm, SM, 120 km, VL.')
sfpConfig10GbeCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GbeCompliance.setReference('XFP MSA Table 49.')
if mibBuilder.loadTexts: sfpConfig10GbeCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfig10GbeCompliance.setDescription('The following bit significant indicators define the 10GbE interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\tBits  0: Reserved\n\t\t\tBits  1: 10GBASE-EW - WAN, 1550 nm, SM, ER\n\t\t\tBits  2: 10GBASE-LW - WAN, 1310 nm, SM, LR\n\t\t\tBits  3: 10GBASE-SW - WAN, 850 nm, MM, SR\n\t\t\tBits  4: 10GBASE-LRM (Long reach Multimode) - LAN, 1310 nm, MM, SR fiber, 0.2 km, SR\n\t\t\tBits  5: 10GBASE-ER (extended range) -  LAN, 1550 nm, SM, 40 km, ER\n\t\t\tBits  6: 10GBASE-LR (Long Range) - LAN, 1310 nm, SM, 10 km, LR\n\t\t\tBits  7: 10GBASE-SR - LAN, 850 nm, MM, 0.3 km, SR.')
sfpConfig10GFcCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfig10GFcCompliance.setReference('XFP MSA Table 49.')
if mibBuilder.loadTexts: sfpConfig10GFcCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpConfig10GFcCompliance.setDescription('The following bit significant indicators define the 10GFC interfaces \n\t\tthat are supported by the transceiver. The defined identifier values are:\n\t\t\t- Fibre Channel link length:\n\t\t\tBits  0-3: Reserved\n\t\t\tBits  4: Intermediate Reach 1300 nm FP - 1310 nm, SM, IR\n\t\t\tBits  5: Extended Reach 1550 nm - 1550 nm, SM, ER\n\t\t\tBits  6: 1200-SM-LL-L - 1310 nm, SM, LR\n\t\t\tBits  7: 1200-MX-SN-I - 850 nm, MM, IR.')
sfpConfigXfpDeviceTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpDeviceTech.setReference('XFP MSA Table 51 and Table 52.')
if mibBuilder.loadTexts: sfpConfigXfpDeviceTech.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDeviceTech.setDescription('The following bit significant indicators define the XFP device technology:\n\t\t\tBits  0: 0-Transmitter not Tunable 1-Transmitter Tunable\n\t\t\tBits  1: Detector Type: 0-PIN detector 1-APD detector\n\t\t\tBits  2: Cooled transmitter\n\t\t\tBits  3: Wavelength control: 0-No wavelength control 1-Active wavelength control\n\t\t\tBits  4-7: Transmitter technology:\n\t\t\t\t0000b 850 nm VCSEL\n\t\t\t\t0001b 1310 nm VCSEL\n\t\t\t\t0010b 1550 nm VCSEL\n\t\t\t\t0011b 1310 nm FP\n\t\t\t\t0100b 1310 nm DFB\n\t\t\t\t0101b 1550 nm DFB\n\t\t\t\t0110b 1310 nm EML\n\t\t\t\t0111b 1550 nm EML\n\t\t\t\t1000b Copper or others   \n\t\t\t\t1001b 1550 nm tunable\n\t\t\t\t1111b-1001b Reserved.')
sfpConfigXfpTuningSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpTuningSupported.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpTuningSupported.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpTuningSupported.setDescription('Indicate the XFP tuning support:\n\t\t Bit1: wavelenght  (Tunable DWDM - selection in 50 pm steps)\n\t\t Bit2: frequency   (Tunable DWDM - selection by channel number)\n\t\t For exmaple the value 0 means no support, and 3 means both.')
sfpConfigXfpDesiredChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 50), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredChannel.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpDesiredChannel.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDesiredChannel.setDescription('User input of channel number, which is an integer 1 to N (N=Number of Channels).')
sfpConfigXfpDesiredWl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredWl.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpDesiredWl.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDesiredWl.setDescription('User input of Wavelength setpoint (in units of 50 picometers).')
sfpConfigXfpWlError = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpWlError.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpWlError.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpWlError.setDescription('Monitor of Current Wavelength Error(in units of 5 picometers).')
sfpConfigXfpDesiredFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 53), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDesiredFreq.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpDesiredFreq.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDesiredFreq.setDescription('User input of channel number, which is an integer to N (N=Number of Channels).')
sfpConfigXfpFreqError = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpFreqError.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpFreqError.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpFreqError.setDescription('Frequency error reported in 16 bit signed integer with LSB=0.1 GHz.')
sfpConfigXfpDitherSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpDitherSupported.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpDitherSupported.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDitherSupported.setDescription('Tx Dither Supported.')
sfpConfigXfpDitherAdmin = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpDitherAdmin.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpDitherAdmin.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpDitherAdmin.setDescription('Enable/Disable the dithering function.')
sfpConfigXfpCapFreqFirstThz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirstThz.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirstThz.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirstThz.setDescription('Lasers First Frequency (THz) capability.')
sfpConfigXfpCapFreqFirst10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirst10Ghz.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirst10Ghz.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqFirst10Ghz.setDescription('Lasers First Frequency (GHz*10) capability.\n\t\t This value should be added to sfpConfigXfpCapFreqFirstThz.')
sfpConfigXfpCapFreqLastThz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLastThz.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLastThz.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLastThz.setDescription('Lasers Last Frequency (THz) capability.')
sfpConfigXfpCapFreqLast10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLast10Ghz.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLast10Ghz.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCapFreqLast10Ghz.setDescription('Lasers Last Frequency (GHz*10) capability.\n\t\t This value should be added to sfpConfigXfpCapFreqLastThz.')
sfpConfigXfpCapMaxSpacing10Ghz = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCapMaxSpacing10Ghz.setReference('SFP-8477.')
if mibBuilder.loadTexts: sfpConfigXfpCapMaxSpacing10Ghz.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCapMaxSpacing10Ghz.setDescription('Lasers maximum supported grid spacing (GHz*10) capability.')
sfpConfigXfpCalibrationSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigXfpCalibrationSupported.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCalibrationSupported.setDescription('Calibarion Supported.')
sfpConfigXfpCalibrationEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 63), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigXfpCalibrationEnabled.setStatus('current')
if mibBuilder.loadTexts: sfpConfigXfpCalibrationEnabled.setDescription('Enable/Disable the calibration process.\n\t\t Changing the value to Enable when a signal exist invokes an immidiate calibration process.\n\t\t Changing the value to Disable returns the calibration values to defaults.')
sfpConfigCfpExtId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpExtId.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpExtId.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpExtId.setDescription('Extended Identifier bit fields:\n\t\tBits 7-6 - Power Class:\n\t\t\t00b: Power Class 1 Module (? 8 W max), \n\t\t\t01b: Power Class 2 Module (?16 W max),  \n\t\t\t10b: Power Class 3 Module (? 24 W max), \n\t\t\t11b: Power Class 4 Module (? 32 W max).\n\t\tBits 5-4 Lane Ratio:\n\t\t\t00b: Network lane : Host lane = 1 : n (Mux type),  \n\t\t\t01b: Network lane : Host lane = n : m (Gear Box type), \n\t\t\t10b: Network lane : Host lane = n : n (Parallel type), \n\t\t\t11b: Reserved\n\t\tBits 3-1 WDM Type:\n\t\t\t000b: Non-WDM,  \n\t\t\t001b: CWDM,  \n\t\t\t010b: LANWDM,  \n\t\t\t011b: DWDM on 200G-grid,  \n\t\t\t100b: DWDM on 100G-grid, \n\t\t\t101b: DWDM on 50G-grid,  \n\t\t\t110b: DWDM on 25G-grid,  \n\t\t\t111b: Other type WDM\n\t\tBit 0 CLEI Presence:\n\t\t\t0: No CLEI code present,  \n\t\t\t1: CLEI code present')
sfpConfigCfpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpConnectorType.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpConnectorType.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpConnectorType.setDescription('Connector Type Code:\n\t\t00h: Undefined, \n\t\t01h : SC,  \n\t\t07h : LC,  \n\t\t08h : MT-RJ,   \n\t\t09h : MPO, \n\t\tOther Codes : Reserved')
sfpConfigCfpEthernetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpEthernetCode.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpEthernetCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpEthernetCode.setDescription('Ethernet Application Code.  \n\t\t00h: Undefined type, \n\t\t01h: 100GE SMF 10km, 100GE-LR4, \n\t\t02h: 100GE SMF 40km, 100GE-ER4, \n\t\t03h: 100GE MMF 100m OM3, 100GE-SR10, \n\t\t04h: For future use,  \n\t\t05h: 40GE SMF 10km, 40GE-LR4, \n\t\t07h: 40GE MMF 100m OM3, 40GE-SR4, \n     \t\tFor future use: \n     \t\t100G G.959.1 OTU4 \n     \t\t40G G.693 SDH \n     \t\t40G G.693 OTU3 \n     \t\t40G G.695 SDH \n     \t\t40G G.695 OTU3, \n\t\t0Dh: 40GE-CR4 Copper \n\t\t0Eh: 100GE-CR10 Copper,  \n\t\t0Fh: 40G BASE-FR, \n\t\t10h~FFh: Reserved.')
sfpConfigCfpFcCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpFcCode.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpFcCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpFcCode.setDescription('Fiber Channel Application Code: Undefined')
sfpConfigCfpCopperCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpCopperCode.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpCopperCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpCopperCode.setDescription('Copper Link Application Code: Undefined')
sfpConfigCfpSonetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSonetCode.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpSonetCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpSonetCode.setDescription('SONET/SDH Application Code:\n\t\t00h: Undefined type, \n\t\t01h: VSR2000-3R2, \n\t\t02h: VSR2000-3R3, \n\t\t03h: VSR2000-3R5, \n\t\t04h ~ 0FFh: Reserved')
sfpConfigCfpOtnCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpOtnCode.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpOtnCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpOtnCode.setDescription('OTN Application Code:\n\t\t0h: Undefined type, \n\t\t01h: VSR2000-3R2F, \n\t\t02h: VSR2000-3R3F, \n\t\t03h: VSR2000-3R5F, \n\t\t04h: VSR2000-3L2F,\n\t\t05h: VSR2000-3L3F, \n\t\t06h: VSR2000-3L5F, \n\t\t07h: C4S1-2D1 (OTL3.4), \n\t\t08h: 4I1-9D1F (OTL4.4), \n\t\t09h ~ 0FFh: Reserved')
sfpConfigCfpSupportedRates = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSupportedRates.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpSupportedRates.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpSupportedRates.setDescription('Additional Capable Rates Supported Bitmap:\n\t\tBits 7-5 - Reserved\n\t\tBit 4 - 111.8 Gbps\n\t\tBit 3 - 103.125 Gbps\n\t\tBit 2 - 41.25 Gbps\n\t\tBit 1 - 43 Gbps\n\t\tBit 0 - 39.8 Gbps')
sfpConfigCfpSupportedLanes = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpSupportedLanes.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpSupportedLanes.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpSupportedLanes.setDescription('Number of Lanes Supported:\n\t\tBits 7-4 - Number of Network Lanes \n\t\t\tThe value of 0 represents 16 network lanes supported.   \n\t\t\tThe values of 1 through 15 represent the actual number of network lanes supported\n\t\tBits 3-0 - Number of Host Lanes \n\t\t\tThe value of 0 represents 16 network lanes supported.   \n\t\t\tThe values of 1 through 15 represent the actual number of network lanes supported')
sfpConfigCfpMediaProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMediaProperties.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMediaProperties.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMediaProperties.setDescription('Media Properties bit fields:\n\t\tBits 7 - 6 Media Type:\n\t\t\t00b: SMF ,  \n\t\t\t01b: MMF (OM3),  \n\t\t\t10b: Reserved,  \n\t\t\t11b: Copper\n\t\tBit 5 - Directionality:\n\t\t\t0: Normal,  \n\t\t\t1: BiDi\n\t\tBit 4 Optical Multiplexing and De-multiplexing:\n\t\t\t0: Without optical MUX/DEMUX, \n\t\t\t1: With optical MUX/DEMUX\n\t\tBits 3 - 0 ctive Fiber per Connector:\t\n\t\tA 4-bit unsigned number representing number of active fibers for TX and RX per connector: \n\t\t\t0: 16 TX Lanes and 16 RX Lanes, \n\t\t\t1: 1 TX Lane and 1 RX Lane, \n\t\t\t4: 4 TX Lanes and 4 RX Lanes, \n\t\t\t10: 10 TX Lanes and 10 RX Lanes, \n\t\t\t12: 12 TX Lanes and 12 RX Lanes')
sfpConfigCfpMaxNetworkLaneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxNetworkLaneRate.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxNetworkLaneRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxNetworkLaneRate.setDescription('Maximum Network Lane Bit Rate: 8-bit value x 0.2 Gbps')
sfpConfigCfpMaxHostLaneRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxHostLaneRate.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxHostLaneRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxHostLaneRate.setDescription('Maximum Host Lane Bit Rate: 8-bit value x 0.2 Gbps')
sfpConfigCfpMaxSmFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxSmFiberLength.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxSmFiberLength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxSmFiberLength.setDescription('Maximum Single Mode Optical Fiber Length: \n\t\t8-bit value x 1 km for single mode fiber length')
sfpConfigCfpMaxMmFiberLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxMmFiberLength.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxMmFiberLength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxMmFiberLength.setDescription('Maximum Multi-Mode Optical Fiber Length:\n\t\t8-bit value x 10 m for multi-mode fiber length')
sfpConfigCfpMaxCopperCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxCopperCableLength.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxCopperCableLength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxCopperCableLength.setDescription('Maximum Copper Cable Length:\n\t\t8-bit value x 1 m for copper cable length')
sfpConfigCfpMinWavelenPerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMinWavelenPerActive.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMinWavelenPerActive.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMinWavelenPerActive.setDescription('Minimum Wavelength per Active Fiber:\n\t\t16-bit unsigned value x 0.025 nm. \n\t\t(MSB is at 8012h, LSB is at 8013h)')
sfpConfigCfpMaxWavelenPerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxWavelenPerActive.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxWavelenPerActive.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxWavelenPerActive.setDescription('Maximum Wavelength per Active Fiber:\n\t\t16-bit unsigned value x 0.025 nm. \n\t\t(MSB is at 8014h, LSB is at 8015h)')
sfpConfigCfpMaxLenOpticalWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCfpMaxLenOpticalWidth.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpMaxLenOpticalWidth.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpMaxLenOpticalWidth.setDescription('Maximum per Lane Optical Width:\n\t\tGuaranteed range of laser wavelength. \n\t\t16-bit unsigned value x 1 pm. \n\t\t(MSB is at 8016h, LSB is at 8017h)')
sfpConfigCfpSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 88), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCfpSpacing.setReference('CFP MSA 1.4')
if mibBuilder.loadTexts: sfpConfigCfpSpacing.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCfpSpacing.setDescription('The spacing between two lanes:\n\t\t0- unknown spacing\n\t\t1 - 100G spacing\n\t\t2 - 50G spacing\n\t\t3- 25G spacing')
sfpConfigQsfppEthernetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigQsfppEthernetCode.setReference('QSFP+ SFF-8436')
if mibBuilder.loadTexts: sfpConfigQsfppEthernetCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigQsfppEthernetCode.setDescription('Maximum per Lane Optical Width:\n\t\tGuaranteed range of laser wavelength. \n\t\t16-bit unsigned value x 1 pm. \n\t\t(MSB is at 8016h, LSB is at 8017h)')
sfpConfigQsfppSonetCode = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 101), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigQsfppSonetCode.setReference('QSFP+ SFF-8436')
if mibBuilder.loadTexts: sfpConfigQsfppSonetCode.setStatus('current')
if mibBuilder.loadTexts: sfpConfigQsfppSonetCode.setDescription('The spacing between two lanes:\n\t\t0- unknown spacing\n\t\t1 - 100G spacing\n\t\t2 - 50G spacing\n\t\t3- 25G spacing')
sfpConfigCxpExtId = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 110), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpExtId.setReference('')
if mibBuilder.loadTexts: sfpConfigCxpExtId.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCxpExtId.setDescription('Extended Identifier (Byte 129):\n\t\tBits 7-5 - Power Class:\n\t\t\t000: 0.25W max - Class 0   \n\t\t\t001: 1.0W max - Class 1 \n\t\t\t010: 1.5W max - Class 2     \n\t\t\t011: 2.5W max - Class 3 \n\t\t\t100: 4.0W max - Class 4     \n\t\t\t101: 6.0W max - Class 5\n\t\t\t110: >6.0W  - Class 6           \n\t\t\t111: Reserved\n\t\tBits 4 Tx CDR Presence:\n\t\t\t1: Tx CDR provided \n\t\t\t0: Otherwise \n\t\tBits 3 Rx CDR Presence:\n\t\t\t1: Rx CDR provided;\n\t\t\t0: Otherwise')
sfpConfigCxpConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 111), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpConnectorType.setReference('')
if mibBuilder.loadTexts: sfpConfigCxpConnectorType.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCxpConnectorType.setDescription('Connector Type Code (Byte 130):\n\t\t30h: Passive Copper Cable Assembly \n\t\t31h: Active Copper Cable Assembly (ref. Byte 147) \n\t\t32h: Active Optical Cable Assembly \n\t\t33h: Optical Transceiver w/ optical connector')
sfpConfigCxpMaxSupportedRate = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 112), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpMaxSupportedRate.setReference('')
if mibBuilder.loadTexts: sfpConfigCxpMaxSupportedRate.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCxpMaxSupportedRate.setDescription('Max per-channel bit rate (Byte 134):\n\t\tMax signal rate = binary value x 100 Mb/s')
sfpConfigCxpNominalWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 113), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpNominalWavelength.setReference('')
if mibBuilder.loadTexts: sfpConfigCxpNominalWavelength.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCxpNominalWavelength.setDescription('Wavelength/Attenuation (Bytes 135-136):\n\t\tOptical: Nominal Laser Wavelength  --  \n\t\t\tWavelength in nm = value / 20): e.g. 42h 04h = 16,900,  16,900/20 = 845 nm\n\t\tCopper: Nominal  attenuation of cable  either to the other end (passive) or to equalizer (active)\n\t\tByte 135: \n\t\t\tAttenuation at 2.5 GHz in dB - \n\t\t\t00h=no info\n\t\tByte 136: \n\t\t\tAttenuation at 5 GHz in dB - \n\t\t\t00h=no info')
sfpConfigCxpDeviceTech = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 114), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCxpDeviceTech.setReference('')
if mibBuilder.loadTexts: sfpConfigCxpDeviceTech.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCxpDeviceTech.setDescription('Device Technology (Byte 147):\n\t\tBits 7-4 (Device Technology):\n\t\t\t0000: 850 nm VCSEL        \n\t\t\t0001:1310 nm VCSEL \n\t\t\t0010:1550 nm VCSEL       \n\t\t\t0011: 1310 nm FP \n\t\t\t0100:1310 nm DFB            \n\t\t\t0101:1550 nm DFB \n\t\t\t0110: 1310 nm EML           \n\t\t\t0111: 1550 nm EML \n\t\t\t1000: Copper or others      \n\t\t\t11001: 1490 nm DFB \n\t\t\t1010: Copper cable un-equalized \n\t\t\t1011: Copper cable passive equalized \n\t\t\t1100: Copper cable near & far end active equalizers \n\t\t\t1101: Copper cable, far end active equalizer \n\t\t\t1110: copper cable, near end active equalizer \n\t\t\t1111: Reserved \n\t\tBit 3 (Wavelength Control):\n\t\t\t0: No  control  \n\t\t\t1: Active wavelength control\n\t\tBit 2 (Transmitter cooling):\n\t\t\t0: Uncooled transmitter \n\t\t\t1: Cooled transmitter\n\t\tBit 1 (Optical Detector):\n\t\t\t0: P-I-N Detector \n\t\t\t1: APD detector\n\t\tBit 0 (Optical Tunability):\n\t\t\t0: Transmitter not tunable \n\t\t\t1:Transmitter tunable')
sfpConfigCohRxDesiredChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 115), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredChannel.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredChannel.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredChannel.setDescription('User input of RX channel number, which is an integer 1 to N (N=Number of Channels).')
sfpConfigCohRxDesiredWl = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 116), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredWl.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredWl.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredWl.setDescription('User input of RX Wavelength setpoint (in units of 50 picometers).')
sfpConfigCohRxDesiredFreq = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 117), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigCohRxDesiredFreq.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredFreq.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohRxDesiredFreq.setDescription('User input of channel number, which is an integer to N (N=Number of Channels).')
sfpConfigCohCurrentCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohCurrentCD.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohCurrentCD.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohCurrentCD.setDescription('Current Chromatic Dispersion counter. Units are in ps/nm')
sfpConfigCohCurrentOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohCurrentOSNR.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohCurrentOSNR.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohCurrentOSNR.setDescription('Current SNR. Units are in 0.1dB')
sfpConfigCohAverageOSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohAverageOSNR.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohAverageOSNR.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohAverageOSNR.setDescription('Average SNR over PM interval. Units are in 0.1dB')
sfpConfigCohMaxCD = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpConfigCohMaxCD.setReference('CFP MSA')
if mibBuilder.loadTexts: sfpConfigCohMaxCD.setStatus('current')
if mibBuilder.loadTexts: sfpConfigCohMaxCD.setDescription('Maximal Chromatic Dispersion counter. Units are in ps/nm')
sfpConfigNyquist = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 1, 1, 1, 122), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpConfigNyquist.setStatus('current')
if mibBuilder.loadTexts: sfpConfigNyquist.setDescription('Nyquist - True (ON) or False (OFF). Default is OFF')
sfpDiagTable = MibTable((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1), )
if mibBuilder.loadTexts: sfpDiagTable.setStatus('current')
if mibBuilder.loadTexts: sfpDiagTable.setDescription('The SFP diagnostic table. \n\t\tThe table defines the status and control of the alarms and warnings\n\t\tof the SFP-1310 and the DWDM SFP-15xy modules.')
sfpDiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1), ).setIndexNames((0, "SL-SFP-MIB", "sfpDiagInterface"))
if mibBuilder.loadTexts: sfpDiagEntry.setStatus('current')
if mibBuilder.loadTexts: sfpDiagEntry.setDescription('An entry in the SFP diagnostic table.\n\t\tThe index to this table is the same as the ifIndex of the SFP.\n\t\tThe SFP Diagnostic Table contain and entry for each\n\t\tSFP module.')
sfpDiagInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagInterface.setStatus('current')
if mibBuilder.loadTexts: sfpDiagInterface.setDescription('The Interface Index of the SFP (type=196).')
sfpDiagHighTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTempAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTempAlmThreshold.setDescription('The threshold value for high temperature alarm. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagLowTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTempAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTempAlmThreshold.setDescription('The threshold value for low temperature alarm. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius..')
sfpDiagHighTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTempWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTempWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTempWrnThreshold.setDescription('The threshold value for high temperature warning. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagLowTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTempWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTempWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTempWrnThreshold.setDescription('The threshold value for low temperature warning. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius..')
sfpDiagHighVoltAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighVoltAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighVoltAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighVoltAlmThreshold.setDescription('The threshold value for high voltage alarm. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 100 uVolt,\n\t\tyielding a total range of +6.55 Volts.')
sfpDiagLowVoltAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowVoltAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowVoltAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowVoltAlmThreshold.setDescription('The threshold value for low voltage alarm. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 100 uVolt,\n\t\tyielding a total range of +6.55 Volts.')
sfpDiagHighVoltWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighVoltWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighVoltWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighVoltWrnThreshold.setDescription('The threshold value for high voltage warning. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 100 uVolt,\n\t\tyielding a total range of +6.55 Volts.')
sfpDiagLowVoltWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowVoltWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowVoltWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowVoltWrnThreshold.setDescription('The threshold value for low voltage warning. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 100 uVolt,\n\t\tyielding a total range of +6.55 Volts.')
sfpDiagHighTxBiasAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxBiasAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTxBiasAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTxBiasAlmThreshold.setDescription('The threshold value for high voltage alarm. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 2 uA,\n\t\tyielding a total range of 0 to 131 mA.')
sfpDiagLowTxBiasAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxBiasAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTxBiasAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTxBiasAlmThreshold.setDescription('The threshold value for low voltage alarm. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 2 uA,\n\t\tyielding a total range of 0 to 131 mA.')
sfpDiagHighTxBiasWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxBiasWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTxBiasWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTxBiasWrnThreshold.setDescription('The threshold value for high voltage warning. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 2 uA,\n\t\tyielding a total range of 0 to 131 mA.')
sfpDiagLowTxBiasWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxBiasWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTxBiasWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTxBiasWrnThreshold.setDescription('The threshold value for low voltage warning. The value 0\n\t\tmeans 0 Volts. An increment on one is equivalent to 2 uA,\n\t\tyielding a total range of 0 to 131 mA.')
sfpDiagHighTxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxPowerAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTxPowerAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTxPowerAlmThreshold.setDescription('The threshold value for high TX power alarm. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 1 uW,\n\t\tyielding a total range of 0 to 65.535 mW.')
sfpDiagLowTxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxPowerAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTxPowerAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTxPowerAlmThreshold.setDescription('The threshold value for low TX power alarm. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 65.535 mW.')
sfpDiagHighTxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTxPowerWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighTxPowerWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTxPowerWrnThreshold.setDescription('The threshold value for high TX power warning. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 1 uW,\n\t\tyielding a total range of 0 to 65.535 mW.')
sfpDiagLowTxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTxPowerWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowTxPowerWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTxPowerWrnThreshold.setDescription('The threshold value for low TX power warning. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 65.535 mW.')
sfpDiagHighRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighRxPowerAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighRxPowerAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighRxPowerAlmThreshold.setDescription('The threshold value for high RX power alarm. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.')
sfpDiagLowRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowRxPowerAlmThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowRxPowerAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowRxPowerAlmThreshold.setDescription('The threshold value for low RX power alarm. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.')
sfpDiagHighRxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighRxPowerWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagHighRxPowerWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighRxPowerWrnThreshold.setDescription('The threshold value for high RX power warning. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.')
sfpDiagLowRxPowerWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowRxPowerWrnThreshold.setReference('DWDM MSA Table 2.3.19, SFP-8472 Table 3.15.')
if mibBuilder.loadTexts: sfpDiagLowRxPowerWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowRxPowerWrnThreshold.setDescription('The threshold value for low RX power warning. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.')
sfpDiagHighLaserTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighLaserTempAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighLaserTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighLaserTempAlmThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for high laser temperature alarm. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagLowLaserTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowLaserTempAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowLaserTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowLaserTempAlmThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for low laser temperature alarm. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagHighLaserTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighLaserTempWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighLaserTempWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighLaserTempWrnThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for high laser temperature warning. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagLowLaserTempWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowLaserTempWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowLaserTempWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowLaserTempWrnThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for low laser temperature warning. The value 0\n\t\tmeans -128 Celsuis. An increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius.')
sfpDiagHighWaveLenAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighWaveLenAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighWaveLenAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighWaveLenAlmThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for high laser temperature alarm.\n\t\tThe reportable wavelength range is 1000.00  1655.35nm with a resolution \n\t\tof 0.01nm.')
sfpDiagLowWaveLenAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowWaveLenAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowWaveLenAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowWaveLenAlmThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for low laser temperature alarm.\n\t\tThe reportable wavelength range is 1000.00  1655.35nm with a resolution \n\t\tof 0.01nm.')
sfpDiagHighWaveLenWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighWaveLenWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighWaveLenWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighWaveLenWrnThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for high laser temperature warning.\n\t\tThe reportable wavelength range is 1000.00  1655.35nm with a resolution \n\t\tof 0.01nm.')
sfpDiagLowWaveLenWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowWaveLenWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowWaveLenWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowWaveLenWrnThreshold.setDescription('For DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe threshold value for low laser temperature warning.\n\t\tThe reportable wavelength range is 1000.00  1655.35nm with a resolution \n\t\tof 0.01nm.')
sfpDiagHighTecCurrAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTecCurrAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighTecCurrAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTecCurrAlmThreshold.setDescription('The threshold value for high TEC current alarm. \n\t\tThe reported TEC current is defined as a positive number for cooling and \n\t\ta negative number for heating starting at -3276.8.\n\t\tThe increments are of 0.1 steps yielding a total range of -3276.8 to +3276.7.')
sfpDiagLowTecCurrAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTecCurrAlmThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowTecCurrAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTecCurrAlmThreshold.setDescription('The threshold value for low TEC current alarm. \n\t\tThe reported TEC current is defined as a positive number for cooling and \n\t\ta negative number for heating starting at -3276.8.\n\t\tThe increments are of 0.1 steps yielding a total range of -3276.8 to +3276.7.')
sfpDiagHighTecCurrWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagHighTecCurrWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagHighTecCurrWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagHighTecCurrWrnThreshold.setDescription('The threshold value for high TEC current warning. \n\t\tThe reported TEC current is defined as a positive number for cooling and \n\t\ta negative number for heating starting at -3276.8.\n\t\tThe increments are of 0.1 steps yielding a total range of -3276.8 to +3276.7.')
sfpDiagLowTecCurrWrnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagLowTecCurrWrnThreshold.setReference('DWDM MSA Table 2.3.19.')
if mibBuilder.loadTexts: sfpDiagLowTecCurrWrnThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagLowTecCurrWrnThreshold.setDescription('The threshold value for low TEC current warning. \n\t\tThe reported TEC current is defined as a positive number for cooling and \n\t\ta negative number for heating starting at -3276.8.\n\t\tThe increments are of 0.1 steps yielding a total range of -3276.8 to +3276.7.')
sfpDiagModuleTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagModuleTemperature.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagModuleTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpDiagModuleTemperature.setDescription('Internally measured module temperature. The value 0 means -128 Celsuis. \n\t\tAn increment on one is equivalent to 1/256 degree,\n\t\tyielding a total range of -128 to +128 Celsius. \n\t\tTemperature accuracy is vendor specific but must be better than 3\n\t\tdegrees Celsius over specified operating temperature and voltage.')
sfpDiagSupplyVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagSupplyVoltage.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagSupplyVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpDiagSupplyVoltage.setDescription('Internally measured supply voltage in transceiver. The value 0 means 0 Volts. \n\t\tAn increment on one is equivalent to 100 uVolt,\n\t\tyielding a total range of +6.55 Volts.\n\t\tAccuracy is vendor specific but must be better than 3% of the\n\t\tmanufacturers nominal value over specified operating temperature and voltage.')
sfpDiagTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxBias.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagTxBias.setStatus('current')
if mibBuilder.loadTexts: sfpDiagTxBias.setDescription('Internally measured TX Bias Current. The value 0\n\t\tmeans 0 Volt. An increment on one is equivalent to 2 uA,\n\t\tyielding a total range of 0 to 131 mA.\n\t\tAccuracy is vendor specific but must be better than 3dB over specified \n\t\ttemperature and voltage. Data is not valid when the transmitter is disabled.')
sfpDiagTxOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagTxOutputPower.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagTxOutputPower.setStatus('current')
if mibBuilder.loadTexts: sfpDiagTxOutputPower.setDescription('Measured TX output power. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.\n\t\tFor the vendor specified wavelength, accuracy shall be better than 3dB \n\t\tover specified temperature and voltage.')
sfpDiagRxInputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxInputPower.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagRxInputPower.setStatus('current')
if mibBuilder.loadTexts: sfpDiagRxInputPower.setDescription('Measured RX input power. The value 0\n\t\tmeans 0 Watts. An increment on one is equivalent to 0.1 uW,\n\t\tyielding a total range of 0 to 6.5535 mW.\n\t\tFor the vendor specified wavelength, accuracy shall be better than 3dB \n\t\tover specified temperature and voltage.')
sfpDiagRxLaserTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxLaserTemperature.setReference('DWDM MSA Table 2.3.21.')
if mibBuilder.loadTexts: sfpDiagRxLaserTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpDiagRxLaserTemperature.setDescription('Measured Laser Temperature. \n\t\tFor DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe value 0 means -128 Celsuis. An increment on one is equivalent \n\t\tto 1/256 degree, yielding a total range of -128 to +128 Celsius. \n\t\tTemperature accuracy is vendor specific but must be better than  0.2\n\t\tdegrees Celsius over specified operating temperature and voltage.')
sfpDiagRxMeasuredWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxMeasuredWavelength.setReference('DWDM MSA Table 2.3.21.')
if mibBuilder.loadTexts: sfpDiagRxMeasuredWavelength.setStatus('current')
if mibBuilder.loadTexts: sfpDiagRxMeasuredWavelength.setDescription('Measured Laser Wavelength. \n\t\tFor DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe wavelength is defined as:\n\t\t\tWavelength = 1000nm + 0.01nm * 16 bit value.\n\t\tThus, the reportable wavelength range is 1000.00  1655.35nm with a \n\t\tresolution of 0.01nm.')
sfpDiagRxTecCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxTecCurrent.setReference('DWDM MSA Table 2.3.21.')
if mibBuilder.loadTexts: sfpDiagRxTecCurrent.setStatus('current')
if mibBuilder.loadTexts: sfpDiagRxTecCurrent.setDescription('Measured Laser Temperature or Wavelength. \n\t\tFor DWDM applications, the diagnostic interface report either laser \n\t\twavelength or temperature, with a given modules reporting defined \n\t\tby bit 1 of the object sfpConfigOptionalWdm.\n\t\tThe reported TEC current is defined as a positive number for cooling and \n\t\ta negative number for heating starting at -3276.8.\n\t\tThe increments are of 0.1 steps yielding a total range of -3276.8 to +3276.7, \n\t\tThe accuracy of the TEC current monitor is vendor specific but must be \n\t\tbetter than 15% of the maximum TEC current as stored in the TEC Current \n\t\tHigh Alarm Threshold')
sfpDiagAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagAlarms.setReference('DWDM MSA Table 2.3.22, SFP-8472 Table 3.18.')
if mibBuilder.loadTexts: sfpDiagAlarms.setStatus('current')
if mibBuilder.loadTexts: sfpDiagAlarms.setDescription('This object indicates the Alarms of the SFP module.  \n\t\tThe sfpDiagAlarms is a bit map represented as a sum, therefore, \n\t\tit can represent multiple failures (alarms) simultaneously.\n\t    The various bit positions are:\n\t\t0\tTemp High Alarm Set when internal temperature exceeds high alarm level.\n\t\t1\tTemp Low Alarm Set when internal temperature is below low alarm level.\n\t\t2\tVcc High Alarm Set when internal supply voltage exceeds high alarm level.\n\t\t3\tVcc Low Alarm Set when internal supply voltage is below low alarm level.\n\t\t4\tTX Bias High Alarm Set when TX Bias current exceeds high alarm level.\n\t\t5\tTX Bias Low Alarm Set when TX Bias current is below low alarm level.\n\t\t6\tTX Power High Alarm Set when TX output power exceeds high alarm level.\n\t\t7\tTX Power Low Alarm Set when TX output power is below low alarm level.\n\t\t8\tRX Power High Alarm Set when Received Power exceeds high alarm level.\n\t\t9\tRX Power Low Alarm Set when Received Power is below low alarm level.\n\t\t10\t(15xy) Laser T/W High Alarm Set when laser temperature or wavelength exceeds high alarm level.\n\t\t11\t(15xy) Laser T/W Low Alarm Set when laser temperature or wavelength is below low alarm level.\n\t\t12\t(15xy) TEC Current High Alarm Set when TEC current exceeds high alarm level.\n\t\t13\t(15xy) TEC Current Low Alarm Set when TEC current is below low alarm level.\n\t\t14\tRetimer Loss Of Lock\n\t\t15\tRemoved SFP\n\t\t16\tRx Signal Detect alarm\n\t\t17\tLaser End of Life\n\t\t18  Laser Tx Failure Indication.')
sfpDiagAlarmsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagAlarmsMask.setReference('DWDM MSA Table 2.3.22, SFP-8472 Table 3.18.')
if mibBuilder.loadTexts: sfpDiagAlarmsMask.setStatus('current')
if mibBuilder.loadTexts: sfpDiagAlarmsMask.setDescription('This object indicates the Masking of the Alarms of the SFP module.  \n\t\tThe sfpDiagAlarmsMask is a bit map. Any of the alarm and warning flags can \n\t\tbe masked by writing a 1 to the corresponding bits.\n\t    The various bit positions are:\n\t\t0\tTemp High Wanring Set when internal temperature exceeds high warning level.\n\t\t1\tTemp Low Wanring Set when internal temperature is below low warning level.\n\t\t2\tVcc High Wanring Set when internal supply voltage exceeds high warning level.\n\t\t3\tVcc Low Wanring Set when internal supply voltage is below low warning level.\n\t\t4\tTX Bias High Wanring Set when TX Bias current exceeds high warning level.\n\t\t5\tTX Bias Low Wanring Set when TX Bias current is below low warning level.\n\t\t6\tTX Power High Wanring Set when TX output power exceeds high warning level.\n\t\t7\tTX Power Low Wanring Set when TX output power is below low warning level.\n\t\t8\tRX Power High Wanring Set when Received Power exceeds high warning level.\n\t\t9\tRX Power Low Wanring Set when Received Power is below low warning level.\n\t\t10\t(15xy) Laser T/W High Wanring Set when laser temperature or wavelength exceeds high warning level.\n\t\t11\t(15xy) Laser T/W Low Wanring Set when laser temperature or wavelength is below low warning level.\n\t\t12\t(15xy) TEC Current High Wanring Set when TEC current exceeds high warning level.\n\t\t13\t(15xy) TEC Current Low Wanring Set when TEC current is below low warning level.')
sfpDiagWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagWarnings.setReference('DWDM MSA Table 2.3.22, SFP-8472 Table 3.18.')
if mibBuilder.loadTexts: sfpDiagWarnings.setStatus('current')
if mibBuilder.loadTexts: sfpDiagWarnings.setDescription('This object indicates the Warnings of the SFP module.  \n\t\tThe sfpDiagWarnings is a bit map represented as a sum, therefore, \n\t\tit can represent multiple failures (alarms) simultaneously.\n\t    The various bit positions are:\n\t\t0\tTemp High Warning Set when internal temperature exceeds high warning level.\n\t\t1\tTemp Low Warning Set when internal temperature is below low warning level.\n\t\t2\tVcc High Warning Set when internal supply voltage exceeds high warning level.\n\t\t3\tVcc Low Warning Set when internal supply voltage is below low warning level.\n\t\t4\tTX Bias High Warning Set when TX Bias current exceeds high warning level.\n\t\t5\tTX Bias Low Warning Set when TX Bias current is below low warning level.\n\t\t6\tTX Power High Warning Set when TX output power exceeds high warning level.\n\t\t7\tTX Power Low Warning Set when TX output power is below low warning level.\n\t\t8\tRX Power High Warning Set when Received Power exceeds high warning level.\n\t\t9\tRX Power Low Warning Set when Received Power is below low warning level.\n\t\t10\tLaser T/W High Warning Set when laser temperature or wavelength exceeds high warning level.\n\t\t11\tLaser T/W Low Warning Set when laser temperature or wavelength is below low warning level.\n\t\t12\tTEC Current High Warning Set when TEC current exceeds high warning level.\n\t\t13\tTEC Current Low Warning Set when TEC current is below low warning level.')
sfpDiagWarningsMask = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagWarningsMask.setReference('DWDM MSA Table 2.3.22, SFP-8472 Table 3.18.')
if mibBuilder.loadTexts: sfpDiagWarningsMask.setStatus('current')
if mibBuilder.loadTexts: sfpDiagWarningsMask.setDescription('This object indicates the Masking of the Warnings of the SFP module.  \n\t\tThe sfpDiagWarningsMask is a bit map. Any of the alarm and warning flags can \n\t\tbe masked by writing a 1 to the corresponding bits.\n\t    The various bit positions are:\n\t\t0\tTemp High Warning Set when internal temperature exceeds high warning level.\n\t\t1\tTemp Low Warning Set when internal temperature is below low warning level.\n\t\t2\tVcc High Warning Set when internal supply voltage exceeds high warning level.\n\t\t3\tVcc Low Warning Set when internal supply voltage is below low warning level.\n\t\t4\tTX Bias High Warning Set when TX Bias current exceeds high warning level.\n\t\t5\tTX Bias Low Warning Set when TX Bias current is below low warning level.\n\t\t6\tTX Power High Warning Set when TX output power exceeds high warning level.\n\t\t7\tTX Power Low Warning Set when TX output power is below low warning level.\n\t\t8\tRX Power High Warning Set when Received Power exceeds high warning level.\n\t\t9\tRX Power Low Warning Set when Received Power is below low warning level.\n\t\t10\tLaser T/W High Warning Set when laser temperature or wavelength exceeds high warning level.\n\t\t11\tLaser T/W Low Warning Set when laser temperature or wavelength is below low warning level.\n\t\t12\tTEC Current High Warning Set when TEC current exceeds high warning level.\n\t\t13\tTEC Current Low Warning Set when TEC current is below low warning level.')
sfpDiagConfLowRxPowerAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpDiagConfLowRxPowerAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagConfLowRxPowerAlmThreshold.setDescription("Configured threshold value for low RX power alarm.\n\t\tChanging this value doen't affect the SFP and is implemented by software. \n\t\tThe threshold level specified in 0.1 dBm units.\n\t\tThe range starts with -50.0 dBm.")
sfpDiagRxInputPowerFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 47), Float32TC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagRxInputPowerFloat.setStatus('current')
if mibBuilder.loadTexts: sfpDiagRxInputPowerFloat.setDescription('Measured RX input power sepcified in floating units.\n\t\t This object is used for power < -40dBm that can be achieved with SFP external calibration.\n\t\t When not used this value is 0 and sfpDiagRxInputPower should be used.')
sfpDiagCxpTxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpTxTemp.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpTxTemp.setDescription('Internally measured Tx temperature. The value 0 means -128 Celsius. \n\t\tAn increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 22-23 (Tx Lower Page)')
sfpDiagCxpHighTxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpHighTxTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpHighTxTempAlmThreshold.setDescription('The threshold value for high Tx temperature alarm. \n\t\tThe value 0 means -128 Celsuis. An increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 128-129 (Tx Upper Page)')
sfpDiagCxpLowTxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpLowTxTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpLowTxTempAlmThreshold.setDescription('The threshold value for low Tx temperature alarm. \n\t\tThe value 0 means -128 Celsuis. An increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 130-131 (Tx Upper Page)')
sfpDiagCxpRxTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpRxTemp.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpRxTemp.setDescription('Internally measured Rx temperature. The value 0 means -128 Celsius. \n\t\tAn increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 22-23 (Rx Lower Page)')
sfpDiagCxpHighRxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpHighRxTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpHighRxTempAlmThreshold.setDescription('The threshold value for high Rx temperature alarm. \n\t\tThe value 0 means -128 Celsuis. An increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 128-129 (Rx Upper Page)')
sfpDiagCxpLowRxTempAlmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagCxpLowRxTempAlmThreshold.setStatus('current')
if mibBuilder.loadTexts: sfpDiagCxpLowRxTempAlmThreshold.setDescription('The threshold value for low Rx temperature alarm. \n\t\tThe value 0 means -128 Celsuis. An increment on one is equivalent to 1/256 degree, \n\t\tyielding a total range of -128 to +128 Celsius\n\t\tFor CXP Addr 130-131 (Rx Upper Page)')
sfpDiagOtdrFiberCutRange = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagOtdrFiberCutRange.setStatus('current')
if mibBuilder.loadTexts: sfpDiagOtdrFiberCutRange.setDescription('The OTDR calculated range to the fiber cut')
sfpDiagModuleTemperatureCelsius = MibTableColumn((1, 3, 6, 1, 4, 1, 4515, 1, 10, 2, 1, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagModuleTemperatureCelsius.setReference('DWDM MSA Table 2.3.21, SFP-8472 Table 3.17.')
if mibBuilder.loadTexts: sfpDiagModuleTemperatureCelsius.setStatus('current')
if mibBuilder.loadTexts: sfpDiagModuleTemperatureCelsius.setDescription('Internally measured module temperature, while degress in Celsuis. \n\t\tTotal range of -128 to +128 Celsius. \n\t\tTemperature accuracy is vendor specific but must be better than 3\n\t\tdegrees Celsius over specified operating temperature and voltage.')
sfpConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 4515, 1, 10, 3, 1)).setObjects(("SL-SFP-MIB", "sfpConfigInterface"))
if mibBuilder.loadTexts: sfpConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: sfpConfigChangeTrap.setDescription('A sfpTrapsChangeTrap trap is sent when the\n\t\tcontent of an instance sfpConfigEntry changes. It\n\t\tcan be utilized by an NMS to trigger polls.')
mibBuilder.exportSymbols("SL-SFP-MIB", sfpConfigTable=sfpConfigTable, sfpConfigLength50m10m=sfpConfigLength50m10m, sfpDiagLowTxBiasAlmThreshold=sfpDiagLowTxBiasAlmThreshold, sfpDiagRxLaserTemperature=sfpDiagRxLaserTemperature, sfpConfigLength9mKm=sfpConfigLength9mKm, sfpConfigXfpCalibrationEnabled=sfpConfigXfpCalibrationEnabled, sfpConfigCxpConnectorType=sfpConfigCxpConnectorType, sfpDiagHighWaveLenWrnThreshold=sfpDiagHighWaveLenWrnThreshold, sfpDiagRxTecCurrent=sfpDiagRxTecCurrent, sfpConfigLength9m100m=sfpConfigLength9m100m, sfpConfigMaxBitRate=sfpConfigMaxBitRate, sfpDiagHighLaserTempWrnThreshold=sfpDiagHighLaserTempWrnThreshold, sfpDiagTable=sfpDiagTable, sfpConfigPilotToneModulation=sfpConfigPilotToneModulation, sfpConfigNyquist=sfpConfigNyquist, sfpConfigXfpCapMaxSpacing10Ghz=sfpConfigXfpCapMaxSpacing10Ghz, sfpDiagEntry=sfpDiagEntry, sfpConfigCfpMaxHostLaneRate=sfpConfigCfpMaxHostLaneRate, sfpConfigCleiCode=sfpConfigCleiCode, sfpDiagHighTecCurrAlmThreshold=sfpDiagHighTecCurrAlmThreshold, sfpDiagTxBias=sfpDiagTxBias, sfpConfigXfpTuningSupported=sfpConfigXfpTuningSupported, sfpConfigXfpCapFreqFirst10Ghz=sfpConfigXfpCapFreqFirst10Ghz, sfpConfigCfpMaxCopperCableLength=sfpConfigCfpMaxCopperCableLength, sfpDiagLowLaserTempWrnThreshold=sfpDiagLowLaserTempWrnThreshold, sfpConfigEntry=sfpConfigEntry, sfpConfigCxpMaxSupportedRate=sfpConfigCxpMaxSupportedRate, sfpConfigCfpMinWavelenPerActive=sfpConfigCfpMinWavelenPerActive, sfpDiagHighVoltAlmThreshold=sfpDiagHighVoltAlmThreshold, sfpDiagWarningsMask=sfpDiagWarningsMask, sfpConfigCfpMaxWavelenPerActive=sfpConfigCfpMaxWavelenPerActive, sfpDiagHighVoltWrnThreshold=sfpDiagHighVoltWrnThreshold, sfpConfigXfpDesiredFreq=sfpConfigXfpDesiredFreq, sfpDiagCxpHighTxTempAlmThreshold=sfpDiagCxpHighTxTempAlmThreshold, sfpConfigXfpDeviceTech=sfpConfigXfpDeviceTech, sfpConfigCfpCopperCode=sfpConfigCfpCopperCode, sfpDiagRxMeasuredWavelength=sfpDiagRxMeasuredWavelength, sfpDiagModuleTemperature=sfpDiagModuleTemperature, sfpConfigXfpCapFreqFirstThz=sfpConfigXfpCapFreqFirstThz, sfpConfigCohRxDesiredWl=sfpConfigCohRxDesiredWl, sfpDiagOtdrFiberCutRange=sfpDiagOtdrFiberCutRange, sfpConfigCfpSupportedRates=sfpConfigCfpSupportedRates, sfpConfigMaxSupplyCurrent=sfpConfigMaxSupplyCurrent, sfpConfigVendorOUI=sfpConfigVendorOUI, sfpTune=sfpTune, sfpDiagLowWaveLenAlmThreshold=sfpDiagLowWaveLenAlmThreshold, sfpDiagLowWaveLenWrnThreshold=sfpDiagLowWaveLenWrnThreshold, sfpDiagCxpHighRxTempAlmThreshold=sfpDiagCxpHighRxTempAlmThreshold, sfpConfigExtendedOptions=sfpConfigExtendedOptions, sfpDiagHighTempAlmThreshold=sfpDiagHighTempAlmThreshold, sfpConfigCfpMaxLenOpticalWidth=sfpConfigCfpMaxLenOpticalWidth, sfpConfigXfpCapFreqLastThz=sfpConfigXfpCapFreqLastThz, sfpConfigChangeTrap=sfpConfigChangeTrap, sfpConfigVendorName=sfpConfigVendorName, sfpConfigCfpMaxNetworkLaneRate=sfpConfigCfpMaxNetworkLaneRate, sfpConfigEsconCompliance=sfpConfigEsconCompliance, sfpConfigCfpExtId=sfpConfigCfpExtId, sfpConfigCfpSpacing=sfpConfigCfpSpacing, sfpConfigXfpDesiredWl=sfpConfigXfpDesiredWl, sfpDiagLowTecCurrWrnThreshold=sfpDiagLowTecCurrWrnThreshold, sfpDiagLowRxPowerWrnThreshold=sfpDiagLowRxPowerWrnThreshold, sfpConfigQsfppEthernetCode=sfpConfigQsfppEthernetCode, sfpConfigCxpNominalWavelength=sfpConfigCxpNominalWavelength, sfpDiagHighTxBiasAlmThreshold=sfpDiagHighTxBiasAlmThreshold, sfpConf=sfpConf, sfpConfigXfpCapFreqLast10Ghz=sfpConfigXfpCapFreqLast10Ghz, sfpConfig10GFcCompliance=sfpConfig10GFcCompliance, sfpConfigNominalBitRate=sfpConfigNominalBitRate, sfpConfigChannelSpacing=sfpConfigChannelSpacing, sfpDiagTxOutputPower=sfpDiagTxOutputPower, sfpConfigCfpMediaProperties=sfpConfigCfpMediaProperties, sfpConfigInterface=sfpConfigInterface, sfpConfigTunableWaveLength=sfpConfigTunableWaveLength, sfpConfig10GSonetCompliance=sfpConfig10GSonetCompliance, sfpConfigVendorSN=sfpConfigVendorSN, sfpDiagLowTempAlmThreshold=sfpDiagLowTempAlmThreshold, sfpConfigSonetCompliance=sfpConfigSonetCompliance, sfpConfigCfpSupportedLanes=sfpConfigCfpSupportedLanes, sfpDiagLowRxPowerAlmThreshold=sfpDiagLowRxPowerAlmThreshold, sfpConfigCohCurrentOSNR=sfpConfigCohCurrentOSNR, sfpConfigXcvrId=sfpConfigXcvrId, sfpDiagHighLaserTempAlmThreshold=sfpDiagHighLaserTempAlmThreshold, slSfp=slSfp, sfpDiagWarnings=sfpDiagWarnings, sfpConfig10GbeCompliance=sfpConfig10GbeCompliance, sfpConfigXfpEncodingCode=sfpConfigXfpEncodingCode, sfpConfigCohRxDesiredFreq=sfpConfigCohRxDesiredFreq, sfpDiagHighRxPowerWrnThreshold=sfpDiagHighRxPowerWrnThreshold, sfpDiagLowVoltWrnThreshold=sfpDiagLowVoltWrnThreshold, sfpConfigVoaControl=sfpConfigVoaControl, sfpConfigMinTemp=sfpConfigMinTemp, sfpConfigMaxTemp=sfpConfigMaxTemp, sfpConfigVdtControl=sfpConfigVdtControl, sfpConfigFcCompliance=sfpConfigFcCompliance, sfpDiagAlarms=sfpDiagAlarms, sfpConfigVendorPN=sfpConfigVendorPN, sfpConfigConnectorCode=sfpConfigConnectorCode, sfpConfigOptionalWdm=sfpConfigOptionalWdm, sfpConfigXfpFreqError=sfpConfigXfpFreqError, sfpDiagLowTxPowerWrnThreshold=sfpDiagLowTxPowerWrnThreshold, sfpDiagHighTxPowerWrnThreshold=sfpDiagHighTxPowerWrnThreshold, sfpConfig8472Compliance=sfpConfig8472Compliance, sfpConfigCohAverageOSNR=sfpConfigCohAverageOSNR, sfpConfigWdmExtXcvrId=sfpConfigWdmExtXcvrId, sfpConfigCfpMaxMmFiberLength=sfpConfigCfpMaxMmFiberLength, sfpDiagSupplyVoltage=sfpDiagSupplyVoltage, sfpConfigInfibandCompliance=sfpConfigInfibandCompliance, sfpConfigLength62m10m=sfpConfigLength62m10m, sfpConfigXfpMaxBitRate=sfpConfigXfpMaxBitRate, sfpDiagLowTecCurrAlmThreshold=sfpDiagLowTecCurrAlmThreshold, PYSNMP_MODULE_ID=slSfp, sfpConfigCfpOtnCode=sfpConfigCfpOtnCode, sfpDiagCxpRxTemp=sfpDiagCxpRxTemp, sfpDiagHighTxPowerAlmThreshold=sfpDiagHighTxPowerAlmThreshold, sfpDiagLowTxPowerAlmThreshold=sfpDiagLowTxPowerAlmThreshold, sfpConfigCfpFcCode=sfpConfigCfpFcCode, sfpTraps=sfpTraps, sfpDiagConfLowRxPowerAlmThreshold=sfpDiagConfLowRxPowerAlmThreshold, sfpConfigXfpDesiredChannel=sfpConfigXfpDesiredChannel, sfpConfigQsfppSonetCode=sfpConfigQsfppSonetCode, sfpConfigCfpEthernetCode=sfpConfigCfpEthernetCode, sfpDiagRxInputPower=sfpDiagRxInputPower, sfpDiagInterface=sfpDiagInterface, sfpConfigEnhanceOptions=sfpConfigEnhanceOptions, sfpConfigCohRxDesiredChannel=sfpConfigCohRxDesiredChannel, sfpConfigMinBitRate=sfpConfigMinBitRate, sfpDiagCxpLowRxTempAlmThreshold=sfpDiagCxpLowRxTempAlmThreshold, sfpConfigXfpDitherAdmin=sfpConfigXfpDitherAdmin, sfpDiagCxpLowTxTempAlmThreshold=sfpDiagCxpLowTxTempAlmThreshold, sfpConfig1310ExtXcvrId=sfpConfig1310ExtXcvrId, sfpConfigXfpExtXcvrId=sfpConfigXfpExtXcvrId, sfpConfigCfpSonetCode=sfpConfigCfpSonetCode, sfpDiagHighTempWrnThreshold=sfpDiagHighTempWrnThreshold, sfpDiagModuleTemperatureCelsius=sfpDiagModuleTemperatureCelsius, sfpConfigLengthCopper1m=sfpConfigLengthCopper1m, sfpDiag=sfpDiag, sfpConfigDiagnosticMonitoring=sfpConfigDiagnosticMonitoring, sfpDiagHighTxBiasWrnThreshold=sfpDiagHighTxBiasWrnThreshold, sfpConfigCohMaxCD=sfpConfigCohMaxCD, sfpConfigXfpCalibrationSupported=sfpConfigXfpCalibrationSupported, sfpConfigCxpDeviceTech=sfpConfigCxpDeviceTech, sfpDiagHighRxPowerAlmThreshold=sfpDiagHighRxPowerAlmThreshold, sfpDiagLowTempWrnThreshold=sfpDiagLowTempWrnThreshold, sfpDiagRxInputPowerFloat=sfpDiagRxInputPowerFloat, sfpConfigCfpConnectorType=sfpConfigCfpConnectorType, sfpDiagLowVoltAlmThreshold=sfpDiagLowVoltAlmThreshold, sfpDiagHighTecCurrWrnThreshold=sfpDiagHighTecCurrWrnThreshold, sfpConfigCfpMaxSmFiberLength=sfpConfigCfpMaxSmFiberLength, sfpDiagAlarmsMask=sfpDiagAlarmsMask, sfpConfigVendorRev=sfpConfigVendorRev, sfpDiagCxpTxTemp=sfpDiagCxpTxTemp, sfpConfigXfpWlError=sfpConfigXfpWlError, sfpDiagHighWaveLenAlmThreshold=sfpDiagHighWaveLenAlmThreshold, sfpConfigEncodingCode=sfpConfigEncodingCode, sfpConfigDateCode=sfpConfigDateCode, sfpConfigXfpDitherSupported=sfpConfigXfpDitherSupported, sfpConfigXfpMinBitRate=sfpConfigXfpMinBitRate, sfpConfigWaveLength=sfpConfigWaveLength, sfpDiagLowTxBiasWrnThreshold=sfpDiagLowTxBiasWrnThreshold, sfpConfigCohCurrentCD=sfpConfigCohCurrentCD, sfpDiagLowLaserTempAlmThreshold=sfpDiagLowLaserTempAlmThreshold, sfpConfigCxpExtId=sfpConfigCxpExtId, sfpConfigGbeCompliance=sfpConfigGbeCompliance)
