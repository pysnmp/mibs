#
# PySNMP MIB module RS-XX8000-DVB-TX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX8000-DVB-TX-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:14:15 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
eventEvent, LogbookMaxEntryNumber, LogbookEntryMessagesNetCCU, FailDelayMode, FloatingPoint, EventMaxEntryNumber, IndexAmplifier, IndexAB, EventClass, Trigger, IndexRack, rsXx8000, LogbookEntryMessagesOST, LogbookEntrySlope, eventAlarmPriority, indexRack, indexAmplifier, ProdInfoModuleNameTv, rsXx8000MibModule, TvStandard, SwitchOnOff, FailDelayStatus, EventMask, indexAB, Sx801AmplifierState, EventState, ReadableString, LogbookEntryMessagesExcTv, TimeOfDay, eventAlarmClass, InputSource, EventPriority, EqualizerCalibrationState = mibBuilder.importSymbols("RS-XX8000-COMMON-MIB", "eventEvent", "LogbookMaxEntryNumber", "LogbookEntryMessagesNetCCU", "FailDelayMode", "FloatingPoint", "EventMaxEntryNumber", "IndexAmplifier", "IndexAB", "EventClass", "Trigger", "IndexRack", "rsXx8000", "LogbookEntryMessagesOST", "LogbookEntrySlope", "eventAlarmPriority", "indexRack", "indexAmplifier", "ProdInfoModuleNameTv", "rsXx8000MibModule", "TvStandard", "SwitchOnOff", "FailDelayStatus", "EventMask", "indexAB", "Sx801AmplifierState", "EventState", "ReadableString", "LogbookEntryMessagesExcTv", "TimeOfDay", "eventAlarmClass", "InputSource", "EventPriority", "EqualizerCalibrationState")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, iso, NotificationType, Counter32, Counter64, TimeTicks, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Bits, Gauge32, Unsigned32, MibIdentifier, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "iso", "NotificationType", "Counter32", "Counter64", "TimeTicks", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32")
DateAndTime, RowStatus, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "RowStatus", "TruthValue", "TextualConvention", "DisplayString")
rsXx8000DvbTxMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 163, 3))
rsXx8000DvbTxMibModule.setRevisions(('2012-11-01 08:00', '2012-09-03 08:00', '2011-05-12 08:00', '2011-02-28 08:00', '2010-12-02 08:00', '2010-10-13 08:00', '2010-05-21 08:00', '2010-04-16 08:00', '2010-02-02 08:00', '2010-01-29 08:00', '2010-01-12 08:00', '2009-12-18 08:00', '2009-11-26 08:00', '2009-11-13 08:00', '2009-10-08 08:00', '2009-09-10 08:00', '2009-07-16 08:00', '2009-06-26 08:00', '2009-06-17 09:00', '2009-05-28 09:00', '2009-03-30 09:00', '2009-02-12 15:00', '2009-01-29 09:00', '2009-01-06 16:00', '2008-12-12 14:30', '2008-10-23 08:00', '2008-10-08 10:30', '2008-09-10 15:00', '2008-08-29 10:00', '2008-08-26 09:00', '2008-07-23 10:00', '2008-05-05 09:30', '2008-03-31 11:00', '2007-12-07 17:00', '2007-09-10 11:00', '2007-08-09 14:00', '2007-07-11 16:00', '2007-03-08 10:00', '2006-12-21 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setRevisionsDescriptions(('Hierarchical input is no longer supported.', 'sx801AmplifierTable measured values added', 'cmdExcFailDelayMode, excStatusFailDelay added', 'Amplifier status for Sx801 added.', 'excStatusAmplifierControl, excStatusReqDataRateHP,\n                excStatusReqDataRateLP added', 'cmdExcEnablePcrReset, cmdExcTimeForDailyPcrReset added', 'cmdTxRfSwitch added', 'cmdExcMuteCondition added', 'cmdExcExpectInputReserve, txExcInputReseveMissing added', 'txNetCCUBoardTemperatureFault deprecated,\n                txNetCCUBoardTemperatureWarning added', 'excStatusVSWR added', 'txExcRfOk added', 'cmdExcRfFailLimit, cmdExcRfWarningLimit,\n                cmdExcInputFailDelayTime, cmdExcMonitoringOutput,\n                cmdExcOcxoAdjust, configRxFrequency,\n                configInputSource, configuration2Table,\n                excStatusNominalPower  added', 'ostRackAmpDeltaPhase, ostRackAmpCmdDeltaPhase added', 'txRackOvervoltProtectWarning added\n                cmdExcInputAutoSwitch obsoleted', 'cmdTxSystemMode added\n                traps for TX mode switch over added', "additional values for reserve concept 'backup exciter'", 'consideration of face-lift configuration in module compliances,\n                measured values for power supply added,\n                cmdExcInputAutoSwitch obsoleted,\n                conditional groupDummyLoadRF added', 'object groups, notification groups and module compliances reorganized', 'information for additional (external) power supply added\n                txRackRfOn, txRackRfOk, txRackTemperatureWarning added', 'txRackProbeNotCalibrated added\n                txParamSetSubDeviceDiffers obsoleted', '- InputSource with value tp\n                - new groupExcCommandsAdditional', 'MODULE COMPLIANCE rsXx8000DVBReEquip', 'rfProbeCalibrationSetGain, rfProbeCalibrationSetOffset', 'rfProbeConfigurationLabel obsolete\n                txRackExtCoolingWarning renamed to txRackGpiWarning\n                txRackExtCoolingFault renamed to txRackGpiFault', 'cmdExcInpAutoReadyAfterChangeOv\n                txExcInputAutomaticSwitchReady, txExcInputAutomaticChangedOver', 'cmdExcFrequency and configFrequency range up to 1500 MHz', 'new rackTable\n                new txRackRfWarning, txRackRfFault, txRackReflectionWarning,\n                    txRackReflectionFault\n                new groupIndependentRacks', 'changed TextualConvention for Exciter LogbookEntryMessages', '- rfProbesNetCCURfProbe1, rfProbesNetCCURfProbe2 read-only\n                - cmdTxParametersetReSave obsolete', '- new SLx parameters: cmdExcTimeScheduler, configurationTable and\n                                      timeSchedulerTable\n                - new SFN Delay parameters in exciterStatusTable', '- cmdExcReferenceSource with value internGPS\n                - cmdExcInput1Source, cmdExcInput2Source added', '- change range of cmdTxDelayTimeExcAutomatic and \n                  cmdTxDelayTimeOstAutomatic to 1..60\n                - adds cmdExcTransmitterType, cmdExcOutputPower\n                  excPrecUserState, excPrecFactoryState, excPrecRestoreCurrentSettings, excPrecRestoreAllSettings', '- cmdExcSFNStaticDelay to FloatingPoint\n                  cmdExcSFNDeviationTime changed range\n                - new exciter commands for RfOutput, RfIqAdjust and Precorrection\n                - rename prodInfoDeviceNameIdx to prodInfoModuleIdx and\n                         prodInfoDeviceName to prodInfoModuleName\n                  using TC ProdInfoModuleNameTv with a new value for netCCU \n                - rename txNetCCUBoardTemperatureWarning to\n                         txNetCCUBoardTemperatureFault\n                - new OBJECT-GROUPs groupExciterStatus and groupExciterPrecorrection', 'remove forwardPowerOstA and reflectedPowerOstA from groupSingleMP and groupDualDriveMP', 'Expansion of ProductInfoTable', 'added cmdTxDelayTimeExcAutomatic,\n                      cmdTxDelayTimeOstAutomatic,\n                      cmdExcTypeLossOfInput,\n                      cmdOstMaxOutletTempThreshold,\n                      forwardPowerOstA, forwardPowerOstB,\n                      reflectedPowerOstA, reflectedPowerOstB,\n                renamed ostRackTable to ostTable,\n                        ostRackEntry to ostEntry,\n                added ostRackAmp... nodes\n                added productInfoTable, rfProbesTable\n                defined alarm class for txAutomaticExcChanged,\n                                        txAutomaticOstChanged\n                added groupProductInfo, groupAmpMeasureValues,\n                      groupRfProbes, groupSingleTxLPNoNetCCU,\n                      groupAlarmSingleTxLPNoNetCCU,\n                      rsXx8000DVBSingleTxLPNoNetCCU', '- Added LowPower\n                - Sorted groups', 'This is the initial version.',))
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setLastUpdated('201211010800Z')
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setContactInfo('Torsten Huebscher\n                Department 7TS2\n                Broadcasting Division\n                Muehldorfstrasse 15\n                81671 Munich, Germany\n                torsten.huebscher@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx8000DvbTxMibModule.setDescription('This MIB defines transmitting systems from Rohde & Schwarz.\n                \n                Use this MIB if your system meets the following requirements:\n                - series XX8000 (NetCCU800),\n                - DVB,\n                - transmitter reserve concept SingleTx, DualDrive,\n                  Active Reserve or Passive Reserve.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB\n                - RS-XX8000-COMMON-MIB  - mandatory for this MIB')
rsXx8000DvbTx = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4))
if mibBuilder.loadTexts: rsXx8000DvbTx.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DvbTx.setDescription('Xx8000 DVB transmitter.')
rsXx8000DvbTxObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1))
commandsTxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1), )
if mibBuilder.loadTexts: commandsTxTable.setStatus('current')
if mibBuilder.loadTexts: commandsTxTable.setDescription('This table contains important commands for the transmitter.')
commandsTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "cmdDeviceIdx"))
if mibBuilder.loadTexts: commandsTxEntry.setStatus('current')
if mibBuilder.loadTexts: commandsTxEntry.setDescription('An entry for a designated transmitter and device.')
cmdTxResetSumFault = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxResetSumFault.setStatus('current')
if mibBuilder.loadTexts: cmdTxResetSumFault.setDescription('Reset all faults (in all modules) of the transmitter.\n                \n                You reset a designated transmitter (NetCCU, Exciters, Outputstages).\n                An equivalent would be pressing RESET at this transmitters frontpanel.\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
cmdTxParametersetLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetLoad.setStatus('current')
if mibBuilder.loadTexts: cmdTxParametersetLoad.setDescription('This loads the desired parameter set.')
cmdTxParametersetSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetSave.setStatus('current')
if mibBuilder.loadTexts: cmdTxParametersetSave.setDescription('This saves the current settings to a designated parameter set.')
cmdTxParametersetReSave = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxParametersetReSave.setStatus('obsolete')
if mibBuilder.loadTexts: cmdTxParametersetReSave.setDescription('This saves the changes to the current parameter set.')
cmdTxOperationModeProgram = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 5), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOperationModeProgram.setStatus('current')
if mibBuilder.loadTexts: cmdTxOperationModeProgram.setDescription('This switches the program path of the transmitter on/off.')
cmdTxOperationModeReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 6), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOperationModeReserve.setStatus('current')
if mibBuilder.loadTexts: cmdTxOperationModeReserve.setDescription('This switches the reserve path of the transmitter on/off.')
cmdTxOpModeExcAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOpModeExcAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdTxOpModeExcAutomatic.setDescription('This switches the exciter automatic on/off.')
cmdTxOpModeOstAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 8), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxOpModeOstAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdTxOpModeOstAutomatic.setDescription('This switches the outputstage automatic on/off.\n                \n                This paramter is only available for systems with an automatic output switch.')
cmdTxPreselectExciter = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 9), IndexAB()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxPreselectExciter.setStatus('current')
if mibBuilder.loadTexts: cmdTxPreselectExciter.setDescription('This sets exciterA or exciterB to program path (antenna) of the transmitter.')
cmdTxPreselectOutputstage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("outputstageA", 1), ("outputstageB", 2), ("bothToAntenna", 3), ("bothToDummyLoad", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxPreselectOutputstage.setStatus('current')
if mibBuilder.loadTexts: cmdTxPreselectOutputstage.setDescription('This sets \n                - outputstageA or \n                - outputstageB or\n                - both\n                to program path (antenna) of the transmitter,\n                or it sets both to dummyload.\n                \n                The settings bothToAntenna(3) and bothToDummyLoad(4) are only settable \n                for ActiveReserve systems.\n                \n                This paramter is only available for systems with an automatic output switch.')
cmdTxDelayTimeExcAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxDelayTimeExcAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdTxDelayTimeExcAutomatic.setDescription('This sets the exciter automatic delay time.')
cmdTxDelayTimeOstAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxDelayTimeOstAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdTxDelayTimeOstAutomatic.setDescription('This sets the outputstage automatic delay time.\n                \n                This paramter is only available for systems with an automatic output switch.')
cmdTxRfSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("antenna", 1), ("dummyLoad", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxRfSwitch.setStatus('current')
if mibBuilder.loadTexts: cmdTxRfSwitch.setDescription('RF switch for single-ended systems.')
cmdTxSystemMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 15), TvStandard()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxSystemMode.setStatus('current')
if mibBuilder.loadTexts: cmdTxSystemMode.setDescription("This object gives you the possibility of switching the TV standard\n                of a whole system with NetCCU with only one command.\n                Not applicable for N+1 or NTx systems.\n                The value 'test' cannot be written.")
cmdTxProgramExciterPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 20), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxProgramExciterPrio.setStatus('current')
if mibBuilder.loadTexts: cmdTxProgramExciterPrio.setDescription('Enables/Disables priority usage of program exciter')
cmdTxChangeOver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 21), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdTxChangeOver.setStatus('current')
if mibBuilder.loadTexts: cmdTxChangeOver.setDescription('Performs a change over')
cmdTxSwitchPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("controlExcOnAmp", 2), ("programExcOnAmp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmdTxSwitchPosition.setStatus('current')
if mibBuilder.loadTexts: cmdTxSwitchPosition.setDescription('Shows the actual switch position.\n                The program exciter is connected to input 1 (RF IN 1),\n                the control exciter is connected to input 2 (RF IN 2) of the base amplifier.')
cmdDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 30), IndexAB())
if mibBuilder.loadTexts: cmdDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: cmdDeviceIdx.setDescription('This column is used to show parameters for both exiters, if you have \n                dualdrive transmitters.')
cmdExcOpModeInputAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 31), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOpModeInputAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdExcOpModeInputAutomatic.setDescription('Activates/deactivates the input automatic.\n                If input automatic is active \n                and a loss of input signal is detected on the current input\n                the reserve input will be used instead.')
cmdExcPreselectInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("input1", 1), ("input2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcPreselectInput.setStatus('current')
if mibBuilder.loadTexts: cmdExcPreselectInput.setDescription('This sets the preselection of a transmitters input.')
cmdExcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dvbT", 1), ("dvbH", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMode.setStatus('current')
if mibBuilder.loadTexts: cmdExcMode.setDescription('Switch between DVB-T and DVB-H.')
cmdExcNetworkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mfn", 1), ("sfn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcNetworkMode.setStatus('current')
if mibBuilder.loadTexts: cmdExcNetworkMode.setDescription('Switch between Single Frequency Networks (SFN) and \n                Multiple Frequency Networks (MFN).')
cmdExcTPSSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("manualPresets", 1), ("mip", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSSource.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSSource.setDescription('Transmitted TPS parameters can be adjusted manually inside \n                the transmitter or automatically via MIP from the SFN adaptor.')
cmdExcEnableCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 36), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcEnableCellID.setStatus('current')
if mibBuilder.loadTexts: cmdExcEnableCellID.setDescription('This enables the Cell ID insertion. \n                The length indicator will be adjusted.')
cmdExcTxAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTxAddress.setStatus('current')
if mibBuilder.loadTexts: cmdExcTxAddress.setDescription('This is the unique address of the transmitter \n                to reference specific settings in the MIP.')
cmdExcTxAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 38), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTxAutomatic.setStatus('current')
if mibBuilder.loadTexts: cmdExcTxAutomatic.setDescription('This enables Tx specific parameters from the \n                MIP data caroussel (e.g. time offset, frequency offset).')
cmdExcInputAutoSwitch = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 39), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputAutoSwitch.setStatus('deprecated')
if mibBuilder.loadTexts: cmdExcInputAutoSwitch.setDescription("Activates/deactivates the input automatic.\n                If input automatic is active \n                and a loss of input signal is detected on the current input\n                the reserve input will be used instead.\n                \n                This object is deprecated. It's recommended to use cmdExcOpModeInputAutomatic instead.")
cmdExcInputSeamless = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 40), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputSeamless.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputSeamless.setDescription('If the datastreams on both inputs are syncronised a seamless switch is possible. \n                With this parameter the seamless switch can be suppressed to enable a check of the input automatic.')
cmdExcInputPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("equal", 1), ("prior", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputPriority.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputPriority.setDescription('Equal: There are no differences between both inputs. \n                       If a failure on the current input is detected it will be switched to the reserve input. \n                       It stays there until the reserve shows a failure. \n                Prior: Whenever possible a certain input shall be used. \n                       If a failure is detected the reserve will be used as short as possible.')
cmdExcInputCheckTimeForward = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputCheckTimeForward.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputCheckTimeForward.setDescription('This time has to elapse before the current input switches \n                to the reserve input.')
cmdExcInputCheckTimeSwitchback = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputCheckTimeSwitchback.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputCheckTimeSwitchback.setDescription('This time has to elapse before the automatic switches back \n                from the reserve to a preselected input. \n                This value has no effect if the priority is set to equal.')
cmdExcInputMuteOnFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mute", 1), ("noMute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputMuteOnFail.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputMuteOnFail.setDescription('If a loss of input signal is detected, the exciter mutes.')
cmdExcInputManualPreseletionHP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP1.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP1.setDescription('The data format of the input can be detected \n                automatically or can be set manually to ASI or SMPTE.')
cmdExcInputManualPreseletionHP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP2.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputManualPreseletionHP2.setDescription('The data format of the input can be detected \n                automatically or can be set manually to ASI or SMPTE.')
cmdExcInputManualPreseletionLP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP1.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP1.setDescription('The data format of the input can be detected \n                automatically or can be set manually to ASI or SMPTE.')
cmdExcInputManualPreseletionLP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("asi", 2), ("smpte", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP2.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputManualPreseletionLP2.setDescription('The data format of the input can be detected \n                automatically or can be set manually to ASI or SMPTE.')
cmdExcTPSManualBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mhz5", 1), ("mhz6", 2), ("mhz7", 3), ("mhz8", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualBandwidth.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualBandwidth.setDescription('The bandwidth used by the RF channel.')
cmdExcTPSManualFFTLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k2", 1), ("k8", 2), ("k4", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFFTLength.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualFFTLength.setDescription('The used FFT length (depends on the DVB network).')
cmdExcTPSManualGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneOf32", 1), ("oneOf16", 2), ("oneOf8", 3), ("oneOf4", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualGuardInterval.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualGuardInterval.setDescription('The Guard interval affects the error correction in multipath receiving situations.\n                A long Guard Interval reduces the amount of payload data.')
cmdExcTPSManualConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2), ("qam64", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualConstellation.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualConstellation.setDescription('This parameter sets the modulation mode.')
cmdExcTPSManualAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noHierarchy", 1), ("one", 2), ("two", 3), ("four", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualAlpha.setStatus('obsolete')
if mibBuilder.loadTexts: cmdExcTPSManualAlpha.setDescription('An alpha greater than noHierarchy(1) enables the hierarchical coding mode.')
cmdExcTPSManualCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCellID.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualCellID.setDescription('Via Cell ID the receiver knows the current network.')
cmdExcTPSManualInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indepth", 1), ("nat", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualInterleaver.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualInterleaver.setDescription('Enables the bit interleaver for hierarchical coding')
cmdExcTPSManualCoderateHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCoderateHP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualCoderateHP.setDescription('The Code Rate sets the ratio between payload and error correction information.')
cmdExcTPSManualCoderateLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualCoderateLP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualCoderateLP.setDescription('The Code Rate sets the ratio between payload and error correction information.')
cmdExcTPSManualTimeSlicingHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 58), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingHP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingHP.setDescription('Enables the time slicing for hierarchical coding.')
cmdExcTPSManualTimeSlicingLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 59), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingLP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualTimeSlicingLP.setDescription('Enables the time slicing for hierarchical coding.')
cmdExcTPSManualFECHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 60), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFECHP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualFECHP.setDescription('Enables the forward error correction (FEC) for hierarchical coding.')
cmdExcTPSManualFECLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 61), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTPSManualFECLP.setStatus('current')
if mibBuilder.loadTexts: cmdExcTPSManualFECLP.setDescription('Enables the forward error correction (FEC) for hierarchical coding.')
cmdExcSFNStaticDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 62), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcSFNStaticDelay.setStatus('current')
if mibBuilder.loadTexts: cmdExcSFNStaticDelay.setDescription('A constant adjustable delay for tuning a SFN (-999999.9 ... 999999.9).')
cmdExcSFNDeviationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('Microseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcSFNDeviationTime.setStatus('current')
if mibBuilder.loadTexts: cmdExcSFNDeviationTime.setDescription('Leap In Time.\n                This parameter sets the deviation in time when a readjustment \n                of the dynamic delay is necessary.')
cmdExcFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcFrequency.setStatus('current')
if mibBuilder.loadTexts: cmdExcFrequency.setDescription('This is the RF frequency.')
cmdExcReferenceSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("intern", 1), ("extern5Mhz", 2), ("extern10Mhz", 3), ("extern1PPS", 4), ("internGPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcReferenceSource.setStatus('current')
if mibBuilder.loadTexts: cmdExcReferenceSource.setDescription('The Source of the reference signal.\n                The value internGPS is not valid for SX800.')
cmdExcMuteOnPPSFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onlyAtStartup", 2), ("afterFailDelayTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteOnPPSFail.setStatus('current')
if mibBuilder.loadTexts: cmdExcMuteOnPPSFail.setDescription('Select the behaviour if the external second pulse is not available.')
cmdExcMuteOnReferenceFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 67), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("onlyAtStartup", 2), ("afterFailDelayTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteOnReferenceFail.setStatus('current')
if mibBuilder.loadTexts: cmdExcMuteOnReferenceFail.setDescription('Select the behaviour if the external reference is not available.')
cmdExcRefFailDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setUnits('Hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRefFailDelayTime.setStatus('current')
if mibBuilder.loadTexts: cmdExcRefFailDelayTime.setDescription('Adjusts the time after the RF will be muted in case of a reference problem.\n                Zero hours means react immediately.')
cmdExcTypeLossOfInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("warning", 1), ("fault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTypeLossOfInput.setStatus('current')
if mibBuilder.loadTexts: cmdExcTypeLossOfInput.setDescription('If the input signal is lost, either a warning or a fault can be generated.\n                If you select fault here, a switchover to the reserve exciter will be executed \n                when input signal is lost.')
cmdExcRfOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 70), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutput.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutput.setDescription('Turns on/switches off the output signal. This switch takes the same effect as the switch on the frontpanel of the exciter.')
cmdExcRfOutputRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 71), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputRegulation.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutputRegulation.setDescription('Turns on/switches off the automatic output level regulation.')
cmdExcRfOutputManualRfLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 72), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputManualRfLevel.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutputManualRfLevel.setDescription('Adjusts the RF level (0.0 ... 100.0). The value relates to an attenuation of 0 dB.')
cmdExcRfOutputAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputAttenuation.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutputAttenuation.setDescription('Activates internal attenuators to reduce the output level of the exciter.\n                Adjustable in steps of 3 dB only.')
cmdExcRfOutputRfSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 74), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputRfSlope.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutputRfSlope.setDescription('Adjusts a slope in the RF signal (-50.0 ... 50.0).')
cmdExcRfOutputModulationSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 75), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfOutputModulationSlope.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfOutputModulationSlope.setDescription('Modulation slope (-50.0 ... 50.0).')
cmdExcRfIqAdjustStart = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 77), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("break", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustStart.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustStart.setDescription('Starts the automatic IQ adjustment. It works for the current used local 1 frequency and lasts up to 5 minutes. In this time the output will be muted. During the adjustment no transmitter parameter shall be changed. Break will stop the automatic immediately. The IQ modulator looses its adjustment!\n                Read values mean idle(1) and started(2).')
cmdExcRfIqAdjustTestsignal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 78), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustTestsignal.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustTestsignal.setDescription('Generates a test signal to adjust the IQ modulation. It is necessary to disconnect the rf-cable to the output stages.')
cmdExcRfIqAdjustBiasCoarseI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1023, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseI.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseI.setDescription('Adjusts the offset for I in huge steps.')
cmdExcRfIqAdjustBiasCoarseQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1023, 1023))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseQ.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasCoarseQ.setDescription('Adjusts the offset for Q in huge steps.')
cmdExcRfIqAdjustBiasFineI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineI.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineI.setDescription('Adjusts the offset for I in small steps.')
cmdExcRfIqAdjustBiasFineQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-32767, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineQ.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustBiasFineQ.setDescription('Adjusts the offset for Q in small steps.')
cmdExcRfIqAdjustGainI = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 83), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainI.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainI.setDescription('Adjusts the gain for I in small steps.')
cmdExcRfIqAdjustGainQ = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainQ.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustGainQ.setDescription('Adjusts the gain for Q in small steps.')
cmdExcRfIqAdjustPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 85), FloatingPoint()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfIqAdjustPhase.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfIqAdjustPhase.setDescription('Adjusts the phase between I and Q (-14.000 ... 14.000).')
cmdExcInput1Source = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 86), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInput1Source.setStatus('current')
if mibBuilder.loadTexts: cmdExcInput1Source.setDescription('Source for input 1.')
cmdExcInput2Source = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 87), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInput2Source.setStatus('current')
if mibBuilder.loadTexts: cmdExcInput2Source.setDescription('Source for input 2.')
cmdExcInpAutoReadyAfterChangeOv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 88), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInpAutoReadyAfterChangeOv.setStatus('current')
if mibBuilder.loadTexts: cmdExcInpAutoReadyAfterChangeOv.setDescription('Input automatic ready after change over.')
cmdExcInputFailDelayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 89), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setUnits('Seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcInputFailDelayTime.setStatus('current')
if mibBuilder.loadTexts: cmdExcInputFailDelayTime.setDescription('The time between detecting a loss of input signal and displaying a failure.')
cmdExcTransmitterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("atv", 1), ("dvb", 2), ("atsc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTransmitterType.setStatus('current')
if mibBuilder.loadTexts: cmdExcTransmitterType.setDescription('the TV standard of the transmitter\n                The transmitter is rebooted automatically when the TV standard is\n                changed. Signal processing is also switched over.')
cmdExcTimeScheduler = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 91), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTimeScheduler.setStatus('current')
if mibBuilder.loadTexts: cmdExcTimeScheduler.setDescription('If on, the time scheduler controls the tx type. When switching on the scheduler \n                it may instantly set the correct TV standard and reboot the device.')
cmdExcMuteCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 92), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("onAllFaults", 1), ("notBeforeSyncLoss", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMuteCondition.setStatus('current')
if mibBuilder.loadTexts: cmdExcMuteCondition.setDescription('When notBeforeSyncLoss(2) is selected,\n                it relativizes the cmdExcInputMuteOnFail setting mute(1):\n                If a DVB receiver is the last valid input, an existing transport stream,\n                even if it is faulty shall not be muted.\n                \n                Only for SLx/Sx801')
cmdExcRfWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 97), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfWarningLimit.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfWarningLimit.setDescription('Warning limit for the RF control.\n                min: -15.0, max: 0.0')
cmdExcRfFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 98), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcRfFailLimit.setStatus('current')
if mibBuilder.loadTexts: cmdExcRfFailLimit.setDescription('Fault limit for the RF control.\n                min: -15.0, max: 0.0')
cmdExcOutputPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 99), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOutputPower.setStatus('current')
if mibBuilder.loadTexts: cmdExcOutputPower.setDescription('amplifier output power\n                0 ... 400 W')
cmdOstRefVoltageVision = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 100), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdOstRefVoltageVision.setStatus('current')
if mibBuilder.loadTexts: cmdOstRefVoltageVision.setDescription('This adjusts the output power of the amplifier.\n                This value is settable with maximal 1 position after point (example 11.2).')
cmdOstMaxOutletTempThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(45, 65))).setUnits('Degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdOstMaxOutletTempThreshold.setStatus('current')
if mibBuilder.loadTexts: cmdOstMaxOutletTempThreshold.setDescription('This sets the threshold for the outlet temperature.')
cmdExcMonitoringOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 110), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("off", 1), ("reference10MHz", 2), ("generated1PPS", 3), ("kHz1", 4), ("pulse1PPS", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcMonitoringOutput.setStatus('current')
if mibBuilder.loadTexts: cmdExcMonitoringOutput.setDescription('Selects which signal appears at the monitoring output.')
cmdExcOcxoAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 111), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcOcxoAdjust.setStatus('current')
if mibBuilder.loadTexts: cmdExcOcxoAdjust.setDescription("Adjusts the frequency of the internal 10 MHz reference.\n                This value only takes effect if the reference source 'internal' is selected.")
cmdExcExpectInputReserve = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 112), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcExpectInputReserve.setStatus('current')
if mibBuilder.loadTexts: cmdExcExpectInputReserve.setDescription('If on(1) the warning txExcInputReseveMissing will be generated\n                in case second input is missing.')
cmdExcEnablePcrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 113), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcEnablePcrReset.setStatus('obsolete')
if mibBuilder.loadTexts: cmdExcEnablePcrReset.setDescription('Enables/disables daily PCR resets.\n                This option is valid only in MFN operation.\n                The reset time is given in cmdExcTimeForDailyPcrReset.')
cmdExcTimeForDailyPcrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 114), TimeOfDay()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcTimeForDailyPcrReset.setStatus('obsolete')
if mibBuilder.loadTexts: cmdExcTimeForDailyPcrReset.setDescription('Sets the time of day for daily PCR reset.')
cmdExcFailDelayMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 1, 1, 115), FailDelayMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmdExcFailDelayMode.setStatus('current')
if mibBuilder.loadTexts: cmdExcFailDelayMode.setDescription('Condition when the fail delay time is used.')
summaryInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2))
summaryFaultTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultTx.setStatus('current')
if mibBuilder.loadTexts: summaryFaultTx.setDescription('This indicates a summary fault of the transmitter.\n                   true(1)  --> summary fault\n                   false(2) --> no summary fault\n                \n                There is a fault of at least one module (e.g. Exciter) which causes this summary fault.\n                \n                An equivalent would be the LED Fault at the transmitters frontpanel.')
summaryWarningTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryWarningTx.setStatus('current')
if mibBuilder.loadTexts: summaryWarningTx.setDescription('This indicates a summary warning of the transmitter.\n                   true(1)  --> summary warning\n                   false(2) --> no summary warning\n                \n                There is a fault of at least one module (e.g. Exciter) which causes this summary warning.\n                \n                An equivalent would be the LED Warning at the transmitters frontpanel.')
localModeTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: localModeTx.setStatus('current')
if mibBuilder.loadTexts: localModeTx.setDescription('This indicates the local/remote-mode of the transmitter.\n                   true(1)  --> local\n                   false(2) --> remote\n                \n                The transmitter is eigther in local-mode or in remote-mode. \n                For security reasons it is not possible to set this value!\n                \n                An equivalent would the LED Local at the transmitters frontpanel.')
rfOnTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfOnTx.setStatus('current')
if mibBuilder.loadTexts: rfOnTx.setDescription('The RF is present for the corresponding transmitter.')
forwardPower = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 5), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPower.setStatus('current')
if mibBuilder.loadTexts: forwardPower.setDescription('The measured forwarded power [W] of the transmitter. \n                For Active Reserve systems it is the sum of both outputstages.')
reflectedPower = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 6), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPower.setStatus('current')
if mibBuilder.loadTexts: reflectedPower.setDescription('The measured reflected power [W] of the transmitter. \n                For Active Reserve systems it is the sum of both outputstages.\n                \n                Not available for lowpower systems.')
summaryFaultExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultExcA.setStatus('current')
if mibBuilder.loadTexts: summaryFaultExcA.setDescription('This indicates a summary fault of exciter.')
summaryFaultOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultOstA.setStatus('current')
if mibBuilder.loadTexts: summaryFaultOstA.setDescription('This indicates a summary fault of outputstage.')
summaryFaultExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultExcB.setStatus('current')
if mibBuilder.loadTexts: summaryFaultExcB.setDescription('This indicates a summary fault of exciter.')
summaryFaultOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: summaryFaultOstB.setStatus('current')
if mibBuilder.loadTexts: summaryFaultOstB.setDescription('This indicates a summary fault of outputstage.')
exciterAutomaticReady = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticReady.setStatus('current')
if mibBuilder.loadTexts: exciterAutomaticReady.setDescription('The Exciter Automatic is Ready. \n                In case of any fault on one exciter, there will be a switchover to the other exciter.')
exciterAutomaticChanged = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticChanged.setStatus('current')
if mibBuilder.loadTexts: exciterAutomaticChanged.setDescription('The Exciter Automatic has changed. \n                There was a fault on one exciter which lead to this changeover.')
exciterAutomaticFault = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterAutomaticFault.setStatus('current')
if mibBuilder.loadTexts: exciterAutomaticFault.setDescription('The Exciter Automatic is faulty. \n                In case of any fault on one exciter, there will be no switchover to the other exciter,\n                because of this fault.')
outputstageAutomaticReady = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticReady.setStatus('current')
if mibBuilder.loadTexts: outputstageAutomaticReady.setDescription('The Outputstage Automatic is Ready. \n                In case of any fault on one outputstage, there will be a switchover to the other outputstage.\n                \n                This paramter is only available for systems with an automatic output switch.')
outputstageAutomaticChanged = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticChanged.setStatus('current')
if mibBuilder.loadTexts: outputstageAutomaticChanged.setDescription('The Outputstage Automatic has changed. \n                There was a fault on one outputstage which lead to this changeover.\n                \n                This paramter is only available for systems with an automatic output switch.')
outputstageAutomaticFault = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageAutomaticFault.setStatus('current')
if mibBuilder.loadTexts: outputstageAutomaticFault.setDescription('The Outputstage Automatic is faulty. \n                In case of any fault on one outputstage, there will be no switchover to the other outputstage,\n                because of this fault.\n                \n                This paramter is only available for systems with an automatic output switch.')
noConnectionExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionExcA.setStatus('current')
if mibBuilder.loadTexts: noConnectionExcA.setDescription('No Connection between NetCCU and Exciter.')
noConnectionOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionOstA.setStatus('current')
if mibBuilder.loadTexts: noConnectionOstA.setDescription('No Connection between NetCCU and Outputstage.')
noConnectionExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionExcB.setStatus('current')
if mibBuilder.loadTexts: noConnectionExcB.setDescription('No Connection between NetCCU and Exciter.')
noConnectionOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noConnectionOstB.setStatus('current')
if mibBuilder.loadTexts: noConnectionOstB.setDescription('No Connection between NetCCU and Outputstage.')
activeExcA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeExcA.setStatus('current')
if mibBuilder.loadTexts: activeExcA.setDescription('ExciterA is currently active.')
activeOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeOstA.setStatus('current')
if mibBuilder.loadTexts: activeOstA.setDescription('OutputstageA is currently active.')
activeExcB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 23), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeExcB.setStatus('current')
if mibBuilder.loadTexts: activeExcB.setDescription('ExciterB is currently active.')
activeOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: activeOstB.setStatus('current')
if mibBuilder.loadTexts: activeOstB.setDescription('OutputstageB is currently active.')
forwardPowerOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 25), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPowerOstA.setStatus('current')
if mibBuilder.loadTexts: forwardPowerOstA.setDescription('The measured forwarded power [W] of the OutputstageA.')
reflectedPowerOstA = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 26), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPowerOstA.setStatus('current')
if mibBuilder.loadTexts: reflectedPowerOstA.setDescription('The measured reflected power [W] of the OutputstageA.\n                \n                Not available for lowpower systems.')
forwardPowerOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 27), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: forwardPowerOstB.setStatus('current')
if mibBuilder.loadTexts: forwardPowerOstB.setDescription('The measured forwarded power [W] of the OutputstageB.')
reflectedPowerOstB = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 28), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: reflectedPowerOstB.setStatus('current')
if mibBuilder.loadTexts: reflectedPowerOstB.setDescription('The measured reflected power [W] of the OutputstageB.\n                \n                Not available for lowpower systems.')
powerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 29), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupply.setStatus('current')
if mibBuilder.loadTexts: powerSupply.setDescription('Monitoring value of the output voltages of the power supply.')
additionalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 30), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: additionalPowerSupply.setStatus('current')
if mibBuilder.loadTexts: additionalPowerSupply.setDescription('Shows whether the NetCCU has an additional (external) power supply.')
internalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 31), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPowerSupply.setStatus('current')
if mibBuilder.loadTexts: internalPowerSupply.setDescription('Monitoring value of the output voltages of the internal power supply.')
externalPowerSupply = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 2, 32), FloatingPoint()).setUnits('volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPowerSupply.setStatus('current')
if mibBuilder.loadTexts: externalPowerSupply.setDescription('Monitoring value of the output voltages of the external power supply.')
detailedInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3))
excInputTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2), )
if mibBuilder.loadTexts: excInputTable.setStatus('current')
if mibBuilder.loadTexts: excInputTable.setDescription('A table for more detailed information about the exciter.\n                These values are all read-only. For settings, refer to commands.')
excInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excInputExcIdx"), (0, "RS-XX8000-DVB-TX-MIB", "excInputChannelIdx"))
if mibBuilder.loadTexts: excInputEntry.setStatus('current')
if mibBuilder.loadTexts: excInputEntry.setDescription('An entry for a designated input channel.')
excInputExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 1), IndexAB())
if mibBuilder.loadTexts: excInputExcIdx.setStatus('current')
if mibBuilder.loadTexts: excInputExcIdx.setDescription('The index for exciterA (and exciterB if there are DualDrive systems).')
excInputChannelIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: excInputChannelIdx.setStatus('current')
if mibBuilder.loadTexts: excInputChannelIdx.setDescription('The index for the different input channels.')
excInputChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hp1", 1), ("hp2", 2), ("lp1", 3), ("lp2", 4), ("activeHP", 5), ("activeLP", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputChannelName.setStatus('current')
if mibBuilder.loadTexts: excInputChannelName.setDescription('This is the logical name for the index for the different input channels.')
excInputConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputConnected.setStatus('current')
if mibBuilder.loadTexts: excInputConnected.setDescription('The input channel is connected.')
excInputSeamless = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputSeamless.setStatus('current')
if mibBuilder.loadTexts: excInputSeamless.setDescription('The input channel is in seamless mode.')
excInputPreselected = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputPreselected.setStatus('current')
if mibBuilder.loadTexts: excInputPreselected.setDescription('The input channel is the preselected.')
excInputActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputActive.setStatus('current')
if mibBuilder.loadTexts: excInputActive.setDescription('The input channel is active.')
excInputMipFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMipFail.setStatus('current')
if mibBuilder.loadTexts: excInputMipFail.setDescription('Input channel MIP fail.')
excInputBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mhz5", 1), ("mhz6", 2), ("mhz7", 3), ("mhz8", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputBandwidth.setStatus('current')
if mibBuilder.loadTexts: excInputBandwidth.setDescription('The bandwidth used by the input channel.')
excInputFFTLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("k2", 1), ("k8", 2), ("k4", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputFFTLength.setStatus('current')
if mibBuilder.loadTexts: excInputFFTLength.setDescription('The used FFT length (depends on the DVB network).')
excInputGuardInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("oneOf32", 1), ("oneOf16", 2), ("oneOf8", 3), ("oneOf4", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputGuardInterval.setStatus('current')
if mibBuilder.loadTexts: excInputGuardInterval.setDescription('The Guard interval affects the error correction in multipath receiving situations.\n                A long Guard Interval reduces the amount of payload data.')
excInputConstellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("qpsk", 1), ("qam16", 2), ("qam64", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputConstellation.setStatus('current')
if mibBuilder.loadTexts: excInputConstellation.setDescription('This parameter sets the modulation mode.')
excInputAlpha = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noHierarchy", 1), ("one", 2), ("two", 3), ("four", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputAlpha.setStatus('obsolete')
if mibBuilder.loadTexts: excInputAlpha.setDescription('An alpha greater than zero enables the hierarchical coding mode.')
excInputCellID = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputCellID.setStatus('current')
if mibBuilder.loadTexts: excInputCellID.setDescription('Via Cell ID the receiver knows the current network.')
excInputInterleaver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indepth", 1), ("nat", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputInterleaver.setStatus('current')
if mibBuilder.loadTexts: excInputInterleaver.setDescription('Enables the bit interleaver for hierarchical coding')
excInputCodeRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("oneOf2", 1), ("twoOf3", 2), ("threeOf4", 3), ("fiveOf6", 4), ("sevenOf8", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputCodeRate.setStatus('current')
if mibBuilder.loadTexts: excInputCodeRate.setDescription('Coderate can be set separately for HP and LP channel.')
excInputPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(188, 208))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputPacketLength.setStatus('current')
if mibBuilder.loadTexts: excInputPacketLength.setDescription('The Packet length for the channel.')
excInputMeasuredDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMeasuredDatarate.setStatus('current')
if mibBuilder.loadTexts: excInputMeasuredDatarate.setDescription('The measured datarate of the input.')
excInputRequiredDatarate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputRequiredDatarate.setStatus('current')
if mibBuilder.loadTexts: excInputRequiredDatarate.setDescription('The required datarate of the input.')
excInputMaximumDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setUnits('Nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excInputMaximumDelay.setStatus('current')
if mibBuilder.loadTexts: excInputMaximumDelay.setDescription('Period of time between the signal leaving the play-out center (MIP inserter)\n                and its regular transmission at the antenna.\n                This delay is set in the MIP inserter and serves as a basis\n                for all the transmitters in the SFN.')
ostTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3), )
if mibBuilder.loadTexts: ostTable.setStatus('current')
if mibBuilder.loadTexts: ostTable.setDescription('The table of racks.')
ostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostIdx"), (0, "RS-XX8000-DVB-TX-MIB", "ostRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "ostRackAmpIdx"))
if mibBuilder.loadTexts: ostEntry.setStatus('current')
if mibBuilder.loadTexts: ostEntry.setDescription('A row (an entry) for one rack.')
ostIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 1), IndexAB())
if mibBuilder.loadTexts: ostIdx.setStatus('current')
if mibBuilder.loadTexts: ostIdx.setDescription('The dedicated outputstage (A/B).')
ostRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 2), IndexRack())
if mibBuilder.loadTexts: ostRackIdx.setStatus('current')
if mibBuilder.loadTexts: ostRackIdx.setDescription('The rack number (1..10).')
ostRackInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 3), FloatingPoint()).setUnits('Degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackInletTemperature.setStatus('current')
if mibBuilder.loadTexts: ostRackInletTemperature.setDescription('The inlet temperature.')
ostRackOutletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 4), FloatingPoint()).setUnits('Degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackOutletTemperature.setStatus('current')
if mibBuilder.loadTexts: ostRackOutletTemperature.setDescription('The outlet temperature.')
ostRackAuxPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 5), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAuxPowerSupply.setStatus('current')
if mibBuilder.loadTexts: ostRackAuxPowerSupply.setDescription('Control voltage of auxiliary power supply of the designated rack.\n                The value should be between 11.1 to 13.2 V.')
ostRackAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 400), IndexAmplifier())
if mibBuilder.loadTexts: ostRackAmpIdx.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpIdx.setDescription('Amplifier Index')
ostRackAmpI1A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 401), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI1A.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI1A.setDescription('The power amplifier module current (I_1A).')
ostRackAmpI2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 402), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI2A.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI2A.setDescription('The power amplifier module current (I_2A).')
ostRackAmpI3A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 403), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI3A.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI3A.setDescription('The power amplifier module current (I_3A).')
ostRackAmpI4A = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 404), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI4A.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI4A.setDescription('The power amplifier module current (I_4A).')
ostRackAmpI1B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 405), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI1B.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI1B.setDescription('The power amplifier module current (I_1B).')
ostRackAmpI2B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 406), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI2B.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI2B.setDescription('The power amplifier module current (I_2B).')
ostRackAmpI3B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 407), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI3B.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI3B.setDescription('The power amplifier module current (I_3B).')
ostRackAmpI4B = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 408), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpI4B.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpI4B.setDescription('The power amplifier module current (I_4B).')
ostRackAmpIDrv = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 409), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpIDrv.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpIDrv.setDescription('The driver module current (I_DRV).')
ostRackAmpUDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 410), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUDc.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpUDc.setDescription('The power amplifier supply voltage.')
ostRackAmpIDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 411), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpIDc.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpIDc.setDescription('The power amplifier supply current.')
ostRackAmpUDcControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 412), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUDcControl.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpUDcControl.setDescription('The power supply control voltage.')
ostRackAmpUReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 413), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpUReg.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpUReg.setDescription('The power amplifier AGC voltage.')
ostRackAmpPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 414), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerA.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpPowerA.setDescription('The voltage power detector A.')
ostRackAmpPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 415), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerB.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpPowerB.setDescription('The voltage power detector B.')
ostRackAmpPowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 416), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerOut.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpPowerOut.setDescription('The voltage forward power detector.')
ostRackAmpPowerReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 417), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerReflection.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpPowerReflection.setDescription('The voltage reflected power detector.')
ostRackAmpPowerReference = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 418), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpPowerReference.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpPowerReference.setDescription('The reference voltage for output power.')
ostRackAmpDeltaPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 419), FloatingPoint()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ostRackAmpDeltaPhase.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpDeltaPhase.setDescription('The measured phase delta for output power.')
ostRackAmpCmdDeltaPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 3, 1, 420), FloatingPoint()).setUnits('Percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ostRackAmpCmdDeltaPhase.setStatus('current')
if mibBuilder.loadTexts: ostRackAmpCmdDeltaPhase.setDescription('The phase delta setting for output power.\n                The range is -50.0% to 50.0%.')
exciterStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20), )
if mibBuilder.loadTexts: exciterStatusTable.setStatus('current')
if mibBuilder.loadTexts: exciterStatusTable.setDescription('Exciter status values.')
exciterStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excStatusExcIdx"))
if mibBuilder.loadTexts: exciterStatusEntry.setStatus('current')
if mibBuilder.loadTexts: exciterStatusEntry.setDescription('A row (an entry) for one exciter.')
excStatusExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 3), IndexAB())
if mibBuilder.loadTexts: excStatusExcIdx.setStatus('current')
if mibBuilder.loadTexts: excStatusExcIdx.setDescription('The dedicated exciter (A/B).')
excStatusRfOutputAgcRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 4), FloatingPoint()).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfOutputAgcRegulation.setStatus('current')
if mibBuilder.loadTexts: excStatusRfOutputAgcRegulation.setDescription('Shows the operating point of the RF regulator. The shown value should be around 50 per cent.')
excStatusRfIqAdjustAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notAdjusted", 1), ("inProgress", 2), ("adjusted", 3)))).setUnits('Percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfIqAdjustAuto.setStatus('current')
if mibBuilder.loadTexts: excStatusRfIqAdjustAuto.setDescription('Automatic I/Q-Adjust.')
excStatusRfIqAdjustLO1Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 6), FloatingPoint()).setUnits('MHz').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusRfIqAdjustLO1Frequency.setStatus('current')
if mibBuilder.loadTexts: excStatusRfIqAdjustLO1Frequency.setDescription('Modulator LO1.')
excStatusNominalPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 7), Integer32()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excStatusNominalPower.setStatus('current')
if mibBuilder.loadTexts: excStatusNominalPower.setDescription('Description.')
excStatusVSWR = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 9), FloatingPoint()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusVSWR.setStatus('current')
if mibBuilder.loadTexts: excStatusVSWR.setDescription('Voltage Standing Wave Ratio')
excStatusSfnDelayProcessing = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 13), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayProcessing.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayProcessing.setDescription('The Minimum signal transmit time through the exciter.\n                This delay depends on the DVB transmission parameters.')
excStatusSfnDelayDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 14), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayDynamic.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayDynamic.setDescription('The period of time by which signal processing is artificially delayed\n                so that the desired time of transmission is obtained.')
excStatusSfnDelayNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 15), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayNetwork.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayNetwork.setDescription('The signal propagation time between the play-out center\n                (MIP inserter) and the exciter input. This delay depends\n                on the transmission path used.')
excStatusSfnDelayTxOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 16), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayTxOffset.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayTxOffset.setDescription('An individual transmitter specific delay. It can be adjusted\n                via data carousel of the SFN adapter. It is true for a\n                specific transmitter address.')
excStatusSfnDelayMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 17), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayMaximum.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayMaximum.setDescription('The period of time between the signal leaving the play-out center\n                (MIP inserter) and its regular transmission at the antenna.\n                This delay is set in the MIP inserter and serves as a basis for\n                all the transmitters in the SFN.')
excStatusSfnDelayTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 18), FloatingPoint()).setUnits('Microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusSfnDelayTotal.setStatus('current')
if mibBuilder.loadTexts: excStatusSfnDelayTotal.setDescription('The actual signal transit time through the exciter.\n                This is derived from the sum of static-, dynamic-, \n                offset- and processing delay.')
excStatusAmplifierControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusAmplifierControl.setStatus('current')
if mibBuilder.loadTexts: excStatusAmplifierControl.setDescription('Amplifier control status')
excStatusReqDataRateHP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 30), Integer32()).setUnits('bit per seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusReqDataRateHP.setStatus('current')
if mibBuilder.loadTexts: excStatusReqDataRateHP.setDescription('Required data rate on HP input\n                with respect to the current TPS settings.')
excStatusReqDataRateLP = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 31), Integer32()).setUnits('bit per seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusReqDataRateLP.setStatus('current')
if mibBuilder.loadTexts: excStatusReqDataRateLP.setDescription('Required data rate on LP input\n                with respect to the current TPS settings.')
excStatusFailDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 20, 1, 40), FailDelayStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excStatusFailDelay.setStatus('current')
if mibBuilder.loadTexts: excStatusFailDelay.setDescription('Shows whether the fail delay time is qualified.')
exciterPrecorrectionTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21), )
if mibBuilder.loadTexts: exciterPrecorrectionTable.setStatus('current')
if mibBuilder.loadTexts: exciterPrecorrectionTable.setDescription('Exciter status values.')
exciterPrecorrectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excPrecExcIdx"))
if mibBuilder.loadTexts: exciterPrecorrectionEntry.setStatus('current')
if mibBuilder.loadTexts: exciterPrecorrectionEntry.setDescription('A row (an entry) for one exciter.')
excPrecExcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 3), IndexAB())
if mibBuilder.loadTexts: excPrecExcIdx.setStatus('current')
if mibBuilder.loadTexts: excPrecExcIdx.setDescription('The dedicated exciter (A/B).')
excPrecLinCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinCorrection.setStatus('current')
if mibBuilder.loadTexts: excPrecLinCorrection.setDescription('Switches on/turns off the linear precorrector.')
excPrecLinAutomaticADE = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinAutomaticADE.setStatus('current')
if mibBuilder.loadTexts: excPrecLinAutomaticADE.setDescription('Enables /disables the automatic precorrector. To get the ADE in work linear precorrection has to be switched on.')
excPrecLinMaxAmplitudeRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 6), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinMaxAmplitudeRipple.setStatus('current')
if mibBuilder.loadTexts: excPrecLinMaxAmplitudeRipple.setDescription('Sets te maximum ripple for automatic amplitude correction (0.0 ... 2.0).')
excPrecLinMaxGroupDelayRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setUnits('Nanoseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecLinMaxGroupDelayRipple.setStatus('current')
if mibBuilder.loadTexts: excPrecLinMaxGroupDelayRipple.setDescription('Sets the maximum ripple for automatic group delay correction.')
excPrecLinAmplitudeRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 8), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinAmplitudeRipple.setStatus('current')
if mibBuilder.loadTexts: excPrecLinAmplitudeRipple.setDescription('Shows the current amplitude ripple.')
excPrecLinGroupDelayRipple = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 9), Integer32()).setUnits('Nanoseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinGroupDelayRipple.setStatus('current')
if mibBuilder.loadTexts: excPrecLinGroupDelayRipple.setDescription('Shows the current group delay ripple.')
excPrecLinInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tooHigh", 1), ("ok", 2), ("tooLow", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinInputLevel.setStatus('current')
if mibBuilder.loadTexts: excPrecLinInputLevel.setDescription('Shows the state of the feedback signal from the measurement point between output stage and antenna.')
excPrecLinAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("calculate", 3), ("measure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecLinAutomatic.setStatus('current')
if mibBuilder.loadTexts: excPrecLinAutomatic.setDescription('Shows if the automatic precorrector works properly.')
excPrecNonlinCorrection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 12), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinCorrection.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinCorrection.setDescription('Switches on/turns off the nonlinear precorrector.')
excPrecNonlinAutomaticADE = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("automatic", 2), ("adaptive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinAutomaticADE.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinAutomaticADE.setDescription('Enables /disables the automatic precorrector. To get the ADE in work nonlinear precorrection has to be switched on.')
excPrecNonlinThresholdShoulders = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 14), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecNonlinThresholdShoulders.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinThresholdShoulders.setDescription('The target shoulder distance for ADE (0.0 ... 40.0).')
excPrecNonlinShoulderLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 15), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinShoulderLeft.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinShoulderLeft.setDescription('Displays the current measurement for the left handed shoulder distance.')
excPrecNonlinShoulderRight = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 16), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinShoulderRight.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinShoulderRight.setDescription('Displays the current measurement of the right handed shoulder.')
excPrecNonlinInputLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("tooHigh", 1), ("ok", 2), ("tooLow", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinInputLevel.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinInputLevel.setDescription('Shows the state of the feedback signal from the measurement point between output stage and antenna.')
excPrecNonlinAutomatic = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("active", 2), ("calculate", 3), ("measure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecNonlinAutomatic.setStatus('current')
if mibBuilder.loadTexts: excPrecNonlinAutomatic.setDescription('Shows if the automatic precorrector works properly.')
excPrecUserState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 100), EqualizerCalibrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecUserState.setStatus('current')
if mibBuilder.loadTexts: excPrecUserState.setDescription('status of the user precorrection settings')
excPrecFactoryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 101), EqualizerCalibrationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excPrecFactoryState.setStatus('current')
if mibBuilder.loadTexts: excPrecFactoryState.setDescription('status of the factory precorrection settings')
excPrecRestoreCurrentSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 102), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecRestoreCurrentSettings.setStatus('current')
if mibBuilder.loadTexts: excPrecRestoreCurrentSettings.setDescription('restores current factory precorrection setting')
excPrecRestoreAllSettings = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 21, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stop", 1), ("start", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: excPrecRestoreAllSettings.setStatus('current')
if mibBuilder.loadTexts: excPrecRestoreAllSettings.setDescription('restores all factory precorrection settings')
configurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30), )
if mibBuilder.loadTexts: configurationTable.setStatus('current')
if mibBuilder.loadTexts: configurationTable.setDescription('Table for Type Configuration parameters.')
configurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "configTvStandardIdx"))
if mibBuilder.loadTexts: configurationEntry.setStatus('current')
if mibBuilder.loadTexts: configurationEntry.setDescription('An entry for the Type Configuration parameters.')
configTvStandardIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 3), TvStandard())
if mibBuilder.loadTexts: configTvStandardIdx.setStatus('current')
if mibBuilder.loadTexts: configTvStandardIdx.setDescription('The index for the TV standard.')
configTvStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 5), TvStandard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configTvStandardName.setStatus('current')
if mibBuilder.loadTexts: configTvStandardName.setDescription('The name of the TV standard as a text.')
configRxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160000000, 910000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configRxFrequency.setStatus('current')
if mibBuilder.loadTexts: configRxFrequency.setDescription('The input frequency for input 1.')
configFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configFrequency.setStatus('current')
if mibBuilder.loadTexts: configFrequency.setDescription('The output frequency for input 1.')
configPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 8), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: configPower.setStatus('current')
if mibBuilder.loadTexts: configPower.setDescription('The output power (0.0 ... 2500.0)  for input 1.')
configInputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 30, 1, 9), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: configInputSource.setStatus('current')
if mibBuilder.loadTexts: configInputSource.setDescription('The source for input 1.')
timeSchedulerTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31), )
if mibBuilder.loadTexts: timeSchedulerTable.setStatus('current')
if mibBuilder.loadTexts: timeSchedulerTable.setDescription('Table for Time Scheduler parameters.')
timeSchedulerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "schedulerDateTimeIdx"))
if mibBuilder.loadTexts: timeSchedulerEntry.setStatus('current')
if mibBuilder.loadTexts: timeSchedulerEntry.setDescription("An entry in the table for the Time Scheduler parameters.\n                \n                A row in this table is created by setting the value of schedulerRowStatus to \n                'createAndGo' or 'createAndWait'.\n                \n                A row in this table is deleted by setting the value of schedulerRowStatus to \n                'destroy'.")
schedulerDateTimeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 3), DateAndTime())
if mibBuilder.loadTexts: schedulerDateTimeIdx.setStatus('current')
if mibBuilder.loadTexts: schedulerDateTimeIdx.setDescription('The DateAndTime index.\n                \n                Note: Deci-seconds different from 0 and UTC values are ignored.\n                      The index is implemented as a Fixed length string of 8 components. The last\n                      component (Deci-seconds) is always 0.\n                Example:\n                      The DateTime of 2008-9-15,17:45:30.0 \n                      has the index: 7.216.9.15.17.45.30.0\n                ')
schedulerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerRowStatus.setStatus('current')
if mibBuilder.loadTexts: schedulerRowStatus.setDescription('This object is used to create and delete rows in the timeSchedulerTable.')
schedulerEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daily", 1), ("once", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerEvent.setStatus('current')
if mibBuilder.loadTexts: schedulerEvent.setDescription('The event type.')
schedulerDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: schedulerDateTime.setStatus('current')
if mibBuilder.loadTexts: schedulerDateTime.setDescription('The start date and the time of a daily or one-time event.')
schedulerTvStandard = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 31, 1, 8), TvStandard()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: schedulerTvStandard.setStatus('current')
if mibBuilder.loadTexts: schedulerTvStandard.setDescription('The TV standard.')
configuration2Table = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32), )
if mibBuilder.loadTexts: configuration2Table.setStatus('current')
if mibBuilder.loadTexts: configuration2Table.setDescription('Table for Type Configuration parameters of input 2.')
configuration2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1), )
configurationEntry.registerAugmentions(("RS-XX8000-DVB-TX-MIB", "configuration2Entry"))
configuration2Entry.setIndexNames(*configurationEntry.getIndexNames())
if mibBuilder.loadTexts: configuration2Entry.setStatus('current')
if mibBuilder.loadTexts: configuration2Entry.setDescription('An entry for the Type Configuration parameters of input 2.')
config2TvStandardName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 5), TvStandard()).setMaxAccess("readonly")
if mibBuilder.loadTexts: config2TvStandardName.setStatus('current')
if mibBuilder.loadTexts: config2TvStandardName.setDescription('The name of the TV standard as a text.')
config2RxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(160000000, 910000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2RxFrequency.setStatus('current')
if mibBuilder.loadTexts: config2RxFrequency.setDescription('The input frequency for input 2.')
config2Frequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(47000000, 1500000000))).setUnits('Hz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2Frequency.setStatus('current')
if mibBuilder.loadTexts: config2Frequency.setDescription('The output frequency for input 2.')
config2Power = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 8), FloatingPoint()).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2Power.setStatus('current')
if mibBuilder.loadTexts: config2Power.setDescription('The output power (0.0 ... 2500.0)  for input 2.')
config2InputSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 32, 1, 9), InputSource()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: config2InputSource.setStatus('current')
if mibBuilder.loadTexts: config2InputSource.setDescription('The source for input 2.')
productInfoTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100), )
if mibBuilder.loadTexts: productInfoTable.setStatus('current')
if mibBuilder.loadTexts: productInfoTable.setDescription('The table for product typeplates.')
productInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "prodInfoModuleIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoDeviceIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "prodInfoAmpIdx"))
if mibBuilder.loadTexts: productInfoEntry.setStatus('current')
if mibBuilder.loadTexts: productInfoEntry.setDescription('A row (an entry) for one typeplate.')
prodInfoModuleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 1), ProdInfoModuleNameTv())
if mibBuilder.loadTexts: prodInfoModuleIdx.setStatus('current')
if mibBuilder.loadTexts: prodInfoModuleIdx.setDescription('The module index.')
prodInfoDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 2), IndexAB())
if mibBuilder.loadTexts: prodInfoDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: prodInfoDeviceIdx.setDescription('The dedicated device (A/B).')
prodInfoRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 3), IndexRack())
if mibBuilder.loadTexts: prodInfoRackIdx.setStatus('current')
if mibBuilder.loadTexts: prodInfoRackIdx.setDescription('The rack number (1..10).')
prodInfoAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 4), IndexAmplifier())
if mibBuilder.loadTexts: prodInfoAmpIdx.setStatus('current')
if mibBuilder.loadTexts: prodInfoAmpIdx.setDescription('Amplifier Index')
prodInfoModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 5), ProdInfoModuleNameTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoModuleName.setStatus('current')
if mibBuilder.loadTexts: prodInfoModuleName.setDescription('The name of the module as a text.')
prodInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 6), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: prodInfoSerialNumber.setDescription('The serial number of the subdevice.')
prodInfoIdentNumberSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 7), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoIdentNumberSW.setStatus('current')
if mibBuilder.loadTexts: prodInfoIdentNumberSW.setDescription('The Rohde&Schwarz identification number of the software, for example 2094.2090.02.')
prodInfoVersionNumberSW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 8), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoVersionNumberSW.setStatus('current')
if mibBuilder.loadTexts: prodInfoVersionNumberSW.setDescription('The Rohde&Schwarz revision number of the software, for example 1.2.1.')
prodInfoIdentNumberHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 9), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoIdentNumberHW.setStatus('current')
if mibBuilder.loadTexts: prodInfoIdentNumberHW.setDescription('The Rohde&Schwarz identification number of the hardware, for example 2095.8007.02 (NetCCU).')
prodInfoVersionNumberHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 10), ReadableString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prodInfoVersionNumberHW.setStatus('current')
if mibBuilder.loadTexts: prodInfoVersionNumberHW.setDescription('The Rohde&Schwarz revision number (product index) of the hardware, for example 03.03.')
productInfoProductDateHW = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 3, 100, 1, 11), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productInfoProductDateHW.setStatus('current')
if mibBuilder.loadTexts: productInfoProductDateHW.setDescription('The Rohde&Schwarz production date of the hardware,')
logbook = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4))
netCCUNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 1), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCUNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: netCCUNumberOfEntries.setDescription('The number of entries in logbook.')
netCCULogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 2), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netCCULogbookClear.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookClear.setDescription('Clear the logbook.\n                idle(1)    --> ready\n                clear(2)   --> do clear now\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
netCCULogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3), )
if mibBuilder.loadTexts: netCCULogbookTable.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookTable.setDescription('NetCCU logbook table.')
netCCULogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "netCCULogbookEntryIdx"))
if mibBuilder.loadTexts: netCCULogbookEntry.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookEntry.setDescription('This is a entry in the logbook.')
netCCULogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: netCCULogbookEntryIdx.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookEntryIdx.setDescription('This is an increasing number from 1 to maximum. It is used as an index column for SNMP.')
netCCULogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookEntryNbr.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookEntryNbr.setDescription('This is the number of the logbook entry. It is an decreasing number from maximum down to 1.')
netCCULogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookType.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookType.setDescription('Can either be Fault, Warning or State.')
netCCULogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookSlope.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookSlope.setDescription('Either set (event raises) or reset (event disappears)')
netCCULogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 5), LogbookEntryMessagesNetCCU()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookMessage.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookMessage.setDescription('See RS-XX8000-COMMON-MIB - TextualConvention - LogbookEntryMessagesNetCCU for details.')
netCCULogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 3, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netCCULogbookDateTime.setStatus('current')
if mibBuilder.loadTexts: netCCULogbookDateTime.setDescription('netCCULogbookDateTime')
exciterANumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 4), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterANumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: exciterANumberOfEntries.setDescription('The number of entries in logbook.')
exciterALogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 5), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exciterALogbookClear.setStatus('current')
if mibBuilder.loadTexts: exciterALogbookClear.setDescription('Clear the logbook.\n                idle(1)    --> ready\n                clear(2)   --> do clear now\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
exciterALogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6), )
if mibBuilder.loadTexts: exciterALogbookTable.setStatus('current')
if mibBuilder.loadTexts: exciterALogbookTable.setDescription('ExciterA logbook table.')
exciterALogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excALogbookEntryIdx"))
if mibBuilder.loadTexts: exciterALogbookEntry.setStatus('current')
if mibBuilder.loadTexts: exciterALogbookEntry.setDescription('This is a entry in the logbook.')
excALogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: excALogbookEntryIdx.setStatus('current')
if mibBuilder.loadTexts: excALogbookEntryIdx.setDescription('This is an increasing number from 1 to maximum. It is used as an index column for SNMP.')
excALogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookEntryNbr.setStatus('current')
if mibBuilder.loadTexts: excALogbookEntryNbr.setDescription('This is the number of the logbook entry. It is an decreasing number from maximum down to 1.')
excALogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookType.setStatus('current')
if mibBuilder.loadTexts: excALogbookType.setDescription('Can either be Fault, Warning or State.')
excALogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookSlope.setStatus('current')
if mibBuilder.loadTexts: excALogbookSlope.setDescription('Either set (event raises) or reset (event disappears)')
excALogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 5), LogbookEntryMessagesExcTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookMessage.setStatus('current')
if mibBuilder.loadTexts: excALogbookMessage.setDescription('See RS-XX8000-COMMON-MIB - TextualConvention for details.')
excALogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 6, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excALogbookDateTime.setStatus('current')
if mibBuilder.loadTexts: excALogbookDateTime.setDescription('The time of the logbook entry.')
outputstageANumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 7), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageANumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: outputstageANumberOfEntries.setDescription('The number of entries in logbook.')
outputstageALogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputstageALogbookClear.setStatus('current')
if mibBuilder.loadTexts: outputstageALogbookClear.setDescription('Clear the logbook.\n                idle(1)    --> ready\n                clear(2)   --> do clear now\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
outputstageALogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9), )
if mibBuilder.loadTexts: outputstageALogbookTable.setStatus('current')
if mibBuilder.loadTexts: outputstageALogbookTable.setDescription('OutputstageA logbook table.')
outputstageALogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostALogbookEntryIdx"))
if mibBuilder.loadTexts: outputstageALogbookEntry.setStatus('current')
if mibBuilder.loadTexts: outputstageALogbookEntry.setDescription('This is a entry in the logbook.')
ostALogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: ostALogbookEntryIdx.setStatus('current')
if mibBuilder.loadTexts: ostALogbookEntryIdx.setDescription('This is an increasing number from 1 to maximum. It is used as an index column for SNMP.')
ostALogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookEntryNbr.setStatus('current')
if mibBuilder.loadTexts: ostALogbookEntryNbr.setDescription('This is the number of the logbook entry. It is an decreasing number from maximum down to 1.')
ostALogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookType.setStatus('current')
if mibBuilder.loadTexts: ostALogbookType.setDescription('Can either be Fault, Warning or State.')
ostALogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookSlope.setStatus('current')
if mibBuilder.loadTexts: ostALogbookSlope.setDescription('Either set (event raises) or reset (event disappears)')
ostALogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 5), LogbookEntryMessagesOST()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookMessage.setStatus('current')
if mibBuilder.loadTexts: ostALogbookMessage.setDescription('See RS-XX8000-COMMON-MIB - TextualConvention for details.')
ostALogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 9, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostALogbookDateTime.setStatus('current')
if mibBuilder.loadTexts: ostALogbookDateTime.setDescription('The time of the logbook entry.')
exciterBNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 10), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: exciterBNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: exciterBNumberOfEntries.setDescription('The number of entries in logbook.')
exciterBLogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 11), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: exciterBLogbookClear.setStatus('current')
if mibBuilder.loadTexts: exciterBLogbookClear.setDescription('Clear the logbook.\n                idle(1)    --> ready\n                clear(2)   --> do clear now\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
exciterBLogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12), )
if mibBuilder.loadTexts: exciterBLogbookTable.setStatus('current')
if mibBuilder.loadTexts: exciterBLogbookTable.setDescription('ExciterB logbook table.')
exciterBLogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "excBLogbookEntryIdx"))
if mibBuilder.loadTexts: exciterBLogbookEntry.setStatus('current')
if mibBuilder.loadTexts: exciterBLogbookEntry.setDescription('This is a entry in the logbook.')
excBLogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: excBLogbookEntryIdx.setStatus('current')
if mibBuilder.loadTexts: excBLogbookEntryIdx.setDescription('This is an increasing number from 1 to maximum. It is used as an index column for SNMP.')
excBLogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookEntryNbr.setStatus('current')
if mibBuilder.loadTexts: excBLogbookEntryNbr.setDescription('This is the number of the logbook entry. It is an decreasing number from maximum down to 1.')
excBLogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookType.setStatus('current')
if mibBuilder.loadTexts: excBLogbookType.setDescription('Can either be Fault, Warning or State.')
excBLogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookSlope.setStatus('current')
if mibBuilder.loadTexts: excBLogbookSlope.setDescription('Either set (event raises) or reset (event disappears)')
excBLogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 5), LogbookEntryMessagesExcTv()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookMessage.setStatus('current')
if mibBuilder.loadTexts: excBLogbookMessage.setDescription('See RS-XX8000-COMMON-MIB - TextualConvention for details.')
excBLogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 12, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: excBLogbookDateTime.setStatus('current')
if mibBuilder.loadTexts: excBLogbookDateTime.setDescription('The time of the logbook entry.')
outputstageBNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 13), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputstageBNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: outputstageBNumberOfEntries.setDescription('The number of entries in logbook.')
outputstageBLogbookClear = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 14), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputstageBLogbookClear.setStatus('current')
if mibBuilder.loadTexts: outputstageBLogbookClear.setDescription('Clear the logbook.\n                idle(1)    --> ready\n                clear(2)   --> do clear now\n                \n                A GET will always return idle(1). A SET idle(1) will return NO_ERROR without doing anything.')
outputstageBLogbookTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15), )
if mibBuilder.loadTexts: outputstageBLogbookTable.setStatus('current')
if mibBuilder.loadTexts: outputstageBLogbookTable.setDescription('OutputstageB logbook table.')
outputstageBLogbookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostBLogbookEntryIdx"))
if mibBuilder.loadTexts: outputstageBLogbookEntry.setStatus('current')
if mibBuilder.loadTexts: outputstageBLogbookEntry.setDescription('This is a entry in the logbook.')
ostBLogbookEntryIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 1), LogbookMaxEntryNumber())
if mibBuilder.loadTexts: ostBLogbookEntryIdx.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookEntryIdx.setDescription('This is an increasing number from 1 to 128. It is used as an index column for SNMP.')
ostBLogbookEntryNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 2), LogbookMaxEntryNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookEntryNbr.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookEntryNbr.setDescription('This is the number of the logbook entry. It is an decreasing number from max 128 down to 1.')
ostBLogbookType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 3), EventClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookType.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookType.setDescription('Can either be Fault, Warning or State.')
ostBLogbookSlope = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 4), LogbookEntrySlope()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookSlope.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookSlope.setDescription('Either set (event raises) or reset (event disappears)')
ostBLogbookMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 5), LogbookEntryMessagesOST()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookMessage.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookMessage.setDescription('See RS-XX8000-COMMON-MIB - TextualConvention for details.')
ostBLogbookDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 4, 15, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ostBLogbookDateTime.setStatus('current')
if mibBuilder.loadTexts: ostBLogbookDateTime.setDescription('The time of the logbook entry.')
rfProbesTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5), )
if mibBuilder.loadTexts: rfProbesTable.setStatus('current')
if mibBuilder.loadTexts: rfProbesTable.setDescription('This table contains all commands for the RF probes.')
rfProbesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "rfProbesOstIdx"))
if mibBuilder.loadTexts: rfProbesEntry.setStatus('current')
if mibBuilder.loadTexts: rfProbesEntry.setDescription('An entry for a designated transmitter and device.')
rfProbesNetCCURfProbe1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 1), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbesNetCCURfProbe1.setStatus('current')
if mibBuilder.loadTexts: rfProbesNetCCURfProbe1.setDescription('Current voltage on RF Probe 1.')
rfProbesNetCCURfProbe2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 2), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbesNetCCURfProbe2.setStatus('current')
if mibBuilder.loadTexts: rfProbesNetCCURfProbe2.setDescription('Current voltage on RF Probe 2.')
rfProbesAntFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 3), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdNominal.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdNominal.setDescription('This sets the nominal value [W] of the transmitter (to antenna).')
rfProbesAntFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 4), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdWarningLimit.setDescription('This sets the warning limit for the transmitters RF control (to antenna).')
rfProbesAntFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 5), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdFailLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdFailLimit.setDescription('This sets the fault limit for the transmitters RF control (to antenna).')
rfProbesAntFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdDelayTimeRfFail.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdDelayTimeRfFail.setDescription('This sets the delay time for the RF Fail control (to antenna).')
rfProbesAntFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 7), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdSetOffset.setDescription('This triggers Set Offset.')
rfProbesAntFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 8), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntFwdSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntFwdSetGain.setDescription('This triggers Set Gain.')
rfProbesAntReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 9), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntReflWarningLimit.setDescription('This sets the warning limit for the transmitters reflection control (to antenna).')
rfProbesAntReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 10), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntReflSetOffset.setDescription('This triggers Set Offset.')
rfProbesAntReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 11), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesAntReflSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesAntReflSetGain.setDescription('This triggers Set Gain.')
rfProbesDLFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 12), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdNominal.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdNominal.setDescription('This sets the nominal value [W] of the transmitter (to dummyload).')
rfProbesDLFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 13), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdWarningLimit.setDescription('This sets the warning limit for the transmitters RF control (to dummyload).')
rfProbesDLFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 14), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdFailLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdFailLimit.setDescription('This sets the fault limit for the transmitters RF control (to dummyload).')
rfProbesDLFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdDelayTimeRfFail.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdDelayTimeRfFail.setDescription('This sets the delay time for the RF Fail control (to dummyload).')
rfProbesDLFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 16), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdSetOffset.setDescription('This triggers Set Offset.')
rfProbesDLFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 17), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLFwdSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLFwdSetGain.setDescription('This triggers Set Gain.')
rfProbesDLReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 18), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLReflWarningLimit.setDescription('This sets the warning limit for the transmitters reflection control (to dummyload).')
rfProbesDLReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 19), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLReflSetOffset.setDescription('This triggers Set Offset.')
rfProbesDLReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 20), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesDLReflSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesDLReflSetGain.setDescription('This triggers Set Gain.')
rfProbesOstIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 21), IndexAB())
if mibBuilder.loadTexts: rfProbesOstIdx.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstIdx.setDescription('The dedicated outputstage (A/B).')
rfProbesOstFwdNominal = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 22), FloatingPoint()).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdNominal.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdNominal.setDescription('This sets the nominal value [W] of the outputstage.')
rfProbesOstFwdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 23), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdWarningLimit.setDescription('This sets the warning limit for the outputstage RF control.')
rfProbesOstFwdFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 24), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdFailLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdFailLimit.setDescription('This sets the fault limit for the outputstage RF control.')
rfProbesOstFwdDelayTimeRfFail = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdDelayTimeRfFail.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdDelayTimeRfFail.setDescription('This sets the delay time for the outputstage RF Fail control.')
rfProbesOstFwdSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 26), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdSetOffset.setDescription('This triggers Set Offset.')
rfProbesOstFwdSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 27), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstFwdSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstFwdSetGain.setDescription('This triggers Set Gain.')
rfProbesOstReflWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 28), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstReflWarningLimit.setDescription('This sets the warning limit for the outputstage reflection control.')
rfProbesOstReflSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 29), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstReflSetOffset.setDescription('This triggers Set Offset.')
rfProbesOstReflSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 5, 1, 30), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbesOstReflSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbesOstReflSetGain.setDescription('This triggers Set Gain.')
rackTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6), )
if mibBuilder.loadTexts: rackTable.setStatus('current')
if mibBuilder.loadTexts: rackTable.setDescription('This table contains important commands for the racks.')
rackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "ostDeviceIdx"), (0, "RS-XX8000-DVB-TX-MIB", "rackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "rackRfProbeIdx"))
if mibBuilder.loadTexts: rackEntry.setStatus('current')
if mibBuilder.loadTexts: rackEntry.setDescription("An entry for a designated rack or rack's rf probe.")
ostDeviceIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 2), IndexAB())
if mibBuilder.loadTexts: ostDeviceIdx.setStatus('current')
if mibBuilder.loadTexts: ostDeviceIdx.setDescription('The index to address outputstageA and outputstageB.')
rackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 3), IndexRack())
if mibBuilder.loadTexts: rackIdx.setStatus('current')
if mibBuilder.loadTexts: rackIdx.setDescription('The index to address the racks.')
rackRfProbeIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("reflected", 2))))
if mibBuilder.loadTexts: rackRfProbeIdx.setStatus('current')
if mibBuilder.loadTexts: rackRfProbeIdx.setDescription('The index to address forward and reflected RF probes.\n                For not RF probe parameters this index is always 1.')
amplifiersPerRack = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: amplifiersPerRack.setStatus('current')
if mibBuilder.loadTexts: amplifiersPerRack.setDescription('The number of amplifiers of a rack.')
rackRfEventSignalling = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackRfEventSignalling.setStatus('current')
if mibBuilder.loadTexts: rackRfEventSignalling.setDescription('This configures whether to signal rf events or not.')
rackReferenceVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 8), FloatingPoint()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackReferenceVoltage.setStatus('current')
if mibBuilder.loadTexts: rackReferenceVoltage.setDescription('This parameter controls the reference voltage (31.0 ... 100.0).')
amplifiersPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 9), FloatingPoint()).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: amplifiersPowerSupply.setStatus('current')
if mibBuilder.loadTexts: amplifiersPowerSupply.setDescription('This parameter controls the power supplies of the amplifier \n                within the rack (31.0 ... 100.0).')
rackGeneralPurposeInput = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unused", 1), ("doorOpen", 2), ("extCoolingWarning", 3), ("extCoolingFault", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackGeneralPurposeInput.setStatus('current')
if mibBuilder.loadTexts: rackGeneralPurposeInput.setDescription('Setting of the general purpose input behaviour.')
rackOnOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 20), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rackOnOff.setStatus('current')
if mibBuilder.loadTexts: rackOnOff.setDescription('This switches the rack on/off.')
rfProbePresent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbePresent.setStatus('current')
if mibBuilder.loadTexts: rfProbePresent.setDescription('If the RF probe of this rack is present.')
rfProbeConfigurationLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 51), ReadableString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeConfigurationLabel.setStatus('obsolete')
if mibBuilder.loadTexts: rfProbeConfigurationLabel.setDescription('Name for the measured signal on RF Probe.')
rfProbeConfigurationNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setUnits('W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeConfigurationNominalValue.setStatus('current')
if mibBuilder.loadTexts: rfProbeConfigurationNominalValue.setDescription('The nominal value of the measured signal.')
rfProbeThresholdRfFailLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 55), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdRfFailLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbeThresholdRfFailLimit.setDescription('Fault limit for the RF control (-20.0 ... 0.0).')
rfProbeThresholdTimeoutRfFailCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdTimeoutRfFailCtr.setStatus('current')
if mibBuilder.loadTexts: rfProbeThresholdTimeoutRfFailCtr.setDescription('Timeout for RF Fail Control.')
rfProbeThresholdWarningLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 57), FloatingPoint()).setUnits('dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeThresholdWarningLimit.setStatus('current')
if mibBuilder.loadTexts: rfProbeThresholdWarningLimit.setDescription('Warning limit for the RF control (-20.0 ... 0.0).\n                \n                For reflected probes:\n                Warning limit for the reflection control. This limit is added to the \n                fault limit to generate the real warning limit; e.g. the fault limit \n                is -17.0dB and the warning limit is -3.0dB, so the warning is active \n                on a reflected power higher than -20.0 dB.')
rfProbeCalibrationGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 60), FloatingPoint()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeCalibrationGain.setStatus('current')
if mibBuilder.loadTexts: rfProbeCalibrationGain.setDescription('Measured value of gain calibration.')
rfProbeCalibrationOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 61), FloatingPoint()).setUnits('V').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeCalibrationOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbeCalibrationOffset.setDescription('Measured value of offset calibration.')
rfProbeCalibrationSetGain = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 62), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeCalibrationSetGain.setStatus('current')
if mibBuilder.loadTexts: rfProbeCalibrationSetGain.setDescription('Sets the gain calibration.')
rfProbeCalibrationSetOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 63), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rfProbeCalibrationSetOffset.setStatus('current')
if mibBuilder.loadTexts: rfProbeCalibrationSetOffset.setDescription('Sets the offset calibration.')
rfProbeMeasuredValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 6, 1, 65), FloatingPoint()).setUnits('W').setMaxAccess("readonly")
if mibBuilder.loadTexts: rfProbeMeasuredValue.setStatus('current')
if mibBuilder.loadTexts: rfProbeMeasuredValue.setDescription('Measured forward/reflected power of antenna signal.')
sx801AmplifierTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7), )
if mibBuilder.loadTexts: sx801AmplifierTable.setStatus('current')
if mibBuilder.loadTexts: sx801AmplifierTable.setDescription('Amplifier status values for SX801 amplifiers.')
sx801AmplifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "sx801AmpIdx"))
if mibBuilder.loadTexts: sx801AmplifierEntry.setStatus('current')
if mibBuilder.loadTexts: sx801AmplifierEntry.setDescription('A row (an entry) for one amplifier.')
sx801AmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 1), IndexAmplifier())
if mibBuilder.loadTexts: sx801AmpIdx.setStatus('current')
if mibBuilder.loadTexts: sx801AmpIdx.setDescription('The amplifier index.')
sx801AmpRfOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 2), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRfOut.setStatus('current')
if mibBuilder.loadTexts: sx801AmpRfOut.setDescription('Shows if the amplifier generates an RF or not.\n                off(1): The amplifier output is switched off\n                e.g. because the amplifier gets no input signal or the transmitter has been switched off\n                warning(2): There is an RF but its level is less than the RF warning limit.\n                ok(3): The RF level is greater than the RF warning limit.')
sx801AmpRfIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 3), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRfIn.setStatus('current')
if mibBuilder.loadTexts: sx801AmpRfIn.setDescription('Displays the state of the amplifier input.\n                off(1): no input signal detected\n                warning(2): the level of the input signal is too low or too high.\n                ok(3): input signal is OK.')
sx801AmpReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("warning", 2), ("unknown", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpReflection.setStatus('current')
if mibBuilder.loadTexts: sx801AmpReflection.setDescription(' A reflection on RF output of this Amplifier module has been detected.\n                This leads to a reduction of output power of the amplifier.\n                \n                ')
sx801AmpOn = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("on", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpOn.setStatus('current')
if mibBuilder.loadTexts: sx801AmpOn.setDescription('Shows if the amplifier has been switched on by the control unit.')
sx801AmpAC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 6), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpAC.setStatus('current')
if mibBuilder.loadTexts: sx801AmpAC.setDescription('Shows the state of primary voltage of the power supply.')
sx801AmpCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("off", 1), ("unknown", 2), ("ok", 3), ("fault", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpCommunication.setStatus('current')
if mibBuilder.loadTexts: sx801AmpCommunication.setDescription('Displays if the CAN communication between amplifier and Sx801 is working or not.')
sx801AmpTransistor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 8), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpTransistor.setStatus('current')
if mibBuilder.loadTexts: sx801AmpTransistor.setDescription('A transistor fail is displayed here.\n                For further information please see the amplifiers service menue.')
sx801AmpDriver = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 9), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpDriver.setStatus('current')
if mibBuilder.loadTexts: sx801AmpDriver.setDescription('Shows a failure if one of the internal driver transistors does not work properly.\n                For further information please see the amplifiers service menue.')
sx801AmpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 10), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpTemperature.setStatus('current')
if mibBuilder.loadTexts: sx801AmpTemperature.setDescription('Shows a fault if the temperature of amplifier module is too high.')
sx801AmpBlower = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 11), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpBlower.setStatus('current')
if mibBuilder.loadTexts: sx801AmpBlower.setDescription('Displays the state of the internal blowers.')
sx801AmpRegulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 12), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpRegulation.setStatus('current')
if mibBuilder.loadTexts: sx801AmpRegulation.setDescription('Shows a fault if the amplifier is not able to control its output power.')
sx801AmpUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpUpdate.setStatus('current')
if mibBuilder.loadTexts: sx801AmpUpdate.setDescription('Firmware update is in progress.\n                This will be started automatically during a software update procedure of the transmitter.')
sx801Supply1Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 14), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1Temperature.setStatus('current')
if mibBuilder.loadTexts: sx801Supply1Temperature.setDescription('Shows a fault if the temperature of power supply one is too high.')
sx801Supply2Temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 15), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2Temperature.setStatus('current')
if mibBuilder.loadTexts: sx801Supply2Temperature.setDescription('Shows a fault if the temperature of power supply two is too high.')
sx801SupplyRTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 16), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801SupplyRTemperature.setStatus('current')
if mibBuilder.loadTexts: sx801SupplyRTemperature.setDescription('Shows a fault if the temperature of the reserve power supply is too high.')
sx801Supply1DC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 17), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1DC.setStatus('current')
if mibBuilder.loadTexts: sx801Supply1DC.setDescription('Shows a fault if the output voltage of power supply one is not ok.')
sx801Supply2DC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 18), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2DC.setStatus('current')
if mibBuilder.loadTexts: sx801Supply2DC.setDescription('Shows a fault if the output voltage of power supply two is not ok.')
sx801SupplyRDC = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 19), Sx801AmplifierState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801SupplyRDC.setStatus('current')
if mibBuilder.loadTexts: sx801SupplyRDC.setDescription('Shows a fault if the output voltage of the reserve power supply is not ok.')
sx801AmpValueI1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 50), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI1.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueI1.setDescription('The internal current from transistor pair 1.')
sx801AmpValueI2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 51), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI2.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueI2.setDescription('The internal current from transistor pair 2.')
sx801AmpValueI3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 52), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI3.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueI3.setDescription('The internal current from transistor pair 3.')
sx801AmpValueI4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 53), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueI4.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueI4.setDescription('The internal current from transistor pair 4.')
sx801AmpValueIPre = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 54), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIPre.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueIPre.setDescription('The internal current from preamplifier.')
sx801AmpValueIDrv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 55), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIDrv1.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueIDrv1.setDescription('The internal current from driver transistor pair 1.')
sx801AmpValueIDrv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 56), FloatingPoint()).setUnits('Ampere').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueIDrv2.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueIDrv2.setDescription('The internal current from driver transistor pair 2.')
sx801AmpValuePowerOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 57), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValuePowerOut.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValuePowerOut.setDescription('The base value in Volt to calculate the output power\n                of this amplifier module.')
sx801AmpValueReflection = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 58), FloatingPoint()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueReflection.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueReflection.setDescription('The base value in Volt for detection of reflections.')
sx801AmpValueVRef = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 59), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVRef.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueVRef.setDescription('The internal reference voltage to set the output power.')
sx801AmpValueVReg = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 60), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVReg.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueVReg.setDescription('The internal value for output power regulation.')
sx801AmpValueTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 61), FloatingPoint()).setUnits('degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueTemperature.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueTemperature.setDescription('The internal temperature of Amplifier.\n                In case of L-band amplifier, the shown temperature is valid only,\n                if the amplifier is switched on.')
sx801AmpValueMonAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 62), FloatingPoint()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueMonAtt.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueMonAtt.setDescription('The attenuation of monitoring output on the front of the\n                amplifier module (Amp RF Mon).')
sx801AmpValueVAux1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 63), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVAux1.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueVAux1.setDescription('The voltage power detector 1.')
sx801AmpValueVAux2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 64), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801AmpValueVAux2.setStatus('current')
if mibBuilder.loadTexts: sx801AmpValueVAux2.setDescription('The voltage power detector 2.')
sx801Supply1ValuePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 65), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1ValuePwr.setStatus('current')
if mibBuilder.loadTexts: sx801Supply1ValuePwr.setDescription('The power supply one control voltage.')
sx801Supply2ValuePwr = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 66), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2ValuePwr.setStatus('current')
if mibBuilder.loadTexts: sx801Supply2ValuePwr.setDescription('The power supply two control voltage.')
sx801Supply1ValueDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 67), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply1ValueDc.setStatus('current')
if mibBuilder.loadTexts: sx801Supply1ValueDc.setDescription('The internal supply voltage of transistor path two.\n                In systems with two power supplies this value is equal\n                to the output voltage of supply one.')
sx801Supply2ValueDc = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 1, 7, 1, 68), FloatingPoint()).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: sx801Supply2ValueDc.setStatus('current')
if mibBuilder.loadTexts: sx801Supply2ValueDc.setDescription('The internal supply voltage of transistor path two.\n                In systems with two power supplies this value is equal\n                to the output voltage of supply two.')
rsXx8000DvbTxEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3))
eventTx = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2))
eventsTxV2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0))
if mibBuilder.loadTexts: eventsTxV2.setStatus('current')
if mibBuilder.loadTexts: eventsTxV2.setDescription('Compatibility to SMIv1.')
txSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 1)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txSummaryFault.setStatus('current')
if mibBuilder.loadTexts: txSummaryFault.setDescription('Transmitter Summary Fault')
txSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 2)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txSummaryWarning.setStatus('current')
if mibBuilder.loadTexts: txSummaryWarning.setDescription('Transmitter Summary Warning')
txLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 3)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txLocal.setStatus('current')
if mibBuilder.loadTexts: txLocal.setDescription('Transmitter Local/Remote')
txRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 4)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfOn.setStatus('current')
if mibBuilder.loadTexts: txRfOn.setDescription('Transmitter RF On/Off')
txRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 5)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfOk.setStatus('current')
if mibBuilder.loadTexts: txRfOk.setDescription('Transmitter RF Ok / Not OK')
txParamSetSubDeviceDiffers = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 6)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txParamSetSubDeviceDiffers.setStatus('obsolete')
if mibBuilder.loadTexts: txParamSetSubDeviceDiffers.setDescription('Parameterset of subdevice is different.\n                The currently loaded parameterset is inconsistent because\n                a subdevice (e.g. an exciter) has a different configuration than expected.\n                To correct this, save settings to the current or save a complete new.')
txParamSetValuesChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 7)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txParamSetValuesChanged.setStatus('current')
if mibBuilder.loadTexts: txParamSetValuesChanged.setDescription('Value Of Current Parameterset Changed.\n                The currently loaded parameterset is inconsistent because\n                there were changes happening since the load/save of it.\n                To correct this, save settings to the current or save a complete new.')
txRfLoopProgram = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 8)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfLoopProgram.setStatus('current')
if mibBuilder.loadTexts: txRfLoopProgram.setDescription('NetCCU Loop Program')
txRfLoopReserve = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 9)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfLoopReserve.setStatus('current')
if mibBuilder.loadTexts: txRfLoopReserve.setDescription('NetCCU Loop Reserve')
txRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 10)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfWarning.setStatus('current')
if mibBuilder.loadTexts: txRfWarning.setDescription('NetCCU RF Warning')
txReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 11)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txReflectionWarning.setStatus('current')
if mibBuilder.loadTexts: txReflectionWarning.setDescription('NetCCU Reflection Warning')
txNetCCUFanFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 12)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUFanFault.setStatus('current')
if mibBuilder.loadTexts: txNetCCUFanFault.setDescription('NetCCU Fan Fault.\n                This is valid, if Fan Control is switched on (see menu NetCCU Setup - Common).')
txNetCCUPowerSupply = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 13)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUPowerSupply.setStatus('current')
if mibBuilder.loadTexts: txNetCCUPowerSupply.setDescription('NetCCU Power Supply')
txRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 14)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txRfFail.setStatus('current')
if mibBuilder.loadTexts: txRfFail.setDescription('NetCCU RF Fail')
txReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 15)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txReflectionFault.setStatus('current')
if mibBuilder.loadTexts: txReflectionFault.setDescription('NetCCU Reflection Fault')
txNetCCUBoardTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 16)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUBoardTemperatureFault.setStatus('deprecated')
if mibBuilder.loadTexts: txNetCCUBoardTemperatureFault.setDescription('NetCCU Board Temperature Fault\n                \n                deprecated: this information is now handled as a warning\n                (txNetCCUBoardTemperatureWarning)')
txNetCCUNoConnectionToExcA = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 17)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcA.setStatus('current')
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcA.setDescription('NetCCU Connection To ExciterA Faulty')
txNetCCUNoConnectionToOstA = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 18)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstA.setStatus('current')
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstA.setDescription('NetCCU Connection To OutputstageA Faulty')
txNetCCUNoConnectionToExcB = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 19)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcB.setStatus('current')
if mibBuilder.loadTexts: txNetCCUNoConnectionToExcB.setDescription('NetCCU Connection To ExciterB Faulty')
txNetCCUNoConnectionToOstB = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 20)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstB.setStatus('current')
if mibBuilder.loadTexts: txNetCCUNoConnectionToOstB.setDescription('NetCCU Connection To OutputstageB Faulty')
txAutomaticExcReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 21)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcReady.setStatus('current')
if mibBuilder.loadTexts: txAutomaticExcReady.setDescription('Exciter Automatic Ready.')
txAutomaticExcChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 22)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcChanged.setStatus('current')
if mibBuilder.loadTexts: txAutomaticExcChanged.setDescription('Exciter Automatic Changed.')
txAutomaticExcFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 23)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticExcFault.setStatus('current')
if mibBuilder.loadTexts: txAutomaticExcFault.setDescription('Exciter Automatic Fault.')
txAutomaticOstReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 24)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstReady.setStatus('current')
if mibBuilder.loadTexts: txAutomaticOstReady.setDescription('Outputstage Automatic Ready.\n                \n                This paramter is only available for systems with an automatic output switch.')
txAutomaticOstChanged = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 25)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstChanged.setStatus('current')
if mibBuilder.loadTexts: txAutomaticOstChanged.setDescription('Outputstage Automatic Changed.\n                \n                This paramter is only available for systems with an automatic output switch.')
txAutomaticOstFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 26)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txAutomaticOstFault.setStatus('current')
if mibBuilder.loadTexts: txAutomaticOstFault.setDescription('Outputstage Automatic Fault.\n                \n                This paramter is only available for systems with an automatic output switch.')
txNetCCUBoardTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 27)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txNetCCUBoardTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: txNetCCUBoardTemperatureWarning.setDescription('NetCCU Board Temperature Warning')
txInternalPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 30)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txInternalPowerSupplyWarning.setStatus('current')
if mibBuilder.loadTexts: txInternalPowerSupplyWarning.setDescription('NetCCU internal Power Supply warning')
txExternalPowerSupplyWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 31)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txExternalPowerSupplyWarning.setStatus('current')
if mibBuilder.loadTexts: txExternalPowerSupplyWarning.setDescription('NetCCU external (additional) Power Supply warning')
txModeSwitchOverStarted = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 35)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverStarted.setStatus('current')
if mibBuilder.loadTexts: txModeSwitchOverStarted.setDescription('Switch over of TX mode started.')
txModeSwitchOverEnded = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 36)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverEnded.setStatus('current')
if mibBuilder.loadTexts: txModeSwitchOverEnded.setDescription('Switch over of TX mode ended.')
txModeInconsistent = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 37)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeInconsistent.setStatus('current')
if mibBuilder.loadTexts: txModeInconsistent.setDescription('An inconsistency in configuration of TX mode was detected.\n                The CCU and exiter configurations are incompatible.')
txModeSwitchOverFailed = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 38)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"))
if mibBuilder.loadTexts: txModeSwitchOverFailed.setStatus('current')
if mibBuilder.loadTexts: txModeSwitchOverFailed.setDescription('Switch over of TX mode failed.\n                Please check whether the configurations of CCU and exciter are correct.')
txExcSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 100)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSummaryFault.setStatus('current')
if mibBuilder.loadTexts: txExcSummaryFault.setDescription('Exciter Summary Fault')
txExcSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 101)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSummaryWarning.setStatus('current')
if mibBuilder.loadTexts: txExcSummaryWarning.setDescription('Exciter Summary Warning')
txExcLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 102)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcLocal.setStatus('current')
if mibBuilder.loadTexts: txExcLocal.setDescription('Exciter Local/Remote')
txExcRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 104)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfOk.setStatus('current')
if mibBuilder.loadTexts: txExcRfOk.setDescription('Exciter RF Ok')
txExcInputNoConnectHP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 105)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectHP1.setStatus('current')
if mibBuilder.loadTexts: txExcInputNoConnectHP1.setDescription('Exciter Input HP1 has no connected input signal')
txExcInputNoConnectLP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 106)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectLP1.setStatus('current')
if mibBuilder.loadTexts: txExcInputNoConnectLP1.setDescription('Exciter Input LP1 has no connected input signal')
txExcInputNoConnectHP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 107)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectHP2.setStatus('current')
if mibBuilder.loadTexts: txExcInputNoConnectHP2.setDescription('Exciter Input HP2 has no connected input signal')
txExcInputNoConnectLP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 108)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputNoConnectLP2.setStatus('current')
if mibBuilder.loadTexts: txExcInputNoConnectLP2.setDescription('Exciter Input LP2 has no connected input signal')
txExcInputActiveHP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 109)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveHP1.setStatus('current')
if mibBuilder.loadTexts: txExcInputActiveHP1.setDescription('Exciter Input HP1 is active')
txExcInputActiveLP1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 110)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveLP1.setStatus('current')
if mibBuilder.loadTexts: txExcInputActiveLP1.setDescription('Exciter Input LP1 is active')
txExcInputActiveHP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 111)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveHP2.setStatus('current')
if mibBuilder.loadTexts: txExcInputActiveHP2.setDescription('Exciter Input HP2 is active')
txExcInputActiveLP2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 112)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputActiveLP2.setStatus('current')
if mibBuilder.loadTexts: txExcInputActiveLP2.setDescription('Exciter Input LP2 is active')
txExcOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 113)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcOn.setStatus('current')
if mibBuilder.loadTexts: txExcOn.setDescription('Exciter On')
txExcRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 114)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfOn.setStatus('current')
if mibBuilder.loadTexts: txExcRfOn.setDescription('Exciter RF On')
txExcNoInput = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 115)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcNoInput.setStatus('current')
if mibBuilder.loadTexts: txExcNoInput.setDescription('Exciter has no valid input signal.')
txExcRfLoop = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 116)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfLoop.setStatus('current')
if mibBuilder.loadTexts: txExcRfLoop.setDescription('Exciter RF loop')
txExcRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 117)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcRfFail.setStatus('current')
if mibBuilder.loadTexts: txExcRfFail.setDescription('Exciter RF Fail')
txExcSelfTest = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 118)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSelfTest.setStatus('current')
if mibBuilder.loadTexts: txExcSelfTest.setDescription('Exciter hardware self test')
txExcOutputOpen = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 119)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcOutputOpen.setStatus('current')
if mibBuilder.loadTexts: txExcOutputOpen.setDescription('Exciter output open')
txExcBoardTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 120)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcBoardTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: txExcBoardTemperatureWarning.setDescription('Exciter Board Temperature')
txExcFanWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 121)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFanWarning.setStatus('current')
if mibBuilder.loadTexts: txExcFanWarning.setDescription('Exciter has one faulty fan')
txExcFanFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 122)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFanFault.setStatus('current')
if mibBuilder.loadTexts: txExcFanFault.setDescription('Both exciter fans are faulty.')
txExcFifoWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 123)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcFifoWarning.setStatus('current')
if mibBuilder.loadTexts: txExcFifoWarning.setDescription('Exciter Fifo')
txExcTestSignal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 124)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcTestSignal.setStatus('current')
if mibBuilder.loadTexts: txExcTestSignal.setDescription('Exciter Testsignal Active')
txExcSFNDelay = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 125)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcSFNDelay.setStatus('current')
if mibBuilder.loadTexts: txExcSFNDelay.setDescription('Exciter SFN Delay Fault')
txExcWrongDatarate = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 126)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcWrongDatarate.setStatus('current')
if mibBuilder.loadTexts: txExcWrongDatarate.setDescription('Exciter Wrong Datarate')
txExcMute = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 127)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcMute.setStatus('current')
if mibBuilder.loadTexts: txExcMute.setDescription('Exciter Mute')
txExcPPSFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 128)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcPPSFail.setStatus('current')
if mibBuilder.loadTexts: txExcPPSFail.setDescription('Exciter PPS Fail')
txExcReferenceFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 129)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcReferenceFail.setStatus('current')
if mibBuilder.loadTexts: txExcReferenceFail.setDescription('Exciter Reference Fail')
txExcMIPFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 130)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcMIPFail.setStatus('current')
if mibBuilder.loadTexts: txExcMIPFail.setDescription('Exciter MIP Fail')
txExcInputAutomaticSwitchReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 131)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputAutomaticSwitchReady.setStatus('current')
if mibBuilder.loadTexts: txExcInputAutomaticSwitchReady.setDescription('Input automatic is ready.')
txExcInputAutomaticChangedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 132)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txExcInputAutomaticChangedOver.setStatus('current')
if mibBuilder.loadTexts: txExcInputAutomaticChangedOver.setDescription('Input automatic changed over.')
txExcInputReseveMissing = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 133))
if mibBuilder.loadTexts: txExcInputReseveMissing.setStatus('current')
if mibBuilder.loadTexts: txExcInputReseveMissing.setDescription('Missing input, or automatic switching enabled with only one input present.\n                Disable automatic switching or press reset fault to remove this warning.\n                Monitoring of a second input will start automatically if two input signals have been detected.\n                \n                This event will be generated only if cmdExcExpectInputReserve is set to on(1).')
txOstSummaryFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 200)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstSummaryFault.setStatus('current')
if mibBuilder.loadTexts: txOstSummaryFault.setDescription('Outputstage Summary Fault')
txOstSummaryWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 201)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstSummaryWarning.setStatus('current')
if mibBuilder.loadTexts: txOstSummaryWarning.setDescription('Outputstage Summary Warning')
txOstRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 202)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfOn.setStatus('current')
if mibBuilder.loadTexts: txOstRfOn.setDescription('Outputstage RF On')
txOstRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 203)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfOk.setStatus('current')
if mibBuilder.loadTexts: txOstRfOk.setDescription('Outputstage RF Ok')
txOstNoInput = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 204)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstNoInput.setStatus('current')
if mibBuilder.loadTexts: txOstNoInput.setDescription('Outputstage no input signal')
txOstRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 205)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfWarning.setStatus('current')
if mibBuilder.loadTexts: txOstRfWarning.setDescription('Outputstage RF Warning')
txOstReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 206)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstReflectionWarning.setStatus('current')
if mibBuilder.loadTexts: txOstReflectionWarning.setDescription('Outputstage Reflection Warning')
txOstRackWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 207)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRackWarning.setStatus('current')
if mibBuilder.loadTexts: txOstRackWarning.setDescription('Outputstage Rack Warning. At least one rack has an error pending.')
txOstCoolingWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 208)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCoolingWarning.setStatus('current')
if mibBuilder.loadTexts: txOstCoolingWarning.setDescription('Outputstage Cooling Warning')
txOstRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 209)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstRfFail.setStatus('current')
if mibBuilder.loadTexts: txOstRfFail.setDescription('Outputstage RF Fail')
txOstReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 210)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstReflectionFault.setStatus('current')
if mibBuilder.loadTexts: txOstReflectionFault.setDescription('Outputstage Reflection Fault')
txOstACFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 211)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstACFault.setStatus('current')
if mibBuilder.loadTexts: txOstACFault.setDescription('Outputstage AC Fault')
txOstCoolingFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 212)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCoolingFault.setStatus('current')
if mibBuilder.loadTexts: txOstCoolingFault.setDescription('Outputstage Cooling Fault')
txOstCommFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 213)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"))
if mibBuilder.loadTexts: txOstCommFault.setStatus('current')
if mibBuilder.loadTexts: txOstCommFault.setDescription('Outputstage Communication Fault')
txRackSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 300)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackSumFault.setStatus('current')
if mibBuilder.loadTexts: txRackSumFault.setDescription('Summary Fault at a designated rack.\n                This event automatically leads to txOstRackWarning.')
txRackSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 301)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackSumWarning.setStatus('current')
if mibBuilder.loadTexts: txRackSumWarning.setDescription('Summary Warning at a designated rack.')
txRackOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 302)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackOn.setStatus('current')
if mibBuilder.loadTexts: txRackOn.setDescription('The designated racks operation mode is on.')
txRackGpiWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 303)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackGpiWarning.setStatus('current')
if mibBuilder.loadTexts: txRackGpiWarning.setDescription('A warning on the general purpose input occurred.\n                This depends on the current configuration of the GPI. (See:Rack Setup/Rack Controller)')
txRackFan1Fault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 304)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackFan1Fault.setStatus('current')
if mibBuilder.loadTexts: txRackFan1Fault.setDescription('The designated rack signals a fault of fan 1.')
txRackFan2Fault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 305)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackFan2Fault.setStatus('current')
if mibBuilder.loadTexts: txRackFan2Fault.setDescription('The designated rack signals a fault of fan 2.')
txRackCoolingSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 306)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackCoolingSumWarning.setStatus('current')
if mibBuilder.loadTexts: txRackCoolingSumWarning.setDescription('The designated rack signals a summary cooling warning.')
txRackAmplifierSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 307)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackAmplifierSumFault.setStatus('current')
if mibBuilder.loadTexts: txRackAmplifierSumFault.setDescription('The designated rack signals at least one faulty amplifier.')
txRackNoLink = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 308)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackNoLink.setStatus('current')
if mibBuilder.loadTexts: txRackNoLink.setDescription('No communication to the designated rack.')
txRackGpiFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 309)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackGpiFault.setStatus('current')
if mibBuilder.loadTexts: txRackGpiFault.setDescription('A fault on the general purpose input occurred.\n                This depends on the current configuration of the GPI. (See:Rack Setup/Rack Controller)')
txRackTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 310)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTemperatureFault.setStatus('current')
if mibBuilder.loadTexts: txRackTemperatureFault.setDescription('The designated rack signals a temperature fault - temperature too high.')
txRackACFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 311)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackACFault.setStatus('current')
if mibBuilder.loadTexts: txRackACFault.setDescription('The designated rack signals an AC (phase) fault.')
txRackCoolingSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 312)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackCoolingSumFault.setStatus('current')
if mibBuilder.loadTexts: txRackCoolingSumFault.setDescription('The designated rack signals a summary cooling fault.')
txRackTempFaultAbs1 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 313)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTempFaultAbs1.setStatus('current')
if mibBuilder.loadTexts: txRackTempFaultAbs1.setDescription('The designated rack signals a temperature fault of absorber 1.')
txRackTempFaultAbs2 = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 314)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTempFaultAbs2.setStatus('current')
if mibBuilder.loadTexts: txRackTempFaultAbs2.setDescription('The designated rack signals a temperature fault of absorber 2.')
txRackDCFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 315)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackDCFault.setStatus('current')
if mibBuilder.loadTexts: txRackDCFault.setDescription('The designated rack signals a DC fault.')
txRackRfOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 318)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfOn.setStatus('current')
if mibBuilder.loadTexts: txRackRfOn.setDescription('RF power is on.')
txRackRfOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 319)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfOk.setStatus('current')
if mibBuilder.loadTexts: txRackRfOk.setDescription('RF power is ok.')
txRackRfWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 320)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfWarning.setStatus('current')
if mibBuilder.loadTexts: txRackRfWarning.setDescription('RF power decreased the warning threshold.')
txRackRfFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 321)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackRfFault.setStatus('current')
if mibBuilder.loadTexts: txRackRfFault.setDescription('RF output power decreased the fault threshold.')
txRackReflectionWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 322)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackReflectionWarning.setStatus('current')
if mibBuilder.loadTexts: txRackReflectionWarning.setDescription('The reflected power increased the warning threshold')
txRackReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 323)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackReflectionFault.setStatus('current')
if mibBuilder.loadTexts: txRackReflectionFault.setDescription('The reflected power increased the fault threshold.')
txRackProbeNotCalibrated = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 330)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackProbeNotCalibrated.setStatus('current')
if mibBuilder.loadTexts: txRackProbeNotCalibrated.setDescription('At least one probe is not calibrated.')
txRackTemperatureWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 331)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackTemperatureWarning.setStatus('current')
if mibBuilder.loadTexts: txRackTemperatureWarning.setDescription('Rack temperature exceeded the warning threshold.')
txRackOvervoltProtectWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 335)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"))
if mibBuilder.loadTexts: txRackOvervoltProtectWarning.setStatus('current')
if mibBuilder.loadTexts: txRackOvervoltProtectWarning.setDescription('Overvoltage protection is out of order.')
txAmpSumFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 400)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpSumFault.setStatus('current')
if mibBuilder.loadTexts: txAmpSumFault.setDescription('The designated amplifier signals summary fault.')
txAmpSumWarning = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 401)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpSumWarning.setStatus('current')
if mibBuilder.loadTexts: txAmpSumWarning.setDescription('The designated amplifier signals summary warning.')
txAmpPowerOn = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 402)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpPowerOn.setStatus('current')
if mibBuilder.loadTexts: txAmpPowerOn.setDescription('The designated amplifiers power is on.')
txAmpDCOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 403)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpDCOk.setStatus('current')
if mibBuilder.loadTexts: txAmpDCOk.setDescription('The designated amplifiers DC is ok.')
txAmpACOk = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 404)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpACOk.setStatus('current')
if mibBuilder.loadTexts: txAmpACOk.setDescription('The designated amplifiers AC is ok.')
txAmpRfInFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 405)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpRfInFail.setStatus('current')
if mibBuilder.loadTexts: txAmpRfInFail.setDescription('The designated amplifier signals RF input fail.')
txAmpRfFail = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 406)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpRfFail.setStatus('current')
if mibBuilder.loadTexts: txAmpRfFail.setDescription('The designated amplifier signals RF fail.')
txAmpReflectionFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 407)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpReflectionFault.setStatus('current')
if mibBuilder.loadTexts: txAmpReflectionFault.setDescription('The designated amplifier signals a reflection fault.')
txAmpTemperatureFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 408)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpTemperatureFault.setStatus('current')
if mibBuilder.loadTexts: txAmpTemperatureFault.setDescription('The designated amplifier signals a temperature fault - temperature is too high.')
txAmpTransistorFault = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 0, 409)).setObjects(("RS-XX8000-COMMON-MIB", "eventAlarmPriority"), ("RS-XX8000-COMMON-MIB", "eventAlarmClass"), ("RS-XX8000-COMMON-MIB", "eventEvent"), ("RS-XX8000-COMMON-MIB", "indexAB"), ("RS-XX8000-COMMON-MIB", "indexRack"), ("RS-XX8000-COMMON-MIB", "indexAmplifier"))
if mibBuilder.loadTexts: txAmpTransistorFault.setStatus('current')
if mibBuilder.loadTexts: txAmpTransistorFault.setDescription('The designated amplifier signals at least one faulty transistor.')
eventsTxTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1), )
if mibBuilder.loadTexts: eventsTxTable.setStatus('current')
if mibBuilder.loadTexts: eventsTxTable.setDescription('This table contains necessary information for handling alarms. \n                For each alarm you have the following information: \n                - name (get),\n                - mask to enable/disable sending out (set/get),\n                - priority (set/get) and \n                - the current state (get only).')
eventsTxEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1), ).setIndexNames((0, "RS-XX8000-DVB-TX-MIB", "eventTxABIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxRackIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxAmpIdx"), (0, "RS-XX8000-DVB-TX-MIB", "eventTxNameIdx"))
if mibBuilder.loadTexts: eventsTxEntry.setStatus('current')
if mibBuilder.loadTexts: eventsTxEntry.setDescription('An event entry always consists of its indexes\n                (used for addressing within redundancy systems) and 3 values:\n                - name: an enumerated list of all possible notifications\n                - mask: the corresponding mask (enable/disable)\n                - priority: the corresponding priority (value in range 0..255)\n                - event: the event itself (active/inactive)')
eventTxABIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("a", 1), ("b", 2))))
if mibBuilder.loadTexts: eventTxABIdx.setStatus('current')
if mibBuilder.loadTexts: eventTxABIdx.setDescription('The value for the module A (exciterA, outputstageA) or \n                B (exciterB, outputstageB) for alarms.\n                This is a helper column and therefore not-accessible.')
eventTxRackIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: eventTxRackIdx.setStatus('current')
if mibBuilder.loadTexts: eventTxRackIdx.setDescription('The number of the designated rack.\n                This is a helper column and therefore not-accessible.')
eventTxAmpIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: eventTxAmpIdx.setStatus('current')
if mibBuilder.loadTexts: eventTxAmpIdx.setDescription('The number of the designated amplifier.\n                This is a helper column and therefore not-accessible.')
eventTxNameIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 4), EventMaxEntryNumber())
if mibBuilder.loadTexts: eventTxNameIdx.setStatus('current')
if mibBuilder.loadTexts: eventTxNameIdx.setDescription('The event number as integer.\n                This is a helper column and therefore not-accessible.')
eventTxName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 35, 36, 37, 38, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 318, 319, 320, 321, 322, 323, 330, 331, 335, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409))).clone(namedValues=NamedValues(("txSummaryFault", 1), ("txSummaryWarning", 2), ("txLocal", 3), ("txRfOn", 4), ("txRfOk", 5), ("txParamSetSubDeviceDiffers", 6), ("txParamSetValuesChanged", 7), ("txRfLoopProgram", 8), ("txRfLoopReserve", 9), ("txRfWarning", 10), ("txReflectionWarning", 11), ("txNetCCUFanFault", 12), ("txNetCCUPowerSupply", 13), ("txRfFail", 14), ("txReflectionFault", 15), ("txNetCCUBoardTemperatureFault", 16), ("txNetCCUNoConnectionToExcA", 17), ("txNetCCUNoConnectionToOstA", 18), ("txNetCCUNoConnectionToExcB", 19), ("txNetCCUNoConnectionToOstB", 20), ("txAutomaticExcReady", 21), ("txAutomaticExcChanged", 22), ("txAutomaticExcFault", 23), ("txAutomaticOstReady", 24), ("txAutomaticOstChanged", 25), ("txAutomaticOstFault", 26), ("txNetCCUBoardTemperatureWarning", 27), ("txInternalPowerSupplyWarning", 30), ("txExternalPowerSupplyWarning", 31), ("txModeSwitchOverStarted", 35), ("txModeSwitchOverEnded", 36), ("txModeInconsistent", 37), ("txModeSwitchOverFailed", 38), ("txExcSummaryFault", 100), ("txExcSummaryWarning", 101), ("txExcLocal", 102), ("txExcRfOk", 104), ("txExcInputNoConnectHP1", 105), ("txExcInputNoConnectLP1", 106), ("txExcInputNoConnectHP2", 107), ("txExcInputNoConnectLP2", 108), ("txExcInputActiveHP1", 109), ("txExcInputActiveLP1", 110), ("txExcInputActiveHP2", 111), ("txExcInputActiveLP2", 112), ("txExcOn", 113), ("txExcRfOn", 114), ("txExcNoInput", 115), ("txExcRfLoop", 116), ("txExcRfFail", 117), ("txExcSelfTest", 118), ("txExcOutputOpen", 119), ("txExcBoardTemperatureWarning", 120), ("txExcFanWarning", 121), ("txExcFanFault", 122), ("txExcFifoWarning", 123), ("txExcTestSignal", 124), ("txExcSFNDelay", 125), ("txExcWrongDatarate", 126), ("txExcMute", 127), ("txExcPPSFail", 128), ("txExcReferenceFail", 129), ("txExcMIPFail", 130), ("txExcInputAutomaticSwitchReady", 131), ("txExcInputAutomaticChangedOver", 132), ("txExcInputReseveMissing", 133), ("txOstSummaryFault", 200), ("txOstSummaryWarning", 201), ("txOstRfOn", 202), ("txOstRfOk", 203), ("txOstNoInput", 204), ("txOstRfWarning", 205), ("txOstReflectionWarning", 206), ("txOstRackWarning", 207), ("txOstCoolingWarning", 208), ("txOstRfFail", 209), ("txOstReflectionFault", 210), ("txOstACFault", 211), ("txOstCoolingFault", 212), ("txOstCommFault", 213), ("txRackSumFault", 300), ("txRackSumWarning", 301), ("txRackOn", 302), ("txRackGpiWarning", 303), ("txRackFan1Fault", 304), ("txRackFan2Fault", 305), ("txRackCoolingSumWarning", 306), ("txRackAmplifierSumFault", 307), ("txRackNoLink", 308), ("txRackGpiFault", 309), ("txRackTemperatureFault", 310), ("txRackACFault", 311), ("txRackCoolingSumFault", 312), ("txRackTempFaultAbs1", 313), ("txRackTempFaultAbs2", 314), ("txRackDCFault", 315), ("txRackRfOn", 318), ("txRackRfOk", 319), ("txRackRfWarning", 320), ("txRackRfFault", 321), ("txRackReflectionWarning", 322), ("txRackReflectionFault", 323), ("txRackProbeNotCalibrated", 330), ("txRackTemperatureWarning", 331), ("txRackOvervoltProtectWarning", 335), ("txAmpSumFault", 400), ("txAmpSumWarning", 401), ("txAmpPowerOn", 402), ("txAmpDCOk", 403), ("txAmpACOk", 404), ("txAmpRfInFail", 405), ("txAmpRfFail", 406), ("txAmpReflectionFault", 407), ("txAmpTemperatureFault", 408), ("txAmpTransistorFault", 409)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTxName.setStatus('current')
if mibBuilder.loadTexts: eventTxName.setDescription('The event number as integer and the value as readable text.\n                The enumeration correlates with the notifications under eventsTxV2.')
eventTxMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 6), EventMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTxMask.setStatus('current')
if mibBuilder.loadTexts: eventTxMask.setDescription('See TextualConvention for details.')
eventTxPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 7), EventPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: eventTxPriority.setStatus('current')
if mibBuilder.loadTexts: eventTxPriority.setDescription('See TextualConvention for details.')
eventTxEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 3, 2, 1, 1, 8), EventState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventTxEvent.setStatus('current')
if mibBuilder.loadTexts: eventTxEvent.setDescription('See TextualConvention for details.')
rsXx8000DvbTxConf = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5))
rsXx8000DvbTxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1))
groupEvents = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 1)).setObjects(("RS-XX8000-DVB-TX-MIB", "eventTxName"), ("RS-XX8000-DVB-TX-MIB", "eventTxMask"), ("RS-XX8000-DVB-TX-MIB", "eventTxPriority"), ("RS-XX8000-DVB-TX-MIB", "eventTxEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEvents = groupEvents.setStatus('current')
if mibBuilder.loadTexts: groupEvents.setDescription('This group includes all OIDs for event handling.')
groupTxCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 2)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxResetSumFault"), ("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetLoad"), ("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetSave"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeProgram"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultTx"), ("RS-XX8000-DVB-TX-MIB", "summaryWarningTx"), ("RS-XX8000-DVB-TX-MIB", "localModeTx"), ("RS-XX8000-DVB-TX-MIB", "rfOnTx"), ("RS-XX8000-DVB-TX-MIB", "forwardPower"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupTxCommon = groupTxCommon.setStatus('current')
if mibBuilder.loadTexts: groupTxCommon.setDescription('Group for common transmitter objects')
groupEventsTxCommon = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 3)).setObjects(("RS-XX8000-DVB-TX-MIB", "txSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txLocal"), ("RS-XX8000-DVB-TX-MIB", "txRfOn"), ("RS-XX8000-DVB-TX-MIB", "txParamSetValuesChanged"), ("RS-XX8000-DVB-TX-MIB", "txRfLoopProgram"), ("RS-XX8000-DVB-TX-MIB", "txRfFail"), ("RS-XX8000-DVB-TX-MIB", "txOstSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txOstSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txRfOk"), ("RS-XX8000-DVB-TX-MIB", "txOstRfOn"), ("RS-XX8000-DVB-TX-MIB", "txRfWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsTxCommon = groupEventsTxCommon.setStatus('current')
if mibBuilder.loadTexts: groupEventsTxCommon.setDescription('This group includes all alarm OIDs that are common for all reserve concepts.')
groupDualDrive = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 4)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeReserve"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxPreselectExciter"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "exciterBNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "exciterBLogbookClear"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookType"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "excBLogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcB"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcB"), ("RS-XX8000-DVB-TX-MIB", "activeExcA"), ("RS-XX8000-DVB-TX-MIB", "activeExcB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupDualDrive = groupDualDrive.setStatus('current')
if mibBuilder.loadTexts: groupDualDrive.setDescription('This group includes additional objects for reserve concepts\n                DualDrive (NetCCU + 2 * exciter + outputstage)\n                and\n                Active/Passive Reserve (NetCCU + 2 * exciter + 2 * outputstage)\n                ')
groupEventsDualDrive = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 5)).setObjects(("RS-XX8000-DVB-TX-MIB", "txRfLoopReserve"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsDualDrive = groupEventsDualDrive.setStatus('current')
if mibBuilder.loadTexts: groupEventsDualDrive.setDescription('This group includes additional events for reserve concepts\n                DualDrive (NetCCU + 2 * exciter + outputstage)\n                and\n                Active/Passive Reserve (NetCCU + 2 * exciter + 2 * outputstage)\n                ')
groupPowerReserve = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 6)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeOstAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxPreselectOutputstage"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeOstAutomatic"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultOstB"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "outputstageAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionOstB"), ("RS-XX8000-DVB-TX-MIB", "activeOstA"), ("RS-XX8000-DVB-TX-MIB", "activeOstB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupPowerReserve = groupPowerReserve.setStatus('current')
if mibBuilder.loadTexts: groupPowerReserve.setDescription('This group includes additional objects for reserve concept\n                Active/Passive Reserve (NetCCU + 2 * exciter + 2 * outputstage)\n                For more details, refer to manual.')
groupEventsPowerReserve = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 7)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToOstB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticOstFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsPowerReserve = groupEventsPowerReserve.setStatus('current')
if mibBuilder.loadTexts: groupEventsPowerReserve.setDescription('This group includes additional events for reserve concept\n                Active/Passive Reserve (NetCCU + 2 * exciter + 2 * outputstage)\n                For more details, refer to manual.')
groupCommonMP = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 8)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdOstRefVoltageVision"), ("RS-XX8000-DVB-TX-MIB", "cmdOstMaxOutletTempThreshold"), ("RS-XX8000-DVB-TX-MIB", "outputstageANumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "outputstageALogbookClear"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookType"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "ostALogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "reflectedPower"), ("RS-XX8000-DVB-TX-MIB", "ostRackInletTemperature"), ("RS-XX8000-DVB-TX-MIB", "ostRackOutletTemperature"), ("RS-XX8000-DVB-TX-MIB", "ostRackAuxPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "amplifiersPerRack"), ("RS-XX8000-DVB-TX-MIB", "rackRfEventSignalling"), ("RS-XX8000-DVB-TX-MIB", "rackGeneralPurposeInput"), ("RS-XX8000-DVB-TX-MIB", "rfProbePresent"), ("RS-XX8000-DVB-TX-MIB", "rfProbeConfigurationNominalValue"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdRfFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdTimeoutRfFailCtr"), ("RS-XX8000-DVB-TX-MIB", "rfProbeThresholdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbeCalibrationSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbeMeasuredValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCommonMP = groupCommonMP.setStatus('current')
if mibBuilder.loadTexts: groupCommonMP.setDescription('additional objects for medium/high power')
groupEventsCommonMP = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 9)).setObjects(("RS-XX8000-DVB-TX-MIB", "txReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txOstRfOk"), ("RS-XX8000-DVB-TX-MIB", "txOstNoInput"), ("RS-XX8000-DVB-TX-MIB", "txOstRfWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstRackWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstCoolingWarning"), ("RS-XX8000-DVB-TX-MIB", "txOstRfFail"), ("RS-XX8000-DVB-TX-MIB", "txOstReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txOstACFault"), ("RS-XX8000-DVB-TX-MIB", "txOstCoolingFault"), ("RS-XX8000-DVB-TX-MIB", "txOstCommFault"), ("RS-XX8000-DVB-TX-MIB", "txRackSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackOn"), ("RS-XX8000-DVB-TX-MIB", "txRackGpiWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackFan1Fault"), ("RS-XX8000-DVB-TX-MIB", "txRackFan2Fault"), ("RS-XX8000-DVB-TX-MIB", "txRackCoolingSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackAmplifierSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackNoLink"), ("RS-XX8000-DVB-TX-MIB", "txRackGpiFault"), ("RS-XX8000-DVB-TX-MIB", "txRackTemperatureFault"), ("RS-XX8000-DVB-TX-MIB", "txRackACFault"), ("RS-XX8000-DVB-TX-MIB", "txRackCoolingSumFault"), ("RS-XX8000-DVB-TX-MIB", "txRackTempFaultAbs1"), ("RS-XX8000-DVB-TX-MIB", "txRackTempFaultAbs2"), ("RS-XX8000-DVB-TX-MIB", "txRackDCFault"), ("RS-XX8000-DVB-TX-MIB", "txRackRfWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackRfFault"), ("RS-XX8000-DVB-TX-MIB", "txRackReflectionWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txRackRfOk"), ("RS-XX8000-DVB-TX-MIB", "txRackRfOn"), ("RS-XX8000-DVB-TX-MIB", "txRackOvervoltProtectWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackTemperatureWarning"), ("RS-XX8000-DVB-TX-MIB", "txRackProbeNotCalibrated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsCommonMP = groupEventsCommonMP.setStatus('current')
if mibBuilder.loadTexts: groupEventsCommonMP.setDescription('additional events for medium/high power')
groupCommonNetCCU = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 10)).setObjects(("RS-XX8000-DVB-TX-MIB", "netCCUNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookClear"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookType"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "netCCULogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "powerSupply"), ("RS-XX8000-DVB-TX-MIB", "cmdTxSystemMode"), ("RS-XX8000-DVB-TX-MIB", "additionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultOstA"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcA"), ("RS-XX8000-DVB-TX-MIB", "noConnectionOstA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupCommonNetCCU = groupCommonNetCCU.setStatus('current')
if mibBuilder.loadTexts: groupCommonNetCCU.setDescription('additional objects for transmitters with NetCCU')
groupEventsCommonNetCCU = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 11)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUFanFault"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcA"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToOstA"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverStarted"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverEnded"), ("RS-XX8000-DVB-TX-MIB", "txModeInconsistent"), ("RS-XX8000-DVB-TX-MIB", "txModeSwitchOverFailed"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUBoardTemperatureWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsCommonNetCCU = groupEventsCommonNetCCU.setStatus('current')
if mibBuilder.loadTexts: groupEventsCommonNetCCU.setDescription('additional events for transmitters with NetCCU')
groupOstBLogbook = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 12)).setObjects(("RS-XX8000-DVB-TX-MIB", "outputstageBNumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "outputstageBLogbookClear"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookType"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "ostBLogbookDateTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupOstBLogbook = groupOstBLogbook.setStatus('current')
if mibBuilder.loadTexts: groupOstBLogbook.setDescription('objects of logbook for output stage B')
groupSumProbe = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 14)).setObjects(("RS-XX8000-DVB-TX-MIB", "forwardPowerOstA"), ("RS-XX8000-DVB-TX-MIB", "reflectedPowerOstA"), ("RS-XX8000-DVB-TX-MIB", "forwardPowerOstB"), ("RS-XX8000-DVB-TX-MIB", "reflectedPowerOstB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupSumProbe = groupSumProbe.setStatus('current')
if mibBuilder.loadTexts: groupSumProbe.setDescription('objects that are available only when sum probe exists')
groupProductInfo = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 18)).setObjects(("RS-XX8000-DVB-TX-MIB", "prodInfoModuleName"), ("RS-XX8000-DVB-TX-MIB", "prodInfoSerialNumber"), ("RS-XX8000-DVB-TX-MIB", "prodInfoIdentNumberSW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoVersionNumberSW"), ("RS-XX8000-DVB-TX-MIB", "productInfoProductDateHW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoIdentNumberHW"), ("RS-XX8000-DVB-TX-MIB", "prodInfoVersionNumberHW"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupProductInfo = groupProductInfo.setStatus('current')
if mibBuilder.loadTexts: groupProductInfo.setDescription('This group includes all OIDs for device product information.')
groupAmpMeasureValues = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 19)).setObjects(("RS-XX8000-DVB-TX-MIB", "ostRackAmpI1A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI2A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI3A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI4A"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI1B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI2B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI3B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpI4B"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpIDrv"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUDc"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpIDc"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUDcControl"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpUReg"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerA"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerB"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerOut"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerReflection"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpPowerReference"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpDeltaPhase"), ("RS-XX8000-DVB-TX-MIB", "ostRackAmpCmdDeltaPhase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupAmpMeasureValues = groupAmpMeasureValues.setStatus('current')
if mibBuilder.loadTexts: groupAmpMeasureValues.setDescription('This group includes all OIDs amplifier measure values.\n                Practically, these information are not important to customers, they are needed in manufactory.')
groupEventsAmplifier = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 20)).setObjects(("RS-XX8000-DVB-TX-MIB", "txAmpSumFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpSumWarning"), ("RS-XX8000-DVB-TX-MIB", "txAmpPowerOn"), ("RS-XX8000-DVB-TX-MIB", "txAmpDCOk"), ("RS-XX8000-DVB-TX-MIB", "txAmpACOk"), ("RS-XX8000-DVB-TX-MIB", "txAmpRfInFail"), ("RS-XX8000-DVB-TX-MIB", "txAmpRfFail"), ("RS-XX8000-DVB-TX-MIB", "txAmpReflectionFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpTemperatureFault"), ("RS-XX8000-DVB-TX-MIB", "txAmpTransistorFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsAmplifier = groupEventsAmplifier.setStatus('current')
if mibBuilder.loadTexts: groupEventsAmplifier.setDescription('events from the amplifier (medium/high power only)')
groupRfProbes = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 21)).setObjects(("RS-XX8000-DVB-TX-MIB", "rfProbesNetCCURfProbe1"), ("RS-XX8000-DVB-TX-MIB", "rfProbesNetCCURfProbe2"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesAntReflSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesOstReflSetGain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupRfProbes = groupRfProbes.setStatus('current')
if mibBuilder.loadTexts: groupRfProbes.setDescription('This group includes all OIDs regarding RF Probes.')
groupDummyLoadRF = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 22)).setObjects(("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdNominal"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdFailLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdDelayTimeRfFail"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLFwdSetGain"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflSetOffset"), ("RS-XX8000-DVB-TX-MIB", "rfProbesDLReflSetGain"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupDummyLoadRF = groupDummyLoadRF.setStatus('current')
if mibBuilder.loadTexts: groupDummyLoadRF.setDescription('This group includes all object types regarding probes from dummy load.\n                The object types in this group are defined only when a dummy load measure point exists.\n                This can occur in reserve concept active reserve only.\n                ')
groupExcCommon = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 23)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcOpModeInputAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdExcPreselectInput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcNetworkMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSSource"), ("RS-XX8000-DVB-TX-MIB", "cmdExcEnableCellID"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTxAddress"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTxAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputSeamless"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputPriority"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputCheckTimeForward"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputCheckTimeSwitchback"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputMuteOnFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionHP1"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionHP2"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionLP1"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputManualPreseletionLP2"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualBandwidth"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFFTLength"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualGuardInterval"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualConstellation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCellID"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualInterleaver"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCoderateHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualCoderateLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualTimeSlicingHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualTimeSlicingLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFECHP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualFECLP"), ("RS-XX8000-DVB-TX-MIB", "cmdExcSFNStaticDelay"), ("RS-XX8000-DVB-TX-MIB", "cmdExcSFNDeviationTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcFrequency"), ("RS-XX8000-DVB-TX-MIB", "cmdExcReferenceSource"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteOnPPSFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteOnReferenceFail"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTypeLossOfInput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutput"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputAttenuation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputRfSlope"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputModulationSlope"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustTestsignal"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasCoarseI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasCoarseQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasFineI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustBiasFineQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustGainI"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustGainQ"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustPhase"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInpAutoReadyAfterChangeOv"), ("RS-XX8000-DVB-TX-MIB", "excInputChannelName"), ("RS-XX8000-DVB-TX-MIB", "excInputConnected"), ("RS-XX8000-DVB-TX-MIB", "excInputSeamless"), ("RS-XX8000-DVB-TX-MIB", "excInputPreselected"), ("RS-XX8000-DVB-TX-MIB", "excInputActive"), ("RS-XX8000-DVB-TX-MIB", "excInputMipFail"), ("RS-XX8000-DVB-TX-MIB", "excInputBandwidth"), ("RS-XX8000-DVB-TX-MIB", "excInputFFTLength"), ("RS-XX8000-DVB-TX-MIB", "excInputGuardInterval"), ("RS-XX8000-DVB-TX-MIB", "excInputConstellation"), ("RS-XX8000-DVB-TX-MIB", "excInputCellID"), ("RS-XX8000-DVB-TX-MIB", "excInputInterleaver"), ("RS-XX8000-DVB-TX-MIB", "excInputCodeRate"), ("RS-XX8000-DVB-TX-MIB", "excInputPacketLength"), ("RS-XX8000-DVB-TX-MIB", "excInputMeasuredDatarate"), ("RS-XX8000-DVB-TX-MIB", "excInputRequiredDatarate"), ("RS-XX8000-DVB-TX-MIB", "excInputMaximumDelay"), ("RS-XX8000-DVB-TX-MIB", "exciterANumberOfEntries"), ("RS-XX8000-DVB-TX-MIB", "exciterALogbookClear"), ("RS-XX8000-DVB-TX-MIB", "excALogbookEntryNbr"), ("RS-XX8000-DVB-TX-MIB", "excALogbookType"), ("RS-XX8000-DVB-TX-MIB", "excALogbookSlope"), ("RS-XX8000-DVB-TX-MIB", "excALogbookMessage"), ("RS-XX8000-DVB-TX-MIB", "excALogbookDateTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcOcxoAdjust"), ("RS-XX8000-DVB-TX-MIB", "cmdExcExpectInputReserve"), ("RS-XX8000-DVB-TX-MIB", "excStatusReqDataRateLP"), ("RS-XX8000-DVB-TX-MIB", "excStatusReqDataRateHP"), ("RS-XX8000-DVB-TX-MIB", "excStatusAmplifierControl"), ("RS-XX8000-DVB-TX-MIB", "excStatusFailDelay"), ("RS-XX8000-DVB-TX-MIB", "cmdExcFailDelayMode"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputFailDelayTime"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRefFailDelayTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcCommon = groupExcCommon.setStatus('current')
if mibBuilder.loadTexts: groupExcCommon.setDescription('Group for common exciter objects')
groupExcAdditionalSx800 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 24)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputRegulation"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfOutputManualRfLevel"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfIqAdjustStart"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcAdditionalSx800 = groupExcAdditionalSx800.setStatus('current')
if mibBuilder.loadTexts: groupExcAdditionalSx800.setDescription('Additional exciter objects for the Sx800')
groupExcAdditionalSLx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 25)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcInput1Source"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInput2Source"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExcAdditionalSLx = groupExcAdditionalSLx.setStatus('current')
if mibBuilder.loadTexts: groupExcAdditionalSLx.setDescription('Additional exciter objects for the SLx and the Sx801')
groupEventsExciter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 26)).setObjects(("RS-XX8000-DVB-TX-MIB", "txExcSummaryFault"), ("RS-XX8000-DVB-TX-MIB", "txExcSummaryWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectHP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectLP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectHP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputNoConnectLP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveHP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveLP1"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveHP2"), ("RS-XX8000-DVB-TX-MIB", "txExcInputActiveLP2"), ("RS-XX8000-DVB-TX-MIB", "txExcOn"), ("RS-XX8000-DVB-TX-MIB", "txExcRfOn"), ("RS-XX8000-DVB-TX-MIB", "txExcNoInput"), ("RS-XX8000-DVB-TX-MIB", "txExcRfLoop"), ("RS-XX8000-DVB-TX-MIB", "txExcRfFail"), ("RS-XX8000-DVB-TX-MIB", "txExcSelfTest"), ("RS-XX8000-DVB-TX-MIB", "txExcOutputOpen"), ("RS-XX8000-DVB-TX-MIB", "txExcBoardTemperatureWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcFanWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcFanFault"), ("RS-XX8000-DVB-TX-MIB", "txExcFifoWarning"), ("RS-XX8000-DVB-TX-MIB", "txExcTestSignal"), ("RS-XX8000-DVB-TX-MIB", "txExcSFNDelay"), ("RS-XX8000-DVB-TX-MIB", "txExcWrongDatarate"), ("RS-XX8000-DVB-TX-MIB", "txExcMute"), ("RS-XX8000-DVB-TX-MIB", "txExcPPSFail"), ("RS-XX8000-DVB-TX-MIB", "txExcReferenceFail"), ("RS-XX8000-DVB-TX-MIB", "txExcMIPFail"), ("RS-XX8000-DVB-TX-MIB", "txExcInputAutomaticSwitchReady"), ("RS-XX8000-DVB-TX-MIB", "txExcRfOk"), ("RS-XX8000-DVB-TX-MIB", "txExcInputReseveMissing"), ("RS-XX8000-DVB-TX-MIB", "txExcInputAutomaticChangedOver"), ("RS-XX8000-DVB-TX-MIB", "txExcLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsExciter = groupEventsExciter.setStatus('current')
if mibBuilder.loadTexts: groupEventsExciter.setDescription('events from the exciter')
groupExciterStatus = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 27)).setObjects(("RS-XX8000-DVB-TX-MIB", "excStatusRfOutputAgcRegulation"), ("RS-XX8000-DVB-TX-MIB", "excStatusRfIqAdjustAuto"), ("RS-XX8000-DVB-TX-MIB", "excStatusRfIqAdjustLO1Frequency"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayProcessing"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayDynamic"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayNetwork"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayTxOffset"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayMaximum"), ("RS-XX8000-DVB-TX-MIB", "excStatusSfnDelayTotal"), ("RS-XX8000-DVB-TX-MIB", "excStatusNominalPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExciterStatus = groupExciterStatus.setStatus('current')
if mibBuilder.loadTexts: groupExciterStatus.setDescription('Group for exciterStatusTable.')
groupExciterPrecorrection = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 28)).setObjects(("RS-XX8000-DVB-TX-MIB", "excPrecLinCorrection"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAutomaticADE"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinMaxAmplitudeRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinMaxGroupDelayRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAmplitudeRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinGroupDelayRipple"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinInputLevel"), ("RS-XX8000-DVB-TX-MIB", "excPrecLinAutomatic"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinCorrection"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinAutomaticADE"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinThresholdShoulders"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinShoulderLeft"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinShoulderRight"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinInputLevel"), ("RS-XX8000-DVB-TX-MIB", "excPrecNonlinAutomatic"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupExciterPrecorrection = groupExciterPrecorrection.setStatus('current')
if mibBuilder.loadTexts: groupExciterPrecorrection.setDescription('Group for exciterPrecorrectionTable.')
groupSLx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 29)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcTransmitterType"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTimeScheduler"), ("RS-XX8000-DVB-TX-MIB", "excPrecUserState"), ("RS-XX8000-DVB-TX-MIB", "excPrecFactoryState"), ("RS-XX8000-DVB-TX-MIB", "excPrecRestoreCurrentSettings"), ("RS-XX8000-DVB-TX-MIB", "excPrecRestoreAllSettings"), ("RS-XX8000-DVB-TX-MIB", "configTvStandardName"), ("RS-XX8000-DVB-TX-MIB", "configFrequency"), ("RS-XX8000-DVB-TX-MIB", "configPower"), ("RS-XX8000-DVB-TX-MIB", "schedulerRowStatus"), ("RS-XX8000-DVB-TX-MIB", "schedulerEvent"), ("RS-XX8000-DVB-TX-MIB", "schedulerDateTime"), ("RS-XX8000-DVB-TX-MIB", "config2InputSource"), ("RS-XX8000-DVB-TX-MIB", "config2Power"), ("RS-XX8000-DVB-TX-MIB", "config2Frequency"), ("RS-XX8000-DVB-TX-MIB", "config2RxFrequency"), ("RS-XX8000-DVB-TX-MIB", "config2TvStandardName"), ("RS-XX8000-DVB-TX-MIB", "excStatusVSWR"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMuteCondition"), ("RS-XX8000-DVB-TX-MIB", "schedulerTvStandard"), ("RS-XX8000-DVB-TX-MIB", "configRxFrequency"), ("RS-XX8000-DVB-TX-MIB", "configInputSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupSLx = groupSLx.setStatus('current')
if mibBuilder.loadTexts: groupSLx.setDescription('object types that are relevant for SLx devices only')
groupObjectsACU = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 30)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdExcRfWarningLimit"), ("RS-XX8000-DVB-TX-MIB", "cmdExcRfFailLimit"), ("RS-XX8000-DVB-TX-MIB", "cmdExcOutputPower"), ("RS-XX8000-DVB-TX-MIB", "cmdExcMonitoringOutput"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsACU = groupObjectsACU.setStatus('current')
if mibBuilder.loadTexts: groupObjectsACU.setDescription('objects from ACU')
groupIndependentRacks = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 31)).setObjects(("RS-XX8000-DVB-TX-MIB", "rackReferenceVoltage"), ("RS-XX8000-DVB-TX-MIB", "amplifiersPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "rackOnOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupIndependentRacks = groupIndependentRacks.setStatus('current')
if mibBuilder.loadTexts: groupIndependentRacks.setDescription('object types that are relevant for NX variants with independent racks only')
groupObjectsRE = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 32)).setObjects(("RS-XX8000-DVB-TX-MIB", "summaryFaultExcA"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsRE = groupObjectsRE.setStatus('current')
if mibBuilder.loadTexts: groupObjectsRE.setDescription('object types for the re-equip kit')
groupEventsControlExciter = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 34)).setObjects(("RS-XX8000-DVB-TX-MIB", "txNetCCUNoConnectionToExcB"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcReady"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcChanged"), ("RS-XX8000-DVB-TX-MIB", "txAutomaticExcFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsControlExciter = groupEventsControlExciter.setStatus('current')
if mibBuilder.loadTexts: groupEventsControlExciter.setDescription('additional events in case Sx801 is control exciter')
groupEventsAdditionalPowerSupply = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 35)).setObjects(("RS-XX8000-DVB-TX-MIB", "txInternalPowerSupplyWarning"), ("RS-XX8000-DVB-TX-MIB", "txExternalPowerSupplyWarning"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsAdditionalPowerSupply = groupEventsAdditionalPowerSupply.setStatus('current')
if mibBuilder.loadTexts: groupEventsAdditionalPowerSupply.setDescription('Events that are available only when additionalPowerSupply is true.')
groupObjsAdditionalPowerSupply = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 36)).setObjects(("RS-XX8000-DVB-TX-MIB", "internalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "externalPowerSupply"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjsAdditionalPowerSupply = groupObjsAdditionalPowerSupply.setStatus('current')
if mibBuilder.loadTexts: groupObjsAdditionalPowerSupply.setDescription('Objects that are available only when additionalPowerSupply is true.')
groupObjectsControlExciter = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 37)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxOperationModeReserve"), ("RS-XX8000-DVB-TX-MIB", "cmdTxOpModeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "cmdTxDelayTimeExcAutomatic"), ("RS-XX8000-DVB-TX-MIB", "summaryFaultExcB"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticReady"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticChanged"), ("RS-XX8000-DVB-TX-MIB", "exciterAutomaticFault"), ("RS-XX8000-DVB-TX-MIB", "noConnectionExcB"), ("RS-XX8000-DVB-TX-MIB", "activeExcB"), ("RS-XX8000-DVB-TX-MIB", "cmdTxProgramExciterPrio"), ("RS-XX8000-DVB-TX-MIB", "cmdTxChangeOver"), ("RS-XX8000-DVB-TX-MIB", "cmdTxSwitchPosition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsControlExciter = groupObjectsControlExciter.setStatus('current')
if mibBuilder.loadTexts: groupObjectsControlExciter.setDescription('additional objects in case Sx801 is control exciter')
groupObjectsSingleEnded = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 38)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxRfSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsSingleEnded = groupObjectsSingleEnded.setStatus('current')
if mibBuilder.loadTexts: groupObjectsSingleEnded.setDescription('Group for objects in case of SingleTx or DualDrive.')
groupObjectsSx801Amplifier = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 39)).setObjects(("RS-XX8000-DVB-TX-MIB", "sx801AmpRfOut"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpRfIn"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpReflection"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpOn"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpAC"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpCommunication"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpTransistor"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpDriver"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpBlower"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpRegulation"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpUpdate"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1Temperature"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2Temperature"), ("RS-XX8000-DVB-TX-MIB", "sx801SupplyRTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1DC"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2DC"), ("RS-XX8000-DVB-TX-MIB", "sx801SupplyRDC"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI2"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI3"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueI4"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIPre"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIDrv1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueIDrv2"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValuePowerOut"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueReflection"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVRef"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVReg"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueTemperature"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueMonAtt"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVAux1"), ("RS-XX8000-DVB-TX-MIB", "sx801AmpValueVAux2"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1ValuePwr"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2ValuePwr"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply1ValueDc"), ("RS-XX8000-DVB-TX-MIB", "sx801Supply2ValueDc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObjectsSx801Amplifier = groupObjectsSx801Amplifier.setStatus('current')
if mibBuilder.loadTexts: groupObjectsSx801Amplifier.setDescription('Objects for Sx801/SA801 amplifier status.')
groupObsoleted = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 99)).setObjects(("RS-XX8000-DVB-TX-MIB", "cmdTxParametersetReSave"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTimeForDailyPcrReset"), ("RS-XX8000-DVB-TX-MIB", "cmdExcEnablePcrReset"), ("RS-XX8000-DVB-TX-MIB", "excInputAlpha"), ("RS-XX8000-DVB-TX-MIB", "cmdExcTPSManualAlpha"), ("RS-XX8000-DVB-TX-MIB", "rfProbeConfigurationLabel"), ("RS-XX8000-DVB-TX-MIB", "cmdExcInputAutoSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupObsoleted = groupObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: groupObsoleted.setDescription('obsoleted or deprecated objects')
groupEventsObsoleted = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 1, 100)).setObjects(("RS-XX8000-DVB-TX-MIB", "txParamSetSubDeviceDiffers"), ("RS-XX8000-DVB-TX-MIB", "txNetCCUBoardTemperatureFault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    groupEventsObsoleted = groupEventsObsoleted.setStatus('obsolete')
if mibBuilder.loadTexts: groupEventsObsoleted.setDescription('obsoleted or deprecated events')
rsXx8000DvbTxCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3))
rsXx8000DVBSingleTxMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 1)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSingleEnded"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxMP = rsXx8000DVBSingleTxMP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBSingleTxMP.setDescription('Reserve concept SingleTransmitter for Medium Power.')
rsXx8000DVBDualDriveMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 2)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSingleEnded"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBDualDriveMP = rsXx8000DVBDualDriveMP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBDualDriveMP.setDescription('Reserve concept DualDrive for Medium Power.')
rsXx8000DVBPowerReserveMP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 3)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupRfProbes"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupOstBLogbook"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonMP"), ("RS-XX8000-DVB-TX-MIB", "groupEventsPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupIndependentRacks"), ("RS-XX8000-DVB-TX-MIB", "groupSumProbe"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSx800"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupAmpMeasureValues"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAmplifier"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupDummyLoadRF"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBPowerReserveMP = rsXx8000DVBPowerReserveMP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBPowerReserveMP.setDescription('Reserve concept Active/Passive Reserve for Medium Power.')
rsXx8000DVBSingleTxLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 5)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxLP = rsXx8000DVBSingleTxLP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBSingleTxLP.setDescription('Reserve concept Low Power SingleTransmitter with NetCCU, meaning there is a NetCCU and a \n                LowPower exciter with one or more (to the exciter) connected amplifiers.')
rsXx8000DVBDualDriveLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 6)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBDualDriveLP = rsXx8000DVBDualDriveLP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBDualDriveLP.setDescription('Reserve concept DualDrive for Low Power.')
rsXx8000DVBPowerReserveLP = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 7)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsCommonNetCCU"), ("RS-XX8000-DVB-TX-MIB", "groupEventsPowerReserve"), ("RS-XX8000-DVB-TX-MIB", "groupEventsDualDrive"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsAdditionalPowerSupply"), ("RS-XX8000-DVB-TX-MIB", "groupObjsAdditionalPowerSupply"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBPowerReserveLP = rsXx8000DVBPowerReserveLP.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBPowerReserveLP.setDescription('Reserve concept Active/Passive Reserve for Low Power.')
rsXx8000DVBSingleTxLPNoNetCCU = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 9)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcAdditionalSLx"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSingleTxLPNoNetCCU = rsXx8000DVBSingleTxLPNoNetCCU.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBSingleTxLPNoNetCCU.setDescription('Reserve concept Low Power SingleTransmitter without NetCCU, meaning there is only a\n                LowPower exciter with one or more (to the exciter) connected amplifiers.')
rsXx8000DVBSLx = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 10)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsACU"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSLx = rsXx8000DVBSLx.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBSLx.setDescription('SLx device')
rsXx8000DVBExciterOnly = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 11)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupProductInfo"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsRE"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSx801Amplifier"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBExciterOnly = rsXx8000DVBExciterOnly.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBExciterOnly.setDescription('DVB Exciter of 8000 series in a 7000 environment\n                or\n                Program Exciter in a Sx801 Backup Exciter environment.')
rsXx8000DVBSx801ControlExciter = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 167, 4, 5, 3, 12)).setObjects(("RS-XX8000-DVB-TX-MIB", "groupTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupExcCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEvents"), ("RS-XX8000-DVB-TX-MIB", "groupExciterStatus"), ("RS-XX8000-DVB-TX-MIB", "groupExciterPrecorrection"), ("RS-XX8000-DVB-TX-MIB", "groupSLx"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsACU"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsSx801Amplifier"), ("RS-XX8000-DVB-TX-MIB", "groupEventsExciter"), ("RS-XX8000-DVB-TX-MIB", "groupEventsTxCommon"), ("RS-XX8000-DVB-TX-MIB", "groupEventsControlExciter"), ("RS-XX8000-DVB-TX-MIB", "groupObjectsControlExciter"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx8000DVBSx801ControlExciter = rsXx8000DVBSx801ControlExciter.setStatus('current')
if mibBuilder.loadTexts: rsXx8000DVBSx801ControlExciter.setDescription('Sx801 as control exciter')
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", noConnectionOstB=noConnectionOstB, ostRackAmpI3A=ostRackAmpI3A, sx801SupplyRTemperature=sx801SupplyRTemperature, activeOstA=activeOstA, excPrecLinAmplitudeRipple=excPrecLinAmplitudeRipple, rfProbeCalibrationSetGain=rfProbeCalibrationSetGain, cmdExcRfOutputAttenuation=cmdExcRfOutputAttenuation, excPrecLinGroupDelayRipple=excPrecLinGroupDelayRipple, exciterStatusTable=exciterStatusTable, txNetCCUNoConnectionToOstB=txNetCCUNoConnectionToOstB, eventTxEvent=eventTxEvent, cmdExcTPSManualFECHP=cmdExcTPSManualFECHP, cmdExcInputManualPreseletionHP1=cmdExcInputManualPreseletionHP1, ostRackAmpI1A=ostRackAmpI1A, txModeInconsistent=txModeInconsistent, noConnectionExcB=noConnectionExcB, txRackTemperatureFault=txRackTemperatureFault, txExcInputActiveHP2=txExcInputActiveHP2, cmdExcFrequency=cmdExcFrequency, excInputExcIdx=excInputExcIdx, rackRfEventSignalling=rackRfEventSignalling, outputstageAutomaticFault=outputstageAutomaticFault, excStatusNominalPower=excStatusNominalPower, reflectedPower=reflectedPower, ostRackAmpUDcControl=ostRackAmpUDcControl, exciterBLogbookEntry=exciterBLogbookEntry, rfProbesAntFwdFailLimit=rfProbesAntFwdFailLimit, rsXx8000DvbTxMibModule=rsXx8000DvbTxMibModule, cmdExcRefFailDelayTime=cmdExcRefFailDelayTime, cmdTxPreselectOutputstage=cmdTxPreselectOutputstage, configTvStandardName=configTvStandardName, eventTxName=eventTxName, sx801AmpValueI1=sx801AmpValueI1, configuration2Table=configuration2Table, txAmpReflectionFault=txAmpReflectionFault, excPrecLinMaxGroupDelayRipple=excPrecLinMaxGroupDelayRipple, sx801AmpRegulation=sx801AmpRegulation, ostRackAmpDeltaPhase=ostRackAmpDeltaPhase, excStatusFailDelay=excStatusFailDelay, excBLogbookEntryIdx=excBLogbookEntryIdx, rsXx8000DVBSingleTxLP=rsXx8000DVBSingleTxLP, txInternalPowerSupplyWarning=txInternalPowerSupplyWarning, cmdTxParametersetLoad=cmdTxParametersetLoad, sx801AmpValueI4=sx801AmpValueI4, sx801AmpValueIDrv1=sx801AmpValueIDrv1, excInputConstellation=excInputConstellation, cmdExcOutputPower=cmdExcOutputPower, rsXx8000DVBPowerReserveLP=rsXx8000DVBPowerReserveLP, rfProbeThresholdTimeoutRfFailCtr=rfProbeThresholdTimeoutRfFailCtr, txExcInputNoConnectHP1=txExcInputNoConnectHP1, schedulerRowStatus=schedulerRowStatus, txRackFan1Fault=txRackFan1Fault, exciterALogbookEntry=exciterALogbookEntry, exciterALogbookClear=exciterALogbookClear, cmdExcMuteOnReferenceFail=cmdExcMuteOnReferenceFail, txAmpTemperatureFault=txAmpTemperatureFault, eventTxMask=eventTxMask, excPrecNonlinShoulderRight=excPrecNonlinShoulderRight, sx801AmpRfOut=sx801AmpRfOut, cmdExcTPSManualCoderateLP=cmdExcTPSManualCoderateLP, cmdExcSFNDeviationTime=cmdExcSFNDeviationTime, cmdExcExpectInputReserve=cmdExcExpectInputReserve, excInputChannelIdx=excInputChannelIdx, txRfFail=txRfFail, txSummaryWarning=txSummaryWarning, ostBLogbookSlope=ostBLogbookSlope, groupObjectsSx801Amplifier=groupObjectsSx801Amplifier, txExcBoardTemperatureWarning=txExcBoardTemperatureWarning, prodInfoSerialNumber=prodInfoSerialNumber, excBLogbookType=excBLogbookType, txRfLoopReserve=txRfLoopReserve, eventTx=eventTx, txOstRfFail=txOstRfFail, groupDualDrive=groupDualDrive, txNetCCUBoardTemperatureWarning=txNetCCUBoardTemperatureWarning, excPrecLinMaxAmplitudeRipple=excPrecLinMaxAmplitudeRipple, cmdExcInputManualPreseletionLP1=cmdExcInputManualPreseletionLP1, excALogbookDateTime=excALogbookDateTime, cmdExcInpAutoReadyAfterChangeOv=cmdExcInpAutoReadyAfterChangeOv, rfProbesDLFwdNominal=rfProbesDLFwdNominal, groupTxCommon=groupTxCommon, excStatusSfnDelayMaximum=excStatusSfnDelayMaximum, rfProbesOstFwdFailLimit=rfProbesOstFwdFailLimit, sx801AmpValueMonAtt=sx801AmpValueMonAtt, txExcNoInput=txExcNoInput, cmdExcTPSManualTimeSlicingLP=cmdExcTPSManualTimeSlicingLP, txAmpTransistorFault=txAmpTransistorFault, cmdExcRfIqAdjustBiasCoarseQ=cmdExcRfIqAdjustBiasCoarseQ, cmdExcInputManualPreseletionHP2=cmdExcInputManualPreseletionHP2, cmdExcInputSeamless=cmdExcInputSeamless, txRackTemperatureWarning=txRackTemperatureWarning, cmdTxRfSwitch=cmdTxRfSwitch, cmdExcMuteOnPPSFail=cmdExcMuteOnPPSFail, txOstCoolingWarning=txOstCoolingWarning, rfProbesTable=rfProbesTable, cmdExcInputManualPreseletionLP2=cmdExcInputManualPreseletionLP2, txAutomaticOstChanged=txAutomaticOstChanged, excALogbookMessage=excALogbookMessage, txOstRackWarning=txOstRackWarning, cmdTxProgramExciterPrio=cmdTxProgramExciterPrio, outputstageALogbookEntry=outputstageALogbookEntry, excPrecNonlinShoulderLeft=excPrecNonlinShoulderLeft, txNetCCUPowerSupply=txNetCCUPowerSupply, rfProbePresent=rfProbePresent, excInputMipFail=excInputMipFail, sx801Supply2DC=sx801Supply2DC, forwardPowerOstA=forwardPowerOstA, ostALogbookMessage=ostALogbookMessage, groupEventsAmplifier=groupEventsAmplifier, excStatusSfnDelayTotal=excStatusSfnDelayTotal, sx801AmpValueVReg=sx801AmpValueVReg, rsXx8000DVBSingleTxMP=rsXx8000DVBSingleTxMP, rsXx8000DVBSLx=rsXx8000DVBSLx, txRackSumWarning=txRackSumWarning, noConnectionExcA=noConnectionExcA, rfProbeThresholdRfFailLimit=rfProbeThresholdRfFailLimit, ostRackAmpIDc=ostRackAmpIDc, cmdExcRfIqAdjustGainQ=cmdExcRfIqAdjustGainQ, config2TvStandardName=config2TvStandardName, ostBLogbookDateTime=ostBLogbookDateTime, cmdTxResetSumFault=cmdTxResetSumFault, productInfoEntry=productInfoEntry, rfProbesOstFwdSetGain=rfProbesOstFwdSetGain, rsXx8000DVBDualDriveMP=rsXx8000DVBDualDriveMP, sx801AmpAC=sx801AmpAC, excBLogbookMessage=excBLogbookMessage, txExcInputNoConnectLP2=txExcInputNoConnectLP2, configFrequency=configFrequency, sx801AmpValueIDrv2=sx801AmpValueIDrv2, ostRackAmpPowerB=ostRackAmpPowerB, cmdExcTPSManualBandwidth=cmdExcTPSManualBandwidth, excInputSeamless=excInputSeamless, txAmpDCOk=txAmpDCOk, cmdTxDelayTimeExcAutomatic=cmdTxDelayTimeExcAutomatic, summaryFaultExcB=summaryFaultExcB, excStatusSfnDelayProcessing=excStatusSfnDelayProcessing, txAmpRfInFail=txAmpRfInFail, txExcLocal=txExcLocal, eventTxNameIdx=eventTxNameIdx, cmdExcRfIqAdjustStart=cmdExcRfIqAdjustStart, sx801Supply1Temperature=sx801Supply1Temperature, txRackTempFaultAbs1=txRackTempFaultAbs1, ostRackIdx=ostRackIdx, groupEventsDualDrive=groupEventsDualDrive, rfProbesAntFwdSetOffset=rfProbesAntFwdSetOffset, ostALogbookDateTime=ostALogbookDateTime, sx801AmpBlower=sx801AmpBlower, txExternalPowerSupplyWarning=txExternalPowerSupplyWarning, cmdExcInputCheckTimeSwitchback=cmdExcInputCheckTimeSwitchback, rackRfProbeIdx=rackRfProbeIdx, internalPowerSupply=internalPowerSupply, txExcSummaryWarning=txExcSummaryWarning, sx801Supply2ValuePwr=sx801Supply2ValuePwr, sx801SupplyRDC=sx801SupplyRDC, ostBLogbookEntryIdx=ostBLogbookEntryIdx, forwardPower=forwardPower, excPrecRestoreAllSettings=excPrecRestoreAllSettings, txOstCoolingFault=txOstCoolingFault, cmdExcEnableCellID=cmdExcEnableCellID, excPrecNonlinThresholdShoulders=excPrecNonlinThresholdShoulders, exciterPrecorrectionTable=exciterPrecorrectionTable, excInputTable=excInputTable, txExcInputReseveMissing=txExcInputReseveMissing, cmdExcRfIqAdjustTestsignal=cmdExcRfIqAdjustTestsignal, groupSLx=groupSLx, txRackCoolingSumFault=txRackCoolingSumFault, config2Frequency=config2Frequency, rfProbesDLFwdSetGain=rfProbesDLFwdSetGain, groupEventsCommonNetCCU=groupEventsCommonNetCCU, ostALogbookType=ostALogbookType, txExcRfOk=txExcRfOk, outputstageBLogbookEntry=outputstageBLogbookEntry, excStatusSfnDelayTxOffset=excStatusSfnDelayTxOffset, txExcInputAutomaticSwitchReady=txExcInputAutomaticSwitchReady, txOstRfWarning=txOstRfWarning, excInputGuardInterval=excInputGuardInterval, txOstSummaryFault=txOstSummaryFault, cmdExcTPSManualCoderateHP=cmdExcTPSManualCoderateHP, groupExcAdditionalSLx=groupExcAdditionalSLx, cmdExcRfIqAdjustBiasFineI=cmdExcRfIqAdjustBiasFineI, excInputEntry=excInputEntry, excStatusRfOutputAgcRegulation=excStatusRfOutputAgcRegulation, groupExciterStatus=groupExciterStatus, rfProbesAntReflSetOffset=rfProbesAntReflSetOffset, summaryWarningTx=summaryWarningTx, config2RxFrequency=config2RxFrequency, outputstageALogbookClear=outputstageALogbookClear, txOstCommFault=txOstCommFault, groupEventsObsoleted=groupEventsObsoleted, cmdExcTPSSource=cmdExcTPSSource, txExcOn=txExcOn, ostRackInletTemperature=ostRackInletTemperature, excInputCellID=excInputCellID, cmdExcTxAddress=cmdExcTxAddress, rfOnTx=rfOnTx, reflectedPowerOstB=reflectedPowerOstB, txOstSummaryWarning=txOstSummaryWarning, txModeSwitchOverStarted=txModeSwitchOverStarted, cmdExcInputFailDelayTime=cmdExcInputFailDelayTime, txParamSetValuesChanged=txParamSetValuesChanged, txRackOvervoltProtectWarning=txRackOvervoltProtectWarning, rackReferenceVoltage=rackReferenceVoltage, summaryFaultOstA=summaryFaultOstA, groupEventsPowerReserve=groupEventsPowerReserve, ostRackAmpPowerA=ostRackAmpPowerA, txRackACFault=txRackACFault, cmdExcTxAutomatic=cmdExcTxAutomatic, rsXx8000DVBExciterOnly=rsXx8000DVBExciterOnly, excInputActive=excInputActive, ostRackAmpI4A=ostRackAmpI4A, configurationTable=configurationTable, cmdTxPreselectExciter=cmdTxPreselectExciter, cmdTxChangeOver=cmdTxChangeOver, txExcTestSignal=txExcTestSignal, prodInfoIdentNumberHW=prodInfoIdentNumberHW, cmdTxParametersetReSave=cmdTxParametersetReSave, prodInfoDeviceIdx=prodInfoDeviceIdx, cmdOstRefVoltageVision=cmdOstRefVoltageVision, prodInfoVersionNumberHW=prodInfoVersionNumberHW, excPrecNonlinAutomatic=excPrecNonlinAutomatic, rfProbesOstIdx=rfProbesOstIdx, rfProbesOstReflSetOffset=rfProbesOstReflSetOffset, activeExcA=activeExcA, cmdExcInput2Source=cmdExcInput2Source, rfProbesDLFwdFailLimit=rfProbesDLFwdFailLimit, excInputCodeRate=excInputCodeRate, config2InputSource=config2InputSource, ostRackAmpCmdDeltaPhase=ostRackAmpCmdDeltaPhase, txExcInputActiveHP1=txExcInputActiveHP1, txExcPPSFail=txExcPPSFail, groupEventsAdditionalPowerSupply=groupEventsAdditionalPowerSupply, ostRackAmpUDc=ostRackAmpUDc, sx801AmpValueIPre=sx801AmpValueIPre, exciterPrecorrectionEntry=exciterPrecorrectionEntry, txOstACFault=txOstACFault, rfProbeConfigurationLabel=rfProbeConfigurationLabel, groupCommonMP=groupCommonMP, commandsTxTable=commandsTxTable, excPrecLinAutomaticADE=excPrecLinAutomaticADE, rsXx8000DVBDualDriveLP=rsXx8000DVBDualDriveLP, activeExcB=activeExcB, excPrecExcIdx=excPrecExcIdx, sx801AmpValueI3=sx801AmpValueI3, config2Power=config2Power, rackTable=rackTable, eventTxRackIdx=eventTxRackIdx, sx801AmplifierEntry=sx801AmplifierEntry, ostRackAmpI4B=ostRackAmpI4B, txRackOn=txRackOn, sx801Supply1DC=sx801Supply1DC, txRackAmplifierSumFault=txRackAmplifierSumFault, cmdTxDelayTimeOstAutomatic=cmdTxDelayTimeOstAutomatic, txExcRfLoop=txExcRfLoop, txExcMIPFail=txExcMIPFail)
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", cmdTxOperationModeReserve=cmdTxOperationModeReserve, rfProbesOstFwdDelayTimeRfFail=rfProbesOstFwdDelayTimeRfFail, txExcInputNoConnectHP2=txExcInputNoConnectHP2, cmdExcRfIqAdjustBiasCoarseI=cmdExcRfIqAdjustBiasCoarseI, cmdExcMonitoringOutput=cmdExcMonitoringOutput, cmdExcInputCheckTimeForward=cmdExcInputCheckTimeForward, txExcRfFail=txExcRfFail, exciterANumberOfEntries=exciterANumberOfEntries, cmdExcTPSManualFFTLength=cmdExcTPSManualFFTLength, cmdExcTPSManualFECLP=cmdExcTPSManualFECLP, rfProbesAntReflWarningLimit=rfProbesAntReflWarningLimit, excALogbookType=excALogbookType, cmdExcNetworkMode=cmdExcNetworkMode, sx801Supply1ValuePwr=sx801Supply1ValuePwr, txRackGpiWarning=txRackGpiWarning, groupObsoleted=groupObsoleted, sx801AmpTransistor=sx801AmpTransistor, cmdExcRfIqAdjustBiasFineQ=cmdExcRfIqAdjustBiasFineQ, sx801AmpValueVAux2=sx801AmpValueVAux2, groupEventsControlExciter=groupEventsControlExciter, externalPowerSupply=externalPowerSupply, ostRackOutletTemperature=ostRackOutletTemperature, rfProbesDLFwdDelayTimeRfFail=rfProbesDLFwdDelayTimeRfFail, sx801AmpUpdate=sx801AmpUpdate, ostRackAmpUReg=ostRackAmpUReg, groupObjectsACU=groupObjectsACU, configPower=configPower, excInputMeasuredDatarate=excInputMeasuredDatarate, rfProbesNetCCURfProbe1=rfProbesNetCCURfProbe1, netCCULogbookDateTime=netCCULogbookDateTime, ostRackAmpI3B=ostRackAmpI3B, txRackRfWarning=txRackRfWarning, reflectedPowerOstA=reflectedPowerOstA, excInputMaximumDelay=excInputMaximumDelay, netCCULogbookTable=netCCULogbookTable, txOstReflectionWarning=txOstReflectionWarning, txAutomaticExcReady=txAutomaticExcReady, rsXx8000DvbTxEvents=rsXx8000DvbTxEvents, cmdExcInput1Source=cmdExcInput1Source, outputstageAutomaticReady=outputstageAutomaticReady, cmdExcSFNStaticDelay=cmdExcSFNStaticDelay, rfProbesOstFwdWarningLimit=rfProbesOstFwdWarningLimit, txRackProbeNotCalibrated=txRackProbeNotCalibrated, sx801AmpRfIn=sx801AmpRfIn, timeSchedulerEntry=timeSchedulerEntry, txAutomaticExcChanged=txAutomaticExcChanged, sx801AmpDriver=sx801AmpDriver, txRackGpiFault=txRackGpiFault, cmdExcTPSManualCellID=cmdExcTPSManualCellID, summaryInfo=summaryInfo, txNetCCUFanFault=txNetCCUFanFault, configuration2Entry=configuration2Entry, txNetCCUNoConnectionToExcB=txNetCCUNoConnectionToExcB, cmdExcTPSManualGuardInterval=cmdExcTPSManualGuardInterval, eventsTxEntry=eventsTxEntry, cmdExcMode=cmdExcMode, rsXx8000DvbTxConf=rsXx8000DvbTxConf, txExcInputActiveLP2=txExcInputActiveLP2, configRxFrequency=configRxFrequency, txExcWrongDatarate=txExcWrongDatarate, excPrecLinAutomatic=excPrecLinAutomatic, prodInfoModuleName=prodInfoModuleName, txNetCCUNoConnectionToOstA=txNetCCUNoConnectionToOstA, excALogbookEntryNbr=excALogbookEntryNbr, ostRackAuxPowerSupply=ostRackAuxPowerSupply, excInputFFTLength=excInputFFTLength, cmdTxParametersetSave=cmdTxParametersetSave, forwardPowerOstB=forwardPowerOstB, txExcMute=txExcMute, rsXx8000DvbTxGroups=rsXx8000DvbTxGroups, exciterBNumberOfEntries=exciterBNumberOfEntries, txReflectionFault=txReflectionFault, rfProbesOstFwdSetOffset=rfProbesOstFwdSetOffset, cmdExcRfOutputManualRfLevel=cmdExcRfOutputManualRfLevel, exciterALogbookTable=exciterALogbookTable, cmdExcRfOutput=cmdExcRfOutput, rsXx8000DvbTxCompl=rsXx8000DvbTxCompl, prodInfoIdentNumberSW=prodInfoIdentNumberSW, timeSchedulerTable=timeSchedulerTable, excPrecLinCorrection=excPrecLinCorrection, prodInfoModuleIdx=prodInfoModuleIdx, rfProbesOstReflSetGain=rfProbesOstReflSetGain, txRfOk=txRfOk, txAmpACOk=txAmpACOk, exciterAutomaticReady=exciterAutomaticReady, cmdExcInputPriority=cmdExcInputPriority, txExcInputActiveLP1=txExcInputActiveLP1, ostBLogbookEntryNbr=ostBLogbookEntryNbr, summaryFaultExcA=summaryFaultExcA, txAutomaticExcFault=txAutomaticExcFault, outputstageALogbookTable=outputstageALogbookTable, groupExcAdditionalSx800=groupExcAdditionalSx800, excStatusExcIdx=excStatusExcIdx, excALogbookEntryIdx=excALogbookEntryIdx, outputstageANumberOfEntries=outputstageANumberOfEntries, exciterStatusEntry=exciterStatusEntry, exciterAutomaticChanged=exciterAutomaticChanged, groupDummyLoadRF=groupDummyLoadRF, ostRackAmpI1B=ostRackAmpI1B, rsXx8000DvbTx=rsXx8000DvbTx, eventTxABIdx=eventTxABIdx, sx801AmpTemperature=sx801AmpTemperature, excALogbookSlope=excALogbookSlope, cmdExcEnablePcrReset=cmdExcEnablePcrReset, cmdExcOcxoAdjust=cmdExcOcxoAdjust, txRfLoopProgram=txRfLoopProgram, groupEventsCommonMP=groupEventsCommonMP, txExcFifoWarning=txExcFifoWarning, groupObjectsSingleEnded=groupObjectsSingleEnded, outputstageBLogbookTable=outputstageBLogbookTable, prodInfoVersionNumberSW=prodInfoVersionNumberSW, groupEventsTxCommon=groupEventsTxCommon, excInputInterleaver=excInputInterleaver, groupObjectsControlExciter=groupObjectsControlExciter, sx801AmpReflection=sx801AmpReflection, txReflectionWarning=txReflectionWarning, txRackCoolingSumWarning=txRackCoolingSumWarning, txExcRfOn=txExcRfOn, groupExciterPrecorrection=groupExciterPrecorrection, excStatusSfnDelayDynamic=excStatusSfnDelayDynamic, txRackFan2Fault=txRackFan2Fault, txModeSwitchOverEnded=txModeSwitchOverEnded, ostALogbookSlope=ostALogbookSlope, excStatusSfnDelayNetwork=excStatusSfnDelayNetwork, txExcReferenceFail=txExcReferenceFail, excInputConnected=excInputConnected, txOstNoInput=txOstNoInput, ostRackAmpIdx=ostRackAmpIdx, ostRackAmpI2A=ostRackAmpI2A, rsXx8000DVBPowerReserveMP=rsXx8000DVBPowerReserveMP, activeOstB=activeOstB, schedulerDateTimeIdx=schedulerDateTimeIdx, configInputSource=configInputSource, excPrecNonlinCorrection=excPrecNonlinCorrection, txExcSummaryFault=txExcSummaryFault, netCCULogbookSlope=netCCULogbookSlope, summaryFaultOstB=summaryFaultOstB, sx801Supply1ValueDc=sx801Supply1ValueDc, groupProductInfo=groupProductInfo, rfProbesDLReflSetOffset=rfProbesDLReflSetOffset, sx801AmpValueTemperature=sx801AmpValueTemperature, cmdExcRfFailLimit=cmdExcRfFailLimit, groupOstBLogbook=groupOstBLogbook, cmdExcTPSManualTimeSlicingHP=cmdExcTPSManualTimeSlicingHP, cmdExcReferenceSource=cmdExcReferenceSource, txNetCCUBoardTemperatureFault=txNetCCUBoardTemperatureFault, txRackTempFaultAbs2=txRackTempFaultAbs2, groupRfProbes=groupRfProbes, cmdTxSwitchPosition=cmdTxSwitchPosition, excInputRequiredDatarate=excInputRequiredDatarate, rfProbeCalibrationSetOffset=rfProbeCalibrationSetOffset, netCCULogbookClear=netCCULogbookClear, txExcFanWarning=txExcFanWarning, ostRackAmpPowerOut=ostRackAmpPowerOut, groupPowerReserve=groupPowerReserve, cmdExcMuteCondition=cmdExcMuteCondition, netCCUNumberOfEntries=netCCUNumberOfEntries, sx801AmpCommunication=sx801AmpCommunication, txExcFanFault=txExcFanFault, excStatusRfIqAdjustLO1Frequency=excStatusRfIqAdjustLO1Frequency, excInputAlpha=excInputAlpha, excPrecRestoreCurrentSettings=excPrecRestoreCurrentSettings, exciterBLogbookClear=exciterBLogbookClear, exciterBLogbookTable=exciterBLogbookTable, rfProbesDLReflSetGain=rfProbesDLReflSetGain, sx801Supply2Temperature=sx801Supply2Temperature, txExcOutputOpen=txExcOutputOpen, sx801AmpValueI2=sx801AmpValueI2, additionalPowerSupply=additionalPowerSupply, rfProbesDLReflWarningLimit=rfProbesDLReflWarningLimit, cmdExcTPSManualConstellation=cmdExcTPSManualConstellation, schedulerDateTime=schedulerDateTime, txRackSumFault=txRackSumFault, productInfoProductDateHW=productInfoProductDateHW, rsXx8000DVBSx801ControlExciter=rsXx8000DVBSx801ControlExciter, txRackRfOn=txRackRfOn, eventsTxV2=eventsTxV2, sx801AmpValuePowerOut=sx801AmpValuePowerOut, cmdExcInputAutoSwitch=cmdExcInputAutoSwitch, cmdOstMaxOutletTempThreshold=cmdOstMaxOutletTempThreshold, configurationEntry=configurationEntry, txExcSFNDelay=txExcSFNDelay, excStatusReqDataRateLP=excStatusReqDataRateLP, groupEventsExciter=groupEventsExciter, excStatusRfIqAdjustAuto=excStatusRfIqAdjustAuto, cmdExcTimeScheduler=cmdExcTimeScheduler, eventsTxTable=eventsTxTable, txRackDCFault=txRackDCFault, txRfWarning=txRfWarning, txRackReflectionFault=txRackReflectionFault, rackIdx=rackIdx, txNetCCUNoConnectionToExcA=txNetCCUNoConnectionToExcA, sx801AmpIdx=sx801AmpIdx, txAmpRfFail=txAmpRfFail, cmdExcTPSManualInterleaver=cmdExcTPSManualInterleaver, excPrecLinInputLevel=excPrecLinInputLevel, excInputPacketLength=excInputPacketLength, rackGeneralPurposeInput=rackGeneralPurposeInput, exciterAutomaticFault=exciterAutomaticFault, excPrecNonlinInputLevel=excPrecNonlinInputLevel, ostRackAmpI2B=ostRackAmpI2B, rfProbesNetCCURfProbe2=rfProbesNetCCURfProbe2, cmdExcRfOutputRegulation=cmdExcRfOutputRegulation, txRfOn=txRfOn, ostEntry=ostEntry, rfProbesAntFwdSetGain=rfProbesAntFwdSetGain, sx801AmpValueVAux1=sx801AmpValueVAux1, cmdExcRfWarningLimit=cmdExcRfWarningLimit, productInfoTable=productInfoTable, schedulerEvent=schedulerEvent, rackOnOff=rackOnOff, rfProbesDLFwdWarningLimit=rfProbesDLFwdWarningLimit, txExcInputNoConnectLP1=txExcInputNoConnectLP1, ostIdx=ostIdx, sx801Supply2ValueDc=sx801Supply2ValueDc, netCCULogbookType=netCCULogbookType, excBLogbookEntryNbr=excBLogbookEntryNbr, PYSNMP_MODULE_ID=rsXx8000DvbTxMibModule, amplifiersPerRack=amplifiersPerRack, txExcInputAutomaticChangedOver=txExcInputAutomaticChangedOver, sx801AmpValueVRef=sx801AmpValueVRef, excInputChannelName=excInputChannelName, excBLogbookSlope=excBLogbookSlope, cmdTxSystemMode=cmdTxSystemMode, summaryFaultTx=summaryFaultTx, excStatusVSWR=excStatusVSWR, netCCULogbookEntryNbr=netCCULogbookEntryNbr, txOstRfOk=txOstRfOk, rfProbesDLFwdSetOffset=rfProbesDLFwdSetOffset, sx801AmplifierTable=sx801AmplifierTable, rfProbeCalibrationGain=rfProbeCalibrationGain, cmdExcFailDelayMode=cmdExcFailDelayMode, commandsTxEntry=commandsTxEntry, ostALogbookEntryNbr=ostALogbookEntryNbr, sx801AmpValueReflection=sx801AmpValueReflection, groupAmpMeasureValues=groupAmpMeasureValues, cmdExcTransmitterType=cmdExcTransmitterType, prodInfoRackIdx=prodInfoRackIdx, rfProbesAntFwdDelayTimeRfFail=rfProbesAntFwdDelayTimeRfFail, groupObjectsRE=groupObjectsRE, powerSupply=powerSupply, netCCULogbookMessage=netCCULogbookMessage, excStatusReqDataRateHP=excStatusReqDataRateHP, txSummaryFault=txSummaryFault, txAutomaticOstFault=txAutomaticOstFault, rfProbesAntFwdWarningLimit=rfProbesAntFwdWarningLimit, txOstReflectionFault=txOstReflectionFault, eventTxAmpIdx=eventTxAmpIdx, rfProbesAntReflSetGain=rfProbesAntReflSetGain, groupIndependentRacks=groupIndependentRacks, groupObjsAdditionalPowerSupply=groupObjsAdditionalPowerSupply, noConnectionOstA=noConnectionOstA, cmdExcRfOutputRfSlope=cmdExcRfOutputRfSlope, cmdExcTypeLossOfInput=cmdExcTypeLossOfInput)
mibBuilder.exportSymbols("RS-XX8000-DVB-TX-MIB", excBLogbookDateTime=excBLogbookDateTime, txAutomaticOstReady=txAutomaticOstReady, txParamSetSubDeviceDiffers=txParamSetSubDeviceDiffers, prodInfoAmpIdx=prodInfoAmpIdx, txRackRfOk=txRackRfOk, excInputPreselected=excInputPreselected, rfProbesAntFwdNominal=rfProbesAntFwdNominal, ostRackAmpPowerReference=ostRackAmpPowerReference, cmdExcPreselectInput=cmdExcPreselectInput, detailedInfo=detailedInfo, rfProbesEntry=rfProbesEntry, groupCommonNetCCU=groupCommonNetCCU, groupSumProbe=groupSumProbe, amplifiersPowerSupply=amplifiersPowerSupply, txExcSelfTest=txExcSelfTest, cmdTxOpModeOstAutomatic=cmdTxOpModeOstAutomatic, cmdExcRfIqAdjustGainI=cmdExcRfIqAdjustGainI, outputstageBNumberOfEntries=outputstageBNumberOfEntries, txAmpSumFault=txAmpSumFault, excPrecUserState=excPrecUserState, ostRackAmpIDrv=ostRackAmpIDrv, txAmpPowerOn=txAmpPowerOn, ostALogbookEntryIdx=ostALogbookEntryIdx, ostRackAmpPowerReflection=ostRackAmpPowerReflection, cmdExcInputMuteOnFail=cmdExcInputMuteOnFail, excPrecFactoryState=excPrecFactoryState, cmdExcRfOutputModulationSlope=cmdExcRfOutputModulationSlope, configTvStandardIdx=configTvStandardIdx, txRackNoLink=txRackNoLink, ostTable=ostTable, cmdExcTPSManualAlpha=cmdExcTPSManualAlpha, cmdExcTimeForDailyPcrReset=cmdExcTimeForDailyPcrReset, logbook=logbook, rfProbeCalibrationOffset=rfProbeCalibrationOffset, sx801AmpOn=sx801AmpOn, eventTxPriority=eventTxPriority, txRackReflectionWarning=txRackReflectionWarning, cmdExcRfIqAdjustPhase=cmdExcRfIqAdjustPhase, ostBLogbookMessage=ostBLogbookMessage, netCCULogbookEntry=netCCULogbookEntry, rsXx8000DvbTxObjs=rsXx8000DvbTxObjs, txLocal=txLocal, cmdExcOpModeInputAutomatic=cmdExcOpModeInputAutomatic, txModeSwitchOverFailed=txModeSwitchOverFailed, groupExcCommon=groupExcCommon, txOstRfOn=txOstRfOn, localModeTx=localModeTx, txAmpSumWarning=txAmpSumWarning, cmdTxOpModeExcAutomatic=cmdTxOpModeExcAutomatic, txRackRfFault=txRackRfFault, excStatusAmplifierControl=excStatusAmplifierControl, cmdTxOperationModeProgram=cmdTxOperationModeProgram, ostDeviceIdx=ostDeviceIdx, rfProbesOstFwdNominal=rfProbesOstFwdNominal, cmdDeviceIdx=cmdDeviceIdx, schedulerTvStandard=schedulerTvStandard, netCCULogbookEntryIdx=netCCULogbookEntryIdx, rfProbesOstReflWarningLimit=rfProbesOstReflWarningLimit, rackEntry=rackEntry, ostBLogbookType=ostBLogbookType, outputstageBLogbookClear=outputstageBLogbookClear, groupEvents=groupEvents, rfProbeThresholdWarningLimit=rfProbeThresholdWarningLimit, rsXx8000DVBSingleTxLPNoNetCCU=rsXx8000DVBSingleTxLPNoNetCCU, excPrecNonlinAutomaticADE=excPrecNonlinAutomaticADE, outputstageAutomaticChanged=outputstageAutomaticChanged, rfProbeConfigurationNominalValue=rfProbeConfigurationNominalValue, excInputBandwidth=excInputBandwidth, rfProbeMeasuredValue=rfProbeMeasuredValue)
