#
# PySNMP MIB module RAPID-CLIENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/nortel/RAPID-CLIENT-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 13:06:29 2024
# On host fv-az1108-994 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint")
rapidstream, = mibBuilder.importSymbols("RAPID-MIB", "rapidstream")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, iso, MibIdentifier, Gauge32, Integer32, NotificationType, enterprises, ObjectIdentity, Unsigned32, TimeTicks, Bits, IpAddress, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "iso", "MibIdentifier", "Gauge32", "Integer32", "NotificationType", "enterprises", "ObjectIdentity", "Unsigned32", "TimeTicks", "Bits", "IpAddress", "Counter64")
TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "DateAndTime")
rsInfoModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 4355, 6))
rsInfoModule.setRevisions(('2001-04-20 12:00', '2002-11-01 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsInfoModule.setRevisionsDescriptions(('Initial revision.', 'Changed CONTACT-INFO.',))
if mibBuilder.loadTexts: rsInfoModule.setLastUpdated('0103061200Z')
if mibBuilder.loadTexts: rsInfoModule.setOrganization('WatchGuard Technologies, Inc.')
if mibBuilder.loadTexts: rsInfoModule.setContactInfo('   Ella Yu\n                      WatchGuard Technologies, Inc.\n                      1841 Zanker Road\n                      San Jose, CA 95112\n                      USA\n\n                      408-519-4888\n                      ella.yu@watchguard.com ')
if mibBuilder.loadTexts: rsInfoModule.setDescription('The MIB module describes client information\n             of RapidStream system.')
rsClientMIB = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 2))
if mibBuilder.loadTexts: rsClientMIB.setStatus('current')
if mibBuilder.loadTexts: rsClientMIB.setDescription('This is the base object identifier for DHCP Server, DHCP Client\n         and PPPoE Client')
rsClientDHCPServer = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1))
if mibBuilder.loadTexts: rsClientDHCPServer.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServer.setDescription('This is the base object identifier for all DHCP server related information.')
rsClientDHCPClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2))
if mibBuilder.loadTexts: rsClientDHCPClient.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClient.setDescription('This is the base object identifier for all DHCP client related information.')
rsClientPPPoEClient = ObjectIdentity((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3))
if mibBuilder.loadTexts: rsClientPPPoEClient.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClient.setDescription('This is the base object identifier for all PPPoE client related information.')
rsClientDHCPServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("relay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerEnable.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerEnable.setDescription('Indicates whether if DHCP Server has been enabled. ')
rsClientDHCPServerStartIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerStartIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerStartIpAddress.setDescription('The starting IP address of the range of IP addresses leased by the DHCP server.')
rsClientDHCPServerEndIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerEndIpAddress.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerEndIpAddress.setDescription('The last IP address of the range of IP addresses leased by the DHCP Server. ')
rsClientDHCPServerLeaseTime = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerLeaseTime.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerLeaseTime.setDescription('The lease time of an address assigned to a DHCP client. ')
rsClientDHCPServerNum = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerNum.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerNum.setDescription('The total number of entries in the rsClientDHCPServerTable. ')
rsClientDHCPServerConnTable = MibTable((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6), )
if mibBuilder.loadTexts: rsClientDHCPServerConnTable.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnTable.setDescription('This is the client lease table of the DHCP Server.')
rsClientDHCPServerRelayServer = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerRelayServer.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerRelayServer.setDescription('The IP address of remote DHCP server to which\n             DHCP requests should be relayed.')
rsClientDHCPServerConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1), ).setIndexNames((0, "RAPID-CLIENT-MIB", "rsClientDHCPServerConnIPAddr"))
if mibBuilder.loadTexts: rsClientDHCPServerConnEntry.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnEntry.setDescription('An entry (conceptual row) containing the leasing\n            information of an assigned address by the DHCP Server.')
rsClientDHCPServerConnClientHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerConnClientHostName.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnClientHostName.setDescription('The hostname of the client.')
rsClientDHCPServerConnIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerConnIPAddr.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnIPAddr.setDescription('The IP address assigned to the client.')
rsClientDHCPServerConnMACAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerConnMACAddr.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnMACAddr.setDescription('The MAC address of the client.')
rsClientDHCPServerConnLeaseTimeStart = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerConnLeaseTimeStart.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnLeaseTimeStart.setDescription('The date and time when the lease starts.')
rsClientDHCPServerConnLeaseTimeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4355, 6, 2, 1, 6, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPServerConnLeaseTimeEnd.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPServerConnLeaseTimeEnd.setDescription('The date and time when the lease ends.')
rsClientDHCPClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPClientEnable.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClientEnable.setDescription('Indicates whether interface 1 (public) is configured to obtain IP address through DHCP.')
rsClientDHCPClientDomainName = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPClientDomainName.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClientDomainName.setDescription('The domain name of the DHCP Client.')
rsClientDHCPClientDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPClientDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClientDefaultGateway.setDescription('The IP address of the default gateway obtained by the DHCP client.')
rsClientDHCPClientDNSOne = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPClientDNSOne.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClientDNSOne.setDescription('The IP address of the primary DNS server obtained by the DHCP client.')
rsClientDHCPClientDNSTwo = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 2, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientDHCPClientDNSTwo.setStatus('current')
if mibBuilder.loadTexts: rsClientDHCPClientDNSTwo.setDescription('The IP address of the secondary DNS server obtained by the DHCP client.')
rsClientPPPoEClientEnable = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientEnable.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientEnable.setDescription('Indicates whether the interface 1 (public) is configured to use PPPoE.')
rsClientPPPoEClientADSLStatus = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disconnect", 0), ("initialize", 1), ("establish", 2), ("authenticate", 3), ("network", 4), ("running", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientADSLStatus.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientADSLStatus.setDescription('The current ADSL status of the PPPoE Client. ')
rsClientPPPoEClientLocalIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientLocalIPAddr.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientLocalIPAddr.setDescription('The IP address obtained by the PPPoE Client.')
rsClientPPPoEClientRemoteIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientRemoteIPAddr.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientRemoteIPAddr.setDescription('The IP Address of the PPP server this PPPoE client connects to.')
rsClientPPPoEClientNetMask = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientNetMask.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientNetMask.setDescription('The subnet mask of the PPPoE client.')
rsClientPPPoEClientDNSOne = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientDNSOne.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientDNSOne.setDescription('The IP address of the primary DNS server obtained.')
rsClientPPPoEClientDNSTwo = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientDNSTwo.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientDNSTwo.setDescription('The IP address of the secondary DNS server obtained.')
rsClientPPPoEADSLPeerMACAddr = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEADSLPeerMACAddr.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEADSLPeerMACAddr.setDescription('The MAC Address of the PPP server this client connects to.')
rsClientPPPoEClientConnTime = MibScalar((1, 3, 6, 1, 4, 1, 4355, 6, 2, 3, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rsClientPPPoEClientConnTime.setStatus('current')
if mibBuilder.loadTexts: rsClientPPPoEClientConnTime.setDescription('The connection time of the PPPoE connection.')
mibBuilder.exportSymbols("RAPID-CLIENT-MIB", rsInfoModule=rsInfoModule, rsClientDHCPServerEndIpAddress=rsClientDHCPServerEndIpAddress, rsClientDHCPServer=rsClientDHCPServer, rsClientPPPoEClient=rsClientPPPoEClient, rsClientDHCPServerEnable=rsClientDHCPServerEnable, rsClientPPPoEClientLocalIPAddr=rsClientPPPoEClientLocalIPAddr, rsClientDHCPServerConnTable=rsClientDHCPServerConnTable, rsClientDHCPServerRelayServer=rsClientDHCPServerRelayServer, rsClientDHCPServerLeaseTime=rsClientDHCPServerLeaseTime, rsClientDHCPClientDefaultGateway=rsClientDHCPClientDefaultGateway, rsClientDHCPClientDNSOne=rsClientDHCPClientDNSOne, rsClientPPPoEClientDNSOne=rsClientPPPoEClientDNSOne, rsClientMIB=rsClientMIB, rsClientDHCPServerConnEntry=rsClientDHCPServerConnEntry, rsClientPPPoEClientConnTime=rsClientPPPoEClientConnTime, rsClientDHCPClientDomainName=rsClientDHCPClientDomainName, rsClientPPPoEClientEnable=rsClientPPPoEClientEnable, rsClientDHCPServerConnLeaseTimeEnd=rsClientDHCPServerConnLeaseTimeEnd, rsClientDHCPServerStartIpAddress=rsClientDHCPServerStartIpAddress, rsClientDHCPServerNum=rsClientDHCPServerNum, rsClientPPPoEADSLPeerMACAddr=rsClientPPPoEADSLPeerMACAddr, rsClientDHCPClientDNSTwo=rsClientDHCPClientDNSTwo, rsClientDHCPServerConnClientHostName=rsClientDHCPServerConnClientHostName, rsClientPPPoEClientADSLStatus=rsClientPPPoEClientADSLStatus, rsClientDHCPServerConnLeaseTimeStart=rsClientDHCPServerConnLeaseTimeStart, rsClientDHCPClientEnable=rsClientDHCPClientEnable, rsClientDHCPClient=rsClientDHCPClient, rsClientPPPoEClientNetMask=rsClientPPPoEClientNetMask, rsClientPPPoEClientDNSTwo=rsClientPPPoEClientDNSTwo, PYSNMP_MODULE_ID=rsInfoModule, rsClientDHCPServerConnMACAddr=rsClientDHCPServerConnMACAddr, rsClientPPPoEClientRemoteIPAddr=rsClientPPPoEClientRemoteIPAddr, rsClientDHCPServerConnIPAddr=rsClientDHCPServerConnIPAddr)
