#
# PySNMP MIB module ORION-BASE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/delta/ORION-BASE-MIB
# Produced by pysmi-1.1.12 at Thu May 30 02:14:45 2024
# On host fv-az775-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
orion, modules = mibBuilder.importSymbols("GLOBAL-REG", "orion", "modules")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Counter64, ModuleIdentity, Counter32, enterprises, Bits, TimeTicks, Integer32, iso, IpAddress, Unsigned32, MibIdentifier, NotificationType, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Counter64", "ModuleIdentity", "Counter32", "enterprises", "Bits", "TimeTicks", "Integer32", "iso", "IpAddress", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
orionBaseMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 20246, 2, 1, 1, 2))
orionBaseMibModule.setRevisions(('2012-04-27 12:00', '2012-01-26 14:15', '2011-06-20 07:34', '2011-02-10 09:01', '2010-06-16 10:27', '2010-02-24 10:46', '2009-09-04 09:52', '2008-02-21 14:39', '2008-01-18 08:35', '2006-07-27 10:26', '2006-03-02 08:55', '2006-02-23 09:32', '2005-06-03 11:07',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: orionBaseMibModule.setRevisionsDescriptions(('Rev V5.0 - ORION V5.10\n                - Add Multi-Stage temperature compensation\n                - Add dcBoD and dcEnableUsTempComp', 'Rev V2.1 - ORION V5.0\n                - changed product name from PSC3 to Orion', 'Rev V2.0 - PSC 3 V3.20\n                - hour meter functionality added', 'Rev V1.9 - PSC 3 V3.10\n                - dcPowerSystem can be negativ now\n                - added limits for DefaultLog and EventProcessing table\n                - added dcResendActiveAlarmTraps in deschMiscGroup', 'Rev V1.8 - PSC 3 V2.70\n                - new rectifier types added\n                - resend active alarm traps feature added\n                - measurement table added\n                - battery test result enum extended', 'Rev V1.7 - PSC 3 V2.60\n                - Critical alarm trap added\n                - Float Charge, Battery Test, Equalize, Boost Charge,\n                  ,System Voltage Supervision and Event Control Charge \n                  parameter added\n                - Rectifier Group table added\n                - Rectifier power limitation and efficiency cycling\n                  parameter added\n                - LVD table added\n                - Default Log event configuration table added\n                - Event Processing event configuration table added\n                - Loss of Backup time parameter added', 'Rev V1.6 - PSC 3 V2.50\n                - Generic Alarm table added\n                - Trap Destination table added', 'Rev V1.5 - PSC  V2.20\n                - support of write access\n                - added battery parameters', 'Rev V1.4 - PSC 3 V2.10\n                - added event controlled charge state', 'Rev V1.3 - PSC 3 V1.70\n                - corrected Oid comment for dcStartTemp, dcStopTemp \n          and dcTotalBatteryCapacity', 'Rev V1.2\n                - added various parameters.\n                - added additional TRAP parameter.', 'Rev V1.1 - PSC 3 V1.60\n                - extended dcChargeState with new sepCharge state.', 'Rev V1.0 - PSC 3 V1.5 and older\n                - added dcCurrentLimit parameter.\n                - renamed module.\n                - increased dcSoftwareVersion string size.\n                - added recharge state to dcChargeState parameter.\n                - added max. number of entries in comment for event history.',))
if mibBuilder.loadTexts: orionBaseMibModule.setLastUpdated('200802211439Z')
if mibBuilder.loadTexts: orionBaseMibModule.setOrganization('Delta Energy Systems (Switzerland) AG')
if mibBuilder.loadTexts: orionBaseMibModule.setContactInfo('postal: Delta Energy Systems (Switzerland) AG\n                         Freiburgstrasse 251,\n                         CH-3018 Bern-Buempliz\n                 web:    www.deltapowersolutions.com\n                 email:  patrick.camina@delta-es.com')
if mibBuilder.loadTexts: orionBaseMibModule.setDescription('MIB for managing a DC power system with PSC 3.')
orionBaseMib = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1))
controllerConfs = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1))
controllerGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1))
controllerCompl = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 2))
controllerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2))
dcSystemInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1))
dcSystemAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2))
dcSystemMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3))
dcRectifier = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4))
dcRectifierFunctions = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6))
dcEfficiencyCycling = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1))
dcPowerLimitation = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2))
dcBattery = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5))
dcFloatCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 1))
dcBatteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2))
dcBatteryTestParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1))
dcBatteryTestResults = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2))
dcBatteryParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3))
dcLossOfBackupTime = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3))
dcEqualize = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4))
dcEqualizeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4))
dcBoostCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5))
dcBoostChargeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4))
dcSystemVoltageSupervision = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6))
dcEvtCtrlCharge = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7))
dcEvtCtrlChargeParameter = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3))
dcTempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8))
dcTempSupervision = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9))
dcInputOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6))
dcMisc = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7))
dcConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8))
dcMeasurement = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9))
dcMeterPanel = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10))
controllerEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3))
controllerEventObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1))
controllerEventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0))
dcSiteName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSiteName.setStatus('current')
if mibBuilder.loadTexts: dcSiteName.setDescription('An administratively-assigned site name for this\n                DC-power system.')
dcSystemName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSystemName.setStatus('current')
if mibBuilder.loadTexts: dcSystemName.setDescription('An administratively-assigned system name for this\n                DC-power system.')
dcSystemDateTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSystemDateTime.setStatus('current')
if mibBuilder.loadTexts: dcSystemDateTime.setDescription("ISO 8601 representation of controllers local date/time. \n                The value is in the format YYYY-MM-DDThh:mm:ss. \n                An example of a valid string is: '2004-10-04T13:45:00'.")
dcSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(10, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: dcSoftwareVersion.setDescription('The controllers software version e.g V2.50Build1.')
dcNumberUrgentAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberUrgentAlarms.setStatus('current')
if mibBuilder.loadTexts: dcNumberUrgentAlarms.setDescription('Number of currently active urgent alarm sources. A zero \n                value indicates that urgent alarm is not active.')
dcNumberNonUrgentAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberNonUrgentAlarms.setStatus('current')
if mibBuilder.loadTexts: dcNumberNonUrgentAlarms.setDescription('Number of currently active non urgent alarm sources. A zero \n                value indicates that non urgent alarm is not active.')
dcMainsFailureAlarm = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMainsFailureAlarm.setStatus('current')
if mibBuilder.loadTexts: dcMainsFailureAlarm.setDescription('Mains failure alarm.')
dcUrgentAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcUrgentAlarmIdentifier.setDescription('Current unique urgent alarm event identifier. A zero value \n                indicates that urgent alarm is not active.')
dcUrgentAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmValue.setStatus('current')
if mibBuilder.loadTexts: dcUrgentAlarmValue.setDescription('Current urgent alarm event status that corresponds to the \n                urgent alarm identifier. If the urgent alarm identifier is zero \n                then the alarm value is false.')
dcNonUrgentAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcNonUrgentAlarmIdentifier.setDescription('Current unique non urgent alarm event identifier. A zero value \n                indicates that non urgent alarm is not active.')
dcNonUrgentAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmValue.setStatus('current')
if mibBuilder.loadTexts: dcNonUrgentAlarmValue.setDescription('Current non urgent alarm event status that corresponds to non urgent \n                alarm identifier. If the non urgent alarm identifier is zero then \n                the alarm value is false.')
dcUrgentAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcUrgentAlarmName.setStatus('current')
if mibBuilder.loadTexts: dcUrgentAlarmName.setDescription('Current alarm name for urgent alarm that corresponds to urgent \n                alarm identifier.')
dcNonUrgentAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNonUrgentAlarmName.setStatus('current')
if mibBuilder.loadTexts: dcNonUrgentAlarmName.setDescription('Current alarm name for active non urgent alarm that corresponds \n                to non urgent alarm identifier.')
dcNumberCriticalAlarms = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberCriticalAlarms.setStatus('current')
if mibBuilder.loadTexts: dcNumberCriticalAlarms.setDescription('Number of currently active critical alarm sources. A zero \n                value indicates that critical alarm is not active.')
dcCriticalAlarmIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcCriticalAlarmIdentifier.setDescription('Current unique critical alarm event identifier. A zero value \n                indicates that critical alarm is not active.')
dcCriticalAlarmValue = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmValue.setStatus('current')
if mibBuilder.loadTexts: dcCriticalAlarmValue.setDescription('Current critical alarm event status that corresponds to the \n                critical alarm identifier. If the critical alarm identifier is zero \n                then the alarm value is false.')
dcCriticalAlarmName = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCriticalAlarmName.setStatus('current')
if mibBuilder.loadTexts: dcCriticalAlarmName.setDescription('Current alarm name for active critical alarm that corresponds \n        to critical alarm identifier.')
dcSystemVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 1), Integer32()).setUnits('10 mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemVoltage.setStatus('current')
if mibBuilder.loadTexts: dcSystemVoltage.setDescription('The measured system voltage. The max. value 2147483647 \n                is used to indicate an invalid value.')
dcLoadCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 2), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLoadCurrent.setStatus('current')
if mibBuilder.loadTexts: dcLoadCurrent.setDescription('The measured load current. The max. value 2147483647 \n                is used to indicate an invalid value.')
dcBatteryCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 3), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryCurrent.setStatus('current')
if mibBuilder.loadTexts: dcBatteryCurrent.setDescription('The measured battery current. The max. value 2147483647 \n                is used to indicate an invalid value.')
dcBatteryTemperature = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 4), Integer32()).setUnits('0.1 C').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTemperature.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTemperature.setDescription('The measured battery temperature. The max. value 2147483647 \n                is used to indicate an invalid value.')
dcChargeState = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("float", 1), ("discharge", 2), ("equalize", 3), ("boost", 4), ("battTest", 5), ("recharge", 6), ("sepCharge", 7), ("evCtrlCharge", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcChargeState.setStatus('current')
if mibBuilder.loadTexts: dcChargeState.setDescription('Battery charge state.')
dcCurrentLimit = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: dcCurrentLimit.setDescription('Battery current limit.')
dcRectifierCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 7), Integer32()).setUnits('100 mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierCurrent.setStatus('current')
if mibBuilder.loadTexts: dcRectifierCurrent.setDescription('Total current of all working rectifier modules.\n                The maximum value 2147483647 is used to indicate\n                an invalid value.')
dcSystemPower = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 3, 8), Integer32()).setUnits('1 W').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcSystemPower.setStatus('current')
if mibBuilder.loadTexts: dcSystemPower.setDescription('Calculated system power. The maximum value \n                2147483647 is used to indicate an invalid value.')
dcNumberRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiers.setStatus('current')
if mibBuilder.loadTexts: dcNumberRectifiers.setDescription('The configured number of rectifiers plugged into\n                the system. The maximum number of rectifiersi is 128.')
dcNumberRectifiersFailure = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiersFailure.setStatus('current')
if mibBuilder.loadTexts: dcNumberRectifiersFailure.setDescription('Number of rectifiers that are not properly working.')
dcNumberRectifiersOkay = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcNumberRectifiersOkay.setStatus('current')
if mibBuilder.loadTexts: dcNumberRectifiersOkay.setDescription('Number of rectifiers that are properly working.')
dcEfficiencyCyclingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEfficiencyCyclingEnabled.setStatus('current')
if mibBuilder.loadTexts: dcEfficiencyCyclingEnabled.setDescription('Enable/disable efficiency cycling.')
dcLimitSwitchingTimes = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLimitSwitchingTimes.setStatus('current')
if mibBuilder.loadTexts: dcLimitSwitchingTimes.setDescription('Enable/disable limit switching times.')
dcForceSwitchingOncePerMonth = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcForceSwitchingOncePerMonth.setStatus('current')
if mibBuilder.loadTexts: dcForceSwitchingOncePerMonth.setDescription('Enable/disable force switching once per month.')
dcMaximumLoadStep = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 4), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMaximumLoadStep.setStatus('current')
if mibBuilder.loadTexts: dcMaximumLoadStep.setDescription('Maximum load setup.')
dcMinimumLoadStep = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 1, 5), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMinimumLoadStep.setStatus('current')
if mibBuilder.loadTexts: dcMinimumLoadStep.setDescription('Minimum load setup.')
dcUsys20 = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 1, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsys20.setStatus('current')
if mibBuilder.loadTexts: dcUsys20.setDescription('Voltage to regulate to at 20C. If temperature compensation \n                is used, this voltage will vary.')
dcBatteryTestUsupport = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestUsupport.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestUsupport.setDescription('Support charge voltage for the battery.')
dcBatteryTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 2), Gauge32()).setUnits('minute').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestDuration.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestDuration.setDescription('Battery test duration.')
dcBatteryTestInterval = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 3), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestInterval.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestInterval.setDescription('Minimal time between programmed battery tests as start \n                condition.')
dcBatteryTestDischargeCurrent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 4), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestDischargeCurrent.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestDischargeCurrent.setDescription('Battery discharge current. The maximum value 2147483647 \n                is used to indicate an invalid value.')
dcBatteryTestMinDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 5), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestMinDuration.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestMinDuration.setDescription('Minimum battery test duration during which time a battery test \n                is not stopped in case of a voltage below the support voltage or \n                a current difference higher than the specified value defined in \n                Idiff measurement is detected.')
dcBatteryTestVoltageWithinUfloat = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloat.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloat.setDescription('Battery voltage must be within Ufloat +/- set voltage for a \n                given time (see also dcBatteryTestVoltageWithinUfloatPeriod)\n                in order to start a battery test.')
dcBatteryTestVoltageWithinUfloatPeriod = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 7), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloatPeriod.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestVoltageWithinUfloatPeriod.setDescription('For details see dcBatteryTestVoltageWithinUfloat parameter.')
dcBatteryTestTempFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 8), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestTempFrom.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestTempFrom.setDescription('Battery temperature must be within temperature range given by\n                dcBatteryTestTempFrom and dcBatteryTestTempTo, so that a battery\n                test can be started.')
dcBatteryTestTempTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 9), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestTempTo.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestTempTo.setDescription('For details see dcBatteryTestTempFrom parameter.')
dcBatteryTestIntervalEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestIntervalEnabled.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestIntervalEnabled.setDescription('Enable/disable interval. For more details see dcBatteryTestInterval.')
dcBatteryTestStartTimeFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestStartTimeFrom.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestStartTimeFrom.setDescription("Defines start time window for battery test. The possible time window \n                is defined as the range between dcBatteryTestStartTimeFrom and \n                dcBatteryTestStartTimeTo. The value is in the format 'hh:mm:ss'.")
dcBatteryTestStartTimeTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestStartTimeTo.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestStartTimeTo.setDescription('For details see dcBatteryTestStartTimeFrom.')
dcBatteryTestDateTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestDateTime.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestDateTime.setDescription('ISO 8601 representation of the last performed battery test. \n                The value is in the format YYYY-MM-DDThh:mm:ss. This parameter \n                is valid only if there is a test result available.')
dcBatteryTestResult = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 1), ("failed", 2), ("aborted", 3), ("loadFailure", 4), ("okay", 5), ("abortedManual", 6), ("abortedEvCtrlCharge", 7), ("abortedInhibitEv", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestResult.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestResult.setDescription('Result of last performed battery test.')
dcBatteryTestEndVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 2, 3), Integer32()).setUnits('10 mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestEndVoltage.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestEndVoltage.setDescription('System voltage at the end of the last performed battery test. \n                The maximum value 2147483647 is used to indicate an invalid \n                value.')
dcBatteryTestControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestControl.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestControl.setDescription('Start/stop of battery test. This special charge mode is used \n                to check the capacity of a battery. Please note that a battery \n                test can be started even if the battery is not fully charged. \n                In this case the test result is ambiguous and the set failure \n                event will become active.')
dcBatteryTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("constantCurrent", 4), ("timeBased", 5), ("energyBased", 6), ("recovery", 7), ("realLoad", 8), ("stop", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryTestStatus.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestStatus.setDescription('Status of battery test.')
dcBatteryTestFailureEvent = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("reset", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestFailureEvent.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestFailureEvent.setDescription('Reset battery test failure event.')
dcBatteryTestType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5))).clone(namedValues=NamedValues(("none", 1), ("constantCurrent", 2), ("realLoad", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryTestType.setStatus('current')
if mibBuilder.loadTexts: dcBatteryTestType.setDescription('Battery test type used.')
dcTotalBatteryCapacity = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 1), Gauge32()).setUnits('100 mAh').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcTotalBatteryCapacity.setStatus('current')
if mibBuilder.loadTexts: dcTotalBatteryCapacity.setDescription('Total battery capacity for all available batteries.')
dcLossOfBackupTimeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLossOfBackupTimeEnabled.setStatus('current')
if mibBuilder.loadTexts: dcLossOfBackupTimeEnabled.setDescription('Enable/disable loss of backup time functionality.')
dcLossOfBackupTimeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("ok", 2), ("occured", 3), ("fail", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLossOfBackupTimeStatus.setStatus('current')
if mibBuilder.loadTexts: dcLossOfBackupTimeStatus.setDescription('Status of loss of backup time functionality.')
dcExpectedBackupTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 3, 3), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcExpectedBackupTime.setStatus('current')
if mibBuilder.loadTexts: dcExpectedBackupTime.setDescription('Expected backup time value. Based on the given value for \n                the parameter expected backup time, the corresponding \n                maximum discharge current is calculated.')
dcEqualizeControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeControl.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeControl.setDescription('Start/stop of battery equalize which is a special charge \n                mode that applies a higher voltage to the batteries than \n                the float charge. This ensures that the cells are all \n                equally charged.')
dcEqualizeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("preparing", 4), ("cooking", 5), ("recovering", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEqualizeStatus.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeStatus.setDescription('Current status of battery equalize.')
dcEqualizeEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeEnabled.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeEnabled.setDescription('Enable/disable equalize.')
dcEqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeVoltage.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeVoltage.setDescription('Voltage used for equalize.')
dcEqualizeDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 2), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeDuration.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeDuration.setDescription('Duration of equalize.')
dcEqualizeUseBattRoomFanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeUseBattRoomFanEnabled.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeUseBattRoomFanEnabled.setDescription('Enable/disable battery room fan during equalize.')
dcEqualizeLeadTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 4), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeLeadTime.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeLeadTime.setDescription('Lead time for equalize.')
dcEqualizeTimeLag = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 5), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeTimeLag.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeTimeLag.setDescription('Time lag for equalize.')
dcEqualizeInterval = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 6), Gauge32()).setUnits('days').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeInterval.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeInterval.setDescription('Interval for equalize as start condition.')
dcEqualizeStartTimeIntervalFrom = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalFrom.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalFrom.setDescription("Defines start time window for equqlize. The possible time window \n                is defined as the range between dcEqualizeStartTimeIntervalFrom and \n                dcEqualizeStartTimeIntervalTo. The value is in the format 'hh:mm:ss'.")
dcEqualizeStartTimeIntervalTo = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalTo.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeStartTimeIntervalTo.setDescription('For detail see dcEqualizeStartTimeIntervalFrom.')
dcEqualizeInhibitAfterBoost = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 4, 4, 9), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEqualizeInhibitAfterBoost.setStatus('current')
if mibBuilder.loadTexts: dcEqualizeInhibitAfterBoost.setDescription('Inhibit after boost as start condition.')
dcBoostChargeControl = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("stop", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeControl.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeControl.setDescription('Start/stop of boost charge which is a special charge mode \n                that applies a higher voltage to the batteries than the float \n                charge. This mode is started after a discharge phase to \n                recharge the batteries faster.')
dcBoostChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inactive", 1), ("starting", 2), ("stopping", 3), ("cooking", 4), ("recovering", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBoostChargeStatus.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeStatus.setDescription('Current status of boost charge.')
dcBoostChargeType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("currentBased", 2), ("timeBased", 3), ("energyBased", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeType.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeType.setDescription('Boost charge type.')
dcBoostChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeVoltage.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeVoltage.setDescription('Voltage used for boost charge.')
dcBoostChargeMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 2), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeMaxDuration.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeMaxDuration.setDescription('Defines the maximum allowed time for boost charge to \n                prevent that the battery is charged forever.')
dcBoostChargeUseBattRoomFanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeUseBattRoomFanEnabled.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeUseBattRoomFanEnabled.setDescription('Enable/disable battery room fan during boost charge.')
dcBoostChargeTimeLag = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 4), Gauge32()).setUnits('minutes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeTimeLag.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeTimeLag.setDescription('Time lag used for boost charge.')
dcBoostChargeIstart = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 5), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeIstart.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeIstart.setDescription('For current based boost charge, the parameters Istart \n                and Istop are the battery current values at which boost charge \n                starts or stops.')
dcBoostChargeIstop = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 6), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeIstop.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeIstop.setDescription('For details see dcBoostChargeIstart.')
dcBoostChargeInhibitTime = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 5, 4, 7), Gauge32()).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoostChargeInhibitTime.setStatus('current')
if mibBuilder.loadTexts: dcBoostChargeInhibitTime.setDescription('A start condition for all types of boost charge. It defines \n                the time from last boost charge stop to the next acceptable boost \n                charge start.')
dcUaMax = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUaMax.setStatus('current')
if mibBuilder.loadTexts: dcUaMax.setDescription("If the system voltage is outside the range specified by the values \n                UaMin (lower alarm voltage)/UaMax (upper alarm voltage), the \n                system event 'S Ua low'/'S Ua high' is activated. The values for the \n                parameters UaMin and UaMax are not temperature compensated.")
dcUaMin = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 2), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUaMin.setStatus('current')
if mibBuilder.loadTexts: dcUaMin.setDescription('For details see dcUaMax.')
dcUsMax = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 3), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsMax.setStatus('current')
if mibBuilder.loadTexts: dcUsMax.setDescription("If the voltage is outside the range defined by the parameters UsMin (lower \n                safety voltage)/UsMax (upper safety voltage), the system event \n                'S Us low'/'S Us high' is activated. If temperature compensation is enabled,\n                the levels for Us min and / Us max are automatically temperature compensated \n                to correspond to the required system voltage. The parameters are defined \n                at 20C.")
dcUsMin = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 4), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcUsMin.setStatus('current')
if mibBuilder.loadTexts: dcUsMin.setDescription('For details see dcUsMax.')
dcBoD = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 5), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBoD.setStatus('current')
if mibBuilder.loadTexts: dcBoD.setDescription('Voltage threshold for Battery on Discharge alarm.')
dcHysteresis = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHysteresis.setStatus('current')
if mibBuilder.loadTexts: dcHysteresis.setDescription('Hysteresis used for Ua and Us.')
dcSuppressUaLowEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSuppressUaLowEnabled.setStatus('current')
if mibBuilder.loadTexts: dcSuppressUaLowEnabled.setDescription('Suppress Ua Low alarm during mains failure.')
dcSuppressUsLowEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSuppressUsLowEnabled.setStatus('current')
if mibBuilder.loadTexts: dcSuppressUsLowEnabled.setDescription('Suppress Us Low alarm during mains failure.')
dcEnableUsTempComp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEnableUsTempComp.setStatus('current')
if mibBuilder.loadTexts: dcEnableUsTempComp.setDescription('Checkbox to enable the automatic temperature compensation for the Us thresholds (Us min, Us max).')
dcEvtCtrlChargeStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inactive", 1), ("voltageControlled", 2), ("noBatteryCharge", 3), ("currentLimitation", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEvtCtrlChargeStatus.setStatus('current')
if mibBuilder.loadTexts: dcEvtCtrlChargeStatus.setDescription('Event control charge status.')
dcEvtCtrlChargeType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("voltageControlled", 2), ("noBatteryCharge", 3), ("currentLimitation", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeType.setStatus('current')
if mibBuilder.loadTexts: dcEvtCtrlChargeType.setDescription('Selected event control charge type.')
dcEvtCtrlChargeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 1), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeVoltage.setStatus('current')
if mibBuilder.loadTexts: dcEvtCtrlChargeVoltage.setDescription('Voltage used for event control charge.')
dcEvtCtrlChargeTempCompEnabled = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeTempCompEnabled.setStatus('current')
if mibBuilder.loadTexts: dcEvtCtrlChargeTempCompEnabled.setDescription('Enable/disable temperature compensation during event \n                control charge.')
dcEvtCtrlChargeMaxIBatt = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 7, 3, 3), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEvtCtrlChargeMaxIBatt.setStatus('current')
if mibBuilder.loadTexts: dcEvtCtrlChargeMaxIBatt.setDescription('Max. IBatt used for event control charge.')
dcTempCompType = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("no", 1), ("linear", 2), ("multi-stage", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTempCompType.setStatus('current')
if mibBuilder.loadTexts: dcTempCompType.setDescription('Enable/disable battery temperature compensation.')
dcSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 2), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcSlope.setStatus('current')
if mibBuilder.loadTexts: dcSlope.setDescription('Temperature compensation coefficient for system voltage.')
dcStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 3), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcStartTemp.setStatus('current')
if mibBuilder.loadTexts: dcStartTemp.setDescription('Lower limit for the area in which the temperature compensation \n                is active.')
dcStopTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 4), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcStopTemp.setStatus('current')
if mibBuilder.loadTexts: dcStopTemp.setDescription('Upper limit for the area in which the temperature compensation \n                is active.')
dcMaxVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 5), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcMaxVoltage.setStatus('current')
if mibBuilder.loadTexts: dcMaxVoltage.setDescription('Upper limit for the area in which the temperature compensation \n                is not controlling the system voltage.')
dcLowStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 6), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowStopVoltage.setStatus('current')
if mibBuilder.loadTexts: dcLowStopVoltage.setDescription('The temperature compensation will not control the charging voltage above this parameter at low temperatures.')
dcLowStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 7), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowStartTemp.setStatus('current')
if mibBuilder.loadTexts: dcLowStartTemp.setDescription('High temperature limit of the lower range.')
dcLowTempSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 8), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLowTempSlope.setStatus('current')
if mibBuilder.loadTexts: dcLowTempSlope.setDescription('Compensation factor applied inside the low range.')
dcHighStartTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 9), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighStartTemp.setStatus('current')
if mibBuilder.loadTexts: dcHighStartTemp.setDescription('The low temperature limit of the higher range.')
dcHighTempSlope = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 10), Integer32()).setUnits('-1 mV/C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTempSlope.setStatus('current')
if mibBuilder.loadTexts: dcHighTempSlope.setDescription('Compensation factor applied inside the high range.')
dcHighStopVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 11), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighStopVoltage.setStatus('current')
if mibBuilder.loadTexts: dcHighStopVoltage.setDescription('The temperature compensation will not control the charging voltage below this parameter at high temperatures.')
dcRunawayTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 12), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRunawayTemp.setStatus('current')
if mibBuilder.loadTexts: dcRunawayTemp.setDescription('A threshold for detecting thermal runaway of the battery.')
dcRunawayVoltage = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 8, 13), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRunawayVoltage.setStatus('current')
if mibBuilder.loadTexts: dcRunawayVoltage.setDescription('Charging voltage while Runaway Temp has been exceeded.')
dcHighTemp = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9, 1), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTemp.setStatus('current')
if mibBuilder.loadTexts: dcHighTemp.setDescription('Temperature threshold for high battery temperature alarm 10C ... 70C')
dcHighTempHyst = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 9, 2), Integer32()).setUnits('0.1 C').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcHighTempHyst.setStatus('current')
if mibBuilder.loadTexts: dcHighTempHyst.setDescription('Hysteresis for the High Temp 1C ... 70C')
dcFileProcessingStatus = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 1), ("inProgress", 2), ("successful", 3), ("error", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcFileProcessingStatus.setStatus('current')
if mibBuilder.loadTexts: dcFileProcessingStatus.setDescription('File processing status for software and setup up/downloads.')
dcResendActiveAlarmTraps = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("resend", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcResendActiveAlarmTraps.setStatus('current')
if mibBuilder.loadTexts: dcResendActiveAlarmTraps.setDescription('Resend all active Urgent, Non Urgent, and Critical Alarm Traps.')
dcEventProcessingEventSelected = MibScalar((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEventProcessingEventSelected.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventSelected.setDescription('Reference to dcEventProcessingEventIndex in order to select\n                a specific event.')
dcEventHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1), )
if mibBuilder.loadTexts: dcEventHistoryTable.setStatus('current')
if mibBuilder.loadTexts: dcEventHistoryTable.setDescription('Controllers event history table that shows the content of the\n                default log file.')
dcEventHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcEventHistoryIndex"))
if mibBuilder.loadTexts: dcEventHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: dcEventHistoryEntry.setDescription('A particular Event History entry.')
dcEventHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)))
if mibBuilder.loadTexts: dcEventHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: dcEventHistoryIndex.setDescription('Table index.')
dcEventHistoryTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(19, 19)).setFixedLength(19)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventHistoryTimestamp.setStatus('current')
if mibBuilder.loadTexts: dcEventHistoryTimestamp.setDescription('ISO8601 timestamp representation of a particular entry\n                in the form YYYY-MM-DDThh:mm:ss.')
dcEventHistoryMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventHistoryMessage.setStatus('current')
if mibBuilder.loadTexts: dcEventHistoryMessage.setDescription('Event message of a particular entry.')
dcAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2), )
if mibBuilder.loadTexts: dcAlarmTable.setStatus('current')
if mibBuilder.loadTexts: dcAlarmTable.setDescription('Table that shows all currently active alarm sources \n                causing urgent or non-urgent alarm(s).')
dcAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcAlarmIndex"))
if mibBuilder.loadTexts: dcAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: dcAlarmEntry.setDescription('A particular active alarm source entry.')
dcAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: dcAlarmIndex.setDescription('Table index.')
dcAlarmEventCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("urgent", 2), ("nonUrgent", 3), ("critical", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventCategory.setStatus('current')
if mibBuilder.loadTexts: dcAlarmEventCategory.setDescription('Specifies the type of alarm source.')
dcAlarmEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventName.setStatus('current')
if mibBuilder.loadTexts: dcAlarmEventName.setDescription('Name of a particular alarm source entry.')
dcAlarmEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcAlarmEventIdentifier.setDescription('Unique alarm event identifier.')
dcAlarmEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("false", 1), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcAlarmEventValue.setStatus('current')
if mibBuilder.loadTexts: dcAlarmEventValue.setDescription('Event status that corresponds to alarm event identifier.')
dcGenericAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12), )
if mibBuilder.loadTexts: dcGenericAlarmTable.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmTable.setDescription('Table that shows ten alarm event assignments that can be \n                 configured via WEB interface.')
dcGenericAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcGenericAlarmIndex"))
if mibBuilder.loadTexts: dcGenericAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmEntry.setDescription('A particular generic alarm entry.')
dcGenericAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcGenericAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmIndex.setDescription('Table index.')
dcGenericAlarmEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventName.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmEventName.setDescription('Plain text name of the assigned alarm event. Empty if not\n                configured.')
dcGenericAlarmEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmEventIdentifier.setDescription('Unique numeric identifier of the assigned alarm event. Zero\n                if not configured.')
dcGenericAlarmEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 2, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcGenericAlarmEventValue.setStatus('current')
if mibBuilder.loadTexts: dcGenericAlarmEventValue.setDescription('Current value of the assigned alarm event. Value is false if\n                not configured.')
dcRectifierTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4), )
if mibBuilder.loadTexts: dcRectifierTable.setStatus('current')
if mibBuilder.loadTexts: dcRectifierTable.setDescription('Table that shows all currently active rectifier modules.')
dcRectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcRectifierIndex"))
if mibBuilder.loadTexts: dcRectifierEntry.setStatus('current')
if mibBuilder.loadTexts: dcRectifierEntry.setDescription('A particular rectifier entry.')
dcRectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: dcRectifierIndex.setStatus('current')
if mibBuilder.loadTexts: dcRectifierIndex.setDescription('Table index.')
dcRectifierIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcRectifierIdentifier.setDescription('Unique rectifier identifier. If positioning active the \n                position number scheme is used otherwise the rectifier \n                instance is used to identify a rectifier.')
dcRectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("off", 2), ("on", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierStatus.setStatus('current')
if mibBuilder.loadTexts: dcRectifierStatus.setDescription('Specifies status of rectifiers.')
dcRectifierGroupTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5), )
if mibBuilder.loadTexts: dcRectifierGroupTable.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupTable.setDescription('Table that shows all available rectifier groups.')
dcRectifierGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcRectifierGroupIndex"))
if mibBuilder.loadTexts: dcRectifierGroupEntry.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupEntry.setDescription('A particular rectifier group entry.')
dcRectifierGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: dcRectifierGroupIndex.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupIndex.setDescription('Table index.')
dcRectifierGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierGroupName.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupName.setDescription('Rectifier group name to identify an individual device \n                parameter set.')
dcRectifierGroupRectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21))).clone(namedValues=NamedValues(("unknown48V", 1), ("fR48V2000W", 2), ("dPR1200B48", 3), ("dPR1500B48", 4), ("dPR600B48", 5), ("dPR7200B48", 6), ("fR48to60V2000W", 7), ("unknown24V", 8), ("unknown60V", 9), ("dPR600B60", 10), ("dPR3500B48", 11), ("dPR3500B24", 12), ("dPR300B48", 13), ("dPR1600B48", 14), ("dPR2700B48", 15), ("dPR2400B48", 16), ("dPR4000B48", 17), ("dPR2900B48", 18), ("dPR4000B48to60", 19), ("dPR850B48", 20), ("dPR2000B48", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcRectifierGroupRectifierType.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupRectifierType.setDescription('Rectifier type defined for this group.')
dcRectifierGroupDefaultVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 4), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultVoltage.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupDefaultVoltage.setDescription('This default voltage is used by rectifiers when there \n                is no connection to PSC 3.')
dcRectifierGroupDefaultCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 5), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupDefaultCurrentLimit.setDescription('This default current limit is used by rectifiers when there \n                is no connection to PSC 3.')
dcRectifierGroupDefaultPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 6), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupDefaultPowerLimit.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupDefaultPowerLimit.setDescription('This default power limit is used by rectifiers when there \n                is no connection to PSC 3.')
dcRectifierGroupInputLowOff = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 7), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupInputLowOff.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupInputLowOff.setDescription('Threshold for low AC input voltage. It can is used to \n                adjust the behaviour of the power system to the available \n                AC network limitation.')
dcRectifierGroupInputLowOn = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 8), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupInputLowOn.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupInputLowOn.setDescription('For details see dcRectifierGroupInputLowOff.')
dcRectifierGroupStartupVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 9), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupVoltage.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupStartupVoltage.setDescription('Startup parameters are the values that rectifiers use \n                during the start-up phase. These parameters allow starting \n                the system smoothly after a mains failure even on a \n                discharged battery and even without PSC 3.')
dcRectifierGroupStartupCurrentLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 10), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupStartupCurrentLimit.setDescription('For details see dcRectifierGroupStartupVoltage.')
dcRectifierGroupStartupPowerLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 11), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupPowerLimit.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupStartupPowerLimit.setDescription('For details see dcRectifierGroupStartupVoltage.')
dcRectifierGroupStartupTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 12), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupStartupTimeLimit.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupStartupTimeLimit.setDescription('For details see dcRectifierGroupStartupVoltage.')
dcRectifierGroupPowerupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 13), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupPowerupDelay.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupPowerupDelay.setDescription('This parameter is used after a mains failure to \n                delay the start-up of all rectifiers.')
dcRectifierGroupPowerupTime = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 14), Gauge32()).setUnits('10 ms').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupPowerupTime.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupPowerupTime.setDescription('This parameter used after a mains failure and allows \n                defining a time within all rectifiers needs to start-up \n                one after another.')
dcRectifierGroupUmaxOff = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 5, 1, 15), Integer32()).setUnits('10 mV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcRectifierGroupUmaxOff.setStatus('current')
if mibBuilder.loadTexts: dcRectifierGroupUmaxOff.setDescription('Overvoltage protection value.')
dcPowerLimitationTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1), )
if mibBuilder.loadTexts: dcPowerLimitationTable.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationTable.setDescription('Table that shows parameters of the available power limitation\n                 functions.')
dcPowerLimitationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcPowerLimitationIndex"))
if mibBuilder.loadTexts: dcPowerLimitationEntry.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationEntry.setDescription('A particular power limitation entry.')
dcPowerLimitationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcPowerLimitationIndex.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationIndex.setDescription('Table index.')
dcPowerLimitationEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationEventName.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationEventName.setDescription('Name of the power limitation event.')
dcPowerLimitationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("inactive", 2), ("powerLimit", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationStatus.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationStatus.setDescription('Status of power limitation.')
dcPowerLimitationType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("fixedLimit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcPowerLimitationType.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationType.setDescription('Power limitation type.')
dcPowerLimitationLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 5), Integer32()).setUnits('1 W').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcPowerLimitationLimit.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationLimit.setDescription('Limit used for power limitation.')
dcPowerLimitationNoBatteryDischarge = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 4, 6, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcPowerLimitationNoBatteryDischarge.setStatus('current')
if mibBuilder.loadTexts: dcPowerLimitationNoBatteryDischarge.setDescription('Enable/disable no battery discharge during power limitation.')
dcBatteryStringTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2), )
if mibBuilder.loadTexts: dcBatteryStringTable.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringTable.setDescription('Table that shows parameters of the available battery strings.')
dcBatteryStringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcBatteryStringIndex"))
if mibBuilder.loadTexts: dcBatteryStringEntry.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringEntry.setDescription('A particular battery string entry.')
dcBatteryStringIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcBatteryStringIndex.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringIndex.setDescription('Table index.')
dcBatteryStringName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcBatteryStringName.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringName.setDescription('Name of the battery string.')
dcBatteryStringMaxIBatt = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 3), Integer32()).setUnits('100 mA').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryStringMaxIBatt.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringMaxIBatt.setDescription('Maximum battery charging current for this string. This \n                parameter can be set individually for each battery. \n                PSC 3 then regulates the system voltage such that the maximum \n                battery charging current of each battery is respected.')
dcBatteryStringCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 5, 3, 2, 1, 4), Gauge32()).setUnits('100 mAh').setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcBatteryStringCapacity.setStatus('current')
if mibBuilder.loadTexts: dcBatteryStringCapacity.setDescription('Capacity of battery can be defined individually. It is used \n                to calculate the expected backup time of the system.')
dcControlEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1), )
if mibBuilder.loadTexts: dcControlEventTable.setStatus('current')
if mibBuilder.loadTexts: dcControlEventTable.setDescription('Table that shows ten output event assignments that can be \n                 configured via WEB interface.')
dcControlEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcControlEventIndex"))
if mibBuilder.loadTexts: dcControlEventEntry.setStatus('current')
if mibBuilder.loadTexts: dcControlEventEntry.setDescription('A particular generic output entry.')
dcControlEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: dcControlEventIndex.setStatus('current')
if mibBuilder.loadTexts: dcControlEventIndex.setDescription('Table index.')
dcControlEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcControlEventName.setStatus('current')
if mibBuilder.loadTexts: dcControlEventName.setDescription('Plain text name of the assigned control event. Empty if not \n                configure.')
dcControlEventIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcControlEventIdentifier.setStatus('current')
if mibBuilder.loadTexts: dcControlEventIdentifier.setDescription('Unique numeric identifier of the assigned control event. Zero\n                if not configured.')
dcControlEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("false", 1), ("true", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcControlEventValue.setStatus('current')
if mibBuilder.loadTexts: dcControlEventValue.setDescription('Current value of the assigned control event. Value is false if\n                not configured.')
dcTrapDestinationTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1), )
if mibBuilder.loadTexts: dcTrapDestinationTable.setStatus('current')
if mibBuilder.loadTexts: dcTrapDestinationTable.setDescription('Trap table that shows all configured trap destinations.')
dcTrapDestinationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcTrapDestinationIndex"))
if mibBuilder.loadTexts: dcTrapDestinationEntry.setStatus('current')
if mibBuilder.loadTexts: dcTrapDestinationEntry.setDescription('A particular trap destination entry.')
dcTrapDestinationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: dcTrapDestinationIndex.setStatus('current')
if mibBuilder.loadTexts: dcTrapDestinationIndex.setDescription('Table index.')
dcTrapDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTrapDestinationIp.setStatus('current')
if mibBuilder.loadTexts: dcTrapDestinationIp.setDescription('IP address of the trap destination. Value is 0.0.0.0 if IP\n                address is not configured.')
dcTrapDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 7, 1, 1, 3), Gauge32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcTrapDestinationPort.setStatus('current')
if mibBuilder.loadTexts: dcTrapDestinationPort.setDescription('Port number of the trap destination. By default port 162\n                is used.')
dcDefaultLogEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1), )
if mibBuilder.loadTexts: dcDefaultLogEventTable.setStatus('current')
if mibBuilder.loadTexts: dcDefaultLogEventTable.setDescription('Event config table for default log.')
dcDefaultLogEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcDefaultLogEventIndex"))
if mibBuilder.loadTexts: dcDefaultLogEventEntry.setStatus('current')
if mibBuilder.loadTexts: dcDefaultLogEventEntry.setDescription('A particular event entry.')
dcDefaultLogEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: dcDefaultLogEventIndex.setStatus('current')
if mibBuilder.loadTexts: dcDefaultLogEventIndex.setDescription('Table index.')
dcDefaultLogEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcDefaultLogEventName.setStatus('current')
if mibBuilder.loadTexts: dcDefaultLogEventName.setDescription('Plain text name of the event that can be logged.')
dcDefaultLogEventLogged = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcDefaultLogEventLogged.setStatus('current')
if mibBuilder.loadTexts: dcDefaultLogEventLogged.setDescription('If yes then this event is logged otherwise not.')
dcEventProcessingEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2), )
if mibBuilder.loadTexts: dcEventProcessingEventTable.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventTable.setDescription('Event config table for event ORs.')
dcEventProcessingEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcEventProcessingEventIndex"))
if mibBuilder.loadTexts: dcEventProcessingEventEntry.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventEntry.setDescription('A particular event entry.')
dcEventProcessingEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000)))
if mibBuilder.loadTexts: dcEventProcessingEventIndex.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventIndex.setDescription('Table index.')
dcEventProcessingEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventProcessingEventName.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventName.setDescription('Plain text name of the input event.')
dcEventProcessingEventAssigned = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcEventProcessingEventAssigned.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventAssigned.setDescription('If yes then the input event is assigned to the selected \n                event. Please note, that it is only possible to change \n                assignment of event ORs.')
dcEventProcessingEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unknown", 1), ("eventOR", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcEventProcessingEventType.setStatus('current')
if mibBuilder.loadTexts: dcEventProcessingEventType.setDescription('Type of the input event.')
dcLvdTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4), )
if mibBuilder.loadTexts: dcLvdTable.setStatus('current')
if mibBuilder.loadTexts: dcLvdTable.setDescription('Table lists all available LVDs.')
dcLvdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcLvdIndex"))
if mibBuilder.loadTexts: dcLvdEntry.setStatus('current')
if mibBuilder.loadTexts: dcLvdEntry.setDescription('A particular LVD entry.')
dcLvdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: dcLvdIndex.setStatus('current')
if mibBuilder.loadTexts: dcLvdIndex.setDescription('Table index.')
dcLvdName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcLvdName.setStatus('current')
if mibBuilder.loadTexts: dcLvdName.setDescription('Name of the LVD.')
dcLvdDisconnectDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 8, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcLvdDisconnectDelay.setStatus('current')
if mibBuilder.loadTexts: dcLvdDisconnectDelay.setDescription("Time delay from the activation of the source event, after \n                which the LVD event is switched. The value is in the format \n                'hh:mm:ss'.")
dcMeasurementTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1), )
if mibBuilder.loadTexts: dcMeasurementTable.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementTable.setDescription('Table lists all available measurements.')
dcMeasurementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcMeasurementIndex"))
if mibBuilder.loadTexts: dcMeasurementEntry.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementEntry.setDescription('A particular measurement entry.')
dcMeasurementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500)))
if mibBuilder.loadTexts: dcMeasurementIndex.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementIndex.setDescription('Table index.')
dcMeasurementName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementName.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementName.setDescription('Name of the measurement.')
dcMeasurementValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementValue.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementValue.setDescription('Unscaled calibrated value of the measurement.')
dcMeasurementScaleFactor = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementScaleFactor.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementScaleFactor.setDescription('Scale factor as power of 10 to be multiplied with measurement value.')
dcMeasurementUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("voltDC", 3), ("voltAC", 4), ("ampere", 5), ("ampereHour", 6), ("degreeCelsius", 7), ("temperatureCoefficient", 8), ("watt", 9), ("wattHour", 10), ("seconds", 11), ("percent", 12), ("hertz", 13), ("voltAmpere", 14), ("voltAmpereReactive", 15), ("voltAmpereReactiveHour", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeasurementUnit.setStatus('current')
if mibBuilder.loadTexts: dcMeasurementUnit.setDescription('Unit of the measurement.')
dcMeterPanelEventTable = MibTable((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1), )
if mibBuilder.loadTexts: dcMeterPanelEventTable.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventTable.setDescription('Table lists all available meter panel events.')
dcMeterPanelEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1), ).setIndexNames((0, "ORION-BASE-MIB", "dcMeterPanelEventIndex"))
if mibBuilder.loadTexts: dcMeterPanelEventEntry.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventEntry.setDescription('A particular meter panel event entry.')
dcMeterPanelEventIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128)))
if mibBuilder.loadTexts: dcMeterPanelEventIndex.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventIndex.setDescription('Table index.')
dcMeterPanelEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventName.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventName.setDescription('Name of the event.')
dcMeterPanelEventValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("false", 1), ("indeterminate", 2), ("true", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventValue.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventValue.setDescription('Value of the event.')
dcMeterPanelEventHourMeterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 2, 10, 1, 1, 4), Gauge32()).setUnits('hours').setMaxAccess("readonly")
if mibBuilder.loadTexts: dcMeterPanelEventHourMeterValue.setStatus('current')
if mibBuilder.loadTexts: dcMeterPanelEventHourMeterValue.setDescription('Value of the hour meter event.')
systemNonUrgentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 1)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberNonUrgentAlarms"), ("ORION-BASE-MIB", "dcNonUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcNonUrgentAlarmValue"), ("ORION-BASE-MIB", "dcNonUrgentAlarmName"))
if mibBuilder.loadTexts: systemNonUrgentAlarm.setStatus('current')
if mibBuilder.loadTexts: systemNonUrgentAlarm.setDescription('The controller reports that one or more elements have changed\n                into none urgent alarm state.')
systemUrgentAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 2)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberUrgentAlarms"), ("ORION-BASE-MIB", "dcUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcUrgentAlarmValue"), ("ORION-BASE-MIB", "dcUrgentAlarmName"))
if mibBuilder.loadTexts: systemUrgentAlarm.setStatus('current')
if mibBuilder.loadTexts: systemUrgentAlarm.setDescription('The controller reports that one or more elements have changed\n                into urgent alarm state.')
systemCriticalAlarm = NotificationType((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 3, 1, 0, 3)).setObjects(("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcNumberCriticalAlarms"), ("ORION-BASE-MIB", "dcCriticalAlarmIdentifier"), ("ORION-BASE-MIB", "dcCriticalAlarmValue"), ("ORION-BASE-MIB", "dcCriticalAlarmName"))
if mibBuilder.loadTexts: systemCriticalAlarm.setStatus('current')
if mibBuilder.loadTexts: systemCriticalAlarm.setDescription('The controller reports that one or more elements have changed\n                into critical alarm state.')
systemInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 1)).setObjects(("ORION-BASE-MIB", "dcSiteName"), ("ORION-BASE-MIB", "dcSystemName"), ("ORION-BASE-MIB", "dcSystemDateTime"), ("ORION-BASE-MIB", "dcSoftwareVersion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemInfoGroup = systemInfoGroup.setStatus('current')
if mibBuilder.loadTexts: systemInfoGroup.setDescription('The collection of system info scalar objects.')
systemAlarmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 2)).setObjects(("ORION-BASE-MIB", "dcNumberUrgentAlarms"), ("ORION-BASE-MIB", "dcNumberNonUrgentAlarms"), ("ORION-BASE-MIB", "dcMainsFailureAlarm"), ("ORION-BASE-MIB", "dcUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcUrgentAlarmValue"), ("ORION-BASE-MIB", "dcNonUrgentAlarmIdentifier"), ("ORION-BASE-MIB", "dcNonUrgentAlarmValue"), ("ORION-BASE-MIB", "dcUrgentAlarmName"), ("ORION-BASE-MIB", "dcNonUrgentAlarmName"), ("ORION-BASE-MIB", "dcNumberCriticalAlarms"), ("ORION-BASE-MIB", "dcCriticalAlarmIdentifier"), ("ORION-BASE-MIB", "dcCriticalAlarmValue"), ("ORION-BASE-MIB", "dcCriticalAlarmName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemAlarmGroup = systemAlarmGroup.setStatus('current')
if mibBuilder.loadTexts: systemAlarmGroup.setDescription('The collection of system alarm scalar objects.')
systemMonitorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 3)).setObjects(("ORION-BASE-MIB", "dcSystemVoltage"), ("ORION-BASE-MIB", "dcLoadCurrent"), ("ORION-BASE-MIB", "dcBatteryCurrent"), ("ORION-BASE-MIB", "dcBatteryTemperature"), ("ORION-BASE-MIB", "dcChargeState"), ("ORION-BASE-MIB", "dcCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierCurrent"), ("ORION-BASE-MIB", "dcSystemPower"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    systemMonitorGroup = systemMonitorGroup.setStatus('current')
if mibBuilder.loadTexts: systemMonitorGroup.setDescription('The collection of system monitor scalar objects.')
rectifierGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 4)).setObjects(("ORION-BASE-MIB", "dcNumberRectifiers"), ("ORION-BASE-MIB", "dcNumberRectifiersFailure"), ("ORION-BASE-MIB", "dcNumberRectifiersOkay"), ("ORION-BASE-MIB", "dcEfficiencyCyclingEnabled"), ("ORION-BASE-MIB", "dcLimitSwitchingTimes"), ("ORION-BASE-MIB", "dcForceSwitchingOncePerMonth"), ("ORION-BASE-MIB", "dcMaximumLoadStep"), ("ORION-BASE-MIB", "dcMinimumLoadStep"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroup = rectifierGroup.setStatus('current')
if mibBuilder.loadTexts: rectifierGroup.setDescription('The collection of rectifier scalar objects.')
eventHistoryTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 5)).setObjects(("ORION-BASE-MIB", "dcEventHistoryTimestamp"), ("ORION-BASE-MIB", "dcEventHistoryMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventHistoryTableGroup = eventHistoryTableGroup.setStatus('current')
if mibBuilder.loadTexts: eventHistoryTableGroup.setDescription('The collection of event history table objects.')
alarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 6)).setObjects(("ORION-BASE-MIB", "dcAlarmEventCategory"), ("ORION-BASE-MIB", "dcAlarmEventName"), ("ORION-BASE-MIB", "dcAlarmEventIdentifier"), ("ORION-BASE-MIB", "dcAlarmEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alarmTableGroup = alarmTableGroup.setStatus('current')
if mibBuilder.loadTexts: alarmTableGroup.setDescription('The collection of alarm table objects.')
rectifierTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 7)).setObjects(("ORION-BASE-MIB", "dcRectifierIdentifier"), ("ORION-BASE-MIB", "dcRectifierStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierTableGroup = rectifierTableGroup.setStatus('current')
if mibBuilder.loadTexts: rectifierTableGroup.setDescription('The collection of rectifier table objects.')
notificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 8)).setObjects(("ORION-BASE-MIB", "systemNonUrgentAlarm"), ("ORION-BASE-MIB", "systemUrgentAlarm"), ("ORION-BASE-MIB", "systemCriticalAlarm"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationsGroup = notificationsGroup.setStatus('current')
if mibBuilder.loadTexts: notificationsGroup.setDescription('The group of all controller notifications.')
genericAlarmTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 9)).setObjects(("ORION-BASE-MIB", "dcGenericAlarmEventIdentifier"), ("ORION-BASE-MIB", "dcGenericAlarmEventName"), ("ORION-BASE-MIB", "dcGenericAlarmEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    genericAlarmTableGroup = genericAlarmTableGroup.setStatus('current')
if mibBuilder.loadTexts: genericAlarmTableGroup.setDescription('Assignment of events to alarm table entries.')
batteryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 10)).setObjects(("ORION-BASE-MIB", "dcUsys20"), ("ORION-BASE-MIB", "dcTempCompType"), ("ORION-BASE-MIB", "dcSlope"), ("ORION-BASE-MIB", "dcStartTemp"), ("ORION-BASE-MIB", "dcStopTemp"), ("ORION-BASE-MIB", "dcMaxVoltage"), ("ORION-BASE-MIB", "dcLowStopVoltage"), ("ORION-BASE-MIB", "dcLowStartTemp"), ("ORION-BASE-MIB", "dcLowTempSlope"), ("ORION-BASE-MIB", "dcHighStartTemp"), ("ORION-BASE-MIB", "dcHighTempSlope"), ("ORION-BASE-MIB", "dcHighStopVoltage"), ("ORION-BASE-MIB", "dcRunawayTemp"), ("ORION-BASE-MIB", "dcRunawayVoltage"), ("ORION-BASE-MIB", "dcBatteryTestUsupport"), ("ORION-BASE-MIB", "dcBatteryTestDuration"), ("ORION-BASE-MIB", "dcBatteryTestInterval"), ("ORION-BASE-MIB", "dcBatteryTestDischargeCurrent"), ("ORION-BASE-MIB", "dcBatteryTestMinDuration"), ("ORION-BASE-MIB", "dcBatteryTestVoltageWithinUfloat"), ("ORION-BASE-MIB", "dcBatteryTestVoltageWithinUfloatPeriod"), ("ORION-BASE-MIB", "dcBatteryTestTempFrom"), ("ORION-BASE-MIB", "dcBatteryTestTempTo"), ("ORION-BASE-MIB", "dcBatteryTestIntervalEnabled"), ("ORION-BASE-MIB", "dcBatteryTestStartTimeFrom"), ("ORION-BASE-MIB", "dcBatteryTestStartTimeTo"), ("ORION-BASE-MIB", "dcBatteryTestDateTime"), ("ORION-BASE-MIB", "dcBatteryTestResult"), ("ORION-BASE-MIB", "dcBatteryTestEndVoltage"), ("ORION-BASE-MIB", "dcBatteryTestControl"), ("ORION-BASE-MIB", "dcBatteryTestStatus"), ("ORION-BASE-MIB", "dcBatteryTestFailureEvent"), ("ORION-BASE-MIB", "dcBatteryTestType"), ("ORION-BASE-MIB", "dcTotalBatteryCapacity"), ("ORION-BASE-MIB", "dcLossOfBackupTimeEnabled"), ("ORION-BASE-MIB", "dcLossOfBackupTimeStatus"), ("ORION-BASE-MIB", "dcExpectedBackupTime"), ("ORION-BASE-MIB", "dcEqualizeControl"), ("ORION-BASE-MIB", "dcEqualizeStatus"), ("ORION-BASE-MIB", "dcEqualizeEnabled"), ("ORION-BASE-MIB", "dcEqualizeVoltage"), ("ORION-BASE-MIB", "dcEqualizeDuration"), ("ORION-BASE-MIB", "dcEqualizeUseBattRoomFanEnabled"), ("ORION-BASE-MIB", "dcEqualizeLeadTime"), ("ORION-BASE-MIB", "dcEqualizeTimeLag"), ("ORION-BASE-MIB", "dcEqualizeInterval"), ("ORION-BASE-MIB", "dcEqualizeStartTimeIntervalFrom"), ("ORION-BASE-MIB", "dcEqualizeStartTimeIntervalTo"), ("ORION-BASE-MIB", "dcEqualizeInhibitAfterBoost"), ("ORION-BASE-MIB", "dcBoostChargeControl"), ("ORION-BASE-MIB", "dcBoostChargeStatus"), ("ORION-BASE-MIB", "dcBoostChargeType"), ("ORION-BASE-MIB", "dcBoostChargeVoltage"), ("ORION-BASE-MIB", "dcBoostChargeMaxDuration"), ("ORION-BASE-MIB", "dcBoostChargeUseBattRoomFanEnabled"), ("ORION-BASE-MIB", "dcBoostChargeTimeLag"), ("ORION-BASE-MIB", "dcBoostChargeIstart"), ("ORION-BASE-MIB", "dcBoostChargeIstop"), ("ORION-BASE-MIB", "dcBoostChargeInhibitTime"), ("ORION-BASE-MIB", "dcUaMax"), ("ORION-BASE-MIB", "dcUaMin"), ("ORION-BASE-MIB", "dcUsMax"), ("ORION-BASE-MIB", "dcUsMin"), ("ORION-BASE-MIB", "dcBoD"), ("ORION-BASE-MIB", "dcHysteresis"), ("ORION-BASE-MIB", "dcSuppressUaLowEnabled"), ("ORION-BASE-MIB", "dcSuppressUsLowEnabled"), ("ORION-BASE-MIB", "dcEnableUsTempComp"), ("ORION-BASE-MIB", "dcEvtCtrlChargeStatus"), ("ORION-BASE-MIB", "dcEvtCtrlChargeType"), ("ORION-BASE-MIB", "dcEvtCtrlChargeVoltage"), ("ORION-BASE-MIB", "dcEvtCtrlChargeTempCompEnabled"), ("ORION-BASE-MIB", "dcEvtCtrlChargeMaxIBatt"), ("ORION-BASE-MIB", "dcHighTemp"), ("ORION-BASE-MIB", "dcHighTempHyst"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryGroup = batteryGroup.setStatus('current')
if mibBuilder.loadTexts: batteryGroup.setDescription('The collection of battery scalar objects.')
controlEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 11)).setObjects(("ORION-BASE-MIB", "dcControlEventName"), ("ORION-BASE-MIB", "dcControlEventIdentifier"), ("ORION-BASE-MIB", "dcControlEventValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controlEventTableGroup = controlEventTableGroup.setStatus('current')
if mibBuilder.loadTexts: controlEventTableGroup.setDescription('Assignment of control events to table entries.')
trapDestinationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 12)).setObjects(("ORION-BASE-MIB", "dcTrapDestinationIp"), ("ORION-BASE-MIB", "dcTrapDestinationPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trapDestinationTableGroup = trapDestinationTableGroup.setStatus('current')
if mibBuilder.loadTexts: trapDestinationTableGroup.setDescription('Trap destionation table.')
miscGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 13)).setObjects(("ORION-BASE-MIB", "dcFileProcessingStatus"), ("ORION-BASE-MIB", "dcResendActiveAlarmTraps"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    miscGroup = miscGroup.setStatus('current')
if mibBuilder.loadTexts: miscGroup.setDescription('The collection of miscellaneous objects.')
rectifierGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 14)).setObjects(("ORION-BASE-MIB", "dcRectifierGroupName"), ("ORION-BASE-MIB", "dcRectifierGroupRectifierType"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultVoltage"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierGroupDefaultPowerLimit"), ("ORION-BASE-MIB", "dcRectifierGroupInputLowOff"), ("ORION-BASE-MIB", "dcRectifierGroupInputLowOn"), ("ORION-BASE-MIB", "dcRectifierGroupStartupVoltage"), ("ORION-BASE-MIB", "dcRectifierGroupStartupCurrentLimit"), ("ORION-BASE-MIB", "dcRectifierGroupStartupPowerLimit"), ("ORION-BASE-MIB", "dcRectifierGroupStartupTimeLimit"), ("ORION-BASE-MIB", "dcRectifierGroupPowerupDelay"), ("ORION-BASE-MIB", "dcRectifierGroupPowerupTime"), ("ORION-BASE-MIB", "dcRectifierGroupUmaxOff"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rectifierGroupTableGroup = rectifierGroupTableGroup.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTableGroup.setDescription('The collection of rectifier group table objects.')
batteryStringTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 15)).setObjects(("ORION-BASE-MIB", "dcBatteryStringName"), ("ORION-BASE-MIB", "dcBatteryStringMaxIBatt"), ("ORION-BASE-MIB", "dcBatteryStringCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    batteryStringTableGroup = batteryStringTableGroup.setStatus('current')
if mibBuilder.loadTexts: batteryStringTableGroup.setDescription('The collection of battery string table objects.')
defaultLogEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 16)).setObjects(("ORION-BASE-MIB", "dcDefaultLogEventName"), ("ORION-BASE-MIB", "dcDefaultLogEventLogged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    defaultLogEventTableGroup = defaultLogEventTableGroup.setStatus('current')
if mibBuilder.loadTexts: defaultLogEventTableGroup.setDescription('The collection of default log event table objects.')
eventProcessingEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 17)).setObjects(("ORION-BASE-MIB", "dcEventProcessingEventName"), ("ORION-BASE-MIB", "dcEventProcessingEventAssigned"), ("ORION-BASE-MIB", "dcEventProcessingEventType"), ("ORION-BASE-MIB", "dcEventProcessingEventSelected"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    eventProcessingEventTableGroup = eventProcessingEventTableGroup.setStatus('current')
if mibBuilder.loadTexts: eventProcessingEventTableGroup.setDescription('The collection of event processing event table objects.')
lvdTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 18)).setObjects(("ORION-BASE-MIB", "dcLvdName"), ("ORION-BASE-MIB", "dcLvdDisconnectDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    lvdTableGroup = lvdTableGroup.setStatus('current')
if mibBuilder.loadTexts: lvdTableGroup.setDescription('The collection of LVD table objects.')
powerLimitationTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 19)).setObjects(("ORION-BASE-MIB", "dcPowerLimitationEventName"), ("ORION-BASE-MIB", "dcPowerLimitationStatus"), ("ORION-BASE-MIB", "dcPowerLimitationType"), ("ORION-BASE-MIB", "dcPowerLimitationLimit"), ("ORION-BASE-MIB", "dcPowerLimitationNoBatteryDischarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerLimitationTableGroup = powerLimitationTableGroup.setStatus('current')
if mibBuilder.loadTexts: powerLimitationTableGroup.setDescription('The collection of power limitation table objects.')
measurementTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 20)).setObjects(("ORION-BASE-MIB", "dcMeasurementName"), ("ORION-BASE-MIB", "dcMeasurementValue"), ("ORION-BASE-MIB", "dcMeasurementScaleFactor"), ("ORION-BASE-MIB", "dcMeasurementUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    measurementTableGroup = measurementTableGroup.setStatus('current')
if mibBuilder.loadTexts: measurementTableGroup.setDescription('The collection of measurement table objects.')
meterPanelEventTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 1, 21)).setObjects(("ORION-BASE-MIB", "dcMeterPanelEventName"), ("ORION-BASE-MIB", "dcMeterPanelEventValue"), ("ORION-BASE-MIB", "dcMeterPanelEventHourMeterValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    meterPanelEventTableGroup = meterPanelEventTableGroup.setStatus('current')
if mibBuilder.loadTexts: meterPanelEventTableGroup.setDescription('The collection of meter panel event table objects.')
controllerBasicCompl = ModuleCompliance((1, 3, 6, 1, 4, 1, 20246, 2, 3, 1, 1, 1, 1, 2, 1)).setObjects(("ORION-BASE-MIB", "systemInfoGroup"), ("ORION-BASE-MIB", "systemAlarmGroup"), ("ORION-BASE-MIB", "systemMonitorGroup"), ("ORION-BASE-MIB", "alarmTableGroup"), ("ORION-BASE-MIB", "notificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    controllerBasicCompl = controllerBasicCompl.setStatus('current')
if mibBuilder.loadTexts: controllerBasicCompl.setDescription('The basic implementation requirements for the controller MIB.')
mibBuilder.exportSymbols("ORION-BASE-MIB", dcLossOfBackupTimeStatus=dcLossOfBackupTimeStatus, dcBoostChargeInhibitTime=dcBoostChargeInhibitTime, dcEvtCtrlChargeVoltage=dcEvtCtrlChargeVoltage, dcEqualizeInterval=dcEqualizeInterval, dcRectifierCurrent=dcRectifierCurrent, dcBatteryTestResult=dcBatteryTestResult, dcBatteryTestInterval=dcBatteryTestInterval, dcEfficiencyCycling=dcEfficiencyCycling, dcPowerLimitationNoBatteryDischarge=dcPowerLimitationNoBatteryDischarge, dcFileProcessingStatus=dcFileProcessingStatus, dcControlEventIndex=dcControlEventIndex, dcRectifierGroupPowerupDelay=dcRectifierGroupPowerupDelay, dcAlarmEventCategory=dcAlarmEventCategory, dcSlope=dcSlope, dcCriticalAlarmIdentifier=dcCriticalAlarmIdentifier, dcEqualizeControl=dcEqualizeControl, dcEventHistoryEntry=dcEventHistoryEntry, dcBatteryStringCapacity=dcBatteryStringCapacity, systemCriticalAlarm=systemCriticalAlarm, dcBatteryStringMaxIBatt=dcBatteryStringMaxIBatt, dcLvdTable=dcLvdTable, dcPowerLimitationStatus=dcPowerLimitationStatus, dcSystemName=dcSystemName, dcRectifierGroupUmaxOff=dcRectifierGroupUmaxOff, dcLvdEntry=dcLvdEntry, dcEventHistoryTimestamp=dcEventHistoryTimestamp, dcBatteryTestParameter=dcBatteryTestParameter, controllerGroups=controllerGroups, dcCriticalAlarmName=dcCriticalAlarmName, dcEfficiencyCyclingEnabled=dcEfficiencyCyclingEnabled, dcEqualizeStartTimeIntervalTo=dcEqualizeStartTimeIntervalTo, dcDefaultLogEventTable=dcDefaultLogEventTable, dcEventProcessingEventEntry=dcEventProcessingEventEntry, dcBatteryTestDateTime=dcBatteryTestDateTime, dcMeasurementName=dcMeasurementName, dcMeterPanelEventHourMeterValue=dcMeterPanelEventHourMeterValue, dcControlEventTable=dcControlEventTable, dcEventProcessingEventName=dcEventProcessingEventName, dcBoostChargeControl=dcBoostChargeControl, dcSuppressUaLowEnabled=dcSuppressUaLowEnabled, dcRectifierFunctions=dcRectifierFunctions, dcMeasurementScaleFactor=dcMeasurementScaleFactor, dcBatteryTestIntervalEnabled=dcBatteryTestIntervalEnabled, dcBatteryTestEndVoltage=dcBatteryTestEndVoltage, dcBoostCharge=dcBoostCharge, dcRunawayVoltage=dcRunawayVoltage, controlEventTableGroup=controlEventTableGroup, dcInputOutput=dcInputOutput, dcLossOfBackupTimeEnabled=dcLossOfBackupTimeEnabled, dcDefaultLogEventName=dcDefaultLogEventName, dcLvdIndex=dcLvdIndex, dcGenericAlarmEventValue=dcGenericAlarmEventValue, dcPowerLimitationEventName=dcPowerLimitationEventName, dcMeasurement=dcMeasurement, rectifierGroupTableGroup=rectifierGroupTableGroup, dcEqualizeEnabled=dcEqualizeEnabled, dcEventProcessingEventSelected=dcEventProcessingEventSelected, dcEventProcessingEventType=dcEventProcessingEventType, dcBatteryCurrent=dcBatteryCurrent, dcLossOfBackupTime=dcLossOfBackupTime, dcRectifier=dcRectifier, dcRectifierTable=dcRectifierTable, dcRectifierGroupTable=dcRectifierGroupTable, dcRectifierGroupInputLowOff=dcRectifierGroupInputLowOff, dcAlarmTable=dcAlarmTable, dcGenericAlarmEventName=dcGenericAlarmEventName, dcFloatCharge=dcFloatCharge, dcRectifierGroupInputLowOn=dcRectifierGroupInputLowOn, controllerCompl=controllerCompl, dcForceSwitchingOncePerMonth=dcForceSwitchingOncePerMonth, dcBatteryTestTempTo=dcBatteryTestTempTo, dcBoostChargeType=dcBoostChargeType, dcBoostChargeUseBattRoomFanEnabled=dcBoostChargeUseBattRoomFanEnabled, dcEqualizeStartTimeIntervalFrom=dcEqualizeStartTimeIntervalFrom, dcSoftwareVersion=dcSoftwareVersion, dcTempSupervision=dcTempSupervision, dcGenericAlarmEventIdentifier=dcGenericAlarmEventIdentifier, trapDestinationTableGroup=trapDestinationTableGroup, dcBoostChargeIstop=dcBoostChargeIstop, dcRunawayTemp=dcRunawayTemp, controllerEventsV2=controllerEventsV2, dcEnableUsTempComp=dcEnableUsTempComp, dcSystemAlarms=dcSystemAlarms, dcTrapDestinationTable=dcTrapDestinationTable, PYSNMP_MODULE_ID=orionBaseMibModule, dcPowerLimitation=dcPowerLimitation, dcEqualizeLeadTime=dcEqualizeLeadTime, dcSystemInfo=dcSystemInfo, dcConfig=dcConfig, dcSystemPower=dcSystemPower, dcSystemDateTime=dcSystemDateTime, dcEqualizeUseBattRoomFanEnabled=dcEqualizeUseBattRoomFanEnabled, dcEqualizeInhibitAfterBoost=dcEqualizeInhibitAfterBoost, dcBoostChargeVoltage=dcBoostChargeVoltage, dcUaMax=dcUaMax, dcMeterPanelEventTable=dcMeterPanelEventTable, controllerBasicCompl=controllerBasicCompl, dcBoostChargeParameter=dcBoostChargeParameter, dcUaMin=dcUaMin, dcResendActiveAlarmTraps=dcResendActiveAlarmTraps, dcBatteryStringTable=dcBatteryStringTable, dcRectifierGroupDefaultCurrentLimit=dcRectifierGroupDefaultCurrentLimit, dcPowerLimitationLimit=dcPowerLimitationLimit, dcEqualizeDuration=dcEqualizeDuration, dcEqualizeVoltage=dcEqualizeVoltage, dcBatteryTestStartTimeFrom=dcBatteryTestStartTimeFrom, dcBatteryTestControl=dcBatteryTestControl, dcBoostChargeTimeLag=dcBoostChargeTimeLag, dcBatteryTestTempFrom=dcBatteryTestTempFrom, dcTrapDestinationIp=dcTrapDestinationIp, dcTempComp=dcTempComp, dcSuppressUsLowEnabled=dcSuppressUsLowEnabled, dcHighTempHyst=dcHighTempHyst, dcNumberRectifiersOkay=dcNumberRectifiersOkay, dcEventProcessingEventAssigned=dcEventProcessingEventAssigned, dcEqualize=dcEqualize, systemInfoGroup=systemInfoGroup, meterPanelEventTableGroup=meterPanelEventTableGroup, dcBatteryTestFailureEvent=dcBatteryTestFailureEvent, dcBoostChargeStatus=dcBoostChargeStatus, dcTempCompType=dcTempCompType, dcMaximumLoadStep=dcMaximumLoadStep, dcAlarmEntry=dcAlarmEntry, dcRectifierEntry=dcRectifierEntry, dcBatteryStringIndex=dcBatteryStringIndex, dcMeterPanel=dcMeterPanel, dcTotalBatteryCapacity=dcTotalBatteryCapacity, dcEvtCtrlChargeMaxIBatt=dcEvtCtrlChargeMaxIBatt, dcLvdName=dcLvdName, dcControlEventIdentifier=dcControlEventIdentifier, dcMeasurementValue=dcMeasurementValue, dcBoostChargeMaxDuration=dcBoostChargeMaxDuration, orionBaseMib=orionBaseMib, dcUrgentAlarmIdentifier=dcUrgentAlarmIdentifier, dcBatteryTemperature=dcBatteryTemperature, dcBatteryTestVoltageWithinUfloatPeriod=dcBatteryTestVoltageWithinUfloatPeriod, dcHysteresis=dcHysteresis, orionBaseMibModule=orionBaseMibModule, dcRectifierGroupEntry=dcRectifierGroupEntry, defaultLogEventTableGroup=defaultLogEventTableGroup, dcBatteryStringName=dcBatteryStringName, dcNonUrgentAlarmIdentifier=dcNonUrgentAlarmIdentifier, controllerEventObjects=controllerEventObjects, dcRectifierGroupStartupCurrentLimit=dcRectifierGroupStartupCurrentLimit, dcCurrentLimit=dcCurrentLimit, dcRectifierGroupName=dcRectifierGroupName, dcEventProcessingEventIndex=dcEventProcessingEventIndex, systemUrgentAlarm=systemUrgentAlarm, dcNonUrgentAlarmValue=dcNonUrgentAlarmValue, dcAlarmEventValue=dcAlarmEventValue, dcEqualizeParameter=dcEqualizeParameter, dcUrgentAlarmValue=dcUrgentAlarmValue, dcSystemMonitor=dcSystemMonitor, dcLimitSwitchingTimes=dcLimitSwitchingTimes, dcMeasurementIndex=dcMeasurementIndex, dcSiteName=dcSiteName, dcMeasurementTable=dcMeasurementTable, dcRectifierStatus=dcRectifierStatus, dcEvtCtrlChargeStatus=dcEvtCtrlChargeStatus, dcRectifierGroupStartupPowerLimit=dcRectifierGroupStartupPowerLimit, dcEventHistoryMessage=dcEventHistoryMessage, dcGenericAlarmEntry=dcGenericAlarmEntry, dcLoadCurrent=dcLoadCurrent, rectifierGroup=rectifierGroup, notificationsGroup=notificationsGroup, dcMeasurementUnit=dcMeasurementUnit, dcBatteryTestResults=dcBatteryTestResults, dcHighStopVoltage=dcHighStopVoltage, rectifierTableGroup=rectifierTableGroup, dcMinimumLoadStep=dcMinimumLoadStep, systemNonUrgentAlarm=systemNonUrgentAlarm, dcAlarmIndex=dcAlarmIndex, dcMeterPanelEventEntry=dcMeterPanelEventEntry, dcMeasurementEntry=dcMeasurementEntry, dcLowStopVoltage=dcLowStopVoltage, dcPowerLimitationIndex=dcPowerLimitationIndex, dcUsMax=dcUsMax, dcAlarmEventName=dcAlarmEventName, dcLowStartTemp=dcLowStartTemp, dcRectifierGroupStartupTimeLimit=dcRectifierGroupStartupTimeLimit, dcCriticalAlarmValue=dcCriticalAlarmValue, dcRectifierGroupPowerupTime=dcRectifierGroupPowerupTime, dcHighTempSlope=dcHighTempSlope, dcEventProcessingEventTable=dcEventProcessingEventTable, dcNumberRectifiersFailure=dcNumberRectifiersFailure, dcStartTemp=dcStartTemp, dcBoD=dcBoD, systemMonitorGroup=systemMonitorGroup, dcRectifierGroupStartupVoltage=dcRectifierGroupStartupVoltage, dcHighStartTemp=dcHighStartTemp, dcMaxVoltage=dcMaxVoltage, dcRectifierGroupIndex=dcRectifierGroupIndex, dcBatteryTest=dcBatteryTest, dcSystemVoltage=dcSystemVoltage, dcUsys20=dcUsys20, dcRectifierGroupDefaultVoltage=dcRectifierGroupDefaultVoltage, controllerObjects=controllerObjects, dcNumberNonUrgentAlarms=dcNumberNonUrgentAlarms, controllerConfs=controllerConfs, dcPowerLimitationTable=dcPowerLimitationTable, dcNumberRectifiers=dcNumberRectifiers, dcTrapDestinationPort=dcTrapDestinationPort, dcRectifierGroupRectifierType=dcRectifierGroupRectifierType, dcPowerLimitationEntry=dcPowerLimitationEntry, dcDefaultLogEventLogged=dcDefaultLogEventLogged, lvdTableGroup=lvdTableGroup, powerLimitationTableGroup=powerLimitationTableGroup, dcTrapDestinationIndex=dcTrapDestinationIndex, dcBatteryTestStartTimeTo=dcBatteryTestStartTimeTo, dcExpectedBackupTime=dcExpectedBackupTime, dcControlEventName=dcControlEventName, dcUsMin=dcUsMin, dcChargeState=dcChargeState, dcMainsFailureAlarm=dcMainsFailureAlarm, dcBatteryTestStatus=dcBatteryTestStatus, dcEventHistoryIndex=dcEventHistoryIndex, dcTrapDestinationEntry=dcTrapDestinationEntry, dcEvtCtrlChargeTempCompEnabled=dcEvtCtrlChargeTempCompEnabled, dcEvtCtrlCharge=dcEvtCtrlCharge, dcPowerLimitationType=dcPowerLimitationType, dcMeterPanelEventValue=dcMeterPanelEventValue, alarmTableGroup=alarmTableGroup, dcNonUrgentAlarmName=dcNonUrgentAlarmName, systemAlarmGroup=systemAlarmGroup, eventHistoryTableGroup=eventHistoryTableGroup, dcGenericAlarmIndex=dcGenericAlarmIndex, dcBatteryTestUsupport=dcBatteryTestUsupport, dcBattery=dcBattery, dcBatteryParameter=dcBatteryParameter, dcGenericAlarmTable=dcGenericAlarmTable, dcRectifierIndex=dcRectifierIndex, dcMeterPanelEventName=dcMeterPanelEventName, dcAlarmEventIdentifier=dcAlarmEventIdentifier, dcLvdDisconnectDelay=dcLvdDisconnectDelay, dcBatteryTestDuration=dcBatteryTestDuration, dcEvtCtrlChargeType=dcEvtCtrlChargeType, dcControlEventEntry=dcControlEventEntry, dcBatteryTestVoltageWithinUfloat=dcBatteryTestVoltageWithinUfloat, dcBatteryTestType=dcBatteryTestType, measurementTableGroup=measurementTableGroup, dcNumberUrgentAlarms=dcNumberUrgentAlarms, dcBatteryTestMinDuration=dcBatteryTestMinDuration, eventProcessingEventTableGroup=eventProcessingEventTableGroup, dcHighTemp=dcHighTemp, dcLowTempSlope=dcLowTempSlope, dcBoostChargeIstart=dcBoostChargeIstart, dcStopTemp=dcStopTemp, dcRectifierIdentifier=dcRectifierIdentifier, dcMeterPanelEventIndex=dcMeterPanelEventIndex, dcBatteryTestDischargeCurrent=dcBatteryTestDischargeCurrent, controllerEvents=controllerEvents, dcControlEventValue=dcControlEventValue, dcDefaultLogEventIndex=dcDefaultLogEventIndex, dcEventHistoryTable=dcEventHistoryTable)
mibBuilder.exportSymbols("ORION-BASE-MIB", dcMisc=dcMisc, dcUrgentAlarmName=dcUrgentAlarmName, dcBatteryStringEntry=dcBatteryStringEntry, dcDefaultLogEventEntry=dcDefaultLogEventEntry, batteryGroup=batteryGroup, dcEvtCtrlChargeParameter=dcEvtCtrlChargeParameter, miscGroup=miscGroup, dcEqualizeStatus=dcEqualizeStatus, batteryStringTableGroup=batteryStringTableGroup, dcNumberCriticalAlarms=dcNumberCriticalAlarms, dcRectifierGroupDefaultPowerLimit=dcRectifierGroupDefaultPowerLimit, dcSystemVoltageSupervision=dcSystemVoltageSupervision, genericAlarmTableGroup=genericAlarmTableGroup, dcEqualizeTimeLag=dcEqualizeTimeLag)
