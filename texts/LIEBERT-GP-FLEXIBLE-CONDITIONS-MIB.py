#
# PySNMP MIB module LIEBERT-GP-FLEXIBLE-CONDITIONS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/liebert/LIEBERT-GP-FLEXIBLE-COND-MIB
# Produced by pysmi-1.1.12 at Tue May 28 12:51:15 2024
# On host fv-az847-244 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
lgpFlexConditions, = mibBuilder.importSymbols("LIEBERT-GP-CONDITIONS-MIB", "lgpFlexConditions")
liebertFlexibleConditionsModuleReg, = mibBuilder.importSymbols("LIEBERT-GP-REGISTRATION-MIB", "liebertFlexibleConditionsModuleReg")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, MibIdentifier, Integer32, ObjectIdentity, Bits, iso, ModuleIdentity, Unsigned32, NotificationType, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "MibIdentifier", "Integer32", "ObjectIdentity", "Bits", "iso", "ModuleIdentity", "Unsigned32", "NotificationType", "IpAddress", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
liebertGlobalProductsFlexibleConditionsModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 1, 11, 1))
liebertGlobalProductsFlexibleConditionsModule.setRevisions(('2018-10-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: liebertGlobalProductsFlexibleConditionsModule.setRevisionsDescriptions(('Compiled From GDD Version: 6825.1',))
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleConditionsModule.setLastUpdated('201810020000Z')
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleConditionsModule.setOrganization('Liebert Corporation')
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleConditionsModule.setContactInfo('Contact:   Technical Support\n\n      Postal:\n      Liebert Corporation\n      1050 Dearborn Drive\n      P.O. Box 29186\n      Columbus OH, 43229\n      US\n\n      Tel: +1 (800) 222-5877\n\n      E-mail: liebert.monitoring@vertivco.com\n      Web:    www.vertivco.com')
if mibBuilder.loadTexts: liebertGlobalProductsFlexibleConditionsModule.setDescription("The MIB module used to register Liebert SNMP OIDs.\n\n      Copyright 2000-2018 Liebert Corporation. All rights reserved.\n      Reproduction of this document is authorized on the condition\n      that the forgoing copyright notice is included.\n\n      This Specification is supplied 'AS IS' and Liebert Corporation\n      makes no warranty, either express or implied, as to the use,\n      operation, condition, or performance of the Specification.")
lgpFlexConditionsWellKnown = MibIdentifier((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1))
lgpCondId4122SystemInputPowerProblem = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4122))
if mibBuilder.loadTexts: lgpCondId4122SystemInputPowerProblem.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4122SystemInputPowerProblem.setDescription('The input is not qualified to provide power to the system.')
lgpCondId4132BypassOverloadPhaseA = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4132))
if mibBuilder.loadTexts: lgpCondId4132BypassOverloadPhaseA.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4132BypassOverloadPhaseA.setDescription('An overload exists on output phase A while operating on the bypass.')
lgpCondId4133BypassOverloadPhaseB = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4133))
if mibBuilder.loadTexts: lgpCondId4133BypassOverloadPhaseB.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4133BypassOverloadPhaseB.setDescription('An overload exists on output phase B while operating on the bypass.')
lgpCondId4134BypassOverloadPhaseC = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4134))
if mibBuilder.loadTexts: lgpCondId4134BypassOverloadPhaseC.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4134BypassOverloadPhaseC.setDescription('An overload exists on output phase C while operating on the bypass.')
lgpCondId4135BypassNotAvailable = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4135))
if mibBuilder.loadTexts: lgpCondId4135BypassNotAvailable.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4135BypassNotAvailable.setDescription('A problem associated with the bypass has been detected.')
lgpCondId4137BypassAutoRetransferPrimed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4137))
if mibBuilder.loadTexts: lgpCondId4137BypassAutoRetransferPrimed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4137BypassAutoRetransferPrimed.setDescription('Automatic retransfer from bypass to inverter is possible.')
lgpCondId4138BypassAutoRetransferFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4138))
if mibBuilder.loadTexts: lgpCondId4138BypassAutoRetransferFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4138BypassAutoRetransferFailed.setDescription('After performing a recoverable transfer to bypass, an attempt to\n        auto retransfer from bypass to inverter failed.')
lgpCondId4139BypassExcessAutoRetransfers = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4139))
if mibBuilder.loadTexts: lgpCondId4139BypassExcessAutoRetransfers.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4139BypassExcessAutoRetransfers.setDescription('The number of auto retransfers, from bypass to inverter, has\n        exceeded the maximum for a specified time interval.')
lgpCondId4140BypassRestartInhibitExternal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4140))
if mibBuilder.loadTexts: lgpCondId4140BypassRestartInhibitExternal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4140BypassRestartInhibitExternal.setDescription('Restart of the bypass is inhibited by the state of an external\n        signal.')
lgpCondId4141BypassBreakerClosed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4141))
if mibBuilder.loadTexts: lgpCondId4141BypassBreakerClosed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4141BypassBreakerClosed.setDescription('The bypass breaker is closed.')
lgpCondId4142BypassStaticSwitchOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4142))
if mibBuilder.loadTexts: lgpCondId4142BypassStaticSwitchOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4142BypassStaticSwitchOverload.setDescription('Bypass off due to static switch overload.')
lgpCondId4143BypassStaticSwitchUnavailable = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4143))
if mibBuilder.loadTexts: lgpCondId4143BypassStaticSwitchUnavailable.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4143BypassStaticSwitchUnavailable.setDescription('The static bypass is unavailable to support the critical load.')
lgpCondId4144BypassExcessivePulseParallel = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4144))
if mibBuilder.loadTexts: lgpCondId4144BypassExcessivePulseParallel.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4144BypassExcessivePulseParallel.setDescription('The system has performed too many pulse parallel operations within\n        a specified time interval.')
lgpCondId4145BypassAutoTransferFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4145))
if mibBuilder.loadTexts: lgpCondId4145BypassAutoTransferFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4145BypassAutoTransferFailed.setDescription('An automatic transfer to static bypass failed.')
lgpCondId4146SystemInputPhsRotationError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4146))
if mibBuilder.loadTexts: lgpCondId4146SystemInputPhsRotationError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4146SystemInputPhsRotationError.setDescription('The power conductors on the input line are not wired to the UPS in\n        the sequence preferred for the rectifier (A-B-C).')
lgpCondId4147SystemInputCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4147))
if mibBuilder.loadTexts: lgpCondId4147SystemInputCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4147SystemInputCurrentLimit.setDescription('The RMS input current has reached the input current limit\n        threshold.')
lgpCondId4162BatteryLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4162))
if mibBuilder.loadTexts: lgpCondId4162BatteryLow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4162BatteryLow.setDescription('The calculated battery time remaining has reached the low battery\n        threshold.')
lgpCondId4163OutputOffEndofDischarge = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4163))
if mibBuilder.loadTexts: lgpCondId4163OutputOffEndofDischarge.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4163OutputOffEndofDischarge.setDescription('Output turned off due to battery reaching end-of-discharge.')
lgpCondId4164BatteryChargingError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4164))
if mibBuilder.loadTexts: lgpCondId4164BatteryChargingError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4164BatteryChargingError.setDescription('The battery is not charging properly.')
lgpCondId4165BatteryChargingReducedExtrnl = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4165))
if mibBuilder.loadTexts: lgpCondId4165BatteryChargingReducedExtrnl.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4165BatteryChargingReducedExtrnl.setDescription('Using a reduced battery charging algorithm due to an external\n        signal.')
lgpCondId4166BatteryCapacityLow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4166))
if mibBuilder.loadTexts: lgpCondId4166BatteryCapacityLow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4166BatteryCapacityLow.setDescription('Battery capacity is low.')
lgpCondId4167OutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4167))
if mibBuilder.loadTexts: lgpCondId4167OutputOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4167OutputOff.setDescription('Output is off.')
lgpCondId4168BatteryDischarging = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4168))
if mibBuilder.loadTexts: lgpCondId4168BatteryDischarging.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4168BatteryDischarging.setDescription('The battery is discharging.')
lgpCondId4169BatteryTemperatureImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4169))
if mibBuilder.loadTexts: lgpCondId4169BatteryTemperatureImbalance.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4169BatteryTemperatureImbalance.setDescription('Excessive temperature differences between battery sensors detected.')
lgpCondId4170BatteryEqualize = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4170))
if mibBuilder.loadTexts: lgpCondId4170BatteryEqualize.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4170BatteryEqualize.setDescription('The rectifier output voltage is increased to equalize the battery\n        voltage level.')
lgpCondId4171BatteryManualTestInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4171))
if mibBuilder.loadTexts: lgpCondId4171BatteryManualTestInProgress.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4171BatteryManualTestInProgress.setDescription('Manual battery test is in progress.')
lgpCondId4172BatteryAutoTestInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4172))
if mibBuilder.loadTexts: lgpCondId4172BatteryAutoTestInProgress.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4172BatteryAutoTestInProgress.setDescription('Automatic battery test is in progress.')
lgpCondId4173MainBatteryDisconnectOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4173))
if mibBuilder.loadTexts: lgpCondId4173MainBatteryDisconnectOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4173MainBatteryDisconnectOpen.setDescription('Main battery disconnect is open.')
lgpCondId4174BatteryTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4174))
if mibBuilder.loadTexts: lgpCondId4174BatteryTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4174BatteryTemperatureSensorFault.setDescription('A battery temperature sensor fault has been detected.')
lgpCondId4175BypassFrequencyError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4175))
if mibBuilder.loadTexts: lgpCondId4175BypassFrequencyError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4175BypassFrequencyError.setDescription('The bypass frequency is outside the inverter synchronization\n        limits.')
lgpCondId4176BatteryCircuitBreaker1Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4176))
if mibBuilder.loadTexts: lgpCondId4176BatteryCircuitBreaker1Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4176BatteryCircuitBreaker1Open.setDescription('Battery circuit breaker 1 is open.')
lgpCondId4177BatteryBreaker1OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4177))
if mibBuilder.loadTexts: lgpCondId4177BatteryBreaker1OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4177BatteryBreaker1OpenFailure.setDescription('Battery circuit breaker 1 failed to open.')
lgpCondId4178BatteryBreaker1CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4178))
if mibBuilder.loadTexts: lgpCondId4178BatteryBreaker1CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4178BatteryBreaker1CloseFailure.setDescription('Battery circuit breaker 1 failed to close.')
lgpCondId4179BatteryCircuitBreaker2Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4179))
if mibBuilder.loadTexts: lgpCondId4179BatteryCircuitBreaker2Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4179BatteryCircuitBreaker2Open.setDescription('Battery circuit breaker 2 is open.')
lgpCondId4180BatteryBreaker2OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4180))
if mibBuilder.loadTexts: lgpCondId4180BatteryBreaker2OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4180BatteryBreaker2OpenFailure.setDescription('Battery circuit breaker 2 failed to open.')
lgpCondId4181BatteryBreaker2CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4181))
if mibBuilder.loadTexts: lgpCondId4181BatteryBreaker2CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4181BatteryBreaker2CloseFailure.setDescription('Battery circuit breaker 2 failed to close.')
lgpCondId4182BatteryCircuitBreaker3Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4182))
if mibBuilder.loadTexts: lgpCondId4182BatteryCircuitBreaker3Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4182BatteryCircuitBreaker3Open.setDescription('Battery circuit breaker 3 is open.')
lgpCondId4183BatteryBreaker3OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4183))
if mibBuilder.loadTexts: lgpCondId4183BatteryBreaker3OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4183BatteryBreaker3OpenFailure.setDescription('Battery circuit breaker 3 failed to open.')
lgpCondId4184BatteryBreaker3CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4184))
if mibBuilder.loadTexts: lgpCondId4184BatteryBreaker3CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4184BatteryBreaker3CloseFailure.setDescription('Battery circuit breaker 3 failed to close.')
lgpCondId4185BatteryCircuitBreaker4Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4185))
if mibBuilder.loadTexts: lgpCondId4185BatteryCircuitBreaker4Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4185BatteryCircuitBreaker4Open.setDescription('Battery circuit breaker 4 is open.')
lgpCondId4186BatteryBreaker4OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4186))
if mibBuilder.loadTexts: lgpCondId4186BatteryBreaker4OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4186BatteryBreaker4OpenFailure.setDescription('Battery circuit breaker 4 failed to open.')
lgpCondId4187BatteryBreaker4CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4187))
if mibBuilder.loadTexts: lgpCondId4187BatteryBreaker4CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4187BatteryBreaker4CloseFailure.setDescription('Battery circuit breaker 4 failed to close.')
lgpCondId4188BatteryCircuitBreaker5Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4188))
if mibBuilder.loadTexts: lgpCondId4188BatteryCircuitBreaker5Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4188BatteryCircuitBreaker5Open.setDescription('Battery circuit breaker 5 is open.')
lgpCondId4189BatteryBreaker5OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4189))
if mibBuilder.loadTexts: lgpCondId4189BatteryBreaker5OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4189BatteryBreaker5OpenFailure.setDescription('Battery circuit breaker 5 failed to open.')
lgpCondId4190BatteryBreaker5CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4190))
if mibBuilder.loadTexts: lgpCondId4190BatteryBreaker5CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4190BatteryBreaker5CloseFailure.setDescription('Battery circuit breaker 5 failed to close.')
lgpCondId4191BatteryCircuitBreaker6Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4191))
if mibBuilder.loadTexts: lgpCondId4191BatteryCircuitBreaker6Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4191BatteryCircuitBreaker6Open.setDescription('Battery circuit breaker 6 is open.')
lgpCondId4192BatteryBreaker6OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4192))
if mibBuilder.loadTexts: lgpCondId4192BatteryBreaker6OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4192BatteryBreaker6OpenFailure.setDescription('Battery circuit breaker 6 failed to open.')
lgpCondId4193BatteryBreaker6CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4193))
if mibBuilder.loadTexts: lgpCondId4193BatteryBreaker6CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4193BatteryBreaker6CloseFailure.setDescription('Battery circuit breaker 6 failed to close.')
lgpCondId4194BatteryCircuitBreaker7Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4194))
if mibBuilder.loadTexts: lgpCondId4194BatteryCircuitBreaker7Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4194BatteryCircuitBreaker7Open.setDescription('Battery circuit breaker 7 is open.')
lgpCondId4195BatteryBreaker7OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4195))
if mibBuilder.loadTexts: lgpCondId4195BatteryBreaker7OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4195BatteryBreaker7OpenFailure.setDescription('Battery circuit breaker 7 failed to open.')
lgpCondId4196BatteryBreaker7CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4196))
if mibBuilder.loadTexts: lgpCondId4196BatteryBreaker7CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4196BatteryBreaker7CloseFailure.setDescription('Battery circuit breaker 7 failed to close.')
lgpCondId4197BatteryCircuitBreaker8Open = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4197))
if mibBuilder.loadTexts: lgpCondId4197BatteryCircuitBreaker8Open.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4197BatteryCircuitBreaker8Open.setDescription('Battery circuit breaker 8 is open.')
lgpCondId4198BatteryBreaker8OpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4198))
if mibBuilder.loadTexts: lgpCondId4198BatteryBreaker8OpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4198BatteryBreaker8OpenFailure.setDescription('Battery circuit breaker 8 failed to open.')
lgpCondId4199BatteryBreaker8CloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4199))
if mibBuilder.loadTexts: lgpCondId4199BatteryBreaker8CloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4199BatteryBreaker8CloseFailure.setDescription('Battery circuit breaker 8 failed to close.')
lgpCondId4200BatteryChargingInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4200))
if mibBuilder.loadTexts: lgpCondId4200BatteryChargingInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4200BatteryChargingInhibited.setDescription('Battery charging is inhibited due to an external inhibit signal.')
lgpCondId4213SystemShutdownEPO = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4213))
if mibBuilder.loadTexts: lgpCondId4213SystemShutdownEPO.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4213SystemShutdownEPO.setDescription('System shutdown due to Emergency Power Off (EPO).')
lgpCondId4214SystemShutdownREPO = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4214))
if mibBuilder.loadTexts: lgpCondId4214SystemShutdownREPO.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4214SystemShutdownREPO.setDescription('System shutdown due to Remote Emergency Power Off (REPO).')
lgpCondId4215SystemOutputOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4215))
if mibBuilder.loadTexts: lgpCondId4215SystemOutputOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4215SystemOutputOff.setDescription('The system output is off.')
lgpCondId4216BypassBackfeedDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4216))
if mibBuilder.loadTexts: lgpCondId4216BypassBackfeedDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4216BypassBackfeedDetected.setDescription('The system detected a voltage on the bypass when none was expected.')
lgpCondId4217BypassManualXfrInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4217))
if mibBuilder.loadTexts: lgpCondId4217BypassManualXfrInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4217BypassManualXfrInhibited.setDescription('Manual transfer from inverter to bypass is inhibited - bypass not\n        qualified.')
lgpCondId4218BypassManualRexfrInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4218))
if mibBuilder.loadTexts: lgpCondId4218BypassManualRexfrInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4218BypassManualRexfrInhibited.setDescription('Manual transfer from bypass to inverter is inhibited - inverter\n        output not qualified.')
lgpCondId4219BatteryOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4219))
if mibBuilder.loadTexts: lgpCondId4219BatteryOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4219BatteryOverTemperature.setDescription('A battery temperature sensor is reporting a value above a\n        threshold.')
lgpCondId4220BatteryExternalMonitor1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4220))
if mibBuilder.loadTexts: lgpCondId4220BatteryExternalMonitor1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4220BatteryExternalMonitor1.setDescription('External battery monitor 1 - battery maintenance required.')
lgpCondId4221BatteryExternalMonitor2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4221))
if mibBuilder.loadTexts: lgpCondId4221BatteryExternalMonitor2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4221BatteryExternalMonitor2.setDescription('External battery monitor 2 - battery maintenance required.')
lgpCondId4222BatteryGroundFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4222))
if mibBuilder.loadTexts: lgpCondId4222BatteryGroundFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4222BatteryGroundFault.setDescription('Battery system ground fault amperage exceeds the threshold.')
lgpCondId4229EmergencyPowerOffLatched = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4229))
if mibBuilder.loadTexts: lgpCondId4229EmergencyPowerOffLatched.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4229EmergencyPowerOffLatched.setDescription("System output is off - 'Emergency Power Off (EPO) - latched'\n        requires manual reset.")
lgpCondId4230SystemOutputLowPowerFactor = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4230))
if mibBuilder.loadTexts: lgpCondId4230SystemOutputLowPowerFactor.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4230SystemOutputLowPowerFactor.setDescription('The system output power factor is low, resulting in reduced output\n        capacity.')
lgpCondId4231OutputCurrentExceedsThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4231))
if mibBuilder.loadTexts: lgpCondId4231OutputCurrentExceedsThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4231OutputCurrentExceedsThreshold.setDescription('Output current for one or more phases exceeds a threshold.')
lgpCondId4233InverterFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4233))
if mibBuilder.loadTexts: lgpCondId4233InverterFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4233InverterFailure.setDescription('Inverter failure - inverter output is off.')
lgpCondId4234InverterOverloadPhaseA = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4234))
if mibBuilder.loadTexts: lgpCondId4234InverterOverloadPhaseA.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4234InverterOverloadPhaseA.setDescription('Inverter is operating with an overload on phase A.')
lgpCondId4235InverterOverloadPhaseB = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4235))
if mibBuilder.loadTexts: lgpCondId4235InverterOverloadPhaseB.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4235InverterOverloadPhaseB.setDescription('Inverter is operating with an overload on phase B.')
lgpCondId4236InverterOverloadPhaseC = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4236))
if mibBuilder.loadTexts: lgpCondId4236InverterOverloadPhaseC.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4236InverterOverloadPhaseC.setDescription('Inverter is operating with an overload on phase C.')
lgpCondId4237InverterInhibitExternal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4237))
if mibBuilder.loadTexts: lgpCondId4237InverterInhibitExternal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4237InverterInhibitExternal.setDescription('Restart of the inverter is inhibited by an external signal.')
lgpCondId4238InverterOutBreakerOpenFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4238))
if mibBuilder.loadTexts: lgpCondId4238InverterOutBreakerOpenFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4238InverterOutBreakerOpenFail.setDescription('Inverter output breaker failed to open.')
lgpCondId4239InverterOutBreakerCloseFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4239))
if mibBuilder.loadTexts: lgpCondId4239InverterOutBreakerCloseFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4239InverterOutBreakerCloseFail.setDescription('Inverter output breaker failed to close.')
lgpCondId4270InputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4270))
if mibBuilder.loadTexts: lgpCondId4270InputContact01.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4270InputContact01.setDescription('The external input contact 1.')
lgpCondId4271InputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4271))
if mibBuilder.loadTexts: lgpCondId4271InputContact02.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4271InputContact02.setDescription('The external input contact 2.')
lgpCondId4272InputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4272))
if mibBuilder.loadTexts: lgpCondId4272InputContact03.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4272InputContact03.setDescription('The external input contact 3.')
lgpCondId4273InputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4273))
if mibBuilder.loadTexts: lgpCondId4273InputContact04.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4273InputContact04.setDescription('The external input contact 4.')
lgpCondId4274InputContact05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4274))
if mibBuilder.loadTexts: lgpCondId4274InputContact05.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4274InputContact05.setDescription('The external input contact 5.')
lgpCondId4275InputContact06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4275))
if mibBuilder.loadTexts: lgpCondId4275InputContact06.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4275InputContact06.setDescription('The external input contact 6.')
lgpCondId4276InputContact07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4276))
if mibBuilder.loadTexts: lgpCondId4276InputContact07.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4276InputContact07.setDescription('The external input contact 7.')
lgpCondId4277InputContact08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4277))
if mibBuilder.loadTexts: lgpCondId4277InputContact08.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4277InputContact08.setDescription('The external input contact 8.')
lgpCondId4278InputContact09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4278))
if mibBuilder.loadTexts: lgpCondId4278InputContact09.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4278InputContact09.setDescription('The external input contact 9.')
lgpCondId4279InputContact10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4279))
if mibBuilder.loadTexts: lgpCondId4279InputContact10.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4279InputContact10.setDescription('The external input contact 10.')
lgpCondId4280InputContact11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4280))
if mibBuilder.loadTexts: lgpCondId4280InputContact11.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4280InputContact11.setDescription('The external input contact 11.')
lgpCondId4281InputContact12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4281))
if mibBuilder.loadTexts: lgpCondId4281InputContact12.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4281InputContact12.setDescription('The external input contact 12.')
lgpCondId4282InputContact13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4282))
if mibBuilder.loadTexts: lgpCondId4282InputContact13.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4282InputContact13.setDescription('The external input contact 13.')
lgpCondId4283InputContact14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4283))
if mibBuilder.loadTexts: lgpCondId4283InputContact14.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4283InputContact14.setDescription('The external input contact 14.')
lgpCondId4284InputContact15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4284))
if mibBuilder.loadTexts: lgpCondId4284InputContact15.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4284InputContact15.setDescription('The external input contact 15.')
lgpCondId4285InputContact16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4285))
if mibBuilder.loadTexts: lgpCondId4285InputContact16.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4285InputContact16.setDescription('The external input contact 16.')
lgpCondId4286OutputAmpOverUserLimitPhsA = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4286))
if mibBuilder.loadTexts: lgpCondId4286OutputAmpOverUserLimitPhsA.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4286OutputAmpOverUserLimitPhsA.setDescription('The phase A output has exceeded the user amperage threshold.')
lgpCondId4287OutputAmpOverUserLimitPhsB = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4287))
if mibBuilder.loadTexts: lgpCondId4287OutputAmpOverUserLimitPhsB.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4287OutputAmpOverUserLimitPhsB.setDescription('The phase B output has exceeded the user amperage threshold.')
lgpCondId4288OutputAmpOverUserLimitPhsC = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4288))
if mibBuilder.loadTexts: lgpCondId4288OutputAmpOverUserLimitPhsC.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4288OutputAmpOverUserLimitPhsC.setDescription('The phase C output has exceeded the user amperage threshold.')
lgpCondId4289InverterTransferInhibitExt = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4289))
if mibBuilder.loadTexts: lgpCondId4289InverterTransferInhibitExt.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4289InverterTransferInhibitExt.setDescription('Transfer of critical bus source to inverter is inhibited by an\n        external signal.')
lgpCondId4290InverterShutdownOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4290))
if mibBuilder.loadTexts: lgpCondId4290InverterShutdownOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4290InverterShutdownOverload.setDescription('The inverter has shutdown due to a sustained overload.')
lgpCondId4294InletAirOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4294))
if mibBuilder.loadTexts: lgpCondId4294InletAirOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4294InletAirOverTemperature.setDescription('The inlet air exceeds the maximum temperature threshold.')
lgpCondId4295RectifierFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4295))
if mibBuilder.loadTexts: lgpCondId4295RectifierFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4295RectifierFailure.setDescription('Rectifier failure - rectifier is off.')
lgpCondId4296RectifierOperationInhibitExt = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4296))
if mibBuilder.loadTexts: lgpCondId4296RectifierOperationInhibitExt.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4296RectifierOperationInhibitExt.setDescription('The operation of the rectifier is inhibited by an external signal.')
lgpCondId4297UPSOutputonInverter = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4297))
if mibBuilder.loadTexts: lgpCondId4297UPSOutputonInverter.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4297UPSOutputonInverter.setDescription('The output power is supplied by the inverter.')
lgpCondId4298UPSOutputonBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4298))
if mibBuilder.loadTexts: lgpCondId4298UPSOutputonBypass.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4298UPSOutputonBypass.setDescription('The output power is supplied by the bypass.')
lgpCondId4299OutputLoadonMaintBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4299))
if mibBuilder.loadTexts: lgpCondId4299OutputLoadonMaintBypass.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4299OutputLoadonMaintBypass.setDescription('The output power is supplied by the maintenance bypass.')
lgpCondId4300InternalCommunicationsFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4300))
if mibBuilder.loadTexts: lgpCondId4300InternalCommunicationsFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4300InternalCommunicationsFailure.setDescription('The control has detected a communication failure of a component on\n        the internal communication bus.')
lgpCondId4308DCBusGroundFaultPositive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4308))
if mibBuilder.loadTexts: lgpCondId4308DCBusGroundFaultPositive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4308DCBusGroundFaultPositive.setDescription('A ground fault has been detected on the positive DC Bus link.')
lgpCondId4309DCBusGroundFaultNegative = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4309))
if mibBuilder.loadTexts: lgpCondId4309DCBusGroundFaultNegative.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4309DCBusGroundFaultNegative.setDescription('A ground fault has been detected on the negative DC Bus link.')
lgpCondId4310EquipmentOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4310))
if mibBuilder.loadTexts: lgpCondId4310EquipmentOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4310EquipmentOverTemperature.setDescription('Equipment over temperature summary event.')
lgpCondId4311SystemFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4311))
if mibBuilder.loadTexts: lgpCondId4311SystemFanFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4311SystemFanFailure.setDescription('System fan failure - one or more fans have failed.')
lgpCondId4313PasswordChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4313))
if mibBuilder.loadTexts: lgpCondId4313PasswordChanged.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4313PasswordChanged.setDescription('Password changed.')
lgpCondId4314PowerSupplyFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4314))
if mibBuilder.loadTexts: lgpCondId4314PowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4314PowerSupplyFailure.setDescription('Power supply failure.')
lgpCondId4315OnGenerator = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4315))
if mibBuilder.loadTexts: lgpCondId4315OnGenerator.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4315OnGenerator.setDescription('A generator is supplying the power to the system.')
lgpCondId4316AutoRestartInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4316))
if mibBuilder.loadTexts: lgpCondId4316AutoRestartInProgress.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4316AutoRestartInProgress.setDescription('Auto restart is in progress.')
lgpCondId4317AutoRestartInhibitedExt = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4317))
if mibBuilder.loadTexts: lgpCondId4317AutoRestartInhibitedExt.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4317AutoRestartInhibitedExt.setDescription('Auto restart inhibited due to an external signal.')
lgpCondId4320InitiatedTransfertoBypass = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4320))
if mibBuilder.loadTexts: lgpCondId4320InitiatedTransfertoBypass.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4320InitiatedTransfertoBypass.setDescription('User initiated manual transfer to bypass.')
lgpCondId4321InitiatedTransfertoInverter = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4321))
if mibBuilder.loadTexts: lgpCondId4321InitiatedTransfertoInverter.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4321InitiatedTransfertoInverter.setDescription('User initiated manual transfer to inverter.')
lgpCondId4322BatteryTestPassed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4322))
if mibBuilder.loadTexts: lgpCondId4322BatteryTestPassed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4322BatteryTestPassed.setDescription('Battery test passed.')
lgpCondId4323BatteryTestFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4323))
if mibBuilder.loadTexts: lgpCondId4323BatteryTestFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4323BatteryTestFailed.setDescription('Battery test failed.')
lgpCondId4324BatteryTestManuallyStopped = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4324))
if mibBuilder.loadTexts: lgpCondId4324BatteryTestManuallyStopped.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4324BatteryTestManuallyStopped.setDescription('The battery test was manually stopped prior to completion.')
lgpCondId4325BackfeedBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4325))
if mibBuilder.loadTexts: lgpCondId4325BackfeedBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4325BackfeedBreakerOpen.setDescription('The backfeed breaker is in the open position.')
lgpCondId4341VelocityAuthenticationFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4341))
if mibBuilder.loadTexts: lgpCondId4341VelocityAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4341VelocityAuthenticationFailure.setDescription('Notification of a message rejected by Velocity due to an\n        authentication failure.')
lgpCondId4360ReceptacleOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4360))
if mibBuilder.loadTexts: lgpCondId4360ReceptacleOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4360ReceptacleOverCurrent.setDescription('The system has detected a receptacle over current condition.')
lgpCondId4361ReceptacleUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4361))
if mibBuilder.loadTexts: lgpCondId4361ReceptacleUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4361ReceptacleUnderCurrent.setDescription('The system has detected a receptacle under current condition.')
lgpCondId4382SystemInputCurrentImbalance = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4382))
if mibBuilder.loadTexts: lgpCondId4382SystemInputCurrentImbalance.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4382SystemInputCurrentImbalance.setDescription('System Input Currents are Imbalanced.')
lgpCondId4383BypassStaticSwitchOffExtrnl = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4383))
if mibBuilder.loadTexts: lgpCondId4383BypassStaticSwitchOffExtrnl.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4383BypassStaticSwitchOffExtrnl.setDescription('Bypass static switch is off due to the state of an external signal.')
lgpCondId4384BatteryEoDDisconnect = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4384))
if mibBuilder.loadTexts: lgpCondId4384BatteryEoDDisconnect.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4384BatteryEoDDisconnect.setDescription('Battery disconnect due to end-of-discharge.')
lgpCondId4389SystemOutputFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4389))
if mibBuilder.loadTexts: lgpCondId4389SystemOutputFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4389SystemOutputFault.setDescription('A fault has been detected in the system output.')
lgpCondId4390InverterOffExternal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4390))
if mibBuilder.loadTexts: lgpCondId4390InverterOffExternal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4390InverterOffExternal.setDescription('Inverter is off (operation is inhibited) due to external signal\n        state.')
lgpCondId4391InverterStaticSwitchSCRShort = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4391))
if mibBuilder.loadTexts: lgpCondId4391InverterStaticSwitchSCRShort.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4391InverterStaticSwitchSCRShort.setDescription('The system has detected a short across one or more inverter static\n        switch Silicon Controlled Rectifiers (SCR).')
lgpCondId4392TemperatureSensorError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4392))
if mibBuilder.loadTexts: lgpCondId4392TemperatureSensorError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4392TemperatureSensorError.setDescription('One or more temperature sensors cannot provide a valid temperature\n        reading (i.e. sensor failure, wiring failure, sense circuit\n        failure, etc).')
lgpCondId4406BranchOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4406))
if mibBuilder.loadTexts: lgpCondId4406BranchOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4406BranchOverCurrent.setDescription('The system has detected a module over current condition.')
lgpCondId4407BranchUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4407))
if mibBuilder.loadTexts: lgpCondId4407BranchUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4407BranchUnderCurrent.setDescription('The system has detected a module under current condition.')
lgpCondId4416BranchOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4416))
if mibBuilder.loadTexts: lgpCondId4416BranchOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4416BranchOverCurrent.setDescription('The system has detected a module over current condition.')
lgpCondId4417BranchUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4417))
if mibBuilder.loadTexts: lgpCondId4417BranchUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4417BranchUnderCurrent.setDescription('The system has detected a module under current condition.')
lgpCondId4421BranchFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4421))
if mibBuilder.loadTexts: lgpCondId4421BranchFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4421BranchFailure.setDescription('One or more conditions indicate a Branch Receptacle Module failure\n        , service is required.')
lgpCondId4436PDUOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4436))
if mibBuilder.loadTexts: lgpCondId4436PDUOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4436PDUOverCurrent.setDescription('The system has detected a module over current condition.')
lgpCondId4437PDUUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4437))
if mibBuilder.loadTexts: lgpCondId4437PDUUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4437PDUUnderCurrent.setDescription('The system has detected a module under current condition.')
lgpCondId4438SystemInternalTemperatureRise = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4438))
if mibBuilder.loadTexts: lgpCondId4438SystemInternalTemperatureRise.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4438SystemInternalTemperatureRise.setDescription('Excessive temperature rise internal to the system (i.e. difference\n        between the output versus input temperature is too large).')
lgpCondId4439AutomaticRestartFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4439))
if mibBuilder.loadTexts: lgpCondId4439AutomaticRestartFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4439AutomaticRestartFailed.setDescription('Automatic restart failed.')
lgpCondId4440FuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4440))
if mibBuilder.loadTexts: lgpCondId4440FuseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4440FuseFailure.setDescription('A summary event indicating one or more fuse failures.')
lgpCondId4441SystemControllerError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4441))
if mibBuilder.loadTexts: lgpCondId4441SystemControllerError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4441SystemControllerError.setDescription('System controller internal error.')
lgpCondId4442SystemBreakersOpenFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4442))
if mibBuilder.loadTexts: lgpCondId4442SystemBreakersOpenFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4442SystemBreakersOpenFailure.setDescription('One or more breakers in the system failed to open.')
lgpCondId4448PDUOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4448))
if mibBuilder.loadTexts: lgpCondId4448PDUOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4448PDUOverCurrent.setDescription('The system has detected a module over current condition.')
lgpCondId4449PDUUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4449))
if mibBuilder.loadTexts: lgpCondId4449PDUUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4449PDUUnderCurrent.setDescription('The system has detected a module under current condition.')
lgpCondId4468PDUOverCurrentL1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4468))
if mibBuilder.loadTexts: lgpCondId4468PDUOverCurrentL1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4468PDUOverCurrentL1.setDescription('The system has detected a module over current condition on line 1.')
lgpCondId4469PDUOverCurrentL2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4469))
if mibBuilder.loadTexts: lgpCondId4469PDUOverCurrentL2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4469PDUOverCurrentL2.setDescription('The system has detected a module over current condition on line 2.')
lgpCondId4470PDUOverCurrentL3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4470))
if mibBuilder.loadTexts: lgpCondId4470PDUOverCurrentL3.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4470PDUOverCurrentL3.setDescription('The system has detected a module over current condition on line 3.')
lgpCondId4471PDUUnderCurrentL1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4471))
if mibBuilder.loadTexts: lgpCondId4471PDUUnderCurrentL1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4471PDUUnderCurrentL1.setDescription('The system has detected a module under current condition on line 1.')
lgpCondId4472PDUUnderCurrentL2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4472))
if mibBuilder.loadTexts: lgpCondId4472PDUUnderCurrentL2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4472PDUUnderCurrentL2.setDescription('The system has detected a module under current condition on line 2.')
lgpCondId4473PDUUnderCurrentL3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4473))
if mibBuilder.loadTexts: lgpCondId4473PDUUnderCurrentL3.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4473PDUUnderCurrentL3.setDescription('The system has detected a module under current condition on line 3.')
lgpCondId4492ReceptaclePowerStateOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4492))
if mibBuilder.loadTexts: lgpCondId4492ReceptaclePowerStateOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4492ReceptaclePowerStateOn.setDescription('The receptacle power state changed to the ON state.')
lgpCondId4493ReceptaclePowerStateOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4493))
if mibBuilder.loadTexts: lgpCondId4493ReceptaclePowerStateOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4493ReceptaclePowerStateOff.setDescription('The receptacle power state changed to the OFF state.')
lgpCondId4494BranchBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4494))
if mibBuilder.loadTexts: lgpCondId4494BranchBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4494BranchBreakerOpen.setDescription("The Branch Receptacle Module's input breaker is open.")
lgpCondId4495DeviceConfigurationChange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4495))
if mibBuilder.loadTexts: lgpCondId4495DeviceConfigurationChange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4495DeviceConfigurationChange.setDescription('Device Configuration Change.')
lgpCondId4496BasicDisplayModuleRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4496))
if mibBuilder.loadTexts: lgpCondId4496BasicDisplayModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4496BasicDisplayModuleRemoved.setDescription('Basic Display Module Removed.')
lgpCondId4497BasicDisplayModuleDiscovered = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4497))
if mibBuilder.loadTexts: lgpCondId4497BasicDisplayModuleDiscovered.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4497BasicDisplayModuleDiscovered.setDescription('Basic Display Module Discovered.')
lgpCondId4500PDUOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4500))
if mibBuilder.loadTexts: lgpCondId4500PDUOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4500PDUOverCurrent.setDescription('The system has detected a power module over current condition.')
lgpCondId4501PDUUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4501))
if mibBuilder.loadTexts: lgpCondId4501PDUUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4501PDUUnderCurrent.setDescription('The system has detected a power module under current condition.')
lgpCondId4502PDUFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4502))
if mibBuilder.loadTexts: lgpCondId4502PDUFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4502PDUFailure.setDescription('One or more conditions indicate a power module failure, service is\n        required.')
lgpCondId4503PDUCommunicationFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4503))
if mibBuilder.loadTexts: lgpCondId4503PDUCommunicationFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4503PDUCommunicationFail.setDescription('Internal communications failure with the Power Module.')
lgpCondId4504BranchRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4504))
if mibBuilder.loadTexts: lgpCondId4504BranchRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4504BranchRemoved.setDescription('Branch Receptacle Module Removed.')
lgpCondId4505BranchDiscovered = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4505))
if mibBuilder.loadTexts: lgpCondId4505BranchDiscovered.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4505BranchDiscovered.setDescription('Branch Receptacle Module Discovered.')
lgpCondId4506BranchOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4506))
if mibBuilder.loadTexts: lgpCondId4506BranchOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4506BranchOverCurrent.setDescription('The system has detected a Branch Receptacle Module over current\n        condition.')
lgpCondId4507BranchCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4507))
if mibBuilder.loadTexts: lgpCondId4507BranchCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4507BranchCurrent.setDescription('The system has detected a Branch Receptacle Module under current\n        condition.')
lgpCondId4508ReceptacleLoadRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4508))
if mibBuilder.loadTexts: lgpCondId4508ReceptacleLoadRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4508ReceptacleLoadRemoved.setDescription("The receptacle's load stopped drawing power.")
lgpCondId4509ReceptacleLoadAdded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4509))
if mibBuilder.loadTexts: lgpCondId4509ReceptacleLoadAdded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4509ReceptacleLoadAdded.setDescription("The receptacle's load started to draw power.")
lgpCondId4523ModuleRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4523))
if mibBuilder.loadTexts: lgpCondId4523ModuleRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4523ModuleRemoved.setDescription('Module Removed.')
lgpCondId4524ModuleAdded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4524))
if mibBuilder.loadTexts: lgpCondId4524ModuleAdded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4524ModuleAdded.setDescription('Module Added.')
lgpCondId4550FirmwareUpdateRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4550))
if mibBuilder.loadTexts: lgpCondId4550FirmwareUpdateRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4550FirmwareUpdateRequired.setDescription('Module compatibility error requires a system firmware update to\n        resolve.')
lgpCondId4551GenericTestEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4551))
if mibBuilder.loadTexts: lgpCondId4551GenericTestEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4551GenericTestEvent.setDescription('A generic test event designed to evaluate system handling of\n        events.')
lgpCondId4580OverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4580))
if mibBuilder.loadTexts: lgpCondId4580OverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4580OverTemperature.setDescription('An over temperature condition was detected.')
lgpCondId4581UnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4581))
if mibBuilder.loadTexts: lgpCondId4581UnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4581UnderTemperature.setDescription('An under temperature condition was detected.')
lgpCondId4588OverRelativeHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4588))
if mibBuilder.loadTexts: lgpCondId4588OverRelativeHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4588OverRelativeHumidity.setDescription('An over relative humidity condition was detected.')
lgpCondId4589UnderRelativeHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4589))
if mibBuilder.loadTexts: lgpCondId4589UnderRelativeHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4589UnderRelativeHumidity.setDescription('An under relative humidity condition was detected.')
lgpCondId4601ExternalAirSensorAOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4601))
if mibBuilder.loadTexts: lgpCondId4601ExternalAirSensorAOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4601ExternalAirSensorAOverTemperature.setDescription('[Ext Air Sensor A Temperature] has exceeded [External Air Over\n        Temp Threshold].')
lgpCondId4604ExternalAirSensorBOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4604))
if mibBuilder.loadTexts: lgpCondId4604ExternalAirSensorBOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4604ExternalAirSensorBOverTemperature.setDescription('[Ext Air Sensor B Temperature] has exceeded [External Air Over\n        Temp Threshold].')
lgpCondId4608ExtAirSensorAUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4608))
if mibBuilder.loadTexts: lgpCondId4608ExtAirSensorAUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4608ExtAirSensorAUnderTemperature.setDescription('[Ext Air Sensor A Temperature] has dropped below [Ext Air Under\n        Temp Threshold].')
lgpCondId4611ExtAirSensorBUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4611))
if mibBuilder.loadTexts: lgpCondId4611ExtAirSensorBUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4611ExtAirSensorBUnderTemperature.setDescription('[Ext Air Sensor B Temperature] has dropped below [Ext Air Under\n        Temp Threshold].')
lgpCondId4615ExtDewPointOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4615))
if mibBuilder.loadTexts: lgpCondId4615ExtDewPointOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4615ExtDewPointOverTemperature.setDescription('At least one dew point temperature reading ([Ext Air Sensor A Dew\n        Point Temp], [Ext Air Sensor B Dew Point Temp]...) has exceeded\n        [Ext Dew Point Over Temp Threshold].')
lgpCondId4618ExternalAirSensorAIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4618))
if mibBuilder.loadTexts: lgpCondId4618ExternalAirSensorAIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4618ExternalAirSensorAIssue.setDescription('The external air sensor A is disconnected or the signal is out of\n        range.')
lgpCondId4621ExternalAirSensorBIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4621))
if mibBuilder.loadTexts: lgpCondId4621ExternalAirSensorBIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4621ExternalAirSensorBIssue.setDescription('The external air sensor B is disconnected or the signal is out of\n        range.')
lgpCondId4626SupplyChilledWaterOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4626))
if mibBuilder.loadTexts: lgpCondId4626SupplyChilledWaterOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4626SupplyChilledWaterOverTemp.setDescription('[Supply Fluid Temperature] has exceeded [High Supply Fluid\n        Temperature Threshold].')
lgpCondId4629SupplyChilledWaterTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4629))
if mibBuilder.loadTexts: lgpCondId4629SupplyChilledWaterTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4629SupplyChilledWaterTempSensorIssue.setDescription('The supply chilled water temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId4634SupplyRefrigerantOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4634))
if mibBuilder.loadTexts: lgpCondId4634SupplyRefrigerantOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4634SupplyRefrigerantOverTemp.setDescription('Event that is activated when [Supply Refrigerant Temperature]\n        exceeds [Supply Refrig Over Temp Threshold]. The event is\n        deactivated when the temperature drops below the threshold.')
lgpCondId4637SupplyRefrigerantUnderTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4637))
if mibBuilder.loadTexts: lgpCondId4637SupplyRefrigerantUnderTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4637SupplyRefrigerantUnderTemp.setDescription('[Supply Refrigerant Temperature] has dropped below a specified\n        threshold.')
lgpCondId4640SupplyRefrigerantTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4640))
if mibBuilder.loadTexts: lgpCondId4640SupplyRefrigerantTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4640SupplyRefrigerantTempSensorIssue.setDescription('The supply refrigeramt temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId4645SupplyFluidOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4645))
if mibBuilder.loadTexts: lgpCondId4645SupplyFluidOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4645SupplyFluidOverTemp.setDescription('[Supply Fluid Temperature] has exceeded [Supply Fluid Over Temp\n        Threshold].')
lgpCondId4648SupplyFluidUnderTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4648))
if mibBuilder.loadTexts: lgpCondId4648SupplyFluidUnderTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4648SupplyFluidUnderTemp.setDescription('[Supply Fluid Temperature] has dropped below a specified threshold.')
lgpCondId4651SupplyFluidTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4651))
if mibBuilder.loadTexts: lgpCondId4651SupplyFluidTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4651SupplyFluidTempSensorIssue.setDescription('The supply fluid temperature sensor is disconnected or the signal\n        is out of range.')
lgpCondId4656Pump1LossofFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4656))
if mibBuilder.loadTexts: lgpCondId4656Pump1LossofFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4656Pump1LossofFlow.setDescription('Loss of flow is detected in pump 1. The loss of flow condition\n        occurs when no differential pressure is detected across the pump.')
lgpCondId4659Pump2LossofFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4659))
if mibBuilder.loadTexts: lgpCondId4659Pump2LossofFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4659Pump2LossofFlow.setDescription('Loss of flow is detected in pump 2. The loss of flow condition\n        occurs when no differential pressure is detected across the pump.')
lgpCondId4662PumpShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4662))
if mibBuilder.loadTexts: lgpCondId4662PumpShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4662PumpShortCycle.setDescription('Pumps have short cycled. A short cycle is defined as turning on\n        and off a number of times over a set time period.')
lgpCondId4669Compressor1AHighHeadPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4669))
if mibBuilder.loadTexts: lgpCondId4669Compressor1AHighHeadPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4669Compressor1AHighHeadPressure.setDescription('Compressor 1A high head pressure.')
lgpCondId4672Compressor1BHighHeadPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4672))
if mibBuilder.loadTexts: lgpCondId4672Compressor1BHighHeadPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4672Compressor1BHighHeadPressure.setDescription('Compressor 1B high head pressure.')
lgpCondId4675Compressor2AHighHeadPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4675))
if mibBuilder.loadTexts: lgpCondId4675Compressor2AHighHeadPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4675Compressor2AHighHeadPressure.setDescription('Compressor 2A high head pressure.')
lgpCondId4678Compressor2BHighHeadPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4678))
if mibBuilder.loadTexts: lgpCondId4678Compressor2BHighHeadPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4678Compressor2BHighHeadPressure.setDescription('Compressor 2B high head pressure.')
lgpCondId4681Compressor1AShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4681))
if mibBuilder.loadTexts: lgpCondId4681Compressor1AShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4681Compressor1AShortCycle.setDescription('Compressor 1A short cycle. A short cycle is defined as turning on\n        and off a number of times over a set time period.')
lgpCondId4684Compressor1BShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4684))
if mibBuilder.loadTexts: lgpCondId4684Compressor1BShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4684Compressor1BShortCycle.setDescription('Compressor 1B short cycle. A short cycle is defined as turning on\n        and off a number of times over a set time period.')
lgpCondId4687Compressor2AShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4687))
if mibBuilder.loadTexts: lgpCondId4687Compressor2AShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4687Compressor2AShortCycle.setDescription('Compressor 2A short cycle. A short cycle is defined as turning on\n        and off a number of times over a set time period.')
lgpCondId4690Compressor2BShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4690))
if mibBuilder.loadTexts: lgpCondId4690Compressor2BShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4690Compressor2BShortCycle.setDescription('Compressor 2B short cycle. A short cycle is defined as turning on\n        and off a number of times over a set time period.')
lgpCondId4693Tandem1LowSuctionPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4693))
if mibBuilder.loadTexts: lgpCondId4693Tandem1LowSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4693Tandem1LowSuctionPressure.setDescription("'Tandem compressors' 1 low suction pressure.")
lgpCondId4696Tandem2LowSuctionPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4696))
if mibBuilder.loadTexts: lgpCondId4696Tandem2LowSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4696Tandem2LowSuctionPressure.setDescription("'Tandem compressors' 2 low suction pressure.")
lgpCondId4703ChilledWaterControlValvePosition = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4703))
if mibBuilder.loadTexts: lgpCondId4703ChilledWaterControlValvePosition.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4703ChilledWaterControlValvePosition.setDescription('Chilled water valve out of position. Chilled water control valve\n        position does not match expected value.')
lgpCondId4711SystemCondensationDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4711))
if mibBuilder.loadTexts: lgpCondId4711SystemCondensationDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4711SystemCondensationDetected.setDescription('System condensation detected.')
lgpCondId4714ShutdownLossOfPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4714))
if mibBuilder.loadTexts: lgpCondId4714ShutdownLossOfPower.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4714ShutdownLossOfPower.setDescription('System lost power. This event becomes active when the unit is\n        powered on following an unexpected loss of power.')
lgpCondId4720SmokeDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4720))
if mibBuilder.loadTexts: lgpCondId4720SmokeDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4720SmokeDetected.setDescription('Smoke detected.')
lgpCondId4723WaterUnderFloor = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4723))
if mibBuilder.loadTexts: lgpCondId4723WaterUnderFloor.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4723WaterUnderFloor.setDescription('Water under the floor is detected.')
lgpCondId4726ServiceRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4726))
if mibBuilder.loadTexts: lgpCondId4726ServiceRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4726ServiceRequired.setDescription('Unit requires servicing.')
lgpCondId4729FanIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4729))
if mibBuilder.loadTexts: lgpCondId4729FanIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4729FanIssue.setDescription('One or more fans are not operating within their operational\n        parameters.')
lgpCondId4732ReceptacleLoadDropped = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4732))
if mibBuilder.loadTexts: lgpCondId4732ReceptacleLoadDropped.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4732ReceptacleLoadDropped.setDescription("The receptacle's load is not drawing power.")
lgpCondId4740BatteryAutomaticTestInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4740))
if mibBuilder.loadTexts: lgpCondId4740BatteryAutomaticTestInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4740BatteryAutomaticTestInhibited.setDescription('Automatic (scheduled) battery tests are inhibited.')
lgpCondId4741BatterySelfTest = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4741))
if mibBuilder.loadTexts: lgpCondId4741BatterySelfTest.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4741BatterySelfTest.setDescription('Battery self test is in progress.')
lgpCondId4742BatteryLowShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4742))
if mibBuilder.loadTexts: lgpCondId4742BatteryLowShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4742BatteryLowShutdown.setDescription('Battery disconnect due to end-of-discharge.')
lgpCondId4747EquipmentTemperatureSensorFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4747))
if mibBuilder.loadTexts: lgpCondId4747EquipmentTemperatureSensorFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4747EquipmentTemperatureSensorFail.setDescription('One or more temperature sensors report a temperature outside of\n        the range of expected operation.')
lgpCondId4749SystemFanFailureRedundant = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4749))
if mibBuilder.loadTexts: lgpCondId4749SystemFanFailureRedundant.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4749SystemFanFailureRedundant.setDescription('Redundant system fan failure.')
lgpCondId4750MultipleFanFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4750))
if mibBuilder.loadTexts: lgpCondId4750MultipleFanFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4750MultipleFanFailure.setDescription('Multiple fan failure.')
lgpCondId4753MainControllerFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4753))
if mibBuilder.loadTexts: lgpCondId4753MainControllerFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4753MainControllerFault.setDescription('A Main Controller fault has been detected.')
lgpCondId4754SystemBreakersCloseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4754))
if mibBuilder.loadTexts: lgpCondId4754SystemBreakersCloseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4754SystemBreakersCloseFailure.setDescription('One or more breakers in the system failed to close.')
lgpCondId4755InputFilterCycleLock = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4755))
if mibBuilder.loadTexts: lgpCondId4755InputFilterCycleLock.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4755InputFilterCycleLock.setDescription('The input filter disconnect is open due to exceeding the maximum\n        number of cycles.')
lgpCondId4756ServiceCodeActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4756))
if mibBuilder.loadTexts: lgpCondId4756ServiceCodeActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4756ServiceCodeActive.setDescription('Service code is running.')
lgpCondId4757LBSActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4757))
if mibBuilder.loadTexts: lgpCondId4757LBSActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4757LBSActive.setDescription('The Load Bus Sync option is active.')
lgpCondId4758LBSInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4758))
if mibBuilder.loadTexts: lgpCondId4758LBSInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4758LBSInhibited.setDescription('The system has detected that conditions to perform Load Bus Sync\n        are not satisfied.')
lgpCondId4759LeadingPowerFactor = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4759))
if mibBuilder.loadTexts: lgpCondId4759LeadingPowerFactor.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4759LeadingPowerFactor.setDescription('The leading output Power Factor has fallen below a specified value.')
lgpCondId4760ControlsResetRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4760))
if mibBuilder.loadTexts: lgpCondId4760ControlsResetRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4760ControlsResetRequired.setDescription('A controls reset is required due to one or more critical settings\n        changing.')
lgpCondId4823ParallelCommWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4823))
if mibBuilder.loadTexts: lgpCondId4823ParallelCommWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4823ParallelCommWarning.setDescription('Parallel communication bus warning.')
lgpCondId4824SystemCommFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4824))
if mibBuilder.loadTexts: lgpCondId4824SystemCommFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4824SystemCommFail.setDescription('Failure of a device on the multi-module system communication bus.')
lgpCondId4825LossofRedundancy = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4825))
if mibBuilder.loadTexts: lgpCondId4825LossofRedundancy.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4825LossofRedundancy.setDescription("The multi-module collection doesn't have enough modules to satisfy\n        the redundancy configuration.")
lgpCondId4826BPSSStartupInhibit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4826))
if mibBuilder.loadTexts: lgpCondId4826BPSSStartupInhibit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4826BPSSStartupInhibit.setDescription('The Bypass Static Switch startup is inhibited.')
lgpCondId4827MMSTransferInhibit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4827))
if mibBuilder.loadTexts: lgpCondId4827MMSTransferInhibit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4827MMSTransferInhibit.setDescription('The critical load can not be manually transferred from inverter to\n        bypass.')
lgpCondId4828MMSRetransferInhibit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4828))
if mibBuilder.loadTexts: lgpCondId4828MMSRetransferInhibit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4828MMSRetransferInhibit.setDescription('The critical load can not be manually retransferred from bypass to\n        inverter.')
lgpCondId4830MMSLossofSyncPulse = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4830))
if mibBuilder.loadTexts: lgpCondId4830MMSLossofSyncPulse.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4830MMSLossofSyncPulse.setDescription('Multi-module system loss of sync pulse.')
lgpCondId4831MMSOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4831))
if mibBuilder.loadTexts: lgpCondId4831MMSOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4831MMSOverload.setDescription('Multi-module system overload.')
lgpCondId4834MMSOnBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4834))
if mibBuilder.loadTexts: lgpCondId4834MMSOnBattery.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4834MMSOnBattery.setDescription('The multi-module system is on battery.')
lgpCondId4835MMSLowBatteryWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4835))
if mibBuilder.loadTexts: lgpCondId4835MMSLowBatteryWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4835MMSLowBatteryWarning.setDescription('Multi-module system low battery warning.')
lgpCondId4906LowAmbientTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4906))
if mibBuilder.loadTexts: lgpCondId4906LowAmbientTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4906LowAmbientTemperature.setDescription('The system has detected a low ambient temperature condition.')
lgpCondId4907HighAmbientTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4907))
if mibBuilder.loadTexts: lgpCondId4907HighAmbientTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4907HighAmbientTemperature.setDescription('The system has detected a high ambient temperature condition.')
lgpCondId4908LowOverallVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4908))
if mibBuilder.loadTexts: lgpCondId4908LowOverallVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4908LowOverallVoltage.setDescription('The system has detected a low battery string overall voltage\n        condition.')
lgpCondId4909HighOverallVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4909))
if mibBuilder.loadTexts: lgpCondId4909HighOverallVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4909HighOverallVoltage.setDescription('The system has detected a high battery string overall voltage\n        condition.')
lgpCondId4910HighBatteryStringCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4910))
if mibBuilder.loadTexts: lgpCondId4910HighBatteryStringCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4910HighBatteryStringCurrent.setDescription('The system has detected a high battery string current condition.')
lgpCondId4911LowBatteryStringFloatCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4911))
if mibBuilder.loadTexts: lgpCondId4911LowBatteryStringFloatCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4911LowBatteryStringFloatCurrent.setDescription('The system has detected a low battery string float current\n        condition.')
lgpCondId4912HighBatteryStringFloatCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4912))
if mibBuilder.loadTexts: lgpCondId4912HighBatteryStringFloatCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4912HighBatteryStringFloatCurrent.setDescription('The system has detected a high battery string float current\n        condition.')
lgpCondId4913HighBatteryStringRippleCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4913))
if mibBuilder.loadTexts: lgpCondId4913HighBatteryStringRippleCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4913HighBatteryStringRippleCurrent.setDescription('The system has detected a high battery string ripple current\n        condition.')
lgpCondId4914BatteryStringDischargeDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4914))
if mibBuilder.loadTexts: lgpCondId4914BatteryStringDischargeDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4914BatteryStringDischargeDetected.setDescription('The system has detected a battery string discharge condition.')
lgpCondId4915MaximumDischargeTimeExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4915))
if mibBuilder.loadTexts: lgpCondId4915MaximumDischargeTimeExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4915MaximumDischargeTimeExceeded.setDescription('The system has detected an excessive discharge time condition.')
lgpCondId4916DischargeLowOverallVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4916))
if mibBuilder.loadTexts: lgpCondId4916DischargeLowOverallVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4916DischargeLowOverallVoltage.setDescription('The system has detected a low battery string overall voltage\n        condition during a discharge.')
lgpCondId4917DischargeLowCellVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4917))
if mibBuilder.loadTexts: lgpCondId4917DischargeLowCellVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4917DischargeLowCellVoltage.setDescription('The system has detected a low cell voltage condition during a\n        discharge.')
lgpCondId4918DischargeHighBatteryStringCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4918))
if mibBuilder.loadTexts: lgpCondId4918DischargeHighBatteryStringCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4918DischargeHighBatteryStringCurrent.setDescription('The system has detected a high battery string current condition\n        during a discharge.')
lgpCondId4919ExcessiveCelltoCellTemperatureDeviation = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4919))
if mibBuilder.loadTexts: lgpCondId4919ExcessiveCelltoCellTemperatureDeviation.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4919ExcessiveCelltoCellTemperatureDeviation.setDescription('The system has detected an excessive cell to cell temperature\n        deviation condition.')
lgpCondId4920ExcessiveCelltoAmbientTemperatureDeviation = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4920))
if mibBuilder.loadTexts: lgpCondId4920ExcessiveCelltoAmbientTemperatureDeviation.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4920ExcessiveCelltoAmbientTemperatureDeviation.setDescription('The system has detected an excessive cell to ambient temperature\n        deviation condition.')
lgpCondId4964LowCellVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4964))
if mibBuilder.loadTexts: lgpCondId4964LowCellVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4964LowCellVoltage.setDescription('The system has detected a low cell voltage condition.')
lgpCondId4965HighCellVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4965))
if mibBuilder.loadTexts: lgpCondId4965HighCellVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4965HighCellVoltage.setDescription('The system has detected a high cell voltage condition.')
lgpCondId4966LowCellTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4966))
if mibBuilder.loadTexts: lgpCondId4966LowCellTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4966LowCellTemperature.setDescription('The system has detected a low cell temperature condition.')
lgpCondId4967HighCellTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4967))
if mibBuilder.loadTexts: lgpCondId4967HighCellTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4967HighCellTemperature.setDescription('The system has detected a high cell temperature condition.')
lgpCondId4968LowInternalResistance = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4968))
if mibBuilder.loadTexts: lgpCondId4968LowInternalResistance.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4968LowInternalResistance.setDescription('The system has detected a low internal resistance condition.')
lgpCondId4969HighInternalResistance = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4969))
if mibBuilder.loadTexts: lgpCondId4969HighInternalResistance.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4969HighInternalResistance.setDescription('The system has detected a high internal resistance condition.')
lgpCondId4970HighIntercellResistance = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4970))
if mibBuilder.loadTexts: lgpCondId4970HighIntercellResistance.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4970HighIntercellResistance.setDescription('The system has detected a high intercell resistance condition.')
lgpCondId4978IntertierResistanceHigh = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4978))
if mibBuilder.loadTexts: lgpCondId4978IntertierResistanceHigh.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4978IntertierResistanceHigh.setDescription('The system has detected a high intertier resistance condition.')
lgpCondId4980SupplyChilledWaterLossofFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4980))
if mibBuilder.loadTexts: lgpCondId4980SupplyChilledWaterLossofFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4980SupplyChilledWaterLossofFlow.setDescription('Supply chilled water or glycol flow is too low.')
lgpCondId4983SupplyRefrigOverTempBand1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4983))
if mibBuilder.loadTexts: lgpCondId4983SupplyRefrigOverTempBand1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4983SupplyRefrigOverTempBand1.setDescription('[Supply Refrigerant Temperature] is above the upper threshold\n        specified by [Supply Refrig Temp Band 1].')
lgpCondId4986SupplyRefrigUnderTempBand1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4986))
if mibBuilder.loadTexts: lgpCondId4986SupplyRefrigUnderTempBand1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4986SupplyRefrigUnderTempBand1.setDescription('[Supply Refrigerant Temperature] is below the lower threshold\n        specified by [Supply Refrig Temp Band 1].')
lgpCondId4990SupplyRefrigOverTempBand2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4990))
if mibBuilder.loadTexts: lgpCondId4990SupplyRefrigOverTempBand2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4990SupplyRefrigOverTempBand2.setDescription('[Supply Refrigerant Temperature] is above the upper threshold\n        specified by [Supply Refrig Temp Band 2].')
lgpCondId4993SupplyRefrigUnderTempBand2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4993))
if mibBuilder.loadTexts: lgpCondId4993SupplyRefrigUnderTempBand2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4993SupplyRefrigUnderTempBand2.setDescription('[Supply Refrigerant Temperature] is below the lower threshold\n        specified by [Supply Refrig Temp Band 2].')
lgpCondId4996Inverter1ShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4996))
if mibBuilder.loadTexts: lgpCondId4996Inverter1ShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4996Inverter1ShortCycle.setDescription('Inverter for pump 1 has short cycled and is temporarily locked out\n        from further operation to protect from thermal overload. A short\n        cycle is defined as powering on and off a number of times over a\n        set time period.')
lgpCondId4999Inverter2ShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 4999))
if mibBuilder.loadTexts: lgpCondId4999Inverter2ShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId4999Inverter2ShortCycle.setDescription('Inverter for pump 2 has short cycled and is temporarily locked out\n        from further operation to protect from thermal overload. A short\n        cycle is defined as powering on and off a number of times over a\n        set time period.')
lgpCondId5015SupplyAirOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5015))
if mibBuilder.loadTexts: lgpCondId5015SupplyAirOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5015SupplyAirOverTemperature.setDescription('[Supply Air Temperature] has exceeded [High Supply Air Temperature\n        Threshold].')
lgpCondId5019SupplyAirUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5019))
if mibBuilder.loadTexts: lgpCondId5019SupplyAirUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5019SupplyAirUnderTemperature.setDescription('[Supply Air Temperature] has dropped below [Low Supply Air\n        Temperature Threshold].')
lgpCondId5023ReturnAirOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5023))
if mibBuilder.loadTexts: lgpCondId5023ReturnAirOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5023ReturnAirOverTemperature.setDescription('[Return Air Temperature] has exceeded [High Return Air Temperature\n        Threshold].')
lgpCondId5026SupplyAirSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5026))
if mibBuilder.loadTexts: lgpCondId5026SupplyAirSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5026SupplyAirSensorIssue.setDescription('The air sensor at the outlet of the unit is disconnected or the\n        signal is out of range.')
lgpCondId5034HighReturnHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5034))
if mibBuilder.loadTexts: lgpCondId5034HighReturnHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5034HighReturnHumidity.setDescription('[Return Humidity] has exceeded [High Return Humidity Threshold].')
lgpCondId5036LowReturnHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5036))
if mibBuilder.loadTexts: lgpCondId5036LowReturnHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5036LowReturnHumidity.setDescription('[Return Humidity] has dropped below [Low Return Humidity\n        Threshold].')
lgpCondId5037HumidifierHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5037))
if mibBuilder.loadTexts: lgpCondId5037HumidifierHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5037HumidifierHoursExceeded.setDescription('Operating hours for the humidifier have exceeded the threshold.')
lgpCondId5038DehumidifierHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5038))
if mibBuilder.loadTexts: lgpCondId5038DehumidifierHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5038DehumidifierHoursExceeded.setDescription('Operating hours for the dehumidifier have exceeded the threshold.')
lgpCondId5039HumidifierUnderCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5039))
if mibBuilder.loadTexts: lgpCondId5039HumidifierUnderCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5039HumidifierUnderCurrent.setDescription('The electrical current to the humidifier has dropped below its\n        lower threshold.')
lgpCondId5040HumidifierOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5040))
if mibBuilder.loadTexts: lgpCondId5040HumidifierOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5040HumidifierOverCurrent.setDescription('The electrical current to the humidifier has exceeded its upper\n        threshold.')
lgpCondId5041HumidifierLowWater = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5041))
if mibBuilder.loadTexts: lgpCondId5041HumidifierLowWater.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5041HumidifierLowWater.setDescription('The water level in the humidifier has dropped below its threshold.')
lgpCondId5042HumidifierCylinderWorn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5042))
if mibBuilder.loadTexts: lgpCondId5042HumidifierCylinderWorn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5042HumidifierCylinderWorn.setDescription('Humidifier cylinder is not operating properly and needs to be\n        replaced.')
lgpCondId5043HumidifierIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5043))
if mibBuilder.loadTexts: lgpCondId5043HumidifierIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5043HumidifierIssue.setDescription('Humidifier issue detected, causing it to be locked out.')
lgpCondId5044ExtHumidifierLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5044))
if mibBuilder.loadTexts: lgpCondId5044ExtHumidifierLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5044ExtHumidifierLockout.setDescription('The humidifier is shut down and disabled by an external input\n        signal.')
lgpCondId5045HumidifierControlBoardNotDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5045))
if mibBuilder.loadTexts: lgpCondId5045HumidifierControlBoardNotDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5045HumidifierControlBoardNotDetected.setDescription('Humidifier control board is required to be connected, but no\n        signal is detected.')
lgpCondId5046ReturnHumidityOutOfProportionalBand = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5046))
if mibBuilder.loadTexts: lgpCondId5046ReturnHumidityOutOfProportionalBand.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5046ReturnHumidityOutOfProportionalBand.setDescription('[Return Humidity] has exceeded the upper limit of\n        [Dehumidification Proportional Band], or has dropped below the\n        lower limit of [Humidification Proportional Band] ], for an\n        extended period of time.')
lgpCondId5053LossofAirFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5053))
if mibBuilder.loadTexts: lgpCondId5053LossofAirFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5053LossofAirFlow.setDescription('No air flow through the unit due to failure of all fans.')
lgpCondId5054FanHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5054))
if mibBuilder.loadTexts: lgpCondId5054FanHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5054FanHoursExceeded.setDescription('Operating hours for the unit blower fan have exceeded the\n        threshold.')
lgpCondId5055TopFanIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5055))
if mibBuilder.loadTexts: lgpCondId5055TopFanIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5055TopFanIssue.setDescription('The top fan is not operating within its normal parameters.')
lgpCondId5056BottomFanIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5056))
if mibBuilder.loadTexts: lgpCondId5056BottomFanIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5056BottomFanIssue.setDescription('The bottom fan is not operating within its normal parameters.')
lgpCondId5060RemoteSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5060))
if mibBuilder.loadTexts: lgpCondId5060RemoteSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5060RemoteSensorIssue.setDescription('Remote sensor is disconnected or the signal is out of range.')
lgpCondId5062Compressor1LowSuctionPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5062))
if mibBuilder.loadTexts: lgpCondId5062Compressor1LowSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5062Compressor1LowSuctionPressure.setDescription('Compressor 1 low suction pressure.')
lgpCondId5063Compressor1HoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5063))
if mibBuilder.loadTexts: lgpCondId5063Compressor1HoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5063Compressor1HoursExceeded.setDescription('Operating hours for compressor 1 have exceeded the threshold.')
lgpCondId5064DigScrollComp1TempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5064))
if mibBuilder.loadTexts: lgpCondId5064DigScrollComp1TempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5064DigScrollComp1TempSensorIssue.setDescription('Digital scroll compressor 1 temperature sensor is disconnected or\n        the signal is out of range.')
lgpCondId5065DigScrollComp1OverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5065))
if mibBuilder.loadTexts: lgpCondId5065DigScrollComp1OverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5065DigScrollComp1OverTemp.setDescription('Digital scroll compressor 1 shut off because its head temperature\n        has exceeded the upper threshold.')
lgpCondId5066Compressor1LowPressureTransducerIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5066))
if mibBuilder.loadTexts: lgpCondId5066Compressor1LowPressureTransducerIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5066Compressor1LowPressureTransducerIssue.setDescription('Compressor 1 low pressure transducer is disconnected or the signal\n        is out of range.')
lgpCondId5067ExtCompressorLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5067))
if mibBuilder.loadTexts: lgpCondId5067ExtCompressorLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5067ExtCompressorLockout.setDescription('The compressor is shut down and disabled by an external input\n        signal.')
lgpCondId5068ReheaterOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5068))
if mibBuilder.loadTexts: lgpCondId5068ReheaterOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5068ReheaterOverTemperature.setDescription('The temperature of the reheater has exceeded its threshold.')
lgpCondId5069ElectricReheater1HoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5069))
if mibBuilder.loadTexts: lgpCondId5069ElectricReheater1HoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5069ElectricReheater1HoursExceeded.setDescription('Operating hours for electric reheater 1 have exceeded the\n        threshold.')
lgpCondId5070ExtReheatLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5070))
if mibBuilder.loadTexts: lgpCondId5070ExtReheatLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5070ExtReheatLockout.setDescription('The reheater is shut down and disabled by an external input signal.')
lgpCondId5071Condenser1Issue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5071))
if mibBuilder.loadTexts: lgpCondId5071Condenser1Issue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5071Condenser1Issue.setDescription('Condenser 1 is not operating within its normal parameters.')
lgpCondId5072CondenserVFDIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5072))
if mibBuilder.loadTexts: lgpCondId5072CondenserVFDIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5072CondenserVFDIssue.setDescription('The condenser fan Variable Frequency Drive is offline.')
lgpCondId5073CondenserTVSSIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5073))
if mibBuilder.loadTexts: lgpCondId5073CondenserTVSSIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5073CondenserTVSSIssue.setDescription('The condenser Transient Voltage Surge Suppressor or Surge\n        Protection Device has failed.')
lgpCondId5104ExtOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5104))
if mibBuilder.loadTexts: lgpCondId5104ExtOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5104ExtOverTemperature.setDescription('A temperature has exceeded its threshold, as indicated by an\n        external input signal.')
lgpCondId5105ExtLossofFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5105))
if mibBuilder.loadTexts: lgpCondId5105ExtLossofFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5105ExtLossofFlow.setDescription('Loss of flow is detected, as indicated by an external input signal.')
lgpCondId5106ExtCondenserPumpHighWater = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5106))
if mibBuilder.loadTexts: lgpCondId5106ExtCondenserPumpHighWater.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5106ExtCondenserPumpHighWater.setDescription('High water is detected in the condensate pump by the auxiliary\n        float, as indicated by an external input signal.')
lgpCondId5107ExtStandbyGlycolPumpOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5107))
if mibBuilder.loadTexts: lgpCondId5107ExtStandbyGlycolPumpOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5107ExtStandbyGlycolPumpOn.setDescription('The standby glycol pump is on, as indicated by an external input\n        signal.')
lgpCondId5108ExternalFireDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5108))
if mibBuilder.loadTexts: lgpCondId5108ExternalFireDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5108ExternalFireDetected.setDescription('Fire detected, as indicated by an external input signal.')
lgpCondId5109UnitOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5109))
if mibBuilder.loadTexts: lgpCondId5109UnitOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5109UnitOn.setDescription('Unit was turned on.')
lgpCondId5110UnitOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5110))
if mibBuilder.loadTexts: lgpCondId5110UnitOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5110UnitOff.setDescription('Unit was turned off.')
lgpCondId5111UnitStandby = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5111))
if mibBuilder.loadTexts: lgpCondId5111UnitStandby.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5111UnitStandby.setDescription('Unit was placed in standby mode.')
lgpCondId5112UnitPartialShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5112))
if mibBuilder.loadTexts: lgpCondId5112UnitPartialShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5112UnitPartialShutdown.setDescription('An event has occurred requiring some system components to be\n        shutdown and disabled.')
lgpCondId5113UnitShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5113))
if mibBuilder.loadTexts: lgpCondId5113UnitShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5113UnitShutdown.setDescription('An event has occurred requiring the unit to be shutdown and\n        disabled to prevent damage to the system.')
lgpCondId5114WaterLeakageDetectorSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5114))
if mibBuilder.loadTexts: lgpCondId5114WaterLeakageDetectorSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5114WaterLeakageDetectorSensorIssue.setDescription('The water leakage detector sensor is disconnected or the signal is\n        out of range.')
lgpCondId5115BMSCommunicationsTimeout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5115))
if mibBuilder.loadTexts: lgpCondId5115BMSCommunicationsTimeout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5115BMSCommunicationsTimeout.setDescription('Building Management System (or external monitoring system) has not\n        communicated with the system within the expected timeframe.')
lgpCondId5116MaintenanceDue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5116))
if mibBuilder.loadTexts: lgpCondId5116MaintenanceDue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5116MaintenanceDue.setDescription('The calculated maintenance date has been reached.')
lgpCondId5117MaintenanceCompleted = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5117))
if mibBuilder.loadTexts: lgpCondId5117MaintenanceCompleted.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5117MaintenanceCompleted.setDescription('Maintenance has been completed on the unit.')
lgpCondId5118CloggedAirFilter = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5118))
if mibBuilder.loadTexts: lgpCondId5118CloggedAirFilter.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5118CloggedAirFilter.setDescription('Air filter is dirty and needs to be (cleaned or) replaced.')
lgpCondId5119RAMBatteryIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5119))
if mibBuilder.loadTexts: lgpCondId5119RAMBatteryIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5119RAMBatteryIssue.setDescription('RAM or RAM backup battery is not operating correctly.')
lgpCondId5120MasterUnitCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5120))
if mibBuilder.loadTexts: lgpCondId5120MasterUnitCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5120MasterUnitCommunicationLost.setDescription('Communication with master unit has been lost.')
lgpCondId5121HighPowerShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5121))
if mibBuilder.loadTexts: lgpCondId5121HighPowerShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5121HighPowerShutdown.setDescription('Supply to high power components has been shutdown.')
lgpCondId5126DigScrollComp2OverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5126))
if mibBuilder.loadTexts: lgpCondId5126DigScrollComp2OverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5126DigScrollComp2OverTemp.setDescription('Digital scroll compressor 2 shut off because its head temperature\n        has exceeded the upper threshold.')
lgpCondId5144OutputOfUf = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5144))
if mibBuilder.loadTexts: lgpCondId5144OutputOfUf.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5144OutputOfUf.setDescription('The output frequency has exceeded a specified range for a\n        specified period of time.')
lgpCondId5145MMSModuleAlarmActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5145))
if mibBuilder.loadTexts: lgpCondId5145MMSModuleAlarmActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5145MMSModuleAlarmActive.setDescription('Active alarm or fault of any module in a multi-module system.')
lgpCondId5146CompressorPumpDownIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5146))
if mibBuilder.loadTexts: lgpCondId5146CompressorPumpDownIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5146CompressorPumpDownIssue.setDescription('Unable to pump down suction-side pressure during compressor\n        shutdown.')
lgpCondId5147ReturnAirSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5147))
if mibBuilder.loadTexts: lgpCondId5147ReturnAirSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5147ReturnAirSensorIssue.setDescription('The air sensor at the inlet of the unit is disconnected or the\n        signal is out of range.')
lgpCondId5148CompressorHighPressureTransducerIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5148))
if mibBuilder.loadTexts: lgpCondId5148CompressorHighPressureTransducerIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5148CompressorHighPressureTransducerIssue.setDescription('Compressor high pressure transducer is disconnected or the signal\n        is out of range.')
lgpCondId5149BatteryNotQualified = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5149))
if mibBuilder.loadTexts: lgpCondId5149BatteryNotQualified.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5149BatteryNotQualified.setDescription('The UPS battery voltage is not qualified. This event will be\n        detected even in the absence of battery disconnect or when it is\n        open.')
lgpCondId5150BatteryTerminalsReversed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5150))
if mibBuilder.loadTexts: lgpCondId5150BatteryTerminalsReversed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5150BatteryTerminalsReversed.setDescription('The measured battery voltage is a negative value due to reverse\n        battery terminal connections.')
lgpCondId5151BatteryConverterFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5151))
if mibBuilder.loadTexts: lgpCondId5151BatteryConverterFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5151BatteryConverterFailure.setDescription('Battery converter failure. This is a summary event caused by one\n        or more power sub-modules in a UPS module.')
lgpCondId5152InverterSCROpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5152))
if mibBuilder.loadTexts: lgpCondId5152InverterSCROpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5152InverterSCROpen.setDescription('The system has detected an open across one or more inverter static\n        switch Silicon Controlled Rectifiers.')
lgpCondId5153LoadSharingFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5153))
if mibBuilder.loadTexts: lgpCondId5153LoadSharingFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5153LoadSharingFault.setDescription('Difference between any phase inverter current of unit and the\n        relevant average output current of parallel system is more than a\n        specific percent of nominal current.')
lgpCondId5154DCBusAbnormal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5154))
if mibBuilder.loadTexts: lgpCondId5154DCBusAbnormal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5154DCBusAbnormal.setDescription('The system has detected an abnormal DC Bus Voltage.')
lgpCondId5155MainsInputNeutralLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5155))
if mibBuilder.loadTexts: lgpCondId5155MainsInputNeutralLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5155MainsInputNeutralLost.setDescription('Loss of neutral in the input source is detected.')
lgpCondId5156LoadImpactTransfer = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5156))
if mibBuilder.loadTexts: lgpCondId5156LoadImpactTransfer.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5156LoadImpactTransfer.setDescription('On bypass as result of load impact.')
lgpCondId5157UserOperationInvalid = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5157))
if mibBuilder.loadTexts: lgpCondId5157UserOperationInvalid.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5157UserOperationInvalid.setDescription('User attempted an invalid operation.')
lgpCondId5158PowerSubModuleFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5158))
if mibBuilder.loadTexts: lgpCondId5158PowerSubModuleFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5158PowerSubModuleFault.setDescription('One or more failures detected in power module, inverter or\n        rectifier.')
lgpCondId5178OutputOvervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5178))
if mibBuilder.loadTexts: lgpCondId5178OutputOvervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5178OutputOvervoltage.setDescription('One or more of the output phase voltages has exceeded the limit.')
lgpCondId5179OutputUndervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5179))
if mibBuilder.loadTexts: lgpCondId5179OutputUndervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5179OutputUndervoltage.setDescription('One or more of the output phase voltages has dropped below the\n        limit.')
lgpCondId5180OutputOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5180))
if mibBuilder.loadTexts: lgpCondId5180OutputOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5180OutputOvercurrent.setDescription('One or more of the phase currents has exceeded the limit.')
lgpCondId5181NeutralOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5181))
if mibBuilder.loadTexts: lgpCondId5181NeutralOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5181NeutralOvercurrent.setDescription("The system's neutral current has exceeded the limit.")
lgpCondId5182GroundOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5182))
if mibBuilder.loadTexts: lgpCondId5182GroundOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5182GroundOvercurrent.setDescription('System ground current has exceeded the limit.')
lgpCondId5183OutputVoltageTHD = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5183))
if mibBuilder.loadTexts: lgpCondId5183OutputVoltageTHD.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5183OutputVoltageTHD.setDescription('The Total Harmonic Distortion of the voltage on one or more of the\n        output phases has exceeded the limit.')
lgpCondId5184OutputFrequencyError = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5184))
if mibBuilder.loadTexts: lgpCondId5184OutputFrequencyError.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5184OutputFrequencyError.setDescription('The output frequency is outside a specified range.')
lgpCondId5185TransformerOvertemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5185))
if mibBuilder.loadTexts: lgpCondId5185TransformerOvertemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5185TransformerOvertemperature.setDescription('Indicates a unit transformer overtemperature condition.')
lgpCondId5212PanelSummaryStatus = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5212))
if mibBuilder.loadTexts: lgpCondId5212PanelSummaryStatus.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5212PanelSummaryStatus.setDescription('The status for the panel. Detects and annunciates upon occurrence\n        of any branch or panelboard main breaker active event.')
lgpCondId5213PanelOvervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5213))
if mibBuilder.loadTexts: lgpCondId5213PanelOvervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5213PanelOvervoltage.setDescription('One or more of the phase voltages of this panel has exceeded the\n        limit.')
lgpCondId5214PanelUndervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5214))
if mibBuilder.loadTexts: lgpCondId5214PanelUndervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5214PanelUndervoltage.setDescription('One or more of the phase voltages of this panel is less than the\n        limit.')
lgpCondId5215PanelOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5215))
if mibBuilder.loadTexts: lgpCondId5215PanelOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5215PanelOvercurrent.setDescription('One or more of the phase currents of this panel has exceeded the\n        limit.')
lgpCondId5216PanelNeutralOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5216))
if mibBuilder.loadTexts: lgpCondId5216PanelNeutralOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5216PanelNeutralOvercurrent.setDescription('The Neutral current of this panel has exceeded the limit.')
lgpCondId5217PanelGroundOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5217))
if mibBuilder.loadTexts: lgpCondId5217PanelGroundOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5217PanelGroundOvercurrent.setDescription('The Ground current of this panel has exceeded the limit.')
lgpCondId5226BranchOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5226))
if mibBuilder.loadTexts: lgpCondId5226BranchOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5226BranchOvercurrent.setDescription('The current in one or more phases of this branch exceeds the limit.')
lgpCondId5227BranchUndercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5227))
if mibBuilder.loadTexts: lgpCondId5227BranchUndercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5227BranchUndercurrent.setDescription('The current in one or more phases of this branch is less than the\n        limit.')
lgpCondId5245SubfeedPhaseOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5245))
if mibBuilder.loadTexts: lgpCondId5245SubfeedPhaseOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5245SubfeedPhaseOvercurrent.setDescription('One or more of the phase currents in this subfeed has exceeded the\n        limit.')
lgpCondId5246SubfeedNeutralOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5246))
if mibBuilder.loadTexts: lgpCondId5246SubfeedNeutralOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5246SubfeedNeutralOvercurrent.setDescription('The Neutral current in this subfeed has exceeded the limit.')
lgpCondId5247SubfeedGroundOvercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5247))
if mibBuilder.loadTexts: lgpCondId5247SubfeedGroundOvercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5247SubfeedGroundOvercurrent.setDescription('The Ground current of this subfeed has exceeded the limit.')
lgpCondId5249EventState = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5249))
if mibBuilder.loadTexts: lgpCondId5249EventState.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5249EventState.setDescription('The present state of this digital event input.')
lgpCondId5263CompressorNotStopping = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5263))
if mibBuilder.loadTexts: lgpCondId5263CompressorNotStopping.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5263CompressorNotStopping.setDescription('Compressor commanded to stop, but continues to run.')
lgpCondId5269CompressorHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5269))
if mibBuilder.loadTexts: lgpCondId5269CompressorHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5269CompressorHoursExceeded.setDescription('[Compressor Hours] has exceeded [Compressor Hours Threshold].')
lgpCondId5270CompressorHighHeadPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5270))
if mibBuilder.loadTexts: lgpCondId5270CompressorHighHeadPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5270CompressorHighHeadPressure.setDescription('Compressor is shut down due to high head pressure.')
lgpCondId5271CompressorLowSuctionPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5271))
if mibBuilder.loadTexts: lgpCondId5271CompressorLowSuctionPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5271CompressorLowSuctionPressure.setDescription('Compressor is shut down due to low suction pressure.')
lgpCondId5272CompressorThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5272))
if mibBuilder.loadTexts: lgpCondId5272CompressorThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5272CompressorThermalOverload.setDescription('Compressor is shut down due to thermal overload.')
lgpCondId5273CompressorLowOilPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5273))
if mibBuilder.loadTexts: lgpCondId5273CompressorLowOilPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5273CompressorLowOilPressure.setDescription('Compressor low oil pressure.')
lgpCondId5274CompressorHeadPressureOverThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5274))
if mibBuilder.loadTexts: lgpCondId5274CompressorHeadPressureOverThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5274CompressorHeadPressureOverThreshold.setDescription('Compressor head pressure has exceeded an upper threshold.')
lgpCondId5275CompressorLossofDifferentialPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5275))
if mibBuilder.loadTexts: lgpCondId5275CompressorLossofDifferentialPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5275CompressorLossofDifferentialPressure.setDescription('Compressor is shut down due to low differential pressure.')
lgpCondId5277CondenserFanIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5277))
if mibBuilder.loadTexts: lgpCondId5277CondenserFanIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5277CondenserFanIssue.setDescription('Condenser fan is not operating within its operational parameters.')
lgpCondId5278LowCondenserRefrigerantPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5278))
if mibBuilder.loadTexts: lgpCondId5278LowCondenserRefrigerantPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5278LowCondenserRefrigerantPressure.setDescription('Refrigerant pressure in condenser coil is too low.')
lgpCondId5280LowFluidPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5280))
if mibBuilder.loadTexts: lgpCondId5280LowFluidPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5280LowFluidPressure.setDescription('[Fluid Pressure] has dropped below a specified threshold.')
lgpCondId5293ReturnFluidOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5293))
if mibBuilder.loadTexts: lgpCondId5293ReturnFluidOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5293ReturnFluidOverTemp.setDescription('[Return Fluid Temperature] has exceeded a specified threshold.')
lgpCondId5294ReturnFluidUnderTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5294))
if mibBuilder.loadTexts: lgpCondId5294ReturnFluidUnderTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5294ReturnFluidUnderTemp.setDescription('[Return Fluid Temperature] has dropped below a specified threshold.')
lgpCondId5295ReturnFluidTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5295))
if mibBuilder.loadTexts: lgpCondId5295ReturnFluidTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5295ReturnFluidTempSensorIssue.setDescription('The return fluid temperature sensor is disconnected or the signal\n        is out of range.')
lgpCondId5296TeamworkReturnFluidTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5296))
if mibBuilder.loadTexts: lgpCondId5296TeamworkReturnFluidTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5296TeamworkReturnFluidTempSensorIssue.setDescription('The return fluid temperature sensors for all Teamwork units are\n        disconnected or the signals are out of range.')
lgpCondId5297AllPumpsLossofFlow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5297))
if mibBuilder.loadTexts: lgpCondId5297AllPumpsLossofFlow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5297AllPumpsLossofFlow.setDescription('System is shut down due to loss of flow in all available pumps.')
lgpCondId5300PumpHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5300))
if mibBuilder.loadTexts: lgpCondId5300PumpHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5300PumpHoursExceeded.setDescription('[Pump Hours] has exceeded [Pump Hours Threshold].')
lgpCondId5306FreeCoolingValveHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5306))
if mibBuilder.loadTexts: lgpCondId5306FreeCoolingValveHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5306FreeCoolingValveHoursExceeded.setDescription('[Free Cooling Valve Hours] has exceeded [Free Cooling Valve Hours\n        Threshold].')
lgpCondId5308EvaporatorInletTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5308))
if mibBuilder.loadTexts: lgpCondId5308EvaporatorInletTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5308EvaporatorInletTempSensorIssue.setDescription('The evaporator inlet temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId5309TeamworkEvaporatorInletTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5309))
if mibBuilder.loadTexts: lgpCondId5309TeamworkEvaporatorInletTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5309TeamworkEvaporatorInletTempSensorIssue.setDescription('The evaporator inlet temperature sensors for all Teamwork units\n        are disconnected or the signals are out of range.')
lgpCondId5310EvaporatorFluidFreezeAutoReset = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5310))
if mibBuilder.loadTexts: lgpCondId5310EvaporatorFluidFreezeAutoReset.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5310EvaporatorFluidFreezeAutoReset.setDescription('Evaporator outlet fluid temperature has dropped below the freeze\n        threshold. Evaporator has been shut down, but will restart when\n        the temperature rises above the threshold.')
lgpCondId5311EvaporatorFluidFreezeManualResetRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5311))
if mibBuilder.loadTexts: lgpCondId5311EvaporatorFluidFreezeManualResetRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5311EvaporatorFluidFreezeManualResetRequired.setDescription('Evaporator outlet fluid temperature has dropped below the freeze\n        threshold. Evaporator has been shut down and requires a manual\n        reset.')
lgpCondId5315SubgroupEventOccurredDuringCommunicationLoss = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5315))
if mibBuilder.loadTexts: lgpCondId5315SubgroupEventOccurredDuringCommunicationLoss.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5315SubgroupEventOccurredDuringCommunicationLoss.setDescription('While subgroup unit communication was lost, an event occurred on\n        the subgroup unit. Please check subgroup unit event log.')
lgpCondId5335ReturnAirUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5335))
if mibBuilder.loadTexts: lgpCondId5335ReturnAirUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5335ReturnAirUnderTemperature.setDescription('[Return Air Temperature] has dropped below [Low Return Air\n        Temperature Threshold].')
lgpCondId5349ExtAirSensorAHighHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5349))
if mibBuilder.loadTexts: lgpCondId5349ExtAirSensorAHighHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5349ExtAirSensorAHighHumidity.setDescription('[Ext Air Sensor A Humidity] has exceeded [Ext Air Sensor A High\n        Humidity Threshold].')
lgpCondId5351ExtAirSensorALowHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5351))
if mibBuilder.loadTexts: lgpCondId5351ExtAirSensorALowHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5351ExtAirSensorALowHumidity.setDescription('[Ext Air Sensor A Humidity] has dropped below [Ext Air Sensor A\n        Low Humidity Threshold].')
lgpCondId5352CompressorShortCycle = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5352))
if mibBuilder.loadTexts: lgpCondId5352CompressorShortCycle.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5352CompressorShortCycle.setDescription('Compressor short cycle. A short cycle is defined as turning on and\n        off a number of times over a set time period.')
lgpCondId5354DigScrollCompDischargeTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5354))
if mibBuilder.loadTexts: lgpCondId5354DigScrollCompDischargeTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5354DigScrollCompDischargeTempSensorIssue.setDescription('Digital scroll compressor discharge temperature sensor is\n        disconnected or the signal is out of range.')
lgpCondId5355DigScrollCompOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5355))
if mibBuilder.loadTexts: lgpCondId5355DigScrollCompOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5355DigScrollCompOverTemp.setDescription('Digital scroll compressor is shut down due to head temperature\n        exceeding an upper threshold.')
lgpCondId5361ExtFreeCoolingLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5361))
if mibBuilder.loadTexts: lgpCondId5361ExtFreeCoolingLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5361ExtFreeCoolingLockout.setDescription('Free cooling is disabled by an external input signal.')
lgpCondId5362FreeCoolingTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5362))
if mibBuilder.loadTexts: lgpCondId5362FreeCoolingTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5362FreeCoolingTempSensorIssue.setDescription('The free cooling fluid temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId5365HotWaterHotGasValveHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5365))
if mibBuilder.loadTexts: lgpCondId5365HotWaterHotGasValveHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5365HotWaterHotGasValveHoursExceeded.setDescription('[Hot Water / Hot Gas Valve Hours] has exceeded [Hot Water / Hot\n        Gas Valve Hours Threshold].')
lgpCondId5368ElectricReheaterHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5368))
if mibBuilder.loadTexts: lgpCondId5368ElectricReheaterHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5368ElectricReheaterHoursExceeded.setDescription('[Electric Reheater Hours] has exceeded [Electric Reheaters Hours\n        Threshold].')
lgpCondId5376MainFanOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5376))
if mibBuilder.loadTexts: lgpCondId5376MainFanOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5376MainFanOverload.setDescription('Main fan is shut down due to thermal overload.')
lgpCondId5377Condenser = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5377))
if mibBuilder.loadTexts: lgpCondId5377Condenser.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5377Condenser.setDescription('Condenser is not operating within its operational parameters.')
lgpCondId5415ExtLossofAirBlower = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5415))
if mibBuilder.loadTexts: lgpCondId5415ExtLossofAirBlower.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5415ExtLossofAirBlower.setDescription('Loss of air blower is detected, as indicated by an external input\n        signal.')
lgpCondId5416ExtStandbyUnitOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5416))
if mibBuilder.loadTexts: lgpCondId5416ExtStandbyUnitOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5416ExtStandbyUnitOn.setDescription('Standby unit is on, as indicated by an external input signal.')
lgpCondId5417DigitalOutputBoardNotDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5417))
if mibBuilder.loadTexts: lgpCondId5417DigitalOutputBoardNotDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5417DigitalOutputBoardNotDetected.setDescription('Digital output board is required to be connected, but no signal is\n        detected.')
lgpCondId5418UnitCodeMissing = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5418))
if mibBuilder.loadTexts: lgpCondId5418UnitCodeMissing.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5418UnitCodeMissing.setDescription('Unit code has not been entered and saved.')
lgpCondId5419UnitCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5419))
if mibBuilder.loadTexts: lgpCondId5419UnitCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5419UnitCommunicationLost.setDescription('Master has lost communication with one or more networked units.')
lgpCondId5422OvertemperaturePowerOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5422))
if mibBuilder.loadTexts: lgpCondId5422OvertemperaturePowerOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5422OvertemperaturePowerOff.setDescription('Power turned off because equipment over temperature limit.')
lgpCondId5423TooManySensors = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5423))
if mibBuilder.loadTexts: lgpCondId5423TooManySensors.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5423TooManySensors.setDescription('The number of sensors connected to the PDU exceeds the allowable\n        limit.')
lgpCondId5432TransformerOvertemperaturePowerOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5432))
if mibBuilder.loadTexts: lgpCondId5432TransformerOvertemperaturePowerOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5432TransformerOvertemperaturePowerOff.setDescription('Output power shutdown due to high transformer temperature.')
lgpCondId5433TransformerOvertemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5433))
if mibBuilder.loadTexts: lgpCondId5433TransformerOvertemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5433TransformerOvertemperature.setDescription('Transformer temperature has exceeded the limit.')
lgpCondId5434TransformerTemperatureSensorFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5434))
if mibBuilder.loadTexts: lgpCondId5434TransformerTemperatureSensorFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5434TransformerTemperatureSensorFail.setDescription('Transformer temperature sensor has failed.')
lgpCondId5436LowAmbientTemperatureProbeTwo = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5436))
if mibBuilder.loadTexts: lgpCondId5436LowAmbientTemperatureProbeTwo.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5436LowAmbientTemperatureProbeTwo.setDescription('The system has detected a low ambient temperature condition on\n        temperature probe 2.')
lgpCondId5437HighAmbientTemperatureProbeTwo = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5437))
if mibBuilder.loadTexts: lgpCondId5437HighAmbientTemperatureProbeTwo.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5437HighAmbientTemperatureProbeTwo.setDescription('The system has detected a high ambient temperature condition on\n        temperature probe 2.')
lgpCondId5438ThermalRunawayDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5438))
if mibBuilder.loadTexts: lgpCondId5438ThermalRunawayDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5438ThermalRunawayDetected.setDescription('The system has detected a thermal runaway condition.')
lgpCondId5439BatteryStringEqualize = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5439))
if mibBuilder.loadTexts: lgpCondId5439BatteryStringEqualize.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5439BatteryStringEqualize.setDescription('The system has detected a battery string equalize condition.')
lgpCondId5440BatteryStringOffline = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5440))
if mibBuilder.loadTexts: lgpCondId5440BatteryStringOffline.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5440BatteryStringOffline.setDescription('The system has detected the battery string is offline.')
lgpCondId5442DischargeLowCellVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5442))
if mibBuilder.loadTexts: lgpCondId5442DischargeLowCellVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5442DischargeLowCellVoltage.setDescription('The system has detected a low cell voltage condition during a\n        discharge.')
lgpCondId5447MMSPowerSharing = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5447))
if mibBuilder.loadTexts: lgpCondId5447MMSPowerSharing.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5447MMSPowerSharing.setDescription('A module is not sharing power with the other modules in a multi\n        -module system.')
lgpCondId5453ModuleInStandbyIntelligentParalleling = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5453))
if mibBuilder.loadTexts: lgpCondId5453ModuleInStandbyIntelligentParalleling.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5453ModuleInStandbyIntelligentParalleling.setDescription('Module is placed into standby operation per Intelligent\n        Paralleling.')
lgpCondId5456ECOModeActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5456))
if mibBuilder.loadTexts: lgpCondId5456ECOModeActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5456ECOModeActive.setDescription('Conditions for Activation or Automatic Reactivation have been\n        satisfied.')
lgpCondId5457ECOModeSuspended = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5457))
if mibBuilder.loadTexts: lgpCondId5457ECOModeSuspended.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5457ECOModeSuspended.setDescription('ECO Mode session is suspended.')
lgpCondId5458ExcessECOSuspends = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5458))
if mibBuilder.loadTexts: lgpCondId5458ExcessECOSuspends.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5458ExcessECOSuspends.setDescription('Number of automatic suspensions has exceeded the ECO Mode -\n        Maximum Auto Suspensions setting.')
lgpCondId5471DoorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5471))
if mibBuilder.loadTexts: lgpCondId5471DoorOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5471DoorOpen.setDescription('An open door was detected.')
lgpCondId5472DoorSensorDisconnected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5472))
if mibBuilder.loadTexts: lgpCondId5472DoorSensorDisconnected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5472DoorSensorDisconnected.setDescription('Door sensor disconnect detected.')
lgpCondId5479ContactClosureOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5479))
if mibBuilder.loadTexts: lgpCondId5479ContactClosureOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5479ContactClosureOpen.setDescription('An open circuit was detected.')
lgpCondId5480ContactClosureClosed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5480))
if mibBuilder.loadTexts: lgpCondId5480ContactClosureClosed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5480ContactClosureClosed.setDescription('A closed circuit was detected.')
lgpCondId5492ExtSystemCondensationDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5492))
if mibBuilder.loadTexts: lgpCondId5492ExtSystemCondensationDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5492ExtSystemCondensationDetected.setDescription('External system condensation detected.')
lgpCondId5495ExtFanIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5495))
if mibBuilder.loadTexts: lgpCondId5495ExtFanIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5495ExtFanIssue.setDescription('One or more fans are not operating within their operational\n        parameters.')
lgpCondId5500ExtRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5500))
if mibBuilder.loadTexts: lgpCondId5500ExtRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5500ExtRemoteShutdown.setDescription('Unit is shut down by a remote signal.')
lgpCondId5505HotAisleTempOutofRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5505))
if mibBuilder.loadTexts: lgpCondId5505HotAisleTempOutofRange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5505HotAisleTempOutofRange.setDescription('The air temperature in the Hot aisle is either above [Hot Aisle\n        Over Temp Threshold] or below [Hot Aisle Under Temp Threshold].')
lgpCondId5508ColdAisleTempOutofRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5508))
if mibBuilder.loadTexts: lgpCondId5508ColdAisleTempOutofRange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5508ColdAisleTempOutofRange.setDescription('The air temperature in the cold aisle is either above [Cold Aisle\n        Over Temp Threshold] or below [Cold Aisle Under Temp Threshold].')
lgpCondId5512RemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5512))
if mibBuilder.loadTexts: lgpCondId5512RemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5512RemoteShutdown.setDescription('Unit is shut down by a remote signal.')
lgpCondId5513CompressorCapacityReduced = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5513))
if mibBuilder.loadTexts: lgpCondId5513CompressorCapacityReduced.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5513CompressorCapacityReduced.setDescription('Compressor capacity has been reduced.')
lgpCondId5514CompressorLowPressureTransducerIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5514))
if mibBuilder.loadTexts: lgpCondId5514CompressorLowPressureTransducerIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5514CompressorLowPressureTransducerIssue.setDescription('Compressor low pressure transducer is disconnected or the signal\n        is out of range.')
lgpCondId5524PDUNeutralOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5524))
if mibBuilder.loadTexts: lgpCondId5524PDUNeutralOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5524PDUNeutralOverCurrent.setDescription('The system has detected a neutral over current condition.')
lgpCondId5531CondenserCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5531))
if mibBuilder.loadTexts: lgpCondId5531CondenserCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5531CondenserCommunicationLost.setDescription('Communication with condenser unit has been lost.')
lgpCondId5535CondenserOutsideAirTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5535))
if mibBuilder.loadTexts: lgpCondId5535CondenserOutsideAirTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5535CondenserOutsideAirTempSensorIssue.setDescription('Condenser outside air temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId5536CondenserOutsideAirTempOutofOperatingRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5536))
if mibBuilder.loadTexts: lgpCondId5536CondenserOutsideAirTempOutofOperatingRange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5536CondenserOutsideAirTempOutofOperatingRange.setDescription('[Condenser Outside Air Temperature] is either above an upper\n        threshold or below a lower threshold.')
lgpCondId5537CondenserControlBoardIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5537))
if mibBuilder.loadTexts: lgpCondId5537CondenserControlBoardIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5537CondenserControlBoardIssue.setDescription('The condenser control board is reporting an issue.')
lgpCondId5539CondenserRefrigerantPressureOverThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5539))
if mibBuilder.loadTexts: lgpCondId5539CondenserRefrigerantPressureOverThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5539CondenserRefrigerantPressureOverThreshold.setDescription('Condenser refrigerant pressure has exceeded a threshold.')
lgpCondId5540CondenserRefrigerantPressureUnderThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5540))
if mibBuilder.loadTexts: lgpCondId5540CondenserRefrigerantPressureUnderThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5540CondenserRefrigerantPressureUnderThreshold.setDescription('Condenser refrigerant pressure has dropped below a threshold.')
lgpCondId5541CondenserRefrigerantPressureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5541))
if mibBuilder.loadTexts: lgpCondId5541CondenserRefrigerantPressureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5541CondenserRefrigerantPressureSensorIssue.setDescription('Condenser refrigerant pressure sensor is disconnected or the\n        signal is out of range.')
lgpCondId5542CondenserSupplyRefrigerantOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5542))
if mibBuilder.loadTexts: lgpCondId5542CondenserSupplyRefrigerantOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5542CondenserSupplyRefrigerantOverTemp.setDescription('Condenser supply refrigerant temperature has exceeded a threshold.')
lgpCondId5543CondenserSupplyRefrigerantUnderTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5543))
if mibBuilder.loadTexts: lgpCondId5543CondenserSupplyRefrigerantUnderTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5543CondenserSupplyRefrigerantUnderTemp.setDescription('Condenser supply refrigerant temperature has dropped below a\n        specified threshold.')
lgpCondId5544CondenserSupplyRefrigerantTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5544))
if mibBuilder.loadTexts: lgpCondId5544CondenserSupplyRefrigerantTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5544CondenserSupplyRefrigerantTempSensorIssue.setDescription('Condenser supply refrigerant temperature sensor is disconnected or\n        the signal is out of range.')
lgpCondId5545CondenserMaxFanSpeedOverride = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5545))
if mibBuilder.loadTexts: lgpCondId5545CondenserMaxFanSpeedOverride.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5545CondenserMaxFanSpeedOverride.setDescription('Fan speed exceeding the maximum set point in order to alleviate a\n        high temperature or pressure condition.')
lgpCondId5559EvaporatorReturnFluidOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5559))
if mibBuilder.loadTexts: lgpCondId5559EvaporatorReturnFluidOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5559EvaporatorReturnFluidOverTemp.setDescription('[Evaporator Return Fluid Temperature] has exceeded a threshold.\n        The event is deactivated when the temperature drops below the\n        threshold.')
lgpCondId5560EvaporatorReturnFluidUnderTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5560))
if mibBuilder.loadTexts: lgpCondId5560EvaporatorReturnFluidUnderTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5560EvaporatorReturnFluidUnderTemp.setDescription('[Evaporator Return Fluid Temperature] has dropped below a\n        threshold.  The event is deactivated when the temperature rises\n        above the threshold.')
lgpCondId5561LBSActiveMaster = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5561))
if mibBuilder.loadTexts: lgpCondId5561LBSActiveMaster.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5561LBSActiveMaster.setDescription('This UPS system has been selected as the functional Master Load\n        Bus Synchronization (LBS) system.')
lgpCondId5562LBSActiveSlave = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5562))
if mibBuilder.loadTexts: lgpCondId5562LBSActiveSlave.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5562LBSActiveSlave.setDescription('This UPS system is synchronized to the output bus of the UPS\n        system that has been selected as the Master Load Bus\n        Synchronization (LBS) system.')
lgpCondId5563DCBusLowFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5563))
if mibBuilder.loadTexts: lgpCondId5563DCBusLowFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5563DCBusLowFault.setDescription('The DC Bus voltage has reached a critical low level.')
lgpCondId5564FanContactorOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5564))
if mibBuilder.loadTexts: lgpCondId5564FanContactorOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5564FanContactorOpen.setDescription('The fan contactor is open.')
lgpCondId5565FanContactorOpenFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5565))
if mibBuilder.loadTexts: lgpCondId5565FanContactorOpenFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5565FanContactorOpenFail.setDescription('The fan contactor failed to open.')
lgpCondId5566FanContactorCloseFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5566))
if mibBuilder.loadTexts: lgpCondId5566FanContactorCloseFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5566FanContactorCloseFail.setDescription('The fan contactor failed to close.')
lgpCondId5567IPInhibit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5567))
if mibBuilder.loadTexts: lgpCondId5567IPInhibit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5567IPInhibit.setDescription('The intelligent paralleling operation is inhibited.')
lgpCondId5568InputUndervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5568))
if mibBuilder.loadTexts: lgpCondId5568InputUndervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5568InputUndervoltage.setDescription('One or more of the input phase voltages has dropped below the\n        limit.')
lgpCondId5569InputOvervoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5569))
if mibBuilder.loadTexts: lgpCondId5569InputOvervoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5569InputOvervoltage.setDescription('One or more of the input phase voltages has exceeded the limit.')
lgpCondId5573AmbientAirSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5573))
if mibBuilder.loadTexts: lgpCondId5573AmbientAirSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5573AmbientAirSensorIssue.setDescription('Ambient air sensor is disconnected or the signal is out of range.')
lgpCondId5577ExtDewPointUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5577))
if mibBuilder.loadTexts: lgpCondId5577ExtDewPointUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5577ExtDewPointUnderTemperature.setDescription('At least one dew point temperature reading ([Ext Air Sensor A Dew\n        Point Temp], [Ext Air Sensor B Dew Point Temp]...) has dropped\n        below [Ext Dew Point Under Temp Threshold].')
lgpCondId5578DewPointOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5578))
if mibBuilder.loadTexts: lgpCondId5578DewPointOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5578DewPointOverTemperature.setDescription('Dew point temperature reading has exceeded the upper threshold.')
lgpCondId5579DewPointUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5579))
if mibBuilder.loadTexts: lgpCondId5579DewPointUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5579DewPointUnderTemperature.setDescription('Dew point temperature reading has dropped below the lower\n        threshold.')
lgpCondId5588UnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5588))
if mibBuilder.loadTexts: lgpCondId5588UnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5588UnspecifiedGeneralEvent.setDescription('One or more unspecified events active. See local unit display for\n        further details.')
lgpCondId5593RemoteSensorAverageOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5593))
if mibBuilder.loadTexts: lgpCondId5593RemoteSensorAverageOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5593RemoteSensorAverageOverTemperature.setDescription('[Remote Sensor Average Temperature] has exceeded [Remote Sensor\n        Over Temp Threshold].')
lgpCondId5594RemoteSensorAverageUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5594))
if mibBuilder.loadTexts: lgpCondId5594RemoteSensorAverageUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5594RemoteSensorAverageUnderTemperature.setDescription('[Remote Sensor Average Temperature] has dropped below [Remote\n        Sensor Under Temp Threshold].')
lgpCondId5595RemoteSensorSystemAverageOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5595))
if mibBuilder.loadTexts: lgpCondId5595RemoteSensorSystemAverageOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5595RemoteSensorSystemAverageOverTemperature.setDescription('[Remote Sensor System Average Temperature] has exceeded [Remote\n        Sensor Over Temp Threshold].')
lgpCondId5596RemoteSensorSystemAverageUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5596))
if mibBuilder.loadTexts: lgpCondId5596RemoteSensorSystemAverageUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5596RemoteSensorSystemAverageUnderTemperature.setDescription('[Remote Sensor System Average Temperature] has dropped below\n        [Remote Sensor Under Temp Threshold].')
lgpCondId5597RemoteSensorOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5597))
if mibBuilder.loadTexts: lgpCondId5597RemoteSensorOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5597RemoteSensorOverTemperature.setDescription('[Remote Sensor Temperature] has exceeded [Remote Sensor Over Temp\n        Threshold].')
lgpCondId5598RemoteSensorUnderTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5598))
if mibBuilder.loadTexts: lgpCondId5598RemoteSensorUnderTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5598RemoteSensorUnderTemperature.setDescription('[Remote Sensor Temperature] has dropped below [Remote Sensor Under\n        Temp Threshold].')
lgpCondId5600AirEconomizerEmergencyOverride = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5600))
if mibBuilder.loadTexts: lgpCondId5600AirEconomizerEmergencyOverride.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5600AirEconomizerEmergencyOverride.setDescription('Indoor room temperature has exceeded its upper threshold and the\n        outdoor air damper has been opened for emergency cooling.')
lgpCondId5601AirEconomizerReducedAirflow = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5601))
if mibBuilder.loadTexts: lgpCondId5601AirEconomizerReducedAirflow.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5601AirEconomizerReducedAirflow.setDescription('Air economizer filter is dirty and needs to be cleaned or replaced.')
lgpCondId5604CompressorSuperheatOverThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5604))
if mibBuilder.loadTexts: lgpCondId5604CompressorSuperheatOverThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5604CompressorSuperheatOverThreshold.setDescription('Compressor discharge refrigerant superheat temperature has\n        exceeded an upper threshold.')
lgpCondId5609ThermalRunawayCelltoAmbientTemperatureEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5609))
if mibBuilder.loadTexts: lgpCondId5609ThermalRunawayCelltoAmbientTemperatureEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5609ThermalRunawayCelltoAmbientTemperatureEvent.setDescription('The delta temperature between a cell temperature and the ambient\n        temperature has exceeded the thermal runaway cell to ambient\n        temperature threshold.')
lgpCondId5610ThermalRunawayCelltoCellTemperatureEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5610))
if mibBuilder.loadTexts: lgpCondId5610ThermalRunawayCelltoCellTemperatureEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5610ThermalRunawayCelltoCellTemperatureEvent.setDescription('The delta temperature between two cells has exceeded the thermal\n        runaway cell to cell temperature threshold.')
lgpCondId5611ThermalRunawayChargerCurrentLevelOneEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5611))
if mibBuilder.loadTexts: lgpCondId5611ThermalRunawayChargerCurrentLevelOneEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5611ThermalRunawayChargerCurrentLevelOneEvent.setDescription('The Battery-String charger current has exceeded the thermal\n        runaway charger current level one threshold.')
lgpCondId5612ThermalRunawayChargerCurrentLevelTwoEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5612))
if mibBuilder.loadTexts: lgpCondId5612ThermalRunawayChargerCurrentLevelTwoEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5612ThermalRunawayChargerCurrentLevelTwoEvent.setDescription('The Battery-String charger current has exceeded the thermal\n        runaway charger current level two threshold.')
lgpCondId5617TemperatureControlSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5617))
if mibBuilder.loadTexts: lgpCondId5617TemperatureControlSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5617TemperatureControlSensorIssue.setDescription('The air sensor selected for cooling control is disconnected or the\n        signal is out of range.')
lgpCondId5621EEVSuperheatBelowThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5621))
if mibBuilder.loadTexts: lgpCondId5621EEVSuperheatBelowThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5621EEVSuperheatBelowThreshold.setDescription('Electronic expansion valve refrigerant low superheat event.')
lgpCondId5622EEVDischargeTempAboveThreshold = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5622))
if mibBuilder.loadTexts: lgpCondId5622EEVDischargeTempAboveThreshold.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5622EEVDischargeTempAboveThreshold.setDescription('Electronic expansion valve refrigerant high discharge temperature\n        event.')
lgpCondId5623EEVBatteryIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5623))
if mibBuilder.loadTexts: lgpCondId5623EEVBatteryIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5623EEVBatteryIssue.setDescription('Electronic expansion valve battery cannot be recharged and needs\n        to be replaced.')
lgpCondId5624EEVPowerIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5624))
if mibBuilder.loadTexts: lgpCondId5624EEVPowerIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5624EEVPowerIssue.setDescription('Electronic expansion valve lost power and is running on battery\n        backup.')
lgpCondId5625EEVUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5625))
if mibBuilder.loadTexts: lgpCondId5625EEVUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5625EEVUnspecifiedGeneralEvent.setDescription('One or more unspecified electronic expansion valve events active.\n        See local unit display for further details.')
lgpCondId5629StaticPressureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5629))
if mibBuilder.loadTexts: lgpCondId5629StaticPressureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5629StaticPressureSensorIssue.setDescription('The static pressure sensor is disconnected or the signal is out of\n        range.')
lgpCondId5630HighStaticPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5630))
if mibBuilder.loadTexts: lgpCondId5630HighStaticPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5630HighStaticPressure.setDescription('High static pressure event.')
lgpCondId5631LowStaticPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5631))
if mibBuilder.loadTexts: lgpCondId5631LowStaticPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5631LowStaticPressure.setDescription('Low static pressure event.')
lgpCondId5636PumpUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5636))
if mibBuilder.loadTexts: lgpCondId5636PumpUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5636PumpUnspecifiedGeneralEvent.setDescription('One or more unspecified pump events active. See local unit display\n        for further details.')
lgpCondId5637CondenserUnitUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5637))
if mibBuilder.loadTexts: lgpCondId5637CondenserUnitUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5637CondenserUnitUnspecifiedGeneralEvent.setDescription('One or more unspecified condenser unit events active. See local\n        unit display for further details.')
lgpCondId5638CondenserCircuitUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5638))
if mibBuilder.loadTexts: lgpCondId5638CondenserCircuitUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5638CondenserCircuitUnspecifiedGeneralEvent.setDescription('One or more unspecified condenser circuit events active. See local\n        unit display for further details.')
lgpCondId5642SFAReservedEvent1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5642))
if mibBuilder.loadTexts: lgpCondId5642SFAReservedEvent1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5642SFAReservedEvent1.setDescription('Reserved event for SFA use.')
lgpCondId5643SFAReservedEvent2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5643))
if mibBuilder.loadTexts: lgpCondId5643SFAReservedEvent2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5643SFAReservedEvent2.setDescription('Reserved event for SFA use.')
lgpCondId5644SFAReservedEvent3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5644))
if mibBuilder.loadTexts: lgpCondId5644SFAReservedEvent3.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5644SFAReservedEvent3.setDescription('Reserved event for SFA use.')
lgpCondId5645SFAReservedEvent4 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5645))
if mibBuilder.loadTexts: lgpCondId5645SFAReservedEvent4.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5645SFAReservedEvent4.setDescription('Reserved event for SFA use.')
lgpCondId5646SFAReservedEvent5 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5646))
if mibBuilder.loadTexts: lgpCondId5646SFAReservedEvent5.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5646SFAReservedEvent5.setDescription('Reserved event for SFA use.')
lgpCondId5647SFAReservedEvent6 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5647))
if mibBuilder.loadTexts: lgpCondId5647SFAReservedEvent6.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5647SFAReservedEvent6.setDescription('Reserved event for SFA use.')
lgpCondId5648SFAReservedEvent7 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5648))
if mibBuilder.loadTexts: lgpCondId5648SFAReservedEvent7.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5648SFAReservedEvent7.setDescription('Reserved event for SFA use.')
lgpCondId5649SFAReservedEvent8 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5649))
if mibBuilder.loadTexts: lgpCondId5649SFAReservedEvent8.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5649SFAReservedEvent8.setDescription('Reserved event for SFA use.')
lgpCondId5650SFAReservedEvent9 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5650))
if mibBuilder.loadTexts: lgpCondId5650SFAReservedEvent9.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5650SFAReservedEvent9.setDescription('Reserved event for SFA use.')
lgpCondId5651SFAReservedEvent10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5651))
if mibBuilder.loadTexts: lgpCondId5651SFAReservedEvent10.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5651SFAReservedEvent10.setDescription('Reserved event for SFA use.')
lgpCondId5652SFAReservedEvent11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5652))
if mibBuilder.loadTexts: lgpCondId5652SFAReservedEvent11.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5652SFAReservedEvent11.setDescription('Reserved event for SFA use.')
lgpCondId5653SFAReservedEvent12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5653))
if mibBuilder.loadTexts: lgpCondId5653SFAReservedEvent12.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5653SFAReservedEvent12.setDescription('Reserved event for SFA use.')
lgpCondId5654SFAReservedEvent13 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5654))
if mibBuilder.loadTexts: lgpCondId5654SFAReservedEvent13.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5654SFAReservedEvent13.setDescription('Reserved event for SFA use.')
lgpCondId5655SFAReservedEvent14 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5655))
if mibBuilder.loadTexts: lgpCondId5655SFAReservedEvent14.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5655SFAReservedEvent14.setDescription('Reserved event for SFA use.')
lgpCondId5656SFAReservedEvent15 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5656))
if mibBuilder.loadTexts: lgpCondId5656SFAReservedEvent15.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5656SFAReservedEvent15.setDescription('Reserved event for SFA use.')
lgpCondId5657SFAReservedEvent16 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5657))
if mibBuilder.loadTexts: lgpCondId5657SFAReservedEvent16.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5657SFAReservedEvent16.setDescription('Reserved event for SFA use.')
lgpCondId5658SFAReservedEvent17 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5658))
if mibBuilder.loadTexts: lgpCondId5658SFAReservedEvent17.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5658SFAReservedEvent17.setDescription('Reserved event for SFA use.')
lgpCondId5659SFAReservedEvent18 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5659))
if mibBuilder.loadTexts: lgpCondId5659SFAReservedEvent18.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5659SFAReservedEvent18.setDescription('Reserved event for SFA use.')
lgpCondId5660SFAReservedEvent19 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5660))
if mibBuilder.loadTexts: lgpCondId5660SFAReservedEvent19.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5660SFAReservedEvent19.setDescription('Reserved event for SFA use.')
lgpCondId5661SFAReservedEvent20 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5661))
if mibBuilder.loadTexts: lgpCondId5661SFAReservedEvent20.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5661SFAReservedEvent20.setDescription('Reserved event for SFA use.')
lgpCondId5662SFAReservedEvent21 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5662))
if mibBuilder.loadTexts: lgpCondId5662SFAReservedEvent21.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5662SFAReservedEvent21.setDescription('Reserved event for SFA use.')
lgpCondId5663SFAReservedEvent22 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5663))
if mibBuilder.loadTexts: lgpCondId5663SFAReservedEvent22.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5663SFAReservedEvent22.setDescription('Reserved event for SFA use.')
lgpCondId5664SFAReservedEvent23 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5664))
if mibBuilder.loadTexts: lgpCondId5664SFAReservedEvent23.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5664SFAReservedEvent23.setDescription('Reserved event for SFA use.')
lgpCondId5665SFAReservedEvent24 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5665))
if mibBuilder.loadTexts: lgpCondId5665SFAReservedEvent24.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5665SFAReservedEvent24.setDescription('Reserved event for SFA use.')
lgpCondId5666SFAReservedEvent25 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5666))
if mibBuilder.loadTexts: lgpCondId5666SFAReservedEvent25.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5666SFAReservedEvent25.setDescription('Reserved event for SFA use.')
lgpCondId5768OutletAirOvertemperatureLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5768))
if mibBuilder.loadTexts: lgpCondId5768OutletAirOvertemperatureLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5768OutletAirOvertemperatureLimit.setDescription('The difference between the outlet air temperature and inlet air\n        temperature exceeds a specified maximum temperature.')
lgpCondId5769EMOShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5769))
if mibBuilder.loadTexts: lgpCondId5769EMOShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5769EMOShutdown.setDescription('An Emergency Module Off command has been detected.')
lgpCondId5770TopOutletFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5770))
if mibBuilder.loadTexts: lgpCondId5770TopOutletFanFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5770TopOutletFanFault.setDescription('Top outlet fan fault - one or more top outlet fans have failed.')
lgpCondId5771MMSOverCapacity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5771))
if mibBuilder.loadTexts: lgpCondId5771MMSOverCapacity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5771MMSOverCapacity.setDescription('The multi-module system load is larger than the apparent power\n        limit setting.')
lgpCondId5773CompressorCapacityNormal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5773))
if mibBuilder.loadTexts: lgpCondId5773CompressorCapacityNormal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5773CompressorCapacityNormal.setDescription('Compressor has returned to normal load capacity.')
lgpCondId5774CompressorContactorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5774))
if mibBuilder.loadTexts: lgpCondId5774CompressorContactorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5774CompressorContactorIssue.setDescription('Compressor contactor is not closing during compressor startup or\n        is not opening during compressor shutdown.')
lgpCondId5775UnitShutdownUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5775))
if mibBuilder.loadTexts: lgpCondId5775UnitShutdownUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5775UnitShutdownUnspecifiedGeneralEvent.setDescription('One or more unspecified unit shutdown events active. See local\n        unit display for further details.')
lgpCondId5776PDULowVoltageLN = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5776))
if mibBuilder.loadTexts: lgpCondId5776PDULowVoltageLN.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5776PDULowVoltageLN.setDescription('The system has detected a module under voltage condition (LN).')
lgpCondId5777PDULowVoltageLL = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5777))
if mibBuilder.loadTexts: lgpCondId5777PDULowVoltageLL.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5777PDULowVoltageLL.setDescription('The system has detected a module under voltage condition (LL).')
lgpCondId5778PDULowVoltageL1L2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5778))
if mibBuilder.loadTexts: lgpCondId5778PDULowVoltageL1L2.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5778PDULowVoltageL1L2.setDescription('The system has detected a line-to-line under voltage condition (L1\n        -L2).')
lgpCondId5779PDULowVoltageL2L3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5779))
if mibBuilder.loadTexts: lgpCondId5779PDULowVoltageL2L3.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5779PDULowVoltageL2L3.setDescription('The system has detected a line-to-line under voltage condition (L2\n        -L3).')
lgpCondId5780PDULowVoltageL3L1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5780))
if mibBuilder.loadTexts: lgpCondId5780PDULowVoltageL3L1.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5780PDULowVoltageL3L1.setDescription('The system has detected a line-to-line under voltage condition (L3\n        -L1).')
lgpCondId5781PDULowVoltageL1N = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5781))
if mibBuilder.loadTexts: lgpCondId5781PDULowVoltageL1N.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5781PDULowVoltageL1N.setDescription('The system has detected a line to neutral under voltage condition\n        (L1-N).')
lgpCondId5782PDULowVoltageL2N = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5782))
if mibBuilder.loadTexts: lgpCondId5782PDULowVoltageL2N.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5782PDULowVoltageL2N.setDescription('The system has detected a line to neutral under voltage condition\n        (L2-N).')
lgpCondId5783PDULowVoltageL3N = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5783))
if mibBuilder.loadTexts: lgpCondId5783PDULowVoltageL3N.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5783PDULowVoltageL3N.setDescription('The system has detected a line to neutral under voltage condition\n        (L3-N).')
lgpCondId5784BranchLowVoltageLN = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5784))
if mibBuilder.loadTexts: lgpCondId5784BranchLowVoltageLN.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5784BranchLowVoltageLN.setDescription('The system has detected a module under voltage condition (LN).')
lgpCondId5785BranchLowVoltageLL = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5785))
if mibBuilder.loadTexts: lgpCondId5785BranchLowVoltageLL.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5785BranchLowVoltageLL.setDescription('The system has detected a module under voltage condition (LL).')
lgpCondId5786BranchLowVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5786))
if mibBuilder.loadTexts: lgpCondId5786BranchLowVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5786BranchLowVoltage.setDescription('The system has detected a module under voltage condition.')
lgpCondId5788ContTieActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5788))
if mibBuilder.loadTexts: lgpCondId5788ContTieActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5788ContTieActive.setDescription('Continuous Power Tie Active.')
lgpCondId5792UserkWhReset = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5792))
if mibBuilder.loadTexts: lgpCondId5792UserkWhReset.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5792UserkWhReset.setDescription('The user kWh accumulator was reset to zero by the operator.')
lgpCondId5796PeakkWReset = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5796))
if mibBuilder.loadTexts: lgpCondId5796PeakkWReset.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5796PeakkWReset.setDescription('The Peak kW was reset.')
lgpCondId5798BypassOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5798))
if mibBuilder.loadTexts: lgpCondId5798BypassOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5798BypassOverload.setDescription('Bypass overloaded, reduce load immediately.')
lgpCondId5801LowBatteryShutdownImminent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5801))
if mibBuilder.loadTexts: lgpCondId5801LowBatteryShutdownImminent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5801LowBatteryShutdownImminent.setDescription('If active and guaranteed shutdown is enabled, a low battery\n        reserve condition exists that will shutdown the UPS.')
lgpCondId5806OutputOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5806))
if mibBuilder.loadTexts: lgpCondId5806OutputOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5806OutputOverload.setDescription('An overload exists on the output.')
lgpCondId5807OutputOffPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5807))
if mibBuilder.loadTexts: lgpCondId5807OutputOffPending.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5807OutputOffPending.setDescription('Output off pending - shutdown imminent.')
lgpCondId5808SystemShutdownOutputShort = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5808))
if mibBuilder.loadTexts: lgpCondId5808SystemShutdownOutputShort.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5808SystemShutdownOutputShort.setDescription('Shutdown was due to a short on the output.')
lgpCondId5809SystemShutdownLowBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5809))
if mibBuilder.loadTexts: lgpCondId5809SystemShutdownLowBattery.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5809SystemShutdownLowBattery.setDescription('Shutdown was due to a low battery condition.')
lgpCondId5810SystemShutdownRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5810))
if mibBuilder.loadTexts: lgpCondId5810SystemShutdownRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5810SystemShutdownRemoteShutdown.setDescription('Shutdown was due to a remote communications shutdown command.')
lgpCondId5811SystemShutdownHardwareFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5811))
if mibBuilder.loadTexts: lgpCondId5811SystemShutdownHardwareFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5811SystemShutdownHardwareFault.setDescription('Shutdown was due to an externally applied hardware control signal.')
lgpCondId5817LossofRedundancy = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5817))
if mibBuilder.loadTexts: lgpCondId5817LossofRedundancy.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5817LossofRedundancy.setDescription('The system has an insufficient number of power modules to provide\n        redundancy.')
lgpCondId5818PowerModuleFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5818))
if mibBuilder.loadTexts: lgpCondId5818PowerModuleFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5818PowerModuleFailure.setDescription('One or more conditions indicate a power module failure, service is\n        required.')
lgpCondId5819PowerModuleWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5819))
if mibBuilder.loadTexts: lgpCondId5819PowerModuleWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5819PowerModuleWarning.setDescription('One or more power modules is reporting a warning condition.')
lgpCondId5838PowerModuleFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5838))
if mibBuilder.loadTexts: lgpCondId5838PowerModuleFanFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5838PowerModuleFanFault.setDescription('The Power Module has detected a fan fault.')
lgpCondId5839PowerModuleOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5839))
if mibBuilder.loadTexts: lgpCondId5839PowerModuleOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5839PowerModuleOverTemperature.setDescription('The Power Module has detected an over temperature condition.')
lgpCondId5840PowerModuleShutdownOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5840))
if mibBuilder.loadTexts: lgpCondId5840PowerModuleShutdownOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5840PowerModuleShutdownOverTemperature.setDescription('Power Module has shutdown due to over temperature.')
lgpCondId5842ChargerModuleFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5842))
if mibBuilder.loadTexts: lgpCondId5842ChargerModuleFanFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5842ChargerModuleFanFault.setDescription('The Charger Module has detected a fan fault.')
lgpCondId5847BatteryModuleTemperatureSensorFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5847))
if mibBuilder.loadTexts: lgpCondId5847BatteryModuleTemperatureSensorFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5847BatteryModuleTemperatureSensorFault.setDescription('A Battery Module temperature sensor fault has been detected.')
lgpCondId5848BatteryModuleOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5848))
if mibBuilder.loadTexts: lgpCondId5848BatteryModuleOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5848BatteryModuleOverTemperature.setDescription('The Battery Module has detected an over temperature condition.')
lgpCondId5849ReplaceBatteryModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5849))
if mibBuilder.loadTexts: lgpCondId5849ReplaceBatteryModule.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5849ReplaceBatteryModule.setDescription('The Battery Module needs to be replaced.')
lgpCondId5850SystemShutdownTransformerOverTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5850))
if mibBuilder.loadTexts: lgpCondId5850SystemShutdownTransformerOverTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5850SystemShutdownTransformerOverTemperature.setDescription('System shutdown due to transformer over temperature.')
lgpCondId5851MaximumLoadAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5851))
if mibBuilder.loadTexts: lgpCondId5851MaximumLoadAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5851MaximumLoadAlarm.setDescription('Maximum load alarm indicating load setting has been exceeded.')
lgpCondId5856BatteryModuleFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5856))
if mibBuilder.loadTexts: lgpCondId5856BatteryModuleFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5856BatteryModuleFault.setDescription('One or more battery modules are reporting a fault condition.')
lgpCondId5857BatteryModuleWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5857))
if mibBuilder.loadTexts: lgpCondId5857BatteryModuleWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5857BatteryModuleWarning.setDescription('One or more battery modules are reporting a warning condition.')
lgpCondId5862CheckAirFilter = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5862))
if mibBuilder.loadTexts: lgpCondId5862CheckAirFilter.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5862CheckAirFilter.setDescription('Please check air filter, it may need to be cleaned or replaced.')
lgpCondId5863TransformerFanFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5863))
if mibBuilder.loadTexts: lgpCondId5863TransformerFanFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5863TransformerFanFault.setDescription('The transformer fan has failed.')
lgpCondId5865NoLoadWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5865))
if mibBuilder.loadTexts: lgpCondId5865NoLoadWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5865NoLoadWarning.setDescription('Indicates the UPS has output voltage but the output current is\n        below a set threshold [No Load Warning Current Threshold] for a\n        set period of time [No Load Warning Delay].')
lgpCondId5871BatteryOverTemperatureLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5871))
if mibBuilder.loadTexts: lgpCondId5871BatteryOverTemperatureLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5871BatteryOverTemperatureLimit.setDescription('A battery temperature sensor is reporting a value above a\n        predetermined limit.')
lgpCondId5873UnexpectedMainBatteryDisconnectClosure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5873))
if mibBuilder.loadTexts: lgpCondId5873UnexpectedMainBatteryDisconnectClosure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5873UnexpectedMainBatteryDisconnectClosure.setDescription('The main battery disconnect has closed unexpectedly.')
lgpCondId5874BatteryOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5874))
if mibBuilder.loadTexts: lgpCondId5874BatteryOverVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5874BatteryOverVoltage.setDescription('The system has detected that the battery voltage has exceeded a\n        predetermined limit.')
lgpCondId5875BatteryFuseFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5875))
if mibBuilder.loadTexts: lgpCondId5875BatteryFuseFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5875BatteryFuseFault.setDescription('One or more battery fuse faults has occurred.')
lgpCondId5878MainBatteryDisconnectForcedToUnlock = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5878))
if mibBuilder.loadTexts: lgpCondId5878MainBatteryDisconnectForcedToUnlock.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5878MainBatteryDisconnectForcedToUnlock.setDescription('The main battery disconnect is forced to the unlocked state.')
lgpCondId5879VdcBackfeed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5879))
if mibBuilder.loadTexts: lgpCondId5879VdcBackfeed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5879VdcBackfeed.setDescription('The voltage between battery and DC bus measurements is out of\n        tolerance.')
lgpCondId5880RectifierConfigurationChangeRequest = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5880))
if mibBuilder.loadTexts: lgpCondId5880RectifierConfigurationChangeRequest.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5880RectifierConfigurationChangeRequest.setDescription('This event indicates that the battery is not configured and PFC is\n        not enabled.')
lgpCondId5881RegenerationActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5881))
if mibBuilder.loadTexts: lgpCondId5881RegenerationActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5881RegenerationActive.setDescription('Regeneration operation is active.')
lgpCondId5882RegenerationOperationTerminated = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5882))
if mibBuilder.loadTexts: lgpCondId5882RegenerationOperationTerminated.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5882RegenerationOperationTerminated.setDescription('Regeneration operation is not active.')
lgpCondId5883RegenerationOperationFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5883))
if mibBuilder.loadTexts: lgpCondId5883RegenerationOperationFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5883RegenerationOperationFailure.setDescription('Regeneration operation has been terminated due to bypass source\n        instability or unit misoperation.')
lgpCondId5884ProgramInputContact01 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5884))
if mibBuilder.loadTexts: lgpCondId5884ProgramInputContact01.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5884ProgramInputContact01.setDescription('When the signal from [Program Input Contact 01] is active the\n        function assigned to this contact is executed.')
lgpCondId5885ProgramInputContact02 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5885))
if mibBuilder.loadTexts: lgpCondId5885ProgramInputContact02.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5885ProgramInputContact02.setDescription('When the signal from [Program Input Contact 02] is active the\n        function assigned to this contact is executed.')
lgpCondId5886ProgramInputContact03 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5886))
if mibBuilder.loadTexts: lgpCondId5886ProgramInputContact03.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5886ProgramInputContact03.setDescription('When the signal from [Program Input Contact 03] is active the\n        function assigned to this contact is executed.')
lgpCondId5887ProgramInputContact04 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5887))
if mibBuilder.loadTexts: lgpCondId5887ProgramInputContact04.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5887ProgramInputContact04.setDescription('When the signal from [Program Input Contact 04] is active the\n        function assigned to this contact is executed.')
lgpCondId5888ProgramInputContact05 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5888))
if mibBuilder.loadTexts: lgpCondId5888ProgramInputContact05.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5888ProgramInputContact05.setDescription('When the signal from [Program Input Contact 05] is active the\n        function assigned to this contact is executed.')
lgpCondId5889ProgramInputContact06 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5889))
if mibBuilder.loadTexts: lgpCondId5889ProgramInputContact06.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5889ProgramInputContact06.setDescription('When the signal from [Program Input Contact 06] is active the\n        function assigned to this contact is executed.')
lgpCondId5890ProgramInputContact07 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5890))
if mibBuilder.loadTexts: lgpCondId5890ProgramInputContact07.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5890ProgramInputContact07.setDescription('When the signal from [Program Input Contact 07] is active the\n        function assigned to this contact is executed.')
lgpCondId5891ProgramInputContact08 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5891))
if mibBuilder.loadTexts: lgpCondId5891ProgramInputContact08.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5891ProgramInputContact08.setDescription('When the signal from [Program Input Contact 08] is active the\n        function assigned to this contact is executed.')
lgpCondId5892ProgramInputContact09 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5892))
if mibBuilder.loadTexts: lgpCondId5892ProgramInputContact09.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5892ProgramInputContact09.setDescription('When the signal from [Program Input Contact 09] is active the\n        function assigned to this contact is executed.')
lgpCondId5893ProgramInputContact10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5893))
if mibBuilder.loadTexts: lgpCondId5893ProgramInputContact10.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5893ProgramInputContact10.setDescription('When the signal from [Program Input Contact 10] is active the\n        function assigned to this contact is executed.')
lgpCondId5894ProgramInputContact11 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5894))
if mibBuilder.loadTexts: lgpCondId5894ProgramInputContact11.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5894ProgramInputContact11.setDescription('When the signal from [Program Input Contact 11] is active the\n        function assigned to this contact is executed.')
lgpCondId5895ProgramInputContact12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5895))
if mibBuilder.loadTexts: lgpCondId5895ProgramInputContact12.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5895ProgramInputContact12.setDescription('When the signal from [Program Input Contact 12] is active the\n        function assigned to this contact is executed.')
lgpCondId5896GroundFaultDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5896))
if mibBuilder.loadTexts: lgpCondId5896GroundFaultDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5896GroundFaultDetected.setDescription('The system has detected a ground fault on a Battery-String.')
lgpCondId5902ReturnHumiditySensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5902))
if mibBuilder.loadTexts: lgpCondId5902ReturnHumiditySensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5902ReturnHumiditySensorIssue.setDescription('The humidity sensor at the inlet of the unit is disconnected or\n        the signal is out of range.')
lgpCondId5903CompressorLowDifferentialPressureLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5903))
if mibBuilder.loadTexts: lgpCondId5903CompressorLowDifferentialPressureLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5903CompressorLowDifferentialPressureLockout.setDescription('Compressor exceeded maximum startup attempts due to low\n        differential pressure. Compressor is shutdown and has been\n        disabled.')
lgpCondId5906AirflowSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5906))
if mibBuilder.loadTexts: lgpCondId5906AirflowSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5906AirflowSensorIssue.setDescription('Airflow sensor is disconnected or the signal is out of range.')
lgpCondId5907ExtAirDamperPositionIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5907))
if mibBuilder.loadTexts: lgpCondId5907ExtAirDamperPositionIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5907ExtAirDamperPositionIssue.setDescription('Air damper position does not match expected value, as indicated by\n        an external input signal.')
lgpCondId5908ExtPowerSourceAFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5908))
if mibBuilder.loadTexts: lgpCondId5908ExtPowerSourceAFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5908ExtPowerSourceAFailure.setDescription('Unit main power source A failure, as indicated by an external\n        input signal.')
lgpCondId5909ExtPowerSourceBFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5909))
if mibBuilder.loadTexts: lgpCondId5909ExtPowerSourceBFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5909ExtPowerSourceBFailure.setDescription('Unit main power source B failure, as indicated by an external\n        input signal.')
lgpCondId5910StaticPressureSensorOutofRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5910))
if mibBuilder.loadTexts: lgpCondId5910StaticPressureSensorOutofRange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5910StaticPressureSensorOutofRange.setDescription('Static pressure sensor signal is out of its configured range.')
lgpCondId5911FluidTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5911))
if mibBuilder.loadTexts: lgpCondId5911FluidTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5911FluidTemperatureSensorIssue.setDescription('The fluid temperature sensor is disconnected or the signal is out\n        of range.')
lgpCondId5912FluidFlowSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5912))
if mibBuilder.loadTexts: lgpCondId5912FluidFlowSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5912FluidFlowSensorIssue.setDescription('The fluid flow sensor is disconnected or the signal is out of\n        range.')
lgpCondId5914OverDifferentialPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5914))
if mibBuilder.loadTexts: lgpCondId5914OverDifferentialPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5914OverDifferentialPressure.setDescription('An over differential pressure condition was detected.')
lgpCondId5915UnderDifferentialPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5915))
if mibBuilder.loadTexts: lgpCondId5915UnderDifferentialPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5915UnderDifferentialPressure.setDescription('An under differential pressure condition was detected.')
lgpCondId5924MixedModeLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5924))
if mibBuilder.loadTexts: lgpCondId5924MixedModeLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5924MixedModeLockout.setDescription('Mixed mode has been entered too many times over a rolling time\n        period and has been temporarily disabled.  Mixed mode is defined\n        as the use of a compressor on one refrigeration circuit and the\n        use of a refrigerant pump on the other circuit.')
lgpCondId5928UnbalancedLoadCondition = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5928))
if mibBuilder.loadTexts: lgpCondId5928UnbalancedLoadCondition.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5928UnbalancedLoadCondition.setDescription('The system has detected a line-to-line unbalanced load condition.')
lgpCondId5939BranchOverCurrentProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5939))
if mibBuilder.loadTexts: lgpCondId5939BranchOverCurrentProtection.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5939BranchOverCurrentProtection.setDescription("The Branch Receptacle Module's over current protection is\n        triggered.")
lgpCondId5948BranchLowVoltageLL = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5948))
if mibBuilder.loadTexts: lgpCondId5948BranchLowVoltageLL.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5948BranchLowVoltageLL.setDescription('The system has detected a module under voltage condition (LL).')
lgpCondId5957BypassInputVoltageFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5957))
if mibBuilder.loadTexts: lgpCondId5957BypassInputVoltageFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5957BypassInputVoltageFault.setDescription('The system has detected the bypass voltage is unqualified.')
lgpCondId5958BatteryTemperatureOutofRange = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5958))
if mibBuilder.loadTexts: lgpCondId5958BatteryTemperatureOutofRange.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5958BatteryTemperatureOutofRange.setDescription('Battery temperature is outside of acceptable range.')
lgpCondId5960InverterOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5960))
if mibBuilder.loadTexts: lgpCondId5960InverterOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5960InverterOverload.setDescription('Inverter in overload fault.')
lgpCondId5966AuxAirTempDeviceCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5966))
if mibBuilder.loadTexts: lgpCondId5966AuxAirTempDeviceCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5966AuxAirTempDeviceCommunicationLost.setDescription('Communication with external auxiliary device providing an air\n        temperature value has been lost.')
lgpCondId5967ModbusPowerMeterCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5967))
if mibBuilder.loadTexts: lgpCondId5967ModbusPowerMeterCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5967ModbusPowerMeterCommunicationLost.setDescription('Communication with Modbus power meter has been lost.')
lgpCondId5968InverterDesaturation = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5968))
if mibBuilder.loadTexts: lgpCondId5968InverterDesaturation.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5968InverterDesaturation.setDescription('Inverter Desaturation.')
lgpCondId5969GenericDICFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5969))
if mibBuilder.loadTexts: lgpCondId5969GenericDICFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5969GenericDICFault.setDescription('The control board reports a fault - Service required.')
lgpCondId5970GroundFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5970))
if mibBuilder.loadTexts: lgpCondId5970GroundFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5970GroundFault.setDescription('An AC phase to ground fault or three phase fault to ground exists\n        on the output of the UPS.')
lgpCondId5973InputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5973))
if mibBuilder.loadTexts: lgpCondId5973InputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5973InputBreakerOpen.setDescription('The main input breaker is open.')
lgpCondId5974NeutralBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5974))
if mibBuilder.loadTexts: lgpCondId5974NeutralBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5974NeutralBreakerOpen.setDescription('The neutral breaker is open.')
lgpCondId5975OutputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5975))
if mibBuilder.loadTexts: lgpCondId5975OutputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5975OutputBreakerOpen.setDescription('The output breaker is open.')
lgpCondId5976MaintenanceBypassBreakerClosed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5976))
if mibBuilder.loadTexts: lgpCondId5976MaintenanceBypassBreakerClosed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5976MaintenanceBypassBreakerClosed.setDescription('The maintenance bypass breaker is closed.')
lgpCondId5977BatteryBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5977))
if mibBuilder.loadTexts: lgpCondId5977BatteryBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5977BatteryBreakerOpen.setDescription('The battery circuit is open.')
lgpCondId5978RectifierIsolationBreakerRFBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5978))
if mibBuilder.loadTexts: lgpCondId5978RectifierIsolationBreakerRFBOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5978RectifierIsolationBreakerRFBOpen.setDescription('The rectifier isolation breaker (RFB) indicates that it is in the\n        open position.')
lgpCondId5982BypassBreakerSBBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5982))
if mibBuilder.loadTexts: lgpCondId5982BypassBreakerSBBOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5982BypassBreakerSBBOpen.setDescription('The bypass circuit breaker (SBB) indicates that it is in the open\n        position.')
lgpCondId5983BypassIsolationBreakerBIBOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5983))
if mibBuilder.loadTexts: lgpCondId5983BypassIsolationBreakerBIBOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5983BypassIsolationBreakerBIBOpen.setDescription('The bypass isolation breaker (BIB) indicates that it is in the\n        open position.')
lgpCondId5984BypassUndervoltageWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5984))
if mibBuilder.loadTexts: lgpCondId5984BypassUndervoltageWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5984BypassUndervoltageWarning.setDescription('The voltage on one or more bypass phases is less than a specified\n        percentage of the nominal voltage.')
lgpCondId5985BypassStaticSwitchBPSSOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5985))
if mibBuilder.loadTexts: lgpCondId5985BypassStaticSwitchBPSSOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5985BypassStaticSwitchBPSSOn.setDescription('The Bypass Static Switch has been turned on.')
lgpCondId5998BattOvtempWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 5998))
if mibBuilder.loadTexts: lgpCondId5998BattOvtempWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId5998BattOvtempWarning.setDescription('A battery temperature sensor is reporting a value above the\n        setpoint.')
lgpCondId6009InverterOutputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6009))
if mibBuilder.loadTexts: lgpCondId6009InverterOutputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6009InverterOutputBreakerOpen.setDescription('The inverter output breaker indicates that it is in the open\n        position.')
lgpCondId6011EquipmentOverTempWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6011))
if mibBuilder.loadTexts: lgpCondId6011EquipmentOverTempWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6011EquipmentOverTempWarning.setDescription('Equipment over temperature warning is a summary event based on the\n        detection of at least one measured temperature exceeding a\n        threshold.')
lgpCondId6012EquipmentOvertemperatureLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6012))
if mibBuilder.loadTexts: lgpCondId6012EquipmentOvertemperatureLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6012EquipmentOvertemperatureLimit.setDescription('The equipment air temperature has exceeded its maximum set point.')
lgpCondId6045RectifierInputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6045))
if mibBuilder.loadTexts: lgpCondId6045RectifierInputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6045RectifierInputBreakerOpen.setDescription('The rectifier isolation breaker indicates that it is in the open\n        position.')
lgpCondId6046LoadonUPS = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6046))
if mibBuilder.loadTexts: lgpCondId6046LoadonUPS.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6046LoadonUPS.setDescription('The output is being supplied power from the inverter.')
lgpCondId6047Core2CoreFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6047))
if mibBuilder.loadTexts: lgpCondId6047Core2CoreFuseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6047Core2CoreFuseFailure.setDescription('Core-2-core fuse failure.')
lgpCondId6052SystemOutputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6052))
if mibBuilder.loadTexts: lgpCondId6052SystemOutputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6052SystemOutputBreakerOpen.setDescription('The system output breaker is open.')
lgpCondId6059InverterRelayFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6059))
if mibBuilder.loadTexts: lgpCondId6059InverterRelayFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6059InverterRelayFault.setDescription('The inverter relay has malfunctioned.')
lgpCondId6060TransfertoBypassSystemOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6060))
if mibBuilder.loadTexts: lgpCondId6060TransfertoBypassSystemOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6060TransfertoBypassSystemOverload.setDescription('The UPS System has transferred to bypass because the active power\n        modules cannot support the critical load.')
lgpCondId6061InputSourceBackfeed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6061))
if mibBuilder.loadTexts: lgpCondId6061InputSourceBackfeed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6061InputSourceBackfeed.setDescription('The battery is backfeeding the input source.')
lgpCondId6062LossofSynchronization = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6062))
if mibBuilder.loadTexts: lgpCondId6062LossofSynchronization.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6062LossofSynchronization.setDescription('The inverter and bypass are no longer synchronized. .')
lgpCondId6063BatteryConverterCurrentLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6063))
if mibBuilder.loadTexts: lgpCondId6063BatteryConverterCurrentLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6063BatteryConverterCurrentLimit.setDescription('The battery converter has reached is maximum current limit.  .')
lgpCondId6064LBSCableFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6064))
if mibBuilder.loadTexts: lgpCondId6064LBSCableFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6064LBSCableFailure.setDescription('Load Bus Sync communications is abnormal. A problem with the LBS\n        cable may exist.')
lgpCondId6065BatteryChargeEqualizationTimeout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6065))
if mibBuilder.loadTexts: lgpCondId6065BatteryChargeEqualizationTimeout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6065BatteryChargeEqualizationTimeout.setDescription('The battery equalizing is time out.')
lgpCondId6066ParallelCableFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6066))
if mibBuilder.loadTexts: lgpCondId6066ParallelCableFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6066ParallelCableFailure.setDescription('The UPS parallel system communications is abnormal. A problem with\n        the parallel cable may exist.')
lgpCondId6067BatteryFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6067))
if mibBuilder.loadTexts: lgpCondId6067BatteryFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6067BatteryFault.setDescription('A short circuit exists in the battery system.')
lgpCondId6068BatteryRoomAlarm = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6068))
if mibBuilder.loadTexts: lgpCondId6068BatteryRoomAlarm.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6068BatteryRoomAlarm.setDescription('The ambient temperature of the battery room is abnormal.')
lgpCondId6080UPSCCommunicationFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6080))
if mibBuilder.loadTexts: lgpCondId6080UPSCCommunicationFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6080UPSCCommunicationFailure.setDescription('The UPSC has failed to communicate in a designated time period.')
lgpCondId6092Compressor1BThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6092))
if mibBuilder.loadTexts: lgpCondId6092Compressor1BThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6092Compressor1BThermalOverload.setDescription('Fixed compressor 1B is shut down due to thermal overload.')
lgpCondId6093Compressor2BThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6093))
if mibBuilder.loadTexts: lgpCondId6093Compressor2BThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6093Compressor2BThermalOverload.setDescription('Fixed compressor 2B is shut down due to thermal overload.')
lgpCondId6094Compressor1BHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6094))
if mibBuilder.loadTexts: lgpCondId6094Compressor1BHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6094Compressor1BHoursExceeded.setDescription('Fixed compressor 1B run hours have exceeded the threshold.')
lgpCondId6095Compressor2BHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6095))
if mibBuilder.loadTexts: lgpCondId6095Compressor2BHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6095Compressor2BHoursExceeded.setDescription('Fixed compressor 2B run hours have exceeded the threshold.')
lgpCondId6100CondenserRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6100))
if mibBuilder.loadTexts: lgpCondId6100CondenserRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6100CondenserRemoteShutdown.setDescription('Condenser is shut down by a remote signal.')
lgpCondId6105ExternalCondenserTVSSIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6105))
if mibBuilder.loadTexts: lgpCondId6105ExternalCondenserTVSSIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6105ExternalCondenserTVSSIssue.setDescription('The condenser Transient Voltage Surge Suppressor or Surge\n        Protection Device has failed, as indicated by an external input\n        signal.')
lgpCondId6106ExternalCondenserVFDIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6106))
if mibBuilder.loadTexts: lgpCondId6106ExternalCondenserVFDIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6106ExternalCondenserVFDIssue.setDescription('The condenser fan Variable Frequency Drive is offline, as\n        indicated by an external input signal.')
lgpCondId6107ExternalCondenserIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6107))
if mibBuilder.loadTexts: lgpCondId6107ExternalCondenserIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6107ExternalCondenserIssue.setDescription('Condenser is not operating within its operational parameters, as\n        indicated by an external input signal.')
lgpCondId6119Slotsnotavailable = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6119))
if mibBuilder.loadTexts: lgpCondId6119Slotsnotavailable.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6119Slotsnotavailable.setDescription('The number of sensors exceeds the number of allocated slots and\n        cannot be displayed.')
lgpCondId6180BatteryUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6180))
if mibBuilder.loadTexts: lgpCondId6180BatteryUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6180BatteryUnderVoltage.setDescription('Battery voltage is too low.')
lgpCondId6182ReplaceBattery = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6182))
if mibBuilder.loadTexts: lgpCondId6182ReplaceBattery.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6182ReplaceBattery.setDescription('The battery is due for replacement.')
lgpCondId6186InputFrequencyDeviation = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6186))
if mibBuilder.loadTexts: lgpCondId6186InputFrequencyDeviation.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6186InputFrequencyDeviation.setDescription('The input frequency is outside of the normal range.')
lgpCondId6187ShutdownPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6187))
if mibBuilder.loadTexts: lgpCondId6187ShutdownPending.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6187ShutdownPending.setDescription('Shutdown is pending.')
lgpCondId6194SystemRebootCommandIssued = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6194))
if mibBuilder.loadTexts: lgpCondId6194SystemRebootCommandIssued.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6194SystemRebootCommandIssued.setDescription('Reboot command issued to the system.')
lgpCondId6203SensorAdded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6203))
if mibBuilder.loadTexts: lgpCondId6203SensorAdded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6203SensorAdded.setDescription('Sensor Added.')
lgpCondId6204SensorRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6204))
if mibBuilder.loadTexts: lgpCondId6204SensorRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6204SensorRemoved.setDescription('Sensor Removed.')
lgpCondId6205WaterLeakDetected = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6205))
if mibBuilder.loadTexts: lgpCondId6205WaterLeakDetected.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6205WaterLeakDetected.setDescription('Water leak detected.')
lgpCondId6210FirmwareUpdateInProgress = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6210))
if mibBuilder.loadTexts: lgpCondId6210FirmwareUpdateInProgress.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6210FirmwareUpdateInProgress.setDescription('Firmware update has started and is in progress.')
lgpCondId6211FirmwareUpdateCompletedSuccessfully = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6211))
if mibBuilder.loadTexts: lgpCondId6211FirmwareUpdateCompletedSuccessfully.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6211FirmwareUpdateCompletedSuccessfully.setDescription('Firmware update has completed successfully.')
lgpCondId6212FirmwareUpdateCompletedUnsuccessfully = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6212))
if mibBuilder.loadTexts: lgpCondId6212FirmwareUpdateCompletedUnsuccessfully.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6212FirmwareUpdateCompletedUnsuccessfully.setDescription('Firmware update has completed, but was not successful.')
lgpCondId6216PrechargeCircuitFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6216))
if mibBuilder.loadTexts: lgpCondId6216PrechargeCircuitFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6216PrechargeCircuitFailed.setDescription("DC Bus precharge/discharge didn't reach specified level within a\n        specified time.")
lgpCondId6217MemoryCardRemoved = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6217))
if mibBuilder.loadTexts: lgpCondId6217MemoryCardRemoved.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6217MemoryCardRemoved.setDescription('The memory card on the control board has been removed.')
lgpCondId6218AutoCalibrationActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6218))
if mibBuilder.loadTexts: lgpCondId6218AutoCalibrationActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6218AutoCalibrationActive.setDescription('The system is automatically calibrating ADC channels.')
lgpCondId6219AutoCalibrationFailed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6219))
if mibBuilder.loadTexts: lgpCondId6219AutoCalibrationFailed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6219AutoCalibrationFailed.setDescription('ADC channel calibration has failed.')
lgpCondId6220ModuleOutputBreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6220))
if mibBuilder.loadTexts: lgpCondId6220ModuleOutputBreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6220ModuleOutputBreakerOpen.setDescription('The module output breaker is open.')
lgpCondId6221NeutralVoltageFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6221))
if mibBuilder.loadTexts: lgpCondId6221NeutralVoltageFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6221NeutralVoltageFault.setDescription('Voltage observed on neutral line.')
lgpCondId6222BranchLoadLoss = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6222))
if mibBuilder.loadTexts: lgpCondId6222BranchLoadLoss.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6222BranchLoadLoss.setDescription('Loss of load on branch detected. Branch circuit breaker might be\n        open.')
lgpCondId6225RemoteSensorLowHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6225))
if mibBuilder.loadTexts: lgpCondId6225RemoteSensorLowHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6225RemoteSensorLowHumidity.setDescription('Remote sensor humidity has dropped below a lower threshold.  The\n        event is deactivated when the humidity rises above the threshold.')
lgpCondId6226RemoteSensorHighHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6226))
if mibBuilder.loadTexts: lgpCondId6226RemoteSensorHighHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6226RemoteSensorHighHumidity.setDescription('Remote sensor humidity has exceeded an upper threshold.  The event\n        is deactivated when the humidity drops below the threshold.')
lgpCondId6227RemoteSensorAverageLowHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6227))
if mibBuilder.loadTexts: lgpCondId6227RemoteSensorAverageLowHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6227RemoteSensorAverageLowHumidity.setDescription('The average humidity of multiple remote sensors on the cooling\n        unit has dropped below a lower threshold.   The event is\n        deactivated when the humidity rises above the threshold.')
lgpCondId6228RemoteSensorAverageHighHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6228))
if mibBuilder.loadTexts: lgpCondId6228RemoteSensorAverageHighHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6228RemoteSensorAverageHighHumidity.setDescription('The average humidity of multiple remote sensors on the cooling\n        unit has exceeded an upper threshold.   The event is deactivated\n        when the humidity drops below the threshold.')
lgpCondId6229RemoteSensorSystemAverageLowHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6229))
if mibBuilder.loadTexts: lgpCondId6229RemoteSensorSystemAverageLowHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6229RemoteSensorSystemAverageLowHumidity.setDescription('The average humidity of multiple remote sensors on interconnected\n        cooling units in a single system has dropped below a lower\n        threshold.   The event is deactivated when the humidity rises\n        above the threshold.')
lgpCondId6230RemoteSensorSystemAverageHighHumidity = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6230))
if mibBuilder.loadTexts: lgpCondId6230RemoteSensorSystemAverageHighHumidity.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6230RemoteSensorSystemAverageHighHumidity.setDescription('The average humidity of multiple remote sensors on interconnected\n        cooling units in a single system has exceeded an upper threshold.\n        The event is deactivated when the humidity drops below the\n        threshold.')
lgpCondId6231LowCompressorSuperheat = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6231))
if mibBuilder.loadTexts: lgpCondId6231LowCompressorSuperheat.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6231LowCompressorSuperheat.setDescription('Compressor suction superheat has dropped below a lower threshold.')
lgpCondId6232SECUnspecifiedGeneralEvent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6232))
if mibBuilder.loadTexts: lgpCondId6232SECUnspecifiedGeneralEvent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6232SECUnspecifiedGeneralEvent.setDescription('One or more unspecified events active for the Superheat and\n        Envelope Controller.  See local unit display for further details.')
lgpCondId6233SECCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6233))
if mibBuilder.loadTexts: lgpCondId6233SECCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6233SECCommunicationLost.setDescription('Communication with the Superheat and Envelope Controller has been\n        lost.  The event is deactivated when communication is re\n        -established.')
lgpCondId6236PowerSourceAIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6236))
if mibBuilder.loadTexts: lgpCondId6236PowerSourceAIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6236PowerSourceAIssue.setDescription("No power is detected at power source input 'A'.")
lgpCondId6237PowerSourceBIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6237))
if mibBuilder.loadTexts: lgpCondId6237PowerSourceBIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6237PowerSourceBIssue.setDescription("No power is detected at power source input 'B'.")
lgpCondId6239FluidValveHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6239))
if mibBuilder.loadTexts: lgpCondId6239FluidValveHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6239FluidValveHoursExceeded.setDescription('Operating hours for the fluid valve have exceeded the threshold.')
lgpCondId6253BoosterFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6253))
if mibBuilder.loadTexts: lgpCondId6253BoosterFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6253BoosterFailure.setDescription('Booster failure - boost is off.')
lgpCondId6254ChargerFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6254))
if mibBuilder.loadTexts: lgpCondId6254ChargerFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6254ChargerFailure.setDescription('Charger Failure - Charger is off.')
lgpCondId6274UnitTopReturnAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6274))
if mibBuilder.loadTexts: lgpCondId6274UnitTopReturnAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6274UnitTopReturnAirSensorFailure.setDescription('Return air sensor at the top of the unit is disconnected or the\n        signal is out of range.')
lgpCondId6275UnitMiddleReturnAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6275))
if mibBuilder.loadTexts: lgpCondId6275UnitMiddleReturnAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6275UnitMiddleReturnAirSensorFailure.setDescription('Return air sensor in the middle of the unit is disconnected or the\n        signal is out of range.')
lgpCondId6276UnitBottomReturnAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6276))
if mibBuilder.loadTexts: lgpCondId6276UnitBottomReturnAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6276UnitBottomReturnAirSensorFailure.setDescription('Return air sensor at the bottom of the unit is disconnected or the\n        signal is out of range.')
lgpCondId6277UnitTopSupplyAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6277))
if mibBuilder.loadTexts: lgpCondId6277UnitTopSupplyAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6277UnitTopSupplyAirSensorFailure.setDescription('Supply air sensor at the top of the unit is disconnected or the\n        signal is out of range.')
lgpCondId6278UnitMiddleFirstSupplyAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6278))
if mibBuilder.loadTexts: lgpCondId6278UnitMiddleFirstSupplyAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6278UnitMiddleFirstSupplyAirSensorFailure.setDescription('First supply air sensor in the middle of the unit is disconnected\n        or the signal is out of range.')
lgpCondId6279UnitBottomSupplyAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6279))
if mibBuilder.loadTexts: lgpCondId6279UnitBottomSupplyAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6279UnitBottomSupplyAirSensorFailure.setDescription('Supply air sensor at the bottom of the unit is disconnected or the\n        signal is out of range.')
lgpCondId6284UnitMiddleSecondSupplyAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6284))
if mibBuilder.loadTexts: lgpCondId6284UnitMiddleSecondSupplyAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6284UnitMiddleSecondSupplyAirSensorFailure.setDescription('Second supply air sensor in the middle of the unit is disconnected\n        or the signal is out of range.')
lgpCondId6293ChilledWaterControlActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6293))
if mibBuilder.loadTexts: lgpCondId6293ChilledWaterControlActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6293ChilledWaterControlActive.setDescription("Chilled water inlet temperature control function is enabled due to\n        'bad' water.")
lgpCondId6294ChilledWaterFlowTransducerFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6294))
if mibBuilder.loadTexts: lgpCondId6294ChilledWaterFlowTransducerFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6294ChilledWaterFlowTransducerFailure.setDescription('Chilled water flow transducer is disconnected or the signal is out\n        of range.')
lgpCondId6295ChilledWaterInletTemperatureSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6295))
if mibBuilder.loadTexts: lgpCondId6295ChilledWaterInletTemperatureSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6295ChilledWaterInletTemperatureSensorFailure.setDescription('Chilled water inlet temperature sensor is disconnected or the\n        signal is out of range.   The sensor is mandatory for the chilled\n        water flow function.')
lgpCondId6296ChilledWaterHighInletTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6296))
if mibBuilder.loadTexts: lgpCondId6296ChilledWaterHighInletTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6296ChilledWaterHighInletTemperature.setDescription('Chilled water inlet temperature has exceeded an upper threshold.')
lgpCondId6297Modbus010VModuleCommunicationFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6297))
if mibBuilder.loadTexts: lgpCondId6297Modbus010VModuleCommunicationFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6297Modbus010VModuleCommunicationFailure.setDescription('Modbus 0-10V module for managing the second Chilled Water circuit\n        valve is disconnected or the signal is out of range.')
lgpCondId6299RackDoorsOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6299))
if mibBuilder.loadTexts: lgpCondId6299RackDoorsOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6299RackDoorsOpen.setDescription('Rack doors opened due to supply air temperature exceeding the\n        [Rack Door Open High Supply Air Temperature Threshold].')
lgpCondId6303TeamStaticPressureSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6303))
if mibBuilder.loadTexts: lgpCondId6303TeamStaticPressureSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6303TeamStaticPressureSensorFailure.setDescription('The team static pressure sensor is disconnected or the signal is\n        out of range.')
lgpCondId6304HeatingLockout = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6304))
if mibBuilder.loadTexts: lgpCondId6304HeatingLockout.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6304HeatingLockout.setDescription('Heating is shut down and disabled.')
lgpCondId6305FreeCoolingStoppedHighRoomTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6305))
if mibBuilder.loadTexts: lgpCondId6305FreeCoolingStoppedHighRoomTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6305FreeCoolingStoppedHighRoomTemp.setDescription('Free cooling is temporarily disabled due to room temperature\n        exceeding a preset delta above the the set point.')
lgpCondId6306ColdAisleTemperatureHumidityTeamSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6306))
if mibBuilder.loadTexts: lgpCondId6306ColdAisleTemperatureHumidityTeamSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6306ColdAisleTemperatureHumidityTeamSensorFailure.setDescription('Cold aisle team sensor measuring air temperature and humidity is\n        disconnected or the signal is out of range.')
lgpCondId6309ColdAisleAirSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6309))
if mibBuilder.loadTexts: lgpCondId6309ColdAisleAirSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6309ColdAisleAirSensorFailure.setDescription('Cold aisle sensor measuring air temperature and humidity is\n        disconnected or the signal is out of range.')
lgpCondId6310ChilledWaterInletTemperatureControlActive = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6310))
if mibBuilder.loadTexts: lgpCondId6310ChilledWaterInletTemperatureControlActive.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6310ChilledWaterInletTemperatureControlActive.setDescription('Chilled water inlet temperature control is active.')
lgpCondId6313ChilledWaterInletTemperatureSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6313))
if mibBuilder.loadTexts: lgpCondId6313ChilledWaterInletTemperatureSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6313ChilledWaterInletTemperatureSensorFailure.setDescription('Chilled water inlet temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId6314ChilledWaterOutletTemperatureSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6314))
if mibBuilder.loadTexts: lgpCondId6314ChilledWaterOutletTemperatureSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6314ChilledWaterOutletTemperatureSensorFailure.setDescription('Chilled water outlet temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId6315ChilledWaterFlowMeterSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6315))
if mibBuilder.loadTexts: lgpCondId6315ChilledWaterFlowMeterSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6315ChilledWaterFlowMeterSensorFailure.setDescription('Chilled water flow meter sensor is disconnected or the signal is\n        out of range.')
lgpCondId6333Bypassoutofsync = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6333))
if mibBuilder.loadTexts: lgpCondId6333Bypassoutofsync.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6333Bypassoutofsync.setDescription('Bypass and Inverter inputs are not in sync.')
lgpCondId6348SystemOutputoffasrequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6348))
if mibBuilder.loadTexts: lgpCondId6348SystemOutputoffasrequested.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6348SystemOutputoffasrequested.setDescription('The UPS has shutdown as requested, i.e., the output is off.')
lgpCondId6349SystemOffasrequested = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6349))
if mibBuilder.loadTexts: lgpCondId6349SystemOffasrequested.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6349SystemOffasrequested.setDescription('The entire UPS has shutdown as commanded.')
lgpCondId6350GeneralFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6350))
if mibBuilder.loadTexts: lgpCondId6350GeneralFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6350GeneralFault.setDescription('A general fault in the UPS has been detected.')
lgpCondId6351UPSAwaitingPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6351))
if mibBuilder.loadTexts: lgpCondId6351UPSAwaitingPower.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6351UPSAwaitingPower.setDescription('The UPS output is off and the UPS is awaiting the return of input\n        power.')
lgpCondId6352AutonomyCalibration = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6352))
if mibBuilder.loadTexts: lgpCondId6352AutonomyCalibration.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6352AutonomyCalibration.setDescription('Calibration test occurred.')
lgpCondId6353GeneralWarning = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6353))
if mibBuilder.loadTexts: lgpCondId6353GeneralWarning.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6353GeneralWarning.setDescription('A warning in the UPS has been detected.')
lgpCondId6354BatteryCharging = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6354))
if mibBuilder.loadTexts: lgpCondId6354BatteryCharging.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6354BatteryCharging.setDescription('The UPS battery is charging (battery charge percentage lower than\n        98).')
lgpCondId6355BackfeedRelayFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6355))
if mibBuilder.loadTexts: lgpCondId6355BackfeedRelayFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6355BackfeedRelayFailure.setDescription('Bypass SCR is wrongly on or commutated.')
lgpCondId6356BatteryCircuitOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6356))
if mibBuilder.loadTexts: lgpCondId6356BatteryCircuitOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6356BatteryCircuitOpen.setDescription('Battery Circuit Open.')
lgpCondId6357SystemRestartPending = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6357))
if mibBuilder.loadTexts: lgpCondId6357SystemRestartPending.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6357SystemRestartPending.setDescription('A request for UPS restart has been received.')
lgpCondId6358PipeTemperatureSensorFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6358))
if mibBuilder.loadTexts: lgpCondId6358PipeTemperatureSensorFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6358PipeTemperatureSensorFailure.setDescription('Air temperature sensor located in the pipe is not sending a valid\n        value.')
lgpCondId6362SFAReservedEvent26 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6362))
if mibBuilder.loadTexts: lgpCondId6362SFAReservedEvent26.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6362SFAReservedEvent26.setDescription('Reserved event for SFA use.')
lgpCondId6363SFAReservedEvent27 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6363))
if mibBuilder.loadTexts: lgpCondId6363SFAReservedEvent27.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6363SFAReservedEvent27.setDescription('Reserved event for SFA use.')
lgpCondId6364SFAReservedEvent28 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6364))
if mibBuilder.loadTexts: lgpCondId6364SFAReservedEvent28.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6364SFAReservedEvent28.setDescription('Reserved event for SFA use.')
lgpCondId6365SFAReservedEvent29 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6365))
if mibBuilder.loadTexts: lgpCondId6365SFAReservedEvent29.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6365SFAReservedEvent29.setDescription('Reserved event for SFA use.')
lgpCondId6366SFAReservedEvent30 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6366))
if mibBuilder.loadTexts: lgpCondId6366SFAReservedEvent30.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6366SFAReservedEvent30.setDescription('Reserved event for SFA use.')
lgpCondId6367SFAReservedEvent31 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6367))
if mibBuilder.loadTexts: lgpCondId6367SFAReservedEvent31.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6367SFAReservedEvent31.setDescription('Reserved event for SFA use.')
lgpCondId6368SFAReservedEvent32 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6368))
if mibBuilder.loadTexts: lgpCondId6368SFAReservedEvent32.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6368SFAReservedEvent32.setDescription('Reserved event for SFA use.')
lgpCondId6369SFAReservedEvent33 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6369))
if mibBuilder.loadTexts: lgpCondId6369SFAReservedEvent33.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6369SFAReservedEvent33.setDescription('Reserved event for SFA use.')
lgpCondId6370SFAReservedEvent34 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6370))
if mibBuilder.loadTexts: lgpCondId6370SFAReservedEvent34.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6370SFAReservedEvent34.setDescription('Reserved event for SFA use.')
lgpCondId6371SFAReservedEvent35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6371))
if mibBuilder.loadTexts: lgpCondId6371SFAReservedEvent35.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6371SFAReservedEvent35.setDescription('Reserved event for SFA use.')
lgpCondId6372SFAReservedEvent36 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6372))
if mibBuilder.loadTexts: lgpCondId6372SFAReservedEvent36.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6372SFAReservedEvent36.setDescription('Reserved event for SFA use.')
lgpCondId6373SFAReservedEvent37 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6373))
if mibBuilder.loadTexts: lgpCondId6373SFAReservedEvent37.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6373SFAReservedEvent37.setDescription('Reserved event for SFA use.')
lgpCondId6374SFAReservedEvent38 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6374))
if mibBuilder.loadTexts: lgpCondId6374SFAReservedEvent38.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6374SFAReservedEvent38.setDescription('Reserved event for SFA use.')
lgpCondId6375SFAReservedEvent39 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6375))
if mibBuilder.loadTexts: lgpCondId6375SFAReservedEvent39.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6375SFAReservedEvent39.setDescription('Reserved event for SFA use.')
lgpCondId6376SFAReservedEvent40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6376))
if mibBuilder.loadTexts: lgpCondId6376SFAReservedEvent40.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6376SFAReservedEvent40.setDescription('Reserved event for SFA use.')
lgpCondId6377SFAReservedEvent41 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6377))
if mibBuilder.loadTexts: lgpCondId6377SFAReservedEvent41.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6377SFAReservedEvent41.setDescription('Reserved event for SFA use.')
lgpCondId6378SFAReservedEvent42 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6378))
if mibBuilder.loadTexts: lgpCondId6378SFAReservedEvent42.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6378SFAReservedEvent42.setDescription('Reserved event for SFA use.')
lgpCondId6379SFAReservedEvent43 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6379))
if mibBuilder.loadTexts: lgpCondId6379SFAReservedEvent43.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6379SFAReservedEvent43.setDescription('Reserved event for SFA use.')
lgpCondId6380SFAReservedEvent44 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6380))
if mibBuilder.loadTexts: lgpCondId6380SFAReservedEvent44.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6380SFAReservedEvent44.setDescription('Reserved event for SFA use.')
lgpCondId6381SFAReservedEvent45 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6381))
if mibBuilder.loadTexts: lgpCondId6381SFAReservedEvent45.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6381SFAReservedEvent45.setDescription('Reserved event for SFA use.')
lgpCondId6382SFAReservedEvent46 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6382))
if mibBuilder.loadTexts: lgpCondId6382SFAReservedEvent46.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6382SFAReservedEvent46.setDescription('Reserved event for SFA use.')
lgpCondId6383SFAReservedEvent47 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6383))
if mibBuilder.loadTexts: lgpCondId6383SFAReservedEvent47.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6383SFAReservedEvent47.setDescription('Reserved event for SFA use.')
lgpCondId6384SFAReservedEvent48 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6384))
if mibBuilder.loadTexts: lgpCondId6384SFAReservedEvent48.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6384SFAReservedEvent48.setDescription('Reserved event for SFA use.')
lgpCondId6385SFAReservedEvent49 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6385))
if mibBuilder.loadTexts: lgpCondId6385SFAReservedEvent49.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6385SFAReservedEvent49.setDescription('Reserved event for SFA use.')
lgpCondId6386SFAReservedEvent50 = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6386))
if mibBuilder.loadTexts: lgpCondId6386SFAReservedEvent50.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6386SFAReservedEvent50.setDescription('Reserved event for SFA use.')
lgpCondId6438PowerModuleInputCurrentAbnormal = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6438))
if mibBuilder.loadTexts: lgpCondId6438PowerModuleInputCurrentAbnormal.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6438PowerModuleInputCurrentAbnormal.setDescription('Input current of the power module is abnormal.')
lgpCondId6439PowerModuleBalancerofDCBusFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6439))
if mibBuilder.loadTexts: lgpCondId6439PowerModuleBalancerofDCBusFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6439PowerModuleBalancerofDCBusFailure.setDescription('Balancer of DC Bus in the power module has failed.')
lgpCondId6440PowerModuleFuseFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6440))
if mibBuilder.loadTexts: lgpCondId6440PowerModuleFuseFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6440PowerModuleFuseFailure.setDescription('A summary event indicating one or more fuse failures in the power\n        module.')
lgpCondId6441PowerModulePowerSupplyFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6441))
if mibBuilder.loadTexts: lgpCondId6441PowerModulePowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6441PowerModulePowerSupplyFailure.setDescription('Power module power supply failure.')
lgpCondId6450PDUPoweredOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6450))
if mibBuilder.loadTexts: lgpCondId6450PDUPoweredOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6450PDUPoweredOn.setDescription('The PDU was powered on.')
lgpCondId6453InputWiringFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6453))
if mibBuilder.loadTexts: lgpCondId6453InputWiringFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6453InputWiringFault.setDescription('The neutral/ground conductors on the input wiring are not properly\n        bonded, or the line/neutral conductors have been swapped.')
lgpCondId6454DCtoDCConverterFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6454))
if mibBuilder.loadTexts: lgpCondId6454DCtoDCConverterFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6454DCtoDCConverterFault.setDescription('A failure has occurred in the battery discharge circuit.')
lgpCondId6455LeakSensorCableFault = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6455))
if mibBuilder.loadTexts: lgpCondId6455LeakSensorCableFault.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6455LeakSensorCableFault.setDescription("A fault is detected in the 'Leak Sensor' cable.")
lgpCondId6518StandbyUnitActivatedDuetoChillerFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6518))
if mibBuilder.loadTexts: lgpCondId6518StandbyUnitActivatedDuetoChillerFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6518StandbyUnitActivatedDuetoChillerFailure.setDescription('External chiller unit has failed for this unit, so the standby\n        cooling unit has been activated.')
lgpCondId6522PDUResidualOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6522))
if mibBuilder.loadTexts: lgpCondId6522PDUResidualOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6522PDUResidualOverCurrent.setDescription('The system has detected a PDU residual over current condition.')
lgpCondId6527PDUOverCurrentProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6527))
if mibBuilder.loadTexts: lgpCondId6527PDUOverCurrentProtection.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6527PDUOverCurrentProtection.setDescription('The PDU over current protection is triggered.')
lgpCondId6528PowerModuleLeverUnlocked = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6528))
if mibBuilder.loadTexts: lgpCondId6528PowerModuleLeverUnlocked.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6528PowerModuleLeverUnlocked.setDescription('The power module is inactive because the lever is in the unlocked\n        position.')
lgpCondId6529HardwareMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6529))
if mibBuilder.loadTexts: lgpCondId6529HardwareMismatch.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6529HardwareMismatch.setDescription('The assigned system model settings do not match the actual\n        installed hardware. The module count is wrong, or a module of the\n        wrong type is installed.')
lgpCondId6530SupplyNTCAirSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6530))
if mibBuilder.loadTexts: lgpCondId6530SupplyNTCAirSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6530SupplyNTCAirSensorIssue.setDescription('The supply NTC air sensor is disconnected or the signal is out of\n        range.')
lgpCondId6531ExternalAirSensorCIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6531))
if mibBuilder.loadTexts: lgpCondId6531ExternalAirSensorCIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6531ExternalAirSensorCIssue.setDescription('The external air sensor C is disconnected or the signal is out of\n        range.')
lgpCondId6532ExternalAirSensorDIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6532))
if mibBuilder.loadTexts: lgpCondId6532ExternalAirSensorDIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6532ExternalAirSensorDIssue.setDescription('The external air sensor D is disconnected or the signal is out of\n        range.')
lgpCondId6533ExternalAirSensorEIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6533))
if mibBuilder.loadTexts: lgpCondId6533ExternalAirSensorEIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6533ExternalAirSensorEIssue.setDescription('The external air sensor E is disconnected or the signal is out of\n        range.')
lgpCondId6534PumpThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6534))
if mibBuilder.loadTexts: lgpCondId6534PumpThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6534PumpThermalOverload.setDescription('Pump is shut down due to thermal overload.')
lgpCondId6535XDModuleCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6535))
if mibBuilder.loadTexts: lgpCondId6535XDModuleCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6535XDModuleCommunicationLost.setDescription('Communication with XD Module has been lost.')
lgpCondId6536MMSCapacityExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6536))
if mibBuilder.loadTexts: lgpCondId6536MMSCapacityExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6536MMSCapacityExceeded.setDescription('The critical load is larger than the redundant rating of a 1+N\n        redundant multi-module system.')
lgpCondId6538TSAControlInputIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6538))
if mibBuilder.loadTexts: lgpCondId6538TSAControlInputIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6538TSAControlInputIssue.setDescription('The analog input used to set the air temperature set point for\n        cooling control is disconnected or the signal is out of range.')
lgpCondId6539ChilledWaterValveHoursExceeded = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6539))
if mibBuilder.loadTexts: lgpCondId6539ChilledWaterValveHoursExceeded.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6539ChilledWaterValveHoursExceeded.setDescription('[Chilled Water Valve Hours] has exceeded [Chilled Water Valve\n        Operating Hours Threshold].')
lgpCondId6540FSAControlInputIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6540))
if mibBuilder.loadTexts: lgpCondId6540FSAControlInputIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6540FSAControlInputIssue.setDescription('The analog input used to set the air temperature set point for fan\n        speed control is disconnected or the signal is out of range.')
lgpCondId6541AutoTuneLicenseExpiring = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6541))
if mibBuilder.loadTexts: lgpCondId6541AutoTuneLicenseExpiring.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6541AutoTuneLicenseExpiring.setDescription('License for the AutoTune feature has not been refreshed in 30 days\n        and will be expiring soon.')
lgpCondId6542AutoTuneLicenseExpired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6542))
if mibBuilder.loadTexts: lgpCondId6542AutoTuneLicenseExpired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6542AutoTuneLicenseExpired.setDescription('License for the AutoTune feature has expired.')
lgpCondId6543UnitInStandbyDueToCoolingLoss = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6543))
if mibBuilder.loadTexts: lgpCondId6543UnitInStandbyDueToCoolingLoss.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6543UnitInStandbyDueToCoolingLoss.setDescription('Unit forced into standby because it is unable to provide any\n        cooling.')
lgpCondId6544ControlUnitsRemoteShutdownMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6544))
if mibBuilder.loadTexts: lgpCondId6544ControlUnitsRemoteShutdownMismatch.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6544ControlUnitsRemoteShutdownMismatch.setDescription('The remote shutdown status of the primary control unit does not\n        match the remote shutdown status of the secondary control unit.')
lgpCondId6545SecondaryControlUnitCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6545))
if mibBuilder.loadTexts: lgpCondId6545SecondaryControlUnitCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6545SecondaryControlUnitCommunicationLost.setDescription('The primary control unit has lost Ethernet communications with the\n        secondary control unit.')
lgpCondId6546ControlUnitsUnitCodeMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6546))
if mibBuilder.loadTexts: lgpCondId6546ControlUnitsUnitCodeMismatch.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6546ControlUnitsUnitCodeMismatch.setDescription('Unit codes for the primary and secondary control units do not\n        match.')
lgpCondId6547SSAControlInputIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6547))
if mibBuilder.loadTexts: lgpCondId6547SSAControlInputIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6547SSAControlInputIssue.setDescription('The analog input used to set the static pressure set point for fan\n        speed control is disconnected or the signal is out of range.')
lgpCondId6574SubfeedPhaseUndercurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6574))
if mibBuilder.loadTexts: lgpCondId6574SubfeedPhaseUndercurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6574SubfeedPhaseUndercurrent.setDescription('Subfeed breaker phase current has dropped below the threshold.')
lgpCondId6587TransferCountCleared = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6587))
if mibBuilder.loadTexts: lgpCondId6587TransferCountCleared.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6587TransferCountCleared.setDescription('A system event indicating the transfer count has been cleared.')
lgpCondId6588EnergyCounterCleared = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6588))
if mibBuilder.loadTexts: lgpCondId6588EnergyCounterCleared.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6588EnergyCounterCleared.setDescription('A system event indicating the energy counter (e.g. KWH) has been\n        cleared.')
lgpCondId6589HistoryLogsFull = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6589))
if mibBuilder.loadTexts: lgpCondId6589HistoryLogsFull.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6589HistoryLogsFull.setDescription('The history logs are full.')
lgpCondId6590HistoryLogsCleared = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6590))
if mibBuilder.loadTexts: lgpCondId6590HistoryLogsCleared.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6590HistoryLogsCleared.setDescription('History logs have been cleared.')
lgpCondId6591EventLogCleared = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6591))
if mibBuilder.loadTexts: lgpCondId6591EventLogCleared.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6591EventLogCleared.setDescription('All past alarms and faults have been cleared.')
lgpCondId6592SystemDateChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6592))
if mibBuilder.loadTexts: lgpCondId6592SystemDateChanged.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6592SystemDateChanged.setDescription('The system date has been updated.')
lgpCondId6593SystemTimeChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6593))
if mibBuilder.loadTexts: lgpCondId6593SystemTimeChanged.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6593SystemTimeChanged.setDescription('The system time has been updated.')
lgpCondId6594AccessPasswordChanged = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6594))
if mibBuilder.loadTexts: lgpCondId6594AccessPasswordChanged.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6594AccessPasswordChanged.setDescription('The access password has been changed.')
lgpCondId6595ConfigModified = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6595))
if mibBuilder.loadTexts: lgpCondId6595ConfigModified.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6595ConfigModified.setDescription('A setpoint has been updated.')
lgpCondId6612SCRShort = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6612))
if mibBuilder.loadTexts: lgpCondId6612SCRShort.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6612SCRShort.setDescription('The SCR is in a short condition.')
lgpCondId6613SCROpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6613))
if mibBuilder.loadTexts: lgpCondId6613SCROpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6613SCROpen.setDescription('The SCR is in an open condition.')
lgpCondId6614ACPowerSupplyFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6614))
if mibBuilder.loadTexts: lgpCondId6614ACPowerSupplyFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6614ACPowerSupplyFail.setDescription('A failure of the AC Power Supply has been detected.')
lgpCondId6615DCPowerSupplyFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6615))
if mibBuilder.loadTexts: lgpCondId6615DCPowerSupplyFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6615DCPowerSupplyFail.setDescription('A failure of the DC Power Supply has been detected.')
lgpCondId6616VoltageSensorFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6616))
if mibBuilder.loadTexts: lgpCondId6616VoltageSensorFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6616VoltageSensorFail.setDescription('A voltage sensor failure has been detected.')
lgpCondId6617SCRSensorFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6617))
if mibBuilder.loadTexts: lgpCondId6617SCRSensorFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6617SCRSensorFail.setDescription('The SCR sensor module failed.')
lgpCondId6618CurrentSensorFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6618))
if mibBuilder.loadTexts: lgpCondId6618CurrentSensorFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6618CurrentSensorFail.setDescription('The current sensor module failed.')
lgpCondId6619GateDriveFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6619))
if mibBuilder.loadTexts: lgpCondId6619GateDriveFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6619GateDriveFail.setDescription('The Gate Drive module failed.')
lgpCondId6620SurgeFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6620))
if mibBuilder.loadTexts: lgpCondId6620SurgeFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6620SurgeFail.setDescription('The surge module failed for the input source.')
lgpCondId6621FastUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6621))
if mibBuilder.loadTexts: lgpCondId6621FastUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6621FastUnderVoltage.setDescription('Fast under voltage detected.')
lgpCondId6622SlowUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6622))
if mibBuilder.loadTexts: lgpCondId6622SlowUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6622SlowUnderVoltage.setDescription('Slow under voltage detected.')
lgpCondId6623OverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6623))
if mibBuilder.loadTexts: lgpCondId6623OverVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6623OverVoltage.setDescription('Over voltage detected.')
lgpCondId6624OverUnderFrequencyFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6624))
if mibBuilder.loadTexts: lgpCondId6624OverUnderFrequencyFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6624OverUnderFrequencyFail.setDescription('An over or under frequency condition has been detected.')
lgpCondId6625GeneralSourceFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6625))
if mibBuilder.loadTexts: lgpCondId6625GeneralSourceFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6625GeneralSourceFailure.setDescription('A non-specific failure has been detected in the source.')
lgpCondId6626OverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6626))
if mibBuilder.loadTexts: lgpCondId6626OverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6626OverCurrent.setDescription('An over current has been detected.')
lgpCondId6627PeakCurrentOffLimit = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6627))
if mibBuilder.loadTexts: lgpCondId6627PeakCurrentOffLimit.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6627PeakCurrentOffLimit.setDescription('The peak current has exceeded the setpoint defined by I-PK Xfer\n        Lockout.')
lgpCondId6628SyncFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6628))
if mibBuilder.loadTexts: lgpCondId6628SyncFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6628SyncFail.setDescription('A phase rotation/out of synchronization failure has been detected.')
lgpCondId6629InputOverVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6629))
if mibBuilder.loadTexts: lgpCondId6629InputOverVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6629InputOverVoltage.setDescription('Input over voltage.')
lgpCondId6630InputUnderVoltage = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6630))
if mibBuilder.loadTexts: lgpCondId6630InputUnderVoltage.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6630InputUnderVoltage.setDescription('Input under voltage.')
lgpCondId6631InputOverUnderFrequency = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6631))
if mibBuilder.loadTexts: lgpCondId6631InputOverUnderFrequency.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6631InputOverUnderFrequency.setDescription('Input over/under frequency.')
lgpCondId6635VoltageSenseFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6635))
if mibBuilder.loadTexts: lgpCondId6635VoltageSenseFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6635VoltageSenseFail.setDescription('Output voltage sense failure.')
lgpCondId6636LoadonAlternateSource = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6636))
if mibBuilder.loadTexts: lgpCondId6636LoadonAlternateSource.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6636LoadonAlternateSource.setDescription('The load is on the alternate source.')
lgpCondId6637UnderVoltageFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6637))
if mibBuilder.loadTexts: lgpCondId6637UnderVoltageFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6637UnderVoltageFail.setDescription('Output under voltage failure.')
lgpCondId6638OutputOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6638))
if mibBuilder.loadTexts: lgpCondId6638OutputOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6638OutputOverCurrent.setDescription('Output is over current.')
lgpCondId6639GroundOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6639))
if mibBuilder.loadTexts: lgpCondId6639GroundOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6639GroundOverCurrent.setDescription('Ground is over current.')
lgpCondId6640NeutralOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6640))
if mibBuilder.loadTexts: lgpCondId6640NeutralOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6640NeutralOverCurrent.setDescription('Neutral is over current.')
lgpCondId6641LoadVoltageTHD = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6641))
if mibBuilder.loadTexts: lgpCondId6641LoadVoltageTHD.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6641LoadVoltageTHD.setDescription('Load voltage THD has exceeded the set limit.')
lgpCondId6662ControlLogicFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6662))
if mibBuilder.loadTexts: lgpCondId6662ControlLogicFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6662ControlLogicFail.setDescription('A control logic module has failed.')
lgpCondId6663PowerSupplyLogicFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6663))
if mibBuilder.loadTexts: lgpCondId6663PowerSupplyLogicFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6663PowerSupplyLogicFail.setDescription('A power supply module has failed.')
lgpCondId6664ExternalCommsFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6664))
if mibBuilder.loadTexts: lgpCondId6664ExternalCommsFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6664ExternalCommsFailure.setDescription('External communications failure.')
lgpCondId6665HeatSinkOverTemp = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6665))
if mibBuilder.loadTexts: lgpCondId6665HeatSinkOverTemp.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6665HeatSinkOverTemp.setDescription('The system heat sink temperature has exceeded design limits.')
lgpCondId6666AutomaticTransferInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6666))
if mibBuilder.loadTexts: lgpCondId6666AutomaticTransferInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6666AutomaticTransferInhibited.setDescription('Automatic transfer is inhibited.')
lgpCondId6667InputSourceTransferInhibited = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6667))
if mibBuilder.loadTexts: lgpCondId6667InputSourceTransferInhibited.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6667InputSourceTransferInhibited.setDescription('Input source transfer is inhibited.')
lgpCondId6676CB1ShuntTrip = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6676))
if mibBuilder.loadTexts: lgpCondId6676CB1ShuntTrip.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6676CB1ShuntTrip.setDescription('CB1 Shunt Trip event.')
lgpCondId6677CB2ShuntTrip = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6677))
if mibBuilder.loadTexts: lgpCondId6677CB2ShuntTrip.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6677CB2ShuntTrip.setDescription('CB2 Shunt Trip event.')
lgpCondId6678CB6NeutralOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6678))
if mibBuilder.loadTexts: lgpCondId6678CB6NeutralOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6678CB6NeutralOpen.setDescription('CB6 neutral open event.')
lgpCondId6679ContactorNeutralFail = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6679))
if mibBuilder.loadTexts: lgpCondId6679ContactorNeutralFail.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6679ContactorNeutralFail.setDescription('Contactor Neutral Fail event.')
lgpCondId6680CB1BreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6680))
if mibBuilder.loadTexts: lgpCondId6680CB1BreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6680CB1BreakerOpen.setDescription('CB1 Breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6681CB2BreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6681))
if mibBuilder.loadTexts: lgpCondId6681CB2BreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6681CB2BreakerOpen.setDescription('CB2 Breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6682CB4BreakerClosed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6682))
if mibBuilder.loadTexts: lgpCondId6682CB4BreakerClosed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6682CB4BreakerClosed.setDescription('CB4 breaker closed event. Normal state is breaker open. Latched\n        state is breaker closed.')
lgpCondId6683CB5BreakerClosed = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6683))
if mibBuilder.loadTexts: lgpCondId6683CB5BreakerClosed.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6683CB5BreakerClosed.setDescription('CB5 breaker closed event. Normal state is breaker open. Latched\n        state is breaker closed.')
lgpCondId6684CB3BreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6684))
if mibBuilder.loadTexts: lgpCondId6684CB3BreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6684CB3BreakerOpen.setDescription('CB3 breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6685CB3ABreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6685))
if mibBuilder.loadTexts: lgpCondId6685CB3ABreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6685CB3ABreakerOpen.setDescription('CB3A breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6686CB6BreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6686))
if mibBuilder.loadTexts: lgpCondId6686CB6BreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6686CB6BreakerOpen.setDescription('CB6 breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6687CB7BreakerOpen = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6687))
if mibBuilder.loadTexts: lgpCondId6687CB7BreakerOpen.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6687CB7BreakerOpen.setDescription('CB7 breaker open event. Normal state is breaker closed. Latched\n        state is breaker open.')
lgpCondId6691GroupIndependentOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6691))
if mibBuilder.loadTexts: lgpCondId6691GroupIndependentOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6691GroupIndependentOn.setDescription('The group standby/cascade state for this unit has been overridden.\n        The unit has been forced on.')
lgpCondId6692GroupIndependentOff = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6692))
if mibBuilder.loadTexts: lgpCondId6692GroupIndependentOff.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6692GroupIndependentOff.setDescription('The group standby/cascade state for this unit has been overridden.\n        The unit has been forced off.')
lgpCondId6693BranchResidualOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6693))
if mibBuilder.loadTexts: lgpCondId6693BranchResidualOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6693BranchResidualOverCurrent.setDescription('The system has detected a branch residual over current condition.')
lgpCondId6694ReceptacleResidualOverCurrent = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6694))
if mibBuilder.loadTexts: lgpCondId6694ReceptacleResidualOverCurrent.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6694ReceptacleResidualOverCurrent.setDescription('The system has detected a receptacle residual over current\n        condition.')
lgpCondId6728BuckOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6728))
if mibBuilder.loadTexts: lgpCondId6728BuckOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6728BuckOn.setDescription('The input voltage is currently being bucked (lowered) by the\n        inverter.')
lgpCondId6729BoostOn = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6729))
if mibBuilder.loadTexts: lgpCondId6729BoostOn.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6729BoostOn.setDescription('The input voltage is currently being boosted (raised) by the\n        inverter.')
lgpCondId6739Compressor1HighPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6739))
if mibBuilder.loadTexts: lgpCondId6739Compressor1HighPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6739Compressor1HighPressure.setDescription('Compressor 1 High Pressure.')
lgpCondId6740Compressor2HighPressure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6740))
if mibBuilder.loadTexts: lgpCondId6740Compressor2HighPressure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6740Compressor2HighPressure.setDescription('Compressor 2 High Pressure.')
lgpCondId6741Compressor1ThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6741))
if mibBuilder.loadTexts: lgpCondId6741Compressor1ThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6741Compressor1ThermalOverload.setDescription('Compressor 1 Thermal Overload.')
lgpCondId6742Compressor2ThermalOverload = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6742))
if mibBuilder.loadTexts: lgpCondId6742Compressor2ThermalOverload.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6742Compressor2ThermalOverload.setDescription('Compressor 2 Thermal Overload.')
lgpCondId6758CompressorFreezeProtection = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6758))
if mibBuilder.loadTexts: lgpCondId6758CompressorFreezeProtection.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6758CompressorFreezeProtection.setDescription('Compressor has entered the freeze protection phase.')
lgpCondId6773FanTemperatureCompensationLimitReached = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6773))
if mibBuilder.loadTexts: lgpCondId6773FanTemperatureCompensationLimitReached.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6773FanTemperatureCompensationLimitReached.setDescription('Unit is configured for fan temperature compensation, and the fan\n        control set point cannot be reduced any further due to high\n        remote air temperature sensor readings.')
lgpCondId6774ModbusECFanCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6774))
if mibBuilder.loadTexts: lgpCondId6774ModbusECFanCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6774ModbusECFanCommunicationLost.setDescription('Communication with Modbus EC fan has been lost.')
lgpCondId6785AnalogTemperatureControlIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6785))
if mibBuilder.loadTexts: lgpCondId6785AnalogTemperatureControlIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6785AnalogTemperatureControlIssue.setDescription('Analog input used for creating the control temperature (instead of\n        reading a sensor)  is disconnected or the signal is out of range.')
lgpCondId6786SubgroupFirmwareUpdateRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6786))
if mibBuilder.loadTexts: lgpCondId6786SubgroupFirmwareUpdateRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6786SubgroupFirmwareUpdateRequired.setDescription('Mismatch of subgroup firmware.  Both the primary and secondary\n        control boards must be running the same firmware version.')
lgpCondId6787SubgroupSecondaryControlUnitIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6787))
if mibBuilder.loadTexts: lgpCondId6787SubgroupSecondaryControlUnitIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6787SubgroupSecondaryControlUnitIssue.setDescription('Subgroup secondary control unit is reporting an unspecified issue.')
lgpCondId6788EEVCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6788))
if mibBuilder.loadTexts: lgpCondId6788EEVCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6788EEVCommunicationLost.setDescription('Communication with Electronic Expansion Valve unit has been lost.')
lgpCondId6789EEVMotorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6789))
if mibBuilder.loadTexts: lgpCondId6789EEVMotorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6789EEVMotorIssue.setDescription('Electronic Expansion Valve stepper motor issue.')
lgpCondId6790EEVFeedbackIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6790))
if mibBuilder.loadTexts: lgpCondId6790EEVFeedbackIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6790EEVFeedbackIssue.setDescription('Electronic Expansion Valve feedback error.')
lgpCondId6791EEVPressureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6791))
if mibBuilder.loadTexts: lgpCondId6791EEVPressureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6791EEVPressureSensorIssue.setDescription('Electronic Expansion Valve refrigerant pressure sensor is\n        disconnected or the signal is out of range.')
lgpCondId6792EEVCoilTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6792))
if mibBuilder.loadTexts: lgpCondId6792EEVCoilTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6792EEVCoilTemperatureSensorIssue.setDescription('Electronic Expansion Valve coil temperature sensor is disconnected\n        or the signal is out of range.')
lgpCondId6793EEVDischargeTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6793))
if mibBuilder.loadTexts: lgpCondId6793EEVDischargeTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6793EEVDischargeTemperatureSensorIssue.setDescription('Electronic Expansion Valve discharge temperature sensor is\n        disconnected or the signal is out of range.')
lgpCondId6794EEVSumpTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6794))
if mibBuilder.loadTexts: lgpCondId6794EEVSumpTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6794EEVSumpTemperatureSensorIssue.setDescription('Electronic Expansion Valve sump temperature sensor is disconnected\n        or the signal is out of range.')
lgpCondId6795EEVBatteryTestIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6795))
if mibBuilder.loadTexts: lgpCondId6795EEVBatteryTestIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6795EEVBatteryTestIssue.setDescription('Electronic Expansion Valve battery state cannot be determined.')
lgpCondId6796EEVBatteryPersistentIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6796))
if mibBuilder.loadTexts: lgpCondId6796EEVBatteryPersistentIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6796EEVBatteryPersistentIssue.setDescription("Electronic Expansion Valve has continuously detected a 'bad'\n        battery condition for an extended period of time.")
lgpCondId6798PumpCycleLockOut = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6798))
if mibBuilder.loadTexts: lgpCondId6798PumpCycleLockOut.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6798PumpCycleLockOut.setDescription('Pump is locked out due to multiple pump-to-compressor transitions\n        at cold ambient air temperature.')
lgpCondId6799PumpBoardFirmwareUpdateRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6799))
if mibBuilder.loadTexts: lgpCondId6799PumpBoardFirmwareUpdateRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6799PumpBoardFirmwareUpdateRequired.setDescription('Mismatch of pump board firmware.  All pump boards must be running\n        the same firmware version.')
lgpCondId6800PumpControlBoardIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6800))
if mibBuilder.loadTexts: lgpCondId6800PumpControlBoardIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6800PumpControlBoardIssue.setDescription('Pump is shut down due to a pump control board issue.  Control\n        board must be rebooted.')
lgpCondId6801PumpInvalidDataShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6801))
if mibBuilder.loadTexts: lgpCondId6801PumpInvalidDataShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6801PumpInvalidDataShutdown.setDescription('Pump is shut down due to invalid data.')
lgpCondId6802PumpInputPressureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6802))
if mibBuilder.loadTexts: lgpCondId6802PumpInputPressureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6802PumpInputPressureSensorIssue.setDescription('Pump input refrigerant pressure sensor is disconnected or the\n        signal is out of range.')
lgpCondId6803PumpInputTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6803))
if mibBuilder.loadTexts: lgpCondId6803PumpInputTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6803PumpInputTemperatureSensorIssue.setDescription('Pump input refrigerant temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId6804PumpOutputPressureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6804))
if mibBuilder.loadTexts: lgpCondId6804PumpOutputPressureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6804PumpOutputPressureSensorIssue.setDescription('Pump output refrigerant pressure sensor is disconnected or the\n        signal is out of range.')
lgpCondId6805PumpOutputTemperatureSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6805))
if mibBuilder.loadTexts: lgpCondId6805PumpOutputTemperatureSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6805PumpOutputTemperatureSensorIssue.setDescription('Pump output refrigerant temperature sensor is disconnected or the\n        signal is out of range.')
lgpCondId6806PumpCommunicationLost = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6806))
if mibBuilder.loadTexts: lgpCondId6806PumpCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6806PumpCommunicationLost.setDescription('Communication with pump unit has been lost.')
lgpCondId6807PumpRemoteShutdown = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6807))
if mibBuilder.loadTexts: lgpCondId6807PumpRemoteShutdown.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6807PumpRemoteShutdown.setDescription('Pump is shut down by a remote signal.')
lgpCondId6808PumpUSBEthernetPortIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6808))
if mibBuilder.loadTexts: lgpCondId6808PumpUSBEthernetPortIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6808PumpUSBEthernetPortIssue.setDescription('Pump control board USB or Ethernet interface has failed.')
lgpCondId6809PumpStartupFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6809))
if mibBuilder.loadTexts: lgpCondId6809PumpStartupFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6809PumpStartupFailure.setDescription('Multiple attempts to start the pump have failed.')
lgpCondId6810PumpInverterFailure = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6810))
if mibBuilder.loadTexts: lgpCondId6810PumpInverterFailure.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6810PumpInverterFailure.setDescription('Pump inverter is reporting a failure.')
lgpCondId6811PumpTVSSIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6811))
if mibBuilder.loadTexts: lgpCondId6811PumpTVSSIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6811PumpTVSSIssue.setDescription('Pump Transient Voltage Surge Suppressor or Surge Protection Device\n        has failed.')
lgpCondId6812PumpHighSuperheat = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6812))
if mibBuilder.loadTexts: lgpCondId6812PumpHighSuperheat.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6812PumpHighSuperheat.setDescription('Pump inlet refrigerant superheat temperature is too high, or the\n        pump has been running too long with the condenser fan off.')
lgpCondId6813CondenserHighAmbientAirTempDelta = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6813))
if mibBuilder.loadTexts: lgpCondId6813CondenserHighAmbientAirTempDelta.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6813CondenserHighAmbientAirTempDelta.setDescription('The difference between condenser measured ambient air temperatures\n        has been  too large for an extended period of time.')
lgpCondId6814CondenserLeeTempOptionMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6814))
if mibBuilder.loadTexts: lgpCondId6814CondenserLeeTempOptionMismatch.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6814CondenserLeeTempOptionMismatch.setDescription('Lee-Temp option configured at a condenser unit does not match Lee\n        -Temp option configured at the control unit.')
lgpCondId6815CondenserBoardFirmwareUpdateRequired = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6815))
if mibBuilder.loadTexts: lgpCondId6815CondenserBoardFirmwareUpdateRequired.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6815CondenserBoardFirmwareUpdateRequired.setDescription('Mismatch of condenser board firmware.  All condenser boards must\n        be running the same firmware version.')
lgpCondId6816CondenserToPumpHighRefrigerantTempDelta = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6816))
if mibBuilder.loadTexts: lgpCondId6816CondenserToPumpHighRefrigerantTempDelta.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6816CondenserToPumpHighRefrigerantTempDelta.setDescription('Temperature delta between the condenser output refrigerant and\n        pump inlet refrigerant is too large.')
lgpCondId6817CondenserRefrigerantTypeMismatch = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6817))
if mibBuilder.loadTexts: lgpCondId6817CondenserRefrigerantTypeMismatch.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6817CondenserRefrigerantTypeMismatch.setDescription('Refrigerant type configured at condenser unit does not match\n        refrigerant type configured at the control unit.')
lgpCondId6818ExternalSupplyFluidHighTemperature = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6818))
if mibBuilder.loadTexts: lgpCondId6818ExternalSupplyFluidHighTemperature.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6818ExternalSupplyFluidHighTemperature.setDescription('Supply fluid temperature has exceeded a threshold, as indicated by\n        an external input signal.')
lgpCondId6819ExternalSupplyFluidTempSensorIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6819))
if mibBuilder.loadTexts: lgpCondId6819ExternalSupplyFluidTempSensorIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6819ExternalSupplyFluidTempSensorIssue.setDescription('Supply fluid temperature sensor is disconnected or the signal is\n        out of range, as indicated by an external input signal.')
lgpCondId6822AuditLogUpdate = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6822))
if mibBuilder.loadTexts: lgpCondId6822AuditLogUpdate.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6822AuditLogUpdate.setDescription('Audit log has been updated.')
lgpCondId6824ExternalSupplyFluidFlowIssue = ObjectIdentity((1, 3, 6, 1, 4, 1, 476, 1, 42, 3, 2, 7, 1, 6824))
if mibBuilder.loadTexts: lgpCondId6824ExternalSupplyFluidFlowIssue.setStatus('current')
if mibBuilder.loadTexts: lgpCondId6824ExternalSupplyFluidFlowIssue.setDescription('Supply fluid flow issue, as indicated by an external input signal.')
mibBuilder.exportSymbols("LIEBERT-GP-FLEXIBLE-CONDITIONS-MIB", lgpCondId5637CondenserUnitUnspecifiedGeneralEvent=lgpCondId5637CondenserUnitUnspecifiedGeneralEvent, lgpCondId5541CondenserRefrigerantPressureSensorIssue=lgpCondId5541CondenserRefrigerantPressureSensorIssue, lgpCondId6203SensorAdded=lgpCondId6203SensorAdded, lgpCondId4188BatteryCircuitBreaker5Open=lgpCondId4188BatteryCircuitBreaker5Open, lgpCondId4221BatteryExternalMonitor2=lgpCondId4221BatteryExternalMonitor2, lgpCondId6385SFAReservedEvent49=lgpCondId6385SFAReservedEvent49, lgpCondId5871BatteryOverTemperatureLimit=lgpCondId5871BatteryOverTemperatureLimit, lgpCondId5784BranchLowVoltageLN=lgpCondId5784BranchLowVoltageLN, lgpCondId6254ChargerFailure=lgpCondId6254ChargerFailure, lgpCondId6788EEVCommunicationLost=lgpCondId6788EEVCommunicationLost, lgpCondId5650SFAReservedEvent9=lgpCondId5650SFAReservedEvent9, lgpCondId6063BatteryConverterCurrentLimit=lgpCondId6063BatteryConverterCurrentLimit, lgpCondId5958BatteryTemperatureOutofRange=lgpCondId5958BatteryTemperatureOutofRange, lgpCondId6811PumpTVSSIssue=lgpCondId6811PumpTVSSIssue, lgpCondId4215SystemOutputOff=lgpCondId4215SystemOutputOff, lgpCondId4164BatteryChargingError=lgpCondId4164BatteryChargingError, lgpCondId4360ReceptacleOverCurrent=lgpCondId4360ReceptacleOverCurrent, lgpCondId5998BattOvtempWarning=lgpCondId5998BattOvtempWarning, lgpCondId4174BatteryTemperatureSensorFault=lgpCondId4174BatteryTemperatureSensorFault, lgpCondId4830MMSLossofSyncPulse=lgpCondId4830MMSLossofSyncPulse, lgpCondId5181NeutralOvercurrent=lgpCondId5181NeutralOvercurrent, lgpCondId5977BatteryBreakerOpen=lgpCondId5977BatteryBreakerOpen, lgpCondId5596RemoteSensorSystemAverageUnderTemperature=lgpCondId5596RemoteSensorSystemAverageUnderTemperature, lgpCondId5063Compressor1HoursExceeded=lgpCondId5063Compressor1HoursExceeded, lgpCondId5782PDULowVoltageL2N=lgpCondId5782PDULowVoltageL2N, lgpCondId5144OutputOfUf=lgpCondId5144OutputOfUf, lgpCondId5656SFAReservedEvent15=lgpCondId5656SFAReservedEvent15, lgpCondId5785BranchLowVoltageLL=lgpCondId5785BranchLowVoltageLL, lgpCondId5540CondenserRefrigerantPressureUnderThreshold=lgpCondId5540CondenserRefrigerantPressureUnderThreshold, lgpCondId4615ExtDewPointOverTemperature=lgpCondId4615ExtDewPointOverTemperature, lgpCondId6574SubfeedPhaseUndercurrent=lgpCondId6574SubfeedPhaseUndercurrent, lgpCondId6808PumpUSBEthernetPortIssue=lgpCondId6808PumpUSBEthernetPortIssue, lgpCondId6368SFAReservedEvent32=lgpCondId6368SFAReservedEvent32, lgpCondId5185TransformerOvertemperature=lgpCondId5185TransformerOvertemperature, lgpCondId5352CompressorShortCycle=lgpCondId5352CompressorShortCycle, lgpCondId6362SFAReservedEvent26=lgpCondId6362SFAReservedEvent26, lgpCondId6631InputOverUnderFrequency=lgpCondId6631InputOverUnderFrequency, lgpCondId5568InputUndervoltage=lgpCondId5568InputUndervoltage, lgpCondId6305FreeCoolingStoppedHighRoomTemp=lgpCondId6305FreeCoolingStoppedHighRoomTemp, lgpCondId4197BatteryCircuitBreaker8Open=lgpCondId4197BatteryCircuitBreaker8Open, lgpCondId4831MMSOverload=lgpCondId4831MMSOverload, lgpCondId5578DewPointOverTemperature=lgpCondId5578DewPointOverTemperature, lgpCondId5885ProgramInputContact02=lgpCondId5885ProgramInputContact02, lgpCondId4383BypassStaticSwitchOffExtrnl=lgpCondId4383BypassStaticSwitchOffExtrnl, lgpCondId4696Tandem2LowSuctionPressure=lgpCondId4696Tandem2LowSuctionPressure, lgpCondId4288OutputAmpOverUserLimitPhsC=lgpCondId4288OutputAmpOverUserLimitPhsC, lgpCondId6355BackfeedRelayFailure=lgpCondId6355BackfeedRelayFailure, lgpCondId4313PasswordChanged=lgpCondId4313PasswordChanged, lgpCondId5217PanelGroundOvercurrent=lgpCondId5217PanelGroundOvercurrent, lgpCondId6587TransferCountCleared=lgpCondId6587TransferCountCleared, lgpCondId5036LowReturnHumidity=lgpCondId5036LowReturnHumidity, lgpCondId4964LowCellVoltage=lgpCondId4964LowCellVoltage, lgpCondId6105ExternalCondenserTVSSIssue=lgpCondId6105ExternalCondenserTVSSIssue, lgpCondId4320InitiatedTransfertoBypass=lgpCondId4320InitiatedTransfertoBypass, lgpCondId5272CompressorThermalOverload=lgpCondId5272CompressorThermalOverload, lgpCondId4280InputContact11=lgpCondId4280InputContact11, lgpCondId5034HighReturnHumidity=lgpCondId5034HighReturnHumidity, lgpCondId6297Modbus010VModuleCommunicationFailure=lgpCondId6297Modbus010VModuleCommunicationFailure, lgpCondId4389SystemOutputFault=lgpCondId4389SystemOutputFault, lgpCondId4502PDUFailure=lgpCondId4502PDUFailure, lgpCondId5227BranchUndercurrent=lgpCondId5227BranchUndercurrent, lgpCondId4406BranchOverCurrent=lgpCondId4406BranchOverCurrent, lgpCondId5071Condenser1Issue=lgpCondId5071Condenser1Issue, lgpCondId5310EvaporatorFluidFreezeAutoReset=lgpCondId5310EvaporatorFluidFreezeAutoReset, PYSNMP_MODULE_ID=liebertGlobalProductsFlexibleConditionsModule, lgpCondId5263CompressorNotStopping=lgpCondId5263CompressorNotStopping, lgpCondId5569InputOvervoltage=lgpCondId5569InputOvervoltage, lgpCondId5471DoorOpen=lgpCondId5471DoorOpen, lgpCondId6062LossofSynchronization=lgpCondId6062LossofSynchronization, lgpCondId6295ChilledWaterInletTemperatureSensorFailure=lgpCondId6295ChilledWaterInletTemperatureSensorFailure, lgpCondId4295RectifierFailure=lgpCondId4295RectifierFailure, lgpCondId4186BatteryBreaker4OpenFailure=lgpCondId4186BatteryBreaker4OpenFailure, lgpCondId5544CondenserSupplyRefrigerantTempSensorIssue=lgpCondId5544CondenserSupplyRefrigerantTempSensorIssue, lgpCondId4191BatteryCircuitBreaker6Open=lgpCondId4191BatteryCircuitBreaker6Open, lgpCondId6386SFAReservedEvent50=lgpCondId6386SFAReservedEvent50, lgpCondId4471PDUUnderCurrentL1=lgpCondId4471PDUUnderCurrentL1, lgpCondId6637UnderVoltageFail=lgpCondId6637UnderVoltageFail, lgpCondId6589HistoryLogsFull=lgpCondId6589HistoryLogsFull, lgpCondId4690Compressor2BShortCycle=lgpCondId4690Compressor2BShortCycle, lgpCondId6619GateDriveFail=lgpCondId6619GateDriveFail, lgpCondId5660SFAReservedEvent19=lgpCondId5660SFAReservedEvent19, lgpCondId4235InverterOverloadPhaseB=lgpCondId4235InverterOverloadPhaseB, lgpCondId6350GeneralFault=lgpCondId6350GeneralFault, lgpCondId6691GroupIndependentOn=lgpCondId6691GroupIndependentOn, lgpCondId4407BranchUnderCurrent=lgpCondId4407BranchUnderCurrent, lgpCondId6543UnitInStandbyDueToCoolingLoss=lgpCondId6543UnitInStandbyDueToCoolingLoss, lgpCondId5354DigScrollCompDischargeTempSensorIssue=lgpCondId5354DigScrollCompDischargeTempSensorIssue, lgpCondId6684CB3BreakerOpen=lgpCondId6684CB3BreakerOpen, lgpCondId5422OvertemperaturePowerOff=lgpCondId5422OvertemperaturePowerOff, lgpCondId6742Compressor2ThermalOverload=lgpCondId6742Compressor2ThermalOverload, lgpCondId5875BatteryFuseFault=lgpCondId5875BatteryFuseFault, lgpCondId5809SystemShutdownLowBattery=lgpCondId5809SystemShutdownLowBattery, lgpCondId4284InputContact15=lgpCondId4284InputContact15, lgpCondId6774ModbusECFanCommunicationLost=lgpCondId6774ModbusECFanCommunicationLost, lgpCondId6616VoltageSensorFail=lgpCondId6616VoltageSensorFail, lgpCondId6186InputFrequencyDeviation=lgpCondId6186InputFrequencyDeviation, lgpCondId5642SFAReservedEvent1=lgpCondId5642SFAReservedEvent1, lgpCondId5273CompressorLowOilPressure=lgpCondId5273CompressorLowOilPressure, lgpCondId6217MemoryCardRemoved=lgpCondId6217MemoryCardRemoved, lgpCondId6204SensorRemoved=lgpCondId6204SensorRemoved, lgpCondId5888ProgramInputContact05=lgpCondId5888ProgramInputContact05, lgpCondId6544ControlUnitsRemoteShutdownMismatch=lgpCondId6544ControlUnitsRemoteShutdownMismatch, lgpCondId5783PDULowVoltageL3N=lgpCondId5783PDULowVoltageL3N, lgpCondId6594AccessPasswordChanged=lgpCondId6594AccessPasswordChanged, lgpCondId5801LowBatteryShutdownImminent=lgpCondId5801LowBatteryShutdownImminent, lgpCondId5423TooManySensors=lgpCondId5423TooManySensors, lgpCondId5792UserkWhReset=lgpCondId5792UserkWhReset, lgpCondId4684Compressor1BShortCycle=lgpCondId4684Compressor1BShortCycle, lgpCondId4747EquipmentTemperatureSensorFail=lgpCondId4747EquipmentTemperatureSensorFail, lgpCondId6676CB1ShuntTrip=lgpCondId6676CB1ShuntTrip, lgpCondId5928UnbalancedLoadCondition=lgpCondId5928UnbalancedLoadCondition, lgpCondId5777PDULowVoltageLL=lgpCondId5777PDULowVoltageLL, lgpCondId5621EEVSuperheatBelowThreshold=lgpCondId5621EEVSuperheatBelowThreshold, lgpCondId4137BypassAutoRetransferPrimed=lgpCondId4137BypassAutoRetransferPrimed, lgpCondId4309DCBusGroundFaultNegative=lgpCondId4309DCBusGroundFaultNegative, lgpCondId4272InputContact03=lgpCondId4272InputContact03, lgpCondId6741Compressor1ThermalOverload=lgpCondId6741Compressor1ThermalOverload, lgpCondId6294ChilledWaterFlowTransducerFailure=lgpCondId6294ChilledWaterFlowTransducerFailure, lgpCondId4503PDUCommunicationFail=lgpCondId4503PDUCommunicationFail, lgpCondId5810SystemShutdownRemoteShutdown=lgpCondId5810SystemShutdownRemoteShutdown, lgpCondId5472DoorSensorDisconnected=lgpCondId5472DoorSensorDisconnected, lgpCondId5111UnitStandby=lgpCondId5111UnitStandby, lgpCondId5037HumidifierHoursExceeded=lgpCondId5037HumidifierHoursExceeded, lgpCondId5651SFAReservedEvent10=lgpCondId5651SFAReservedEvent10, lgpCondId5045HumidifierControlBoardNotDetected=lgpCondId5045HumidifierControlBoardNotDetected, lgpCondId6739Compressor1HighPressure=lgpCondId6739Compressor1HighPressure, lgpCondId4138BypassAutoRetransferFailed=lgpCondId4138BypassAutoRetransferFailed, lgpCondId4604ExternalAirSensorBOverTemperature=lgpCondId4604ExternalAirSensorBOverTemperature, lgpCondId4168BatteryDischarging=lgpCondId4168BatteryDischarging, lgpCondId4147SystemInputCurrentLimit=lgpCondId4147SystemInputCurrentLimit, lgpCondId4181BatteryBreaker2CloseFailure=lgpCondId4181BatteryBreaker2CloseFailure, lgpCondId4825LossofRedundancy=lgpCondId4825LossofRedundancy, lgpCondId6527PDUOverCurrentProtection=lgpCondId6527PDUOverCurrentProtection, lgpCondId6375SFAReservedEvent39=lgpCondId6375SFAReservedEvent39, lgpCondId5436LowAmbientTemperatureProbeTwo=lgpCondId5436LowAmbientTemperatureProbeTwo, lgpCondId4274InputContact05=lgpCondId4274InputContact05, lgpCondId5377Condenser=lgpCondId5377Condenser, lgpCondId6540FSAControlInputIssue=lgpCondId6540FSAControlInputIssue, lgpCondId6796EEVBatteryPersistentIssue=lgpCondId6796EEVBatteryPersistentIssue, lgpCondId5215PanelOvercurrent=lgpCondId5215PanelOvercurrent, lgpCondId4163OutputOffEndofDischarge=lgpCondId4163OutputOffEndofDischarge, lgpCondId5114WaterLeakageDetectorSensorIssue=lgpCondId5114WaterLeakageDetectorSensorIssue, lgpCondId5245SubfeedPhaseOvercurrent=lgpCondId5245SubfeedPhaseOvercurrent, lgpCondId4194BatteryCircuitBreaker7Open=lgpCondId4194BatteryCircuitBreaker7Open, lgpCondId4634SupplyRefrigerantOverTemp=lgpCondId4634SupplyRefrigerantOverTemp, lgpCondId5535CondenserOutsideAirTempSensorIssue=lgpCondId5535CondenserOutsideAirTempSensorIssue, lgpCondId6518StandbyUnitActivatedDuetoChillerFailure=lgpCondId6518StandbyUnitActivatedDuetoChillerFailure, lgpCondId5315SubgroupEventOccurredDuringCommunicationLoss=lgpCondId5315SubgroupEventOccurredDuringCommunicationLoss, lgpCondId6535XDModuleCommunicationLost=lgpCondId6535XDModuleCommunicationLost, lgpCondId6212FirmwareUpdateCompletedUnsuccessfully=lgpCondId6212FirmwareUpdateCompletedUnsuccessfully, lgpCondId6119Slotsnotavailable=lgpCondId6119Slotsnotavailable, lgpCondId4755InputFilterCycleLock=lgpCondId4755InputFilterCycleLock, lgpCondId5019SupplyAirUnderTemperature=lgpCondId5019SupplyAirUnderTemperature, lgpCondId4967HighCellTemperature=lgpCondId4967HighCellTemperature, lgpCondId6822AuditLogUpdate=lgpCondId6822AuditLogUpdate, lgpCondId4145BypassAutoTransferFailed=lgpCondId4145BypassAutoTransferFailed, lgpCondId5104ExtOverTemperature=lgpCondId5104ExtOverTemperature, lgpCondId5840PowerModuleShutdownOverTemperature=lgpCondId5840PowerModuleShutdownOverTemperature, lgpCondId5908ExtPowerSourceAFailure=lgpCondId5908ExtPowerSourceAFailure, lgpCondId6758CompressorFreezeProtection=lgpCondId6758CompressorFreezeProtection, lgpCondId5915UnderDifferentialPressure=lgpCondId5915UnderDifferentialPressure, lgpCondId5056BottomFanIssue=lgpCondId5056BottomFanIssue, lgpCondId4172BatteryAutoTestInProgress=lgpCondId4172BatteryAutoTestInProgress, lgpCondId4501PDUUnderCurrent=lgpCondId4501PDUUnderCurrent, lgpCondId5600AirEconomizerEmergencyOverride=lgpCondId5600AirEconomizerEmergencyOverride, lgpCondId4693Tandem1LowSuctionPressure=lgpCondId4693Tandem1LowSuctionPressure, lgpCondId4285InputContact16=lgpCondId4285InputContact16, lgpCondId5147ReturnAirSensorIssue=lgpCondId5147ReturnAirSensorIssue, lgpCondId5889ProgramInputContact06=lgpCondId5889ProgramInputContact06, lgpCondId5505HotAisleTempOutofRange=lgpCondId5505HotAisleTempOutofRange, lgpCondId5579DewPointUnderTemperature=lgpCondId5579DewPointUnderTemperature, lgpCondId6314ChilledWaterOutletTemperatureSensorFailure=lgpCondId6314ChilledWaterOutletTemperatureSensorFailure, lgpCondId6816CondenserToPumpHighRefrigerantTempDelta=lgpCondId6816CondenserToPumpHighRefrigerantTempDelta, lgpCondId4760ControlsResetRequired=lgpCondId4760ControlsResetRequired, lgpCondId5563DCBusLowFault=lgpCondId5563DCBusLowFault, lgpCondId5779PDULowVoltageL2L3=lgpCondId5779PDULowVoltageL2L3, lgpCondId4915MaximumDischargeTimeExceeded=lgpCondId4915MaximumDischargeTimeExceeded, lgpCondId6440PowerModuleFuseFailure=lgpCondId6440PowerModuleFuseFailure, lgpCondId4449PDUUnderCurrent=lgpCondId4449PDUUnderCurrent, lgpCondId4279InputContact10=lgpCondId4279InputContact10, lgpCondId4754SystemBreakersCloseFailure=lgpCondId4754SystemBreakersCloseFailure, lgpCondId4144BypassExcessivePulseParallel=lgpCondId4144BypassExcessivePulseParallel, lgpCondId5151BatteryConverterFailure=lgpCondId5151BatteryConverterFailure, lgpCondId4827MMSTransferInhibit=lgpCondId4827MMSTransferInhibit, lgpCondId4180BatteryBreaker2OpenFailure=lgpCondId4180BatteryBreaker2OpenFailure, lgpCondId5416ExtStandbyUnitOn=lgpCondId5416ExtStandbyUnitOn, lgpCondId5351ExtAirSensorALowHumidity=lgpCondId5351ExtAirSensorALowHumidity, lgpCondId4216BypassBackfeedDetected=lgpCondId4216BypassBackfeedDetected, lgpCondId4913HighBatteryStringRippleCurrent=lgpCondId4913HighBatteryStringRippleCurrent, lgpCondId6052SystemOutputBreakerOpen=lgpCondId6052SystemOutputBreakerOpen, lgpCondId6629InputOverVoltage=lgpCondId6629InputOverVoltage, lgpCondId6593SystemTimeChanged=lgpCondId6593SystemTimeChanged, lgpCondId4325BackfeedBreakerOpen=lgpCondId4325BackfeedBreakerOpen, lgpCondId4726ServiceRequired=lgpCondId4726ServiceRequired, lgpCondId5566FanContactorCloseFail=lgpCondId5566FanContactorCloseFail, lgpCondId4170BatteryEqualize=lgpCondId4170BatteryEqualize, lgpCondId4237InverterInhibitExternal=lgpCondId4237InverterInhibitExternal, lgpCondId6685CB3ABreakerOpen=lgpCondId6685CB3ABreakerOpen, lgpCondId4141BypassBreakerClosed=lgpCondId4141BypassBreakerClosed, lgpCondId5665SFAReservedEvent24=lgpCondId5665SFAReservedEvent24, lgpCondId6365SFAReservedEvent29=lgpCondId6365SFAReservedEvent29, lgpCondId6529HardwareMismatch=lgpCondId6529HardwareMismatch, lgpCondId6664ExternalCommsFailure=lgpCondId6664ExternalCommsFailure, lgpCondId6590HistoryLogsCleared=lgpCondId6590HistoryLogsCleared, lgpCondId5146CompressorPumpDownIssue=lgpCondId5146CompressorPumpDownIssue, lgpCondId4392TemperatureSensorError=lgpCondId4392TemperatureSensorError, lgpCondId5645SFAReservedEvent4=lgpCondId5645SFAReservedEvent4, lgpCondId5769EMOShutdown=lgpCondId5769EMOShutdown, lgpCondId5297AllPumpsLossofFlow=lgpCondId5297AllPumpsLossofFlow, lgpCondId6284UnitMiddleSecondSupplyAirSensorFailure=lgpCondId6284UnitMiddleSecondSupplyAirSensorFailure, lgpCondId6625GeneralSourceFailure=lgpCondId6625GeneralSourceFailure, lgpCondId4966LowCellTemperature=lgpCondId4966LowCellTemperature, lgpCondId6813CondenserHighAmbientAirTempDelta=lgpCondId6813CondenserHighAmbientAirTempDelta, lgpCondId4324BatteryTestManuallyStopped=lgpCondId4324BatteryTestManuallyStopped, lgpCondId4524ModuleAdded=lgpCondId4524ModuleAdded, lgpCondId5781PDULowVoltageL1N=lgpCondId5781PDULowVoltageL1N, lgpCondId5647SFAReservedEvent6=lgpCondId5647SFAReservedEvent6, lgpCondId6665HeatSinkOverTemp=lgpCondId6665HeatSinkOverTemp, lgpCondId5770TopOutletFanFault=lgpCondId5770TopOutletFanFault, lgpCondId5561LBSActiveMaster=lgpCondId5561LBSActiveMaster, lgpCondId4239InverterOutBreakerCloseFail=lgpCondId4239InverterOutBreakerCloseFail, lgpCondId6225RemoteSensorLowHumidity=lgpCondId6225RemoteSensorLowHumidity, lgpCondId5838PowerModuleFanFault=lgpCondId5838PowerModuleFanFault, lgpCondId4504BranchRemoved=lgpCondId4504BranchRemoved, lgpCondId5118CloggedAirFilter=lgpCondId5118CloggedAirFilter, lgpCondId5155MainsInputNeutralLost=lgpCondId5155MainsInputNeutralLost, lgpCondId4311SystemFanFailure=lgpCondId4311SystemFanFailure, lgpCondId5560EvaporatorReturnFluidUnderTemp=lgpCondId5560EvaporatorReturnFluidUnderTemp, lgpCondId4980SupplyChilledWaterLossofFlow=lgpCondId4980SupplyChilledWaterLossofFlow, lgpCondId4421BranchFailure=lgpCondId4421BranchFailure, lgpCondId5457ECOModeSuspended=lgpCondId5457ECOModeSuspended, lgpCondId4968LowInternalResistance=lgpCondId4968LowInternalResistance, lgpCondId5659SFAReservedEvent18=lgpCondId5659SFAReservedEvent18, lgpCondId5038DehumidifierHoursExceeded=lgpCondId5038DehumidifierHoursExceeded, lgpCondId4183BatteryBreaker3OpenFailure=lgpCondId4183BatteryBreaker3OpenFailure, lgpCondId4219BatteryOverTemperature=lgpCondId4219BatteryOverTemperature, lgpCondId4289InverterTransferInhibitExt=lgpCondId4289InverterTransferInhibitExt, lgpCondId4580OverTemperature=lgpCondId4580OverTemperature, lgpCondId4190BatteryBreaker5CloseFailure=lgpCondId4190BatteryBreaker5CloseFailure, lgpCondId5180OutputOvercurrent=lgpCondId5180OutputOvercurrent, lgpCondId5247SubfeedGroundOvercurrent=lgpCondId5247SubfeedGroundOvercurrent, lgpCondId5434TransformerTemperatureSensorFail=lgpCondId5434TransformerTemperatureSensorFail, lgpCondId5882RegenerationOperationTerminated=lgpCondId5882RegenerationOperationTerminated, lgpCondId6438PowerModuleInputCurrentAbnormal=lgpCondId6438PowerModuleInputCurrentAbnormal, lgpCondId5418UnitCodeMissing=lgpCondId5418UnitCodeMissing, lgpCondId6638OutputOverCurrent=lgpCondId6638OutputOverCurrent, lgpCondId5646SFAReservedEvent5=lgpCondId5646SFAReservedEvent5, lgpCondId4723WaterUnderFloor=lgpCondId4723WaterUnderFloor, lgpCondId4999Inverter2ShortCycle=lgpCondId4999Inverter2ShortCycle, lgpCondId5536CondenserOutsideAirTempOutofOperatingRange=lgpCondId5536CondenserOutsideAirTempOutofOperatingRange, lgpCondId6439PowerModuleBalancerofDCBusFailure=lgpCondId6439PowerModuleBalancerofDCBusFailure, lgpCondId5458ExcessECOSuspends=lgpCondId5458ExcessECOSuspends, lgpCondId5216PanelNeutralOvercurrent=lgpCondId5216PanelNeutralOvercurrent, lgpCondId6364SFAReservedEvent28=lgpCondId6364SFAReservedEvent28)
mibBuilder.exportSymbols("LIEBERT-GP-FLEXIBLE-CONDITIONS-MIB", lgpCondId6313ChilledWaterInletTemperatureSensorFailure=lgpCondId6313ChilledWaterInletTemperatureSensorFailure, lgpCondId4640SupplyRefrigerantTempSensorIssue=lgpCondId4640SupplyRefrigerantTempSensorIssue, lgpCondId4230SystemOutputLowPowerFactor=lgpCondId4230SystemOutputLowPowerFactor, lgpCondId6533ExternalAirSensorEIssue=lgpCondId6533ExternalAirSensorEIssue, lgpCondId4218BypassManualRexfrInhibited=lgpCondId4218BypassManualRexfrInhibited, lgpCondId4626SupplyChilledWaterOverTemp=lgpCondId4626SupplyChilledWaterOverTemp, lgpCondId6538TSAControlInputIssue=lgpCondId6538TSAControlInputIssue, lgpCondId5226BranchOvercurrent=lgpCondId5226BranchOvercurrent, lgpCondId6802PumpInputPressureSensorIssue=lgpCondId6802PumpInputPressureSensorIssue, lgpCondId4611ExtAirSensorBUnderTemperature=lgpCondId4611ExtAirSensorBUnderTemperature, lgpCondId5456ECOModeActive=lgpCondId5456ECOModeActive, lgpCondId5648SFAReservedEvent7=lgpCondId5648SFAReservedEvent7, lgpCondId6315ChilledWaterFlowMeterSensorFailure=lgpCondId6315ChilledWaterFlowMeterSensorFailure, lgpCondId4142BypassStaticSwitchOverload=lgpCondId4142BypassStaticSwitchOverload, lgpCondId4316AutoRestartInProgress=lgpCondId4316AutoRestartInProgress, lgpCondId6230RemoteSensorSystemAverageHighHumidity=lgpCondId6230RemoteSensorSystemAverageHighHumidity, lgpCondId5975OutputBreakerOpen=lgpCondId5975OutputBreakerOpen, lgpCondId5447MMSPowerSharing=lgpCondId5447MMSPowerSharing, lgpCondId4317AutoRestartInhibitedExt=lgpCondId4317AutoRestartInhibitedExt, lgpCondId4732ReceptacleLoadDropped=lgpCondId4732ReceptacleLoadDropped, lgpCondId4523ModuleRemoved=lgpCondId4523ModuleRemoved, lgpCondId6349SystemOffasrequested=lgpCondId6349SystemOffasrequested, lgpCondId6613SCROpen=lgpCondId6613SCROpen, lgpCondId5948BranchLowVoltageLL=lgpCondId5948BranchLowVoltageLL, lgpCondId5811SystemShutdownHardwareFault=lgpCondId5811SystemShutdownHardwareFault, lgpCondId4440FuseFailure=lgpCondId4440FuseFailure, lgpCondId6528PowerModuleLeverUnlocked=lgpCondId6528PowerModuleLeverUnlocked, lgpCondId5636PumpUnspecifiedGeneralEvent=lgpCondId5636PumpUnspecifiedGeneralEvent, lgpCondId6374SFAReservedEvent38=lgpCondId6374SFAReservedEvent38, lgpCondId4187BatteryBreaker4CloseFailure=lgpCondId4187BatteryBreaker4CloseFailure, lgpCondId6220ModuleOutputBreakerOpen=lgpCondId6220ModuleOutputBreakerOpen, lgpCondId4438SystemInternalTemperatureRise=lgpCondId4438SystemInternalTemperatureRise, lgpCondId5213PanelOvervoltage=lgpCondId5213PanelOvervoltage, lgpCondId5666SFAReservedEvent25=lgpCondId5666SFAReservedEvent25, lgpCondId6546ControlUnitsUnitCodeMismatch=lgpCondId6546ControlUnitsUnitCodeMismatch, lgpCondId5774CompressorContactorIssue=lgpCondId5774CompressorContactorIssue, lgpCondId5842ChargerModuleFanFault=lgpCondId5842ChargerModuleFanFault, lgpCondId6371SFAReservedEvent35=lgpCondId6371SFAReservedEvent35, lgpCondId6107ExternalCondenserIssue=lgpCondId6107ExternalCondenserIssue, lgpCondId4508ReceptacleLoadRemoved=lgpCondId4508ReceptacleLoadRemoved, lgpCondId6454DCtoDCConverterFault=lgpCondId6454DCtoDCConverterFault, lgpCondId4167OutputOff=lgpCondId4167OutputOff, lgpCondId5577ExtDewPointUnderTemperature=lgpCondId5577ExtDewPointUnderTemperature, lgpCondId4588OverRelativeHumidity=lgpCondId4588OverRelativeHumidity, lgpCondId6791EEVPressureSensorIssue=lgpCondId6791EEVPressureSensorIssue, lgpCondId6800PumpControlBoardIssue=lgpCondId6800PumpControlBoardIssue, lgpCondId5120MasterUnitCommunicationLost=lgpCondId5120MasterUnitCommunicationLost, lgpCondId6806PumpCommunicationLost=lgpCondId6806PumpCommunicationLost, lgpCondId5513CompressorCapacityReduced=lgpCondId5513CompressorCapacityReduced, lgpCondId4720SmokeDetected=lgpCondId4720SmokeDetected, lgpCondId6678CB6NeutralOpen=lgpCondId6678CB6NeutralOpen, lgpCondId5655SFAReservedEvent14=lgpCondId5655SFAReservedEvent14, lgpCondId4669Compressor1AHighHeadPressure=lgpCondId4669Compressor1AHighHeadPressure, lgpCondId4740BatteryAutomaticTestInhibited=lgpCondId4740BatteryAutomaticTestInhibited, lgpCondId6080UPSCCommunicationFailure=lgpCondId6080UPSCCommunicationFailure, lgpCondId5271CompressorLowSuctionPressure=lgpCondId5271CompressorLowSuctionPressure, lgpCondId6626OverCurrent=lgpCondId6626OverCurrent, lgpCondId6222BranchLoadLoss=lgpCondId6222BranchLoadLoss, lgpCondId5974NeutralBreakerOpen=lgpCondId5974NeutralBreakerOpen, lgpCondId4828MMSRetransferInhibit=lgpCondId4828MMSRetransferInhibit, lgpCondId6740Compressor2HighPressure=lgpCondId6740Compressor2HighPressure, lgpCondId4678Compressor2BHighHeadPressure=lgpCondId4678Compressor2BHighHeadPressure, lgpCondId6627PeakCurrentOffLimit=lgpCondId6627PeakCurrentOffLimit, lgpCondId6237PowerSourceBIssue=lgpCondId6237PowerSourceBIssue, liebertGlobalProductsFlexibleConditionsModule=liebertGlobalProductsFlexibleConditionsModule, lgpCondId5110UnitOff=lgpCondId5110UnitOff, lgpCondId6373SFAReservedEvent37=lgpCondId6373SFAReservedEvent37, lgpCondId4662PumpShortCycle=lgpCondId4662PumpShortCycle, lgpCondId4162BatteryLow=lgpCondId4162BatteryLow, lgpCondId4826BPSSStartupInhibit=lgpCondId4826BPSSStartupInhibit, lgpCondId5054FanHoursExceeded=lgpCondId5054FanHoursExceeded, lgpCondId4199BatteryBreaker8CloseFailure=lgpCondId4199BatteryBreaker8CloseFailure, lgpCondId6180BatteryUnderVoltage=lgpCondId6180BatteryUnderVoltage, lgpCondId5453ModuleInStandbyIntelligentParalleling=lgpCondId5453ModuleInStandbyIntelligentParalleling, lgpCondId4659Pump2LossofFlow=lgpCondId4659Pump2LossofFlow, lgpCondId6226RemoteSensorHighHumidity=lgpCondId6226RemoteSensorHighHumidity, lgpCondId5567IPInhibit=lgpCondId5567IPInhibit, lgpCondId5881RegenerationActive=lgpCondId5881RegenerationActive, lgpCondId6729BoostOn=lgpCondId6729BoostOn, lgpCondId5150BatteryTerminalsReversed=lgpCondId5150BatteryTerminalsReversed, lgpCondId5115BMSCommunicationsTimeout=lgpCondId5115BMSCommunicationsTimeout, lgpCondId6455LeakSensorCableFault=lgpCondId6455LeakSensorCableFault, lgpCondId4601ExternalAirSensorAOverTemperature=lgpCondId4601ExternalAirSensorAOverTemperature, lgpCondId5924MixedModeLockout=lgpCondId5924MixedModeLockout, lgpCondId6303TeamStaticPressureSensorFailure=lgpCondId6303TeamStaticPressureSensorFailure, lgpCondId5542CondenserSupplyRefrigerantOverTemp=lgpCondId5542CondenserSupplyRefrigerantOverTemp, lgpCondId4220BatteryExternalMonitor1=lgpCondId4220BatteryExternalMonitor1, lgpCondId5042HumidifierCylinderWorn=lgpCondId5042HumidifierCylinderWorn, lgpCondId5311EvaporatorFluidFreezeManualResetRequired=lgpCondId5311EvaporatorFluidFreezeManualResetRequired, lgpCondId5817LossofRedundancy=lgpCondId5817LossofRedundancy, lgpCondId6792EEVCoilTemperatureSensorIssue=lgpCondId6792EEVCoilTemperatureSensorIssue, lgpCondId5624EEVPowerIssue=lgpCondId5624EEVPowerIssue, lgpCondId6804PumpOutputPressureSensorIssue=lgpCondId6804PumpOutputPressureSensorIssue, lgpCondId4993SupplyRefrigUnderTempBand2=lgpCondId4993SupplyRefrigUnderTempBand2, lgpCondId5492ExtSystemCondensationDetected=lgpCondId5492ExtSystemCondensationDetected, lgpCondId6279UnitBottomSupplyAirSensorFailure=lgpCondId6279UnitBottomSupplyAirSensorFailure, lgpCondId5895ProgramInputContact12=lgpCondId5895ProgramInputContact12, lgpCondId6818ExternalSupplyFluidHighTemperature=lgpCondId6818ExternalSupplyFluidHighTemperature, lgpCondId5148CompressorHighPressureTransducerIssue=lgpCondId5148CompressorHighPressureTransducerIssue, lgpCondId4919ExcessiveCelltoCellTemperatureDeviation=lgpCondId4919ExcessiveCelltoCellTemperatureDeviation, lgpCondId6348SystemOutputoffasrequested=lgpCondId6348SystemOutputoffasrequested, lgpCondId5967ModbusPowerMeterCommunicationLost=lgpCondId5967ModbusPowerMeterCommunicationLost, lgpCondId5891ProgramInputContact08=lgpCondId5891ProgramInputContact08, lgpCondId5658SFAReservedEvent17=lgpCondId5658SFAReservedEvent17, lgpCondId5065DigScrollComp1OverTemp=lgpCondId5065DigScrollComp1OverTemp, lgpCondId6011EquipmentOverTempWarning=lgpCondId6011EquipmentOverTempWarning, lgpCondId4970HighIntercellResistance=lgpCondId4970HighIntercellResistance, lgpCondId5939BranchOverCurrentProtection=lgpCondId5939BranchOverCurrentProtection, lgpCondId6093Compressor2BThermalOverload=lgpCondId6093Compressor2BThermalOverload, lgpCondId5053LossofAirFlow=lgpCondId5053LossofAirFlow, lgpCondId5610ThermalRunawayCelltoCellTemperatureEvent=lgpCondId5610ThermalRunawayCelltoCellTemperatureEvent, lgpCondId4742BatteryLowShutdown=lgpCondId4742BatteryLowShutdown, lgpCondId4618ExternalAirSensorAIssue=lgpCondId4618ExternalAirSensorAIssue, lgpCondId4283InputContact14=lgpCondId4283InputContact14, lgpCondId6379SFAReservedEvent43=lgpCondId6379SFAReservedEvent43, lgpCondId5545CondenserMaxFanSpeedOverride=lgpCondId5545CondenserMaxFanSpeedOverride, lgpCondId4278InputContact09=lgpCondId4278InputContact09, lgpCondId5623EEVBatteryIssue=lgpCondId5623EEVBatteryIssue, lgpCondId5604CompressorSuperheatOverThreshold=lgpCondId5604CompressorSuperheatOverThreshold, lgpCondId6363SFAReservedEvent27=lgpCondId6363SFAReservedEvent27, lgpCondId4910HighBatteryStringCurrent=lgpCondId4910HighBatteryStringCurrent, lgpCondId6068BatteryRoomAlarm=lgpCondId6068BatteryRoomAlarm, lgpCondId6354BatteryCharging=lgpCondId6354BatteryCharging, lgpCondId4297UPSOutputonInverter=lgpCondId4297UPSOutputonInverter, lgpCondId4229EmergencyPowerOffLatched=lgpCondId4229EmergencyPowerOffLatched, lgpCondId5214PanelUndervoltage=lgpCondId5214PanelUndervoltage, lgpCondId6094Compressor1BHoursExceeded=lgpCondId6094Compressor1BHoursExceeded, lgpCondId6441PowerModulePowerSupplyFailure=lgpCondId6441PowerModulePowerSupplyFailure, lgpCondId4608ExtAirSensorAUnderTemperature=lgpCondId4608ExtAirSensorAUnderTemperature, lgpCondId4300InternalCommunicationsFailure=lgpCondId4300InternalCommunicationsFailure, lgpCondId5893ProgramInputContact10=lgpCondId5893ProgramInputContact10, lgpCondId6810PumpInverterFailure=lgpCondId6810PumpInverterFailure, lgpCondId4214SystemShutdownREPO=lgpCondId4214SystemShutdownREPO, lgpCondId4169BatteryTemperatureImbalance=lgpCondId4169BatteryTemperatureImbalance, lgpCondId6814CondenserLeeTempOptionMismatch=lgpCondId6814CondenserLeeTempOptionMismatch, lgpCondId5973InputBreakerOpen=lgpCondId5973InputBreakerOpen, lgpCondId4196BatteryBreaker7CloseFailure=lgpCondId4196BatteryBreaker7CloseFailure, lgpCondId6106ExternalCondenserVFDIssue=lgpCondId6106ExternalCondenserVFDIssue, lgpCondId5432TransformerOvertemperaturePowerOff=lgpCondId5432TransformerOvertemperaturePowerOff, lgpCondId6009InverterOutputBreakerOpen=lgpCondId6009InverterOutputBreakerOpen, lgpCondId6229RemoteSensorSystemAverageLowHumidity=lgpCondId6229RemoteSensorSystemAverageLowHumidity, lgpCondId6618CurrentSensorFail=lgpCondId6618CurrentSensorFail, lgpCondId5117MaintenanceCompleted=lgpCondId5117MaintenanceCompleted, lgpCondId5588UnspecifiedGeneralEvent=lgpCondId5588UnspecifiedGeneralEvent, lgpCondId5906AirflowSensorIssue=lgpCondId5906AirflowSensorIssue, lgpCondId4416BranchOverCurrent=lgpCondId4416BranchOverCurrent, lgpCondId5630HighStaticPressure=lgpCondId5630HighStaticPressure, lgpCondId5638CondenserCircuitUnspecifiedGeneralEvent=lgpCondId5638CondenserCircuitUnspecifiedGeneralEvent, lgpCondId4912HighBatteryStringFloatCurrent=lgpCondId4912HighBatteryStringFloatCurrent, lgpCondId5865NoLoadWarning=lgpCondId5865NoLoadWarning, lgpCondId6693BranchResidualOverCurrent=lgpCondId6693BranchResidualOverCurrent, lgpCondId6367SFAReservedEvent31=lgpCondId6367SFAReservedEvent31, lgpCondId6352AutonomyCalibration=lgpCondId6352AutonomyCalibration, lgpCondId5073CondenserTVSSIssue=lgpCondId5073CondenserTVSSIssue, lgpCondId6376SFAReservedEvent40=lgpCondId6376SFAReservedEvent40, lgpCondId4133BypassOverloadPhaseB=lgpCondId4133BypassOverloadPhaseB, lgpCondId6801PumpInvalidDataShutdown=lgpCondId6801PumpInvalidDataShutdown, lgpCondId4390InverterOffExternal=lgpCondId4390InverterOffExternal, lgpCondId4681Compressor1AShortCycle=lgpCondId4681Compressor1AShortCycle, lgpCondId6803PumpInputTemperatureSensorIssue=lgpCondId6803PumpInputTemperatureSensorIssue, lgpCondId5046ReturnHumidityOutOfProportionalBand=lgpCondId5046ReturnHumidityOutOfProportionalBand, lgpCondId6182ReplaceBattery=lgpCondId6182ReplaceBattery, lgpCondId4310EquipmentOverTemperature=lgpCondId4310EquipmentOverTemperature, lgpCondId6617SCRSensorFail=lgpCondId6617SCRSensorFail, lgpCondId5847BatteryModuleTemperatureSensorFault=lgpCondId5847BatteryModuleTemperatureSensorFault, lgpCondId4651SupplyFluidTempSensorIssue=lgpCondId4651SupplyFluidTempSensorIssue, lgpCondId6047Core2CoreFuseFailure=lgpCondId6047Core2CoreFuseFailure, lgpCondId4135BypassNotAvailable=lgpCondId4135BypassNotAvailable, lgpCondId5149BatteryNotQualified=lgpCondId5149BatteryNotQualified, lgpCondId4497BasicDisplayModuleDiscovered=lgpCondId4497BasicDisplayModuleDiscovered, lgpCondId6092Compressor1BThermalOverload=lgpCondId6092Compressor1BThermalOverload, lgpCondId4391InverterStaticSwitchSCRShort=lgpCondId4391InverterStaticSwitchSCRShort, lgpCondId5040HumidifierOverCurrent=lgpCondId5040HumidifierOverCurrent, lgpCondId5070ExtReheatLockout=lgpCondId5070ExtReheatLockout, lgpCondId5362FreeCoolingTempSensorIssue=lgpCondId5362FreeCoolingTempSensorIssue, lgpCondId5887ProgramInputContact04=lgpCondId5887ProgramInputContact04, lgpCondId4969HighInternalResistance=lgpCondId4969HighInternalResistance, lgpCondId4176BatteryCircuitBreaker1Open=lgpCondId4176BatteryCircuitBreaker1Open, lgpCondId5562LBSActiveSlave=lgpCondId5562LBSActiveSlave, lgpCondId5798BypassOverload=lgpCondId5798BypassOverload, lgpCondId5857BatteryModuleWarning=lgpCondId5857BatteryModuleWarning, lgpCondId6787SubgroupSecondaryControlUnitIssue=lgpCondId6787SubgroupSecondaryControlUnitIssue, lgpCondId6450PDUPoweredOn=lgpCondId6450PDUPoweredOn, lgpCondId4703ChilledWaterControlValvePosition=lgpCondId4703ChilledWaterControlValvePosition, lgpCondId5269CompressorHoursExceeded=lgpCondId5269CompressorHoursExceeded, lgpCondId6686CB6BreakerOpen=lgpCondId6686CB6BreakerOpen, lgpCondId4908LowOverallVoltage=lgpCondId4908LowOverallVoltage, lgpCondId6805PumpOutputTemperatureSensorIssue=lgpCondId6805PumpOutputTemperatureSensorIssue, lgpCondId6453InputWiringFault=lgpCondId6453InputWiringFault, lgpCondId5309TeamworkEvaporatorInletTempSensorIssue=lgpCondId5309TeamworkEvaporatorInletTempSensorIssue, lgpCondId4753MainControllerFault=lgpCondId4753MainControllerFault, lgpCondId5246SubfeedNeutralOvercurrent=lgpCondId5246SubfeedNeutralOvercurrent, lgpCondId6667InputSourceTransferInhibited=lgpCondId6667InputSourceTransferInhibited, lgpCondId5788ContTieActive=lgpCondId5788ContTieActive, lgpCondId4322BatteryTestPassed=lgpCondId4322BatteryTestPassed, lgpCondId5156LoadImpactTransfer=lgpCondId5156LoadImpactTransfer, lgpCondId6059InverterRelayFault=lgpCondId6059InverterRelayFault, lgpCondId5796PeakkWReset=lgpCondId5796PeakkWReset, lgpCondId5654SFAReservedEvent13=lgpCondId5654SFAReservedEvent13, lgpCondId4581UnderTemperature=lgpCondId4581UnderTemperature, lgpCondId5976MaintenanceBypassBreakerClosed=lgpCondId5976MaintenanceBypassBreakerClosed, lgpCondId4217BypassManualXfrInhibited=lgpCondId4217BypassManualXfrInhibited, lgpCondId5064DigScrollComp1TempSensorIssue=lgpCondId5064DigScrollComp1TempSensorIssue, lgpCondId5564FanContactorOpen=lgpCondId5564FanContactorOpen, lgpCondId6539ChilledWaterValveHoursExceeded=lgpCondId6539ChilledWaterValveHoursExceeded, lgpCondId4911LowBatteryStringFloatCurrent=lgpCondId4911LowBatteryStringFloatCurrent, lgpCondId5778PDULowVoltageL1L2=lgpCondId5778PDULowVoltageL1L2, lgpCondId6060TransfertoBypassSystemOverload=lgpCondId6060TransfertoBypassSystemOverload, lgpCondId6370SFAReservedEvent34=lgpCondId6370SFAReservedEvent34, lgpCondId5653SFAReservedEvent12=lgpCondId5653SFAReservedEvent12, lgpCondId5500ExtRemoteShutdown=lgpCondId5500ExtRemoteShutdown, lgpCondId6333Bypassoutofsync=lgpCondId6333Bypassoutofsync, lgpCondId5894ProgramInputContact11=lgpCondId5894ProgramInputContact11, lgpCondId5438ThermalRunawayDetected=lgpCondId5438ThermalRunawayDetected, lgpCondId6296ChilledWaterHighInletTemperature=lgpCondId6296ChilledWaterHighInletTemperature, lgpCondId5116MaintenanceDue=lgpCondId5116MaintenanceDue, lgpCondId6369SFAReservedEvent33=lgpCondId6369SFAReservedEvent33, lgpCondId6683CB5BreakerClosed=lgpCondId6683CB5BreakerClosed, lgpCondId5112UnitPartialShutdown=lgpCondId5112UnitPartialShutdown, lgpCondId4139BypassExcessAutoRetransfers=lgpCondId4139BypassExcessAutoRetransfers, lgpCondId4741BatterySelfTest=lgpCondId4741BatterySelfTest, lgpCondId5308EvaporatorInletTempSensorIssue=lgpCondId5308EvaporatorInletTempSensorIssue, lgpCondId4914BatteryStringDischargeDetected=lgpCondId4914BatteryStringDischargeDetected, lgpCondId5863TransformerFanFault=lgpCondId5863TransformerFanFault, lgpCondId5970GroundFault=lgpCondId5970GroundFault, lgpCondId6211FirmwareUpdateCompletedSuccessfully=lgpCondId6211FirmwareUpdateCompletedSuccessfully, lgpCondId6372SFAReservedEvent36=lgpCondId6372SFAReservedEvent36, lgpCondId4507BranchCurrent=lgpCondId4507BranchCurrent, lgpCondId4282InputContact13=lgpCondId4282InputContact13, lgpCondId4298UPSOutputonBypass=lgpCondId4298UPSOutputonBypass, lgpCondId4835MMSLowBatteryWarning=lgpCondId4835MMSLowBatteryWarning, lgpCondId5631LowStaticPressure=lgpCondId5631LowStaticPressure, lgpCondId5015SupplyAirOverTemperature=lgpCondId5015SupplyAirOverTemperature, lgpCondId6641LoadVoltageTHD=lgpCondId6641LoadVoltageTHD, lgpCondId4234InverterOverloadPhaseA=lgpCondId4234InverterOverloadPhaseA, lgpCondId6662ControlLogicFail=lgpCondId6662ControlLogicFail, lgpCondId4492ReceptaclePowerStateOn=lgpCondId4492ReceptaclePowerStateOn, lgpCondId4758LBSInhibited=lgpCondId4758LBSInhibited, lgpCondId6793EEVDischargeTemperatureSensorIssue=lgpCondId6793EEVDischargeTemperatureSensorIssue, lgpCondId6210FirmwareUpdateInProgress=lgpCondId6210FirmwareUpdateInProgress, lgpCondId5105ExtLossofFlow=lgpCondId5105ExtLossofFlow, lgpCondId5966AuxAirTempDeviceCommunicationLost=lgpCondId5966AuxAirTempDeviceCommunicationLost, lgpCondId5914OverDifferentialPressure=lgpCondId5914OverDifferentialPressure, lgpCondId5184OutputFrequencyError=lgpCondId5184OutputFrequencyError, lgpCondId5433TransformerOvertemperature=lgpCondId5433TransformerOvertemperature, lgpCondId5601AirEconomizerReducedAirflow=lgpCondId5601AirEconomizerReducedAirflow, lgpCondId6066ParallelCableFailure=lgpCondId6066ParallelCableFailure, lgpCondId6534PumpThermalOverload=lgpCondId6534PumpThermalOverload, lgpCondId6378SFAReservedEvent42=lgpCondId6378SFAReservedEvent42, lgpCondId5969GenericDICFault=lgpCondId5969GenericDICFault, lgpCondId6639GroundOverCurrent=lgpCondId6639GroundOverCurrent, lgpCondId4213SystemShutdownEPO=lgpCondId4213SystemShutdownEPO, lgpCondId4417BranchUnderCurrent=lgpCondId4417BranchUnderCurrent, lgpCondId4165BatteryChargingReducedExtrnl=lgpCondId4165BatteryChargingReducedExtrnl)
mibBuilder.exportSymbols("LIEBERT-GP-FLEXIBLE-CONDITIONS-MIB", lgpCondId4192BatteryBreaker6OpenFailure=lgpCondId4192BatteryBreaker6OpenFailure, lgpCondId6012EquipmentOvertemperatureLimit=lgpCondId6012EquipmentOvertemperatureLimit, lgpCondId6227RemoteSensorAverageLowHumidity=lgpCondId6227RemoteSensorAverageLowHumidity, lgpCondId6356BatteryCircuitOpen=lgpCondId6356BatteryCircuitOpen, lgpCondId4287OutputAmpOverUserLimitPhsB=lgpCondId4287OutputAmpOverUserLimitPhsB, lgpCondId5157UserOperationInvalid=lgpCondId5157UserOperationInvalid, lgpCondId5903CompressorLowDifferentialPressureLockout=lgpCondId5903CompressorLowDifferentialPressureLockout, lgpCondId4294InletAirOverTemperature=lgpCondId4294InletAirOverTemperature, lgpCondId4505BranchDiscovered=lgpCondId4505BranchDiscovered, lgpCondId5907ExtAirDamperPositionIssue=lgpCondId5907ExtAirDamperPositionIssue, lgpCondId6061InputSourceBackfeed=lgpCondId6061InputSourceBackfeed, lgpCondId6624OverUnderFrequencyFail=lgpCondId6624OverUnderFrequencyFail, lgpCondId4495DeviceConfigurationChange=lgpCondId4495DeviceConfigurationChange, lgpCondId5119RAMBatteryIssue=lgpCondId5119RAMBatteryIssue, lgpCondId5154DCBusAbnormal=lgpCondId5154DCBusAbnormal, lgpCondId6541AutoTuneLicenseExpiring=lgpCondId6541AutoTuneLicenseExpiring, lgpCondId4171BatteryManualTestInProgress=lgpCondId4171BatteryManualTestInProgress, lgpCondId5531CondenserCommunicationLost=lgpCondId5531CondenserCommunicationLost, lgpCondId5597RemoteSensorOverTemperature=lgpCondId5597RemoteSensorOverTemperature, lgpCondId5361ExtFreeCoolingLockout=lgpCondId5361ExtFreeCoolingLockout, lgpCondId5771MMSOverCapacity=lgpCondId5771MMSOverCapacity, lgpCondId5442DischargeLowCellVoltage=lgpCondId5442DischargeLowCellVoltage, lgpCondId4238InverterOutBreakerOpenFail=lgpCondId4238InverterOutBreakerOpenFail, lgpCondId6293ChilledWaterControlActive=lgpCondId6293ChilledWaterControlActive, lgpCondId6064LBSCableFailure=lgpCondId6064LBSCableFailure, lgpCondId5069ElectricReheater1HoursExceeded=lgpCondId5069ElectricReheater1HoursExceeded, lgpCondId6194SystemRebootCommandIssued=lgpCondId6194SystemRebootCommandIssued, lgpCondId4494BranchBreakerOpen=lgpCondId4494BranchBreakerOpen, lgpCondId4271InputContact02=lgpCondId4271InputContact02, lgpCondId4509ReceptacleLoadAdded=lgpCondId4509ReceptacleLoadAdded, lgpCondId4132BypassOverloadPhaseA=lgpCondId4132BypassOverloadPhaseA, lgpCondId5274CompressorHeadPressureOverThreshold=lgpCondId5274CompressorHeadPressureOverThreshold, lgpCondId6278UnitMiddleFirstSupplyAirSensorFailure=lgpCondId6278UnitMiddleFirstSupplyAirSensorFailure, lgpCondId6545SecondaryControlUnitCommunicationLost=lgpCondId6545SecondaryControlUnitCommunicationLost, lgpCondId4759LeadingPowerFactor=lgpCondId4759LeadingPowerFactor, lgpCondId5982BypassBreakerSBBOpen=lgpCondId5982BypassBreakerSBBOpen, lgpCondId4175BypassFrequencyError=lgpCondId4175BypassFrequencyError, lgpCondId6785AnalogTemperatureControlIssue=lgpCondId6785AnalogTemperatureControlIssue, lgpCondId5851MaximumLoadAlarm=lgpCondId5851MaximumLoadAlarm, lgpCondId4645SupplyFluidOverTemp=lgpCondId4645SupplyFluidOverTemp, lgpCondId6773FanTemperatureCompensationLimitReached=lgpCondId6773FanTemperatureCompensationLimitReached, lgpCondId4321InitiatedTransfertoInverter=lgpCondId4321InitiatedTransfertoInverter, lgpCondId5652SFAReservedEvent11=lgpCondId5652SFAReservedEvent11, lgpCondId6728BuckOn=lgpCondId6728BuckOn, lgpCondId4920ExcessiveCelltoAmbientTemperatureDeviation=lgpCondId4920ExcessiveCelltoAmbientTemperatureDeviation, lgpCondId4222BatteryGroundFault=lgpCondId4222BatteryGroundFault, lgpCondId4506BranchOverCurrent=lgpCondId4506BranchOverCurrent, lgpCondId5664SFAReservedEvent23=lgpCondId5664SFAReservedEvent23, lgpCondId4749SystemFanFailureRedundant=lgpCondId4749SystemFanFailureRedundant, lgpCondId5960InverterOverload=lgpCondId5960InverterOverload, lgpCondId5349ExtAirSensorAHighHumidity=lgpCondId5349ExtAirSensorAHighHumidity, lgpCondId6218AutoCalibrationActive=lgpCondId6218AutoCalibrationActive, lgpCondId5275CompressorLossofDifferentialPressure=lgpCondId5275CompressorLossofDifferentialPressure, lgpCondId4382SystemInputCurrentImbalance=lgpCondId4382SystemInputCurrentImbalance, lgpCondId5055TopFanIssue=lgpCondId5055TopFanIssue, lgpCondId4384BatteryEoDDisconnect=lgpCondId4384BatteryEoDDisconnect, lgpCondId5376MainFanOverload=lgpCondId5376MainFanOverload, lgpCondId5539CondenserRefrigerantPressureOverThreshold=lgpCondId5539CondenserRefrigerantPressureOverThreshold, lgpCondId5152InverterSCROpen=lgpCondId5152InverterSCROpen, lgpCondId4200BatteryChargingInhibited=lgpCondId4200BatteryChargingInhibited, lgpCondId4687Compressor2AShortCycle=lgpCondId4687Compressor2AShortCycle, lgpCondId5848BatteryModuleOverTemperature=lgpCondId5848BatteryModuleOverTemperature, lgpCondId6095Compressor2BHoursExceeded=lgpCondId6095Compressor2BHoursExceeded, lgpCondId4672Compressor1BHighHeadPressure=lgpCondId4672Compressor1BHighHeadPressure, lgpCondId4470PDUOverCurrentL3=lgpCondId4470PDUOverCurrentL3, lgpCondId6232SECUnspecifiedGeneralEvent=lgpCondId6232SECUnspecifiedGeneralEvent, lgpCondId6636LoadonAlternateSource=lgpCondId6636LoadonAlternateSource, lgpCondId6620SurgeFail=lgpCondId6620SurgeFail, lgpCondId6205WaterLeakDetected=lgpCondId6205WaterLeakDetected, lgpCondId6276UnitBottomReturnAirSensorFailure=lgpCondId6276UnitBottomReturnAirSensorFailure, lgpCondId4757LBSActive=lgpCondId4757LBSActive, lgpCondId5126DigScrollComp2OverTemp=lgpCondId5126DigScrollComp2OverTemp, lgpCondId5293ReturnFluidOverTemp=lgpCondId5293ReturnFluidOverTemp, lgpCondId5419UnitCommunicationLost=lgpCondId5419UnitCommunicationLost, lgpCondId6100CondenserRemoteShutdown=lgpCondId6100CondenserRemoteShutdown, lgpCondId5910StaticPressureSensorOutofRange=lgpCondId5910StaticPressureSensorOutofRange, lgpCondId5644SFAReservedEvent3=lgpCondId5644SFAReservedEvent3, lgpCondId6789EEVMotorIssue=lgpCondId6789EEVMotorIssue, lgpCondId6357SystemRestartPending=lgpCondId6357SystemRestartPending, lgpCondId5978RectifierIsolationBreakerRFBOpen=lgpCondId5978RectifierIsolationBreakerRFBOpen, lgpCondId5896GroundFaultDetected=lgpCondId5896GroundFaultDetected, lgpCondId6216PrechargeCircuitFailed=lgpCondId6216PrechargeCircuitFailed, lgpCondId5108ExternalFireDetected=lgpCondId5108ExternalFireDetected, lgpCondId4436PDUOverCurrent=lgpCondId4436PDUOverCurrent, lgpCondId4233InverterFailure=lgpCondId4233InverterFailure, lgpCondId4442SystemBreakersOpenFailure=lgpCondId4442SystemBreakersOpenFailure, lgpCondId6351UPSAwaitingPower=lgpCondId6351UPSAwaitingPower, lgpCondId5649SFAReservedEvent8=lgpCondId5649SFAReservedEvent8, lgpCondId6588EnergyCounterCleared=lgpCondId6588EnergyCounterCleared, lgpCondId5776PDULowVoltageLN=lgpCondId5776PDULowVoltageLN, lgpCondId5661SFAReservedEvent20=lgpCondId5661SFAReservedEvent20, lgpCondId4983SupplyRefrigOverTempBand1=lgpCondId4983SupplyRefrigOverTempBand1, lgpCondId4270InputContact01=lgpCondId4270InputContact01, lgpCondId4750MultipleFanFailure=lgpCondId4750MultipleFanFailure, lgpCondId6591EventLogCleared=lgpCondId6591EventLogCleared, lgpCondId6275UnitMiddleReturnAirSensorFailure=lgpCondId6275UnitMiddleReturnAirSensorFailure, lgpCondId5985BypassStaticSwitchBPSSOn=lgpCondId5985BypassStaticSwitchBPSSOn, lgpCondId5182GroundOvercurrent=lgpCondId5182GroundOvercurrent, lgpCondId5565FanContactorOpenFail=lgpCondId5565FanContactorOpenFail, lgpCondId4315OnGenerator=lgpCondId4315OnGenerator, lgpCondId4439AutomaticRestartFailed=lgpCondId4439AutomaticRestartFailed, lgpCondId5593RemoteSensorAverageOverTemperature=lgpCondId5593RemoteSensorAverageOverTemperature, lgpCondId5612ThermalRunawayChargerCurrentLevelTwoEvent=lgpCondId5612ThermalRunawayChargerCurrentLevelTwoEvent, lgpCondId6640NeutralOverCurrent=lgpCondId6640NeutralOverCurrent, lgpCondId4437PDUUnderCurrent=lgpCondId4437PDUUnderCurrent, lgpCondId6384SFAReservedEvent48=lgpCondId6384SFAReservedEvent48, lgpCondId6614ACPowerSupplyFail=lgpCondId6614ACPowerSupplyFail, lgpCondId5775UnitShutdownUnspecifiedGeneralEvent=lgpCondId5775UnitShutdownUnspecifiedGeneralEvent, lgpCondId4550FirmwareUpdateRequired=lgpCondId4550FirmwareUpdateRequired, lgpCondId4917DischargeLowCellVoltage=lgpCondId4917DischargeLowCellVoltage, lgpCondId5559EvaporatorReturnFluidOverTemp=lgpCondId5559EvaporatorReturnFluidOverTemp, lgpCondId6621FastUnderVoltage=lgpCondId6621FastUnderVoltage, lgpCondId5415ExtLossofAirBlower=lgpCondId5415ExtLossofAirBlower, lgpCondId5890ProgramInputContact07=lgpCondId5890ProgramInputContact07, lgpCondId6530SupplyNTCAirSensorIssue=lgpCondId6530SupplyNTCAirSensorIssue, lgpCondId4314PowerSupplyFailure=lgpCondId4314PowerSupplyFailure, lgpCondId5862CheckAirFilter=lgpCondId5862CheckAirFilter, lgpCondId5886ProgramInputContact03=lgpCondId5886ProgramInputContact03, lgpCondId5984BypassUndervoltageWarning=lgpCondId5984BypassUndervoltageWarning, lgpCondId6680CB1BreakerOpen=lgpCondId6680CB1BreakerOpen, lgpCondId4286OutputAmpOverUserLimitPhsA=lgpCondId4286OutputAmpOverUserLimitPhsA, lgpCondId5879VdcBackfeed=lgpCondId5879VdcBackfeed, lgpCondId5883RegenerationOperationFailure=lgpCondId5883RegenerationOperationFailure, lgpCondId4468PDUOverCurrentL1=lgpCondId4468PDUOverCurrentL1, lgpCondId5106ExtCondenserPumpHighWater=lgpCondId5106ExtCondenserPumpHighWater, lgpCondId4472PDUUnderCurrentL2=lgpCondId4472PDUUnderCurrentL2, lgpCondId4323BatteryTestFailed=lgpCondId4323BatteryTestFailed, lgpCondId5514CompressorLowPressureTransducerIssue=lgpCondId5514CompressorLowPressureTransducerIssue, lgpCondId6236PowerSourceAIssue=lgpCondId6236PowerSourceAIssue, lgpCondId6595ConfigModified=lgpCondId6595ConfigModified, lgpCondId5278LowCondenserRefrigerantPressure=lgpCondId5278LowCondenserRefrigerantPressure, lgpCondId5043HumidifierIssue=lgpCondId5043HumidifierIssue, lgpCondId6677CB2ShuntTrip=lgpCondId6677CB2ShuntTrip, lgpCondId6377SFAReservedEvent41=lgpCondId6377SFAReservedEvent41, lgpCondId5902ReturnHumiditySensorIssue=lgpCondId5902ReturnHumiditySensorIssue, lgpCondId5911FluidTemperatureSensorIssue=lgpCondId5911FluidTemperatureSensorIssue, lgpCondId6798PumpCycleLockOut=lgpCondId6798PumpCycleLockOut, lgpCondId6522PDUResidualOverCurrent=lgpCondId6522PDUResidualOverCurrent, lgpCondId4675Compressor2AHighHeadPressure=lgpCondId4675Compressor2AHighHeadPressure, lgpCondId5957BypassInputVoltageFault=lgpCondId5957BypassInputVoltageFault, lgpCondId6663PowerSupplyLogicFail=lgpCondId6663PowerSupplyLogicFail, lgpCondId6622SlowUnderVoltage=lgpCondId6622SlowUnderVoltage, lgpCondId6799PumpBoardFirmwareUpdateRequired=lgpCondId6799PumpBoardFirmwareUpdateRequired, lgpCondId5524PDUNeutralOverCurrent=lgpCondId5524PDUNeutralOverCurrent, lgpCondId4496BasicDisplayModuleRemoved=lgpCondId4496BasicDisplayModuleRemoved, lgpCondId4918DischargeHighBatteryStringCurrent=lgpCondId4918DischargeHighBatteryStringCurrent, lgpCondId6274UnitTopReturnAirSensorFailure=lgpCondId6274UnitTopReturnAirSensorFailure, lgpCondId5109UnitOn=lgpCondId5109UnitOn, lgpCondId6231LowCompressorSuperheat=lgpCondId6231LowCompressorSuperheat, lgpCondId6795EEVBatteryTestIssue=lgpCondId6795EEVBatteryTestIssue, lgpCondId6532ExternalAirSensorDIssue=lgpCondId6532ExternalAirSensorDIssue, lgpCondId5158PowerSubModuleFault=lgpCondId5158PowerSubModuleFault, lgpCondId4978IntertierResistanceHigh=lgpCondId4978IntertierResistanceHigh, lgpCondId5437HighAmbientTemperatureProbeTwo=lgpCondId5437HighAmbientTemperatureProbeTwo, lgpCondId5909ExtPowerSourceBFailure=lgpCondId5909ExtPowerSourceBFailure, lgpCondId4834MMSOnBattery=lgpCondId4834MMSOnBattery, lgpCondId5107ExtStandbyGlycolPumpOn=lgpCondId5107ExtStandbyGlycolPumpOn, lgpCondId6682CB4BreakerClosed=lgpCondId6682CB4BreakerClosed, lgpCondId4143BypassStaticSwitchUnavailable=lgpCondId4143BypassStaticSwitchUnavailable, lgpCondId5912FluidFlowSensorIssue=lgpCondId5912FluidFlowSensorIssue, lgpCondId5849ReplaceBatteryModule=lgpCondId5849ReplaceBatteryModule, lgpCondId5212PanelSummaryStatus=lgpCondId5212PanelSummaryStatus, lgpCondId6547SSAControlInputIssue=lgpCondId6547SSAControlInputIssue, lgpCondId6817CondenserRefrigerantTypeMismatch=lgpCondId6817CondenserRefrigerantTypeMismatch, lgpCondId5884ProgramInputContact01=lgpCondId5884ProgramInputContact01, lgpCondId5183OutputVoltageTHD=lgpCondId5183OutputVoltageTHD, lgpCondId6380SFAReservedEvent44=lgpCondId6380SFAReservedEvent44, lgpFlexConditionsWellKnown=lgpFlexConditionsWellKnown, lgpCondId5113UnitShutdown=lgpCondId5113UnitShutdown, lgpCondId5873UnexpectedMainBatteryDisconnectClosure=lgpCondId5873UnexpectedMainBatteryDisconnectClosure, lgpCondId6353GeneralWarning=lgpCondId6353GeneralWarning, lgpCondId5072CondenserVFDIssue=lgpCondId5072CondenserVFDIssue, lgpCondId4290InverterShutdownOverload=lgpCondId4290InverterShutdownOverload, lgpCondId4308DCBusGroundFaultPositive=lgpCondId4308DCBusGroundFaultPositive, lgpCondId5294ReturnFluidUnderTemp=lgpCondId5294ReturnFluidUnderTemp, lgpCondId6812PumpHighSuperheat=lgpCondId6812PumpHighSuperheat, lgpCondId4122SystemInputPowerProblem=lgpCondId4122SystemInputPowerProblem, lgpCondId5512RemoteShutdown=lgpCondId5512RemoteShutdown, lgpCondId4909HighOverallVoltage=lgpCondId4909HighOverallVoltage, lgpCondId4729FanIssue=lgpCondId4729FanIssue, lgpCondId5296TeamworkReturnFluidTempSensorIssue=lgpCondId5296TeamworkReturnFluidTempSensorIssue, lgpCondId5617TemperatureControlSensorIssue=lgpCondId5617TemperatureControlSensorIssue, lgpCondId6381SFAReservedEvent45=lgpCondId6381SFAReservedEvent45, lgpCondId6815CondenserBoardFirmwareUpdateRequired=lgpCondId6815CondenserBoardFirmwareUpdateRequired, lgpCondId6819ExternalSupplyFluidTempSensorIssue=lgpCondId6819ExternalSupplyFluidTempSensorIssue, lgpCondId5657SFAReservedEvent16=lgpCondId5657SFAReservedEvent16, lgpCondId5480ContactClosureClosed=lgpCondId5480ContactClosureClosed, lgpCondId5780PDULowVoltageL3L1=lgpCondId5780PDULowVoltageL3L1, lgpCondId6635VoltageSenseFail=lgpCondId6635VoltageSenseFail, lgpCondId5121HighPowerShutdown=lgpCondId5121HighPowerShutdown, lgpCondId6306ColdAisleTemperatureHumidityTeamSensorFailure=lgpCondId6306ColdAisleTemperatureHumidityTeamSensorFailure, lgpCondId5629StaticPressureSensorIssue=lgpCondId5629StaticPressureSensorIssue, lgpCondId4177BatteryBreaker1OpenFailure=lgpCondId4177BatteryBreaker1OpenFailure, lgpCondId4711SystemCondensationDetected=lgpCondId4711SystemCondensationDetected, lgpCondId4276InputContact07=lgpCondId4276InputContact07, lgpCondId4134BypassOverloadPhaseC=lgpCondId4134BypassOverloadPhaseC, lgpCondId6694ReceptacleResidualOverCurrent=lgpCondId6694ReceptacleResidualOverCurrent, lgpCondId6623OverVoltage=lgpCondId6623OverVoltage, lgpCondId6687CB7BreakerOpen=lgpCondId6687CB7BreakerOpen, lgpCondId4277InputContact08=lgpCondId4277InputContact08, lgpCondId4296RectifierOperationInhibitExt=lgpCondId4296RectifierOperationInhibitExt, lgpCondId5153LoadSharingFault=lgpCondId5153LoadSharingFault, lgpCondId6824ExternalSupplyFluidFlowIssue=lgpCondId6824ExternalSupplyFluidFlowIssue, lgpCondId5277CondenserFanIssue=lgpCondId5277CondenserFanIssue, lgpCondId6304HeatingLockout=lgpCondId6304HeatingLockout, lgpCondId4656Pump1LossofFlow=lgpCondId4656Pump1LossofFlow, lgpCondId6233SECCommunicationLost=lgpCondId6233SECCommunicationLost, lgpCondId6046LoadonUPS=lgpCondId6046LoadonUPS, lgpCondId4146SystemInputPhsRotationError=lgpCondId4146SystemInputPhsRotationError, lgpCondId4281InputContact12=lgpCondId4281InputContact12, lgpCondId5878MainBatteryDisconnectForcedToUnlock=lgpCondId5878MainBatteryDisconnectForcedToUnlock, lgpCondId6253BoosterFailure=lgpCondId6253BoosterFailure, lgpCondId4823ParallelCommWarning=lgpCondId4823ParallelCommWarning, lgpCondId5622EEVDischargeTempAboveThreshold=lgpCondId5622EEVDischargeTempAboveThreshold, lgpCondId5808SystemShutdownOutputShort=lgpCondId5808SystemShutdownOutputShort, lgpCondId4361ReceptacleUnderCurrent=lgpCondId4361ReceptacleUnderCurrent, lgpCondId4965HighCellVoltage=lgpCondId4965HighCellVoltage, lgpCondId5179OutputUndervoltage=lgpCondId5179OutputUndervoltage, lgpCondId6067BatteryFault=lgpCondId6067BatteryFault, lgpCondId6612SCRShort=lgpCondId6612SCRShort, lgpCondId4473PDUUnderCurrentL3=lgpCondId4473PDUUnderCurrentL3, lgpCondId5573AmbientAirSensorIssue=lgpCondId5573AmbientAirSensorIssue, lgpCondId4299OutputLoadonMaintBypass=lgpCondId4299OutputLoadonMaintBypass, lgpCondId4166BatteryCapacityLow=lgpCondId4166BatteryCapacityLow, lgpCondId5355DigScrollCompOverTemp=lgpCondId5355DigScrollCompOverTemp, lgpCondId6809PumpStartupFailure=lgpCondId6809PumpStartupFailure, lgpCondId6045RectifierInputBreakerOpen=lgpCondId6045RectifierInputBreakerOpen, lgpCondId6615DCPowerSupplyFail=lgpCondId6615DCPowerSupplyFail, lgpCondId6681CB2BreakerOpen=lgpCondId6681CB2BreakerOpen, lgpCondId5368ElectricReheaterHoursExceeded=lgpCondId5368ElectricReheaterHoursExceeded, lgpCondId4179BatteryCircuitBreaker2Open=lgpCondId4179BatteryCircuitBreaker2Open, lgpCondId5495ExtFanIssue=lgpCondId5495ExtFanIssue, lgpCondId5595RemoteSensorSystemAverageOverTemperature=lgpCondId5595RemoteSensorSystemAverageOverTemperature, lgpCondId6277UnitTopSupplyAirSensorFailure=lgpCondId6277UnitTopSupplyAirSensorFailure, lgpCondId4637SupplyRefrigerantUnderTemp=lgpCondId4637SupplyRefrigerantUnderTemp, lgpCondId6382SFAReservedEvent46=lgpCondId6382SFAReservedEvent46, lgpCondId6692GroupIndependentOff=lgpCondId6692GroupIndependentOff, lgpCondId6790EEVFeedbackIssue=lgpCondId6790EEVFeedbackIssue, lgpCondId6219AutoCalibrationFailed=lgpCondId6219AutoCalibrationFailed, lgpCondId6228RemoteSensorAverageHighHumidity=lgpCondId6228RemoteSensorAverageHighHumidity, lgpCondId5041HumidifierLowWater=lgpCondId5041HumidifierLowWater, lgpCondId6536MMSCapacityExceeded=lgpCondId6536MMSCapacityExceeded, lgpCondId4996Inverter1ShortCycle=lgpCondId4996Inverter1ShortCycle, lgpCondId5880RectifierConfigurationChangeRequest=lgpCondId5880RectifierConfigurationChangeRequest, lgpCondId4448PDUOverCurrent=lgpCondId4448PDUOverCurrent, lgpCondId6807PumpRemoteShutdown=lgpCondId6807PumpRemoteShutdown, lgpCondId5023ReturnAirOverTemperature=lgpCondId5023ReturnAirOverTemperature, lgpCondId4907HighAmbientTemperature=lgpCondId4907HighAmbientTemperature, lgpCondId4589UnderRelativeHumidity=lgpCondId4589UnderRelativeHumidity, lgpCondId4236InverterOverloadPhaseC=lgpCondId4236InverterOverloadPhaseC, lgpCondId5806OutputOverload=lgpCondId5806OutputOverload, lgpCondId6542AutoTuneLicenseExpired=lgpCondId6542AutoTuneLicenseExpired, lgpCondId4231OutputCurrentExceedsThreshold=lgpCondId4231OutputCurrentExceedsThreshold, lgpCondId4493ReceptaclePowerStateOff=lgpCondId4493ReceptaclePowerStateOff)
mibBuilder.exportSymbols("LIEBERT-GP-FLEXIBLE-CONDITIONS-MIB", lgpCondId5818PowerModuleFailure=lgpCondId5818PowerModuleFailure, lgpCondId5365HotWaterHotGasValveHoursExceeded=lgpCondId5365HotWaterHotGasValveHoursExceeded, lgpCondId4140BypassRestartInhibitExternal=lgpCondId4140BypassRestartInhibitExternal, lgpCondId5440BatteryStringOffline=lgpCondId5440BatteryStringOffline, lgpCondId5856BatteryModuleFault=lgpCondId5856BatteryModuleFault, lgpCondId6592SystemDateChanged=lgpCondId6592SystemDateChanged, lgpCondId4500PDUOverCurrent=lgpCondId4500PDUOverCurrent, lgpCondId5039HumidifierUnderCurrent=lgpCondId5039HumidifierUnderCurrent, lgpCondId6383SFAReservedEvent47=lgpCondId6383SFAReservedEvent47, lgpCondId6531ExternalAirSensorCIssue=lgpCondId6531ExternalAirSensorCIssue, lgpCondId5060RemoteSensorIssue=lgpCondId5060RemoteSensorIssue, lgpCondId4990SupplyRefrigOverTempBand2=lgpCondId4990SupplyRefrigOverTempBand2, lgpCondId6239FluidValveHoursExceeded=lgpCondId6239FluidValveHoursExceeded, lgpCondId4629SupplyChilledWaterTempSensorIssue=lgpCondId4629SupplyChilledWaterTempSensorIssue, lgpCondId6366SFAReservedEvent30=lgpCondId6366SFAReservedEvent30, lgpCondId4906LowAmbientTemperature=lgpCondId4906LowAmbientTemperature, lgpCondId4184BatteryBreaker3CloseFailure=lgpCondId4184BatteryBreaker3CloseFailure, lgpCondId4173MainBatteryDisconnectOpen=lgpCondId4173MainBatteryDisconnectOpen, lgpCondId4275InputContact06=lgpCondId4275InputContact06, lgpCondId4756ServiceCodeActive=lgpCondId4756ServiceCodeActive, lgpCondId6065BatteryChargeEqualizationTimeout=lgpCondId6065BatteryChargeEqualizationTimeout, lgpCondId5280LowFluidPressure=lgpCondId5280LowFluidPressure, lgpCondId6310ChilledWaterInletTemperatureControlActive=lgpCondId6310ChilledWaterInletTemperatureControlActive, lgpCondId5145MMSModuleAlarmActive=lgpCondId5145MMSModuleAlarmActive, lgpCondId5178OutputOvervoltage=lgpCondId5178OutputOvervoltage, lgpCondId6630InputUnderVoltage=lgpCondId6630InputUnderVoltage, lgpCondId5068ReheaterOverTemperature=lgpCondId5068ReheaterOverTemperature, lgpCondId5479ContactClosureOpen=lgpCondId5479ContactClosureOpen, lgpCondId4648SupplyFluidUnderTemp=lgpCondId4648SupplyFluidUnderTemp, lgpCondId4198BatteryBreaker8OpenFailure=lgpCondId4198BatteryBreaker8OpenFailure, lgpCondId5300PumpHoursExceeded=lgpCondId5300PumpHoursExceeded, lgpCondId6299RackDoorsOpen=lgpCondId6299RackDoorsOpen, lgpCondId5044ExtHumidifierLockout=lgpCondId5044ExtHumidifierLockout, lgpCondId4193BatteryBreaker6CloseFailure=lgpCondId4193BatteryBreaker6CloseFailure, lgpCondId4916DischargeLowOverallVoltage=lgpCondId4916DischargeLowOverallVoltage, lgpCondId5249EventState=lgpCondId5249EventState, lgpCondId4551GenericTestEvent=lgpCondId4551GenericTestEvent, lgpCondId5417DigitalOutputBoardNotDetected=lgpCondId5417DigitalOutputBoardNotDetected, lgpCondId5892ProgramInputContact09=lgpCondId5892ProgramInputContact09, lgpCondId5807OutputOffPending=lgpCondId5807OutputOffPending, lgpCondId6666AutomaticTransferInhibited=lgpCondId6666AutomaticTransferInhibited, lgpCondId5773CompressorCapacityNormal=lgpCondId5773CompressorCapacityNormal, lgpCondId6309ColdAisleAirSensorFailure=lgpCondId6309ColdAisleAirSensorFailure, lgpCondId6794EEVSumpTemperatureSensorIssue=lgpCondId6794EEVSumpTemperatureSensorIssue, lgpCondId5062Compressor1LowSuctionPressure=lgpCondId5062Compressor1LowSuctionPressure, lgpCondId4824SystemCommFail=lgpCondId4824SystemCommFail, lgpCondId4189BatteryBreaker5OpenFailure=lgpCondId4189BatteryBreaker5OpenFailure, lgpCondId5786BranchLowVoltage=lgpCondId5786BranchLowVoltage, lgpCondId4182BatteryCircuitBreaker3Open=lgpCondId4182BatteryCircuitBreaker3Open, lgpCondId5066Compressor1LowPressureTransducerIssue=lgpCondId5066Compressor1LowPressureTransducerIssue, lgpCondId5537CondenserControlBoardIssue=lgpCondId5537CondenserControlBoardIssue, lgpCondId4185BatteryCircuitBreaker4Open=lgpCondId4185BatteryCircuitBreaker4Open, lgpCondId5026SupplyAirSensorIssue=lgpCondId5026SupplyAirSensorIssue, lgpCondId5270CompressorHighHeadPressure=lgpCondId5270CompressorHighHeadPressure, lgpCondId5306FreeCoolingValveHoursExceeded=lgpCondId5306FreeCoolingValveHoursExceeded, lgpCondId5850SystemShutdownTransformerOverTemperature=lgpCondId5850SystemShutdownTransformerOverTemperature, lgpCondId5968InverterDesaturation=lgpCondId5968InverterDesaturation, lgpCondId6679ContactorNeutralFail=lgpCondId6679ContactorNeutralFail, lgpCondId5768OutletAirOvertemperatureLimit=lgpCondId5768OutletAirOvertemperatureLimit, lgpCondId6358PipeTemperatureSensorFailure=lgpCondId6358PipeTemperatureSensorFailure, lgpCondId5609ThermalRunawayCelltoAmbientTemperatureEvent=lgpCondId5609ThermalRunawayCelltoAmbientTemperatureEvent, lgpCondId5662SFAReservedEvent21=lgpCondId5662SFAReservedEvent21, lgpCondId5598RemoteSensorUnderTemperature=lgpCondId5598RemoteSensorUnderTemperature, lgpCondId5611ThermalRunawayChargerCurrentLevelOneEvent=lgpCondId5611ThermalRunawayChargerCurrentLevelOneEvent, lgpCondId5983BypassIsolationBreakerBIBOpen=lgpCondId5983BypassIsolationBreakerBIBOpen, lgpCondId4273InputContact04=lgpCondId4273InputContact04, lgpCondId4714ShutdownLossOfPower=lgpCondId4714ShutdownLossOfPower, lgpCondId5067ExtCompressorLockout=lgpCondId5067ExtCompressorLockout, lgpCondId5643SFAReservedEvent2=lgpCondId5643SFAReservedEvent2, lgpCondId6187ShutdownPending=lgpCondId6187ShutdownPending, lgpCondId5543CondenserSupplyRefrigerantUnderTemp=lgpCondId5543CondenserSupplyRefrigerantUnderTemp, lgpCondId4341VelocityAuthenticationFailure=lgpCondId4341VelocityAuthenticationFailure, lgpCondId4621ExternalAirSensorBIssue=lgpCondId4621ExternalAirSensorBIssue, lgpCondId4178BatteryBreaker1CloseFailure=lgpCondId4178BatteryBreaker1CloseFailure, lgpCondId5594RemoteSensorAverageUnderTemperature=lgpCondId5594RemoteSensorAverageUnderTemperature, lgpCondId4195BatteryBreaker7OpenFailure=lgpCondId4195BatteryBreaker7OpenFailure, lgpCondId4986SupplyRefrigUnderTempBand1=lgpCondId4986SupplyRefrigUnderTempBand1, lgpCondId5663SFAReservedEvent22=lgpCondId5663SFAReservedEvent22, lgpCondId4469PDUOverCurrentL2=lgpCondId4469PDUOverCurrentL2, lgpCondId4441SystemControllerError=lgpCondId4441SystemControllerError, lgpCondId6628SyncFail=lgpCondId6628SyncFail, lgpCondId6221NeutralVoltageFault=lgpCondId6221NeutralVoltageFault, lgpCondId5508ColdAisleTempOutofRange=lgpCondId5508ColdAisleTempOutofRange, lgpCondId5839PowerModuleOverTemperature=lgpCondId5839PowerModuleOverTemperature, lgpCondId5439BatteryStringEqualize=lgpCondId5439BatteryStringEqualize, lgpCondId5295ReturnFluidTempSensorIssue=lgpCondId5295ReturnFluidTempSensorIssue, lgpCondId5819PowerModuleWarning=lgpCondId5819PowerModuleWarning, lgpCondId5874BatteryOverVoltage=lgpCondId5874BatteryOverVoltage, lgpCondId5625EEVUnspecifiedGeneralEvent=lgpCondId5625EEVUnspecifiedGeneralEvent, lgpCondId5335ReturnAirUnderTemperature=lgpCondId5335ReturnAirUnderTemperature, lgpCondId6786SubgroupFirmwareUpdateRequired=lgpCondId6786SubgroupFirmwareUpdateRequired)
