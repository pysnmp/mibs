#
# PySNMP MIB module MBG-SNMP-FDMXPT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/meinberg/MBG-SNMP-FDMXPT-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:57:03 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion")
mbgSnmpRoot, = mibBuilder.importSymbols("MBG-SNMP-ROOT-MIB", "mbgSnmpRoot")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
NotificationType, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ObjectIdentity, Counter64, Gauge32, IpAddress, MibIdentifier, iso, ModuleIdentity, Counter32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ObjectIdentity", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "iso", "ModuleIdentity", "Counter32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mbgFDM = ModuleIdentity((1, 3, 6, 1, 4, 1, 5597, 15))
mbgFDM.setRevisions(('2012-01-25 00:00', '2006-01-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mbgFDM.setRevisionsDescriptions(('Update to new format using MBG-SNMP-ROOT-MIB', 'Covering FDMXPT modules from Meinberg',))
if mibBuilder.loadTexts: mbgFDM.setLastUpdated('201201250000Z')
if mibBuilder.loadTexts: mbgFDM.setOrganization('www.meinberg.de')
if mibBuilder.loadTexts: mbgFDM.setContactInfo('postal:   Meinberg Funkuhren\n                    Auf der Landwehr 22\n                    31812 Bad Pyrmont\n\t            Germany\n\n          email:    info@meinberg.de')
if mibBuilder.loadTexts: mbgFDM.setDescription('Top-level infrastructure of the MBG-SNMP project enterprise MIB tree')
mbgFDMData = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 15, 2))
mbgFDMTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 15, 3))
mbgFDMMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMMode.setStatus('current')
if mibBuilder.loadTexts: mbgFDMMode.setDescription('current Mode of FDM')
mbgFDMModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgFDMModeVal.setDescription('current Mode of FDM as value')
mbgFDMFrequency = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMFrequency.setStatus('current')
if mibBuilder.loadTexts: mbgFDMFrequency.setDescription('current powerline frequency in Hz as measured by FDM')
mbgFDMFrequencyVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMFrequencyVal.setStatus('current')
if mibBuilder.loadTexts: mbgFDMFrequencyVal.setDescription('current powerline frequency in Hz*1000 as value')
mbgFDMRefTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMRefTime.setStatus('current')
if mibBuilder.loadTexts: mbgFDMRefTime.setDescription('current reference time of FDM')
mbgFDMPLTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMPLTime.setStatus('current')
if mibBuilder.loadTexts: mbgFDMPLTime.setDescription('current powerline time of FDM')
mbgFDMFreqDev = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMFreqDev.setStatus('current')
if mibBuilder.loadTexts: mbgFDMFreqDev.setDescription('Frequency Devidation in Hz')
mbgFDMFreqDevVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMFreqDevVal.setStatus('current')
if mibBuilder.loadTexts: mbgFDMFreqDevVal.setDescription('current frequency deviation in Hz*1000 as value')
mbgFDMTimeDev = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMTimeDev.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTimeDev.setDescription('Time Devidation in seconds')
mbgFDMTimeDevVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMTimeDevVal.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTimeDevVal.setDescription('current time deviation in ms')
mbgFDMErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 5597, 15, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgFDMErrorStatus.setStatus('current')
if mibBuilder.loadTexts: mbgFDMErrorStatus.setDescription('The 8 error bits of the FDM in string format')
mbgFDMTrapInternalError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 1))
if mibBuilder.loadTexts: mbgFDMTrapInternalError.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapInternalError.setDescription('trap to be sent when an internal error occurs (see error bits)')
mbgFDMTrapNoTimeString = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 2))
if mibBuilder.loadTexts: mbgFDMTrapNoTimeString.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapNoTimeString.setDescription('trap to be sent when no time string can be read from reference clock')
mbgFDMTrapNo10Mhz = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 3))
if mibBuilder.loadTexts: mbgFDMTrapNo10Mhz.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapNo10Mhz.setDescription('trap to be sent when the reference frequency is not available')
mbgFDMTrapNoPPS = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 4))
if mibBuilder.loadTexts: mbgFDMTrapNoPPS.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapNoPPS.setDescription('trap to be sent when the reference Pulse Per Second is not available')
mbgFDMTrapNoPowerline = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 5))
if mibBuilder.loadTexts: mbgFDMTrapNoPowerline.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapNoPowerline.setDescription('trap to be sent when powerline frequency could not be detected')
mbgFDMTrapTimeDeviationOverflow = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 6))
if mibBuilder.loadTexts: mbgFDMTrapTimeDeviationOverflow.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapTimeDeviationOverflow.setDescription('trap to be sent when a time deviation overflow happens')
mbgFDMTrapA1Overflow = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 7))
if mibBuilder.loadTexts: mbgFDMTrapA1Overflow.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapA1Overflow.setDescription('trap to be sent when Analog1 overflows')
mbgFDMTrapA2Overflow = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 8))
if mibBuilder.loadTexts: mbgFDMTrapA2Overflow.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapA2Overflow.setDescription('trap to be sent when Analog2 overflows')
mbgFDMTrapFreqLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 9))
if mibBuilder.loadTexts: mbgFDMTrapFreqLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapFreqLimitExceeded.setDescription('trap to be sent when the current frequency exceeds the valid frequency range')
mbgFDMXPTReboot = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 10))
if mibBuilder.loadTexts: mbgFDMXPTReboot.setStatus('current')
if mibBuilder.loadTexts: mbgFDMXPTReboot.setDescription('trap to be sent when the FDMXPT module starts up')
mbgFDMNormalOperation = NotificationType((1, 3, 6, 1, 4, 1, 5597, 15, 3, 99))
if mibBuilder.loadTexts: mbgFDMNormalOperation.setStatus('current')
if mibBuilder.loadTexts: mbgFDMNormalOperation.setDescription('trap to be sent when the FDM status is OK (Normal Operation)')
mbgFDMConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 15, 90))
mbgFDMCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 15, 90, 1))
mbgFDMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 15, 90, 2))
mbgFDMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5597, 15, 90, 1, 1)).setObjects(("MBG-SNMP-FDMXPT-MIB", "mbgFDMObjectsGroup"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgFDMCompliance = mbgFDMCompliance.setStatus('current')
if mibBuilder.loadTexts: mbgFDMCompliance.setDescription('The compliance statement for SNMP entities which implement version 2\n        of the XPT MIB')
mbgFDMObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5597, 15, 90, 2, 1)).setObjects(("MBG-SNMP-FDMXPT-MIB", "mbgFDMMode"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMModeVal"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMFrequency"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMFrequencyVal"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMRefTime"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMPLTime"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMFreqDev"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMFreqDevVal"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTimeDev"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTimeDevVal"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMErrorStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgFDMObjectsGroup = mbgFDMObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgFDMObjectsGroup.setDescription('The collection of objects for the MBG FDMXPT MIB')
mbgFDMTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5597, 15, 90, 2, 2)).setObjects(("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapInternalError"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapNoTimeString"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapNo10Mhz"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapNoPPS"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapNoPowerline"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapTimeDeviationOverflow"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapA1Overflow"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapA2Overflow"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMTrapFreqLimitExceeded"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMXPTReboot"), ("MBG-SNMP-FDMXPT-MIB", "mbgFDMNormalOperation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgFDMTrapsGroup = mbgFDMTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgFDMTrapsGroup.setDescription('The collection of traps for the MBG FDMXPT MIB')
mibBuilder.exportSymbols("MBG-SNMP-FDMXPT-MIB", mbgFDMData=mbgFDMData, mbgFDMTrapInternalError=mbgFDMTrapInternalError, PYSNMP_MODULE_ID=mbgFDM, mbgFDMTraps=mbgFDMTraps, mbgFDMTrapNoPPS=mbgFDMTrapNoPPS, mbgFDMFrequencyVal=mbgFDMFrequencyVal, mbgFDMObjectsGroup=mbgFDMObjectsGroup, mbgFDMCompliance=mbgFDMCompliance, mbgFDMMode=mbgFDMMode, mbgFDM=mbgFDM, mbgFDMTimeDevVal=mbgFDMTimeDevVal, mbgFDMTrapNoTimeString=mbgFDMTrapNoTimeString, mbgFDMCompliances=mbgFDMCompliances, mbgFDMXPTReboot=mbgFDMXPTReboot, mbgFDMTrapsGroup=mbgFDMTrapsGroup, mbgFDMErrorStatus=mbgFDMErrorStatus, mbgFDMTrapA1Overflow=mbgFDMTrapA1Overflow, mbgFDMTimeDev=mbgFDMTimeDev, mbgFDMModeVal=mbgFDMModeVal, mbgFDMFrequency=mbgFDMFrequency, mbgFDMTrapA2Overflow=mbgFDMTrapA2Overflow, mbgFDMTrapNoPowerline=mbgFDMTrapNoPowerline, mbgFDMPLTime=mbgFDMPLTime, mbgFDMGroups=mbgFDMGroups, mbgFDMTrapFreqLimitExceeded=mbgFDMTrapFreqLimitExceeded, mbgFDMFreqDevVal=mbgFDMFreqDevVal, mbgFDMTrapTimeDeviationOverflow=mbgFDMTrapTimeDeviationOverflow, mbgFDMRefTime=mbgFDMRefTime, mbgFDMNormalOperation=mbgFDMNormalOperation, mbgFDMFreqDev=mbgFDMFreqDev, mbgFDMTrapNo10Mhz=mbgFDMTrapNo10Mhz, mbgFDMConformance=mbgFDMConformance)
