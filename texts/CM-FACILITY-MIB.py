#
# PySNMP MIB module CM-FACILITY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-FACILITY-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:08:08 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
PriorityMapMode, F3DisplayString, EthernetMediaType, VlanPriority, EthernetPortSpeed, IpVersion, SfpIdentifierValue, CmTrafficACLPriorityType, TrafficDirection, VlanTagType, VlanId, SfpConnectorValue, AdminState, FlowSecState, SecondaryState, TDMFrequencySourceType, SignalDirectionType, CmTrafficAclProtocolType, UsbOperationalMode, CmTrafficAclFilterActionType, AfpTagControl, CmTrafficAclFilterType, VlanEthertype, OperationalState, SfpMediaType = mibBuilder.importSymbols("CM-COMMON-MIB", "PriorityMapMode", "F3DisplayString", "EthernetMediaType", "VlanPriority", "EthernetPortSpeed", "IpVersion", "SfpIdentifierValue", "CmTrafficACLPriorityType", "TrafficDirection", "VlanTagType", "VlanId", "SfpConnectorValue", "AdminState", "FlowSecState", "SecondaryState", "TDMFrequencySourceType", "SignalDirectionType", "CmTrafficAclProtocolType", "UsbOperationalMode", "CmTrafficAclFilterActionType", "AfpTagControl", "CmTrafficAclFilterType", "VlanEthertype", "OperationalState", "SfpMediaType")
slotIndex, neIndex, networkElementEntry, shelfIndex, f3UsbHostIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "slotIndex", "neIndex", "networkElementEntry", "shelfIndex", "f3UsbHostIndex")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
f3LagIndex, = mibBuilder.importSymbols("F3-LAG-MIB", "f3LagIndex")
TimeSource, SquelchControl, ClkSignalType, SSMQualityLevel = mibBuilder.importSymbols("F3-SYNC-MIB", "TimeSource", "SquelchControl", "ClkSignalType", "SSMQualityLevel")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, IpAddress, Bits, TimeTicks, MibIdentifier, Counter32, NotificationType, Unsigned32, ModuleIdentity, Counter64, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "IpAddress", "Bits", "TimeTicks", "MibIdentifier", "Counter32", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, VariablePointer, StorageType, DisplayString, MacAddress, RowStatus, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "VariablePointer", "StorageType", "DisplayString", "MacAddress", "RowStatus", "DateAndTime", "TextualConvention")
cmFacilityMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4))
cmFacilityMIB.setRevisions(('2021-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmFacilityMIB.setRevisionsDescriptions(('\n        Notes from release 202009220000Z,\n         (1) Added new entries to SfpChannelIdentifier TEXTUAL-CONVENTION:\n             frequency-19605, autoTuning.\n\n         Notes from release 202005120000Z,\n         (1) Added TEXTUAL-CONVENTIONs:\n             PlugType, PlugMode, RelativeChannelIdentifier, ChannelType, OutOfBandChannelStatus,\n             GMetroAutoTuningMode, FrequencyIdentifier, ITUCBandChannelIdentifier.\n\n         (2) Added cmEthernetAccPortSfpIdentifierValue column to cmEthernetAccPortTable.\n\n         (3) Added cmEthernetNetPortSfpIdentifierValue column to cmEthernetNetPortTable.\n\n         (4) Added cmEthernetTrafficPortSfpIdentifierValue, cmEthernetTrafficPortPlugType,\n             cmEthernetTrafficPortPlugMode, cmEthernetTrafficPortPlugGMetroAutoTuningMode,\n             cmEthernetTrafficPortPlugChannelType, cmEthernetTrafficPortPlugITUCbandChannel,\n             cmEthernetTrafficPortPlugRelativeChannel, cmEthernetTrafficPortPlugFrequency,\n             cmEthernetTrafficPortPlugOutOfBandChannelStatus, cmEthernetTrafficPortRemotePlugITUCbandChannel,\n             cmEthernetTrafficPortRemotePlugRelativeChannel, cmEthernetTrafficPortRemotePlugFrequency,\n             cmEthernetTrafficPortRemoteSfpVendorName, cmEthernetTrafficPortRemoteSfpName,\n             cmEthernetTrafficPortRemoteSfpPartNumber, cmEthernetTrafficPortRemoteSfpHardwareRevision,\n             cmEthernetTrafficPortRemoteSfpSerialNumber, cmEthernetTrafficPortRemoteSfpDateOfManufacture,\n             cmEthernetTrafficPortRemoteSfpLinkLength, cmEthernetTrafficPortRemoteSfpLaserWaveLength,\n             cmEthernetTrafficPortRemoteSfpLaserFrequency, cmEthernetTrafficPortRemoteSfpMediaType,\n             cmEthernetTrafficPortRemoteSfpConnectorValue and cmEthernetTrafficPortRemoteSfpIdentifierValue\n             columns to cmEthernetTrafficPortTable.\n\n         Notes from release 202006040000Z,\n           (1) Added cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl,\n               cmEthernetAccPortLoopbackTestReflectorIPv4Address,\n               cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl,\n               cmEthernetAccPortLoopbackTestReflectorIPv6Address\n               columns to cmEthernetAccPortTable.\n\n           (2) Added cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl,\n               cmEthernetNetPortLoopbackTestReflectorIPv4Address,\n               cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl,\n               cmEthernetNetPortLoopbackTestReflectorIPv6Address\n               columns to cmEthernetNetPortTable.\n\n           (3) Added cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl,\n               cmEthernetTrafficPortLoopbackTestReflectorIPv4Address,\n               cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl,\n               cmEthernetTrafficPortLoopbackTestReflectorIPv6Address\n               columns to cmEthernetTrafficPortTable.\n\n         Notes from release 202005110000Z,\n           (1) new f3IrigOutputGroupIfIndex\n           (2) new f3IrigOutputGroupEntityIndex\n\n         Notes from release 202001300000Z,\n           (1) Added f3GPSReceiverPortSpoofingPpsThreshold , f3GPSReceiverPortSpoofingPpsDifference  , f3GPSReceiverPortSpoofingLocationThreshold,\n               f3GPSReceiverPortSpoofingLocationDifference , f3GPSReceiverPortGnssDynamicModel \n           (2) New TEXTUAL-CONVENTION:: DynamicModelType\n               - portable, stationary, pedestrian, automotive, sea, airborne_1g, airborne_2g, airborne_4g\n\n         Notes from release 201912090000Z\n           (1) Added new column to f3PulsePerSecondPortTable:\n               f3PulsePerSecondPortAssumedClockClass\n           (2) Added new column to f3TimeOfDayPortTable:\n               f3TimeOfDayPortAssumedClockClass\n\n         Notes from release 201912080000Z\n           (1) f3PulsePerSecondPortDelayCompensation SYNTAX\n               Integer32 is redefined to (-5000000..5000000)\n           (2) f3TimeOfDayPortDelayCompensation\n               Integer32 is redefined to (-5000000..5000000)\n\n         Notes from release 201911240000Z\n            (1) Added new column to f3GPSReceiverPortTable:\n                  f3GPSReceiverPortFailureSuspendTime\n\n         Notes from release 201911210000Z\n            (1) Added TEXTUAL-CONVENTION:\n                  CcActivePortState\n\n         Notes from release 201911190000Z\n            (1) Added TEXTUAL-CONVENTION:\n                  CcPortDutyCycle\n            (2) New ccInputPortTable, with columns:\n                  ccInputPortIndex, ccInputPortIfIndex, ccInputPortEntityIndex, ccInputPortAlias,\n                  ccInputPortAdminState, ccInputPortOperationalState, ccInputPortSecondaryState\n            (3) New ccGroupPortEntry, with columns:\n                  ccGroupIndex, ccGroupIfIndex, ccGroupEntityIndex, ccGroupAlias,\n                  ccGroupActivePorts, ccGroupPhaseAdjust, ccGroupDutyCycle\n\n         Notes from release 201910180000Z\n             Added new SNMP table: cmEncapFlowPointTable \n\n         Notes from release 201909130000Z\n            (1) Added TEXTUAL-CONVENTION:\n                  IrigTimeCode, IrigControlField, IrigRelayOperation,\n                  IrigOutputType, IrigDigitalSignalVoltage, IrigGroupExtensionType\n            (2) New f3IrigRs422OutputPortTable, with columns:\n                  f3IrigRs422OutputPortIndex, f3IrigRs422OutputPortIfIndex, f3IrigRs422OutputPortEntityIndex,\n                  f3IrigRs422OutputPortAlias, f3IrigRs422OutputPortAdminState, f3IrigRs422OutputPortOperationalState,\n                  f3IrigRs422OutputPortSecondaryState, f3IrigRs422OutputPortTimeCode, f3IrigRs422OutputPortControlField\n            (3) New f3IrigOpticalOutputPortTable, with columns:\n                  f3IrigOpticalOutputPortIndex, f3IrigOpticalOutputPortIfIndex, f3IrigOpticalOutputPortEntityIndex,\n                  f3IrigOpticalOutputPortAlias, f3IrigOpticalOutputPortAdminState, f3IrigOpticalOutputPortOperationalState,\n                  f3IrigOpticalOutputPortSecondaryState, f3IrigOpticalOutputPortTimeCode, f3IrigOpticalOutputPortControlField\n            (4) New f3IrigRelayOutputPortTable, with columns:\n                  f3IrigRelayOutputPortIndex, f3IrigRelayOutputPortIfIndex, f3IrigRelayOutputPortEntityIndex,\n                  f3IrigRelayOutputPortAlias, f3IrigRelayOutputPortAdminState, f3IrigRelayOutputPortOperationalState,\n                  f3IrigRelayOutputPortSecondaryState, f3IrigRelayOutputPortRelayOperation\n            (5) New f3IrigOutputGroupTable, with columns:\n                  f3IrigOutputGroupIndex, f3IrigOutputGroupAlias, f3IrigOutputGroupExtensionType,\n                  f3IrigOutputGroupExtensionDetection\n            (6) New f3IrigOutputUnitPortTable, with columns:\n                  f3IrigOutputUnitPortIndex, f3IrigOutputUnitPortIfIndex, f3IrigOutputUnitPortEntityIndex,\n                  f3IrigOutputUnitPortAlias, f3IrigOutputUnitPortAdminState, f3IrigOutputUnitPortOperationalState,\n                  f3IrigOutputUnitPortSecondaryState, f3IrigOutputUnitPortTimeCode, f3IrigOutputUnitPortControlField,\n                  f3IrigOutputUnitPortType, f3IrigOutputUnitPortDigitalVoltage\n            (7) New Conformance Group: f3IrigPortGroup \n\n         Notes from release 201909110000Z,\n          (1) New GPS10MHzPortEntry column: \n                - gps10MHzPortInputSignalType\n\n         Notes from release 201909050000Z\n            (1) New bits8PortGroupTable column:\n                - bits8PortGroupClkIfEnabledPorts\n        \n         Notes from release 201907080000Z,\n            (1) Added f3GPSReceiverPortSelfSurveyPositionAccuracy, f3GPSReceiverPortHorizontalAccuracy, f3GPSReceiverPortVerticalAccuracy,\n                      f3GPSReceiverPortTDOP, f3GPSReceiverPortHDOP, f3GPSReceiverPortVDOP\n\n         Notes from release 201905210000Z\n            (1) Add missing f3PulsePerSecondPortTable column:\n                - f3PulsePerSecondPortAlias\n            (2) Add missing f3TimeOfDayPort column:\n                - f3TimeOfDayPortAlias\n\n         Notes from release 201903210000Z\n            (1) Added the following to cmEthernetTrafficPortTable\n                - cmEthernetTrafficPortSfpTxPowerLevel\n                - cmEthernetTrafficPortSfpRxPowerLevel\n\n         Notes from release 201902220000Z\n            (1) New f3Usb3GDCNPortTable columns:\n                - f3Usb3GDCNPortIpAddress\n                - f3Usb3GDCNPortNetMask\n\n          Notes from release 201901240000Z,\n            (1) Modified f3GPSReceiverPortTable colums:\n               - f3GPSReceiverPortCoordinateAltitude:  \n                      MAX-ACCESS is reverted to read-only,\n                      SYNTAX is reverted to Unsigned32\n            (2) New f3GPSReceiverPortTable columns:\n                - f3GPSReceiverPortCoordinateStringAltitude with:\n                      MAX-ACCESS read-write,\n                      SYNTAX DisplayString\n                \n            (3) Modified f3GPSReceiverPortTable colums:\n               - f3GPSReceiverPortCoordinateLatitude:  MAX-ACCESS read-write instead read-only\n               - f3GPSReceiverPortCoordinateLongitude: MAX-ACCESS read-write instead read-only\n               - f3GPSReceiverPortCoordinateAltitude:  MAX-ACCESS read-write instead read-only,\n                                                       SYNTAX DisplayString instead Unsigned32\n            (4) New f3GPSReceiverPortTable columns:\n                - f3GPSReceiverPortSelfSurveyControl\n            \n         Notes from release 201901180000Z\n            (1) Added f3GPSReceiverPortAGC\n\n         Notes from release 201901070000Z\n            (1) Added TEXTUAL-CONVENTION:: SciSignalMode, SciSignalDirection, and SciRxSsmQL\n            (2) Added sciPortTable and sciPortGroup\n            (3) Added TEXTUAL-CONVENTION:: SynceRxSsmQl and SynceMode\n            (3) Added cmEthernetTrafficPortTxSsm, cmEthernetTrafficPortRxSsmQL,\n                      cmEthernetTrafficPortSyncEMode, cmEthernetTrafficPortSyncEServiceAvailableTime,\n                      cmEthernetTrafficPortSyncEServiceUnavailableTime, and \n                      cmEthernetTrafficPortSyncEServiceAvailablePercentage\n            (4) Added qzss(5) to ConstellationTypesBitMap\n            (5) Added TEXTUAL-CONVENTION:: LocationMode and TimeAdvanceMode\n            (6) Added f3GPSReceiverPortLocationMode, f3GPSReceiverPortTimeAdvanceMode,\n                      f3GPSReceiverPortTimeAdvanceValue, f3GPSReceiverPortForcedAntennaConnected,\n                      f3GPSReceiverPortServiceAvailableTime, f3GPSReceiverPortServiceUnavailableTime, and\n                      f3GPSReceiverPortServiceAvailablePercentage\n            (7) Modified f3GPSReceiverPortTable colums:\n               - f3GPSReceiverPortCoordinateLatitude:  MAX-ACCESS read-write instead of read-only\n               - f3GPSReceiverPortCoordinateLongitude: MAX-ACCESS read-write instead of read-only\n            (8) New f3GPSReceiverPortTable columns:\n                - f3GPSReceiverPortSelfSurveyControl\n                - f3GPSReceiverPortCoordinateStringAltitude with:\n                      MAX-ACCESS read-write,\n                      SYNTAX DisplayString\n\n         Notes from release 201810260000Z\n            (1) New cmFlowPointTable columns\n                - cmFlowPointWfqSegmentationCOS\n                - cmFlowPointWfqGroupCOS\n                - cmFlowPointWfqGroupEirLo\n                - cmFlowPointWfqGroupEirHi\n            (2) New f3FpQosShaperTable column\n                - f3FpQosShaperWfqWeight\n            (3) New cmEthernetTrafficPortTable columns\n                - cmEthernetTrafficPortWfqSegmentationCOS\n                - cmEthernetTrafficPortWfqGroupCOS\n                - cmEthernetTrafficPortWfqGroupEirLo\n                - cmEthernetTrafficPortWfqGroupEirHi     \n            (4) New cmTrafficPortQosShaperTable column\n                - cmTrafficPortQosShaperWfqWeight\n\n          Notes from release 201804300000Z\n            (1) New cmFlowPointTable column added for Elephant Flow management:\n                - cmFlowPointEfIdentificationFields,\n            (2) New textual convention: EfIdentificationFieldType\n\n          Notes from release 201802210000Z,\n            (1) New bitsPortTable columns:\n                - bitsPortCrc4\n                - bitsPortIdleCode\n                - bitsPortAis\n                - bitsPortSaBitsAdminState\n                - bitsPortSquelchControl\n                - bitsPortSignalShape\n                - bitsPortSignalFrequency\n            (2) New f3PulsePerSecondPortTable columns:\n                - f3PulsePerSecondPortOutputDelay\n                - f3PulsePerSecondPortWidth\n                - f3PulsePerSecondPortPolarity\n                - f3PulsePerSecondPortImpedance\n            (3) Added BitsPortImpedanceMode literals:\n                - bits-50Ohm(4)\n            (4) Added BitsPortLineType literals:\n                - other(4)\n            (5) New textual conventions:\n                  SaBitsState, SignalShape, SignalFrequency,\n                  PpsPolarity and PpsPortImpedanceMode    \n                     \n          Notes from release 201802020000Z\n           (1) Added cmQosFlowPolicerPolicingEnabled to cmQosFlowPolicerTable\n          \n          Notes from release 201706210000Z,\n           (1) New f3GPSReceiverPortTable columns:\n               - f3GPSReceiverPortPDOP\n           (2) Modified f3GPSReceiverPortTable columns:\n               - New value range for f3GPSReceiverPortPDOPMask\n          Notes from release 201703300000Z,\n           (1) New f3GPSReceiverPortTable columns:\n               - f3TimeOfDayPortSignalDirection\n               - f3TimeOfDayPortInputRate\n               - f3TimeOfDayPortDelayCompensation\n           (2) f3PulsePerSecondPortDelayCompensation SYNTAX\n               Integer32 is redefined to (-100000..100000)\n          Notes from release 201703100000Z,\n           (1) New f3GPSReceiverPortTable columns:\n               - f3GPSReceiverPortPDOPMask\n               - f3GPSReceiverPortSelfSurveyPeriod\n               - f3GPSReceiverPortSatMin1Threshold\n               - f3GPSReceiverPortSatMin2Threshold\n           (2) f3GPSReceiverPortGnssSystem STATUS is deprecated \n         \n         Notes from release 201711300000Z\n            (1) New cmFlowPointTable column added:\n                - cmFlowPointAclNoMatchDisposition,\n            (2) New textual convention AclNoMatchDispositionType\n         Notes from release 201706120000Z\n            (1) New cmFlowPointTable columns added for elephant flow management:\n                - cmFlowPointEfEnabled,\n                - cmFlowPointEfIdentificationType,\n                - cmFlowPointEfRateThresholdLo,\n                - cmFlowPointEfRateThresholdHi\n            (2) New textual convention: EfIdentificationType\n         Notes from release 201704100000Z\n            (1) update CmRemoteLinkIds\n                - add bit fields 17 to 26\n         Notes from release 201703220000Z\n            (1) New f3AclRuleTable column:\n                - f3AclRuleActive\n         Notes from release 201702140000Z\n            (1) New cmEthernetTrafficPortTable columns:\n                - cmEthernetTrafficPortExpDEEncType,\n                - cmEthernetTrafficPortExpDEPairsAction\n            (2) New tables:\n                - f3EthernetTrafficPortExpDEEncTable,\n                - f3EthernetTrafficPortExpDEDecTable,\n                - f3EthernetTrafficPortExpDEPairTable\n         Notes from release 201612140000Z\n            (1) New cmFlowPointTable columns:\n                - cmFlowPointRefElpObject\n          Notes from release 201611280000Z,\n           (1) New textual conventions: SatelliteHealth, DelayOption\n           (2) Added f3SatelliteTable\n           (3) New f3GPSReceiverPortTable columns:\n               - f3GPSReceiverPortAntennaDelayValue\n               - f3GPSReceiverPortAntennaDelayType\n               - f3GPSReceiverPortCNOMask\n               - f3GPSReceiverPortElevationMask\n               - f3GPSReceiverPortCoordinateLatitude\n               - f3GPSReceiverPortCoordinateLongitude\n               - f3GPSReceiverPortCoordinateAltitude\n         Notes from release 201610190000Z\n            (1) New cmFlowPointTable columns:\n                - cmFlowPointElmiEvcIdentifier\n         Notes from release 201610050000Z\n            (1) Added f3AclRuleTable.\n         Notes from release 201609130000Z\n            (1) New cmFlowPointTable columns:\n                - cmFlowPointRefEoMplsPwObject\n         Notes from release 201607110000Z\n            (1) New cmEthernetTrafficPortTable columns:\n                - cmEthernetTrafficPortIngressSwapPriorityVIDEnabled,\n                - cmEthernetTrafficPortEgressSwapPriorityVIDEnabled,\n                - cmEthernetTrafficPortSwapPriorityVID\n         Notes from release 201607110000Z\n            (1) renamed the type FlowSecureState to FlowSecState\n         Notes from release 201606070000Z,\n            (1) New cmEthernetTrafficPortTable columns:\n                - cmEthernetTrafficPortMode,\n                - cmEthernetTrafficPortServiceType,\n                - cmEthernetTrafficPortLoopbackSourceMacControlEnabled,\n                - cmEthernetTrafficPortLoopbackDestMacControlEnabled,\n                - cmEthernetTrafficPortLoopbackSourceMacAddress,\n                - cmEthernetTrafficPortLoopbackDestMacAddress,\n                - cmEthernetTrafficPortLoopbackBlockingEnabled,\n                - cmEthernetTrafficPortMediaTypeAutoSelected,\n                - cmEthernetTrafficPortLowLatencyQueuingEnabled,\n                - cmEthernetTrafficPortDiagnosticMacAddress\n            (2) New cmFlowPointTable columns:\n                - cmFlowPointEgressShapingType,\n                - cmFlowPointEgressInnerTagPrioMapEnabled,\n                - cmFlowPointAutoBandwidthConfigEnabled,\n                - cmFlowPointAutoCIRPercentage,\n                - cmFlowPointFrameFwdEnabled,\n                - cmFlowPointUsePortPrioMapProfile\n            (3) Added cmEthernetTrafficPortExtTable.\n            (4) Added cmEthernetTrafficPortJdsuExtTable.\n            (5) Added f3FpQosShaperTable.\n            (6) Added f3FpQosPolicerTable.\n          Notes from release 201607110000Z\n             (1) renamed the type FlowSecureState to FlowSecState\n          Notes from release 201601200000Z \n            (1) add f3GPSReceiverPortAlias to f3GPSReceiverPortTable\n            (2) add f3GPSReceiverPortGnssSystemsBitMap to f3GPSReceiverPortTable\n          Notes frome release 201505010000Z,\n           (1) Added cmEthernetAccPortDiagnosticMacAddress\n           (2) Added cmEthernetNetPortDiagnosticMacAddress\n\n          Notes frome release 201410150000Z,\n           (1) Removed CmLinkLossFwdTriggerTypes literals:\n                 - trig-opu-ais,\n                 - trig-eth-epc.\n           (2) Removed CmLinkLossFwdTxActionType literal:\n                 - llf-eth-epc.\n           Notes from release 201408270000Z,\n           (1) Added TxDeiAction TEXTUAL-CONVENTION.\n           (2) Added RxDeiAction TEXTUAL-CONVENTION.\n           (3) Added DeiOuterTagType TEXTUAL-CONVENTION.\n           (4) New cmEthernetAccPortTable columns:\n               - cmEthernetAccPortRxDeiAction\n               - cmEthernetAccPortTxDeiAction\n               - cmEthernetAccPortRxDeiOuterTagType\n               - cmEthernetAccPortTxDeiOuterTagType\n           (5) New cmEthernetNetPortTable columns:\n               - cmEthernetNetPortRxDeiAction\n               - cmEthernetNetPortTxDeiAction\n               - cmEthernetNetPortRxDeiOuterTagType\n               - cmEthernetNetPortTxDeiOuterTagType\n         Notes from release 201407180000Z,\n           (1) Added new CmLoopbackType literals:\n                 - facility-och,\n                 - facility-och-timed,\n                 - terminal-och,\n                 - terminal-och-timed.\n\n           (2) Added new CmLinkLossFwdSignalType literals:\n                 - llf-odu-ais,\n                 - llf-odu-lck,\n                 - llf-odu-tim,\n                 - llf-odu-bdi,\n                 - llf-opu-plm,\n                 - llf-opu-csf,\n                 - llf-eth-epc.\n\n           (3) Added new CmLinkLossFwdTriggerTypes literals:\n                 - trig-odu-ais,\n                 - trig-odu-lck,\n                 - trig-odu-tim,\n                 - trig-odu-bdi,\n                 - trig-opu-ais,\n                 - trig-opu-plm,\n                 - trig-opu-csf,\n                 - trig-eth-epc.\n\n           (4) Added new CmLinkLossFwdTxActionType literals:\n                 - llf-eth-epc,\n                 - llf-odu-ais,\n                 - llf-opu-csf,\n                 - llf-otu-ais.\n\n           (5) Added new XgePhyType literal:\n                 - otn.\n\n         Notes from release 201406250000Z,\n           (1) New cmEthernetAccPortTable columns:\n               - cmEthernetAccPortLowLatencyQueuingEnabled,\n               - cmEthernetAccPortA2nSwapPriorityVIDEnabled,\n               - cmEthernetAccPortN2aSwapPriorityVIDEnabled,\n               - cmEthernetAccPortSwapPriorityVID.\n           (2) New cmEthernetNetPortTable column:\n               - cmEthernetNetPortLowLatencyQueuingEnabled.\n           (3) Added new literal for FlowTrafficType:\n               - policed-only.\n           (4) Added new literal for ShapingType:\n               - llq.\n         Notes from release 201405210000Z,\n           (1) New cmEthernetAccPortTable column:\n               - cmEthernetAccPortMediaTypeAutoSelected.\n           (2) New cmEthernetNetPortTable column:\n               - cmEthernetNetPortMediaTypeAutoSelected.\n         Notes from release 201405050000Z,\n           (1) New SfpChannelIdentifier literals:\n               - frequency-19195,\n               - frequency-19190,\n               - frequency-19185,\n               - frequency-19180,\n               - frequency-19175,\n               - frequency-19170,\n               - frequency-19165,\n               - frequency-19160,\n               - frequency-19155,\n               - frequency-19150,\n               - frequency-19145,\n               - frequency-19140,\n               - frequency-19135,\n               - frequency-19130,\n               - frequency-19125.\n         Notes from release 201404240000Z,\n           (1) New cmQosShaperTable objects:\n               - cmQosShaperSoamCIRLo,\n               - cmQosShaperSoamCIRHi,\n               - cmQosShaperSoamEIRLo,\n               - cmQosShaperSoamEIRHi.\n           (2) New cmAccPortQosShaperTable objects:\n               - cmAccPortQosShaperSoamCIRLo,\n               - cmAccPortQosShaperSoamCIRHi,\n               - cmAccPortQosShaperSoamEIRLo,\n               - cmAccPortQosShaperSoamEIRHi.\n         Notes from release 201404170000Z,\n           (1) New cmEthernetAccPortTable objects:\n               - cmEthernetAccPortLaserWDMChannel,\n               - cmEthernetAccPortLaserIsTunable,\n               - cmEthernetAccPortLaserFrequency.\n           (2) New cmEthernetNetPortTable objects:\n               - cmEthernetNetPortLaserWDMChannel,\n               - cmEthernetNetPortLaserIsTunable,\n               - cmEthernetNetPortLaserFrequency.\n         Notes from release 201310210000Z,\n           (1) Deleted cmEthernetAccPortTable object:\n               - cmEthernetAccPortMonitorPortEnabled,\n               - cmEthernetAccPortBufferSize,\n               - cmEthernetAccPortJDSUControlFramesSnoopingEnabled,\n               - cmEthernetAccPortJDSULoopbackVlan.\n           (2) Deleted cmEthernetNetPortTable object:\n               - cmEthernetNetPortJDSUControlFramesSnoopingEnabled,\n               - cmEthernetNetPortJDSULoopbackVlan.\n           (3) Added tables:\n               - cmEthernetAccPortJdsuExtTable, \n               - cmEthernetNetPortJdsuExtTable.\n         Notes from release 201310140000Z,\n           (1) New cmEthernetAccPortTable objects:\n               - cmEthernetAccPortMonitorPortEnabled,\n               - cmEthernetAccPortBufferSize.\n         Notes from release 201310070000Z,\n           (1) Deleted cmEthernetAccPortTable object:\n               - cmEthernetAccPortJDSUUnitTextId.\n           (2) Deleted cmEthernetNetPortTable object:\n               - cmEthernetNetPortJDSUUnitTextId.\n         Notes from release 201310030000Z,\n           (1) New gps10MHzPortTable object:\n               gps10MHzPortAssumedQL\n         Notes from release 201309160000Z,\n           (1) Added new literals for CmLoopbackType:\n               - jdsu-terminal-port-tailend,\n               - jdsu-terminal-vlan-tailend,\n               - jdsu-facility-port-tailend,\n               - jdsu-facility-vlan-tailend.\n           (2) New cmEthernetAccPortTable objects:\n               - cmEthernetAccPortJDSUControlFramesSnoopingEnabled,\n               - cmEthernetAccPortJDSULoopbackVlan,\n               - cmEthernetAccPortJDSUUnitTextId.\n           (3) New cmEthernetNetPortTable objects:\n               - cmEthernetNetPortJDSUControlFramesSnoopingEnabled,\n               - cmEthernetNetPortJDSULoopbackVlan,\n               - cmEthernetNetPortJDSUUnitTextId.\n         Notes from release 201306100000Z,\n           (1) Added table: networkElementTMParamsTable\n           (2) Added TEXTUAL-CONVENTION: BandwidthProfileMode\n           (3) Added group: networkElementTMParamsGroup\n         Notes frome release 201305230000Z,\n           (1) New cmEthernetAccPortTable objects:\n               - cmEthernetAccPortLoopbackSourceMacControlEnabled,\n               - cmEthernetAccPortLoopbackDestMacControlEnabled,\n               - cmEthernetAccPortLoopbackSourceMacAddress,\n               - cmEthernetAccPortLoopbackDestMacAddress,\n               - cmEthernetAccPortLoopbackBlockingEnabled\n           (2) New cmEthernetNetPortTable objects:\n               - cmEthernetNetPortLoopbackSourceMacControlEnabled,\n               - cmEthernetNetPortLoopbackDestMacControlEnabled,\n               - cmEthernetNetPortLoopbackSourceMacAddress,\n               - cmEthernetNetPortLoopbackDestMacAddress,\n               - cmEthernetNetPortLoopbackBlockingEnabled\n\n         Notes from release 201303140000Z,\n           (1) New cmFlowTable object:\n               cmFlowN2NForwardingEnabled\n\n         Notes from release 201210150000Z,\n           (1) New cmFlowTable objects:\n               cmFlowPort1, cmFlowPort2, cmFlowPolicingControl, cmFlowAutoCIRPercentage,\n               cmFlowLoopAvoidanceObject\n\n         Notes from release 201207190000Z,\n           (1) New textual conventions: OCNSTMPortType, E1T1LineType, E1T1LineCode,\n               E1T1FrameFormat, E1T1RcvSensitivity  \n           (2) New ocnStmTable object: ocnStmPortType\n           (3) New e1T1Table objects: e1t1LineType, e1t1LineCode, e1t1FrameFormat,\n                 e1t1LineBuildOut, e1T1TimingDomain, e1T1RcvSensitivity,\n                 e1T1IdlePatternProfile, e1T1LoopbackProfile\n\n         Notes from release 201106110000Z,\n           -Added f3PulsePerSecondPortTable, f3TimeOfDayPortTable \n\n         Notes from release 201205020000Z,\n           -CPD support for LLDP and ELMI for Access/Network Port, Flow CPD \n\n         Notes from release 201105270000Z,\n           -Formalized the OBJECT-GROUP definitions\n\n         Notes from release 201102100000Z\n            (i)Added variable bitsPortLineBuildOut \n\n         Notes from release 201101250000Z\n            (i)Added enc-custom to PcpDEEncType\n\n         Notes from release 201010130000Z\n            PCP based Drop Eligibility function is added,\n            (i)New textual conventions PcpDEEncType, PcpDEPairsAction\n            (ii)New Access Port objects cmEthernetAccPortDeiEnable, \n                            cmEthernetAccPortPcpDEEncType, \n                            cmEthernetAccPortPcpDEPairsAction\n            (iii)New Network Port objects cmEthernetNetPortDeiEnable, \n                            cmEthernetNetPortPcpDEEncType, \n                            cmEthernetNetPortPcpDEPairsAction\n            (iv)New Access Port tables cmAccPortPcpDEEncTable, cmAccPortPcpDEDecTable,\n                          cmAccPortPcpDEPairTable\n            (v)New Network tables cmNetPortPcpDEEncTable, cmNetPortPcpDEDecTable,\n                          cmNetPortPcpDEPairTable\n\n         Notes from release 201010130000Z\n           (i)Added cmFlowN2AOuterTagPrioEnabled, cmEthernetNetPortPrioMapMode and \n              cmNetPortPrioMapTable to support the Network Port Priority Mapping function\n           (ii)Added FlowTagControl of pop \n\n         Notes from release 201006100000Z\n         Updated range of cmEthernetAccPortOuterVlanLoopbackMask,\n            cmEthernetAccPortInnerVlanLoopbackMask, cmEthernetNetPortOuterVlanLoopbackMask,\n            cmEthernetNetPortInnerVlanLoopbackMask,\n            to INTEGER(0..16) to indicate mask not SET\n\n         Notes from release 201003310000Z\n        (1)cmFlowTable has two new objects \n               cmFlowPreserveSTagProperties, cmFlowInnerTagPrioEnabled,\n               cmPrioMapInnerTagPriority\n\n         Notes from release 201002120000Z\n        (1)cmFlowTable has new object cmFlowPolicingEnabled\n        (2)New table ieee1588EthernetPortTable represents the IEEE 1588 Ethernet Port\n        (3)New table gps10MHzPortTable represents the 10MHz Port\n\n\n         Notes from release 200903160000Z\n         This release is applicable to the FSP150CC Release 4.1 \n         devices GE206.\n         Following new objects are added to cmEthernetAccPortEntry,\n          cmEthernetAccPortMDIXStatus, cmEthernetAccPortSfpReach,\n          cmEthernetAccPortSfpLaserWaveLength,\n          cmEthernetAccPortSfpMediaType, cmEthernetAccPortOamEnabled,\n          cmEthernetAccPortShapingEnabled,\n          cmEthernetAccPortShapedSpeedLo, cmEthernetAccPortShapedSpeedHi,\n          cmEthernetAccPortQinQEtherType, cmEthernetAccPortRxPauseEnabled,\n          cmEthernetAccPortAutoDiagEnabled,\n          cmEthernetAccPortLinkLossFwdTxActionType,\n          cmEthernetAccPortN2AVlanTrunkingEnabled, \n          cmEthernetAccPortA2NPushPVIDEnabled,\n          cmEthernetAccPortN2APopPVIDEnabled, cmEthernetAccPortPortVlanId,\n          cmEthernetAccPortPortVlanPriority, \n          cmEthernetAccPortPrioMapMode, cmEthernetAccPortSyncEEnabled,\n          cmEthernetAccPortQLModeEnabled, cmEthernetAccPortExpectedQL,\n          cmEthernetAccPortAssumedQL, cmEthernetAccPortReceivedQL, \n          cmEthernetAccPortTransmitQL,\n          cmEthernetAccPortDeiEnable,\n          cmEthernetAccPortPcpDEEncType, cmEthernetAccPortPcpDEPairsAction,\n\n         Following new objects are added to cmFlowEntry,\n          cmFlowTrafficType, cmFlowCOS, cmFlowVlanMemberList,\n          cmFlowAction, cmFlowActionVlan, cmFlowUntaggedMemberEnabled,\n          cmFlowA2NCIRHi, cmFlowA2NEIRHi,\n          cmFlowN2ACIRHi, cmFlowN2AEIRHi, cmFlowHCOSMgmtEnabled,\n          cmFlowGuaranteedA2NBandwidthLo,\n          cmFlowGuaranteedA2NBandwidthHi, cmFlowMaximumA2NBandwidthLo,\n          cmFlowMaximumA2NBandwidthHi, cmFlowCTagControl,\n          cmFlowCTagVlanId, cmFlowCTagVlanPriority, cmFlowCTagMatchRxPrio,\n          cmFlowSTagControl, cmFlowSTagVlanId, cmFlowSTagVlanPriority,\n          cmFlowOuterTagPrioEnabled, cmFlowESFramesLossThreshold,\n          cmFlowSESFramesLossThresholdRatio, \n\n         Following new objects are added to cmQosShaperEntry,\n          cmQosShaperCOS, cmQosShaperCIRHi, cmQosShaperEIRHi\n\n         Following new objects are added to cmEthernetNetPortEntry,\n          cmEthernetNetPortMDIXStatus, cmEthernetNetPortSfpReach,\n          cmEthernetNetPortSfpLaserWaveLength,\n          cmEthernetNetPortSfpMediaType, cmEthernetNetPortOamEnabled,\n          cmEthernetNetPortShapingEnabled,\n          cmEthernetNetPortShapedSpeedLo, cmEthernetNetPortShapedSpeedHi,\n          cmEthernetNetPortQinQEtherType, cmEthernetNetPortAutoDiagEnabled,\n          cmEthernetNetPortLinkLossFwdTxActionType,\n          cmEthernetNetPortSyncEEnabled, cmEthernetNetPortQLModeEnabled,\n          cmEthernetNetPortExpectedQL, cmEthernetNetPortAssumedQL,\n          cmEthernetNetPortReceivedQL, cmEthernetNetPortTransmitQL,\n          cmEthernetNetPortPrioMapMode, cmEthernetNetPortDeiEnable,\n          cmEthernetNetPortPcpDEEncType, cmEthernetNetPortPcpDEPairsAction,\n\n\n         Following new objects are added to cmEthernetMgmtPortEntry,\n          cmEthernetMgmtPortMDIXStatus\n    \n         Following SNMP tables are new,\n          cmPrioMapTable, cmQosFlowPolicerTable, cmAccPortQosShaperTable,\n          cmEthernetAccPortCpdV2Table, cmFlowCpdV2Table, \n          cmEthernetNetPortCpdV2Table, bitsPortTable\n\n         Enumeration literals use-group-setting, not-active added to TC CmControlProtocolDispType\n\n         Notes from release 200803030000Z,\n         (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmFacilityMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmFacilityMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmFacilityMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmFacilityMIB.setDescription('This module defines the Facility MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
cmFacilityObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1))
cmFacilityConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2))
class LocationMode(TextualConvention, Integer32):
    description = 'Describes location mode for the GNSS receiver on OSA540X.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("navigation", 1), ("survey-in", 2), ("fixed", 3))

class TimeAdvanceMode(TextualConvention, Integer32):
    description = 'Describes time advance mode for the GNSS on OSA540X.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("auto", 1), ("fixed", 2))

class SynceRxSsmQl(TextualConvention, Integer32):
    description = 'Describes how RX quality level is utilized on OSA540X ethernet port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("ql-dnu", 1), ("ssm-based", 2), ("ql-prc", 3))

class SynceMode(TextualConvention, Integer32):
    description = 'Describes SyncE mode (master or slave) on OSA540X ethernet port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("slave", 1), ("master", 2))

class SciSignalMode(TextualConvention, Integer32):
    description = 'Describes the SCI Port Signal Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("sci-1pps", 1), ("sci-2M", 2), ("sci-10M", 3))

class SciSignalDirection(TextualConvention, Integer32):
    description = 'Describes the SCI Port Signal Direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("output", 1), ("input", 2))

class SciRxSsmQL(TextualConvention, Integer32):
    description = 'Describes the SCI Port QL.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("prc", 1), ("dnu", 2))

class XDSLAnnex(TextualConvention, Integer32):
    description = 'Specify xdsl annex version depends on modulation.\n         annexa -- Annex A\n         annexb -- Annex B\n         annexc -- Annex C\n         annexl -- ADSL2+ Annex L\n         annexm -- ADSL2+ Annex M'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("annexa", 1), ("annexb", 2), ("annexc", 3), ("annexl", 4), ("annexm", 5))

class XDSLMode(TextualConvention, Integer32):
    description = 'The xdsl mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("vdsl2", 1), ("adsl2Plus", 2), ("adsl2", 3), ("unkown", 4))

class XDSLCarrierSet(TextualConvention, Integer32):
    description = 'The xdsl carrier set.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("auto", 1), ("a43", 2), ("b43", 3), ("v43", 4), ("a43c", 5))

class XDSLStatus(TextualConvention, Integer32):
    description = 'The vdsl status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("showtime", 1), ("training", 2), ("handshake", 3), ("idle", 4), ("other", 5))

class XDSLControlChannel(TextualConvention, Integer32):
    description = 'The xdsl control channel.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("pppoe", 2))

class VDSLProfileField(TextualConvention, Integer32):
    description = 'The vdsl profile.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("unknown", 1), ("profile-8a", 2), ("profile-8b", 3), ("profile-8c", 4), ("profile-8d", 5), ("profile-12a", 6), ("profile-12b", 7), ("profile-17a", 8), ("profile-30a", 9))

class VDSLProfileFields(TextualConvention, Bits):
    description = 'The vdsl profile, no bit set means unknow.'
    status = 'current'
    namedValues = NamedValues(("profile-8a", 0), ("profile-8b", 1), ("profile-8c", 2), ("profile-8d", 3), ("profile-12a", 4), ("profile-12b", 5), ("profile-17a", 6), ("profile-30a", 7))

class XDSLModulationMode(TextualConvention, Integer32):
    description = 'Specify xdsl modulation type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("vdsl2", 1))

class PPPoEConnectionStatus(TextualConvention, Integer32):
    description = 'Specify pppoe connection status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("connected", 1), ("connecting", 2), ("disconnected", 3))

class CmEthernetSvcPortMode(TextualConvention, Integer32):
    description = 'Describes the Ethernet Service Port Mode Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("connection-oriented", 1), ("connection-less", 2))

class CmEthernetSvcType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Service Type.\n            epl  - Ethernet Private Linei, Port-based, all-to-one bundling\n            evpl - Ethernet Virtual Private Line, VLAN based, \n                   service multiplexed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("epl", 1), ("evpl", 2))

class CmEthernetTrafficSvcType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Service Type, including port-based and vlan-based.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("all-to-one", 1), ("service-multiplexing", 2))

class CmAclConfiguration(TextualConvention, Integer32):
    description = 'This object is defined to set traffic acl resource allocation.\n         Supported actions are:\n           all-bk-l2 (1)      - all bank allocated to l2.\n           all-bk-l2-ipv4(2)  - all bank allocated to l2/ipv4. \n           two-bk-l2-ipv4(3)  - two thirds allocated to l2/ipv4, the left belongs to ipv6.\n           one-bk-l2-ipv4(4)  - one thirds allocated to l2/ipv4, the left belongs to ipv6.\n           none-bk-l2-ipv4(5) - all bank allocated to ipv6. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("all-bk-l2", 1), ("all-bk-l2-ipv4", 2), ("two-bk-l2-ipv4", 3), ("one-bk-l2-ipv4", 4), ("none-bk-l2-ipv4", 5))

class CmAfpType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Acceptable Framing Policy Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("tagged", 1), ("untagged", 2), ("all", 3))

class CmEthernetDiagAction(TextualConvention, Integer32):
    description = 'Describes the Ethernet Diagnosis Action.\n          autoNeg - Auto negotiation capability,\n          cable   - Cable diagnostics, cable fault \n          loopback- Terminal loopback with traffic injection and monitoring  \n          efm-oam-lpbk- EFM OAM loopback \n          all         - autoNeg, cable tests and loopback, not include efm-oam-lpbk.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("autoneg", 1), ("cable", 2), ("loopback", 3), ("efm-oam-lpbk", 4), ("all", 5))

class CmDiagCableCondType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Diagnosis Cable Condition Result.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("not-applicable", 0), ("cableshort", 1), ("cableopen", 2), ("cableimpedance", 3), ("cablenotfound", 4), ("cableok", 5), ("cablefailed", 6), ("cablenotrun", 7))

class CmDiagAutoNegCondType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Diagnosis Auto Negotiation Condition Result.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("autonegok", 1), ("autonegfailed", 2), ("autonegnotrun", 3))

class CmDiagLpbkCondType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Diagnosis Loopback Condition Result.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("lpbkok", 1), ("lpbkfailed", 2), ("lpbknotrun", 3))

class CmDiagEfmOamLpbkCondType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Diagnosis EFM OAM Loopback Condition Result.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("efmlpbkok", 1), ("efmlpbkfailed", 2), ("efmlpbkfailednendNA", 3), ("efmlpbkfailedfendNA", 4), ("efmlpbknotrun", 5))

class CmDiagTestStatus(TextualConvention, Integer32):
    description = 'ECPA Test Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("initial", 1), ("in-progress", 2), ("stopped", 3), ("completed", 4), ("aborted", 5))

class CmControlProtocolFilterType(TextualConvention, Integer32):
    description = 'Describes the Control Protocol Filter Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("efmoam", 1), ("pause", 2))

class CmLoopbackType(TextualConvention, Integer32):
    description = 'Describes the Loopback Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))
    namedValues = NamedValues(("lpbk-none", 1), ("efm-oam-remote", 2), ("efm-oam-remote-timed", 3), ("facility-port", 4), ("facility-port-timed", 5), ("facility-vlan", 6), ("terminal-port", 7), ("terminal-port-timed", 8), ("terminal-vlan", 9), ("efm-oam-tailend", 10), ("facility-payload", 11), ("facility-payload-timed", 12), ("remote-facility", 13), ("remote-facility-payload", 14), ("tailend-facility", 15), ("tailend-facility-payload", 16), ("terminal-itag", 17), ("facility-itag", 18), ("jdsu-terminal-port-tailend", 19), ("jdsu-terminal-vlan-tailend", 20), ("jdsu-facility-port-tailend", 21), ("jdsu-facility-vlan-tailend", 22), ("facility-och", 23), ("facility-och-timed", 24), ("terminal-och", 25), ("terminal-och-timed", 26), ("jdsu-facility-port-l3-tailend", 27), ("jdsu-facility-vlan-l3-tailend", 28))

class CmSwapSADAType(TextualConvention, Integer32):
    description = 'Describes the SWAP SADA Types supported.\n            no-swapSADA              - No swapping of Source MAC and Destination MAC\n            swapSADA                 - Do swapping of Source MAC and Destination MAC\n            swapDAOverrideSA         - Swap Destination MAC as Source MAC,\n                                       override source MAC with local MAC\n            swapSADAMacOnly          - Not supported\n            swapDAOverridesSAMacOnly - Not supported\n            swapIP                   - Do swapping of Source MAC and Destination MAC,\n                                       Source IP and Destination IP\n            swapTCPUDP               - Do swapping of Source MAC and Destination MAC,\n                                       Source IP and Destination IP,\n                                       Source TCP/UDP port and Destination TCP/UDP port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("not-applicable", 0), ("noswapSADA", 1), ("swapSADA", 2), ("swapDAOverrideSA", 3), ("swapSADAMacOnly", 4), ("swapDAOverridesSAMacOnly", 5), ("swapIP", 6), ("swapTCPUDP", 7))

class CmControlProtocolDispType(TextualConvention, Integer32):
    description = 'Describes the Protocol Disposition Type on an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("not-applicable", 0), ("discard", 1), ("peer", 2), ("pass-thru", 3), ("use-group-setting", 4), ("not-active", 5), ("use-port-setting", 6), ("pass-thru-l2pt", 7), ("useMacSetting", 8))

class CmLinkLossFwdSignalType(TextualConvention, Integer32):
    description = 'Describes the Link Loss Forwarding Signal Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("llf-efm-signal", 1), ("llf-link-down", 2), ("llf-odu-ais", 3), ("llf-odu-lck", 4), ("llf-odu-tim", 5), ("llf-odu-bdi", 6), ("llf-opu-plm", 7), ("llf-opu-csf", 8), ("llf-eth-epc", 9))

class CmLinkLossFwdTriggerTypes(TextualConvention, Bits):
    description = 'Describes the Link Loss Forwarding Trigger Types.'
    status = 'current'
    namedValues = NamedValues(("trig-efm-signal", 1), ("trig-link-down", 2), ("trig-odu-ais", 3), ("trig-odu-lck", 4), ("trig-odu-tim", 5), ("trig-odu-bdi", 6), ("trig-opu-plm", 7), ("trig-opu-csf", 8))

class CmLinkLossFwdTxActionType(TextualConvention, Integer32):
    description = 'Describes the Link Loss Forwarding Tx Action Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("not-applicable", 0), ("llf-tx-no-action", 1), ("llf-tx-efm-signal", 2), ("llf-tx-link-down", 3), ("llf-odu-ais", 4), ("llf-opu-csf", 5), ("llf-otu-ais", 6))

class CmRemoteLinkIds(TextualConvention, Bits):
    description = 'Remote Link Ids used to match for Link Loss Forwarding.'
    status = 'current'
    namedValues = NamedValues(("remoteLinkId1", 1), ("remoteLinkId2", 2), ("remoteLinkId3", 3), ("remoteLinkId4", 4), ("remoteLinkId5", 5), ("remoteLinkId6", 6), ("remoteLinkId7", 7), ("remoteLinkId8", 8), ("remoteLinkId9", 9), ("remoteLinkId10", 10), ("remoteLinkId11", 11), ("remoteLinkId12", 12), ("remoteLinkId13", 13), ("remoteLinkId14", 14), ("remoteLinkId15", 15), ("remoteLinkId16", 16), ("remoteLinkId17", 17), ("remoteLinkId18", 18), ("remoteLinkId19", 19), ("remoteLinkId20", 20), ("remoteLinkId21", 21), ("remoteLinkId22", 22), ("remoteLinkId23", 23), ("remoteLinkId24", 24), ("remoteLinkId25", 25), ("remoteLinkId26", 26))

class CmOamMode(TextualConvention, Integer32):
    description = 'Describes the OAM Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("active", 1), ("passive", 2))

class CmOamAdminState(TextualConvention, Integer32):
    description = 'Describes the OAM Admin State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("enabled", 1), ("disabled", 2))

class CmOamDiscoveryState(TextualConvention, Integer32):
    description = 'Describes the OAM Discovery State.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("unknown", 0), ("fault", 1), ("activesendlocal", 2), ("passivewait", 3), ("sendlocalremote", 4), ("sendlocalremoteok", 5), ("sendany", 6))

class CmFlowType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Flow Type.\n          portbased - Port based Flow with full bandwidth of port;\n                      this Flow does not do VLAN/MAC based processing \n          regular   - Connection-oriented, VLAN based service \n          default   - Connection-oriented, service that matches all VLANs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("portbased", 1), ("regular", 2), ("default", 3))

class CmEthernetMDIXType(TextualConvention, Integer32):
    description = 'Describes the Ethernet MDIX Type.\n          auto-mdix - Auto MDIX \n          crossed   - Crossed \n          uncrossed - Uncrossed.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 1), ("auto-mdix", 2), ("crossed", 3), ("uncrossed", 4), ("notAvailable", 5))

class FlowTrafficType(TextualConvention, Integer32):
    description = 'Describes the Flow Traffic Type.\n          shaped-only, \n          policed-shaped,\n          policed-only.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("shaped-only", 1), ("policed-shaped", 2), ("policed-only", 3))

class FlowVlanActionType(TextualConvention, Integer32):
    description = 'Describes the Ethernet Flow Action.  Used for\n         adding/removing VLAN members'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("no-action", 1), ("add-vlan", 2), ("remove-vlan", 3))

class FlowTagControl(TextualConvention, Integer32):
    description = 'Describes the Ethernet Flow Tag Control Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("push", 2), ("swapvid", 3), ("pushvid", 4), ("pop", 5), ("pushisid", 6))

class PrioMapControlType(TextualConvention, Integer32):
    description = 'Describes the Priority Mapping Control Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("swap", 2))

class PolicerAlgorithmType(TextualConvention, Integer32):
    description = 'Describes the Policer Algorithm Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("srTCM", 1), ("trTCM", 2))

class PolicerColorMode(TextualConvention, Integer32):
    description = 'Describes the Policer Color Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("color-aware", 1), ("color-blind", 2))

class BitsPortType(TextualConvention, Integer32):
    description = 'Enumerations for BITS Port Type.\n             bits-in, \n             bits-out.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("bits-in", 1), ("bits-out", 2))

class BitsPortLineType(TextualConvention, Integer32):
    description = 'Enumerations for BITS Line Type.\n         It can be t1, e1, 2048kHz, other.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("t1", 1), ("e1", 2), ("type-2048kHz", 3), ("other", 4))

class BitsPortLineCode(TextualConvention, Integer32):
    description = 'Enumerations for BITS Line Code.\n             none,  \n             t1-b8zs,  \n             t1-ami,\n             e1-hdb3,\n             e1-ami.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("t1-b8zs", 2), ("t1-ami", 3), ("e1-hdb3", 4), ("e1-ami", 5))

class BitsFrameFormat(TextualConvention, Integer32):
    description = 'Enumerations for Bits Frame Format.\n             none,\n             t1-sf,\n             t1-esf,\n             e1-unframed,\n             e1-crc4,\n             e1-dualframe.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("t1-sf", 2), ("t1-esf", 3), ("e1-unframed", 4), ("e1-crc4", 5), ("e1-dualframe", 6))

class SaBitDesignation(TextualConvention, Integer32):
    description = 'Enumerations for SA Bit Desgination.\n             none,\n             bit4,\n             bit5,\n             bit6,\n             bit7,\n             bit8.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 1), ("bit4", 2), ("bit5", 3), ("bit6", 4), ("bit7", 5), ("bit8", 6))

class CmActiveControlProtocolsType(TextualConvention, Bits):
    description = 'Remote Link Ids used to match for Link Loss Forwarding.'
    status = 'current'
    namedValues = NamedValues(("ciscoGroup", 1), ("isl", 2), ("pagp", 3), ("udld", 4), ("cdp", 5), ("vtp", 6), ("dtp", 7), ("pvstpplus", 8), ("uplinkfast", 9), ("vlanbridge", 10), ("l2pt", 11), ("bridgegroup", 12), ("bpdu", 13), ("pause", 14), ("lacp", 15), ("lacpmarker", 16), ("efmoam", 17), ("ssm", 18), ("portauthen", 19), ("bridgereserved", 20), ("lanbridges", 21), ("garpgroup", 22), ("gmrp", 23), ("gvrp", 24), ("garp", 25), ("lldp", 26), ("elmi", 27), ("mac00", 28), ("mac01", 29), ("mac02", 30), ("mac03", 31), ("mac04", 32), ("mac05", 33), ("mac06", 34), ("mac07", 35), ("mac08", 36), ("mac09", 37), ("mac0A", 38), ("mac0B", 39), ("mac0C", 40), ("mac0D", 41), ("mac0E", 42), ("mac0F", 43), ("nearestlldp", 44), ("nontpmrlldp", 45), ("customerlldp", 46), ("ptpNonfwdUntagged", 47), ("ptpNonfwdTagged", 48))

class PcpDEEncType(TextualConvention, Integer32):
    description = 'Enumerations for PCP Drop Eligibility Encode Type.\n             enc-none,\n             enc-7p1d,\n             enc-6p2d,\n             enc-5p3d,\n             enc-custom.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("enc-none", 1), ("enc-7p1d", 2), ("enc-6p2d", 3), ("enc-5p3d", 4), ("enc-custom", 5))

class PcpDEPairsAction(TextualConvention, Integer32):
    description = '    none,\n             apply-pairs.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("none", 0), ("apply-pairs", 1))

class LineBuildOut(TextualConvention, Integer32):
    description = '    none,\n             0-133ft,\n             133-266ft,\n             266-399ft,\n             399-533ft,\n             533-655ft,\n             7dot5db,\n             15db,\n             22dot5db.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 0), ("lbo-0-133ft", 1), ("lbo-133-266ft", 2), ("lbo-266-399ft", 3), ("lbo-399-533ft", 4), ("lbo-533-655ft", 5), ("lbo-7dot5db", 6), ("lbo-15db", 7), ("lbo-22dot5db", 8))

class BitsPortImpedanceMode(TextualConvention, Integer32):
    description = 'Describes the impedance mode of the BITS-IN and BITS-OUT interfaces:\n             120OHM.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bits-120Ohm", 1), ("bits-100Ohm", 2), ("bits-75Ohm", 3), ("bits-50Ohm", 4))

class ShapingType(TextualConvention, Integer32):
    description = '\n                port-based - traffic shaping at Port level\n                flow-based - traffic shaping at Flow level\n                llq - low latency queuing'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("port-based", 1), ("flow-based", 2), ("llq", 3))

class XgePhyType(TextualConvention, Integer32):
    description = ' Specifies the Ethernet 10G port PHY type.\n                not-applicable - for non-10G ports\n                lan - 10G LAN-PHY mode (10GBASE-R) operating at 10Gb/sec\n                wan - 10G WAN-PHY mode (10GBASE-W) operating at 9.29Gb/sec\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("lan", 1), ("wan", 2), ("otn", 3))

class F3Usb3GDCNPINCodeActionType(TextualConvention, Integer32):
    description = 'Describes the 3G Dcn Pin Code Action Types.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("not-applicable", 0), ("enable-pin", 1), ("disable-pin", 2), ("change-pin", 3), ("authentication-pin", 4), ("unlock-pin", 5))

class F3Usb3GSimCardState(TextualConvention, Integer32):
    description = 'Describes the 3G Usb Sim Card States.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("ok", 1), ("notinserted", 2), ("networkrejected", 3), ("unknown", 4))

class F3Usb3GNetworkConnectionState(TextualConvention, Integer32):
    description = 'Describes the Connection State of the 3G Usb Modem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("connecting", 1), ("connected", 2), ("disconnected", 3))

class F3Usb3GRecvSignalStrengthInd(TextualConvention, Integer32):
    description = 'Describes the Recived Signal Strength of the 3G Usb Modem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("not-applicable", 0), ("high", 1), ("medium", 2), ("low", 3), ("none", 4))

class TrailTraceFormat(TextualConvention, Integer32):
    description = 'Describes the Trail Trace Format.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("not-applicable", 0), ("onebytemode", 1), ("sixteenbytemode", 2), ("sixtyfourbytemode", 3))

class MultiplexingStructure(TextualConvention, Integer32):
    description = 'Describes the Multiplexing Structure.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("not-applicable", 0), ("vt-sts1", 1), ("sts1spe-sts1", 2), ("sts3cspe-sts3c", 3), ("vc12-vc4-aug", 4), ("vc12-vc3-aug", 5), ("vc3-aug", 6), ("vc3-vc4-aug", 7), ("vc4-aug", 8), ("custom", 9))

class EoTDMMode(TextualConvention, Integer32):
    description = 'Describes the EoTDM Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-applicable", 0), ("eosdh", 1), ("eopdh", 2))

class BitErrRate(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("ber-1e-1", 1), ("ber-1e-2", 2), ("ber-1e-3", 3), ("ber-1e-4", 4), ("ber-1e-5", 5), ("ber-1e-6", 6), ("ber-1e-7", 7), ("ber-1e-8", 8), ("ber-1e-9", 9), ("ber-1e-10", 10))

class GFPEncapsulationType(TextualConvention, Integer32):
    description = 'Describes the GFP Encapsulation of the traffic port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("none", 0), ("gfp", 1), ("gfp-fcs", 2), ("gfp-novcat", 3), ("gfp-zerovcat", 4), ("gfp-fcs-novcat", 5), ("gfp-fcs-zerovcat", 6), ("x86", 7))

class PPSInputRate(TextualConvention, Integer32):
    description = 'Describes the PPS Input Rate.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("pulse-per-sec", 1), ("pulse-per-2sec", 2))

class PPSPhyInterfaceType(TextualConvention, Integer32):
    description = 'Describes the PPS physical interface type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("pps", 1), ("tod", 2))

class OCNSTMPortType(TextualConvention, Integer32):
    description = 'OCN/STM Port Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("oc12", 1), ("oc3", 2), ("stm4", 3), ("stm1", 4))

class E1T1LineType(TextualConvention, Integer32):
    description = 'Enumerations for E1/T1 Line Type.\n             t1, \n             e1'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("t1", 1), ("e1", 2))

class E1T1LineCode(TextualConvention, Integer32):
    description = 'Enumerations for E1/T1 Line Code.\n             none,  \n             t1-b8zs,  \n             t1-ami,\n             e1-hdb3,\n             e1-ami.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("t1-b8zs", 2), ("t1-ami", 3), ("e1-hdb3", 4), ("e1-ami", 5))

class E1T1FrameFormat(TextualConvention, Integer32):
    description = 'Enumerations for E1/T1 Frame Format.\n             none,\n             t1-sf,\n             t1-esf,\n             e1-unframed,\n             e1-crc4,\n             e1-dualframe,\n             e1-basicframe.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("none", 1), ("t1-sf", 2), ("t1-esf", 3), ("e1-unframed", 4), ("e1-crc4", 5), ("e1-dualframe", 6), ("t1-unframed", 7), ("e1-basicframe", 8))

class E1T1RcvSensitivity(TextualConvention, Integer32):
    description = 'Enumerations for E1/T1 Receive Sensitivity\n             high-range,\n             low-range'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("high-range", 1), ("low-range", 2))

class E3T3FrameFormat(TextualConvention, Integer32):
    description = 'Describes the Frame Format of E3/T3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("dsx3CbitParity", 1), ("g832", 2), ("e3Unframed", 3), ("dsx3M23", 4), ("g751", 5), ("dsx3Unframed", 6))

class TDMPathType(TextualConvention, Integer32):
    description = 'Describes the path type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 0), ("t1", 1), ("e1", 2), ("t3", 3), ("e3", 4), ("vc12", 5), ("vc3", 6), ("vc4", 7), ("vt15", 8), ("sts1", 9), ("sts3c", 10))

class PPSGenCondition(TextualConvention, Integer32):
    description = 'Enumerations for PPS Generation Condition \n             tracked-1sat,\n             tracked-3sat'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tracked-1sat", 1), ("tracked-3sat", 2))

class GPSAntennaStatus(TextualConvention, Integer32):
    description = 'Enumerations for GPS Antenna Status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("open", 1), ("short", 2), ("normal", 3), ("unavailable", 4))

class PolicingControl(TextualConvention, Integer32):
    description = 'Defines Policing Control options.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("a2n", 1), ("n2a", 2), ("a2nN2a", 3), ("n2n", 4))

class FlowConfigType(TextualConvention, Integer32):
    description = 'Defines types of Flow.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("access", 1), ("passThru", 2))

class G3AuthStatus(TextualConvention, Integer32):
    description = 'Disabled (PIN protection is disabled)\n         OK (PIN protection is enabled and PIN code is correct)   \n         Input PIN (input PIN to unlock)\n         Input PUK (PIN code is locked, input PUK to unlock)\n         Locked (must contact with SIM provider).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("disabled", 1), ("ok", 2), ("input-pin", 3), ("input-puk", 4), ("locked", 5), ("none", 6))

class PsePowerLevel(TextualConvention, Integer32):
    description = 'Defines the power level for pse port.\n        class1 (4.00 Watts) :0\n        class2 (7.00 Watts) :1\n        class0andclass 3 (15.4 Watts):2\n        class4 (30 Watts):3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("class1", 1), ("class2", 2), ("class0andclass3", 3), ("class4", 4))

class PSENonStandardPD(TextualConvention, Integer32):
    description = "Enumerations for NonStandardPD \n             disabled:don't support non-standard PD,\n             enabled:support non-standard PD"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

class LearningAction(TextualConvention, Integer32):
    description = 'Describes Action on ingress frames when the number of MAC \n        Table entires has reached the maximum defined by tableSize'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("block", 1), ("forward", 2))

class SfpChannelIdentifier(TextualConvention, Integer32):
    description = 'Describes Channel number of WDM tunable XFP setting.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101))
    namedValues = NamedValues(("not-applicable", 0), ("none", 1), ("frequency-19610", 2), ("frequency-19595", 3), ("frequency-19585", 4), ("frequency-19575", 5), ("frequency-19565", 6), ("frequency-19555", 7), ("frequency-19545", 8), ("frequency-19535", 9), ("frequency-19525", 10), ("frequency-19515", 11), ("frequency-19505", 12), ("frequency-19495", 13), ("frequency-19485", 14), ("frequency-19475", 15), ("frequency-19465", 16), ("frequency-19455", 17), ("frequency-19445", 18), ("frequency-19435", 19), ("frequency-19425", 20), ("frequency-19415", 21), ("frequency-19405", 22), ("frequency-19395", 23), ("frequency-19385", 24), ("frequency-19375", 25), ("frequency-19365", 26), ("frequency-19355", 27), ("frequency-19345", 28), ("frequency-19335", 29), ("frequency-19325", 30), ("frequency-19315", 31), ("frequency-19305", 32), ("frequency-19295", 33), ("frequency-19285", 34), ("frequency-19275", 35), ("frequency-19265", 36), ("frequency-19255", 37), ("frequency-19245", 38), ("frequency-19235", 39), ("frequency-19225", 40), ("frequency-19215", 41), ("frequency-19205", 42), ("frequency-19600", 43), ("frequency-19590", 44), ("frequency-19580", 45), ("frequency-19570", 46), ("frequency-19560", 47), ("frequency-19550", 48), ("frequency-19540", 49), ("frequency-19530", 50), ("frequency-19520", 51), ("frequency-19510", 52), ("frequency-19500", 53), ("frequency-19490", 54), ("frequency-19480", 55), ("frequency-19470", 56), ("frequency-19460", 57), ("frequency-19450", 58), ("frequency-19440", 59), ("frequency-19430", 60), ("frequency-19420", 61), ("frequency-19410", 62), ("frequency-19400", 63), ("frequency-19390", 64), ("frequency-19380", 65), ("frequency-19370", 66), ("frequency-19360", 67), ("frequency-19350", 68), ("frequency-19340", 69), ("frequency-19330", 70), ("frequency-19320", 71), ("frequency-19310", 72), ("frequency-19300", 73), ("frequency-19290", 74), ("frequency-19280", 75), ("frequency-19270", 76), ("frequency-19260", 77), ("frequency-19250", 78), ("frequency-19240", 79), ("frequency-19230", 80), ("frequency-19220", 81), ("frequency-19210", 82), ("frequency-19200", 83), ("frequency-19195", 84), ("frequency-19190", 85), ("frequency-19185", 86), ("frequency-19180", 87), ("frequency-19175", 88), ("frequency-19170", 89), ("frequency-19165", 90), ("frequency-19160", 91), ("frequency-19155", 92), ("frequency-19150", 93), ("frequency-19145", 94), ("frequency-19140", 95), ("frequency-19135", 96), ("frequency-19130", 97), ("frequency-19125", 98), ("notTunable", 99), ("frequency-19605", 100), ("autoTuning", 101))

class BandwidthProfileMode(TextualConvention, Integer32):
    description = ' A Network Element level Frame Rate Bandwidth Profile Mode shall be supported \n         which will indicate if the CIR/EIR is interpreted as Information Rate (IR) or Line Rate \n         (LR). In IR mode BWP is enforced based on number of bytes beginning with DA and \n         ending with FCS as it was received at a port which is called the Service Frame in \n         MEF terminology. In LR mode the BWP is enforced based on the whole frame \n         including IFG, Preamble and SFD.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("lineRate", 1), ("informationRate", 2))

class LearningConfigAction(TextualConvention, Integer32):
    description = 'Learning Action:\n            noAction        - No Action\n            flushFwdTable   - Removes all dynamic entries from the Forwarding table\n                              of a Flow.\n            clearBlock      - removes the secondary state of BLCKD and transitions \n                              the flow to a state where frames are not blocked\n            resetAgingTimer - reset the aging timer\n            '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("noAction", 1), ("flushFwdTable", 2), ("clearBlock", 3), ("resetAgingTimer", 4))

class TrafficPortDeleteEntitiesAction(TextualConvention, Integer32):
    description = 'Learning Action:\n            no-action        - No Action\n            delete-esa-entities   - Removes all esa entities relate to this port.\n            delete-cfm-entities   - Removes all cfm entities relate to this port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("no-action", 1), ("delete-esa-entities", 2), ("delete-cfm-entities", 3))

class UsbDCNMobileNetworkType(TextualConvention, Integer32):
    description = 'Mobile network type:\n            none\n            secondGeneration - 2G.\n            thirdGeneration  - 3G,\n            fourthGeneration - 4G,\n            notApplicable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("none", 1), ("secondGeneration", 2), ("thirdGeneration", 3), ("fourthGeneration", 4), ("notApplicable", 5))

class TxDeiAction(TextualConvention, Integer32):
    description = 'Transmit DEI Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("setToZero", 1), ("markColor", 2), ("noChange", 3))

class RxDeiAction(TextualConvention, Integer32):
    description = 'Receive DEI Action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ignore", 1), ("use", 2))

class DeiOuterTagType(TextualConvention, Integer32):
    description = 'DEI Outer Tag Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("stag", 1), ("ctagOrStag", 2))

class ConstellationType(TextualConvention, Integer32):
    description = 'Constellation Type of GPS Antenna'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("gps-only", 1), ("glonass-only", 2), ("gps-and-glonass", 3), ("beidou-and-gps", 4), ("beidou-only", 5))

class TODOutputFormat(TextualConvention, Integer32):
    description = 'Output Format of TOD Port'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("nmea", 1), ("ccsa", 2))

class ConstellationTypesBitMap(TextualConvention, Bits):
    description = 'Indicates GNSS constellation types supported by a GNSS Receiver Port. \n        The valid bits must be set in order for this attribute to contain valid information.  \n        The representation of each bit setting (0 or 1) is indicated below.  \n     \n        Bit Field            Flag Description  \n        ---------   ------------------------------------  \n           0        1 = GPS is supported; 0 = GPS not supported  \n           1        1 = GLONASS is supported; 0 = GLONASS is not supported  \n           2        1 = BEIDOU is supported; 0 = BEIDOU is not supported  \n           3        1 = GALILEO is supported; 0 = GALILEO is not supported \n           4        1 = SBAS is supported; 0 = SBAS is not supported'
    status = 'current'
    namedValues = NamedValues(("gps", 0), ("glonass", 1), ("beidou", 2), ("galileo", 3), ("sbas", 4), ("qzss", 5))

class InstallationType(TextualConvention, Integer32):
    description = 'Installation Type of GPS Antenna'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("full-sky-view", 1), ("limited-sky-view", 2))

class WIFIEncryptionType(TextualConvention, Integer32):
    description = 'Type of WIFI encryption'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("wpa-psk", 1), ("wpa2-psk", 2), ("wpa-wpa2-psk", 3))

class DHCPType(TextualConvention, Integer32):
    description = 'DHCP role type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

class CosMappingMode(TextualConvention, Integer32):
    description = 'EoMpls Cos Mapping mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("ethernet", 1), ("eompls", 2), ("vxlan", 3), ("gre", 4), ("sr-mpls", 5))

class EthernetPortTrafficModel(TextualConvention, Integer32):
    description = 'Traffic Model for Ethernet Port.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accessFlow", 1), ("flowpoint", 2))

class SatelliteHealth(TextualConvention, Integer32):
    description = 'Satellite Health of GNSS Satellite'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("na", 1), ("ok", 2), ("weak", 3), ("dead", 4), ("no-data-modulation", 5))

class DelayOption(TextualConvention, Integer32):
    description = 'Defines the units of GNSS Antenna Cable Delay value'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(2, 3))
    namedValues = NamedValues(("nanoseconds", 2), ("meters", 3))

class AclRuleOperation(TextualConvention, Integer32):
    description = 'Describes the acl rule operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("accept", 1), ("deny", 2))

class EfIdentificationType(TextualConvention, Integer32):
    description = '\n                five-tuple  - 5-field identifier\n                seven-tuple - 7-field identifier'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("five-tuple", 1), ("seven-tuple", 2))

class UsbOperationalMode(TextualConvention, Integer32):
    description = 'Types of usb operational mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cellular-modem", 1), ("srv-access", 2))

class SaBitsState(TextualConvention, Bits):
    description = 'Bit states for the five Sa Bits from bit4 to bit8.'
    status = 'current'
    namedValues = NamedValues(("bit4", 0), ("bit5", 1), ("bit6", 2), ("bit7", 3), ("bit8", 4))

class SignalShape(TextualConvention, Integer32):
    description = 'Enumerations for Frequency Signal Shape.\n         It can be sine or square wave signal.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("sine", 1), ("square", 2))

class SignalFrequency(TextualConvention, Integer32):
    description = 'Enumerations for Signal Frequency.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("frequency-100kHz", 1), ("frequency-1MHz", 2), ("frequency-1544kHz", 3), ("frequency-2048kHz", 4), ("frequency-5MHz", 5), ("frequency-10MHz", 6), ("frequency-25MHz", 7), ("frequency-50MHz", 8))

class PpsPolarity(TextualConvention, Integer32):
    description = 'Enumerations for the Polarity of the PPS Port interfaces.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("positive", 1), ("negative", 2))

class PpsPortImpedanceMode(TextualConvention, Integer32):
    description = 'Enumerations for the impedance mode of the PPS Port interfaces.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("not-available", 0), ("pps-50Ohm", 1), ("pps-1MOhm", 2))

class AclNoMatchDispositionType(TextualConvention, Integer32):
    description = 'Types of ACL no match disposition.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("accept", 1), ("deny", 2))

class EfIdentificationFieldType(TextualConvention, Bits):
    description = 'Describes the Elephant Flow identification fields.'
    status = 'current'
    namedValues = NamedValues(("srcMac", 0), ("destMac", 1), ("srcIp", 2), ("destIp", 3), ("ipProtocol", 4), ("srcPort", 5), ("destPort", 6))

class ToggleValue(TextualConvention, Integer32):
    description = 'Enumerations for functionality that can be enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("not-available", 3))

class IrigTimeCode(TextualConvention, Integer32):
    description = 'Enumerations for .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20))
    namedValues = NamedValues(("irig-a002", 1), ("irig-a007", 2), ("irig-a132", 3), ("irig-a137", 4), ("irig-b002", 5), ("irig-b004", 6), ("irig-b006", 7), ("irig-b007", 8), ("irig-b122", 9), ("irig-b124", 10), ("irig-b126", 11), ("irig-b127", 12), ("irig-g002", 13), ("irig-g007", 14), ("irig-g142", 15), ("irig-g146", 16), ("pps", 17), ("ppm", 18), ("pph", 19), ("have-quick", 20))

class IrigControlField(TextualConvention, Integer32):
    description = 'Enumerations for IRIG Control Field.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ieee1344", 1), ("ieee37-118", 2))

class IrigRelayOperation(TextualConvention, Integer32):
    description = 'Enumerations for IRIG Relay Operation. Relay state can be configured to toggle\n         once per hour, once per minute, to stay active (locked), or to stay inactive (alarm).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("every-hour", 1), ("every-minute", 2), ("locked", 3), ("alarm", 4))

class IrigOutputType(TextualConvention, Integer32):
    description = 'Enumerations for IRIG Output Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("digital", 1), ("analog", 2), ("optical", 3))

class IrigDigitalSignalVoltage(TextualConvention, Integer32):
    description = 'Enumerations for .'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("digital-5v", 1), ("digital-10v", 2))

class IrigGroupExtensionType(TextualConvention, Integer32):
    description = 'Enumerations for IRIG Group Extension Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("patch-panel", 1), ("extension-cable", 2), ("none", 3))

class CcPortDutyCycle(TextualConvention, Integer32):
    description = 'CC port duty cycle'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("cycle-63-37", 1), ("cycle-50-50", 2))

class CcActivePortState(TextualConvention, Bits):
    description = 'Port states for CC group entities.'
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port8", 8), ("port8", 9))

class DynamicModelType(TextualConvention, Integer32):
    description = 'Dynamic Model Type of GNSS Receiver'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("portable", 0), ("stationary", 1), ("pedestrian", 2), ("automotive", 3), ("sea", 4), ("airborne1g", 5), ("airborne2g", 6), ("airborne4g", 7))

class PoEStatus(TextualConvention, Integer32):
    description = 'Power over ethernet status'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("searching", 1), ("detection", 2), ("classification", 3), ("powerout", 4), ("idle", 5), ("failed", 6), ("na", 7))

class PlugType(TextualConvention, Integer32):
    description = 'Plug Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("generic", 1), ("gMetro", 2))

class PlugMode(TextualConvention, Integer32):
    description = 'Plug Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("tailEnd", 1), ("headEnd", 2))

class RelativeChannelIdentifier(TextualConvention, Integer32):
    description = 'Relative Channel Identifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9))

class ChannelType(TextualConvention, Integer32):
    description = 'Channel Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ituCband", 1), ("relativeChannelNumber", 2), ("frequency", 3))

class OutOfBandChannelStatus(TextualConvention, Integer32):
    description = 'Out Of Band Channel Status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 1), ("disabled", 2), ("idle", 3), ("communicationInProgress", 4), ("communicationError", 5), ("autoTunningInProgress", 6))

class GMetroAutoTuningMode(TextualConvention, Integer32):
    description = 'G.Metro Auto Tuning Mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("pairedTuning", 1), ("blindTuning", 2), ("autonomousTuning", 3))

class FrequencyIdentifier(TextualConvention, Integer32):
    description = 'Frequency Identifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("frequency19120", 1), ("frequency19130", 2), ("frequency19140", 3), ("frequency19150", 4), ("frequency19160", 5), ("frequency19170", 6), ("frequency19180", 7), ("frequency19190", 8), ("frequency19200", 9), ("frequency19210", 10), ("frequency19220", 11), ("frequency19230", 12), ("frequency19240", 13), ("frequency19250", 14), ("frequency19260", 15), ("frequency19270", 16), ("frequency19280", 17), ("frequency19290", 18), ("frequency19300", 19), ("frequency19310", 20), ("frequency19320", 21), ("frequency19330", 22), ("frequency19340", 23), ("frequency19350", 24), ("frequency19360", 25), ("frequency19370", 26), ("frequency19380", 27), ("frequency19390", 28), ("frequency19400", 29), ("frequency19410", 30), ("frequency19420", 31), ("frequency19430", 32), ("frequency19440", 33), ("frequency19450", 34), ("frequency19460", 35), ("frequency19470", 36), ("frequency19480", 37), ("frequency19490", 38), ("frequency19500", 39), ("frequency19510", 40), ("frequency19520", 41), ("frequency19530", 42), ("frequency19540", 43), ("frequency19550", 44), ("frequency19560", 45), ("frequency19570", 46), ("frequency19580", 47), ("frequency19590", 48), ("frequency19600", 49))

class ITUCBandChannelIdentifier(TextualConvention, Integer32):
    description = 'ITU C-band Channel Identifier.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49))
    namedValues = NamedValues(("c12", 1), ("c13", 2), ("c14", 3), ("c15", 4), ("c16", 5), ("c17", 6), ("c18", 7), ("c19", 8), ("c20", 9), ("c21", 10), ("c22", 11), ("c23", 12), ("c24", 13), ("c25", 14), ("c26", 15), ("c27", 16), ("c28", 17), ("c29", 18), ("c30", 19), ("c31", 20), ("c32", 21), ("c33", 22), ("c34", 23), ("c35", 24), ("c36", 25), ("c37", 26), ("c38", 27), ("c39", 28), ("c40", 29), ("c41", 30), ("c42", 31), ("c43", 32), ("c44", 33), ("c45", 34), ("c46", 35), ("c47", 36), ("c48", 37), ("c49", 38), ("c50", 39), ("c51", 40), ("c52", 41), ("c53", 42), ("c54", 43), ("c55", 44), ("c56", 45), ("c57", 46), ("c58", 47), ("c59", 48), ("c60", 49))

cmEthernetAccPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1), )
if mibBuilder.loadTexts: cmEthernetAccPortTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Facilities for configuration purposes.')
cmEthernetAccPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortEntry.setDescription('A conceptual row in the cmEthernetAccPortTable.')
cmEthernetAccPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortIndex.setDescription('An integer index value used to uniquely identify\n             this Ethernet Access Port within a card.\n             Note that each Ethernet Access Port is uniquely identified\n             by the indices neIndex, shelfIndex, \n             slotIndex, cmEthernetAccPortIndex.\n             From release 5.6CC zero value becomes valid.\n             The zero value is used in Network Element level objects which contain\n             cmEthernetAccPortIndex in the index which is not-applicable for \n             these objects e.g. Pass-thru Flows, Shapers or Policers.')
cmEthernetAccPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortIfIndex.setDescription('This object has the same value as ifIndex for \n             Ethernet Access Port.  An integer index value used to \n             uniquely identify this Ethernet Access Port.')
cmEthernetAccPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
cmEthernetAccPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortAdminState.setDescription('This object represents the Administrative State of the Ethernet \n             Access Port.')
cmEthernetAccPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOperationalState.setDescription('This object represents the Operational State of the Ethernet \n             Access Port.')
cmEthernetAccPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSecondaryState.setDescription('This object represents the Secondary State of the Ethernet \n             Access Port.')
cmEthernetAccPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMTU.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMTU.setDescription('This object provides the MTU on the Ethernet Access Port.\n             The object is made read-write for FSP150CC devices.')
cmEthernetAccPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMediaType.setDescription('This object represents the type of Ethernet Media on the \n             Ethernet Access Port.')
cmEthernetAccPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortConfigSpeed.setDescription('This object allows to configure the speed of the \n             Ethernet Access Port.')
cmEthernetAccPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortNegotiatedSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortNegotiatedSpeed.setDescription('This object provides the negotiated speed of the \n             Ethernet Access Port.')
cmEthernetAccPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMDIXType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMDIXType.setDescription('This object allows management of MDIX property on  \n             Ethernet Access Port.')
cmEthernetAccPortJumboFramesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortJumboFramesEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJumboFramesEnabled.setDescription('This object allows enabling/disabling jumbo frames support on \n             the Ethernet Access Port.  This object is only applicable for\n             Ethernet Access Port on R3.1CM NTU Card.')
cmEthernetAccPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpVendorName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpVendorName.setDescription('This object provides the vendor name of the SFP. \n             This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpPartNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpPartNumber.setDescription('This object provides the part number of the SFP. \n             This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpSerialNumber.setDescription('This object provides the serial number of the SFP.  \n             This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpDateOfManufacture.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpDateOfManufacture.setDescription('This object provides the date of manufacture of the SFP.\n             This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpConnectorValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpConnectorValue.setDescription('This object provides the SFP connector value.\n             This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 18), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInitiateDiag.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortInitiateDiag.setDescription('This object allows to initiate Etherjack diagnosis on the\n             Ethernet Access Port.')
cmEthernetAccPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 19), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair1Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair1Cond.setDescription('This object provides diagnosis results for the cable Pair 1\n             on Ethernet Access Port.')
cmEthernetAccPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 20), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair2Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair2Cond.setDescription('This object provides diagnosis results for the cable Pair 2\n             on Ethernet Access Port.')
cmEthernetAccPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 21), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair3Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair3Cond.setDescription('This object provides diagnosis results for the cable Pair 3\n             on Ethernet Access Port.')
cmEthernetAccPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 22), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair4Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosePair4Cond.setDescription('This object provides diagnosis results for the cable Pair 4\n             on Ethernet Access Port.')
cmEthernetAccPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 23), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseAutoNegCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseAutoNegCond.setDescription('This object provides auto negotiation results of the diagnosis\n             test on Ethernet Access Port.')
cmEthernetAccPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 24), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseLpbkCond.setDescription('This object provides port loopback results of the diagnosis\n             test on Ethernet Access Port.')
cmEthernetAccPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 25), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseEfmLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseEfmLpbkCond.setDescription('This object provides remote EFM loopback results of the diagnosis\n             test on Ethernet Access Port.')
cmEthernetAccPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseResult.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseResult.setDescription('This object provides results of the diagnosis\n             test in string form on Ethernet Access Port.')
cmEthernetAccPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 27), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestStatus.setDescription('This object provides the current status of the diagnosis\n             test on Ethernet Access Port.')
cmEthernetAccPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnoseTestTime.setDescription('This object provides the time when diagnosis test was last executed.')
cmEthernetAccPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 29), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the Ethernet Access Port.')
cmEthernetAccPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 30), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the Ethernet Access Port.')
cmEthernetAccPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the Ethernet Access Port.')
cmEthernetAccPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 32), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSwapSADA.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSwapSADA.setDescription('This object allows to specify whether or not the loopbacked\n             frame will have the Source Address and Destination Address\n             swapped.')
cmEthernetAccPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopbackMask.setDescription('This object allows specification of the outer VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Outer VLAN 1 Loopback Enabled\n                   2         Outer VLAN 2 Loopback Enabled\n                   4         Outer VLAN 3 Loopback Enabled\n              Value of 0 means that no VLANs are enabled.')
cmEthernetAccPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback1.setDescription('This object allows specification of the outer VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback2.setDescription('This object allows specification of the outer VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterVlanLoopback3.setDescription('This object allows specification of the outer VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopbackMask.setDescription('This object allows specification of the inner VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Inner VLAN 1 Loopback Enabled\n                   2         Inner VLAN 2 Loopback Enabled\n                   4         Inner VLAN 3 Loopback Enabled\n              Value of 0 means that no VLANs are enabled.')
cmEthernetAccPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback1.setDescription('This object allows specification of the inner VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback2.setDescription('This object allows specification of the inner VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortInnerVlanLoopback3.setDescription('This object allows specification of the inner VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetAccPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetAccPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdEnabled.setDescription('This object allows enabling/disabling link loss forwarding \n              on the Ethernet Access Port.')
cmEthernetAccPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 42), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdSignalType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdSignalType.setDescription('This object allows definition of the link loss forwarding\n              signalling type.  This is applicable only if \n              cmEthernetAccPortLinkLossFwdEnabled is enabled.\n              This object is applicable only for FSP150CM Release 3.1.\n              This object is deprecated henceforth. \n              Link Loss signalling will be supported using the object\n              cmEthernetAccPortLinkLossFwdTxActionType.')
cmEthernetAccPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 43), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTriggerTypes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTriggerTypes.setDescription('This object allows definition of the link loss forwarding\n              trigger types.  This is applicable only if \n              cmEthernetAccPortLinkLossFwdEnabled is enabled.')
cmEthernetAccPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdDelay.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdDelay.setDescription('This object allows specification of the delay between\n              detection of link loss and signalling of link loss forwarding. \n              Time specified is in seconds.')
cmEthernetAccPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdActive.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdActive.setDescription('This object provides the link loss forwarding status indicating\n              if link loss forwarding is currently being signaled via \n              the port.')
cmEthernetAccPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdPartnerEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdPartnerEnabled.setDescription('This object provides the indication of a link partners ability\n              to support link loss forwarding via EFM, i.e. from\n              received organization specific OAMPDUs.')
cmEthernetAccPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdLocalLinkId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdLocalLinkId.setDescription('This object allows configuration of the Local Link Id on \n              Ethernet access port.')
cmEthernetAccPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 48), CmRemoteLinkIds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRemoteLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRemoteLinkIds.setDescription('This object allows enabling/disabling Remote Link Ids \n              on Ethernet access port. By setting the appropriate bit\n              positions, the Ethernet access port is able to distinguish\n              the remote side client ports from the Remote Link Down\n              PDUs coming from remote end.')
cmEthernetAccPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamId.setDescription('OAM Id.  This is unique EFM OAM sublayer port id.')
cmEthernetAccPortOamAdminDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminDisposition.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminDisposition.setDescription("Ethernet Access Port's EFM OAM Disposition.\n              This object is applicable only for FSP150CM Release 3.1.\n              This object is deprecated henceforth.  \n              With FSP150CC Release 4.1, this property is managed using \n              the Control Protocol Disposition tables.")
cmEthernetAccPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 51), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamDiscoveryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamDiscoveryState.setDescription("Ethernet Access Port's OAM discovery state.")
cmEthernetAccPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalVarRtrvsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Access Port supports sending variable response OAMPDUs.')
cmEthernetAccPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalLinkEventsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Access Port supports interpreting Link Events.')
cmEthernetAccPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalOamLoopbacksSupported.setDescription('This object allows specification of whether the Ethernet\n              Access Port is capable of OAM remote loopback mode.')
cmEthernetAccPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalUnidirSupportEnabled.setDescription('This object allows specification of whether the Ethernet\n              Access Port is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetAccPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMaxPDUSize.setDescription('This object represents the largest OAMPDU, in octets, \n              supported by the Ethernet Access Port.  This value is\n              compared to the remote Maximum PDU Size and the smaller of \n              the two is used.')
cmEthernetAccPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 57), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamLocalMode.setDescription('This object allows to configure the OAM sublayer entity in\n              either Active or Passive mode.')
cmEthernetAccPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 58), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address.')
cmEthernetAccPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 59), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteVarRtrvsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports sending variable response OAMPDUs.')
cmEthernetAccPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 60), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteLinkEventsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports interpreting Link Events.')
cmEthernetAccPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 61), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteOamLoopbacksSupported.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports OAM remote loopback mode.')
cmEthernetAccPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteUnidirSupportEnabled.setDescription('This object allows retrieval of whether the remote \n              OAM entity is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetAccPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMaxPDUSize.setDescription('This object allows retrieval of the remote OAM \n              entity maximum OAMPDU size.')
cmEthernetAccPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 64), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamRemoteMode.setDescription('This object allows to retrieve whether the remote OAM \n              sublayer entity is either in Active or Passive mode.')
cmEthernetAccPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 65), CmEthernetSvcPortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMode.setDescription('This object allows specification of whether the \n              Ethernet Access Port is in a connection-oriented \n              (offering VLAN based services) mode or connection-less \n              (offering MAC based services) mode.')
cmEthernetAccPortSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 66), CmEthernetSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSvcType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSvcType.setDescription('This object allows specification of whether the \n              Ethernet Access Port provides transparent port based services,\n              or multi-flow VLAN based services.')
cmEthernetAccPortRxPauseDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 67), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseDisposition.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseDisposition.setDescription('This object allows management of RX pause frames on \n          Ethernet Access port. This object is applicable only \n          for FSP150CM Release 3.1.\n          This object is deprecated henceforth.  With FSP150CC Release 4.1,\n          this property is managed using the Control Protocol\n          Disposition tables.')
cmEthernetAccPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxPauseEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTxPauseEnabled.setDescription('This object allows enabling/disabling transmit pause frames on\n          Ethernet Access port.')
cmEthernetAccPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 69), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAfpType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortAfpType.setDescription('This object allows specification of the Acceptable Frame Policy on\n          Ethernet Access port. Users can specify whether the port supports\n          only tagged frames, only untagged frames or both tagged and \n          untagged frames.')
cmEthernetAccPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 70), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortMDIXStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMDIXStatus.setDescription('This object provides the current MDIX status of the \n          Ethernet Access port.')
cmEthernetAccPortSfpReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpReach.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpReach.setDescription('This object provides the SFP Reach in meters.\n          This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpLaserWaveLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpLaserWaveLength.setDescription('This object provides the SFP Laser Wave Length in nano meters.\n          This is applicable only when cmEthernetAccPortMediaType is fiber.')
cmEthernetAccPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 73), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpMediaType.setDescription('This object provides the SFP Media Type.\n          This is applicable when cmEthernetAccPortMediaType is fiber or coppersfp.')
cmEthernetAccPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOamEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamEnabled.setDescription('This object allows to manage the EFM OAM on Ethernet Access Port.')
cmEthernetAccPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 75), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOamAdminState.setDescription('This object provides the EFM OAM Admin State.')
cmEthernetAccPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 76), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortShapingEnabled.setDescription('This object allows to manage the Access Port Shaping.\n          When enabled, values in cmEthernetAccPortShapedSpeedLo and\n          cmEthernetAccPortShapedSpeedHi are applicable.')
cmEthernetAccPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 77), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedLo.setDescription('This object allows to specify the lower 32 bits of \n          the Access Port Shaped speed. This value is applicable\n          when cmEthernetAccPortShapingEnabled is enabled.')
cmEthernetAccPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 78), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortShapedSpeedHi.setDescription('This object allows to specify the higher 32 bits of \n          the Access Port Shaped speed. This value is applicable\n          when cmEthernetAccPortShapingEnabled is enabled.')
cmEthernetAccPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 79), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortQinQEtherType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortQinQEtherType.setDescription('This object allows to specify the Q-in-Q Ether Type \n          on the Access Port.  Setting this value to 0 will disable\n          the Q-in-Q override on the Access Port.')
cmEthernetAccPortRxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortRxPauseEnabled.setDescription('This object allows to enable/disable the RX PAUSE \n          on the Access Port. This object is not applicable for FSP150CM NTU Card.\n          On NTU Card cmEthernetAccPortRxPauseDisposition object should be used to\n          provision RxPause disposition.')
cmEthernetAccPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAutoDiagEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortAutoDiagEnabled.setDescription('This object allows to enable or disable the automatic \n          Cable Diagnostic tests when the cable is removed from the port.')
cmEthernetAccPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 82), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTxActionType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdTxActionType.setDescription("This object allows to specify the Access Port's behavior when\n          link loss forwarding trigger events occur on the Network Port.\n          This provides ability to configure per access port LLF behavior.")
cmEthernetAccPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 83), CmRemoteLinkIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRxRLDLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLinkLossFwdRxRLDLinkIds.setDescription('This object provides the received Remote Link IDs in \n          EFM RLD messages on the Access Port.')
cmEthernetAccPortN2AVlanTrunkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 84), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2AVlanTrunkingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortN2AVlanTrunkingEnabled.setDescription('This object allows to enable or disable the VLAN trunking on\n          Ethernet Access port. Disabling VLAN trunking removes all\n          VLAN tags before transmitting traffic out of the access port. \n          This object is only applicable for connection-oriented, \n          evpl service type.')
cmEthernetAccPortA2NPushPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 85), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortA2NPushPVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortA2NPushPVIDEnabled.setDescription('This object allows to specify whether cmEthernetAccPortPortVlanId\n          value will be PUSHed on untagged frames or not in the \n          Access to Network direction.  This object is only applicable \n          for connection-oriented, evpl service type.')
cmEthernetAccPortN2APopPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 86), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2APopPVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortN2APopPVIDEnabled.setDescription('This object allows to specify whether cmEthernetAccPortPortVlanId\n          value will be POPed in the \n          Network to Access direction.  This object is only applicable \n          for connection-oriented, evpl service type.')
cmEthernetAccPortPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 87), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanId.setDescription('This object allows to specify the Ethernet Access Port VLAN Id \n          to PUSH on untagged frames in the Access to Network\n          direction.  This object is only applicable for connection-oriented,\n          evpl service type, when cmEthernetAccPortA2NPushPVIDEnabled \n          is set to true.')
cmEthernetAccPortPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 88), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPortVlanPriority.setDescription('This object allows to specify the Ethernet Access Port VLAN Priority \n          for the PUSHed VLAN tag (specified by cmEthernetAccPortPortVlanId) \n          on untagged frames in the Access to Network direction.  \n          This object is only applicable for connection-oriented,\n          evpl service type, when cmEthernetAccPortA2NPushPVIDEnabled \n          is set to true.')
cmEthernetAccPortPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 89), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPrioMapMode.setDescription('This object allows to specify the Ethernet Access Port \n          Priority Mapping Mode used for classification of frames.\n          This object is only applicable for connection-oriented,\n          evpl service type.')
cmEthernetAccPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 90), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSyncEEnabled.setDescription("This object allows to specify whether the Ethernet Access Port \n          can be enabled/disabled for Synchronous Ethernet. This object\n          is only applicable for Synchronous Ethernet capable ports.\n          When enabled, on receive side \n            -port can extract the frequency of its input signal\n             and pass the recovered clock to the system clock\n            -port processes the ESMC(Ethernet Synchronization Messaging\n             Channel) and extracts the QL (when also QL enabled)   \n            -port is eligible to be selected as a system clock reference\n          When enabled, on transmit side \n            -port's transmit clock is locked to the system clock\n            -port generates an ESMC to generate a QL (when also QL enabled)\n\n          When disabled, on receive side,\n            -port does not pass the recovered clock to the system clock \n            -port does not process the ESMC (if present) \n            -port is not eligible to be selected as a \n                     system clock reference\n          When disabled, on transmit side \n            -port's output frequency may be synchronized to the system clock\n            -port does not generate an ESMC.")
cmEthernetAccPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 91), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortQLModeEnabled.setDescription('This object allows to specify whether the Ethernet Access Port \n          can be enabled/disabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetAccPortQLModeEnabled is set to true.\n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
cmEthernetAccPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 92), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortExpectedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortExpectedQL.setDescription("This object allows to specify the expected QL when the \n          Ethernet Access Port is enabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetAccPortQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the port. The valid values\n          depend upon the SYNC entity's Network Clock Type. A value of\n          None represents that a minimum Quality Level is not expected. \n          The default value shall be None.")
cmEthernetAccPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 93), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortAssumedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          Ethernet Access Port. This object is only applicable for \n          Synchronous Ethernet capable ports. \n          The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          port's QL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
cmEthernetAccPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 94), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortReceivedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortReceivedQL.setDescription("This object provides the Received QL value for the Ethernet port. \n          If the Ethernet port's QL Mode is disabled, then the received \n          QL value is not applicable.This object is only applicable for \n          Synchronous Ethernet capable ports.")
cmEthernetAccPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 95), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortTransmitQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTransmitQL.setDescription("This object provides the Transmitted QL value for the Ethernet port. \n          If the Ethernet port's QL Mode is disabled, then the received \n          QL value is not applicable. This object is only applicable for \n          Synchronous Ethernet capable ports.")
cmEthernetAccPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 96), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortDeiEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortDeiEnable.setDescription('This is a port level control to reset the DEI \n         (Drop Eligibility Indicator) bit in the S-Tag,\n         if the downstream equipment supports S-Tag TPID (EtherType) but \n         cannot handle DEI bit set. In the receive direction,\n         it uses the S-TAG DEI when enabled, else ignores it.\n         The following comment is NOT relevant to OSA8.1.1, \n         since this object is still supported by OSA8.1.1.\n         The object has been deprecated.\n         The respective configuration should be managed\n         by following objects:\n         cmEthernetAccPortRxDeiAction, cmEthernetAccPortTxDeiAction,\n         cmEthernetAccPortRxDeiOuterTagType, cmEthernetAccPortTxDeiOuterTagType.')
cmEthernetAccPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 97), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEEncType.setDescription('This is a port level control that specifies the mode of drop\n         eligibility encoding in PCP bits of the VLAN tag.')
cmEthernetAccPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 98), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPcpDEPairsAction.setDescription('This object allows the SNMP user to manage the Priority \n         Code Point (PCP) Drop Eligibility Pairs.  When the\n         cmEthernetAccPortPcpDEEncType is of type 7p1d, 6p2d, 5p3d,\n         the cmAccPortPcpDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetAccPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 99), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSSMRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSSMRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address, when\n              the port is peering using SSM.')
cmEthernetAccPortXgePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 100), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortXgePhyType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortXgePhyType.setDescription("This object allows to specify the PHY type of 10G Ethernet Port.\n         10G ports can operate in LAN-PHY or WAN-PHY mode. The default mode is LAN-PHY\n         and port rate in this mode is 10Gbps. In WAN-PHY mode the port rate is 9.29Gbps.\n         This attribute is only applicable for ports configured to work at speed-10G-full.\n         For other speeds the value of this object must be 'not-applicable' and cannot\n         be changed.\n        ")
cmEthernetAccPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 101), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacControlEnabled.setDescription('This object allows to Enable/Disable the Acc Port Source MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetAccPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 102), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacControlEnabled.setDescription('This object allows to Enable/Disable the Acc Port Destination MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetAccPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 103), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackSourceMacAddress.setDescription('This object allows to set Acc Port Source MAC Address for frame \n          matching when Acc Port Source MAC Control is enabled.')
cmEthernetAccPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 104), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackDestMacAddress.setDescription('This object allows to set Acc Port Destination MAC Address for frame \n          matching when Acc Port Destination MAC Control is enabled.')
cmEthernetAccPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 105), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackBlockingEnabled.setDescription('This object allows frame blocking when loopback is active.\n         - True: Blocks frames in the non-loopback direction \n           that match the PORT or VLAN received in the \n           non-loopback direction. Discards  frames \n           in the loopback direction that match \n           the PORT or VLAN, but do not match \n           the MAC address criteria,\n         - False: No blocking of  frames.')
cmEthernetAccPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 106), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiAction.setDescription('This object allows to specify\n              the Receive DEI Action.')
cmEthernetAccPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 107), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiAction.setDescription('This object allows to specify\n              the Transmit DEI Action.')
cmEthernetAccPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 108), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortRxDeiOuterTagType.setDescription('This object allows to specify\n              the Receive DEI Outer Tag Type.')
cmEthernetAccPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 109), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTxDeiOuterTagType.setDescription('This object allows to specify\n              the Transmit DEI Outer Tag Type.')
cmEthernetAccPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 110), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLaserWDMChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLaserWDMChannel.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetAccPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 111), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLaserIsTunable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLaserIsTunable.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetAccPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 112), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortLaserFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLaserFrequency.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetAccPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 113), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortMediaTypeAutoSelected.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortMediaTypeAutoSelected.setDescription('This object provides the auto selected Ethernet Media of the\n             Ethernet Access Port.')
cmEthernetAccPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 114), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLowLatencyQueuingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLowLatencyQueuingEnabled.setDescription('This object allows to Enable/Disable the Low Latency Queuing on\n             the Ethernet Access Port.')
cmEthernetAccPortA2nSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 115), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortA2nSwapPriorityVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortA2nSwapPriorityVIDEnabled.setDescription('This object allows to Enable/Disable\n             the Swapping of Priority Vlan Id in the A2N direction.')
cmEthernetAccPortN2aSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 116), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortN2aSwapPriorityVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortN2aSwapPriorityVIDEnabled.setDescription('This object allows to Enable/Disable\n             the Swapping of Priority Vlan Id in the N2A direction.')
cmEthernetAccPortSwapPriorityVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 117), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSwapPriorityVID.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSwapPriorityVID.setDescription('This object allows to specify the value of\n             Vlan Id for the Swapping of Priority Vlan Id operation\n             for both the A2N and N2A direction.')
cmEthernetAccPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 118), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosticMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortDiagnosticMacAddress.setDescription('This object describes the diagnose mac address for SAT, ECPA, JDSU, Loopback with Override SA etc.')
cmEthernetAccPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 119), VlanTagType().clone('outer-vlantag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortIngressCOSPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortIngressCOSPriority.setDescription('Indicates which VLAN tag to use for PCP Priority to COS mapping \n              when the port Priority Map Mode is 802.1p. Supported values are\n              inner-vlantag and outer-vlantag. This attribute is only applicable\n              on products when Flowpoint Model is supported.\n             \n              inner-vlantag: The inner VLAN tag PCP Priority of a frame is \n              used for ingress COS mapping. A frame with no inner VLAN tag \n              (untagged or single-tagged) will have a COS equal to the default\n              COS of the port.\n\n              outer-vlantag: The outer VLAN tag PCP Priority of a frame  is used \n              for ingress COS mapping. A frame with no outer VLAN tag (untagged) \n              will have a COS equal to the default COS of the port.\n\n              This attribute has been deprecated and is not supported.  Now,\n              the Priority Map Mode indicates whether it is inner or outer.\n              Use priomap-8021p(4) for outer and priomap-8021p-inner(5)\n              for inner.  ')
cmEthernetAccPortDefaultCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 120), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortDefaultCOS.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortDefaultCOS.setDescription("The COS assigned to a frame that does not have a valid COS identifier \n              for the Priority Map Mode of the port. This attribute is only applicable\n              on products when Flowpoint Model is supported.\n            \n              This value is assigned to a frame received on a port when:\n              - the cmEthernetAccPortPrioMapMode=priomap-8021p, ingressCOSPriority=inner-vlantag; \n                and the frame is untagged\n              - the cmEthernetAccPortPrioMapMode=priomap-8021p, ingressCOSPriority=inner-vlantag;\n                and the frame has a single VLAN tag\n              - the cmEthernetAccPortPrioMapMode=priomap-8021p, ingressCOSPriority=outer-vlantag; \n                and the frame is untagged\n              - the cmEthernetAccPortPrioMapMode=priomap-dscp; and the frame does not have an IP ethertype\n              - the cmEthernetAccPortPrioMapMode=priomap-tos; and the frame does not have an IP ethertype.\n\n              This attribute has been deprecated and is not supported. The\n              Default COS is determined from the flowpoint's associated\n              Priority Mapping Profle.")
cmEthernetAccPortTrafficModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 121), EthernetPortTrafficModel().clone('accessFlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortTrafficModel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortTrafficModel.setDescription('The Traffic Management connection model available for the port.\n              - accessFlow: NID Traffic  Connection model.\n              - flowpoint: Multipoint and Aggregation Traffic Connection model.')
cmEthernetAccPortIndependentShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 122), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortIndependentShaperBW.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortIndependentShaperBW.setDescription('This object describes whether the shaper bw independent.')
cmEthernetAccPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 123), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJdsuLoopbackSrcIp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJdsuLoopbackSrcIp.setDescription('This object is applicable when there is jdsu l3 loopback.')
cmEthernetAccPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 124), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortWfqSegmentationCOS.setDescription('This object used to specify the wfq segmentation cos value.')
cmEthernetAccPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 125), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupCOS.setDescription('This object used to specify the wfq group cos value.')
cmEthernetAccPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirLo.setDescription('This object used to specify the wfq group eir low 32 bits value.')
cmEthernetAccPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 127), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortWfqGroupEirHi.setDescription('This object used to specify the wfq group eir high 32 bits value.')
cmEthernetAccPortSilentStartControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 128), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortSilentStartControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSilentStartControl.setDescription('Allows enabling/disabling of silent start.')
cmEthernetAccPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpLinkLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpLinkLength.setDescription('This object provides the SFP Link Length.\n          This is applicable only when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetAccPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 130), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpidOverride.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpidOverride.setDescription('This object allows enabling/disabling of Outer Tag TPID override.\n          When enabled, values in Outer Tag TPID is applicable on egress\n          Ethernet Access Port.')
cmEthernetAccPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 131), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortOuterTagTpid.setDescription('This object allows to specify the egress Outer Tag TPID \n          on the Ethernet Access Port.')
cmEthernetAccPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 132), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpName.setDescription('This object provides the official name of the SFP.')
cmEthernetAccPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 133), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpHardwareRevision.setDescription('This object provides the hardware revision of the SFP.')
cmEthernetAccPortPersistentLoopbackControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 134), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPersistentLoopbackControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPersistentLoopbackControl.setDescription('This object allows enabling/disabling of Persistent Loopback Control.\n          The loopback configuration parameters do not survive restart as typically \n          maintenance actions are not persist. Setting this attribute to true shall \n          persist the loopback configuration parameters. When it is set to false the\n          loopback configuration parameters shall not survive a restart.')
cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 135), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl.setDescription('Control that enables/disables Test Reflector IPv4 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetAccPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 136), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv4Address.setDescription('This is the Test Reflector Interface IPv4 address.')
cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 137), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl.setDescription('Control that enables/disables Test Reflector IPv6 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetAccPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 138), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortLoopbackTestReflectorIPv6Address.setDescription('This is the Test Reflector Interface IPv6 address.')
cmEthernetAccPortPowerdDeviceDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 139), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortPowerdDeviceDetection.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPowerdDeviceDetection.setDescription('This object allows to manage (enable/disable) Power Over Ethernet Detection.')
cmEthernetAccPortPoEStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 140), PoEStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortPoEStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortPoEStatus.setDescription('This object provides the status of Power Over Ethernet Detection.')
cmEthernetAccPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 1, 1, 141), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortSfpIdentifierValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortSfpIdentifierValue.setDescription('This object provides the SFP identifier value.')
cmEthernetAccPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2), )
if mibBuilder.loadTexts: cmEthernetAccPortCpdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Control Protocol Disposition.  \n\n             This table is only\n             applicable for FSP150CM Hub Shelf Release 3.x.')
cmEthernetAccPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortCpdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdEntry.setDescription('A conceptual row in the cmEthernetAccPortCpdTable. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Access Port.')
cmEthernetAccPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this CPD Service Entry.')
cmEthernetAccPortCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterType.setDescription('This enables specification of type of CPD Filter.')
cmEthernetAccPortCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterDescr.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdFilterDescr.setDescription('This provides description of CPD Filter.')
cmEthernetAccPortCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdDispType.setDescription('This enables specification of disposion type of CPD Filter.')
cmEthernetAccPortCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMatch.setDescription('This enables provides the Filter MAC Address to match.')
cmEthernetAccPortCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdMacAddressMask.setDescription('This enables provides the Filter MAC Address Mask to match.')
cmEthernetAccPortCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertype.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertype.setDescription('This enables provides the Filter Ethertype to match.')
cmEthernetAccPortCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertypeMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdEthertypeMask.setDescription('This enables provides the Filter Ethertype Mask to match.')
cmEthernetAccPortCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtype.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtype.setDescription('This enables provides the Filter Subtype to match.')
cmEthernetAccPortCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtypeMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdSubtypeMask.setDescription('This enables provides the Filter Subtype Mask to match.')
cmEthernetAccPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3), )
if mibBuilder.loadTexts: cmEthernetAccPortClbTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Cable Length Benchmark.')
cmEthernetAccPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortClbEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbEntry.setDescription('A conceptual row in the cmEthernetAccPortClbTable. \n             These entries represent Cable Length Benchmarks \n             on the Ethernet Access Port.')
cmEthernetAccPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortClbIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbIndex.setDescription('An integer index value used to uniquely identify\n             this Cable Length Benchmark Entry specification.')
cmEthernetAccPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbEnabled.setDescription('This enables specification of Cable Length Benchmark entry.')
cmEthernetAccPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbLength.setDescription('Cable length of Cable Points Entry. The cable length is of\n             the form XXX[.YY] where XX can be any integer value and YY\n             allows precision of 2 decimals after the floating point. Note\n             that .YY is optional.')
cmEthernetAccPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortClbDescr.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortClbDescr.setDescription('A textual string containing description of cable span.')
cmFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4), )
if mibBuilder.loadTexts: cmFlowTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowTable.setDescription("A list of entries corresponding to Ethernet Flows \n             for configuration purposes.  If the corresponding\n             Ethernet Access Port's  cmEthernetAccPortMode is \n             connection-oriented and cmEthernetAccPortSvcType is epl,\n             there exists a single Flow in this table.  \n\n             No Flow creation or deletion is allowed on this table\n             for FSP150CM NTU based services.\n                \n             Since Fsp150 R5.6CC release this table is used to manage 2 types of Flows:\n               - Access Port Flow as in the previous releases\n               - Tranparent Flow (new in 5.6CC)\n              A Transparent Flow is Flow between Network-1 and Network-2 ports used\n              to convey pass-thru traffic in the ring topology e.g. ERP.\n              Few of the existing attributes will have new semantix for Transperent Flow.\n              Transparent Flow is a NE level object and hence has different indexing \n              than the Access Port Flow. The valid indices are neIndex and cmFlowIndex.\n              The remaining indices will have constant values as follows:\n                  shelfIndex = 1\n                  slotIndex = 255\n                  cmEthernetAccPortIndex = 0\n              ")
cmFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"))
if mibBuilder.loadTexts: cmFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowEntry.setDescription('A conceptual row in the cmFlowTable. These entries represent\n             an Ethernet Flow.')
cmFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 400))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowIndex.setDescription('The integer index value corresponding to an Ethernet Flow.')
cmFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmFlowCircuitName.setDescription('This object allows SNMP management entities to provide a\n          circuit identifier with the Flow.')
cmFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowAdminState.setStatus('current')
if mibBuilder.loadTexts: cmFlowAdminState.setDescription('This object represents the Administrative State of the Flow.')
cmFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmFlowOperationalState.setDescription('This object represents the Operational State of the Flow.')
cmFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmFlowSecondaryState.setDescription('This object represents the Secondary State of the Flow.')
cmFlowType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 6), CmFlowType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowType.setStatus('current')
if mibBuilder.loadTexts: cmFlowType.setDescription('This object represents the type of the Flow.')
cmFlowMultiCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowMultiCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowMultiCOS.setDescription('This object allows specification of multiple COS (Class of Service)\n          Flow.')
cmFlowA2NCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NCIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NCIR.setDescription('This object represents the Commited Information\n          Rate(CIR) of an Flow in the Access to Network (A2N) direction. \n          For a portbased Flow(FSP150CM NTU, CPMR), \n          this object is not settable. This value represents the lower \n          32-bits of the CIR. For a Multi COS flow, this value\n          is settable only at creation time.\n          \n          In case of Tranparent Flow this object represents N1 to N2 CIR.')
cmFlowA2NEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NEIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NEIR.setDescription('This object represents the Excess Information\n          Rate(EIR) on an Flow in the Access to Network (A2N) direction.  \n          For a portbased Flow(FSP150CM NTU, CPMR), \n          this object is not settable.  This value represents the lower\n          32-bits of the CIR. For a Multi COS flow, this value\n          is settable only at creation time.\n\n          In case of Tranparent Flow this object represents N1 to N2 EIR.')
cmFlowN2ARateLimitingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ARateLimitingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2ARateLimitingEnabled.setDescription('This object allows management of the N2A rate limiting,\n          independent of A2N rate limiting. When not enabled,\n          N2A specification is the same as A2N.\n          \n          This object is not applicable for Tranparent Flow; the value should be FALSE.')
cmFlowN2ACIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2ACIR.setDescription('This object represents the Commited Information\n          Rate(CIR) of an Flow in the Network to Access (N2A) direction. \n          For a portbased Flow, this object is not settable. This is\n          only settable if cmFlowN2ARateLimitingEnabled is enabled.\n\n          In case of Tranparent Flow this object represents N2 to N1 CIR.')
cmFlowN2AEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AEIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2AEIR.setDescription('This object represents the Excess Information\n          Rate(CIR) of an Flow in the Network to Access (N2A) direction. \n          For a portbased Flow, this object is not settable. This is\n          only settable if cmFlowN2ARateLimitingEnabled is enabled.\n\n          In case of Tranparent Flow this object represents N2 to N1 EIR.')
cmFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowStorageType.setStatus('current')
if mibBuilder.loadTexts: cmFlowStorageType.setDescription('The type of storage configured for this entry.')
cmFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmFlowRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmFlowRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmFlowRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmFlowRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).\n            \n            Note that flow creation and deletion is only supported\n            with access port in connection-oriented evpl mode.')
cmFlowTrafficType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 15), FlowTrafficType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowTrafficType.setStatus('current')
if mibBuilder.loadTexts: cmFlowTrafficType.setDescription("This object provides information on the type of traffic flow \n             supported by the system, i.e.'shaped-only' flows (support\n             only shaping) or 'policed-shaped' (support policing and shaping) flows.  \n             'shaped-only' flow exists for FSP150CM NTU and CPMR access ports. \n             'policed-shaped' flows are supported in FSP150CC devices.\n             Please note that this object refers to how traffic profiles\n             are managed on devices and is independent of the policing enabling/disabling\n             feature.")
cmFlowCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowCOS.setDescription('This object allows specification of the COS (Class of Service)\n             value for the Traffic Flow. This value is used at flow creation\n             time to identify the COS level of the A2N and N2A shaper.\n             In case of a multi-COS flow, this value is not applicable\n             when multiple policers/shapers exist on the flow.\n             This object is also applicable to specify the COS of a\n             connection-oriented epl service.')
cmFlowVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: cmFlowVlanMemberList.setDescription('This object is applicable only when Port is in connection-oriented\n          evpl mode. This attribute is mandatory if creation of\n          connection-oriented evpl regular flow is desired.\n          It allows specification of VLAN members of the Flow.\n          VLAN members are comma separated, of the form X-Y where X is the\n          VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n          the form X-* or X (vlan X with all priorities), \n          *-Y (all vlans with priority Y), and X1:X2 \n          (range of vlans from X1 to X2, all priorities). Members \n          with specific VLAN Id and specific VLAN Priority are not supported.\n          Once the flow is created, this attribute can only be updated\n          using cmFlowAction and cmFlowActionVlan objects.')
cmFlowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 18), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowAction.setDescription('This object is applicable only when Port is in connection-oriented\n          evpl mode and the cmFlowType is regular.  This object allows to\n          add or remove the VLAN members specified by\n          cmFlowActionVlan object.  SNMP manager must first\n          configure the VLAN member to be added/removed in the object\n          cmFlowActionVlan and then should specify\n          cmFlowAction on whether to add/remove the specified\n          VLAN member.')
cmFlowActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowActionVlan.setStatus('current')
if mibBuilder.loadTexts: cmFlowActionVlan.setDescription('This object is applicable only when Port is in connection-oriented\n          evpl mode. This object allows adding/removing VLAN members\n          to a connection-oriented evpl regular flow.\n          VLAN member is of the form X-Y where X is the\n          VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n          the form X-* (vlan X with all priorities), \n          *-Y (all vlans with priority Y), and X1:X2 \n          (range of vlans from X1 to X2, all priorities).  \n          Members with specific VLAN Id and \n          specific VLAN Priority are not supported.\n          In order to add/remove VLAN member to a flow, user must\n          specify this object with appropriate VLAN and then invoke\n          cmFlowAction.')
cmFlowUntaggedMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowUntaggedMemberEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowUntaggedMemberEnabled.setDescription('This object is applicable only when Port is in connection-oriented\n          evpl mode for a regular flow as well as default flow. \n          This object allows to specify whether or not the flow \n          supports untagged traffic.')
cmFlowA2NCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) of an Flow in the Access to Network (A2N) direction. \n          This value represents the upper 32 bits of CIR (lower is \n          provided in cmFlowA2NCIR). For a Multi COS flow, this value\n          is settable only at creation time.\n\n          In case of Tranparent Flow this object represents N1 to N2 CIR.')
cmFlowA2NEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) on an Flow in the Access to Network (A2N) direction.  \n          For a portbased Flow(FSP150CM NTU, CPMR), \n          this object is not settable.  This value represents the higher\n          32-bits of the CIR.  For a Multi COS flow, this value\n          is settable only at creation time.\n\n          In case of Tranparent Flow this object represents N1 to N2 EIR.')
cmFlowN2ACIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACIRHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2ACIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) of an Flow in the Network to Access (N2A) direction. \n          This value represents the upper 32 bits of CIR (lower is \n          provided in cmFlowN2ACIR). For a Multi COS flow, this value\n          is settable only at creation time. This is\n          only settable if cmFlowN2ARateLimitingEnabled is enabled.\n\n          In case of Tranparent Flow this object represents N2 to N1 CIR.')
cmFlowN2AEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2AEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) on an Flow in the Network to Access (N2A) direction.  \n          For a portbased Flow(FSP150CM NTU, CPMR), \n          this object is not settable.  This value represents the higher\n          32-bits of the CIR.  For a Multi COS flow, this value\n          is settable only at creation time. This is\n          only settable if cmFlowN2ARateLimitingEnabled is enabled.\n\n          In case of Tranparent Flow this object represents N2 to N1 EIR.')
cmFlowHCOSMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 25), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowHCOSMgmtEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowHCOSMgmtEnabled.setDescription('This object allows management of Hierarchical COS on the Flow.')
cmFlowGuaranteedA2NBandwidthLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthLo.setDescription('This object supports the Hierarchical Class of Service (HCOS)\n          feature.  It is only applicable for a flow with multiple\n          class of services. This allows the provisioning of \n          guaranteed bandwidth (lower 32 bits) of a flow.\n          This value must be greater than or equal to the sum of all\n          individual COS CIRs.\n\n          In case of Tranparent Flow this object represents N1 to N2 and N2 to N1\n          guaranteed bandwidth.')
cmFlowGuaranteedA2NBandwidthHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowGuaranteedA2NBandwidthHi.setDescription('This object supports the Hierarchical Class of Service (HCOS)\n          feature.  It is only applicable for a flow with multiple\n          class of services. This allows the provisioning of \n          guaranteed bandwidth (upper 32 bits) of a flow.\n          This value must be greater than or equal to the sum of all\n          individual COS CIRs.\n\n          In case of Tranparent Flow this object represents N1 to N2 and N2 to N1\n          guaranteed bandwidth.')
cmFlowMaximumA2NBandwidthLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthLo.setDescription('This object supports the Hierarchical Class of Service (HCOS)\n          feature.  It is only applicable for a flow with multiple\n          class of services. This allows the provisioning of \n          maximum bandwidth (lower 32 bits) of a flow.  This is the peak\n          limit of a flow.  This value must be greater than or equal \n          to the sum of all individual COS CIRs.\n\n          In case of Tranparent Flow this object represents N1 to N2 and N2 to N1\n          maximum bandwidth.')
cmFlowMaximumA2NBandwidthHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowMaximumA2NBandwidthHi.setDescription('This object supports the Hierarchical Class of Service (HCOS)\n          feature.  It is only applicable for a flow with multiple\n          class of services. This allows the provisioning of \n          maximum bandwidth (upper 32 bits) of a flow.  This is the peak\n          limit of a flow.  This value must be greater than or equal \n          to the sum of all individual COS CIRs.\n\n          In case of Tranparent Flow this object represents N1 to N2 and N2 to N1\n          maximum bandwidth.')
cmFlowCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 30), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowCTagControl.setDescription("This object allows specification of the tag management \n          operation on the C-TAG.  Supported types are 'push', 'pushvid',\n          'swapvid' and 'none'. If the type is 'push', \n          the VLAN Id (cmFlowCTagVlanId) and priority\n          (cmFlowCTagVlanPriority) are pushed onto the frame;\n          if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n          the Priority is copied from incoming tag's priority;\n          if the type is 'swapvid', only the VLAN Id (12 bits) are \n          swapped with the specified cmFlowCTagVlanId; \n          if the type is 'none', no C-TAG management is performed.\n\n          This object is not applicable for Tranparent Flow; the value should be 'none'.")
cmFlowCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 31), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmFlowCTagVlanId.setDescription("This object allows specification of the VLAN Id to\n          be pushed or swapped, based on the value of cmFlowCTagControl.\n          It is applicable for 'push', 'swapvid' and 'pushvid'\n          control types.\n\n          This object is not applicable for Tranparent Flow; the value should be 0.")
cmFlowCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 32), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmFlowCTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n          be pushed or swapped, based on the value of cmFlowCTagControl.\n          It is applicable for 'push' control type.\n\n          This object is not applicable for Tranparent Flow; the value should be 0.")
cmFlowCTagMatchRxPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowCTagMatchRxPrio.setStatus('current')
if mibBuilder.loadTexts: cmFlowCTagMatchRxPrio.setDescription("This object is used to specify whether the C-TAG  priority\n          be used or ignored for traffic in the N2A direction.\n          This is only applicable if  cmFlowCTagControl\n          is 'push'.\n\n          This object is not applicable for Tranparent Flow; the value should be FALSE.")
cmFlowSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 34), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowSTagControl.setDescription("This object allows specification of the tag management \n          operation on the S-TAG.  Supported types are 'push', 'swapvid', and 'none'.\n          If the type is 'push', the VLAN Id (cmFlowSTagVlanId) and priority\n          (cmFlowSTagVlanPriority) are pushed onto the frame; if the type is\n          'swapvid', the VLAN Id(12 bits) is swapped with the specified\n          cmFlowSTagVlanId; type is 'none', no S-TAG manament is performed.\n\n          This object is not applicable for Tranparent Flow; the value should be 'none'.")
cmFlowSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 35), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmFlowSTagVlanId.setDescription("This object allows specification of the VLAN Id to\n          be pushed, based on the value of cmFlowSTagControl.\n          It is applicable for 'push' control type.\n\n          This object is not applicable for Tranparent Flow; the value should be 0.")
cmFlowSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 36), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmFlowSTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n          be pushed, based on the value of cmFlowSTagControl.\n          It is applicable for 'push' control type.\n\n          This object is not applicable for Tranparent Flow; the value should be 0.")
cmFlowOuterTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 37), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowOuterTagPrioEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowOuterTagPrioEnabled.setDescription('This object is used to specify whether the flow\n          participates in outer-tag priority swap.  The Priority \n          Mapping Table cmPrioMapTable allows the A2N outer-tag\n          priority to be specified based on incoming priority at\n          Access Port (based on priority mapping mode - 802.1P, TOS, DSCP).\n\n          This object is not applicable for Tranparent Flow; the value should be FALSE.')
cmFlowN2ACOSPriorityTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 38), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2ACOSPriorityTagType.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2ACOSPriorityTagType.setDescription('This object is used to specify whether the flow\n          uses the inner-tag or the outer-tag in determining the COS (Class of Service) in the\n          N2A direction.  This object is applicable in the case of a Multi COS Flow.\n\n          This object is not supported for Tranparent Flow;')
cmFlowESFramesLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowESFramesLossThreshold.setStatus('current')
if mibBuilder.loadTexts: cmFlowESFramesLossThreshold.setDescription('This object is used to specify the number of frames lost\n          per flow that starts counting Errored Seconds (ES) on the flow.\n          This functionality is applicable if the flow is monitored\n          using the Y.1731 ESA functionality.')
cmFlowSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowSESFramesLossThresholdRatio.setStatus('current')
if mibBuilder.loadTexts: cmFlowSESFramesLossThresholdRatio.setDescription('This object is used to specify the frame-loss ratio \n          per flow that starts counting Severely Errored Seconds (SES) \n          on the flow.\n          This functionality is applicable if the flow is monitored\n          using the Y.1731 ESA functionality.')
cmFlowPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 41), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPolicingEnabled.setDescription('This object is applicable only when Port is in connection-oriented mode.\n          This object is applicable to both epl and evpl mode flows. \n          This object allows to enable/disable the policing function on the flow.')
cmFlowPreserveSTagProperties = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 42), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPreserveSTagProperties.setStatus('current')
if mibBuilder.loadTexts: cmFlowPreserveSTagProperties.setDescription('This object is applicable only when Port is in connection-oriented mode.\n          This object is applicable to evpl mode Regular flows, when S-TAG control\n          is specified as SWAPVID.\n          When enabled, this attribute preserves the EtherType (0x88a8) and \n          DEI (Drop Eligibility Indicator) bit\n          in the incoming S-TAG (both from Access and Network Port perspective)\n          into the outgoing S-TAG.\n          When not enabled, the incoming tag is considered as a Q-TAG (0x8100)\n          and both EtherType and CFI (Canonical Form Indicator) bits are over-written \n          by the S-TAG Ethertype (0x88a8) and DEI bit. \n\n          This object is not applicable for Tranparent Flow; the value should be FALSE.')
cmFlowInnerTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 43), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowInnerTagPrioEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowInnerTagPrioEnabled.setDescription('This object is used to specify whether the flow\n          participates in inner-tag (second) priority swap.  The Priority \n          Mapping Table cmPrioMapTable allows the A2N inner-tag\n          priority to be specified based on incoming priority at\n          Access Port (based on priority mapping mode - 802.1P, TOS, DSCP).\n\n          This object is not applicable for Tranparent Flow; the value should FALSE.')
cmFlowN2AOuterTagPrioEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 44), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AOuterTagPrioEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2AOuterTagPrioEnabled.setDescription('This object is used to specify whether the flow\n          participates in outer-tag priority swap in the A2N direction.\n          The Priority Mapping Table cmNetPortPrioMapTable allows the N2A outer-tag\n          priority to be specified based on incoming priority at\n          Network Port (based on priority mapping mode - 802.1P, TOS, DSCP).\n\n          This object is not applicable for Tranparent Flow; the value should be FALSE.')
cmFlowA2NShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 45), ShapingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowA2NShapingType.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NShapingType.setDescription('This object is used to specify whether the traffic in A2N direction\n          passing through this flow is shaped by port-level or flow-level Shapers.\n          In case of portbased flows the value of this attribute is flow-based and \n          cannot be changed. In case of regular and default flows Fsp150 products\n          may support both port-based and flow-based shaping.')
cmFlowN2AShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 46), ShapingType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2AShapingType.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2AShapingType.setDescription('This object is used to specify whether the traffic in N2A direction\n          passing through this flow is shaped by port-level or flow-level Shapers.\n          In case of portbased flows the value of this attribute is flow-based and \n          cannot be changed. In case of regular and default flows Fsp150 products\n          may support both port-based and flow-based shaping.')
cmFlowSTagMatchRxPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowSTagMatchRxPrio.setStatus('current')
if mibBuilder.loadTexts: cmFlowSTagMatchRxPrio.setDescription("This object indicates whether the S-TAG  priority\n          is used or ignored for traffic in the N2A direction.\n          This is only applicable if  cmFlowSTagControl\n          is 'push'.\n\n          This object is not applicable for Tranparent Flow; the value should be FALSE.")
cmFlowAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 48), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowAutoBandwidthConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowAutoBandwidthConfigEnabled.setDescription('This object is applicable for Flows on the PWE3 Ethernet Backplane Port.\n          When set to TRUE bandwidth of this Flow will be automatically adjusted when\n          PWE3 SATOPs are provisioned. The bandwidth will be adjusted based on the\n          TDM entities of associated SATOPs.\n          Flow on ports other than PWE3 Ethernet Backplane Port will always have\n          this value set to FALSE and it is not configurable.')
cmFlowPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 49), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPort1.setStatus('current')
if mibBuilder.loadTexts: cmFlowPort1.setDescription('This object specifies a physical or logical port on the Access side of the \n          Flow. This can be Access Port, Access LAG or Access Split Horizion Group.\n          \n          In case of Tranparent Flow this object specifies port1 of the Flow which is\n          Network-1.')
cmFlowPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 50), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPort2.setStatus('current')
if mibBuilder.loadTexts: cmFlowPort2.setDescription('This object specifies a physical or logical port on the Network side of the \n          Flow. This can be Network Port, Network LAG, Network Split Horizion Group\n          ERP or Protection Group.\n\n          In case of Tranparent Flow this object specifies port2 of the Flow which is\n          Network-2.')
cmFlowPolicingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 51), PolicingControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPolicingControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowPolicingControl.setDescription('This object specifies the direction(s) in which Poling is enabled on traffic \n          within this Flow when cmFlowPolicingEnabled is TRUE.')
cmFlowAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowAutoCIRPercentage.setStatus('current')
if mibBuilder.loadTexts: cmFlowAutoCIRPercentage.setDescription('This object specifies the percentage of available CIR on the Network \n          ports assigned to this Flow when cmFlowAutoBandwidthConfigEnabled is TRUE.  \n          The flow guaranteedBW is set to available BW multiplied by this value.\n          This object is only applicable to Tranparent Flow.\n          The value of this object should be 0 for Access Flow.')
cmFlowLoopAvoidanceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 53), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowLoopAvoidanceObject.setStatus('current')
if mibBuilder.loadTexts: cmFlowLoopAvoidanceObject.setDescription('This object specifies the Loop Avoidance instance to which this Flow belongs.\n           This object is appicable only for Transparent Flow and should point to the\n           ERP instance for which this Flows carries pass-thru traffic.\n           \n           In case of Access Flow the value of this object should be zeroDotZero.')
cmFlowConfigType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 54), FlowConfigType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowConfigType.setStatus('current')
if mibBuilder.loadTexts: cmFlowConfigType.setDescription('This object specifies if this Flow is an Access Flow or Pass-thru Flow.')
cmFlowN2NForwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 55), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowN2NForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowN2NForwardingEnabled.setDescription('This object is used to specify whether n2n forwarding \n           is enabled on particular Flow.')
cmFlowA2NMulticastRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitControl.setDescription('Whether multicast frames are limited per Flow.')
cmFlowA2NMulticastRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitLo.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NMulticastRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the low-order 32-bits.')
cmFlowA2NMulticastRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 58), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NMulticastRateLimitHi.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NMulticastRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the high-order 32-bits.')
cmFlowA2NBroadcastRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitControl.setDescription('Whether broadcast frames are limited per Flow.')
cmFlowA2NBroadcastRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 60), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitLo.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NBroadcastRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the low-order 32-bits.')
cmFlowA2NBroadcastRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NBroadcastRateLimitHi.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NBroadcastRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the high-order 32-bits.')
cmFlowA2NCombinedRateLimitControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitControl.setDescription('Whether both multicast and broadcast frames are limited per Flow.')
cmFlowA2NCombinedRateLimitLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitLo.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NCombinedRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the low-order 32-bits.')
cmFlowA2NCombinedRateLimitHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 64), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowA2NCombinedRateLimitHi.setDescription('The rate limit for multicast packets per Flow.\n         When cmFlowA2NCombinedRateLimiteControl is set and value is 0,\n         then all multicast frames are dropped.\n\n         This object represents the high-order 32-bits.')
cmFlowRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 65), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmFlowRefPrioMapProfile.setDescription("This object used to specify the flow's profile.")
cmFlowRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 66), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefEoMplsPwObject.setStatus('current')
if mibBuilder.loadTexts: cmFlowRefEoMplsPwObject.setDescription('This object specifies EoMpls Pw object OID.')
cmFlowRefN2APrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 67), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefN2APrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmFlowRefN2APrioMapProfile.setDescription("This object used to specify the flow's N2A direction profile.")
cmFlowSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowSecureBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowSecureBlockingEnabled.setDescription('This object can be used to enable/disable secure block.')
cmFlowRefConnectGuardFlowList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 69), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowRefConnectGuardFlowList.setStatus('current')
if mibBuilder.loadTexts: cmFlowRefConnectGuardFlowList.setDescription('This object specifies the secure flow list, \n           it should be f3ConnectGuardFlowIndex value list split with comma.')
cmFlowSecureStateList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 70), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowSecureStateList.setStatus('current')
if mibBuilder.loadTexts: cmFlowSecureStateList.setDescription('This object specifies the secure state list, \n           it should be secure state value list and split with comma.\n           For detailed description how to identify values, please see \n           FlowSecState in CM-COMMON-MIB.')
cmFlowIndependentA2NShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 71), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowIndependentA2NShaperBW.setStatus('current')
if mibBuilder.loadTexts: cmFlowIndependentA2NShaperBW.setDescription('This object used to specify the flow related A2N shaper BW whether independent.')
cmFlowWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 72), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowWfqSegmentationCOS.setDescription('This object used to specify the flow related wfq segmentation COS value.')
cmFlowWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 73), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowWfqGroupCOS.setDescription('This object used to specify the flow related wfq group COS value.')
cmFlowWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 74), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowWfqGroupEirLo.setDescription('This object used to specify the flow related wfq group EIR low 32 bits value.')
cmFlowWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 4, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowWfqGroupEirHi.setDescription('This object used to specify the flow related wfq group EIR high 32 bits value.')
cmFlowCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5), )
if mibBuilder.loadTexts: cmFlowCpdTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdTable.setDescription('A list of entries corresponding to Flow \n             Control Protocol Disposition.\n             This table is only\n             applicable for FSP150CM Hub Shelf Release 3.x.')
cmFlowCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmFlowCpdIndex"))
if mibBuilder.loadTexts: cmFlowCpdEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdEntry.setDescription('A conceptual row in the cmFlowCpdTable. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Network Port.')
cmFlowCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this CPD Service Entry.')
cmFlowCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdFilterType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdFilterType.setDescription('This enables specification of type of CPD Filter.')
cmFlowCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdFilterDescr.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdFilterDescr.setDescription('This provides description of CPD Filter.')
cmFlowCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdDispType.setDescription('This enables specification of disposion type of CPD Filter.')
cmFlowCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdMacAddressMatch.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdMacAddressMatch.setDescription('This enables provides the Filter MAC Address to match.')
cmFlowCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdMacAddressMask.setDescription('This enables provides the Filter MAC Address Mask to match.')
cmFlowCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdEthertype.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdEthertype.setDescription('This enables provides the Filter Ethertype to match.')
cmFlowCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdEthertypeMask.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdEthertypeMask.setDescription('This enables provides the Filter Ethertype Mask to match.')
cmFlowCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdSubtype.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdSubtype.setDescription('This enables provides the Filter Subtype to match.')
cmFlowCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdSubtypeMask.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdSubtypeMask.setDescription('This enables provides the Filter Subtype Mask to match.')
cmQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6), )
if mibBuilder.loadTexts: cmQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperTable.setDescription('A list of entries corresponding to Ethernet Quality of Service \n             Shaper for configuration purposes.')
cmQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperIndex"))
if mibBuilder.loadTexts: cmQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperEntry.setDescription('A conceptual row in the cmQosShaperTable. \n             These entries represent a Quality of Service Shaper.')
cmQosShaperTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperTypeIndex.setDescription("The unique index value corresponding to a Quality of Service \n           Shaper's direction.\n           Values 1 and 2 are applicable to the Access Flow Shaper:\n           - value of 1 stands for A2N direction,\n           - value of 2 stands for N2A direction.\n           Values 3 and 4 are applicable to Pass-thru Flow Shaper (new in 5.6CC release):\n           - value of 3 stands for N1toN2 direction\n           - value of 4 stands for N2toN1 direction\n           ")
cmQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperIndex.setDescription('The unique integer index value corresponding to a \n             Quality of Service Shaper.\n             \n             In release 5.6CC the range is extended to 1..16 to support duplicate\n             A2N shapers on a Flow. The duplicate shapers are created under a Flow \n             if network interface of the Flow is ERP Group or Split Horizon Group. \n             In case of multi-cos Flow indices 1..8 represent shapers of COS 0..7 \n             going to Network 1 port; indices 9..16 represent shapers for COS 0..7 \n             going to Network 2 port.\n             In case of single-cos Flow index 1 represents shaper going to Network 1\n             port; index 9 represents shaper going to Network 2 port.\n             ')
cmQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 3), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperDirection.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperDirection.setDescription('The direction of the Quality of Service Shaper.')
cmQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
cmQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperOperationalState.setDescription('This object represents the Operational State of the QOS Shaper.')
cmQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS Shaper.')
cmQosShaperCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCIR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperCIR.setDescription('This object represents the Commited Information\n          Rate(CIR) (Lower 32 bits)of a Shaper.')
cmQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) of the Shaper.')
cmQosShaperEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEIR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperEIR.setDescription('This object represents the Excess Information\n          Rate(EIR) (Lower 32 bits) of a Shaper.')
cmQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) of the Shaper.')
cmQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
cmQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStorageType.setDescription('The type of storage configured for this entry.')
cmQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosShaperRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosShaperRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosShaperRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperCOS.setDescription('This object provides the COS (Class of Service)\n             value for the QOS Shaper.')
cmQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) (Higher 32 bits) of a Shaper.')
cmQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
cmQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperSoamCIRLo.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Lower 32 bits) of a Shaper.')
cmQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperSoamCIRHi.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Higher 32 bits) on the Shaper.')
cmQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperSoamEIRLo.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Lower 32 bits) of a Shaper.')
cmQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperSoamEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperSoamEIRHi.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Higher 32 bits) on the Shaper.')
cmQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredGreenMinQueueThreshold.setDescription('This object represents the Wred green packet min queue threshold value.')
cmQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredGreenMaxQueueThreshold.setDescription('This object represents the Wred green packet max queue threshold value.')
cmQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredGreenDropProbability.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredGreenDropProbability.setDescription('This object represents the Wred green packet drop probability.')
cmQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredYellowMinQueueThreshold.setDescription('This object represents the Wred yellow packet min queue threshold value.')
cmQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredYellowMaxQueueThreshold.setDescription('This object represents the Wred yellow packet max queue threshold value.')
cmQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperWredYellowDropProbability.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWredYellowDropProbability.setDescription('This object represents the Wred yellow packet drop probability.')
cmQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperAvgFrameSizeBeforeFragment.setDescription('This object specifies the average frame size before fragmentation.')
cmQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 6, 1, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperWfqWeight.setDescription('This object specifies the wfq weight value.')
cmEthernetNetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7), )
if mibBuilder.loadTexts: cmEthernetNetPortTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             Facilities for configuration purposes.')
cmEthernetNetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortEntry.setDescription('A conceptual row in the cmEthernetNetPortTable.')
cmEthernetNetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortIndex.setDescription('An integer index value used to uniquely identify\n             this Ethernet Network Port within a card.\n             Note that each Ethernet Network Port is uniquely identified\n             by the indices neIndex, shelfIndex, \n             slotIndex, cmEthernetNetPortIndex.')
cmEthernetNetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortIfIndex.setDescription('This object has the same value as ifIndex for \n             Ethernet Network Port.  An integer index value used to \n             uniquely identify this Ethernet Network Port.')
cmEthernetNetPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
cmEthernetNetPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortAdminState.setDescription('This object represents the Administrative State of the Ethernet \n             Network Port.')
cmEthernetNetPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOperationalState.setDescription('This object represents the Operational State of the Ethernet \n             Network Port.')
cmEthernetNetPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSecondaryState.setDescription('This object represents the Secondary State of the Ethernet \n             Network Port.')
cmEthernetNetPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMTU.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortMTU.setDescription('This object provides the MTU on the Ethernet Network Port.')
cmEthernetNetPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortMediaType.setDescription('This object represents the type of Ethernet Media on the \n             Ethernet Network Port.')
cmEthernetNetPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortConfigSpeed.setDescription('This object allows to configure the speed of the \n             Ethernet Network Port.')
cmEthernetNetPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortNegotiatedSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortNegotiatedSpeed.setDescription('This object provides the negotiated speed of the \n             Ethernet Network Port.')
cmEthernetNetPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortMDIXType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortMDIXType.setDescription('This object allows management of MDIX property on  \n             Ethernet Network Port.')
cmEthernetNetPortJumboFramesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortJumboFramesEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJumboFramesEnabled.setDescription('This object allows enabling/disabling jumbo frames support on \n             the Ethernet Network Port.  This object is only applicable for\n             Ethernet Network Port on R3.1CM NTU Card.')
cmEthernetNetPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpVendorName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpVendorName.setDescription('This object provides the vendor name of the SFP. \n             This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpPartNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpPartNumber.setDescription('This object provides the part number of the SFP. \n             This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpSerialNumber.setDescription('This object provides the serial number of the SFP.  \n             This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpDateOfManufacture.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpDateOfManufacture.setDescription('This object provides the date of manufacture of the SFP.\n             This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpConnectorValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpConnectorValue.setDescription('This object provides the SFP connector value.\n             This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 18), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInitiateDiag.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInitiateDiag.setDescription('This object allows to initiate Etherjack diagnosis on the\n             Ethernet Network Port.')
cmEthernetNetPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 19), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair1Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair1Cond.setDescription('This object provides diagnosis results for the cable Pair 1\n             on Ethernet Network Port.')
cmEthernetNetPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 20), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair2Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair2Cond.setDescription('This object provides diagnosis results for the cable Pair 2\n             on Ethernet Network Port.')
cmEthernetNetPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 21), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair3Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair3Cond.setDescription('This object provides diagnosis results for the cable Pair 3\n             on Ethernet Network Port.')
cmEthernetNetPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 22), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair4Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosePair4Cond.setDescription('This object provides diagnosis results for the cable Pair 4\n             on Ethernet Network Port.')
cmEthernetNetPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 23), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseAutoNegCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseAutoNegCond.setDescription('This object provides auto negotiation results of the diagnosis\n             test on Ethernet Network Port.')
cmEthernetNetPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 24), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseLpbkCond.setDescription('This object provides port loopback results of the diagnosis\n             test on Ethernet Network Port.')
cmEthernetNetPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 25), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseEfmLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseEfmLpbkCond.setDescription('This object provides remote EFM loopback results of the diagnosis\n             test on Ethernet Network Port.')
cmEthernetNetPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseResult.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseResult.setDescription('This object provides results of the diagnosis\n             test in string form on Ethernet Network Port.')
cmEthernetNetPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 27), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestStatus.setDescription('This object provides the current status of the diagnosis\n             test on Ethernet Access Port.')
cmEthernetNetPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnoseTestTime.setDescription('This object provides the time when diagnosis test was last executed.')
cmEthernetNetPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 29), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the Ethernet Network Port.')
cmEthernetNetPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 30), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the Ethernet Network Port.')
cmEthernetNetPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the Ethernet Network Port.')
cmEthernetNetPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 32), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSwapSADA.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSwapSADA.setDescription('This object allows to specify whether or not the loopbacked\n             frame will have the Source Address and Destination Address\n             swapped.')
cmEthernetNetPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopbackMask.setDescription('This object allows specification of the outer VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Outer VLAN 1 Loopback Enabled\n                   2         Outer VLAN 2 Loopback Enabled\n                   4         Outer VLAN 3 Loopback Enabled\n              Value of 0 means that no VLANs are enabled.')
cmEthernetNetPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback1.setDescription('This object allows specification of the outer VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback2.setDescription('This object allows specification of the outer VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterVlanLoopback3.setDescription('This object allows specification of the outer VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopbackMask.setDescription('This object allows specification of the inner VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Inner VLAN 1 Loopback Enabled\n                   2         Inner VLAN 2 Loopback Enabled\n                   4         Inner VLAN 3 Loopback Enabled\n              Value of 0 means that no VLANs are enabled.')
cmEthernetNetPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback1.setDescription('This object allows specification of the inner VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback2.setDescription('This object allows specification of the inner VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInnerVlanLoopback3.setDescription('This object allows specification of the inner VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetNetPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetNetPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdEnabled.setDescription('This object allows enabling/disabling link loss forwarding \n              on the Ethernet Network Port.')
cmEthernetNetPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 42), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdSignalType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdSignalType.setDescription('This object allows definition of the link loss forwarding\n              signalling type.  This is applicable only if \n              cmEthernetNetPortLinkLossFwdEnabled is enabled.\n              This object is only valid for FSP150CM Release 3.1. \n              This object is deprecated henceforth. \n              Link Loss signalling will be supported using the object\n              cmEthernetAccPortLinkLossFwdTxActionType.')
cmEthernetNetPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 43), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTriggerTypes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTriggerTypes.setDescription('This object allows definition of the link loss forwarding\n              trigger types.  This is applicable only if \n              cmEthernetAccPortLinkLossFwdEnabled is enabled.')
cmEthernetNetPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdDelay.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdDelay.setDescription('This object allows specification of the delay between\n              detection of link loss and signalling of link loss forwarding. \n              Time specified is in seconds.')
cmEthernetNetPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 45), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdActive.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdActive.setDescription('This object provides the link loss forwarding status indicating\n              if link loss forwarding is currently being signaled via \n              the port.')
cmEthernetNetPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 46), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdPartnerEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdPartnerEnabled.setDescription('This object provides the indication of a link partners ability\n              to support link loss forwarding via EFM, i.e. from\n              received organization specific OAMPDUs.')
cmEthernetNetPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdLocalLinkId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdLocalLinkId.setDescription('This object allows configuration of the Local Link Id on \n              Ethernet Network port.')
cmEthernetNetPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 48), CmRemoteLinkIds()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRemoteLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRemoteLinkIds.setDescription('This object allows enabling/disabling Remote Link Ids \n              on Ethernet Network port. By setting the appropriate bit\n              positions, the Ethernet Network port is able to distinguish\n              the remote side client ports from the Remote Link Down\n              PDUs coming from remote end.')
cmEthernetNetPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamId.setDescription('OAM Id.  This is unique EFM OAM sublayer port id.')
cmEthernetNetPortOamAdminDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminDisposition.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminDisposition.setDescription("Ethernet Network Port's EFM OAM Administrative Disposition. \n              This object is applicable only for FSP150CM Release 3.1.\n              This object is deprecated henceforth.  \n              With FSP150CC Release 4.1, this property is managed using \n              the Control Protocol Disposition tables.")
cmEthernetNetPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 51), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamDiscoveryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamDiscoveryState.setDescription("Ethernet Network Port's OAM discovery state.")
cmEthernetNetPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 52), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalVarRtrvsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Network Port supports sending variable response OAMPDUs.')
cmEthernetNetPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalLinkEventsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Network Port supports interpreting Link Events.')
cmEthernetNetPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalOamLoopbacksSupported.setDescription('This object allows specification of whether the Ethernet\n              Network Port is capable of OAM remote loopback mode.')
cmEthernetNetPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalUnidirSupportEnabled.setDescription('This object allows specification of whether the Ethernet\n              Network Port is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetNetPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMaxPDUSize.setDescription('This object represents the largest OAMPDU, in octets, \n              supported by the Ethernet Network Port.  This value is\n              compared to the remote Maximum PDU Size and the smaller of \n              the two is used.')
cmEthernetNetPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 57), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamLocalMode.setDescription('This object allows to configure the OAM sublayer entity in\n              either Active or Passive mode.')
cmEthernetNetPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 58), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address.')
cmEthernetNetPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 59), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteVarRtrvsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports sending variable response OAMPDUs.')
cmEthernetNetPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 60), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteLinkEventsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports interpreting Link Events.')
cmEthernetNetPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 61), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteOamLoopbacksSupported.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports OAM remote loopback mode.')
cmEthernetNetPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 62), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteUnidirSupportEnabled.setDescription('This object allows retrieval of whether the remote \n              OAM entity is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetNetPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMaxPDUSize.setDescription('This object allows retrieval of the remote OAM \n              entity maximum OAMPDU size.')
cmEthernetNetPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 64), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamRemoteMode.setDescription('This object allows to retrieve whether the remote OAM \n              sublayer entity is either in Active or Passive mode.')
cmEthernetNetPortRxPauseDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 65), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxPauseDisposition.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortRxPauseDisposition.setDescription('This object allows enabling/disabling receive pause frames on\n          Ethernet Network port.  This object is not applicable \n          for FSP150CC Release 4.1 products.')
cmEthernetNetPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 66), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxPauseEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTxPauseEnabled.setDescription('This object allows enabling/disabling transmit pause frames on\n          Ethernet Network port.\n          This object is not applicable for FSP150CC Release 4.1 products.')
cmEthernetNetPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 67), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAfpType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortAfpType.setDescription('This object allows specification of the Acceptable Frame Policy on\n          Ethernet Network port. Users can specify whether the port supports\n          only tagged frames, only untagged frames or both tagged and \n          untagged frames.\n          This object is not applicable for FSP150CC Release 4.1 products.')
cmEthernetNetPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 68), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortMDIXStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortMDIXStatus.setDescription('This object provides the current MDIX status of the \n          Ethernet Network port.')
cmEthernetNetPortSfpReach = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpReach.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpReach.setDescription('This object provides the SFP Reach in meters.\n          This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpLaserWaveLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpLaserWaveLength.setDescription('This object provides the SFP Laser Wave Length in nano meters.\n          This is applicable only when cmEthernetNetPortMediaType is fiber.')
cmEthernetNetPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 71), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpMediaType.setDescription('This object provides the SFP Media Type.\n          This is applicable when cmEthernetNetPortMediaType is fiber or coppersfp.')
cmEthernetNetPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 72), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOamEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamEnabled.setDescription('This object allows to manage the EFM OAM on Ethernet Network Port.')
cmEthernetNetPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 73), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOamAdminState.setDescription('This object provides the EFM OAM Admin State.')
cmEthernetNetPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortShapingEnabled.setDescription('This object allows to manage the Network Port Shaping.\n          When enabled, values in cmEthernetNetPortShapedSpeedLo and\n          cmEthernetNetPortShapedSpeedHi are applicable.')
cmEthernetNetPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 75), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedLo.setDescription('This object allows to specify the lower 32 bits of \n          the Network Port Shaped speed. This value is applicable\n          when cmEthernetNetPortShapingEnabled is enabled.')
cmEthernetNetPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 76), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortShapedSpeedHi.setDescription('This object allows to specify the higher 32 bits of \n          the Network Port Shaped speed. This value is applicable\n          when cmEthernetNetPortShapingEnabled is enabled.')
cmEthernetNetPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 77), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortQinQEtherType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortQinQEtherType.setDescription('This object allows to specify the Q-in-Q Ether Type \n          on the Network Port.  Setting this value to 0 will disable\n          the Q-in-Q override on the Network Port.')
cmEthernetNetPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 78), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTxActionType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdTxActionType.setDescription("This object allows to specify the Network Port's behavior when\n          link loss forwarding trigger events occur on the Access Port.")
cmEthernetNetPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 79), CmRemoteLinkIds()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRxRLDLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLinkLossFwdRxRLDLinkIds.setDescription('This object provides the received Remote Link IDs in \n          EFM RLD messages on the Network Port.')
cmEthernetNetPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 80), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAutoDiagEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortAutoDiagEnabled.setDescription('This object allows to enable or disable the automatic \n          Cable Diagnostic tests when the cable is removed from the port.')
cmEthernetNetPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 81), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSyncEEnabled.setDescription("This object allows to specify whether the Ethernet Network Port \n          can be enabled/disabled for Synchronous Ethernet. This object\n          is only applicable for Synchronous Ethernet capable ports.\n          When enabled, on receive side \n            -port can extract the frequency of its input signal\n             and pass the recovered clock to the system clock\n            -port processes the ESMC(Ethernet Synchronization Messaging\n             Channel) and extracts the QL (when also QL enabled)   \n            -port is eligible to be selected as a system clock reference\n          When enabled, on transmit side \n            -port's transmit clock is locked to the system clock\n            -port generates an ESMC to generate a QL (when also QL enabled)\n\n          When disabled, on receive side,\n            -port does not pass the recovered clock to the system clock \n            -port does not process the ESMC (if present) \n            -port is not eligible to be selected as a \n                     system clock reference\n          When disabled, on transmit side \n            -port's output frequency may be synchronized to the system clock\n            -port does not generate an ESMC.")
cmEthernetNetPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 82), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortQLModeEnabled.setDescription('This object allows to specify whether the Ethernet Network Port \n          can be enabled/disabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetNetPortQLModeEnabled is set to true.\n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
cmEthernetNetPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 83), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpectedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortExpectedQL.setDescription("This object allows to specify the expected QL when the \n          Ethernet Network Port is enabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetNetPortQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the port. The valid values\n          depend upon the SYNC entity's Network Clock Type. A value of\n          None represents that a minimum Quality Level is not expected. \n          The default value shall be None.")
cmEthernetNetPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 84), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAssumedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          Ethernet Network Port. This object is only applicable for \n          Synchronous Ethernet capable ports. \n          The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          port's QL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
cmEthernetNetPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 85), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortReceivedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortReceivedQL.setDescription("This object provides the Received QL value for the Ethernet port. \n          If the Ethernet port's QL Mode is disabled, then the received \n          QL value is not applicable.This object is only applicable for \n          Synchronous Ethernet capable ports.")
cmEthernetNetPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 86), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortTransmitQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTransmitQL.setDescription("This object provides the Transmitted QL value for the Ethernet port. \n          If the Ethernet port's QL Mode is disabled, then the received \n          QL value is not applicable. This object is only applicable for \n          Synchronous Ethernet capable ports.")
cmEthernetNetPortPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 87), PriorityMapMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPrioMapMode.setDescription('This object provides the  Priority Mapping Mode used for\n          classification of frames.')
cmEthernetNetPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 88), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortDeiEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortDeiEnable.setDescription('This is a port level control to reset the DEI \n         (Drop Eligibility Indicator) bit in the S-Tag,\n         if the downstream equipment supports S-Tag TPID (EtherType) but \n         cannot handle DEI bit set. In the receive direction,\n         it uses the S-TAG DEI when enabled, else ignores it.\n         The following comment is NOT relevant to OSA8.1.1, \n         since this object is still supported by OSA8.1.1.   \n         The object has been deprecated.\n         The respective configuration should be managed\n         by following objects:\n         cmEthernetNetPortRxDeiAction, cmEthernetNetPortTxDeiAction,\n         cmEthernetNetPortRxDeiOuterTagType, cmEthernetNetPortTxDeiOuterTagType.')
cmEthernetNetPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 89), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEEncType.setDescription('This is a port level control that specifies the mode of drop\n         eligibility encoding in PCP bits of the VLAN tag.')
cmEthernetNetPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 90), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPcpDEPairsAction.setDescription('This object allows the SNMP user to manage the Priority \n         Code Point (PCP) Drop Eligibility Pairs.  When the\n         cmEthernetNetPortPcpDEEncType is of type 7p1d, 6p2d, 5p3d,\n         the cmNetPortPcpDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetNetPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 91), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSSMRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSSMRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address, when\n              the port is peering using SSM.')
cmEthernetNetPortXgePhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 92), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXgePhyType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXgePhyType.setDescription("This object allows to specify the PHY type of 10G Ethernet Port.\n         10G ports can operate in LAN-PHY or WAN-PHY mode. The default mode is LAN-PHY\n         and port rate in this mode is 10Gbps. In WAN-PHY mode the port rate is 9.29Gbps.\n         This attribute is only applicable for ports configured to work at speed-10G-full.\n         For other speeds the value of this object must be 'not-applicable' and cannot\n         be changed.\n        ")
cmEthernetNetPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 93), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacControlEnabled.setDescription('This object allows to Enable/Disable the Net Port Source MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetNetPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 94), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacControlEnabled.setDescription('This object allows to Enable/Disable the Net Port Destination MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetNetPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 95), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackSourceMacAddress.setDescription('This object allows to set Net Port Source MAC Address for frame \n          matching when Net Port Source MAC Control is enabled.')
cmEthernetNetPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 96), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackDestMacAddress.setDescription('This object allows to set Net Port Destination MAC Address for frame \n          matching when Net Port Destination MAC Control is enabled.')
cmEthernetNetPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 97), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackBlockingEnabled.setDescription('This object allows frame blocking when loopback is active.\n         - True: Blocks frames in the non-loopback direction \n           that match the PORT or VLAN received in the \n           non-loopback direction. Discards  frames \n           in the loopback direction that match \n           the PORT or VLAN, but do not match \n           the MAC address criteria,\n         - False: No blocking of  frames.')
cmEthernetNetPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 98), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiAction.setDescription('This object allows to specify\n              the Receive DEI Action.')
cmEthernetNetPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 99), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiAction.setDescription('This object allows to specify\n              the Transmit DEI Action.')
cmEthernetNetPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 100), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortRxDeiOuterTagType.setDescription('This object allows to specify\n              the Receive DEI Outer Tag Type.')
cmEthernetNetPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 101), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTxDeiOuterTagType.setDescription('This object allows to specify\n              the Transmit DEI Outer Tag Type.')
cmEthernetNetPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 102), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLaserWDMChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLaserWDMChannel.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetNetPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 103), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLaserIsTunable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLaserIsTunable.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetNetPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 104), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortLaserFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLaserFrequency.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetNetPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 105), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortMediaTypeAutoSelected.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortMediaTypeAutoSelected.setDescription('This object provides the auto selected Ethernet Media of the\n             Ethernet Network Port.')
cmEthernetNetPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 106), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLowLatencyQueuingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLowLatencyQueuingEnabled.setDescription('This object allows to Enable/Disable the Low Latency Queuing on\n             the Ethernet Network Port.')
cmEthernetNetPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 107), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosticMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortDiagnosticMacAddress.setDescription('This object describes the diagnose mac address for SAT, ECPA, JDSU, Loopback with Override SA etc.')
cmEthernetNetPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 108), VlanTagType().clone('outer-vlantag')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIngressCOSPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortIngressCOSPriority.setDescription('Indicates the VLAN tag to use for PCP Priority to COS mapping \n              when the port Priority Map Mode is 802.1p. Supported values are\n              inner-vlantag and outer-vlantag. This attribute is only applicable\n              on products when Flowpoint Model is supported.\n             \n              inner-vlantag: The inner VLAN tag PCP Priority of a frame is \n              used for ingress COS mapping. A frame with no inner VLAN tag \n              (untagged or single-tagged) will have a COS equal to the default\n              COS of the port.\n\n              outer-vlantag: The outer VLAN tag PCP Priority of a frame  is used \n              for ingress COS mapping. A frame with no outer VLAN tag (untagged) \n              will have a COS equal to the default COS of the port.\n\n              This attribute has been deprecated and is not supported.  Now,\n              the Priority Map Mode indicates whether it is inner or outer.\n              Use priomap-8021p(4) for outer and priomap-8021p-inner(5)\n              for inner.  ')
cmEthernetNetPortDefaultCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortDefaultCOS.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortDefaultCOS.setDescription("The COS assigned to a frame that does not have a valid COS identifier \n              for the Priority Map Mode of the port. This attribute is only applicable\n              on products when Flowpoint Model is supported.\n             \n              This value is assigned to a frame received on a port when:\n              - the cmEthernetNetPortPrioMapMode=priomap-8021p, ingressCOSPriority=inner-vlantag; \n                and the frame is untagged\n              - the cmEthernetNetPortPrioMapMode=priomap-8021p, ingressCOSPriority=inner-vlantag;\n                and the frame has a single VLAN tag\n              - the cmEthernetNetPortPrioMapMode=priomap-8021p, ingressCOSPriority=outer-vlantag; \n                and the frame is untagged\n              - the cmEthernetNetPortPrioMapMode=priomap-dscp; and the frame does not have an IP ethertype\n              - the cmEthernetNetPortPrioMapMode=priomap-tos; and the frame does not have an IP ethertype.\n\n              This attribute has been deprecated and is not supported. The\n              Default COS is determined from the flowpoint's associated\n              Priority Mapping Profle.")
cmEthernetNetPortTrafficModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 110), EthernetPortTrafficModel().clone('accessFlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTrafficModel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTrafficModel.setDescription('The Traffic Management connection model available for the port.\n              - accessFlow: NID Traffic Connection model.\n              - flowpoint: Multipoint and Aggregation Traffic Connection model.')
cmEthernetNetPortIndependentShaperBW = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 111), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIndependentShaperBW.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortIndependentShaperBW.setDescription('This object describes the shaper BW whether independent.')
cmEthernetNetPortExpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 112), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortExpDEEncType.setDescription('This is a port level control that specifies the mode of drop\n         eligibility encoding in exp bits of the VLAN tag.')
cmEthernetNetPortExpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 113), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortExpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortExpDEPairsAction.setDescription('This object allows the SNMP user to manage the Priority \n         Code Point (PCP) Drop Eligibility Pairs.  When the\n         cmEthernetNetPortExpDEEncType is of type 7p1d, 6p2d, 5p3d,\n         the cmNetPortExpDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetNetPortIpPrecDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 114), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEEncType.setDescription('This is a port level control that specifies the mode of drop\n         eligibility encoding in Ip Prec bits of the VLAN tag.')
cmEthernetNetPortIpPrecDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 115), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortIpPrecDEPairsAction.setDescription('This object allows the SNMP user to manage the Ip Prec Drop Eligibility Pairs.  When the\n         cmEthernetNetPortIpPrecDEEncType is of type 7p1d, 6p2d, 5p3d,\n         the cmNetPortIpPrecDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetNetPortEncapPcpDEEncodingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 116), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEEncodingType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEEncodingType.setDescription('This is a port level control the mode of drop\n         eligibility encoding in PCP bits of the VLAN tag in encapsulation header.')
cmEthernetNetPortEncapPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 117), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortEncapPcpDEPairsAction.setDescription('This object allows the SNMP user to manage the Priority \n         Code Point (PCP) Drop Eligibility Pairs.  When the\n         cmEthernetNetPortEncapPcpDEEncodingType is of type 7p1d, 6p2d, 5p3d,\n         the cmNetPortEncapPcpDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetNetPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 118), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJdsuLoopbackSrcIp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJdsuLoopbackSrcIp.setDescription('This object is applicable when there is jdsu l3 loopback.')
cmEthernetNetPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 119), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortWfqSegmentationCOS.setDescription('This object is used to specify the wfq segmentation COS value.')
cmEthernetNetPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 120), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupCOS.setDescription('This object is used to specify the wfq group COS value.')
cmEthernetNetPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 121), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirLo.setDescription('This object is used to specify the wfq group eir low 32 bits value.')
cmEthernetNetPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 122), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortWfqGroupEirHi.setDescription('This object is used to specify the wfq group eir high 32 bits value.')
cmEthernetNetPortSilentStartControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 123), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortSilentStartControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSilentStartControl.setDescription('Allows enabling/disabling of silent start.')
cmEthernetNetPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpLinkLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpLinkLength.setDescription('This object provides the SFP Link Length.\n          This is applicable only when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetNetPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 125), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpidOverride.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpidOverride.setDescription('This object allows enabling/disabling of Outer Tag TPID override.\n          When enabled, values in Outer Tag TPID is applicable on egress\n          Ethernet Network Port.')
cmEthernetNetPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 126), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortOuterTagTpid.setDescription('This object allows to specify the egress Outer Tag TPID \n          on the Ethernet Network Port.')
cmEthernetNetPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 127), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpName.setDescription('This object provides the official name of the SFP.')
cmEthernetNetPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 128), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpHardwareRevision.setDescription('This object provides the hardware revision of the SFP.')
cmEthernetNetPortPersistentLoopbackControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 129), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPersistentLoopbackControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPersistentLoopbackControl.setDescription('This object allows enabling/disabling of Persistent Loopback Control.\n          The loopback configuration parameters do not survive restart as typically \n          maintenance actions are not persist. Setting this attribute to true shall \n          persist the loopback configuration parameters. When it is set to false the\n          loopback configuration parameters shall not survive a restart.')
cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 130), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl.setDescription('Control that enables/disables Test Reflector IPv4 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetNetPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 131), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv4Address.setDescription('This is the Test Reflector Interface IPv4 address.')
cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 132), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl.setDescription('Control that enables/disables Test Reflector IPv6 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetNetPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 133), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortLoopbackTestReflectorIPv6Address.setDescription('This is the Test Reflector Interface IPv6 address.')
cmEthernetNetPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 7, 1, 134), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortSfpIdentifierValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortSfpIdentifierValue.setDescription('This object provides the SFP identifier value.')
cmEthernetNetPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8), )
if mibBuilder.loadTexts: cmEthernetNetPortCpdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             Control Protocol Disposition.\n             This table is only\n             applicable for FSP150CM Hub Shelf Release 3.x.')
cmEthernetNetPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortCpdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdEntry.setDescription('A conceptual row in the cmEthernetNetPortCpdTable. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Network Port.')
cmEthernetNetPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             this CPD Service Entry.')
cmEthernetNetPortCpdFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 2), CmControlProtocolFilterType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterType.setDescription('This enables specification of type of CPD Filter.')
cmEthernetNetPortCpdFilterDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterDescr.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdFilterDescr.setDescription('This provides description of CPD Filter.')
cmEthernetNetPortCpdDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdDispType.setDescription('This enables specification of disposion type of CPD Filter.')
cmEthernetNetPortCpdMacAddressMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMatch.setDescription('This enables provides the Filter MAC Address to match.')
cmEthernetNetPortCpdMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 6), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdMacAddressMask.setDescription('This enables provides the Filter MAC Address Mask to match.')
cmEthernetNetPortCpdEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertype.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertype.setDescription('This enables provides the Filter Ethertype to match.')
cmEthernetNetPortCpdEthertypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertypeMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdEthertypeMask.setDescription('This enables provides the Filter Ethertype Mask to match.')
cmEthernetNetPortCpdSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtype.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtype.setDescription('This enables provides the Filter Subtype to match.')
cmEthernetNetPortCpdSubtypeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 8, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtypeMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdSubtypeMask.setDescription('This enables provides the Filter Subtype Mask to match.')
cmEthernetMgmtPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9), )
if mibBuilder.loadTexts: cmEthernetMgmtPortTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortTable.setDescription('A list of entries corresponding to Ethernet Management Port \n             Facilities for configuration purposes.')
cmEthernetMgmtPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"))
if mibBuilder.loadTexts: cmEthernetMgmtPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortEntry.setDescription('A conceptual row in the cmEthernetMgmtPortTable.')
cmEthernetMgmtPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortIndex.setDescription('An integer index value used to uniquely identify\n             this Ethernet Management Port within a card.\n             Note that each Ethernet Management Port is uniquely identified\n             by the indices neIndex, shelfIndex, \n             slotIndex, cmEthernetMgmtPortIndex.')
cmEthernetMgmtPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 2), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
cmEthernetMgmtPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortAdminState.setDescription('This object represents the Administrative State of the Ethernet \n             Management Port.')
cmEthernetMgmtPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortOperationalState.setDescription('This object represents the Operational State of the Ethernet \n             Management Port.')
cmEthernetMgmtPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortSecondaryState.setDescription('This object represents the Secondary State of the Ethernet \n             Management Port.')
cmEthernetMgmtPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMTU.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortMTU.setDescription('This object provides the MTU on the Ethernet Management Port.')
cmEthernetMgmtPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 7), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortConfigSpeed.setDescription('This object allows to configure the speed of the \n             Ethernet Management Port.')
cmEthernetMgmtPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 8), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortNegotiatedSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortNegotiatedSpeed.setDescription('This object provides the negotiated speed of the \n             Ethernet Management Port.')
cmEthernetMgmtPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 9), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXType.setDescription('This object allows management of MDIX property on  \n             Ethernet Management Port.')
cmEthernetMgmtPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 10), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortMDIXStatus.setDescription('This object provides the current MDIX status of the \n          Ethernet Management port.')
cmEthernetMgmtPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 9, 1, 11), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetMgmtPortMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetMgmtPortMediaType.setDescription('This object represents the type of Ethernet Media on the \n             Ethernet Management Port.')
cmPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10), )
if mibBuilder.loadTexts: cmPrioMapTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings\n             in multi Class of Service (COS) mode. This table is applicable\n             only when the Access Port is in connection-oriented evpl mode.')
cmPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapIndex"))
if mibBuilder.loadTexts: cmPrioMapEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapEntry.setDescription('A conceptual row in the cmPrioMapTable.')
cmPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapIndex.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapIndex.setDescription('The integer index value corresponding to a priority value\n             based on the cmEthernetAccPortPrioMapMode.\n             In case of TOS and 8021P, valid indices are 1 to 8,\n             in case of DSCP, valid indices are 1 to 64.')
cmPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapInPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapInPriority.setDescription('The integer index value corresponding to a priority value\n             based on the cmEthernetAccPortPrioMapMode.\n             In case of TOS and 8021P, valid indices are 0 to 7,\n             in case of DSCP, valid indices are 0 to 63.')
cmPrioMapXTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapXTagControl.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapXTagControl.setDescription('This allows specification of whether the priority of\n             incoming X-TAG should be swapped with cmPrioMapXTagPriority.')
cmPrioMapXTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapXTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapXTagPriority.setDescription("This allows specification of the VLAN priority that\n             will replace the incoming X-TAG's priority.  This is\n             applicable with cmPrioMapXTagControl as 'swap'.")
cmPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapCOS.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmPrioMapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 6), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapOuterTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapOuterTagPriority.setDescription("This allows specification of the VLAN priority that\n             will replace the outgoing (A2N direction) outer-tag's priority.  \n             Note that, each flow participates or not in outer-tag \n             priority mapping, using the object 'cmFlowOuterTagPrioEnabled'.")
cmPrioMapInnerTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 10, 1, 7), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapInnerTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapInnerTagPriority.setDescription("This allows specification of the VLAN priority that\n             will replace the outgoing (A2N direction) inner-tag's (i.e. second tag) \n             priority.  Note that, each flow participates or not in inner-tag \n             priority mapping, using the object 'cmFlowInnerTagPrioEnabled'.")
cmQosFlowPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11), )
if mibBuilder.loadTexts: cmQosFlowPolicerTable.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerTable.setDescription('A list of entries corresponding to Ethernet Quality of Service \n         Policer for configuration purposes.')
cmQosFlowPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerIndex"))
if mibBuilder.loadTexts: cmQosFlowPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEntry.setDescription('A conceptual row in the cmQosFlowPolicerTable. \n          These entries represent a Quality of Service Policer.')
cmQosFlowPolicerTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerTypeIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerTypeIndex.setDescription("The unique index value corresponding to a Quality of Service \n             Policer's direction.\n             Values 1 and 2 are applicable to the Access Flow Policer\n              - value of 1 stands for A2N direction,\n              - value of 2 stands for N2A direction.\n             Values 3 and 4 are applicable to Pass-thru Flow Policer \n               (new in 5.6CC release):\n               - value of 3 stands for N1toN2 direction\n               - value of 4 stands for N2toN1 direction\n           ")
cmQosFlowPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerIndex.setDescription('The Policer Index that represents the COS level.  This\n             is applicable in case of a Multi COS flow. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on. \n\n             In release 5.6CC the range is extended to 1..16 to support duplicate\n             N2A policers on a Flow. The duplicate policers are created under a Flow \n             if network interface of the Flow is ERP Group or Split Horizon Group. \n             In case of multi-cos Flow indices 1..8 represent policers of COS 0..7 \n             going from Network 1 port; indices 9..16 represent policers for COS 0..7 \n             going from Network 2 port.\n             In case of single-cos Flow index 1 represents policer going from Network 1\n             port; index 9 represents policer going from Network 2 port.\n             ')
cmQosFlowPolicerDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 3), TrafficDirection()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerDirection.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerDirection.setDescription("This object is allows specification of Policer direction as\n             'a2n' or 'n2a'.")
cmQosFlowPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerAdminState.setDescription('This object represents the Administrative State of \n             the QOS Flow Policer.')
cmQosFlowPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerOperationalState.setDescription('This object represents the Operational State of the QOS Flow Policer.')
cmQosFlowPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerSecondaryState.setDescription('This object represents the Secondary State of the QOS Flow Policer.')
cmQosFlowPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCIRLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the lower 32 bits of the\n          CIR.')
cmQosFlowPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCIRHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the upper 32 bits of the\n          CIR.')
cmQosFlowPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEIRLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the lower 32 bits\n          of the EIR.')
cmQosFlowPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEIRHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the upper 32 bits\n          of the EIR.')
cmQosFlowPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCBS.setDescription('This object allows specification of the Commited Burst Size\n          (CBS) on Policer.')
cmQosFlowPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEBS.setDescription('This object allows specification of the Excess Burst Size\n          (EBS) on the Policer.')
cmQosFlowPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 13), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerAlgorithm.setDescription("This object allows specification of Policer algorithm as\n           'srTCM' (Single Rate Triple Color Marking) or 'trTCM' (Two Rate\n           Triple Color Marking).")
cmQosFlowPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 14), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n           'color-aware' or 'color-blind'.")
cmQosFlowPolicerColorMarkingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 15), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerColorMarkingFlag.setStatus('deprecated')
if mibBuilder.loadTexts: cmQosFlowPolicerColorMarkingFlag.setDescription('This object allows specification of Policer Color Marking Flag.\n           The policer will set/clear the DEI (Drop Eligibility Indication) \n           bit of the frame on an S-TAG if this flag is enabled.\n           This object is not supported - setting any value will not have effect\n           on the System.')
cmQosFlowPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 16), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low.  Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
cmQosFlowPolicerAssociatedShaper = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 17), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerAssociatedShaper.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerAssociatedShaper.setDescription('This object allows specification of the QOS Shaper\n          associated with this Policer. Multiple Policers can map\n          to single Shaper. The corresponding row with the \n          specified QOS value must exist in \n          cmQosShaperTable when this value is specified.')
cmQosFlowPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 18), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStorageType.setDescription('The type of storage configured for this entry.')
cmQosFlowPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosFlowPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosFlowPolicerRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosFlowPolicerRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosFlowPolicerRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosFlowPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the high 32 bits.')
cmQosFlowPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerCIRMaxLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the lower 32 bits.')
cmQosFlowPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the high 32 bits.')
cmQosFlowPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEIRMaxLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the lower 32 bits.')
cmQosFlowPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 24), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerEnvelopeObject.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerEnvelopeObject.setDescription('This object allows specification of envelope object.')
cmQosFlowPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerRank.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerRank.setDescription('This object allows specification of rank value.')
cmQosFlowPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 11, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerPolicingEnabled.setDescription('This object describes whether the policing is enabled.')
cmAccPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12), )
if mibBuilder.loadTexts: cmAccPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Quality of Service Shaper for configuration purposes.\n             These shapers can be managed when the Access Port is\n             in evpl mode and are relevant for traffic in the\n             network to access direction.')
cmAccPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortQosShaperIndex"))
if mibBuilder.loadTexts: cmAccPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperEntry.setDescription('A conceptual row in the cmAccPortQosShaperTable. \n             These entries represent a Quality of Service Shaper.')
cmAccPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperIndex.setDescription('The unique integer index value corresponding to a \n             Quality of Service Shaper.')
cmAccPortQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 2), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperDirection.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperDirection.setDescription('The direction of the Quality of Service Shaper.')
cmAccPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
cmAccPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperOperationalState.setDescription('This object represents the Operational State of the QOS Shaper.')
cmAccPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS Shaper.')
cmAccPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperCIRLo.setDescription('This object represents the Commited Information\n          Rate(CIR) (Lower 32 bits)of a Shaper.')
cmAccPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) (Higher 32 bits) of a Shaper.')
cmAccPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperEIRLo.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
cmAccPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
cmAccPortQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) of the Shaper.')
cmAccPortQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) of the Shaper.')
cmAccPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
cmAccPortQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperCOS.setDescription('This object provides the COS (Class of Service)\n             value for the QOS Shaper.')
cmAccPortQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRLo.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Lower 32 bits)of a Shaper.')
cmAccPortQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperSoamCIRHi.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Higher 32 bits) of a Shaper.')
cmAccPortQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRLo.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Higher 32 bits) on the Shaper.')
cmAccPortQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperSoamEIRHi.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Higher 32 bits) on the Shaper.')
cmAccPortQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMinQueueThreshold.setDescription('This object represents the Wred green packet min queue threshold value.')
cmAccPortQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenMaxQueueThreshold.setDescription('This object represents the Wred green packet max queue threshold value.')
cmAccPortQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenDropProbability.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredGreenDropProbability.setDescription('This object represents the Wred green packet drop probability.')
cmAccPortQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMinQueueThreshold.setDescription('This object represents the Wred yellow packet min queue threshold value.')
cmAccPortQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowMaxQueueThreshold.setDescription('This object represents the Wred yellow packet max queue threshold value.')
cmAccPortQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowDropProbability.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWredYellowDropProbability.setDescription('This object represents the Wred yellow packet drop probability.')
cmAccPortQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperAvgFrameSizeBeforeFragment.setDescription('This object specifies the average frame size before fragmentation.')
cmAccPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 12, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperWfqWeight.setDescription('This object specifies the wfq weight value.')
cmEthernetAccPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13), )
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Table.setDescription('A list of entries corresponding to Ethernet Access Port \n             Control Protocol Disposition (CPD) V2.  This support of\n             CPD is provided on the GE206/GE201 device.')
cmEthernetAccPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Entry.setDescription('A conceptual row in the cmEthernetAccPortCpdV2Table. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Access Port.')
cmEthernetAccPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Index.setDescription('Unique Index value to access the CPD row.')
cmEthernetAccPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmEthernetAccPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmEthernetAccPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmEthernetAccPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmEthernetAccPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmEthernetAccPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmEthernetAccPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmEthernetAccPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmEthernetAccPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmEthernetAccPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmEthernetAccPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmEthernetAccPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmEthernetAccPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmEthernetAccPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmEthernetAccPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmEthernetAccPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmEthernetAccPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmEthernetAccPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmEthernetAccPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmEthernetAccPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2BridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmEthernetAccPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmEthernetAccPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmEthernetAccPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmEthernetAccPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:21).')
cmEthernetAccPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmEthernetAccPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LLDPDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2LLDPDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         LLDP (Link Layer Discovery Protocol) Disposition type. \n         MAC Address 01:80:C2:00:00:0e, 01:80:C2:00:00:03, or\n         01:80:C2:00:00:00.')
cmEthernetAccPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n         MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
cmEthernetAccPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTTunnelMac.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2L2PTTunnelMac.setDescription("Configurable Layer 2 Protocol Tunneling MAC Address.  \n         For protocols STP, CDP and VTP, with control protocol disposition as \n         pass-thru-l2pt, this configured MAC address replaces the DA, upon\n         encapsulation.  For decapsulation, protocol signature and this \n         configured MAC address are matched and the MAC address is replaced\n         with the protocol's inferred MAC address.")
cmEthernetAccPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmEthernetAccPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmEthernetAccPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmEthernetAccPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmEthernetAccPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmEthernetAccPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmEthernetAccPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmEthernetAccPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmEthernetAccPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmEthernetAccPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmEthernetAccPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmEthernetAccPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmEthernetAccPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmEthernetAccPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmEthernetAccPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmEthernetAccPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmEthernetAccPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
cmEthernetAccPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
cmEthernetAccPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
cmEthernetAccPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpUntaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpUntaggedDispType.setDescription('PTP untagged frame Disposition type.')
cmEthernetAccPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 13, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpTaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortCpdV2PtpTaggedDispType.setDescription('PTP tagged frame Disposition type.')
cmFlowCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14), )
if mibBuilder.loadTexts: cmFlowCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Table.setDescription('A list of entries corresponding to Ethernet Flow \n             Control Protocol Disposition V2.\n             This table is supported for the GE206/GE201 devices.')
cmFlowCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmFlowCpdV2Index"))
if mibBuilder.loadTexts: cmFlowCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Entry.setDescription('A conceptual row in the cmFlowCpdV2Table. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Flow.')
cmFlowCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Index.setDescription('Unique Index value to access the CPD row.')
cmFlowCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowCpdV2CiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmFlowCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmFlowCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmFlowCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmFlowCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmFlowCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmFlowCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmFlowCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmFlowCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmFlowCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmFlowCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmFlowCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowCpdV2BridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmFlowCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmFlowCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmFlowCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmFlowCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmFlowCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmFlowCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmFlowCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmFlowCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2BridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowCpdV2BridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmFlowCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmFlowCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowCpdV2GARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmFlowCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmFlowCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:21).')
cmFlowCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmFlowCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 27), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowCpdV2ActiveControlProtocols.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2ActiveControlProtocols.setDescription('List of Active Control Protocol Dispositions. Note that\n         if the Port Level Disposition control is set to PEER or \n         DISCARD, the flow level disposition is no longer active.\n         This object provides information on all the active\n         dispositions.')
cmFlowCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2LLDPDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowCpdV2LLDPDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         LLDP (Link Layer Discovery Protocol) Disposition type. \n         MAC Address 01:80:C2:00:00:0e, 01:80:C2:00:00:03, or\n         01:80:C2:00:00:00.')
cmFlowCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n         MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
cmFlowCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmFlowCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmFlowCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmFlowCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmFlowCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmFlowCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmFlowCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmFlowCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmFlowCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmFlowCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmFlowCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmFlowCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmFlowCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmFlowCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmFlowCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmFlowCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmFlowCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
cmFlowCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
cmFlowCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 14, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
cmEthernetNetPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15), )
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Table.setDescription('A list of entries corresponding to Ethernet Network Port \n             Control Protocol Disposition V2.\n             This table is supported for the GE206/GE201 devices.')
cmEthernetNetPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Entry.setDescription('A conceptual row in the cmEthernetNetPortCpdV2Table. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Network Port.')
cmEthernetNetPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Index.setDescription('Unique Index value to access the CPD row.')
cmEthernetNetPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmEthernetNetPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmEthernetNetPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmEthernetNetPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmEthernetNetPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmEthernetNetPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmEthernetNetPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmEthernetNetPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmEthernetNetPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmEthernetNetPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmEthernetNetPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmEthernetNetPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmEthernetNetPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmEthernetNetPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmEthernetNetPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmEthernetNetPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmEthernetNetPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmEthernetNetPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmEthernetNetPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmEthernetNetPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2BridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmEthernetNetPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmEthernetNetPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmEthernetNetPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmEthernetNetPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:21).')
cmEthernetNetPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmEthernetNetPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LLDPDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2LLDPDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         LLDP (Link Layer Discovery Protocol) Disposition type. \n         MAC Address 01:80:C2:00:00:0e, 01:80:C2:00:00:03, or\n         01:80:C2:00:00:00.')
cmEthernetNetPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n         MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
cmEthernetNetPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTTunnelMac.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2L2PTTunnelMac.setDescription("Configurable Layer 2 Protocol Tunneling MAC Address.  \n         For protocols STP, CDP and VTP, with control protocol disposition as \n         pass-thru-l2pt, this configured MAC address replaces the DA, upon\n         encapsulation.  For decapsulation, protocol signature and this \n         configured MAC address are matched and the MAC address is replaced\n         with the protocol's inferred MAC address.")
cmEthernetNetPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmEthernetNetPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmEthernetNetPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmEthernetNetPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmEthernetNetPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmEthernetNetPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmEthernetNetPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmEthernetNetPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmEthernetNetPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmEthernetNetPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmEthernetNetPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmEthernetNetPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmEthernetNetPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmEthernetNetPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmEthernetNetPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmEthernetNetPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmEthernetNetPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
cmEthernetNetPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
cmEthernetNetPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
cmEthernetNetPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpUntaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpUntaggedDispType.setDescription('PTP non forwarding untagged frame Disposition type.')
cmEthernetNetPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 15, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpTaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortCpdV2PtpTaggedDispType.setDescription('PTP tagged frame Disposition type.')
bitsPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16), )
if mibBuilder.loadTexts: bitsPortTable.setStatus('current')
if mibBuilder.loadTexts: bitsPortTable.setDescription('A list of entries corresponding to BITS Port \n             Facilities for configuration purposes.')
bitsPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "bitsPortTypeIndex"), (0, "CM-FACILITY-MIB", "bitsPortIndex"))
if mibBuilder.loadTexts: bitsPortEntry.setStatus('current')
if mibBuilder.loadTexts: bitsPortEntry.setDescription('A conceptual row in the bitsPortTable.')
bitsPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortTypeIndex.setStatus('current')
if mibBuilder.loadTexts: bitsPortTypeIndex.setDescription('An integer index value used to uniquely identify\n          this BITS Port within the card. Value 1 stands for\n          BITS-IN, 2 for BITS-OUT.')
bitsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortIndex.setStatus('current')
if mibBuilder.loadTexts: bitsPortIndex.setDescription('An integer index value used to uniquely identify\n          this BITS Port within the card.\n          Note that each BITs Port is uniquely identified\n          by the indices neIndex, shelfIndex, \n          slotIndex, bitsPortIndex.')
bitsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: bitsPortIfIndex.setDescription('This object has the same value as ifIndex for \n          Bits Port.  An integer index value used to \n          uniquely identify this Bits Port.')
bitsPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: bitsPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
bitsPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAdminState.setStatus('current')
if mibBuilder.loadTexts: bitsPortAdminState.setDescription('This object represents the Administrative State of the BITS \n             Port.')
bitsPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: bitsPortOperationalState.setDescription('This object represents the Operational State of the BITS \n             Port.')
bitsPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: bitsPortSecondaryState.setDescription('This object represents the Secondary State of the BITS \n             Port.')
bitsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 8), BitsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortType.setStatus('current')
if mibBuilder.loadTexts: bitsPortType.setDescription('This object represents the BITS Port Type.')
bitsPortLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 9), BitsPortLineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineType.setStatus('current')
if mibBuilder.loadTexts: bitsPortLineType.setDescription('This object represents the BITS Port Line Type.\n             Determines whether the T1/E1 BITS port operates in T1, E1, \n             or 2048kHz mode.')
bitsPortLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 10), BitsPortLineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineCode.setStatus('current')
if mibBuilder.loadTexts: bitsPortLineCode.setDescription('This object represents the BITS Port Line Code.\n             When the port is configured for a Line Type of T1, \n             the valid values are t1-b8zs and t1-ami and the default value\n             is t1-b8zs. When the port is configured for a Line Type of E1, \n             the valid values are e1-hdb3 and e1-ami and the default value \n             is e1-hdb3. When the port is configured for a Line Type of \n             2048kHz, the value is none.')
bitsPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 11), BitsFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortFrameFormat.setStatus('current')
if mibBuilder.loadTexts: bitsPortFrameFormat.setDescription('This object represents the BITS Port Frame Format.\n             When the port is configured for a Line Type of T1, the\n             valid values are t1-sf and t1-esf and the default value is t1-esf.\n             When the port is configured for a Line Type of E1, the\n             valid values are e1-unframed, e1-crc4, and e1-dualFrame \n             and the default value is e1-crc4. When the port is configured \n             for a Line Type of 2048kHz, the value is none.\n\n             R4.1CC and R4.3CC do not support e1-unframed.')
bitsPortSaBitDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 12), SaBitDesignation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSaBitDesignation.setStatus('current')
if mibBuilder.loadTexts: bitsPortSaBitDesignation.setDescription('This object represents the BITS Port Sa Bit Designation.\n             Determines which E1 Sa Bit is used to transmit/receive the SSM. \n             For T1 and 2048khz Line Types, the only allowed value is None. \n             For E1 Line Type, the default value is bit4 and it can \n             only have a value of None if QL Mode is disabled, otherwise, \n             None is an invalid value.')
bitsPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: bitsPortQLModeEnabled.setDescription('This object allows to specify whether the BITS Port \n          can be enabled/disabled for QL Mode. \n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
bitsPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 14), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortExpectedQL.setStatus('current')
if mibBuilder.loadTexts: bitsPortExpectedQL.setDescription('This object allows to specify the expected QL when the \n          BITS Port is enabled for QL Mode. \n          This object allows the user to set a minimum\n          expected received Quality Level on the port. \n          The default value shall be None.')
bitsPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 15), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAssumedQL.setStatus('current')
if mibBuilder.loadTexts: bitsPortAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          BITS Port.  The Assumed QL is only meaningful if the \n          Network Clock Type (see fsp150cm-sync.mib) is option1 and the \n          port's QL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
bitsPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 16), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortReceivedQL.setStatus('current')
if mibBuilder.loadTexts: bitsPortReceivedQL.setDescription("This object provides the Received QL value for the BITS port. \n          If the BITS port's QL Mode is disabled, then the received \n          QL value is not applicable.")
bitsPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 17), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortTransmitQL.setStatus('current')
if mibBuilder.loadTexts: bitsPortTransmitQL.setDescription("This object provides the Transmitted QL value for the BITS port. \n          If the BITS port's QL Mode is disabled, then the received \n          QL value is not applicable.")
bitsPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 18), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSquelchQL.setStatus('current')
if mibBuilder.loadTexts: bitsPortSquelchQL.setDescription("This object allows to set the Squelch QL for the BITS-OUT port. \n          The Squelch QL is only meaningful if the QL Mode is Enabled. \n          The Squelch QL is used to determine whether or not to squelch \n          the output of the BITS-OUT port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.\n          If the BITS port's QL Mode is disabled, then the received \n          QL value is not applicable.")
bitsPortLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 19), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortLineBuildOut.setStatus('current')
if mibBuilder.loadTexts: bitsPortLineBuildOut.setDescription('This object allows to manage the line build out on the BITS-OUT port when\n          the Line Type is T1.')
bitsPortImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 20), BitsPortImpedanceMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortImpedance.setStatus('current')
if mibBuilder.loadTexts: bitsPortImpedance.setDescription('This object provides the impedance mode for the BITS-OUT port.')
bitsPortCrc4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortCrc4.setStatus('current')
if mibBuilder.loadTexts: bitsPortCrc4.setDescription('This object allows to include or not the CRC to the signal\n         of the BITS-OUT port.')
bitsPortIdleCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortIdleCode.setStatus('current')
if mibBuilder.loadTexts: bitsPortIdleCode.setDescription('This object allows to manage the Idle Code for the BITS-OUT port.')
bitsPortAis = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortAis.setStatus('current')
if mibBuilder.loadTexts: bitsPortAis.setDescription('This object allows to set the AIS signal for the BITS-OUT port.')
bitsPortSaBitsAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 24), SaBitsState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSaBitsAdminState.setStatus('current')
if mibBuilder.loadTexts: bitsPortSaBitsAdminState.setDescription('This object allows to manage the five Sa Bit values, from bit4 to bit8,\n         for the BITS-OUT port.\n         The object value is a BIT string that concatenate the Sa Bit values. \n         The Sa Bit values are applied to each of the five Sa Bits of the output\n         signal except to the one that carries SSM information when QL Mode is\n         enabled.')
bitsPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 25), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSquelchControl.setStatus('current')
if mibBuilder.loadTexts: bitsPortSquelchControl.setDescription('This object indicates the Squelch Control for the port. \n          The Squelch Control determines the type of squelch control \n          used to squelch an output of the port.')
bitsPortSignalShape = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 26), SignalShape()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bitsPortSignalShape.setStatus('current')
if mibBuilder.loadTexts: bitsPortSignalShape.setDescription('This object represents the Port Signal Shape.\n          Indicates whether the signal has a sine or a square shape.')
bitsPortSignalFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 16, 1, 27), SignalFrequency()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bitsPortSignalFrequency.setStatus('current')
if mibBuilder.loadTexts: bitsPortSignalFrequency.setDescription('Indicates the signal frequency of the port.\n          Possible value are 100 kHz, 1 MHz, 1544 kHz, 2048 kHz, 5 MHz, \n          25 Mhz or 50 MHz. \n          It can be set only to a port that is dedicated to yield a \n          variety of frequencies.')
ieee1588EthernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17), )
if mibBuilder.loadTexts: ieee1588EthernetPortTable.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortTable.setDescription('A list of entries corresponding to IEEE Ethernet Port\n             Facilities for configuration purposes.')
ieee1588EthernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ieee1588EthernetPortIndex"))
if mibBuilder.loadTexts: ieee1588EthernetPortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortEntry.setDescription('A conceptual row in the IEEE Ethernet Port Table.')
ieee1588EthernetPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortIndex.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortIndex.setDescription('An integer index value used to uniquely identify\n          the IEEE Ethernet Port.')
ieee1588EthernetPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortIfIndex.setDescription('This object has the same value as ifIndex for \n          the IEEE Ethernet Port.')
ieee1588EthernetPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
ieee1588EthernetPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortAdminState.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortAdminState.setDescription('This object represents the Administrative State of the \n             Port.')
ieee1588EthernetPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortOperationalState.setDescription('This object represents the Operational State of the \n             Port.')
ieee1588EthernetPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortSecondaryState.setDescription('This object represents the Secondary State of the \n             Port.')
ieee1588EthernetPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMTU.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortMTU.setDescription('This object provides the MTU on the Port.')
ieee1588EthernetPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMediaType.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortMediaType.setDescription('This object represents the type of Media.')
ieee1588EthernetPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortConfigSpeed.setDescription('This object allows to configure the speed of the Port.')
ieee1588EthernetPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee1588EthernetPortNegotiatedSpeed.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortNegotiatedSpeed.setDescription('This object provides the negotiated speed of the \n             Port.')
ieee1588EthernetPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 17, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee1588EthernetPortMDIXType.setStatus('current')
if mibBuilder.loadTexts: ieee1588EthernetPortMDIXType.setDescription('This object allows management of MDIX property on  \n             Port.')
gps10MHzPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18), )
if mibBuilder.loadTexts: gps10MHzPortTable.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortTable.setDescription('A list of entries corresponding to GPS 10MHz \n             Facilities for configuration purposes.')
gps10MHzPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "gps10MHzPortIndex"))
if mibBuilder.loadTexts: gps10MHzPortEntry.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortEntry.setDescription('A conceptual row in the GPS 10MHz Port Table.')
gps10MHzPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortIndex.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortIndex.setDescription('An integer index value used to uniquely identify\n          the IEEE Ethernet Port.')
gps10MHzPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortIfIndex.setDescription('This object has the same value as ifIndex for \n          the IEEE Ethernet Port.')
gps10MHzPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
gps10MHzPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAdminState.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortAdminState.setDescription('This object represents the Administrative State of the \n             Port.')
gps10MHzPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortOperationalState.setDescription('This object represents the Operational State of the \n             Port.')
gps10MHzPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortSecondaryState.setDescription('This object represents the Secondary State of the \n             Port.')
gps10MHzPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 7), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSignalDirection.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortSignalDirection.setDescription('This object allows specification of the signal type \n             (i.e. input or output).')
gps10MHzPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 8), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSquelchControl.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortSquelchControl.setDescription('This object allows to set the Squelch Control for the 10MHz port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port. Only option supported\n          is squelch-ql.')
gps10MHzPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 9), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortSquelchQL.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortSquelchQL.setDescription("This object allows to set the Squelch QL for the 10MHz port. \n          This value is used when f310MHzClockPortSquelchControl is squelch-ql.\n          The Squelch QL is used to determine whether or not to squelch \n          the output of the TOD port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.")
gps10MHzPortFrequencySource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortFrequencySource.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortFrequencySource.setDescription('This object allows to set the Frequency Source for the Port.')
gps10MHzPortClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: gps10MHzPortClockClass.setDescription('This object specify GPS port clock class.')
gps10MHzPortClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortClockAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: gps10MHzPortClockAccuracy.setDescription('This object specify GPS port clock accuracy.')
gps10MHzPortTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 13), TimeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gps10MHzPortTimeSource.setStatus('deprecated')
if mibBuilder.loadTexts: gps10MHzPortTimeSource.setDescription('This object specify GPS port time source.')
gps10MHzPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 14), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAssumedQL.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortAssumedQL.setDescription("This object allows to specify the assumed QL on the \n          GPS Port.  The Assumed QL is only meaningful if the \n          Network Clock Type (see fsp150cm-sync.mib) is option1 and the \n          port's QL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.")
gps10MHzPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortAlias.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the gps 10MHz Port entity.')
gps10MHzPortInputSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 18, 1, 16), ClkSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: gps10MHzPortInputSignalType.setStatus('current')
if mibBuilder.loadTexts: gps10MHzPortInputSignalType.setDescription('This object allows specification of the input signal type \n             (i.e. 10mhz or 2048khz).')
cmEthernetNetPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19), )
if mibBuilder.loadTexts: cmEthernetNetPortClbTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             Cable Length Benchmark.')
cmEthernetNetPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortClbEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbEntry.setDescription('A conceptual row in the cmEthernetNetPortClbTable. \n             These entries represent Cable Length Benchmarks \n             on the Ethernet Network Port.')
cmEthernetNetPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortClbIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbIndex.setDescription('An integer index value used to uniquely identify\n             this Cable Length Benchmark Entry specification.')
cmEthernetNetPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbEnabled.setDescription('This enables specification of Cable Length Benchmark entry.')
cmEthernetNetPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbLength.setDescription('Cable length of Cable Points Entry. The cable length is of\n             the form XXX[.YY] where XX can be any integer value and YY\n             allows precision of 2 decimals after the floating point. Note\n             that .YY is optional.')
cmEthernetNetPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 19, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortClbDescr.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortClbDescr.setDescription('A textual string containing description of cable span.')
cmNetPortPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20), )
if mibBuilder.loadTexts: cmNetPortPrioMapTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapTable.setDescription('A list of entries corresponding to Ethernet Network Port Priority Mappings\n             in multi Class of Service (COS) mode.')
cmNetPortPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPrioMapIndex"))
if mibBuilder.loadTexts: cmNetPortPrioMapEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapEntry.setDescription('A conceptual row in the cmNetPortPrioMapTable.')
cmNetPortPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPrioMapIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapIndex.setDescription('The integer index value corresponding to a priority value.')
cmNetPortPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapInPriority.setDescription('The integer index value corresponding to a priority value.')
cmNetPortPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapCOS.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmNetPortPrioMapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 20, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPrioMapOuterTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPrioMapOuterTagPriority.setDescription("This allows specification of the VLAN priority that\n             will replace the outgoing (N2A direction) outer-tag's priority.\n             Note that, each flow participates or not in outer-tag\n             priority mapping, using the object 'cmFlowN2AOuterTagPrioEnabled'.")
cmAccPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21), )
if mibBuilder.loadTexts: cmAccPortPcpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncTable.setDescription('Ethernet Access Port PCP drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Access port.')
cmAccPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncEntry.setDescription('A conceptual row in the ethernetPBPcpDEEncPortTable.')
cmAccPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible encoding table.')
cmAccPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmAccPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropIneligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmAccPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 21, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEEncDropEligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmAccPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22), )
if mibBuilder.loadTexts: cmAccPortPcpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecTable.setDescription('Ethernet Access Port PCP drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmAccPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecEntry.setDescription('A conceptual row in the ethernetPBPcpDEDecPortTable.')
cmAccPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible decoding table.')
cmAccPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmAccPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming PCP value.')
cmAccPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 22, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          PCP value.')
cmAccPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23), )
if mibBuilder.loadTexts: cmAccPortPcpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEPairTable.setDescription('Ethernet Access Port PCP drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the PCP DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmAccPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmAccPortPcpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEPairEntry.setDescription('A conceptual row in the cmAccPortPcpDEPairEntry.')
cmAccPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortPcpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible priority pair table.')
cmAccPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmAccPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 23, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortPcpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmAccPortPcpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmNetPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24), )
if mibBuilder.loadTexts: cmNetPortPcpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncTable.setDescription('Ethernet Network Port PCP drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Network port.')
cmNetPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncEntry.setDescription('A conceptual row in the ethernetPBPcpDEEncPortTable.')
cmNetPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible encoding table.')
cmNetPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmNetPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropIneligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmNetPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 24, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEEncDropEligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmNetPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25), )
if mibBuilder.loadTexts: cmNetPortPcpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecTable.setDescription('Ethernet Network Port PCP drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmNetPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecEntry.setDescription('A conceptual row in the ethernetPBPcpDEDecPortTable.')
cmNetPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible decoding table.')
cmNetPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmNetPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming PCP value.')
cmNetPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 25, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          PCP value.')
cmNetPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26), )
if mibBuilder.loadTexts: cmNetPortPcpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEPairTable.setDescription('Ethernet Network Port PCP drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the PCP DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmNetPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortPcpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEPairEntry.setDescription('A conceptual row in the cmNetPortPcpDEPairEntry.')
cmNetPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmNetPortPcpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible priority pair table.')
cmNetPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmNetPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 26, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortPcpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortPcpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmEthernetTrafficPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27), )
if mibBuilder.loadTexts: cmEthernetTrafficPortTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTable.setDescription('A list of entries corresponding to Ethernet \n             Facilities for configuration purposes.')
cmEthernetTrafficPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEntry.setDescription('A conceptual row in the cmEthernetTrafficPortTable.')
cmEthernetTrafficPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIndex.setDescription('An integer index value used to uniquely identify\n             this Ethernet Port within a card.\n             Note that each Ethernet Port is uniquely identified\n             by the indices neIndex, shelfIndex, \n             slotIndex, cmEthernetTrafficPortIndex.')
cmEthernetTrafficPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIfIndex.setDescription('This object has the same value as ifIndex for \n             Ethernet Port.  An integer index value used to \n             uniquely identify this Ethernet Port.')
cmEthernetTrafficPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
cmEthernetTrafficPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortAdminState.setDescription('This object represents the Administrative State of the Ethernet Port.')
cmEthernetTrafficPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOperationalState.setDescription('This object represents the Operational State of the Ethernet Port.')
cmEthernetTrafficPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSecondaryState.setDescription('This object represents the Secondary State of the Ethernet Port.')
cmEthernetTrafficPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMTU.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMTU.setDescription('This object provides the MTU on the Ethernet Port.\n             The object is made read-write for FSP150CC devices.')
cmEthernetTrafficPortMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 8), EthernetMediaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaType.setDescription("This object represents the type of Ethernet Media on the \n             Ethernet Port.\n             The media type includes,\n                 copper (1)\n                 fiber (2)\n                 coppersfp (3)\n             CM Aggregation Product doesn't support copper.")
cmEthernetTrafficPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 9), EthernetPortSpeed()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortConfigSpeed.setDescription('This object allows to configure the speed of the \n             Ethernet Port.')
cmEthernetTrafficPortNegotiatedSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 10), EthernetPortSpeed()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortNegotiatedSpeed.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortNegotiatedSpeed.setDescription('This object provides the negotiated speed of the \n             Ethernet Port.')
cmEthernetTrafficPortMDIXType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 11), CmEthernetMDIXType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXType.setDescription('This object allows management of MDIX property on  \n             Ethernet Port.')
cmEthernetTrafficPortMDIXStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 12), CmEthernetMDIXType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMDIXStatus.setDescription('This object provides the current MDIX status of the \n          Ethernet port.')
cmEthernetTrafficPortSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpVendorName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpVendorName.setDescription('This object provides the vendor name of the SFP. \n             This is applicable when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpPartNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpPartNumber.setDescription('This object provides the part number of the SFP. \n             This is applicable when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpSerialNumber.setDescription('This object provides the serial number of the SFP.  \n             This is shown only when cmEthernetTrafficPortMediaType is fiber.')
cmEthernetTrafficPortSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpDateOfManufacture.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpDateOfManufacture.setDescription('This object provides the date of manufacture of the SFP.\n             This is applicable when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 17), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpConnectorValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpConnectorValue.setDescription('This object provides the SFP connector value.\n             This is applicable when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLinkLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLinkLength.setDescription('This object provides the SFP Link Length.\n          This is applicable only when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLength.setDescription('This object provides the SFP Laser Wave Length in nano meters.\n          This is applicable only when cmEthernetTrafficPortMediaType is fiber.')
cmEthernetTrafficPortSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 20), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpMediaType.setDescription('This object provides the SFP Media Type.\n          This is applicable only when cmEthernetTrafficPortMediaType is fiber or coppersfp.')
cmEthernetTrafficPortLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 21), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the Ethernet Port.')
cmEthernetTrafficPortLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 22), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the Ethernet Port.')
cmEthernetTrafficPortLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the Ethernet Port.')
cmEthernetTrafficPortLoopbackSwapSADA = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 24), CmSwapSADAType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSwapSADA.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSwapSADA.setDescription('This object allows to specify whether or not the loopbacked\n             frame will have the Source Address and Destination Address\n             swapped.')
cmEthernetTrafficPortOuterVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopbackMask.setDescription('This object allows specification of the outer VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Outer VLAN 1 Loopback Enabled\n                   2         Outer VLAN 2 Loopback Enabled\n                   4         Outer VLAN 3 Loopback Enabled')
cmEthernetTrafficPortOuterVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback1.setDescription('This object allows specification of the outer VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortOuterVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback2.setDescription('This object allows specification of the outer VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortOuterVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterVlanLoopback3.setDescription('This object allows specification of the outer VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortOuterVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortLinkLossFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdEnabled.setDescription('This object allows enabling/disabling link loss forwarding \n              on the Ethernet Port.')
cmEthernetTrafficPortLinkLossFwdSignalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 30), CmLinkLossFwdSignalType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdSignalType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdSignalType.setDescription('This object allows definition of the link loss forwarding\n              signalling type.  This is applicable only if \n              cmEthernetTrafficPortLinkLossFwdEnabled is enabled.')
cmEthernetTrafficPortLinkLossFwdTriggerTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 31), CmLinkLossFwdTriggerTypes()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTriggerTypes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTriggerTypes.setDescription('This object allows definition of the link loss forwarding\n              trigger types.  This is applicable only if \n              cmEthernetTrafficPortLinkLossFwdEnabled is enabled.')
cmEthernetTrafficPortLinkLossFwdDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdDelay.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdDelay.setDescription('This object allows specification of the delay between\n              detection of link loss and signalling of link loss forwarding. \n              Time specified is in seconds.')
cmEthernetTrafficPortLinkLossFwdActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdActive.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdActive.setDescription('This object provides the link loss forwarding status indicating\n              if link loss forwarding is currently being signaled via \n              the port.')
cmEthernetTrafficPortLinkLossFwdPartnerEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 34), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdPartnerEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdPartnerEnabled.setDescription('This object provides the indication of a link partners ability\n              to support link loss forwarding via EFM, i.e. from\n              received organization specific OAMPDUs.')
cmEthernetTrafficPortLinkLossFwdLocalLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdLocalLinkId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdLocalLinkId.setDescription('This object allows configuration of the Local Link Id on \n              Ethernet port.')
cmEthernetTrafficPortLinkLossFwdRemoteLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRemoteLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRemoteLinkIds.setDescription('This object allows enabling/disabling Remote Link Ids \n              on Ethernet port. The Ethernet port is able to distinguish \n              the remote side client ports from the Remote Link Down\n              PDUs coming from remote end.\n              Input format allows multiple Remote Link Ids seperated by comma (e.g. 1,2,3,10,20...).\n              Number range is product-specific (for EGX8.1, max value is 554). \n              Empty string clears the configuration.')
cmEthernetTrafficPortLinkLossFwdTxActionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 37), CmLinkLossFwdTxActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTxActionType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdTxActionType.setDescription("This object allows to specify the Ethernet Port's behavior when\n          link loss forwarding trigger events occur on the Port.\n          This provides ability to configure per Ethernet port LLF behavior.")
cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds.setDescription('This object provides the received Remote Link IDs in \n          EFM RLD messages on the Ethernet Port.')
cmEthernetTrafficPortOamId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamId.setDescription('OAM Id.  This is unique EFM OAM sublayer port id.')
cmEthernetTrafficPortOamDiscoveryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 40), CmOamDiscoveryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamDiscoveryState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamDiscoveryState.setDescription("Ethernet Port's OAM discovery state.")
cmEthernetTrafficPortOamLocalVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 41), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalVarRtrvsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Port supports sending variable response OAMPDUs.')
cmEthernetTrafficPortOamLocalLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalLinkEventsEnabled.setDescription('This object allows specification of whether the Ethernet\n              Port supports interpreting Link Events.')
cmEthernetTrafficPortOamLocalOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalOamLoopbacksSupported.setDescription('This object allows specification of whether the Ethernet\n              Port is capable of OAM remote loopback mode.')
cmEthernetTrafficPortOamLocalUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 44), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalUnidirSupportEnabled.setDescription('This object allows specification of whether the Ethernet\n              Port is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetTrafficPortOamLocalMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMaxPDUSize.setDescription('This object represents the largest OAMPDU, in octets, \n              supported by the Ethernet Port.  This value is\n              compared to the remote Maximum PDU Size and the smaller of \n              the two is used.')
cmEthernetTrafficPortOamLocalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 46), CmOamMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamLocalMode.setDescription('This object allows to configure the OAM sublayer entity in\n              either Active or Passive mode.')
cmEthernetTrafficPortOamRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 47), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address.')
cmEthernetTrafficPortOamRemoteVarRtrvsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 48), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteVarRtrvsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteVarRtrvsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports sending variable response OAMPDUs.')
cmEthernetTrafficPortOamRemoteLinkEventsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteLinkEventsEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteLinkEventsEnabled.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports interpreting Link Events.')
cmEthernetTrafficPortOamRemoteOamLoopbacksSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 50), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteOamLoopbacksSupported.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteOamLoopbacksSupported.setDescription('This object allows retrieval of whether the remote OAM \n              entity supports OAM remote loopback mode.')
cmEthernetTrafficPortOamRemoteUnidirSupportEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 51), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteUnidirSupportEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteUnidirSupportEnabled.setDescription('This object allows retrieval of whether the remote \n              OAM entity is capable of sending OAMPDUs when the receive path \n              is non-operational.')
cmEthernetTrafficPortOamRemoteMaxPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMaxPDUSize.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMaxPDUSize.setDescription('This object allows retrieval of the remote OAM \n              entity maximum OAMPDU size.')
cmEthernetTrafficPortOamRemoteMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 53), CmOamMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamRemoteMode.setDescription('This object allows to retrieve whether the remote OAM \n              sublayer entity is either in Active or Passive mode.')
cmEthernetTrafficPortOamEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 54), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamEnabled.setDescription('This object allows to manage the EFM OAM on Ethernet Traffic Port.')
cmEthernetTrafficPortOamAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 55), CmOamAdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortOamAdminState.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOamAdminState.setDescription('This object provides the EFM OAM Admin State.')
cmEthernetTrafficPortSvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 56), CmEthernetTrafficSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSvcType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSvcType.setDescription('This object allows specification of whether the \n              Ethernet Port is port based or vlan based.')
cmEthernetTrafficPortRxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 57), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxPauseEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRxPauseEnabled.setDescription('This object defines the RxPause enable or disable of the port.')
cmEthernetTrafficPortTxPauseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxPauseEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTxPauseEnabled.setDescription('This object allows enabling/disabling transmit pause frames on\n          Ethernet port.')
cmEthernetTrafficPortAfpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 59), CmAfpType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAfpType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortAfpType.setDescription('This object allows specification of the Acceptable Frame Policy on\n          Ethernet port. Users can specify whether the port supports\n          only tagged frames, only untagged frames or both tagged and \n          untagged frames.')
cmEthernetTrafficPortShapingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortShapingEnabled.setDescription('This object allows to manage the Ethernet Port Shaping.\n          When enabled, values in cmEthernetTrafficPortShapedSpeedLo and\n          cmEthernetTrafficPortShapedSpeedHi are applicable.')
cmEthernetTrafficPortShapedSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedLo.setDescription('This object allows to specify the lower 32 bits of \n          the Ethernet Port Shaped speed. This value is applicable\n          when cmEthernetTrafficPortShapingEnabled is enabled.')
cmEthernetTrafficPortShapedSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 62), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortShapedSpeedHi.setDescription('This object allows to specify the higher 32 bits of \n          the Port Shaped speed. This value is applicable\n          when cmEthernetTrafficPortShapingEnabled is enabled.')
cmEthernetTrafficPortQinQEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortQinQEtherType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortQinQEtherType.setDescription('This object allows to specify the Q-in-Q Ether Type \n          on the Port.')
cmEthernetTrafficPortTagFrameControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 64), AfpTagControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTagFrameControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTagFrameControl.setDescription('This object defines if c-tag/s-tag frame is allowed to pass through,\n          available only when AFP is set to Tagged.')
cmEthernetTrafficPortEgressVlanTrunkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressVlanTrunkingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressVlanTrunkingEnabled.setDescription('This object allows to enable or disable the VLAN trunking on\n          Ethernet port. Disabling VLAN trunking removes all\n          VLAN tags before transmitting traffic out of the port. \n          This object is only applicable for connection-oriented, \n          evpl service type.')
cmEthernetTrafficPortIngressPushPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 66), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPushPVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPushPVIDEnabled.setDescription('This object allows to specify whether cmEthernetTrafficPortPortVlanId\n          value will be PUSHed on untagged frames or not in the \n          ingress direction.  This object is only applicable \n          for connection-oriented, evpl service type.')
cmEthernetTrafficPortEgressPopPVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 67), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPVIDEnabled.setDescription('This object allows to specify whether cmEthernetTrafficPortPortVlanId\n          value will be POPed in the \n          egress direction.  This object is only applicable \n          for connection-oriented, evpl service type.')
cmEthernetTrafficPortEgressPopPriorityVidEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 68), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPriorityVidEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressPopPriorityVidEnabled.setDescription('This object defines the egress PopPriorityVid enable or disable of the port.\n          If it is enabled, the outgoing packets with VID=Priority VLAN ID \n          will be swapped back to VID=0.\n         \n          This attribute has been deprecated and is supported only on EG-X. \n          Please use cmEthernetTrafficPortEgressSwapPriorityVIDEnabled')
cmEthernetTrafficPortPortVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 69), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanId.setDescription('This object allows to specify the Ethernet Port VLAN Id \n          to PUSH on untagged frames in the to Network\n          direction.  This object is only applicable for connection-oriented,\n          evpl service type, when cmEthernetTrafficPortIngressPushPVIDEnabled \n          is set to true.')
cmEthernetTrafficPortPortVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 70), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPortVlanPriority.setDescription('This object allows to specify the Ethernet Port VLAN Priority \n          for the PUSHed VLAN tag (specified by cmEthernetTrafficPortPortVlanId) \n          on untagged frames in the ingress direction.  \n          This object is only applicable for connection-oriented,\n          evpl service type, when cmEthernetTrafficPortIngressPushPVIDEnabled \n          is set to true.')
cmEthernetTrafficPortPriorityVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 71), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPriorityVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortPriorityVlanId.setDescription('This object allows to specify the Ethernet Priority VLAN Id \n          to replace the null-tagged or priority tagged frames in the \n          to ingress direction.  This object is only applicable \n          for connection-oriented, evpl service type.\n          \n          This attribute has been deprecated and is supported only on EG-X. \n          Please use cmEthernetTrafficPortSwapPriorityVID')
cmEthernetTrafficPortIngressPrioMapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 72), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPrioMapMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPrioMapMode.setDescription('This object allows to specify the Ethernet Port \n          Priority Mapping Mode used for classification of frames.\n          This object is only applicable for connection-oriented,\n          evpl service type.')
cmEthernetTrafficPortIngressCOSPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 73), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressCOSPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressCOSPriority.setDescription('This object is used to specify whether the EthernetTrafficPort\n          uses the inner-tag or the outer-tag in determining the COS (Class of Service).\n          \n          This attribute has been deprecated and is not supported.  Now,\n          the Priority Map Mode indicates whether it is inner or outer.\n          Use priomap-8021p(4) for outer and priomap-8021p-inner(5)\n          for inner.')
cmEthernetTrafficPortSyncEEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 74), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEEnabled.setDescription("This object allows to specify whether the Ethernet Port \n          can be enabled/disabled for Synchronous Ethernet. This object\n          is only applicable for Synchronous Ethernet capable ports.\n          When enabled, on receive side \n            -port can extract the frequency of its input signal\n             and pass the recovered clock to the system clock\n            -port processes the ESMC(Ethernet Synchronization Messaging\n             Channel) and extracts the QL (when also QL enabled)   \n            -port is eligible to be selected as a system clock reference\n          When enabled, on transmit side \n            -port's transmit clock is locked to the system clock\n            -port generates an ESMC to generate a QL (when also QL enabled)\n\n          When disabled, on receive side,\n            -port does not pass the recovered clock to the system clock \n            -port does not process the ESMC (if present) \n            -port is not eligible to be selected as a \n                     system clock reference\n          When disabled, on transmit side \n            -port's output frequency may be synchronized to the system clock\n            -port does not generate an ESMC.")
cmEthernetTrafficPortQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 75), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortQLModeEnabled.setDescription('This object allows to specify whether the Ethernet Port \n          can be enabled/disabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetTrafficPortQLModeEnabled is set to true.\n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
cmEthernetTrafficPortExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 76), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpectedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortExpectedQL.setDescription('This object allows to specify the expected QL when the \n          Ethernet Port is enabled for QL Mode. This object\n          is only applicable for Synchronous Ethernet capable ports,\n          when cmEthernetTrafficPortQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the port. The valid values\n          depend upon the SYNC entity Network Clock Type. A value of\n          None represents that a minimum Quality Level is not expected. \n          The default value shall be None.')
cmEthernetTrafficPortAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 77), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAssumedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortAssumedQL.setDescription('This object allows to specify the assumed QL on the \n          Ethernet Port. This object is only applicable for \n          Synchronous Ethernet capable ports. \n          The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          port TransmitQL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.')
cmEthernetTrafficPortReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 78), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortReceivedQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortReceivedQL.setDescription('This object provides the Received QL value for the Ethernet port. \n          If the Ethernet port TransmitQL Mode is disabled, then the received \n          QL value is not applicable.This object is only applicable for \n          Synchronous Ethernet capable ports.')
cmEthernetTrafficPortTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 79), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortTransmitQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTransmitQL.setDescription('This object provides the Transmitted QL value for the Ethernet port. \n          If the Ethernet port TransmitQL Mode is disabled, then the received \n          QL value is not applicable. This object is only applicable for \n          Synchronous Ethernet capable ports.')
cmEthernetTrafficPortPhyType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 80), XgePhyType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPhyType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPhyType.setDescription('This object is valid only to XGE card. And the value should be LAN or WAN when \n         it is XGE card.')
cmEthernetTrafficPortSfpLaserWaveLengthPicometer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 81), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLengthPicometer.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpLaserWaveLengthPicometer.setDescription('This object provide laser wavelength pico value.\n          For example, laser wavelength is 1510.01,\n          then cmEthernetTrafficPortSfpLaserWaveLength=1510 \n          and cmTrafficPortSfpLaserWaveLengthPicometer=10.')
cmEthernetTrafficPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 82), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEthernetTrafficPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmEthernetTrafficPortRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            neRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmEthernetTrafficPortRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmEthernetTrafficPortSSMRemoteMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 83), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSSMRemoteMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSSMRemoteMacAddress.setDescription('This object allows retrieval of the Remote Mac Address, when\n              the port is peering using SSM.')
cmEthernetTrafficPortInnerVlanLoopbackMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 84), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopbackMask.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopbackMask.setDescription('This object allows specification of the inner VLANs to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. Only 3 VLANs can be specified \n              for vlan loopback. The various bit positions are:\n                   1         Inner VLAN 1 Loopback Enabled\n                   2         Inner VLAN 2 Loopback Enabled\n                   4         Inner VLAN 3 Loopback Enabled')
cmEthernetTrafficPortInnerVlanLoopback1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback1.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback1.setDescription('This object allows specification of the inner VLAN 1 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortInnerVlanLoopback2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback2.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback2.setDescription('This object allows specification of the inner VLAN 2 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortInnerVlanLoopback3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback3.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortInnerVlanLoopback3.setDescription('This object allows specification of the inner VLAN 3 to be \n              looped back when port is in vlan(terminal/facility) \n              loopback configuration. This is valid only if the\n              corresponding bit in cmEthernetTrafficPortInnerVlanLoopbackMask\n              is set.  The value to be specified should be in the form \n              X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n              If Y is specified as a *, all Priorities (0 to 7) \n              are looped back.')
cmEthernetTrafficPortLaserWDMChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 88), SfpChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserWDMChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserWDMChannel.setDescription('Channel number of WDM tunable XFP setting.')
cmEthernetTrafficPortLaserIsTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 89), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserIsTunable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserIsTunable.setDescription('This object means this module whether tunnable.')
cmEthernetTrafficPortLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 90), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLaserFrequency.setDescription("This object describes this module's frequency, and the step is 1GHZ.")
cmEthernetTrafficPortDeiEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 91), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortDeiEnable.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortDeiEnable.setDescription('This object describes whether use DEI bit in S-tag to \n              recognize Drop Eligibility Parameter for ingress S-tag packets or Set \n              DEI bit for egress S-tag Packets. \n              This object is still supported by OSA8.1.1')
cmEthernetTrafficPortPcpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 92), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncType.setDescription('This object describes the PCP encoding mode for egress packets\n             and the PCP decoding mode for ingress packets on this port.')
cmEthernetTrafficPortPcpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 93), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairsAction.setDescription('This object describes this port pcp de pairs action.')
cmEthernetTrafficPortInitiateDiag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 94), CmEthernetDiagAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortInitiateDiag.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortInitiateDiag.setDescription('This object allows to initiate Etherjack diagnosis on the\n             Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnosePair1Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 95), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair1Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair1Cond.setDescription('This object provides diagnosis results for the cable Pair 1\n             on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnosePair2Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 96), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair2Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair2Cond.setDescription('This object provides diagnosis results for the cable Pair 2\n             on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnosePair3Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 97), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair3Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair3Cond.setDescription('This object provides diagnosis results for the cable Pair 3\n             on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnosePair4Cond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 98), CmDiagCableCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair4Cond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosePair4Cond.setDescription('This object provides diagnosis results for the cable Pair 4\n             on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseAutoNegCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 99), CmDiagAutoNegCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseAutoNegCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseAutoNegCond.setDescription('This object provides auto negotiation results of the diagnosis\n             test on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 100), CmDiagLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseLpbkCond.setDescription('This object provides port loopback results of the diagnosis\n             test on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseEfmLpbkCond = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 101), CmDiagEfmOamLpbkCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseEfmLpbkCond.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseEfmLpbkCond.setDescription('This object provides remote EFM loopback results of the diagnosis\n             test on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseResult.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseResult.setDescription('This object provides results of the diagnosis\n             test in string form on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 103), CmDiagTestStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestStatus.setDescription('This object provides the current status of the diagnosis\n             test on Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnoseTestTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 104), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnoseTestTime.setDescription('This object provides the time when diagnosis test was last executed.')
cmEthernetTrafficPortAutoDiagEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 105), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAutoDiagEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortAutoDiagEnabled.setDescription('This object allows to enable or disable the automatic \n          Cable Diagnostic tests when the cable is removed from the port.')
cmEthernetTrafficPortDeleteEntitiesAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 106), TrafficPortDeleteEntitiesAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortDeleteEntitiesAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDeleteEntitiesAction.setDescription('This object allows to delete esa entities relate this port and \n         Cfm entities relate this port.')
cmEthernetTrafficPortMaxMpFpNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 107), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMaxMpFpNum.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMaxMpFpNum.setDescription("This object allows to set the mpflow max fp number, and now only the ports on ethernet10x1GCard,\n          ethernet1x10GCard, ethernet1x10GHighPerCard, ethernet10x1GHighPerCard support this attribute. for\n          others, cann't be set and will return 0.")
cmEthernetTrafficPortJdsuLoopbackEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 108), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackEnabled.setDescription('This object allows to enable or disable jdsu loopback on this port.\n\n         Note: This object is deprecated.')
cmEthernetTrafficPortJdsuLoopbackVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 109), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackVlanId.setDescription('This object allows to set the jdsu loopback vlan.\n         if status is jdsu-terminal-port-tailend(19) or jdsu-facility-port-tailend(21), \n         then VID is 0 means not applicable.\n\n         Note: This object is deprecated.')
cmEthernetTrafficPortIngressPopPriorityVidEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 110), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPopPriorityVidEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressPopPriorityVidEnabled.setDescription("This object defines the Ingress PopPriorityVid enable or disable of the port.\n          If it is enabled, then incoming priority tagged \n          packet's VID is swapped to Priority VLAN ID.\n          \n          This attribute has been deprecated and is supported only on EG-X. \n          Please use cmEthernetTrafficPortIngressSwapPriorityVIDEnabled")
cmEthernetTrafficPortRxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 111), RxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiAction.setDescription('This object allows to specify\n              the Receive DEI Action.')
cmEthernetTrafficPortTxDeiAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 112), TxDeiAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiAction.setDescription('This object allows to specify\n              the Transmit DEI Action.')
cmEthernetTrafficPortRxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 113), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRxDeiOuterTagType.setDescription('This object allows to specify\n              the Receive DEI Outer Tag Type.')
cmEthernetTrafficPortTxDeiOuterTagType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 114), DeiOuterTagType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiOuterTagType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTxDeiOuterTagType.setDescription('This object allows to specify\n              the Transmit DEI Outer Tag Type.')
cmEthernetTrafficPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 115), CmEthernetSvcPortMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMode.setDescription('This object allows specification of whether the \n              Ethernet Traffic Port is in a connection-oriented \n              (offering VLAN based services) mode or connection-less \n              (offering MAC based services) mode.')
cmEthernetTrafficPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 116), CmEthernetSvcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortServiceType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortServiceType.setDescription('This object allows specification of whether the \n              Ethernet Traffic Port provides transparent port based services,\n              or multi-flow VLAN based services.')
cmEthernetTrafficPortLoopbackSourceMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 117), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacControlEnabled.setDescription('This object allows to Enable/Disable the Traffic Port Source MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetTrafficPortLoopbackDestMacControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 118), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacControlEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacControlEnabled.setDescription('This object allows to Enable/Disable the Traffic Port Destination MAC \n         Address frame matching criteria for all streams. \n         Not applicable for: efm-oam-remote, efm-oam-remote-timed.')
cmEthernetTrafficPortLoopbackSourceMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 119), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackSourceMacAddress.setDescription('This object allows to set Traffic Port Source MAC Address for frame \n          matching when Traffic Port Source MAC Control is enabled.')
cmEthernetTrafficPortLoopbackDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 120), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackDestMacAddress.setDescription('This object allows to set Traffic Port Destination MAC Address for frame \n          matching when Traffic Port Destination MAC Control is enabled.')
cmEthernetTrafficPortLoopbackBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 121), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackBlockingEnabled.setDescription('This object allows frame blocking when loopback is active.\n         - True: Blocks frames in the non-loopback direction \n           that match the PORT or VLAN received in the \n           non-loopback direction. Discards  frames \n           in the loopback direction that match \n           the PORT or VLAN, but do not match \n           the MAC address criteria,\n         - False: No blocking of frames.')
cmEthernetTrafficPortMediaTypeAutoSelected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 122), EthernetMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaTypeAutoSelected.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMediaTypeAutoSelected.setDescription('This object provides the auto selected Ethernet Media of the\n             Ethernet Traffic Port.')
cmEthernetTrafficPortLowLatencyQueuingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 123), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLowLatencyQueuingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLowLatencyQueuingEnabled.setDescription('This object allows to Enable/Disable the Low Latency Queuing on\n             the Ethernet Traffic Port.')
cmEthernetTrafficPortDiagnosticMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 124), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosticMacAddress.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortDiagnosticMacAddress.setDescription('This object describes the diagnose mac address for SAT, ECPA, JDSU, Loopback with Override SA etc.')
cmEthernetTrafficPortIngressSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 125), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressSwapPriorityVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortIngressSwapPriorityVIDEnabled.setDescription("This object defines the Ingress Swap Priority Vid enable or disable of the port.\n          If it is enabled, then incoming priority tagged \n          packet's VID is swapped to Priority VLAN ID.")
cmEthernetTrafficPortEgressSwapPriorityVIDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 126), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressSwapPriorityVIDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortEgressSwapPriorityVIDEnabled.setDescription('This object defines the egress Swap Priority Vid enable or disable of the port.\n          If it is enabled, the outgoing packets with VID=Priority VLAN ID \n          will be swapped back to VID=0.')
cmEthernetTrafficPortSwapPriorityVID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 127), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSwapPriorityVID.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSwapPriorityVID.setDescription('This object allows to specify the Ethernet Priority VLAN Id \n          to replace the null-tagged or priority tagged frames in the \n          to ingress direction.  This object is only applicable \n          for connection-oriented, evpl service type.')
cmEthernetTrafficPortExpDEEncType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 128), PcpDEEncType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEEncType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEEncType.setDescription('This is a port level control that specifies the mode of drop\n         eligibility encoding in exp bits of the VLAN tag.')
cmEthernetTrafficPortExpDEPairsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 129), PcpDEPairsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEPairsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortExpDEPairsAction.setDescription('This object allows the SNMP user to manage the Priority \n         Code Point (PCP) Drop Eligibility Pairs.  When the\n         cmEthernetTrafficPortExpDEEncType is of type 7p1d, 6p2d, 5p3d,\n         the cmEthernetTrafficPortExpDEPairTable can be used to specify \n         alternate pairs of priorities to specify drop eligibility/\n         ineligibility.')
cmEthernetTrafficPortJdsuLoopbackSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 130), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackSrcIp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuLoopbackSrcIp.setDescription('This object is applicable when there is jdsu l3 loopback.')
cmEthernetTrafficPortTxSsm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 131), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTxSsm.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTxSsm.setDescription('This object allows to manage (enable/disable) TX SMM on OSA540X ethernet port.')
cmEthernetTrafficPortRxSsmQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 132), SynceRxSsmQl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRxSsmQL.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRxSsmQL.setDescription('This object allows to manage how RX quality level is utilized on OSA540X ethernet port.')
cmEthernetTrafficPortSyncEMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 133), SynceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEMode.setDescription('This object allows to manage SyncE mode (master or slave) on OSA540X ethernet port.')
cmEthernetTrafficPortSyncEServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 134), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailableTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailableTime.setDescription('This object allows to manage service available time (seconds) for SYNCE.')
cmEthernetTrafficPortSyncEServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 135), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceUnavailableTime.setDescription('This object allows to manage service unavailable time (seconds) for SYNCE.')
cmEthernetTrafficPortSyncEServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 136), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailablePercentage.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSyncEServiceAvailablePercentage.setDescription('This object allows to manage service available in percentage [XXX.YY%] for SYNCE.')
cmEthernetTrafficPortWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 137), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqSegmentationCOS.setDescription('This object is used to specify the wfq segmentation cos value.')
cmEthernetTrafficPortWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 138), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupCOS.setDescription('This object is used to specify the wfq group cos value.')
cmEthernetTrafficPortWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 139), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirLo.setDescription('This object is used to specify the wfq group eir low 32 bits value.')
cmEthernetTrafficPortWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 140), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortWfqGroupEirHi.setDescription('This object is used to specify the wfq group eir high 32 bits value.')
cmEthernetTrafficPortOuterTagTpidOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 141), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpidOverride.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpidOverride.setDescription('This object allows enabling/disabling of Outer Tag TPID override.\n          When enabled, values in Outer Tag TPID is applicable on egress\n          Ethernet Traffic Port.')
cmEthernetTrafficPortOuterTagTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 142), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortOuterTagTpid.setDescription('This object allows to specify the egress Outer Tag TPID \n          on the Ethernet Traffic Port.')
cmEthernetTrafficPortSfpTxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 143), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpTxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpTxPowerLevel.setDescription('This object provides the SFP TX power level in dBm.\n          The format would be [+/-]XX.YYYY. \n          Note: the sign [+/-] and the decimal point (.YYYY) are optional.')
cmEthernetTrafficPortSfpRxPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 144), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpRxPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpRxPowerLevel.setDescription('This object provides the SFP TX power level in dBm.\n          The format would be [+/-]XX.YYYY. \n          Note: the sign [+/-] and the decimal point (.YYYY) are optional.')
cmEthernetTrafficPortBwResourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 145), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBwResourcePort.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortBwResourcePort.setDescription('Specifies a port whose bandwidth resources will be used.\n          This object is applicable only for VM Server ports.')
cmEthernetTrafficPortSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpName.setDescription('This object provides the official name of the SFP.')
cmEthernetTrafficPortSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 147), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpHardwareRevision.setDescription('This object provides the hardware revision of the SFP.')
cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 148), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl.setDescription('Control that enables/disables Test Reflector IPv4 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetTrafficPortLoopbackTestReflectorIPv4Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 149), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv4Address.setDescription('This is the Test Reflector Interface IPv4 address.')
cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 150), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl.setDescription('Control that enables/disables Test Reflector IPv6 Address\n          to be used for Test Reflector IP Interface.')
cmEthernetTrafficPortLoopbackTestReflectorIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 151), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6Address.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLoopbackTestReflectorIPv6Address.setDescription('This is the Test Reflector Interface IPv6 address.')
cmEthernetTrafficPortSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 152), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpIdentifierValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortSfpIdentifierValue.setDescription('This object provides the SFP identifier value.')
cmEthernetTrafficPortPlugType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 153), PlugType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugType.setDescription("This specifies the port's plug type.")
cmEthernetTrafficPortPlugMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 154), PlugMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugMode.setDescription('This specifies if the plug is acting as head-end or tail-end.')
cmEthernetTrafficPortPlugGMetroAutoTuningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 155), GMetroAutoTuningMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugGMetroAutoTuningMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugGMetroAutoTuningMode.setDescription('This is tuning mode for G.Metro plug.')
cmEthernetTrafficPortPlugChannelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 156), ChannelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugChannelType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugChannelType.setDescription("This specifies plug's type channel configuration.")
cmEthernetTrafficPortPlugITUCbandChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 157), ITUCBandChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugITUCbandChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugITUCbandChannel.setDescription("If Channel Type is ITU-CBAND, this is\n          the local plug's ITU C-band channel.")
cmEthernetTrafficPortPlugRelativeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 158), RelativeChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugRelativeChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugRelativeChannel.setDescription("If Channel Type is RELATIVE-CHANNEL-NUMBER, this is\n          the local plug's relative channel.")
cmEthernetTrafficPortPlugFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 159), FrequencyIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugFrequency.setDescription("If Channel Type is FREQUENCY, this is the local plug's frequency.")
cmEthernetTrafficPortPlugOutOfBandChannelStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 160), OutOfBandChannelStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugOutOfBandChannelStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPlugOutOfBandChannelStatus.setDescription('Status of the out of band channel between the local and remote plug.')
cmEthernetTrafficPortRemotePlugITUCbandChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 161), ITUCBandChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugITUCbandChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugITUCbandChannel.setDescription("If Channel Type is ITU-CBAND, this is the remote plug's\n          ITU C-band channel.")
cmEthernetTrafficPortRemotePlugRelativeChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 162), RelativeChannelIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugRelativeChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugRelativeChannel.setDescription("If Channel Type is RELATIVE-CHANNEL-NUMBER, this is\n          the remote plug's relative channel.")
cmEthernetTrafficPortRemotePlugFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 163), FrequencyIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemotePlugFrequency.setDescription("If Channel Type is FREQUENCY, this is the remote plug's frequency.")
cmEthernetTrafficPortRemoteSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 164), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpVendorName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpVendorName.setDescription('This object provides the vendor name of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 165), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpName.setDescription('This object provides the official name of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 166), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpPartNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpPartNumber.setDescription('This object provides the part number of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 167), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpHardwareRevision.setDescription('This object provides the hardware revision of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 168), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpSerialNumber.setDescription('This object provides the serial number of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 169), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpDateOfManufacture.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpDateOfManufacture.setDescription('This object provides the date of manufacture of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLinkLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLinkLength.setDescription('This object provides Link Length of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserWaveLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserWaveLength.setDescription('This object provides Laser Wave Length in nano meters of\n          the Remote SFP.')
cmEthernetTrafficPortRemoteSfpLaserFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 172), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserFrequency.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpLaserFrequency.setDescription('This object provides frequency of the Remote SFP, the step is 1GHZ.')
cmEthernetTrafficPortRemoteSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 173), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpMediaType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpMediaType.setDescription('This object provides Media Type of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 174), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpConnectorValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpConnectorValue.setDescription('This object provides Connector Type of the Remote SFP.')
cmEthernetTrafficPortRemoteSfpIdentifierValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 27, 1, 175), SfpIdentifierValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpIdentifierValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRemoteSfpIdentifierValue.setDescription('This object provides the Remote SFP identifier value.')
cmElineFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28), )
if mibBuilder.loadTexts: cmElineFlowTable.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowTable.setDescription('A list of entries corresponding to Flows \n             for configuration purposes.')
cmElineFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmElineFlowIndex"))
if mibBuilder.loadTexts: cmElineFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowEntry.setDescription('A conceptual row in the cmElineFlowTable. These entries represent\n             an Flow.')
cmElineFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowIndex.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowIndex.setDescription('The integer index value corresponding to an Flow.')
cmElineFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowCircuitName.setDescription('This object allows SNMP management entities to provide a\n          circuit identifier with the Flow.')
cmElineFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmElineFlowAdminState.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowAdminState.setDescription('This object represents the Administrative State of the Flow.')
cmElineFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmElineFlowOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowOperationalState.setDescription('This object represents the Operational State of the Flow.')
cmElineFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmElineFlowSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowSecondaryState.setDescription('This object represents the Secondary State of the Flow.')
cmElineFlowFP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowFP1.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowFP1.setDescription('This object allows SNMP management entities to provide a\n          flowpoint with the Flow.')
cmElineFlowFP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 7), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowFP2.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowFP2.setDescription('This object allows SNMP management entities to provide another\n          flowpoint with the Flow.')
cmElineFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowStorageType.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowStorageType.setDescription('The type of storage configured for this entry.')
cmElineFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 28, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmElineFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmElineFlowRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmElineFlowRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmElineFlowRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmElineFlowRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29), )
if mibBuilder.loadTexts: cmFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointTable.setDescription('A list of entries corresponding to FlowPoint\n             for configuration purposes.')
cmFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"))
if mibBuilder.loadTexts: cmFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEntry.setDescription('A conceptual row in the cmFlowPointTable. These entries represent\n             an FlowPoint.\n             If the flowpoint attached to a lag, the slotIndex should \n             be 255(255 is used to identify the flowpoint belongs to lag), \n             and the cmEthernetTrafficPortIndex should be the f3LagIndex.')
cmFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointIndex.setDescription('The integer index value corresponding to an FlowPoint.')
cmFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCircuitName.setDescription('This object allows SNMP management entities to provide a\n          circuit identifier with the FlowPoint.')
cmFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAdminState.setDescription('This object represents the Administrative State of the FlowPoint.')
cmFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointOperationalState.setDescription('This object represents the Operational State of the FlowPoint.')
cmFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSecondaryState.setDescription('This object represents the Secondary State of the FlowPoint.')
cmFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 6), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointAssociatedFlowId.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAssociatedFlowId.setDescription('This object provides the association of an Flow with an FlowPoint.')
cmFlowPointIngressMultiCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressMultiCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointIngressMultiCOS.setDescription('This object allows specification of ingress multiple COS (Class of Service) FlowPoint.')
cmFlowPointIngressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointIngressCOS.setDescription('This object allows specification of ingress COS (Class of Service) FlowPoint.')
cmFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointIngressVlanMemberList.setDescription('It allows specification of VLAN members of the FlowPoint.\n          VLAN members are comma separated, of the form X-Y where X is the\n          VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n          the form X-* or X (vlan X with all priorities), \n          *-Y (all vlans with priority Y), and X1:X2 \n          (range of vlans from X1 to X2, all priorities). Members \n          with specific VLAN Id and specific VLAN Priority are not supported.\n          Once the flowpoint is created, this attribute can only be updated\n          using cmFlowPointVlanMemberAction and cmFlowPointVlanMemberActionVlan objects.')
cmFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 10), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointVlanMemberAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointVlanMemberAction.setDescription('This object allows to add or remove the VLAN members specified by\n          cmFlowPointVlanMemberActionVlan object.  SNMP manager must first\n          configure the VLAN member to be added/removed in the object\n          cmFlowPointVlanMemberActionVlan and then should specify\n          cmFlowPointVlanMemberAction on whether to add/remove the specified\n          VLAN member.')
cmFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointVlanMemberActionVlan.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointVlanMemberActionVlan.setDescription('This object allows adding/removing VLAN members\n          to a flowpoint.\n          VLAN member is of the form X-Y where X is the\n          VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n          the form X-* (vlan X with all priorities), \n          *-Y (all vlans with priority Y), and X1:X2 \n          (range of vlans from X1 to X2, all priorities).  \n          Members with specific VLAN Id and \n          specific VLAN Priority are not supported.\n          In order to add/remove VLAN member to a flow, user must\n          specify this object with appropriate VLAN and then invoke\n          cmFlowPointVlanMemberAction.')
cmFlowPointIngressUntaggedFrameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointIngressUntaggedFrameEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointIngressUntaggedFrameEnabled.setDescription('This object allows to specify whether or not the flowpoint\n          supports untagged frame.')
cmFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 13), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCTagControl.setDescription("This object allows specification of the tag management \n          operation on the C-TAG.  Supported types are 'push', 'pushvid',\n          'swaptag', 'swapvid' and 'none'. If the type is 'push', \n          the VLAN Id (cmFlowPointCTagVlanId) and priority\n          (cmFlowPointCTagVlanPriority) are pushed onto the frame;\n          if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n          the Priority is copied from incoming tag's priority;\n          if the type is 'swaptag', both VLAN Id and Priority (15 bits) \n          are swapped with the specified cmFlowPointCTagVlanId and \n          cmFlowPointCTagVlanPriority;\n          if the type is 'swapvid', only the VLAN Id (12 bits) are \n          swapped with the specified cmFlowPointCTagVlanId; \n          if the type is 'none', no C-TAG management is performed.")
cmFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 14), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCTagVlanId.setDescription("This object allows specification of the VLAN Id to\n          be pushed or swapped, based on the value of cmFlowPointIngressCTagControl.\n          It is applicable for 'push', 'swaptag', 'swapvid' and 'pushvid'\n          control types.")
cmFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 15), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n          be pushed or swapped, based on the value of cmFlowPointIngressCTagControl.\n          It is applicable for 'push' and 'swaptag' control types.")
cmFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 16), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagControl.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSTagControl.setDescription("This object allows specification of the tag management \n          operation on the S-TAG.  Supported types are 'push', 'pushvid',\n          'swaptag', 'swapvid' and 'none'. If the type is 'push', \n          the VLAN Id (cmFlowPointSTagVlanId) and priority\n          (cmFlowPointSTagVlanPriority) are pushed onto the frame;\n          if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n          the Priority is copied from incoming tag's priority;\n          if the type is 'swaptag', both VLAN Id and Priority (15 bits) \n          are swapped with the specified cmFlowPointSTagVlanId and \n          cmFlowPointSTagVlanPriority;\n          if the type is 'swapvid', only the VLAN Id (12 bits) are \n          swapped with the specified cmFlowPointSTagVlanId; \n          if the type is 'none', no S-TAG management is performed.")
cmFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 17), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSTagVlanId.setDescription("This object allows specification of the VLAN Id to\n          be pushed or swapped, based on the value of cmFlowPointIngressSTagControl.\n          It is applicable for 'push', 'swaptag', 'swapvid' and 'pushvid'\n          control types.")
cmFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 18), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointSTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n          be pushed or swapped, based on the value of cmFlowPointIngressSTagControl.\n          It is applicable for 'push' and 'swaptag' control types.")
cmFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 19), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEgressOuterTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio Mapping to swap the priority of outer tag.\n         When Enabled,it indicates that the operation specified in the EgressPrioMapTable would be \n         applied to Flow for specified COS.\n         When Disabled,the EgressPrioMapTable operations are ignored for specified Flow COS.')
cmFlowPointColorMarkingSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 20), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointColorMarkingSupported.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointColorMarkingSupported.setDescription('This object defines the egress color marking. If set to Enabled, the DEI bit of S-tag pushed \n          will be remarked according the meter result. If set to Disabled, the DEI bit is forced to 0.')
cmFlowPointAssociatedAclProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 21), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAssociatedAclProfile.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAssociatedAclProfile.setDescription('This object provides the association of an Flow with an ACL profile.')
cmFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointSESFramesLossThresholdRatio.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSESFramesLossThresholdRatio.setDescription('This object is used to specify the frame-loss ratio \n          per flow that starts counting Severely Errored Seconds (SES) \n          on the flowpoint.\n          This functionality is applicable if the flowpoint is monitored\n          using the Y.1731 ESA functionality.')
cmFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 23), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStorageType.setDescription('The type of storage configured for this entry.')
cmFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 24), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmFlowPointDefaultMemberEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointDefaultMemberEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointDefaultMemberEnabled.setDescription('defaultMemberEnabled with enabled means that on this FP, \n            the membership is all the tag packets without match any \n            other membership associated to the port. Untagged means \n            untagged flow. Default only care tagged flow.')
cmFlowPointMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited per FP.')
cmFlowPointMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per FP\n             When cmFlowPointMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmFlowPointMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per FP\n             When cmFlowPointMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmFlowPointBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per FP.')
cmFlowPointBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per FP\n             When cmFlowPointBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmFlowPointBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per FP\n             When cmFlowPointBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmFlowPointSplitHorizonGroupOID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 32), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointSplitHorizonGroupOID.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointSplitHorizonGroupOID.setDescription('Specifies the Split-Horizon Group EID. If there is no SHG, the value is none.')
cmFlowPointLoopAvoidance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 33), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointLoopAvoidance.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointLoopAvoidance.setDescription('EID of this associated Loop Avoidance protocol entity.\n             A value of NONE indicates there is no loop avoidance protocol.\n             Currently ERP EID is filled when ELAN service is created.')
cmFlowPointHierarchicalCosEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointHierarchicalCosEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHierarchicalCosEnabled.setDescription('Enable or Disable Hierarchical COS shaping (flow shaping).')
cmFlowPointWfqQid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqQid.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqQid.setDescription('This attribute description the WFQ Qid.')
cmFlowPointWfqOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqOutPriority.setDescription('This attribute description the WFQ out priority.')
cmFlowPointMaximumBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 37), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMaximumBWLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMaximumBWLo.setDescription('This attribute description the flow point maximum bandwidth.\n\n             This objects only represents low 32 bits.')
cmFlowPointMaximumBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 38), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMaximumBWHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMaximumBWHi.setDescription('This attribute description the flow point maximum bandwidth.\n\n             This objects only represents high 32 bits.')
cmFlowPointGuaranteedBWLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 39), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWLo.setDescription('This attribute description the flow point guaranteed bandwidth.\n\n             This objects only represents low 32 bits.')
cmFlowPointGuaranteedBWHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 40), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointGuaranteedBWHi.setDescription('This attribute description the flow point guaranteed bandwidth.\n\n             This objects only represents high 32 bits.')
cmFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 41), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
cmFlowPointMcastAndBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 42), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitEnabled.setDescription('Whether multicast packets and broadcast packets need be limited per FP.')
cmFlowPointMcastAndBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 43), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets and broadcast packets per FP\n             When cmFlowPointMcastAndBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmFlowPointMcastAndBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 44), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointMcastAndBcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets and broadcast packets per FP\n             When cmFlowPointMcastAndBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmFlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 45), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEgressShapingType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEgressShapingType.setDescription('This object allows specification of Shaping Type for Flow Point.\n        For 8.1.1 release, only flow-based Shaping Type is supported.')
cmFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 46), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEgressInnerTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio\n        Mapping to swap the priority of inner tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled, the EgressPrioMapTable operations are ignored\n        for specified Flow COS.')
cmFlowPointAutoBandwidthConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 47), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAutoBandwidthConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAutoBandwidthConfigEnabled.setDescription('This object specifies the shaper bandwidth is automatically adjusted \n        by the system. For a single COS Flow Point, the shaper EIR bandwidth is \n        set to the maximum port bandwidth; the shaper CIR is set to the available \n        port bandwidth multiplied by the value of the cmFlowPointAutoCIRPercentage\n        object. For a Hierarchical-COS Flow Point, the cmFlowPointMaximumBWLo and\n        cmFlowPointMaximumBWHi are set to the maximum port bandwidth; \n        the cmFlowPointGuaranteedBWLo and cmFlowPointGuaranteedBWHi are set to \n        the available port bandwidth multiplied by the value of the \n        cmFlowPointAutoCIRPercentage object. The value of this object must be FALSE \n        when cmFlowPointIngressMultiCOSEnabled is TRUE and \n        cmFlowPointHierarchicalCOSEnabled is FALSE.')
cmFlowPointAutoCIRPercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointAutoCIRPercentage.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAutoCIRPercentage.setDescription('This object specifies the percentage of available shaper CIR to be assigned \n        to this Flow Point when cmFlowPointAutoBandwidthConfigEnabled is TRUE.')
cmFlowPointFrameFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 49), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointFrameFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointFrameFwdEnabled.setDescription('When enabled Flow Point will forward frames it receives. When disabled, \n        the Flow Point will not forward frames it receives.')
cmFlowPointUsePortPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 50), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointUsePortPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointUsePortPrioMapProfile.setDescription("This indicates whether the flow point is using, if true, the port's \n         Priority Mapping Profile or, if false, is using its own\n         Priority Mapping Profile.")
cmFlowPointRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 51), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRefEoMplsPwObject.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointRefEoMplsPwObject.setDescription('This object specifies EoMpls Pw object OID.')
cmFlowPointElmiEvcIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 52), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointElmiEvcIdentifier.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointElmiEvcIdentifier.setDescription('This object specifies FlowPoint Evc Identifier \n          required for E-LMI feature.')
cmFlowPointRefElpObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 53), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointRefElpObject.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointRefElpObject.setDescription('This object specifies ELP object OID.')
cmFlowPointEfEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 54), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointEfEnabled.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEfEnabled.setDescription('When enabled FlowPoint is configured to monitor elephant(large) flows. When disabled, elephant flow management\n        is not supported on the FlowPoint.')
cmFlowPointEfIdentificationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 55), EfIdentificationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfIdentificationType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEfIdentificationType.setDescription('The Elephant Flows are identified per flowpoint. This object specifies the type of Elephant Flow\n        identification based on specific fields in the L2-L4 headers. The five-tuple identification includes the\n        Source MAC Address, Destination MAC Address, Source IP Address, Destination IP Address and IP Protocol.\n        The seven-tuple identification includes the five-tuple fields as well as Source Port and Destination Port. \n        For Source and Destination ports, the supported protocols are TCP, UDP and SCTP.')
cmFlowPointEfRateThresholdLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdLo.setDescription('This object specifies the threshold for the rate to declare a flow\n             as an Elephant Flow. If cmFlowPointEfEnabled is enabled and this\n             is set to 0, it is same as cmFlowPointEfEnabled control being disabled.\n\n             This object only represents lower-order 32 bits.')
cmFlowPointEfRateThresholdHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEfRateThresholdHi.setDescription('This object specifies the threshold for the rate to declare a flow\n             as an Elephant Flow. If cmFlowPointEfEnabled is enabled and this\n             is set to 0, it is same as cmFlowPointEfEnabled control being disabled.\n\n             This object only represents higher-order 32 bits.')
cmFlowPointAclNoMatchDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 58), AclNoMatchDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointAclNoMatchDisposition.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointAclNoMatchDisposition.setDescription('This attribute allows specify ACL no match disposition type')
cmFlowPointEfIdentificationFields = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 59), EfIdentificationFieldType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointEfIdentificationFields.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointEfIdentificationFields.setDescription('The Elephant Flows are identified per flowpoint. This object specifies the type of Elephant Flow\n        identification based on specific fields in the L2-L4 headers. The identification includes the\n        Source MAC Address, Destination MAC Address, Source IP Address, Destination IP Address, IP Protocol,\n        Source Port and Destination Port. \n        For Source and Destination ports, the supported protocols are TCP, UDP and SCTP.')
cmFlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 60), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqSegmentationCOS.setDescription('This object is used to specify wfq segmentation COS value.')
cmFlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqGroupCOS.setDescription('This object is used to specify wfq group COS value.')
cmFlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 62), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirLo.setDescription('This object is used to specify wfq group EIR low 32 bits value.')
cmFlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 29, 1, 63), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointWfqGroupEirHi.setDescription('This object is used to specify wfq group EIR high 32 bits value.')
cmOAMFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30), )
if mibBuilder.loadTexts: cmOAMFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointTable.setDescription('A list of entries corresponding to OAMFlowPoint\n             for configuration purposes.')
cmOAMFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmOAMFlowPointIndex"))
if mibBuilder.loadTexts: cmOAMFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointEntry.setDescription('A conceptual row in the cmOAMFlowPointTable. These entries represent\n             an FlowPoint.\n             If the oam flowpoint attached to a lag, the slotIndex should \n             be 255(255 is used to identify the oam flowpoint belongs to lag), \n             and the cmEthernetTrafficPortIndex should be the f3LagIndex.')
cmOAMFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointIndex.setDescription('The integer index value corresponding to an OAMFlowPoint.')
cmOAMFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointCircuitName.setDescription('This object allows SNMP management entities to provide a\n          circuit identifier with the OAMFlowPoint.')
cmOAMFlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointAdminState.setDescription('This object represents the Administrative State of the OAMFlowPoint.')
cmOAMFlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointOperationalState.setDescription('This object represents the Operational State of the OAMFlowPoint.')
cmOAMFlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointSecondaryState.setDescription('This object represents the Secondary State of the OAMFlowPoint.')
cmOAMFlowPointIngressVlanMemberList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIngressVlanMemberList.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointIngressVlanMemberList.setDescription('It allows specification of VLAN members of the OAMFlowPoint.\n          VLAN members are comma separated, of the form X-Y where X is the\n          VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n          the form X-* or X (vlan X with all priorities), \n          *-Y (all vlans with priority Y), and X1:X2 (range of vlans from X1 to X2, all priorities). \n          Members with specific VLAN Id and specific VLAN Priority are not supported.\n          Once the flowpoint is created, this attribute can only be updated\n          using cmOAMFlowPointVlanMemberAction and cmOAMFlowPointVlanMemberActionVlan objects.')
cmOAMFlowPointVlanMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 7), FlowVlanActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberAction.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberAction.setDescription('This object allows to add or remove the VLAN members specified by\n          cmOAMFlowPointVlanMemberActionVlan object.  SNMP manager must first\n          configure the VLAN member to be added/removed in the object\n          cmOAMFlowPointVlanMemberActionVlan and then should specify\n          cmOAMFlowPointVlanMemberAction on whether to add/remove the specified\n          VLAN member.')
cmOAMFlowPointVlanMemberActionVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberActionVlan.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointVlanMemberActionVlan.setDescription('This object allows adding/removing VLAN members\n         to a oam flowpoint.\n           VLAN member is of the form X-Y where X is the\n           VLAN Id and Y is the VLAN Priority.  VLAN members can be of\n           the form X-* (vlan X with all priorities), \n           *-Y (all vlans with priority Y), and X1:X2 \n           (range of vlans from X1 to X2, all priorities).  \n           Members with specific VLAN Id and \n           specific VLAN Priority are not supported.\n           In order to add/remove VLAN member to a flow, user must\n           specify this object with appropriate VLAN and then invoke\n           cmOAMFlowPointVlanMemberAction.')
cmOAMFlowPointIngressUntaggedFrameSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointIngressUntaggedFrameSupported.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointIngressUntaggedFrameSupported.setDescription('This object allows to specify whether or not the OAMFlowPoint\n          supports untagged frame.')
cmOAMFlowPointSESFramesLossThresholdRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointSESFramesLossThresholdRatio.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointSESFramesLossThresholdRatio.setDescription('This object is used to specify the frame-loss ratio \n          per flow that starts counting Severely Errored Seconds (SES) \n          on the oam flowpoint.\n          This functionality is applicable if the oam flowpoint is monitored\n          using the Y.1731 ESA functionality.')
cmOAMFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStorageType.setDescription('The type of storage configured for this entry.')
cmOAMFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 30, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmOAMFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmOAMFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmOAMFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmOAMFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmIngressPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31), )
if mibBuilder.loadTexts: cmIngressPrioMapTable.setStatus('current')
if mibBuilder.loadTexts: cmIngressPrioMapTable.setDescription('A list of entries corresponding to Ingress Priority Mapping \n             for configuration purposes.')
cmIngressPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmIngressPrioMapIndex"))
if mibBuilder.loadTexts: cmIngressPrioMapEntry.setStatus('current')
if mibBuilder.loadTexts: cmIngressPrioMapEntry.setDescription('A conceptual row in the cmIngressPrioMapTable.')
cmIngressPrioMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmIngressPrioMapIndex.setStatus('current')
if mibBuilder.loadTexts: cmIngressPrioMapIndex.setDescription('The integer index value corresponding to a priority value\n             based on the cmEthernetTrafficPortPrioMapMode.\n             In case of TOS and 8021P, valid indices are 1 to 8,\n             in case of DSCP, valid indices are 1 to 64.')
cmIngressPrioMapInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIngressPrioMapInPriority.setStatus('current')
if mibBuilder.loadTexts: cmIngressPrioMapInPriority.setDescription('The integer index value corresponding to a priority value\n             based on the cmEthernetTrafficPortIngressPrioMapMode.\n             In case of TOS and 8021P, valid indices are 0 to 7,\n             in case of DSCP, valid indices are 0 to 63.')
cmIngressPrioMapCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 31, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmIngressPrioMapCOS.setStatus('current')
if mibBuilder.loadTexts: cmIngressPrioMapCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmEgressPrioMapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32), )
if mibBuilder.loadTexts: cmEgressPrioMapTable.setStatus('current')
if mibBuilder.loadTexts: cmEgressPrioMapTable.setDescription('A list of entries corresponding to Egress Priority Mapping \n             for configuration purposes.')
cmEgressPrioMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEgressCOSIndex"))
if mibBuilder.loadTexts: cmEgressPrioMapEntry.setStatus('current')
if mibBuilder.loadTexts: cmEgressPrioMapEntry.setDescription('A conceptual row in the cmEgressPrioMapTable.')
cmEgressCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEgressCOSIndex.setStatus('current')
if mibBuilder.loadTexts: cmEgressCOSIndex.setDescription('The integer index used to uniquely identify\n               this Egress Priority Map Entry ')
cmEgressCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressCOS.setStatus('current')
if mibBuilder.loadTexts: cmEgressCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmEgressOuterTagCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressOuterTagCtrl.setStatus('current')
if mibBuilder.loadTexts: cmEgressOuterTagCtrl.setDescription('This object defines the behavior of the Priority portion of the frame transmit out. \n             If NONE is selected, the outgoing priority bits are left unchanged. \n             If SWAP is selected, the priority bits are changed by the value specified \n             in the Outer-Tag Priority parameter.')
cmEgressOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 32, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEgressOuterTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmEgressOuterTagPriority.setDescription('This object defines the new priority bits to be used, \n             it is available only if Outer-Tag PRIOCTL is set to SWAP.')
cmPortCpdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33), )
if mibBuilder.loadTexts: cmPortCpdProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileTable.setDescription('A list of entries corresponding to System \n             Control Protocol Disposition V3 profile.')
cmPortCpdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPortCpdProfileIndex"))
if mibBuilder.loadTexts: cmPortCpdProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileEntry.setDescription('A conceptual row in the cmPortCpdProfileTable. \n             These entries represent a Control Protocol Disposition \n             of a port filtering criteria of the System.')
cmPortCpdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPortCpdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileIndex.setDescription('Unique Index value to access the CPD profile row.')
cmPortCpdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileName.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileName.setDescription('This object describes the alias of the cpd V3 profile entry.')
cmPortCpdProfileCiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmPortCpdProfileCiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmPortCpdProfileIslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileIslDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileIslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmPortCpdProfilePagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfilePagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmPortCpdProfileUdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileUdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileUdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmPortCpdProfileCdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileCdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmPortCpdProfileVtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileVtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileVtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmPortCpdProfileDtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileDtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileDtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmPortCpdProfilePvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfilePvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmPortCpdProfileUplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileUplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileUplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmPortCpdProfileVlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileVlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileVlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmPortCpdProfileL2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileL2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileL2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmPortCpdProfileBridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmPortCpdProfileBridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmPortCpdProfileBPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileBPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmPortCpdProfilePauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfilePauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmPortCpdProfileLACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileLACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmPortCpdProfileLACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileLACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmPortCpdProfileEfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileEfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileEfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmPortCpdProfileSSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileSSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileSSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmPortCpdProfilePortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfilePortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfilePortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmPortCpdProfileBridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileBridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmPortCpdProfileBridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmPortCpdProfileLANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileLANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmPortCpdProfileGARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmPortCpdProfileGARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmPortCpdProfileGMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileGMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmPortCpdProfileGVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileGVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:22).')
cmPortCpdProfileGARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileGARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileGARPDispType.setDescription('Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmPortCpdProfileLldpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileLldpDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmPortCpdProfileLldpDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         Control Protocol Disposition for LLDP.')
cmPortCpdProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPortCpdProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileStorageType.setDescription('The type of storage configured for this entry.')
cmPortCpdProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPortCpdProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmCpdProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmCpdProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmCpdProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmPortCpdProfileMac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmPortCpdProfileMac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmPortCpdProfileMac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmPortCpdProfileMac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmPortCpdProfileMac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmPortCpdProfileMac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmPortCpdProfileMac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmPortCpdProfileMac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmPortCpdProfileMac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmPortCpdProfileMac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmPortCpdProfileMac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmPortCpdProfileMac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmPortCpdProfileMac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmPortCpdProfileMac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmPortCpdProfileMac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmPortCpdProfileMac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileMac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileMac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmPortCpdProfileNearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileNearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileNearestLLDPDispType.setDescription('The nearest lldp Disposition type.')
cmPortCpdProfileNonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileNonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileNonTpmrLLDPDispType.setDescription('The non tp mr lldp Disposition type.')
cmPortCpdProfileCustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileCustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileCustomerLLDPDispType.setDescription('The customer lldp Disposition type.')
cmPortCpdProfileELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 33, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPortCpdProfileELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmPortCpdProfileELMIDispType.setDescription('The ELMI Disposition type.')
cmFlowPointCpdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34), )
if mibBuilder.loadTexts: cmFlowPointCpdProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileTable.setDescription('A list of entries corresponding to System \n             Control Protocol Disposition V3 profile.')
cmFlowPointCpdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmFlowPointCpdProfileIndex"))
if mibBuilder.loadTexts: cmFlowPointCpdProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileEntry.setDescription('A conceptual row in the cmFlowPointCpdProfileTable. \n             These entries represent a Control Protocol Disposition \n             of a flow point filtering criteria of the System.')
cmFlowPointCpdProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointCpdProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileIndex.setDescription('Unique Index value to access the CPD profile row.')
cmFlowPointCpdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileName.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileName.setDescription('This object describes the alias of the cpd V3 profile entry.')
cmFlowPointCpdProfileCiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowPointCpdProfileCiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmFlowPointCpdProfileIslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileIslDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileIslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmFlowPointCpdProfilePagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfilePagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmFlowPointCpdProfileUdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileUdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileUdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmFlowPointCpdProfileCdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileCdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmFlowPointCpdProfileVtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileVtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileVtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmFlowPointCpdProfileDtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileDtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileDtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmFlowPointCpdProfilePvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfilePvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmFlowPointCpdProfileUplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileUplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileUplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmFlowPointCpdProfileVlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileVlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileVlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmFlowPointCpdProfileL2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileL2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileL2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmFlowPointCpdProfileBridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmFlowPointCpdProfileBPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileBPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmFlowPointCpdProfilePauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfilePauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmFlowPointCpdProfileLACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmFlowPointCpdProfileLACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileLACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmFlowPointCpdProfileEfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileEfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileEfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmFlowPointCpdProfileSSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileSSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileSSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmFlowPointCpdProfilePortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfilePortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfilePortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmFlowPointCpdProfileBridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowPointCpdProfileBridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmFlowPointCpdProfileLANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileLANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmFlowPointCpdProfileGARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmFlowPointCpdProfileGMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileGMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmFlowPointCpdProfileGVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileGVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:22).')
cmFlowPointCpdProfileGARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileGARPDispType.setDescription('Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmFlowPointCpdProfileLldpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileLldpDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowPointCpdProfileLldpDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         Control Protocol Disposition for LLDP.')
cmFlowPointCpdProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCpdProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileStorageType.setDescription('The type of storage configured for this entry.')
cmFlowPointCpdProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmFlowPointCpdProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmCpdProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmCpdProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmCpdProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmFlowPointCpdProfileMac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmFlowPointCpdProfileMac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmFlowPointCpdProfileMac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmFlowPointCpdProfileMac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmFlowPointCpdProfileMac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmFlowPointCpdProfileMac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmFlowPointCpdProfileMac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmFlowPointCpdProfileMac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmFlowPointCpdProfileMac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmFlowPointCpdProfileMac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmFlowPointCpdProfileMac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmFlowPointCpdProfileMac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmFlowPointCpdProfileMac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmFlowPointCpdProfileMac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmFlowPointCpdProfileMac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmFlowPointCpdProfileMac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileMac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmFlowPointCpdProfileNearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileNearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileNearestLLDPDispType.setDescription('The nearest lldp Disposition type.')
cmFlowPointCpdProfileNonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileNonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileNonTpmrLLDPDispType.setDescription('The non tp mr lldp Disposition type.')
cmFlowPointCpdProfileCustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileCustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileCustomerLLDPDispType.setDescription('The customer lldp Disposition type.')
cmFlowPointCpdProfileELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 34, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointCpdProfileELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointCpdProfileELMIDispType.setDescription('The ELMI Disposition type.')
cmEthernetTrafficPortCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35), )
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdTable.setDescription('A list of entries corresponding to Ethernet Port \n             CPD for configuration purposes.')
cmEthernetTrafficPortCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortCpdIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdEntry.setDescription('A conceptual row in the cmEthernetTrafficPortCpdTable.')
cmEthernetTrafficPortCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdIndex.setDescription('An arbitrary integer index value used to uniquely identify this CPD Service Entry.')
cmEthernetTrafficPortAssociatedCpdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 35, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortAssociatedCpdProfile.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortAssociatedCpdProfile.setDescription('An integer index value used to apply cmCpdProfile configure, corresponding to cmCpdProfileIndex.')
cmEthernetFlowPointCpdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36), )
if mibBuilder.loadTexts: cmEthernetFlowPointCpdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetFlowPointCpdTable.setDescription('A list of entries corresponding to Ethernet Flow Point \n             CPD for configuration purposes.')
cmEthernetFlowPointCpdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmEthernetFlowPointCpdIndex"))
if mibBuilder.loadTexts: cmEthernetFlowPointCpdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetFlowPointCpdEntry.setDescription('A conceptual row in the cmEthernetFlowPointCpdTable.')
cmEthernetFlowPointCpdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetFlowPointCpdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetFlowPointCpdIndex.setDescription('An arbitrary integer index value used to uniquely identify this CPD Service Entry.')
cmEthernetFlowPointAssociatedCpdProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 36, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetFlowPointAssociatedCpdProfile.setStatus('current')
if mibBuilder.loadTexts: cmEthernetFlowPointAssociatedCpdProfile.setDescription('An integer index value used to apply cmCpdProfile configure, corresponding to cmCpdProfileIndex.')
cmTrafficAclProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37), )
if mibBuilder.loadTexts: cmTrafficAclProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileTable.setDescription('A list of entries corresponding to the Traffic Profile Rules Entry. \n             It provides upto 4000 Traffic ACL Rules to be configured.')
cmTrafficAclProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmTrafficAclProfileIndex"))
if mibBuilder.loadTexts: cmTrafficAclProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileEntry.setDescription('An entry containing information applicable to a system ACL Profile that can be configured.')
cmTrafficAclProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             Traffic ACL profile entry.')
cmTrafficAclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProfileName.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileName.setDescription('This object describes the alias of the Acl profile entry.')
cmTrafficAclProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileStorageType.setDescription('The type of storage configured for this entry.')
cmTrafficAclProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 37, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmTrafficAclProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmTrafficAclProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmTrafficAclProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmTrafficAclRulesTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38), )
if mibBuilder.loadTexts: cmTrafficAclRulesTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclRulesTable.setDescription('A list of entries corresponding to the Traffic ACL Rules Entry.')
cmTrafficAclRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmTrafficAclProfileIndex"), (0, "CM-FACILITY-MIB", "cmTrafficAclRulesIndex"))
if mibBuilder.loadTexts: cmTrafficAclRulesEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclRulesEntry.setDescription('An entry containing information applicable to a system ACL Rules that can be configured.')
cmTrafficAclRulesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclRulesIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclRulesIndex.setDescription('An arbitrary integer index value used to uniquely identify\n             Traffic ACL profile entry. The manager may not assume any\n             particular semantics or meaning to this index, except that\n             it identifies a logical row in the table.')
cmTrafficAclFilterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 2), CmTrafficAclFilterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclFilterAction.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclFilterAction.setDescription("Currently,  'permit' and 'deny' are supported.")
cmTrafficAclFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 3), CmTrafficAclFilterType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclFilterType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclFilterType.setDescription('This object describes the Acl filter type.')
cmTrafficAclEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclEnabled.setDescription('This object enables/disables the Acl entity.')
cmTrafficAclSrcMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 5), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddr.setDescription('The source mac address of Acl entry.')
cmTrafficAclSrcMacAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcMacAddrEnabled.setDescription('This object enables/disables source MAC address of Acl entry.')
cmTrafficAclDstMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 7), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstMacAddr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstMacAddr.setDescription('The destination MAC address of Acl entry.')
cmTrafficAclDstMacAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstMacAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstMacAddrEnabled.setDescription('This object enables/disables destination MAC address  of Acl entry.')
cmTrafficAclSrcIpFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcIpFilterEnabled.setDescription('This object enable/disable Source IPV4 or IPV6 address filter criteria.')
cmTrafficAclDstIpFilterEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpFilterEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstIpFilterEnabled.setDescription('This object enable/disable Destination IPV4 or IPV6 address filter criteria.')
cmTrafficAclSrcIpV4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4Addr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4Addr.setDescription('The source IP address of Acl entry.')
cmTrafficAclSrcIpV4AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4AddrMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcIpV4AddrMask.setDescription('The source IP mask of Acl entry.')
cmTrafficAclDstIpV4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV4Addr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstIpV4Addr.setDescription('The destination IP address of Acl entry.')
cmTrafficAclDstIpV4AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV4AddrMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstIpV4AddrMask.setDescription('The destination IP mask of Acl entry.')
cmTrafficAclSrcIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 15), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6Addr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6Addr.setDescription('The source IPV6 address of Acl entry.')
cmTrafficAclSrcIpV6AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 16), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6AddrMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclSrcIpV6AddrMask.setDescription('The source IPV6 mask of Acl entry.')
cmTrafficAclDstIpV6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 17), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV6Addr.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstIpV6Addr.setDescription('The destination IPV6 address of Acl entry.')
cmTrafficAclDstIpV6AddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 18), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclDstIpV6AddrMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclDstIpV6AddrMask.setDescription('The destination IPV6 mask of Acl entry.')
cmTrafficAclTcpUdpSrcPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortNum.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortNum.setDescription('This object describes TCP/UDP minimum source port number of Acl entry.')
cmTrafficAclTcpUdpSrcPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortMask.setDescription('This object describes TCP/UDP maximum source port number of Acl entry.')
cmTrafficAclTcpUdpSrcPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpSrcPortEnabled.setDescription('This object enables/disables TCP/UDP source port of Acl entry.')
cmTrafficAclTcpUdpDstPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortNum.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortNum.setDescription('This object describes TCP/UDP minimum destination port number of Acl entry.')
cmTrafficAclTcpUdpDstPortMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortMask.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortMask.setDescription('This object describes TCP/UDP maximum destination port number of Acl entry.')
cmTrafficAclTcpUdpDstPortEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclTcpUdpDstPortEnabled.setDescription('This object enables/disables TCP/UDP destination port of Acl entry.')
cmTrafficAclIpQosType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 25), CmTrafficACLPriorityType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclIpQosType.setDescription('This object describes QosType Acl entry.')
cmTrafficAclIpQosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosValue.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclIpQosValue.setDescription('This object describes QOS value of Acl entry.')
cmTrafficAclIpQosTypeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclIpQosTypeEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclIpQosTypeEnabled.setDescription('This object enables/disables qos type of acl entry.')
cmTrafficAclVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 28), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanId.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclVlanId.setDescription('This object describes the vlan Id of Acl entry.')
cmTrafficAclVlanIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanIdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclVlanIdEnabled.setDescription('This object enables/disables Vlan Id of Acl entry.')
cmTrafficAclVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclVlanPriority.setDescription('This object describes the Vlan Priority of Acl entry.')
cmTrafficAclVlanPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclVlanPriorityEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclVlanPriorityEnabled.setDescription('This object enables/disables Vlan Priority of Acl entry.')
cmTrafficAclProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 32), CmTrafficAclProtocolType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProtocolType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProtocolType.setDescription('This object describes protocol type of Acl entry.')
cmTrafficAclProtocolTypeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclProtocolTypeEnabled.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclProtocolTypeEnabled.setDescription('This object enables/disables protocol type of Acl entry.')
cmTrafficAclStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 34), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclStorageType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclStorageType.setDescription('The type of storage configured for this entry.')
cmTrafficAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 38, 1, 35), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmTrafficAclRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmTrafficAclRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmTrafficAclRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosPolicerProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39), )
if mibBuilder.loadTexts: cmQosPolicerProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileTable.setDescription('A list of entries corresponding to Quality of Service \n         Policer for configuration purposes.')
cmQosPolicerProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmQosPolicerProfileIndex"))
if mibBuilder.loadTexts: cmQosPolicerProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileEntry.setDescription('A conceptual row in the cmQosPolicerProfileTable. \n          These entries represent a Quality of Service Policer.')
cmQosPolicerProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileIndex.setDescription('This object defines the Policer profile ID. Up to 1000 profiles can be specified per system.')
cmQosPolicerProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileName.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileName.setDescription('This object defines the alias for this profile')
cmQosPolicerProfileCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileCIRLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer Profile.  This represents the lower 32 bits of the\n          CIR.')
cmQosPolicerProfileCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileCIRHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer Profile.  This represents the upper 32 bits of the\n          CIR.')
cmQosPolicerProfileEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileEIRLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer Profile.  This represents the lower 32 bits\n          of the EIR.')
cmQosPolicerProfileEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileEIRHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer Profile.  This represents the upper 32 bits\n          of the EIR.')
cmQosPolicerProfileCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCBS.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileCBS.setDescription('This object allows specification of the Commited Burst Size\n          (CBS) on Policer Profile.')
cmQosPolicerProfileEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileEBS.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileEBS.setDescription('This object allows specification of the Excess Burst Size\n          (EBS) on the Policer Profile.')
cmQosPolicerProfileColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 9), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileColorMode.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileColorMode.setDescription("This object allows specification of Policer Color Mode as\n           'color-aware' or 'color-blind'.")
cmQosPolicerProfileCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow, which is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low.  Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
cmQosPolicerProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileStorageType.setDescription('The type of storage configured for this entry.')
cmQosPolicerProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 39, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosPolicerProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosPolicerProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosPolicerProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosQueueProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40), )
if mibBuilder.loadTexts: cmQosQueueProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileTable.setDescription('A list of entries corresponding to Quality of Service \n         Queue for configuration purposes.')
cmQosQueueProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmQosQueueProfileIndex"))
if mibBuilder.loadTexts: cmQosQueueProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileEntry.setDescription('A conceptual row in the cmQosQueueProfileTable. \n          These entries represent a Quality of Service Queue.')
cmQosQueueProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileIndex.setDescription('This object defines the Queue profile ID. Up to 64 profiles can be specified per system.')
cmQosQueueProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileName.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileName.setDescription('This object defines the alias for this profile')
cmQosQueueProfileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileBufferSize.setDescription('This object defines the buffer size of the selected queues.')
cmQosQueueProfileREDEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileREDEnabled.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileREDEnabled.setDescription('This object defines whether the WRED is enabled as congestion algorithm or not.\n          If disabled, then the following RED parameters (cmQueueProfileWREDDp0MinTh, \n          cmQueueProfileWREDDp0MaxTh and cmQueueProfileWREDDp0MaxProb) must not be specified.')
cmQosQueueProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileStorageType.setDescription('The type of storage configured for this entry.')
cmQosQueueProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 40, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosQueueProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosQueueProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosQueueProfileRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosQueueProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosQueueProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosPolicerV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41), )
if mibBuilder.loadTexts: cmQosPolicerV2Table.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2Table.setDescription('A list of entries corresponding to Quality of Service \n         Policer for configuration purposes.')
cmQosPolicerV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosPolicerV2Index"))
if mibBuilder.loadTexts: cmQosPolicerV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2Entry.setDescription('A conceptual row in the cmQosPolicerV2Table. \n          These entries represent a Quality of Service Policer.')
cmQosPolicerV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2Index.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2Index.setDescription('The Policer Index that represents the COS level. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on.')
cmQosPolicerV2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2AdminState.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2AdminState.setDescription('This object represents the Administrative State of \n             the QOS Policer.')
cmQosPolicerV2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2OperationalState.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2OperationalState.setDescription('This object represents the Operational State of the QOS Policer.')
cmQosPolicerV2SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2SecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2SecondaryState.setDescription('This object represents the Secondary State of the QOS Policer.')
cmQosPolicerV2ColorMarkingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ColorMarkingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ColorMarkingEnabled.setDescription('This object indicates the colorMarking state of the QOS Policer.')
cmQosPolicerV2AssociatedProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 6), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2AssociatedProfile.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2AssociatedProfile.setDescription('This object define the queue profile ID to be used,\n          it is associated with the cmQosPolicerProfileIndex.')
cmQosPolicerV2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2StorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StorageType.setDescription('The type of storage configured for this entry.')
cmQosPolicerV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosPolicerV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2RowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosPolicerV2RowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosPolicerV2RowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosPolicerV2RowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosPolicerV2PolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 41, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2PolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2PolicingEnabled.setDescription('Whether enable or disable the functionality of policing for this COS.')
cmQosShaperV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42), )
if mibBuilder.loadTexts: cmQosShaperV2Table.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2Table.setDescription('A list of entries corresponding to Quality of Service \n         ShaperV2 for configuration purposes.')
cmQosShaperV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperV2Index"))
if mibBuilder.loadTexts: cmQosShaperV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2Entry.setDescription('A conceptual row in the cmQosShaperV2Table. \n          These entries represent a Quality of Service Shaper.')
cmQosShaperV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2Index.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2Index.setDescription('The ShaperV2 Index that represents the COS level. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on.')
cmQosShaperV2AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdminState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2AdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
cmQosShaperV2OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2OperationalState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2OperationalState.setDescription('This object represents the Operational State of the QOS ShaperV2.')
cmQosShaperV2SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2SecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2SecondaryState.setDescription('This object represents the Secondary State of the QOS QosShaperV2.')
cmQosShaperV2AssociatedQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2AssociatedQueueProfile.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2AssociatedQueueProfile.setDescription('This object defines the queue profile ID to be used,\n          it is associated with the cmQosQueueProfileIndex.')
cmQosShaperV2CIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2CIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2CIRLo.setDescription('This object specifies the Lower 32 bits of CIR.')
cmQosShaperV2CIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2CIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2CIRHi.setDescription('This object specifies the Higher 32 bits of CIR.')
cmQosShaperV2EIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2EIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2EIRLo.setDescription('This object specifies the Lower 32 bits of EIR.')
cmQosShaperV2EIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2EIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2EIRHi.setDescription('This object specifies the Higher 32 bits of EIR.')
cmQosShaperV2IngressAverageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2IngressAverageFrameSize.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2IngressAverageFrameSize.setDescription('This object defines the average frame size for accounting for Meter/Shaping.')
cmQosShaperV2StorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2StorageType.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StorageType.setDescription('The type of storage configured for this entry.')
cmQosShaperV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmQosShaperV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2RowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmQosShaperV2RowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmQosShaperV2RowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmQosShaperV2RowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmQosShaperV2AdditionalCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRLo.setDescription('This object specifies the Lower 32 bits of additional CIR.')
cmQosShaperV2AdditionalCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2AdditionalCIRHi.setDescription('This object specifies the Higher 32 bits of additional CIR.')
cmQosShaperV2WFQWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2WFQWeight.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2WFQWeight.setDescription('Weight of queue to be scheduled by WFQ mechanism.')
cmQosShaperV2ActualCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ActualCIR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ActualCIR.setDescription('This object specifies the actual CIR.')
cmQosShaperV2ActualEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ActualEIR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ActualEIR.setDescription('This object specifies the actual EIR.')
cmQosShaperV2LowLatencyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 42, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2LowLatencyControl.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2LowLatencyControl.setDescription('This object specifies low latency control whether enabled.')
cmTrafficPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43), )
if mibBuilder.loadTexts: cmTrafficPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperTable.setDescription('A list of entries corresponding to Quality of Service \n         Shaper for configuration purposes.')
cmTrafficPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperEntry.setDescription('A conceptual row in the cmTrafficPortQosShaperTable. \n          These entries represent a Quality of Service Shaper.')
cmTrafficPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperIndex.setDescription('The ShaperV2 Index that represents the COS level. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on.')
cmTrafficPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
cmTrafficPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperOperationalState.setDescription('This object represents the Operational State of the QOS ShaperV2.')
cmTrafficPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS LagQosShaper.')
cmTrafficPortQosShaperAssociatedQueueProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 5), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAssociatedQueueProfile.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperAssociatedQueueProfile.setDescription('This object defines the queue profile ID to be used,\n          it is associated with the cmQosQueueProfileIndex.')
cmTrafficPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperBufferSize.setDescription('This object defines the buffer size of Shaper.')
cmTrafficPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRLo.setDescription('This object specifies the Lower 32 bits of CIR.')
cmTrafficPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperCIRHi.setDescription('This object specifies the Higher 32 bits of CIR.')
cmTrafficPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRLo.setDescription('This object specifies the Lower 32 bits of EIR.')
cmTrafficPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperEIRHi.setDescription('This object specifies the Higher 32 bits of EIR.')
cmTrafficPortQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStorageType.setDescription('The type of storage configured for this entry.')
cmTrafficPortQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmTrafficPortQosShaperRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmTrafficPortQosShaperRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmTrafficPortQosShaperRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmTrafficPortQosShaperIngressAverageFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 9600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperIngressAverageFrameSize.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperIngressAverageFrameSize.setDescription('This object defines the average frame size for accounting for Meter/Shaping.')
cmTrafficPortQosShaperAdditionalCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRLo.setDescription('This object specifies the Lower 32 bits of additional CIR.')
cmTrafficPortQosShaperAdditionalCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperAdditionalCIRHi.setDescription('This object specifies the Higher 32 bits of additional CIR.')
cmTrafficPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 43, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperWfqWeight.setDescription('This object specifies the wfq weight value of the QoS shaper.')
cmTrafficAclRscAllocation = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 44), CmAclConfiguration()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficAclRscAllocation.setStatus('current')
if mibBuilder.loadTexts: cmTrafficAclRscAllocation.setDescription('This object is defined to set traffic acl resource allocation.\n\n         Supported actions are:\n         all-bk-l2(1)  - all bank allocated to l2. \n         all-bk-l2-ipv4(2)  - all bank allocated to l2/ipv4. \n         two-bk-l2-ipv4(3)  - two thirds allocated to l2/ipv4, the left belongs to ipv6.\n         one-bk-l2-ipv4(4)  - one thirds allocated to l2/ipv4, the left belongs to ipv6.\n         none-bk-l2-ipv4(5) - all bank allocated to ipv6. ')
f3NetPortQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45), )
if mibBuilder.loadTexts: f3NetPortQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             Quality of Service Shaper for configuration purposes.\n             These shapers can be managed when the Network Port is\n             in evpl mode and are relevant for traffic in the\n             access to network direction.')
f3NetPortQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "f3NetPortQosShaperIndex"))
if mibBuilder.loadTexts: f3NetPortQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperEntry.setDescription('A conceptual row in the f3NetPortQosShaperTable. \n             These entries represent a Quality of Service Shaper.')
f3NetPortQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperIndex.setDescription('The unique integer index value corresponding to a \n             Quality of Service Shaper.')
f3NetPortQosShaperDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 2), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperDirection.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperDirection.setDescription('The direction of the Quality of Service Shaper.')
f3NetPortQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
f3NetPortQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperOperationalState.setDescription('This object represents the Operational State of the QOS Shaper.')
f3NetPortQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS Shaper.')
f3NetPortQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperCIRLo.setDescription('This object represents the Commited Information\n          Rate(CIR) (Lower 32 bits)of a Shaper.')
f3NetPortQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) (Higher 32 bits) of a Shaper.')
f3NetPortQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperEIRLo.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
f3NetPortQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
f3NetPortQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) of the Shaper.')
f3NetPortQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) of the Shaper.')
f3NetPortQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
f3NetPortQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperCOS.setDescription('This object provides the COS (Class of Service)\n             value for the QOS Shaper.')
f3NetPortQosShaperSoamCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRLo.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Lower 32 bits)of a Shaper.')
f3NetPortQosShaperSoamCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperSoamCIRHi.setDescription('This object represents the Soam Commited Information\n          Rate(SOAM-CIR) (Higher 32 bits) of a Shaper.')
f3NetPortQosShaperSoamEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRLo.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Higher 32 bits) on the Shaper.')
f3NetPortQosShaperSoamEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperSoamEIRHi.setDescription('This object represents the Soam Excess Information\n          Rate(SOAM-EIR) (Higher 32 bits) on the Shaper.')
f3NetPortQosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMinQueueThreshold.setDescription('This object represents the Wred green packet min queue threshold value.')
f3NetPortQosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 19), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenMaxQueueThreshold.setDescription('This object represents the Wred green packet max queue threshold value.')
f3NetPortQosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 20), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenDropProbability.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredGreenDropProbability.setDescription('This object represents the Wred green packet drop probability.')
f3NetPortQosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 21), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMinQueueThreshold.setDescription('This object represents the Wred yellow packet min queue threshold value.')
f3NetPortQosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 22), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowMaxQueueThreshold.setDescription('This object represents the Wred yellow packet max queue threshold value.')
f3NetPortQosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 23), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowDropProbability.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWredYellowDropProbability.setDescription('This object represents the Wred yellow packet drop probability.')
f3NetPortQosShaperAvgFrameSizeBeforeFragment = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperAvgFrameSizeBeforeFragment.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperAvgFrameSizeBeforeFragment.setDescription('This object specifies the average frame size before fragmentation.')
f3NetPortQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 45, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperWfqWeight.setDescription('This object specifies the wfq weight value.')
f3Usb3GDCNPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46), )
if mibBuilder.loadTexts: f3Usb3GDCNPortTable.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortTable.setDescription('3G DCN Port table.\n             The table contains parameters of 3G USB modem.')
f3Usb3GDCNPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3Usb3GDCNPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortEntry.setDescription('A conceptual row in the f3Usb3GDCNPortTable.')
f3Usb3GDCNPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortIndex.setDescription('An integer index value used to uniquely identify\n             this Ethernet Access Port within a card.\n             Note that each Ethernet Access Port is uniquely identified\n             by the indices neIndex, shelfIndex, \n             slotIndex, f3Usb3GDCNPortIndex')
f3Usb3GDCNPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortIfIndex.setDescription('This object has the same value as ifIndex for \n             G3 DCN Port.  An integer index value used to \n             uniquely identify this G3 DCN Port.')
f3Usb3GDCNPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
f3Usb3GDCNPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortAdminState.setDescription('This object represents the Administrative State of the G3 DCN Port.')
f3Usb3GDCNPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortOperationalState.setDescription('This object represents the Operational State of the G3 DCN Port.')
f3Usb3GDCNPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortSecondaryState.setDescription('This object represents the Secondary State of the G3 DCN Port.')
f3Usb3GDCNPortVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortVendorName.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortVendorName.setDescription('This object provides the Vendor Name of the G3 DCN Port.')
f3Usb3GDCNPortModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortModel.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortModel.setDescription('This object provides the Model of the G3 DCN Port.')
f3Usb3GDCNPortFSN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortFSN.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortFSN.setDescription('This object provides the Factory Serial Number of the G3 DCN Port.')
f3Usb3GDCNPortIMEI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIMEI.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortIMEI.setDescription('This object provides the International Mobile Equipment Identity of the G3 DCN Port.')
f3Usb3GDCNPortHardwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortHardwareVersion.setDescription('This object provides the Hardware Version of the G3 DCN Port.')
f3Usb3GDCNPortFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortFirmwareVersion.setDescription('This object provides the Firmware Version of the G3 DCN Port..')
f3Usb3GDCNPortSIMStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 13), F3Usb3GSimCardState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSIMStatus.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortSIMStatus.setDescription('This object provides the SIM card Status of the G3 DCN Port.')
f3Usb3GDCNPortPINLeftChances = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPINLeftChances.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortPINLeftChances.setDescription('This object provides the Left Chances for PIN input of the G3 DCN Port.')
f3Usb3GDCNPortPUKLeftChances = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPUKLeftChances.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortPUKLeftChances.setDescription('This object provides the Left Chances for PUK input of the G3 DCN Port.')
f3Usb3GDCNPortConnectionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 16), F3Usb3GNetworkConnectionState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortConnectionStatus.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortConnectionStatus.setDescription('This object provides the Wirless Connection Status of the G3 DCN Port.')
f3Usb3GDCNPortRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 17), F3Usb3GRecvSignalStrengthInd()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortRSSI.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortRSSI.setDescription('This object provides the Received Signal Strength Indication of the G3 DCN Port.')
f3Usb3GDCNPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortSpeed.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortSpeed.setDescription('This object provides the Connection Speed of the G3 DCN Port.')
f3Usb3GDCNPortMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortMTU.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortMTU.setDescription('This object provides the MTU of the G3 DCN Port.')
f3Usb3GDCNPortProviderName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortProviderName.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortProviderName.setDescription('This object provides the Wireless Service Provider Name of the G3 DCN Port.')
f3Usb3GDCNPortDNS1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 21), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS1.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS1.setDescription('This first DNS of the interface.')
f3Usb3GDCNPortDNS2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS2.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortDNS2.setDescription('This second DNS of the interface.')
f3Usb3GDCNPortAPN = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortAPN.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortAPN.setDescription('This object allows configure the Access Point Name of the G3 DCN Port.')
f3Usb3GDCNPortUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortUserName.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortUserName.setDescription('This object allows configure the User Name of the G3 DCN Port.')
f3Usb3GDCNPortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortPassword.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortPassword.setDescription('This object allows configure the Password of the G3 DCN Port.')
f3Usb3GDCNPortDailNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortDailNumber.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortDailNumber.setDescription('This object allows configure the Dail Number of the G3 DCN Port.')
f3Usb3GDCNPortRedialTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortRedialTimer.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortRedialTimer.setDescription('This object allows configure the Retail Timer of the G3 DCN Port.')
f3Usb3GDCNPortCurrentPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPinCode.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPinCode.setDescription('This object is the Current Pin Code.')
f3Usb3GDCNPortNewPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortNewPinCode.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortNewPinCode.setDescription('This object is the New Pin code.')
f3Usb3GDCNPortConfirmPinCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortConfirmPinCode.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortConfirmPinCode.setDescription('This object is the Confirm Pin Code.')
f3Usb3GDCNPortCurrentPukCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPukCode.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortCurrentPukCode.setDescription('This object is the Current Puk Code.')
f3Usb3GDCNPINCodeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 32), F3Usb3GDCNPINCodeActionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPINCodeAction.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPINCodeAction.setDescription('This Action is for PIN code operation.')
f3Usb3GDCNPortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 33), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3Usb3GDCNPortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortStorageType.setDescription('The type of storage configured for this entry.')
f3Usb3GDCNPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 34), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortRowStatus.setDescription('The status of this row.\n             The f3Usb3GDCNPortRowStatus object may be modified if\n             the associated instance of this object is equal to active(1),\n             notInService(2), or notReady(3).')
f3Usb3GDCNPortIMSI = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIMSI.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortIMSI.setDescription('This object provides the International Mobile Subscriber Identity of the G3 DCN Port.')
f3Usb3GDCNPortPINStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 36), G3AuthStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortPINStatus.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortPINStatus.setDescription('This status of PIN/PUK')
f3UsbDCNPortMobileNetworkType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 37), UsbDCNMobileNetworkType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbDCNPortMobileNetworkType.setStatus('current')
if mibBuilder.loadTexts: f3UsbDCNPortMobileNetworkType.setDescription('This object describe the mobile network type.')
f3Usb3GDCNMuxOperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 38), UsbOperationalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3Usb3GDCNMuxOperationalMode.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNMuxOperationalMode.setDescription('This object describe the USB operatioan mode.')
f3Usb3GDCNPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 39), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortIpAddress.setDescription('The IP address of this port.')
f3Usb3GDCNPortNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 46, 1, 40), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3Usb3GDCNPortNetMask.setStatus('current')
if mibBuilder.loadTexts: f3Usb3GDCNPortNetMask.setDescription('The IP subnet mask of this port.')
ocnStmTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47), )
if mibBuilder.loadTexts: ocnStmTable.setStatus('current')
if mibBuilder.loadTexts: ocnStmTable.setDescription('A list of entries corresponding to OCn/STM interface.')
ocnStmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"))
if mibBuilder.loadTexts: ocnStmEntry.setStatus('current')
if mibBuilder.loadTexts: ocnStmEntry.setDescription('A conceptual row in the ocnStmTable.')
ocnStmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 1), Integer32())
if mibBuilder.loadTexts: ocnStmIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmIndex.setDescription('Unique index value associated with the OCn/STM interface.')
ocnStmIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmIfIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmIfIndex.setDescription('This object has the same value as ifIndex for OCn/STM interface.\n             An integer index value used to uniquely identify\n             this OCn/STM interface.')
ocnStmEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmEntityIndex.setDescription('Entity Index from ENTITY-MIB for this OCn/STM interface.')
ocnStmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmAdminState.setStatus('current')
if mibBuilder.loadTexts: ocnStmAdminState.setDescription('This object represents the Administrative State of the OCn/STM interface.')
ocnStmOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmOperationalState.setStatus('current')
if mibBuilder.loadTexts: ocnStmOperationalState.setDescription('This object represents the Operational State of the OCn/STM interface.')
ocnStmSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ocnStmSecondaryState.setDescription('This object represents the Secondary State of the OCn/STM interface.')
ocnStmSfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpVendorName.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpVendorName.setDescription('This object provides the vendor name of the SFP.')
ocnStmSfpPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpPartNumber.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpPartNumber.setDescription('This object provides the part number of the SFP.')
ocnStmSfpSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpSerialNumber.setDescription('This object provides the serial number of the SFP.')
ocnStmSfpDateOfManufacture = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpDateOfManufacture.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpDateOfManufacture.setDescription('This object provides the date of manufacture of the SFP.')
ocnStmSfpConnectorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 11), SfpConnectorValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpConnectorValue.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpConnectorValue.setDescription('This object provides the SFP connector value.')
ocnStmSfpLinkLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLinkLength.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpLinkLength.setDescription('This object provides the SFP Link Length.')
ocnStmSfpLaserWaveLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLength.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLength.setDescription('This object provides the SFP Laser Wave Length in nano meters.')
ocnStmSfpLaserWaveLengthPicometer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLengthPicometer.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpLaserWaveLengthPicometer.setDescription('This object provide laser wavelength pico value. \n          For example, laser wavelength is 1510.01,\n          then ocnStmSfpLaserWaveLength=1510 \n          and ocnStmSfpLaserWaveLengthPicometer=10.')
ocnStmSfpMediaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 15), SfpMediaType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpMediaType.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpMediaType.setDescription('This object provides the SFP Media Type.')
ocnStmMultiplexingStructures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 16), MultiplexingStructure()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmMultiplexingStructures.setStatus('current')
if mibBuilder.loadTexts: ocnStmMultiplexingStructures.setDescription('This object provides the TDM Multiplexing Structure base on OCn/STM interface.')
ocnStmEoTDMMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 17), EoTDMMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmEoTDMMode.setStatus('current')
if mibBuilder.loadTexts: ocnStmEoTDMMode.setDescription('This object provides the TDM Mode base on OCn/STM interface. \n            EoPDH means VCG container is PDH; EoTDM means VCG container is VC of SDH/SONET')
ocnStmLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 18), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: ocnStmLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the OCn/STM interface.')
ocnStmLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 19), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: ocnStmLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the OCn/STM interface.')
ocnStmLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: ocnStmLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the OCn/STM interface.')
ocnStmInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmInsertingAIS.setStatus('current')
if mibBuilder.loadTexts: ocnStmInsertingAIS.setDescription('This object allows to insert AIS-L out from OCn/STM interface \n            when it is in maintenance state.')
ocnStmBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 22), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmBerExcThreshold.setStatus('current')
if mibBuilder.loadTexts: ocnStmBerExcThreshold.setDescription('This object provide the threshold of B2EXC.')
ocnStmBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 23), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmBerDegThreshold.setStatus('current')
if mibBuilder.loadTexts: ocnStmBerDegThreshold.setDescription('This object provides the threshold of B2DEG.')
ocnStmRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmRxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: ocnStmRxTrailTrace.setDescription('This object provides the recevied J0 on the OCn/STM interface.')
ocnStmTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmTxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: ocnStmTxTrailTrace.setDescription('This object provides the transmit J0 on the OCn/STM interface.')
ocnStmExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmExpectedTrailTrace.setStatus('current')
if mibBuilder.loadTexts: ocnStmExpectedTrailTrace.setDescription('This object provides the expected J0 on the OCn/STM interface.')
ocnStmTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 27), TrailTraceFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmTrailTraceFormat.setStatus('current')
if mibBuilder.loadTexts: ocnStmTrailTraceFormat.setDescription('This object provides the J0 length mode on the OCn/STM interface.')
ocnStmQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: ocnStmQLModeEnabled.setDescription('This object allows to specify whether the OCn/STM interface \n          can be enabled/disabled for QL Mode. This object\n          is only applicable for Synchronous OCn/STM interface,\n          when ocnStmQLModeEnabled is set to true.\n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
ocnStmExpectedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 29), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmExpectedQL.setStatus('current')
if mibBuilder.loadTexts: ocnStmExpectedQL.setDescription('This object allows to specify the expected QL when the \n          OCn/STM interface is enabled for QL Mode. This object\n          is only applicable for Synchronous OCn/STM interface,\n          when ocnStmQLModeEnabled is set to true.\n          This object allows the user to set a minimum\n          expected received Quality Level on the port. The valid values\n          depend upon the SYNC entity Network Clock Type. A value of\n          None represents that a minimum Quality Level is not expected. \n          The default value shall be None.')
ocnStmAssumedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 30), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmAssumedQL.setStatus('current')
if mibBuilder.loadTexts: ocnStmAssumedQL.setDescription('This object allows to specify the assumed QL on the \n          OCn/STM interface. This object is only applicable for \n          Synchronous OCn/STM interface. \n          The Assumed QL is only meaningful if the Network Clock Type\n          (see fsp150cm-sync.mib) is option1 and the \n          port TransmitQL Mode is disabled and the port is being used as \n          an input reference source. Under these conditions, \n          the specified QL value is assumed to be the Quality Level of the\n          non-failed reference.')
ocnStmReceivedQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 31), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmReceivedQL.setStatus('current')
if mibBuilder.loadTexts: ocnStmReceivedQL.setDescription('This object provides the Received QL value for the OCn/STM interface. \n          If the OCn/STM interface TransmitQL Mode is disabled, then the received \n          QL value is not applicable.This object is only applicable for \n          Synchronous OCn/STM interface.')
ocnStmTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 32), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmTransmitQL.setStatus('current')
if mibBuilder.loadTexts: ocnStmTransmitQL.setDescription('This object provides the Transmitted QL value for the OCn/STM interface. \n          If the OCn/STM interface TransmitQL Mode is disabled, then the received \n          QL value is not applicable. This object is only applicable for \n          Synchronous OCn/STM interface.')
ocnStmPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 33), OCNSTMPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmPortType.setStatus('current')
if mibBuilder.loadTexts: ocnStmPortType.setDescription('This object represents the OCN/STM Port Type.\n          Determines whether the OCN/STM port operates in OC or STM mode.')
ocnStmFreqSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 34), TDMFrequencySourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmFreqSourceType.setStatus('current')
if mibBuilder.loadTexts: ocnStmFreqSourceType.setDescription('This object represents the TDM Frequency source of OCN/STM port.')
ocnStmHighOrderPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 35), TDMPathType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmHighOrderPathType.setStatus('current')
if mibBuilder.loadTexts: ocnStmHighOrderPathType.setDescription('This object provides the High Order Path Type of the OCn/STM interface.')
ocnStmSfpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpName.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpName.setDescription('This object provides the official name of the SFP.')
ocnStmSfpHardwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 47, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmSfpHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: ocnStmSfpHardwareRevision.setDescription('This object provides the hardware revision of the SFP.')
stsVcPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48), )
if mibBuilder.loadTexts: stsVcPathTable.setStatus('current')
if mibBuilder.loadTexts: stsVcPathTable.setDescription('A list of entries corresponding to OCn Path.')
stsVcPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "stsVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "stsVcPathIndex"))
if mibBuilder.loadTexts: stsVcPathEntry.setStatus('current')
if mibBuilder.loadTexts: stsVcPathEntry.setDescription('A conceptual row in the stsVcPathTable.')
stsVcPathParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: stsVcPathParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathParentIfIndex.setDescription("This object is its parent's ifindex. Based on the Multiplexing hierarchy,\n             this object points to the container's interface index.")
stsVcPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 2), Unsigned32())
if mibBuilder.loadTexts: stsVcPathIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathIndex.setDescription('This object is his index.')
stsVcPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathIfIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathIfIndex.setDescription('This object has the same value as ifIndex for OCn Path.\n             An integer index value used to uniquely identify\n             this OCn Path interface.')
stsVcPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathAdminState.setStatus('current')
if mibBuilder.loadTexts: stsVcPathAdminState.setDescription('This object represents the Administrative State of the OCn Path.')
stsVcPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathOperationalState.setStatus('current')
if mibBuilder.loadTexts: stsVcPathOperationalState.setDescription('This object represents the Operational State of the OCn Path.')
stsVcPathSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathSecondaryState.setStatus('current')
if mibBuilder.loadTexts: stsVcPathSecondaryState.setDescription('This object represents the Secondary State of the OCn Path.')
stsVcPathLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 7), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: stsVcPathLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the OCn Path.')
stsVcPathLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 8), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: stsVcPathLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the OCn Path.')
stsVcPathLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: stsVcPathLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the OCn Path.')
stsVcPathInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathInsertingAIS.setStatus('current')
if mibBuilder.loadTexts: stsVcPathInsertingAIS.setDescription('This object allows to insert AIS-P out from OCn Path \n            when it is in maintenance state.')
stsVcPathBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 11), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathBerExcThreshold.setStatus('current')
if mibBuilder.loadTexts: stsVcPathBerExcThreshold.setDescription('This object provide the threshold of B3EXC.')
stsVcPathBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 12), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathBerDegThreshold.setStatus('current')
if mibBuilder.loadTexts: stsVcPathBerDegThreshold.setDescription('This object provides the threshold of B3DEG.')
stsVcPathTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 13), TrailTraceFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTrailTraceFormat.setStatus('current')
if mibBuilder.loadTexts: stsVcPathTrailTraceFormat.setDescription('This object provides the J1 length mode on the OCn Path.')
stsVcPathRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathRxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: stsVcPathRxTrailTrace.setDescription('This object provides the recevied J1 on the OCn Path.')
stsVcPathTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: stsVcPathTxTrailTrace.setDescription('This object provides the transmit J1 on the OCn Path.')
stsVcPathExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathExpectedTrailTrace.setStatus('current')
if mibBuilder.loadTexts: stsVcPathExpectedTrailTrace.setDescription('This object provides the expected J1 on the OCn Path.')
stsVcPathRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathRxSignalLabel.setStatus('current')
if mibBuilder.loadTexts: stsVcPathRxSignalLabel.setDescription('This object provides the recevied C2 on the OCn Path.')
stsVcPathTxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathTxSignalLabel.setStatus('current')
if mibBuilder.loadTexts: stsVcPathTxSignalLabel.setDescription('This object provides the transmit C2 on the OCn Path.')
stsVcPathExpectedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathExpectedSignalLabel.setStatus('current')
if mibBuilder.loadTexts: stsVcPathExpectedSignalLabel.setDescription('This object provides the expected C2 on the OCn Path.')
stsVcPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: stsVcPathRowStatus.setStatus('current')
if mibBuilder.loadTexts: stsVcPathRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of stsVcPathRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            stsVcPathRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The stsVcPathRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
stsVcPathLowOrderPathType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 48, 1, 21), TDMPathType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathLowOrderPathType.setStatus('current')
if mibBuilder.loadTexts: stsVcPathLowOrderPathType.setDescription('This object provides the low Order Path Type of the sts vc interface.')
vtVcPathTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49), )
if mibBuilder.loadTexts: vtVcPathTable.setStatus('current')
if mibBuilder.loadTexts: vtVcPathTable.setDescription('A list of entries corresponding to VT1.5/VC12. These represent the\n             lower order path (LOP) entities.')
vtVcPathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "vtVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "vtVcPathIndex"))
if mibBuilder.loadTexts: vtVcPathEntry.setStatus('current')
if mibBuilder.loadTexts: vtVcPathEntry.setDescription('A conceptual row in the vtVcPathTable.')
vtVcPathParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: vtVcPathParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathParentIfIndex.setDescription("This object is its parent's ifindex.")
vtVcPathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 2), Unsigned32())
if mibBuilder.loadTexts: vtVcPathIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathIndex.setDescription('This object represents the unique number of the Path within the\n             parent container represented by vtvcPathParentIfIndex.')
vtVcPathIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathIfIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathIfIndex.setDescription('This object has the same value as ifIndex for OCn VT1.5/VC12.\n             An integer index value used to uniquely identify\n             this OCn VT1.5/VC12 interface.')
vtVcPathAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathAdminState.setStatus('current')
if mibBuilder.loadTexts: vtVcPathAdminState.setDescription('This object represents the Administrative State of the OCn VT1.5/VC12.')
vtVcPathOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathOperationalState.setStatus('current')
if mibBuilder.loadTexts: vtVcPathOperationalState.setDescription('This object represents the Operational State of the OCn VT1.5/VC12.')
vtVcPathSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathSecondaryState.setStatus('current')
if mibBuilder.loadTexts: vtVcPathSecondaryState.setDescription('This object represents the Secondary State of the OCn VT1.5/VC12.')
vtVcPathLoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 7), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathLoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: vtVcPathLoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the OCn VT1.5/VC12.')
vtVcPathLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 8), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: vtVcPathLoopbackStatus.setDescription('This object provides status of the current loopback \n             on the OCn VT1.5/VC12.')
vtVcPathLoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathLoopbackTime.setStatus('current')
if mibBuilder.loadTexts: vtVcPathLoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the OCn VT1.5/VC12.')
vtVcPathInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathInsertingAIS.setStatus('current')
if mibBuilder.loadTexts: vtVcPathInsertingAIS.setDescription('This object allows to insert AIS-P out from OCn VT1.5/VC12 \n            when it is in maintenance state.')
vtVcPathBerExcThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 11), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathBerExcThreshold.setStatus('current')
if mibBuilder.loadTexts: vtVcPathBerExcThreshold.setDescription('This object provide the threshold of BEREXC.')
vtVcPathBerDegThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 12), BitErrRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathBerDegThreshold.setStatus('current')
if mibBuilder.loadTexts: vtVcPathBerDegThreshold.setDescription('This object provides the threshold of BERDEG.')
vtVcPathTrailTraceFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 13), TrailTraceFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathTrailTraceFormat.setStatus('current')
if mibBuilder.loadTexts: vtVcPathTrailTraceFormat.setDescription('This object provides the J2 length mode on the OCn VT1.5/VC12.')
vtVcPathRxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathRxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: vtVcPathRxTrailTrace.setDescription('This object provides the recevied J2 on the OCn VT1.5/VC12.')
vtVcPathTxTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathTxTrailTrace.setStatus('current')
if mibBuilder.loadTexts: vtVcPathTxTrailTrace.setDescription('This object provides the transmit J2 on the OCn VT1.5/VC12.')
vtVcPathExpectedTrailTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathExpectedTrailTrace.setStatus('current')
if mibBuilder.loadTexts: vtVcPathExpectedTrailTrace.setDescription('This object provides the expected J2 on the OCn VT1.5/VC12.')
vtVcPathRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathRxSignalLabel.setStatus('current')
if mibBuilder.loadTexts: vtVcPathRxSignalLabel.setDescription('This object provides the recevied V5 byte(b5-b7) on the OCn VT1.5/VC12.')
vtVcPathTxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathTxSignalLabel.setStatus('current')
if mibBuilder.loadTexts: vtVcPathTxSignalLabel.setDescription('This object provides the transmit V5 byte(b5-b7) on the OCn VT1.5/VC12.')
vtVcPathExpectedSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathExpectedSignalLabel.setStatus('current')
if mibBuilder.loadTexts: vtVcPathExpectedSignalLabel.setDescription('This object provides the expected V5 byte(b5-b7) on the OCn VT1.5/VC12.')
vtVcPathRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 49, 1, 20), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vtVcPathRowStatus.setStatus('current')
if mibBuilder.loadTexts: vtVcPathRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of vtVcPathRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            vtVcPathRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The vtVcPathRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
e1t1Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50), )
if mibBuilder.loadTexts: e1t1Table.setStatus('current')
if mibBuilder.loadTexts: e1t1Table.setDescription('A list of entries corresponding to E1/T1.')
e1t1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e1t1ParentIfIndex"), (0, "CM-FACILITY-MIB", "e1t1Index"))
if mibBuilder.loadTexts: e1t1Entry.setStatus('current')
if mibBuilder.loadTexts: e1t1Entry.setDescription('A conceptual row in the e1t1Table.')
e1t1ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: e1t1ParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1ParentIfIndex.setDescription("This object represents the parent (container) object's interface index.\n             In the case when parent of E1T1Entry does not have a InterfaceIndex \n             then the e1t1ParentIfIndex shall have the value of 2147483647,\n             e.g. if parent of E1T1Entry is a card represented in pseudoWireE1T1CardTable.")
e1t1Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 2), Unsigned32())
if mibBuilder.loadTexts: e1t1Index.setStatus('current')
if mibBuilder.loadTexts: e1t1Index.setDescription('Index value used to uniquely identify\n             this E1/T1 interface, within the parent container specified by\n             e1t1ParentIfIndex.')
e1t1IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1IfIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1IfIndex.setDescription('This object has the same value as ifIndex for E1/T1.\n             An integer index value used to uniquely identify\n             this E1/T1 interface.')
e1t1EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1EntityIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1EntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
e1t1AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1AdminState.setStatus('current')
if mibBuilder.loadTexts: e1t1AdminState.setDescription('This object represents the Administrative State of the E1/T1.')
e1t1OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1OperationalState.setStatus('current')
if mibBuilder.loadTexts: e1t1OperationalState.setDescription('This object represents the Operational State of the E1/T1.')
e1t1SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1SecondaryState.setStatus('current')
if mibBuilder.loadTexts: e1t1SecondaryState.setDescription('This object represents the Secondary State of the E1/T1.')
e1t1LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: e1t1LoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the E1/T1.')
e1t1LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 9), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: e1t1LoopbackStatus.setDescription('This object provides status of the current loopback \n             on the E1/T1.')
e1t1LoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackTime.setStatus('current')
if mibBuilder.loadTexts: e1t1LoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the E1/T1.')
e1t1RemoteLoopbackRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1RemoteLoopbackRequest.setStatus('current')
if mibBuilder.loadTexts: e1t1RemoteLoopbackRequest.setDescription('This object allows to specify to repond the remote loopback request or not.')
e1t1InsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1InsertingAIS.setStatus('current')
if mibBuilder.loadTexts: e1t1InsertingAIS.setDescription('This object allows to insert AIS out from E1/T1 \n            when it is in maintenance state.')
e1t1RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e1t1RowStatus.setStatus('current')
if mibBuilder.loadTexts: e1t1RowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of e1t1RowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            e1t1RowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The e1t1RowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
e1t1LineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 14), E1T1LineType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1LineType.setStatus('current')
if mibBuilder.loadTexts: e1t1LineType.setDescription('This object represents the E1/T1 Line Type.\n             Determines whether the E1/T1 interface operates in T1 or E1 mode.')
e1t1LineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 15), E1T1LineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LineCode.setStatus('current')
if mibBuilder.loadTexts: e1t1LineCode.setDescription('This object represents the E1/T1 Port Line Code.\n             When the port is configured for a Line Type of T1, \n             the valid values are t1-b8zs and t1-ami and the default value\n             is t1-b8zs. When the port is configured for a Line Type of E1, \n             the valid values are e1-hdb3 and e1-ami and the default value \n             is e1-hdb3.')
e1t1FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 16), E1T1FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1FrameFormat.setStatus('current')
if mibBuilder.loadTexts: e1t1FrameFormat.setDescription('This object represents the E1/T1 Port Frame Format.\n             When the port is configured for a Line Type of T1, the\n             valid values are t1-sf, t1-esf and t1-unframed and the default \n             value is t1-unframed.\n             When the port is configured for a Line Type of E1, the\n             valid values are e1-unframed, e1-crc4, and e1-dualFrame \n             and the default value is e1-crc4. \n\n             R5.4CC supports only t1-unframed for T1 Line type.')
e1t1LineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 17), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LineBuildOut.setStatus('current')
if mibBuilder.loadTexts: e1t1LineBuildOut.setDescription('This object represents Line Build Out on E1/T1 port.')
e1t1TimingDomain = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 18), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1TimingDomain.setStatus('current')
if mibBuilder.loadTexts: e1t1TimingDomain.setDescription('This object represents Timing Domain that the E1/T1 interface uses as \n          timing source.  The Timing Domain is a Synchronization Entity \n          represented by an object in the f3SyncTable')
e1t1RcvSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 19), E1T1RcvSensitivity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1RcvSensitivity.setStatus('current')
if mibBuilder.loadTexts: e1t1RcvSensitivity.setDescription('This object allows configuring the reciever sensitivity based on expected\n          signal strength')
e1t1IdlePatternProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 20), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1IdlePatternProfile.setStatus('current')
if mibBuilder.loadTexts: e1t1IdlePatternProfile.setDescription('This object allows selecting Idle Pattern Profile for the E1/T1 interface.\n          Idle Patter Profile is represented by an object in the \n          f3Pwe3IdlePatternProfileTable')
e1t1LoopbackProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1LoopbackProfile.setStatus('current')
if mibBuilder.loadTexts: e1t1LoopbackProfile.setDescription('This object allows selecting Loopback Profile for the E1/T1 interface.\n          Loopback Profile is represented by an object in the \n          f3Pwe3LoopbackProfileTable')
e1t1RelatedContainerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 22), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1RelatedContainerId.setStatus('current')
if mibBuilder.loadTexts: e1t1RelatedContainerId.setDescription('This object describes the related container VCG.')
e1t1PatternLpbkControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 50, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1PatternLpbkControl.setStatus('current')
if mibBuilder.loadTexts: e1t1PatternLpbkControl.setDescription('This object allows to enable or disable Pattern Loopback on\n          a E1 port.')
class E3T3Type(TextualConvention, Integer32):
    description = 'Describes the type of the E3/T3.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("none", 0), ("e3", 1), ("t3", 2))

class PortState(TextualConvention, Bits):
    description = 'Port states for the eight 16xbits card ports.'
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7))

e3t3Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51), )
if mibBuilder.loadTexts: e3t3Table.setStatus('current')
if mibBuilder.loadTexts: e3t3Table.setDescription('A list of entries corresponding to E3/T3.')
e3t3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e3t3ParentIfIndex"), (0, "CM-FACILITY-MIB", "e3t3Index"))
if mibBuilder.loadTexts: e3t3Entry.setStatus('current')
if mibBuilder.loadTexts: e3t3Entry.setDescription('A conceptual row in the e3t3Table.')
e3t3ParentIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: e3t3ParentIfIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3ParentIfIndex.setDescription("This object is its parent's ifindex.")
e3t3Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 2), Unsigned32())
if mibBuilder.loadTexts: e3t3Index.setStatus('current')
if mibBuilder.loadTexts: e3t3Index.setDescription('This object is his index.')
e3t3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3IfIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3IfIndex.setDescription('This object has the same value as ifIndex for E3/T3.\n             An integer index value used to uniquely identify\n             this E3/T3 interface.')
e3t3EntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 4), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3EntityIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3EntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
e3t3AdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3AdminState.setStatus('current')
if mibBuilder.loadTexts: e3t3AdminState.setDescription('This object represents the Administrative State of the E3/T3.')
e3t3OperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3OperationalState.setStatus('current')
if mibBuilder.loadTexts: e3t3OperationalState.setDescription('This object represents the Operational State of the E3/T3.')
e3t3SecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3SecondaryState.setStatus('current')
if mibBuilder.loadTexts: e3t3SecondaryState.setDescription('This object represents the Secondary State of the E3/T3.')
e3t3LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3LoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: e3t3LoopbackConfig.setDescription('This object allows to initiate loopbacks on \n             on the E3/T3.')
e3t3LoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 9), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3LoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: e3t3LoopbackStatus.setDescription('This object provides status of the current loopback \n             on the E3/T3.')
e3t3LoopbackTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3LoopbackTime.setStatus('current')
if mibBuilder.loadTexts: e3t3LoopbackTime.setDescription('This object allows to specify time for timed-loopbacks on \n             on the E3/T3.')
e3t3RemoteLoopbackRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3RemoteLoopbackRequest.setStatus('current')
if mibBuilder.loadTexts: e3t3RemoteLoopbackRequest.setDescription('This object allows to specify to repond the remote loopback request or not.')
e3t3InsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3InsertingAIS.setStatus('current')
if mibBuilder.loadTexts: e3t3InsertingAIS.setDescription('This object allows to insert AIS out from E3/T3 \n            when it is in maintenance state.')
e3t3CBitEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3CBitEnable.setStatus('current')
if mibBuilder.loadTexts: e3t3CBitEnable.setDescription('The object provides whether C-Bit Parity is enabled/disabled.')
e3t3T3Channelized = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3T3Channelized.setStatus('current')
if mibBuilder.loadTexts: e3t3T3Channelized.setDescription('The object provides whether the T3 tunnel is channlized with T1.')
e3t3RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: e3t3RowStatus.setStatus('current')
if mibBuilder.loadTexts: e3t3RowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of e3t3RowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            e3t3RowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The e3t3RowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
e3t3FrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 16), E3T3FrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3FrameFormat.setStatus('current')
if mibBuilder.loadTexts: e3t3FrameFormat.setDescription('This object represents the Frame Format of the E3/T3.')
e3t3RelatedContainerId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 51, 1, 17), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3RelatedContainerId.setStatus('current')
if mibBuilder.loadTexts: e3t3RelatedContainerId.setDescription('This object describe the related contained VCG.')
cmEthernetTrafficPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52), )
if mibBuilder.loadTexts: cmEthernetTrafficPortExtTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortExtTable.setDescription('A list of entries corresponding to Ethernet \n            Facilities for configuration purposes.')
cmEthernetTrafficPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetTrafficPortExtEntry"))
cmEthernetTrafficPortExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetTrafficPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortExtEntry.setDescription('A conceptual row in the cmEthernetTrafficPortExtTable.')
cmEthernetTrafficPortTDMEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 1), GFPEncapsulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortTDMEncapsulation.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortTDMEncapsulation.setDescription('This object describes the GFP Encapsulation type of the traffic port.')
cmEthernetTrafficPortRelatedVCG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortRelatedVCG.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRelatedVCG.setDescription('This object describes the related VCG of the traffic port.')
cmEthernetTrafficPortMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited on this port.')
cmEthernetTrafficPortMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per port\n             When cmEthernetTrafficPortMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmEthernetTrafficPortMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per port\n             When cmEthernetTrafficPortMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmEthernetTrafficPortBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per port.')
cmEthernetTrafficPortBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per port\n             When cmEthernetTrafficPortBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmEthernetTrafficPortBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per port\n             When cmEthernetTrafficPortBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmEthernetTrafficPortCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitEnabled.setDescription('Whether multicast and broadcast packets need be limited per port.')
cmEthernetTrafficPortCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedLo.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents low 32 bits.')
cmEthernetTrafficPortCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCombinedRateLimitSpeedHi.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents high 32 bits.')
cmEthernetTrafficPortRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 52, 1, 12), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
f3PulsePerSecondPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53), )
if mibBuilder.loadTexts: f3PulsePerSecondPortTable.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortTable.setDescription('A list of entries corresponding to Pulse Per Second \n             Port Facilities.')
f3PulsePerSecondPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3PulsePerSecondPortIndex"))
if mibBuilder.loadTexts: f3PulsePerSecondPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortEntry.setDescription('A conceptual row in the f3PulsePerSecondPortTable.')
f3PulsePerSecondPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3PulsePerSecondPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortIndex.setDescription('An integer index value used to uniquely identify\n          this Pulse Per Second Port within the card.')
f3PulsePerSecondPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortIfIndex.setDescription('This object has the same value as ifIndex for \n          Pulse Per Second Port.  An integer index value used to \n          uniquely identify this Pulse Per Second Port.')
f3PulsePerSecondPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
f3PulsePerSecondPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortAdminState.setDescription('This object represents the Administrative State of the Pulse Per Second \n             Port.')
f3PulsePerSecondPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortOperationalState.setDescription('This object represents the Operational State of the Pulse Per Second \n             Port.')
f3PulsePerSecondPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortSecondaryState.setDescription('This object represents the Secondary State of the Pulse Per Second \n             Port.')
f3PulsePerSecondPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 7), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchControl.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchControl.setDescription('This object allows to set the Squelch Control for the Pulse Per Second port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port.')
f3PulsePerSecondPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 8), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchQL.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortSquelchQL.setDescription("This object allows to set the Squelch QL for the Pulse Per Second port. \n          This value is used when f3PulsePerSecondPortSquelchControl is squelch-ql.\n          The Squelch QL is used to determine whether or not to squelch \n          the output of the TOD port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.")
f3PulsePerSecondPortTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortTODSource.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortTODSource.setDescription('This object allows to set the Pulse Per Second Source for the Port.')
f3PulsePerSecondPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 10), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortDirection.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortDirection.setDescription('This object allows specification of the signal type \n             (i.e. input or output).')
f3PulsePerSecondPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 11), PPSInputRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortInputRate.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortInputRate.setDescription('This object allows specification of the PPS Input Rate.')
f3PulsePerSecondPortDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000000, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortDelayCompensation.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortDelayCompensation.setDescription('This object allows specification of the PPS external Delay\n             Compensation in nanoseconds in 8 nanoseconds steps.\n             For input port, that is with input Signal Direction, the\n             valid values are -5000000 to 5000000.\n             Whereas for output port, the valid values are 0 to 90.\n             Values which are not multiple of 8 will be automatically\n             rounded up to the next multiple of 8.')
f3PulsePerSecondPortClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortClockClass.setStatus('deprecated')
if mibBuilder.loadTexts: f3PulsePerSecondPortClockClass.setDescription('This object specify PPS port clock class.')
f3PulsePerSecondPortClockAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortClockAccuracy.setStatus('deprecated')
if mibBuilder.loadTexts: f3PulsePerSecondPortClockAccuracy.setDescription('This object specify PPS port clock accuracy.')
f3PulsePerSecondPortTimeSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 15), TimeSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3PulsePerSecondPortTimeSource.setStatus('deprecated')
if mibBuilder.loadTexts: f3PulsePerSecondPortTimeSource.setDescription('This object specify PPS port time source.')
f3PulsePerSecondPortPhyInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 16), PPSPhyInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortPhyInterfaceType.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortPhyInterfaceType.setDescription('This object specify PPS physical interface type.')
f3PulsePerSecondPortOutputDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 999999999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortOutputDelay.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortOutputDelay.setDescription('This object allows specification of the PPS Output Delay\n          in nanoseconds. The valid values are 0 to 999999999 in \n          10 nanoseconds steps. Values which are not multiple of 10 will\n          be automatically rounded up to the next multiple of 10.')
f3PulsePerSecondPortWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 250000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortWidth.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortWidth.setDescription('This object allows specification of the Width of the PPS \n          signal on the PPS Port. The valid values are 0 to 250000 in \n          1 microsecond unit.')
f3PulsePerSecondPortPolarity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 19), PpsPolarity()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortPolarity.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortPolarity.setDescription('This object allows specification of the Polarity of the PPS \n          signal on the PPS Port.')
f3PulsePerSecondPortImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 20), PpsPortImpedanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortImpedance.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortImpedance.setDescription('This object allows specification of the impedance mode for \n          an input PPS port.\n          It is only an indication and cannot be set for an output PPS Port.')
f3PulsePerSecondPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PulsePerSecondPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the PPS port.')
f3PulsePerSecondPortAssumedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 53, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PulsePerSecondPortAssumedClockClass.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortAssumedClockClass.setDescription('This object allows specification of the Assumed Clock Class for \n          an input PPS port.\n          It is only an indication and cannot be set for an output PPS Port.')
f3TimeOfDayPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55), )
if mibBuilder.loadTexts: f3TimeOfDayPortTable.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortTable.setDescription('A list of entries corresponding to Time Of Day \n             Port Facilities.')
f3TimeOfDayPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3TimeOfDayPortIndex"))
if mibBuilder.loadTexts: f3TimeOfDayPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortEntry.setDescription('A conceptual row in the f3TimeOfDayPortTable.')
f3TimeOfDayPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3TimeOfDayPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortIndex.setDescription('An integer index value used to uniquely identify\n          this Time Of Day Port within the card.')
f3TimeOfDayPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortIfIndex.setDescription('This object has the same value as ifIndex for \n          Time Of Day Port.  An integer index value used to \n          uniquely identify this Time Of Day Port.')
f3TimeOfDayPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
f3TimeOfDayPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortAdminState.setDescription('This object represents the Administrative State of the Time Of Day \n             Port.')
f3TimeOfDayPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortOperationalState.setDescription('This object represents the Operational State of the Time Of Day \n             Port.')
f3TimeOfDayPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3TimeOfDayPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortSecondaryState.setDescription('This object represents the Secondary State of the Time Of Day \n             Port.')
f3TimeOfDayPortSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 7), SquelchControl()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchControl.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchControl.setDescription('This object allows to set the Squelch Control for the Time Of Day port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port.')
f3TimeOfDayPortSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 8), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchQL.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortSquelchQL.setDescription("This object allows to set the Squelch QL for the Time Of Day port. \n          This value is used when f3TimeOfDayPortSquelchControl is squelch-ql.\n          The Squelch QL is used to determine whether or not to squelch \n          the output of the TOD port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.")
f3TimeOfDayPortTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortTODSource.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortTODSource.setDescription('This object allows to set the Time Of Day Source for the Port.')
f3TimeOfDayPortOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 10), TODOutputFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortOutputFormat.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortOutputFormat.setDescription('This object allows to set the Output Format for the Time Of Day port. \n          The Output Format is used to determine the type of output format \n          of the TOD port.')
f3TimeOfDayPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 11), SignalDirectionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortSignalDirection.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortSignalDirection.setDescription('This object allows specification of the signal direction type \n             (i.e. input or output).')
f3TimeOfDayPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 12), PPSInputRate()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortInputRate.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortInputRate.setDescription('This object allows specification of the Time Of Day Input Rate.')
f3TimeOfDayPortDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5000000, 5000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortDelayCompensation.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortDelayCompensation.setDescription('This object allows specification of the TOD external Delay\n             Compensation in nanoseconds. For input port, that is with \n             input Signal Direction, the valid values are -5000000 to 5000000\n             in 8 nanoseconds steps. Values which are not multiple of 8 will\n             be automatically rounded up to the next multiple of 8.')
f3TimeOfDayPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3TimeOfDayPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortAlias.setDescription('This object allows SNMP management entities to provide an\n        alias to the Time Of Day port.')
f3TimeOfDayPortAssumedClockClass = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 55, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3TimeOfDayPortAssumedClockClass.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortAssumedClockClass.setDescription('This object allows specification of the Assumed Clock Class for \n          an input TOD port.\n          It is only an indication and cannot be set for an output TOD Port.')
cmEthernetNetPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56), )
if mibBuilder.loadTexts: cmEthernetNetPortExtTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortExtTable.setDescription('A list of entries corresponding to Ethernet Network Port \n            Facilities for configuration purposes.')
cmEthernetNetPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortExtEntry"))
cmEthernetNetPortExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortExtEntry.setDescription('A conceptual row in the cmEthernetNetPortExtTable.')
cmEthernetNetPortTDMEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 1), GFPEncapsulationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortTDMEncapsulation.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortTDMEncapsulation.setDescription('This object describes the GFP Encapsulation type of the TDM network port.')
cmEthernetNetPortAssociatedTdmEntity = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 2), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortAssociatedTdmEntity.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortAssociatedTdmEntity.setDescription('This object describes the associated working path of TDM network port.')
cmEthernetNetPortInsertingAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 56, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortInsertingAIS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortInsertingAIS.setDescription('This object allows to insert AIS out from TDM network port \n          when it is in maintenance state.')
f3GPSReceiverPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57), )
if mibBuilder.loadTexts: f3GPSReceiverPortTable.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortTable.setDescription('A list of entries corresponding to the GPS Receiver Port \n             Facilities.')
f3GPSReceiverPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3GPSReceiverPortIndex"))
if mibBuilder.loadTexts: f3GPSReceiverPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortEntry.setDescription('A conceptual row in the f3GPSReceiverPortTable.')
f3GPSReceiverPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3GPSReceiverPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortIndex.setDescription('An integer index value used to uniquely identify\n          this GPS Receiver Port within the card.')
f3GPSReceiverPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortIfIndex.setDescription('This object has the same value as ifIndex for \n          Time Of Day Port.  An integer index value used to \n          uniquely identify this GPS Receiver Port.')
f3GPSReceiverPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
f3GPSReceiverPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAdminState.setDescription('This object represents the Administrative State of the GPS\n             Receiver Port.')
f3GPSReceiverPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortOperationalState.setDescription('This object represents the Operational State of the GPS \n             Receiver Port.')
f3GPSReceiverPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSecondaryState.setDescription('This object represents the Secondary State of the GPS \n             Receiver Port.')
f3GPSReceiverPortPPSGenCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 7), PPSGenCondition()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGenCondition.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGenCondition.setDescription('This object allows for configuration of the PPS generation\n             condition.  PPS is generated when at least one satellite\n             is tracked or when at least three satellites are tracked.')
f3GPSReceiverPortAntennaCableLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaCableLength.setStatus('deprecated')
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaCableLength.setDescription('This object allows for configuration of the GPS\n             Antenna cable length in meters.\n         This object is deprecated and replaced by \n         f3GPSReceiverPortAntennaDelayValue.')
f3GPSReceiverPortAntennaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 9), GPSAntennaStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaStatus.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaStatus.setDescription('This object provides the GPS Receiver Port Antenna status.')
f3GPSReceiverPortSatellitesUsableFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSatellitesUsableFlag.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSatellitesUsableFlag.setDescription('This object provides information on whether the satellites are\n             usable.  It is set to TRUE, when ephemeris and health data for\n             at least one satellite is available.')
f3GPSReceiverPortNumTrackingSatellites = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortNumTrackingSatellites.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortNumTrackingSatellites.setDescription('This object provides information on the number of tracking \n             satellites.')
f3GPSReceiverPortSelfSurveyProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyProgress.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyProgress.setDescription('This object provides information on the percentage of\n             fixes collected so far.')
f3GPSReceiverPortPPSGeneratedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGeneratedFlag.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortPPSGeneratedFlag.setDescription('This object indicates whether there are enough usable satellites\n          to provide accurate PPS output.')
f3GPSReceiverPortGnssSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 14), ConstellationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystem.setStatus('deprecated')
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystem.setDescription('This object configure Constellation Type of the GPS\n             Antenna.')
f3GPSReceiverPortInstallationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 15), InstallationType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortInstallationType.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortInstallationType.setDescription('This object configure Installation Type of the GPS\n             Antenna.')
f3GPSReceiverPortGnssTOD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 16), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssTOD.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortGnssTOD.setDescription('This object provides the last time was executed.')
f3GPSReceiverPortGnssSystemsBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 17), ConstellationTypesBitMap()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystemsBitMap.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortGnssSystemsBitMap.setDescription('This object configures GNSS constellation types supported by a GNSS Receiver Port')
f3GPSReceiverPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3GPSReceiverPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAlias.setDescription('This object provides an alias to the GPS port')
f3GPSReceiverPortAntennaDelayValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayValue.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayValue.setDescription('This object configures GNSS antenna cable delay used by the GNSS \n        Receiver Port, in units determined by \n        f3GPSReceiverPortAntennaDelayType object.')
f3GPSReceiverPortAntennaDelayType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 20), DelayOption()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayType.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAntennaDelayType.setDescription('This object configures GNSS antenna cable delay type (units)')
f3GPSReceiverPortCNOMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 55))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCNOMask.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortCNOMask.setDescription('This object configures the C/No mask in dB-Hz units, used by the\n        GNSS Receiver Port.')
f3GPSReceiverPortElevationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortElevationMask.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortElevationMask.setDescription('This object configures the elevation mask in degrees, used by the\n        GNSS Receiver Port.')
f3GPSReceiverPortCoordinateLatitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLatitude.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLatitude.setDescription('This object provides the GNSS Receiver Port coordinate latitude in \n        the following format: N|Sddd:mm:ss.sss (d=degrees, m=minutes, s=seconds)\n        e.g. N37:22:44.123.')
f3GPSReceiverPortCoordinateLongitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLongitude.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateLongitude.setDescription('This object provides the GNSS Receiver Port coordinate longitude in \n        the following format: E|Wddd:mm:ss.sss (d=degrees, m=minutes, s=seconds)\n        e.g. E157:53:33.456.')
f3GPSReceiverPortCoordinateAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateAltitude.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateAltitude.setDescription('This object provides the GNSS Receiver Port coordinate altitude in meters.')
f3GPSReceiverPortFirmwareUpgradePercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortFirmwareUpgradePercent.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortFirmwareUpgradePercent.setDescription('This object describes the firmware upgrade percent value.\n            Note: value 255 means NA.')
f3GPSReceiverPortPDOPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(200, 1200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortPDOPMask.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortPDOPMask.setDescription('This object configures PDOP Mask used by the GNSS Receiver.\n         The mask value is expressed in hundredth of the PDOP definition\n         value and it is rounded to the nearest multiple of hundreds.\n         For instance, a value of 200 means that GNSS Receiver stops\n         collecting data when f3GPSReceiverPortPDOP value exceeds 200.')
f3GPSReceiverPortSelfSurveyPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 28), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 500000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPeriod.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPeriod.setDescription('This object configures the Self Survey Period used by the GNSS Receiver.')
f3GPSReceiverPortSatMin1Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 29), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin1Threshold.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin1Threshold.setDescription('This object configures the first threshold for the minimum of satellites\n         used by the GNSS Receiver. SatMin1 must be stricly greater than SatMin2.')
f3GPSReceiverPortSatMin2Threshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 30), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin2Threshold.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSatMin2Threshold.setDescription('This object configures the second threshold for the minimum of satellites\n         used by the GNSS Receiver. SatMin1 must be stricly greater than SatMin2.')
f3GPSReceiverPortPDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 31), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortPDOP.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortPDOP.setDescription('This object provides the dimensionless PDOP value calculated by the GNSS \n         Receiver while GNSS Receiver Survey Pogress is not complete yet.\n         The value is expressed in hundredth of the PDOP definition. For instance, a \n         value of 153 means that PDOP calculated by GNSS Receiver is 1.53. \n         When the value cannot be evaluated by the GNSS Receiver or when Survey Progress\n         is complete, the value is shown with the maximum range value 4095.')
f3GPSReceiverPortSelfSurveyControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 32), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyControl.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyControl.setDescription('This object allows to enable or disable the automatic location control. \n         When it is enabled, the location of the equipment is evaluated by GNSS Receiver. \n         When it is disabled the position is given by Coordinate Lattitude, Coordinate \n         Longitude, and Altitude.')
f3GPSReceiverPortCoordinateStringAltitude = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 33), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateStringAltitude.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortCoordinateStringAltitude.setDescription('When Self Survey Control is disabled, this object configures the\n             GNSS Receiver Port altitude in meters.\n             The altitude is of the form [+/-]XXXXX[.Y] where XXXXX can be any \n             between -400 and 10000 value and Y allows precision of 1 decimal \n             after the floating point. Note that the sign and .Y are optional.\n             When Self Survey Control is enabled, this object is not configurable\n             and displays the GNSS Receiver Port altitude in meters.')
f3GPSReceiverPortLocationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 34), LocationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortLocationMode.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortLocationMode.setDescription('This object allows to manage location mode for the GNSS receiver on OSA540X.')
f3GPSReceiverPortTimeAdvanceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 35), TimeAdvanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceMode.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceMode.setDescription('This object allows to manage time advance mode for the GNSS on OSA540X.')
f3GPSReceiverPortTimeAdvanceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceValue.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortTimeAdvanceValue.setDescription('This object allows to configure time advance value (ns) for the GNSS on OSA540X.')
f3GPSReceiverPortForcedAntennaConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 37), ToggleValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortForcedAntennaConnected.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortForcedAntennaConnected.setDescription('This object allows to manage the antenna connected mode on OSA540X.')
f3GPSReceiverPortServiceAvailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 38), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailableTime.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailableTime.setDescription('This object allows to manage service available time (seconds) for GNSS.')
f3GPSReceiverPortServiceUnavailableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 39), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceUnavailableTime.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortServiceUnavailableTime.setDescription('This object allows to manage service unavailable time (seconds) for GNSS.')
f3GPSReceiverPortServiceAvailablePercentage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 40), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailablePercentage.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortServiceAvailablePercentage.setDescription('This object allows to manage service available in percentage [XXX.YY%] for GNSS.')
f3GPSReceiverPortAGC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortAGC.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortAGC.setDescription('This object represents the Automatic Gain Control (AGC) level for the GNSS receiver.')
f3GPSReceiverPortSelfSurveyPositionAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 42), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPositionAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSelfSurveyPositionAccuracy.setDescription('This object configures the Self Survey Position accuracy threshold (in millimeters) used by the GNSS Receiver.')
f3GPSReceiverPortHorizontalAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 43), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortHorizontalAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortHorizontalAccuracy.setDescription('This object represents the horizontal accuracy (in millimeters) of the position fix determined by the GNSS receiver.')
f3GPSReceiverPortVerticalAccuracy = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 44), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortVerticalAccuracy.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortVerticalAccuracy.setDescription('This object represents the vertical accuracy (in millimeters) of the position fix determined by the GNSS receiver.')
f3GPSReceiverPortTDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortTDOP.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortTDOP.setDescription('This object provides the dimensionless TDOP value calculated by the GNSS Receiver.\n         The value is expressed in hundredth of the TDOP definition. For instance, a \n         value of 153 means that TDOP calculated by GNSS Receiver is 1.53. \n         When the value cannot be evaluated by the GNSS Receiver, the value is shown with the minimum range value 0.')
f3GPSReceiverPortHDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortHDOP.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortHDOP.setDescription('This object provides the dimensionless HDOP value calculated by the GNSS \n         Receiver while GNSS Receiver Survey Pogress is not complete yet or the receiver is in navigation mode.\n         The value is expressed in hundredth of the HDOP definition. For instance, a \n         value of 153 means that HDOP calculated by GNSS Receiver is 1.53. \n         When the value cannot be evaluated by the GNSS Receiver or when Survey Progress\n         is complete, the value is shown with the minimum range value 0.')
f3GPSReceiverPortVDOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 47), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortVDOP.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortVDOP.setDescription('This object provides the dimensionless VDOP value calculated by the GNSS \n         Receiver while GNSS Receiver Survey Pogress is not complete yet or the receiver is in navigation mode.\n         The value is expressed in hundredth of the VDOP definition. For instance, a \n         value of 153 means that VDOP calculated by GNSS Receiver is 1.53. \n         When the value cannot be evaluated by the GNSS Receiver or when Survey Progress\n         is complete, the value is shown with the minimum range value 0.')
f3GPSReceiverPortFailureSuspendTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 48), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(3, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortFailureSuspendTime.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortFailureSuspendTime.setDescription('This object represents the Failure Suspend Time for the GNSS receiver.')
f3GPSReceiverPortSpoofingPpsThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsThreshold.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsThreshold.setDescription('This object defines the threshold  (in nanoseconds ) for generating PPS spoofing alarm in 5405.')
f3GPSReceiverPortSpoofingPpsDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 50), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsDifference.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingPpsDifference.setDescription('This object provides the calculated PPS difference (in nanoseconds ) provided by default and secondary GNSS receivers in 5405.')
f3GPSReceiverPortSpoofingLocationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationThreshold.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationThreshold.setDescription('This object defines the threshold (in meters) for generating Location spoofing alarm in 5405.')
f3GPSReceiverPortSpoofingLocationDifference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationDifference.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortSpoofingLocationDifference.setDescription('This object provides the calculated Location difference (in meters) based on position information provided by default and secondary GNSS receivers in 5405.')
f3GPSReceiverPortGnssDynamicModel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 57, 1, 53), DynamicModelType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3GPSReceiverPortGnssDynamicModel.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortGnssDynamicModel.setDescription('This object defines the dynamic model of GNSS. For example, whether the GNSS receiver is stationary, automotive etc. ')
cmPethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58), )
if mibBuilder.loadTexts: cmPethPsePortExtTable.setStatus('current')
if mibBuilder.loadTexts: cmPethPsePortExtTable.setDescription('A list of entries corresponding to PsePortExtEntry.')
cmPethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPethPsePortExtGroupIndex"), (0, "CM-FACILITY-MIB", "cmPethPsePortExtIndex"))
if mibBuilder.loadTexts: cmPethPsePortExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmPethPsePortExtEntry.setDescription('A conceptual row in the cmPethPsePortExtEntry.')
cmPethPsePortExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPethPsePortExtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cmPethPsePortExtGroupIndex.setDescription('This object has the same value with the group index in pethPsePortTalbe.')
cmPethPsePortExtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 2), Integer32())
if mibBuilder.loadTexts: cmPethPsePortExtIndex.setStatus('current')
if mibBuilder.loadTexts: cmPethPsePortExtIndex.setDescription('This object has the same value with the port index in pethPsePortTalbe.')
cmPethPsePortExtAssociatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 3), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPethPsePortExtAssociatedPort.setStatus('current')
if mibBuilder.loadTexts: cmPethPsePortExtAssociatedPort.setDescription('This object means the oid of associated physical port.')
pethPsePortExtPowerConsumption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtPowerConsumption.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtPowerConsumption.setDescription('This object means the power consumption of each port in mWatts.')
pethPsePortExtAvailablePowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 58, 1, 5), PsePowerLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortExtAvailablePowerLevel.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtAvailablePowerLevel.setDescription('This object means the pse port available power level.')
pethMainPseEXTTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59), )
if mibBuilder.loadTexts: pethMainPseEXTTable.setStatus('current')
if mibBuilder.loadTexts: pethMainPseEXTTable.setDescription('A list of entries corresponding to PethMainPseEXTEntry.')
pethMainPseEXTEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "pethMainPseExtGroupIndex"))
if mibBuilder.loadTexts: pethMainPseEXTEntry.setStatus('current')
if mibBuilder.loadTexts: pethMainPseEXTEntry.setDescription('A conceptual row in the pethMainPseEXTEntry.')
pethMainPseExtGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1, 1), Integer32())
if mibBuilder.loadTexts: pethMainPseExtGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pethMainPseExtGroupIndex.setDescription('This object has the same value with the group index in pethMainPseEXTTable.')
pethMainPseExtNonStandardPD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 59, 1, 2), PSENonStandardPD()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethMainPseExtNonStandardPD.setStatus('current')
if mibBuilder.loadTexts: pethMainPseExtNonStandardPD.setDescription("disabled: don't support non-standard PD,\n          enabled: support non-standard PD")
cmMPFlowTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60), )
if mibBuilder.loadTexts: cmMPFlowTable.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowTable.setDescription('A list of entries corresponding to MPFlow.')
cmMPFlowEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"))
if mibBuilder.loadTexts: cmMPFlowEntry.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowEntry.setDescription('A conceptual row in the cmMPFlowTable.')
cmMPFlowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: cmMPFlowIndex.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowIndex.setDescription('An integer index value used to uniquely identify this MultiPointFlow.')
cmMPFlowCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 2), F3DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowCircuitName.setDescription('This object allows SNMP management entities to provide a\n            circuit identifier with the MPFlow.')
cmMPFlowAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowAdminState.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowAdminState.setDescription('This object represents the Administrative State of the Flow.')
cmMPFlowOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMPFlowOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowOperationalState.setDescription('This object represents the Operational State of the Flow.')
cmMPFlowSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmMPFlowSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowSecondaryState.setDescription('This object represents the Secondary State of the Flow.')
cmMPFlowLearningEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowLearningEnabled.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowLearningEnabled.setDescription('DISABLED: The forwarding function of the Flow does not \n         dynamically learn MAC address to flowpoint mapping.\n         ENABLED: The forwarding function of the Flow dynamically \n         learns MAC address to flowpoint mapping based on ingress \n         flowpoing and source MAC address.')
cmMPFlowAgingTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowAgingTimer.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowAgingTimer.setDescription('MAC Table Entry will be removed from the forwarding table\n          after an inactivity time represented by this entry.\n          Not used in EG-X.')
cmMPFlowFwdTableSizeProfileID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 8), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowFwdTableSizeProfileID.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowFwdTableSizeProfileID.setDescription('Profile ID for Maximum number of MAC Table Entries for the flow')
cmMPFlowtableFullAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 9), LearningAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowtableFullAction.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowtableFullAction.setDescription('Action on ingress frames when the number of MAC Table entires\n          has reached the maximum defined by tableSize.\n          BLOCK: A frame with a Source MAC address not in the MAC \n          Table will be discarded.\n          FORWARD: A frame with a Source MAC address not in the MAC table \n          will not be learned and will be flooded to other flowpoints.')
cmMPFlowStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowStorageType.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowStorageType.setDescription('The type of storage configured for this entry.')
cmMPFlowRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n            \n            The values of cmMPFlowRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmFlowRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n            \n            The cmMPFlowRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).\n            \n            Note that flow creation and deletion is only supported\n            with access port in connection-oriented evpl mode.')
cmMPFlowLearningConfigAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 12), LearningConfigAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowLearningConfigAction.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowLearningConfigAction.setDescription('This objects allows performing user action on Learning Table.')
cmMPFlowFPList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 60, 1, 13), F3DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmMPFlowFPList.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowFPList.setDescription('This object only used to display trap and Flow point list.\n          Fp will be add in the cmMPFlowMemberTable.')
cmMPFlowMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61), )
if mibBuilder.loadTexts: cmMPFlowMemberTable.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowMemberTable.setDescription('A list of entries corresponding to MPFlowMember.')
cmMPFlowMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowIndex"), (0, "CM-FACILITY-MIB", "cmMPFlowMemberFPIndex"))
if mibBuilder.loadTexts: cmMPFlowMemberEntry.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowMemberEntry.setDescription('A conceptual row in the cmMPFlowMemberTable.')
cmMPFlowMemberFPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1, 1), VariablePointer())
if mibBuilder.loadTexts: cmMPFlowMemberFPIndex.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowMemberFPIndex.setDescription('This object describes the relate Flow point.')
cmMPFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 61, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmMPFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n            \n            The values of cmMPFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmFlowRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n            \n            The cmMPFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).\n            \n            Note that flow creation and deletion is only supported\n            with access port in connection-oriented evpl mode.')
cmEthernetTrafficPortPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncTable.setDescription('EthernetTraffic Port PCP drop eligibility encoding table. This\n         is applied to a frame that is egressing at the EthernetTraffic port.')
cmEthernetTrafficPortPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncEntry.setDescription('A conceptual row in the ethernetPBPcpDEEncPortTable.')
cmEthernetTrafficPortPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible encoding table.')
cmEthernetTrafficPortPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmEthernetTrafficPortPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropIneligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmEthernetTrafficPortPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 62, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEEncDropEligiblePrio.setDescription('This object is the PCP value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmEthernetTrafficPortPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecTable.setDescription('EthernetTraffic Port PCP drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmEthernetTrafficPortPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecEntry.setDescription('A conceptual row in the ethernetPBPcpDEDecPortTable.')
cmEthernetTrafficPortPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible decoding table.')
cmEthernetTrafficPortPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmEthernetTrafficPortPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming PCP value.')
cmEthernetTrafficPortPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 63, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          PCP value.')
cmEthernetTrafficPortPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64), )
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairTable.setDescription('EthernetTraffic Port PCP drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the PCP DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmEthernetTrafficPortPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairEntry.setDescription('A conceptual row in the cmAccPortPcpDEPairEntry.')
cmEthernetTrafficPortPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the PCP drop eligible priority pair table.')
cmEthernetTrafficPortPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmEthernetTrafficPortPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 64, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmEthernetTrafficPortClbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65), )
if mibBuilder.loadTexts: cmEthernetTrafficPortClbTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbTable.setDescription('A list of entries corresponding to Ethernet Traffic Port \n             Cable Length Benchmark.')
cmEthernetTrafficPortClbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortClbIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEntry.setDescription('A conceptual row in the cmEthernetTrafficPortClbTable. \n             These entries represent Cable Length Benchmarks \n             on the Ethernet Traffic Port.')
cmEthernetTrafficPortClbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbIndex.setDescription('An integer index value used to uniquely identify\n             this Cable Length Benchmark Entry specification.')
cmEthernetTrafficPortClbEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbEnabled.setDescription('This enables specification of Cable Length Benchmark entry.')
cmEthernetTrafficPortClbLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbLength.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbLength.setDescription('Cable length of Cable Points Entry. The cable length is of\n             the form XXX[.YY] where XX can be any integer value and YY\n             allows precision of 2 decimals after the floating point. Note\n             that .YY is optional.')
cmEthernetTrafficPortClbDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 65, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortClbDescr.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortClbDescr.setDescription('A textual string containing description of cable span.')
networkElementTMParamsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66), )
if mibBuilder.loadTexts: networkElementTMParamsTable.setStatus('current')
if mibBuilder.loadTexts: networkElementTMParamsTable.setDescription('Entries may be auto discovered, or can be explicitly created by \n          SNMP Manager.  Each remotely discovered shelf is represented as \n          a row in this table.')
networkElementTMParamsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1), )
networkElementEntry.registerAugmentions(("CM-FACILITY-MIB", "networkElementTMParamsEntry"))
networkElementTMParamsEntry.setIndexNames(*networkElementEntry.getIndexNames())
if mibBuilder.loadTexts: networkElementTMParamsEntry.setStatus('current')
if mibBuilder.loadTexts: networkElementTMParamsEntry.setDescription('A conceptual row in the networkElementTMParamsTable.')
neTMParamsBandwidthProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1, 1), BandwidthProfileMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neTMParamsBandwidthProfileMode.setStatus('current')
if mibBuilder.loadTexts: neTMParamsBandwidthProfileMode.setDescription('A Network Element level Bandwidth Profile Mode shall be supported \n         which will indicate if the CIR/EIR is interpreted as Information Rate (IR) \n         or Line Rate (LR). In IR mode BWP is enforced based on number of bytes beginning \n         with DA and ending with FCS as it was received at a port which is called the Service \n         Frame in MEF terminology. In LR mode the BWP is enforced based on the whole frame \n         including IFG, Preamble and SFD.')
neTMParamsAgingtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 66, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: neTMParamsAgingtime.setStatus('current')
if mibBuilder.loadTexts: neTMParamsAgingtime.setDescription('The object describe the system aging time.')
cmEthernetAccPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67), )
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtTable.setDescription('A list of entries corresponding to Ethernet Access Port \n            Facilities for JDSU configuration purposes.')
cmEthernetAccPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1), )
cmEthernetAccPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetAccPortJdsuExtEntry"))
cmEthernetAccPortJdsuExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJdsuExtEntry.setDescription('A conceptual row in the cmEthernetAccPortJdsuExtTable.')
cmEthernetAccPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortJDSUControlFramesSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJDSUControlFramesSnoopingEnabled.setDescription("Enabled: reaction/response to JDSU in-band loopback requests and hallo requests.\n         Disabled: Not reaction/response to JDSU in-band loopback requests and hallo requests. \n         FPGA shall not filter the JDSU control frames to processor.\n         From enabled to disabled, if there is already a JDSU loopback on the port, \n         release current loopback.\n         JDSU loopback doesn't need port in maintenance state.")
cmEthernetAccPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlan.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlan.setDescription('Applicable when port in JDSU VLAN loopback.')
cmEthernetAccPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 67, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlanList.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortJDSULoopbackVlanList.setDescription("The format is like 'OuterVid1-OuterPri1;InnerVid1-InnerPri1, OuterVid2-OuterPri2, \n        OuterVid3-OuterPri3;InnerVid3-InnerPri3'('1-*;2-*, 3-*, 4-*;5-*').")
cmEthernetNetPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68), )
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtTable.setDescription('A list of entries corresponding to Ethernet Network Port \n            Facilities for JDSU configuration purposes.')
cmEthernetNetPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortJdsuExtEntry"))
cmEthernetNetPortJdsuExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJdsuExtEntry.setDescription('A conceptual row in the cmEthernetNetPortJdsuExtTable.')
cmEthernetNetPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortJDSUControlFramesSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJDSUControlFramesSnoopingEnabled.setDescription("Enabled: reaction/response to JDSU in-band loopback requests and hallo requests.\n         Disabled: Not reaction/response to JDSU in-band loopback requests and hallo requests. \n         FPGA shall not filter the JDSU control frames to processor.\n         From enabled to disabled, if there is already a JDSU loopback on the port, \n         release current loopback.\n         JDSU loopback doesn't need port in maintenance state.")
cmEthernetNetPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlan.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlan.setDescription('Applicable when port in JDSU VLAN loopback.')
cmEthernetNetPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 68, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlanList.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortJDSULoopbackVlanList.setDescription("The format is like 'OuterVid1-OuterPri1;InnerVid1-InnerPri1, OuterVid2-OuterPri2, \n        OuterVid3-OuterPri3;InnerVid3-InnerPri3'('1-*;2-*, 3-*, 4-*;5-*').")
cmEthernetTrafficPortLpbkTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69), )
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTable.setDescription('A list of entries corresponding to Vlan loopback on\n            Ethernet Traffic Port.')
cmEthernetTrafficPortLpbkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkEntry.setDescription('A conceptual row in the cmEthernetTrafficPortLpbkTable. \n             These entries represent Vlan loopback \n             on the Ethernet Traffic Port.')
cmEthernetTrafficPortLpbkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 1), Integer32())
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkIndex.setDescription('An integer index value used to uniquely identify\n             this vlan loopback entry.')
cmEthernetTrafficPortLpbkInnerVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanEnabled.setDescription('This object represent the inner vlan whether enabled.')
cmEthernetTrafficPortLpbkInnerVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanTag.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkInnerVlanTag.setDescription('This object represent the inner vlanid value and priority value.\n            The value to be specified should be in the form \n            X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n            If Y is specified as a *, all Priorities (0 to 7) \n            are looped back.')
cmEthernetTrafficPortLpbkOuterVlanEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanEnabled.setDescription('This object represent the outter vlan whether enabled.')
cmEthernetTrafficPortLpbkOuterVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanTag.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkOuterVlanTag.setDescription('This object represent the outter vlanid value and priority value.\n            The value to be specified should be in the form \n            X-Y where X is the VLAN Id and Y is the VLAN Priority.  \n            If Y is specified as a *, all Priorities (0 to 7) \n            are looped back.')
cmEthernetTrafficPortLpbkTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkTime.setDescription('This object represent the vlan loopback time.')
cmEthernetTrafficPortLpbkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 7), CmLoopbackType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkStatus.setDescription('This object represent the vlan loopback status.')
cmEthernetTrafficPortLpbkConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 69, 1, 8), CmLoopbackType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkConfig.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortLpbkConfig.setDescription('This object represent the vlan loopback action.')
cmPrioMapV2ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70), )
if mibBuilder.loadTexts: cmPrioMapV2ProfileTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings V2 Profile.')
cmPrioMapV2ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"))
if mibBuilder.loadTexts: cmPrioMapV2ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileEntry.setDescription('A conceptual row in the cmPrioMapV2ProfileTable.')
cmPrioMapV2ProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2ProfileIndex.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileIndex.setDescription('The integer index value describes the profile index.')
cmPrioMapV2ProfileAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileAlias.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileAlias.setDescription('The integer index value describes the profile alias.')
cmPrioMapV2ProfileMapModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 3), PriorityMapMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileMapModeType.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileMapModeType.setDescription('The integer index value describes the profile PriorityMapMode.')
cmPrioMapV2ProfileStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileStorageType.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileStorageType.setDescription('The type of storage configured for this entry.')
cmPrioMapV2ProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmPrioMapV2ProfileStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmPrioMapV2ProfileRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmPrioMapV2ProfileRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmPrioMapV2ProfileIngressCosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 6), VlanTagType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmPrioMapV2ProfileIngressCosPriority.setStatus('deprecated')
if mibBuilder.loadTexts: cmPrioMapV2ProfileIngressCosPriority.setDescription('This object is used to specify whether the profile\n          uses the inner-tag or the outer-tag in determining the COS (Class of Service).')
cmPrioMapV2ProfileCosMapModeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 7), CosMappingMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapModeType.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapModeType.setDescription('This object is used to specify Cos mapping mode type.')
cmPrioMapV2ProfileCosMapControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapControl.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileCosMapControl.setDescription('This object is used to control whether has cmPrioMapV2PrioMappingCOSTable in profile.')
cmPrioMapV2ProfileDefaultCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileDefaultCos.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileDefaultCos.setDescription('This object is used to specify the Default COS to be used when the\n         Ingress Priority Mapping function does not match.')
cmPrioMapV2ProfileEgressCos = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 70, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2ProfileEgressCos.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileEgressCos.setDescription('This object is used to specify the Default COS to be used when the\n         Egress Priority Mapping function does not match.')
cmPrioMapV2IngressPrioMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71), )
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings.')
cmPrioMapV2IngressPrioMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingIndex"))
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingEntry.setDescription('A conceptual row in the cmPrioMapV2IngressPrioMappingTable.')
cmPrioMapV2IngressPrioMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingIndex.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingIndex.setDescription('The integer index value corresponding to a priority value\n             based on the cmPrioMapV2ProfileMode.\n             In case of TOS and 8021P, valid indices are 1 to 8,\n             in case of DSCP, valid indices are 1 to 64.')
cmPrioMapV2IngressPrioMappingInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingInPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingInPriority.setDescription('The integer index value corresponding to a priority value\n             based on the cmPrioMapV2ProfileMode.\n             In case of TOS and 8021P, valid indices are 0 to 7,\n             in case of DSCP, valid indices are 0 to 63.')
cmPrioMapV2IngressPrioMappingCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 71, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingCOS.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmPrioMapV2PrioMappingCOSTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72), )
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings.')
cmPrioMapV2PrioMappingCOSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2PrioMappingCOSIndex"))
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSEntry.setDescription('A conceptual row in the cmPrioMapV2PrioMappingCOSTable.')
cmPrioMapV2PrioMappingCOSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSIndex.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSIndex.setDescription('The index of this entry.')
cmPrioMapV2PrioMappingCOSValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSValue.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSValue.setDescription('This allows specification of the COS Value, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmPrioMapV2PrioMappingCOSOuterTagPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSOuterTagPri.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSOuterTagPri.setDescription("This allows specification of the VLAN priority that\n             will replace the outgoing (A2N direction) outer-tag's priority.")
cmPrioMapV2PrioMappingCOSInnerTagPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSInnerTagPri.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingCOSInnerTagPri.setDescription("This allows specification of the VLAN priority that\n             will replace the outgoing (A2N direction) inner-tag's (i.e. second tag) \n             priority.")
cmPrioMapV2PrioMappingEncapOuterTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterTagPriority.setDescription('This object allows configuring encapsulation outer tag priority value of ingress cos mapping.')
cmPrioMapV2PrioMappingEncapInnerTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapInnerTagPriority.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapInnerTagPriority.setDescription('This object allows configuring encapsulation inner tag priority value of ingress cos mapping.')
cmPrioMapV2PrioMappingEncapOuterDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterDscpValue.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingEncapOuterDscpValue.setDescription('This object allows configuring encapsulation outer DSCP value of ingress cos mapping.')
cmPrioMapV2PrioMappingDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 72, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingDscpValue.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingDscpValue.setDescription('This object allows configuring DSCP value of ingress cos mapping.')
cmPrioMapV2PrioMappingPriTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73), )
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings.')
cmPrioMapV2PrioMappingPriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2PrioMappingPriIndex"))
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriEntry.setDescription('A conceptual row in the cmPrioMapV2PrioMappingPriTable.')
cmPrioMapV2PrioMappingPriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 1), Integer32())
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriIndex.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriIndex.setDescription('The integer index value corresponding to a priority value\n             based on the cmPrioMapV2ProfileMode.\n             In case of TOS and 8021P, valid indices are 1 to 8,\n             in case of DSCP, valid indices are 1 to 64.')
cmPrioMapV2PrioMappingPriInPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriInPrio.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriInPrio.setDescription('The integer index value corresponding to a priority value\n             based on the cmPrioMapV2ProfileMode.\n             In case of TOS and 8021P, valid indices are 0 to 7,\n             in case of DSCP, valid indices are 0 to 63.')
cmPrioMapV2PrioMappingPriPrioControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 3), PrioMapControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriPrioControl.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriPrioControl.setDescription('This allows specification of whether the priority of\n             incoming X-TAG should be swapped with cmPrioMapV2XTagPriority.')
cmPrioMapV2PrioMappingPriXTagPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriXTagPrio.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriXTagPrio.setDescription("This allows specification of the VLAN priority that\n             will replace the incoming X-TAG's priority.  This is\n             applicable with cmPrioMapV2XTagControl as 'swap'.")
cmPrioMapV2PrioMappingPriCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 73, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriCOS.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2PrioMappingPriCOS.setDescription('This allows specification of the COS Priority, i.e.\n             this helps in determining the appropriate COS Policer for\n             the Flow.')
cmPrioMapV2ProfileAppliedObjTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74), )
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjTable.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjTable.setDescription('A list of entries corresponding to Ethernet Priority Mappings V2 Profile AppliedObj.')
cmPrioMapV2ProfileAppliedObjEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), (0, "CM-FACILITY-MIB", "cmPrioMapV2ProfileAppliedObj"))
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjEntry.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObjEntry.setDescription('A conceptual row in the cmPrioMapV2ProfileAppliedObjTable.')
cmPrioMapV2ProfileAppliedObj = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 74, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObj.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileAppliedObj.setDescription('The object describe the profile Applied to. It maybe the access port or network port or flow etc.')
cmAccPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75), )
if mibBuilder.loadTexts: cmAccPortExtTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtTable.setDescription('A list of entries corresponding to Access Port for configuration purposes.')
cmAccPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1), )
cmEthernetAccPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmAccPortExtEntry"))
cmAccPortExtEntry.setIndexNames(*cmEthernetAccPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmAccPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtEntry.setDescription('A conceptual row in the cmAccPortExtTable.')
cmAccPortExtMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited on this port.')
cmAccPortExtMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per port\n             When cmAccPortExtMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmAccPortExtMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per port\n             When cmAccPortExtMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmAccPortExtBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per port.')
cmAccPortExtBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per port\n             When cmAccPortExtBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmAccPortExtBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per port\n             When cmAccPortExtBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmAccPortExtCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitEnabled.setDescription('Whether multicast and broadcast packets need be limited per port.')
cmAccPortExtCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedLo.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents low 32 bits.')
cmAccPortExtCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtCombinedRateLimitSpeedHi.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents high 32 bits.')
cmAccPortExtRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 75, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortExtRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmAccPortExtRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
cmNetPortExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76), )
if mibBuilder.loadTexts: cmNetPortExtTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtTable.setDescription('A list of entries corresponding to Network Port for configuration purposes.')
cmNetPortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmNetPortExtEntry"))
cmNetPortExtEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmNetPortExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtEntry.setDescription('A conceptual row in the cmNetPortExtTable.')
cmNetPortExtMcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitEnabled.setDescription('Whether multicast packets need be limited on this port.')
cmNetPortExtMcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedLo.setDescription('The rate limiting for multicast packets per port\n             When cmNetPortExtMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmNetPortExtMcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtMcastRateLimitSpeedHi.setDescription('The rate limiting for multicast packets per port\n             When cmNetPortExtMcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmNetPortExtBcastRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitEnabled.setDescription('Whether broadcast packets need be limited per port.')
cmNetPortExtBcastRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedLo.setDescription('The rate limiting for broadcast packets per port\n             When cmNetPortExtBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents low 32 bits.')
cmNetPortExtBcastRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtBcastRateLimitSpeedHi.setDescription('The rate limiting for broadcast packets per port\n             When cmNetPortExtBcastRateLimitEnabled and the value is 0, \n             it means all multicast frame are dropped.\n\n             This objects only represents high 32 bits.')
cmNetPortExtCombinedRateLimitEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitEnabled.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitEnabled.setDescription('Whether multicast and broadcast packets need be limited per port.')
cmNetPortExtCombinedRateLimitSpeedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedLo.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedLo.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents low 32 bits.')
cmNetPortExtCombinedRateLimitSpeedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedHi.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtCombinedRateLimitSpeedHi.setDescription('The rate limiting for multicast and broadcast packets per port.\n             This objects only represents high 32 bits.')
cmNetPortExtRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 76, 1, 10), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExtRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExtRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
f3UsbWIFIDonglePortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77), )
if mibBuilder.loadTexts: f3UsbWIFIDonglePortTable.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortTable.setDescription('A list of entries corresponding to wifi dongle Port for configuration purposes.')
f3UsbWIFIDonglePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-ENTITY-MIB", "f3UsbHostIndex"))
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntry.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntry.setDescription('A conceptual row in the f3UsbWIFIDonglePortTable.')
f3UsbWIFIDonglePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 1), Integer32())
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIndex.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIndex.setDescription('An integer index value used to uniquely identify WIFI dongle port.')
f3UsbWIFIDonglePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIfIndex.setDescription('This object has the same value as ifIndex for WIFI dongle Port.\n            An integer index value used to uniquely identify this Port')
f3UsbWIFIDonglePortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEntityIndex.setDescription('Entity Index from ENTITY-MIB for this port.')
f3UsbWIFIDonglePortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAdminState.setDescription('This object represents the Administrative State of this Port.')
f3UsbWIFIDonglePortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortOperationalState.setDescription('This object represents the Operational State of this Port.')
f3UsbWIFIDonglePortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSecondaryState.setDescription('This object represents the Secondary State of this Port.')
f3UsbWIFIDonglePortSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSSID.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortSSID.setDescription('This object represents the SSID value of this port.')
f3UsbWIFIDonglePortPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortPassword.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortPassword.setDescription('This object represents the password value of this SSID.')
f3UsbWIFIDonglePortEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 9), WIFIEncryptionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEncryption.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortEncryption.setDescription('The encryption type of this port.')
f3UsbWIFIDonglePortIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIPAddress.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortIPAddress.setDescription('The IP address of this port.')
f3UsbWIFIDonglePortwWIFIIPNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortwWIFIIPNetMask.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortwWIFIIPNetMask.setDescription('The IP address mask of this port.')
f3UsbWIFIDonglePortWIFIDHCPRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 12), DHCPType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIDHCPRole.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIDHCPRole.setDescription('The DHCP role type of this port.')
f3UsbWIFIDonglePortWIFIAllocatedIPFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPFrom.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPFrom.setDescription('The start IP address could be allocated.')
f3UsbWIFIDonglePortWIFIAllocatedIPEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 14), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPEnd.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortWIFIAllocatedIPEnd.setDescription('The last IP address could be allocated.')
f3UsbWIFIDonglePortStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortStorageType.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortStorageType.setDescription('The type of storage configured for this entry.')
f3UsbWIFIDonglePortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortRowStatus.setDescription('The status of this row.\n               An entry MUST NOT exist in the active state unless all\n               objects in the entry have an appropriate value, as described\n               in the description clause for each writable object.\n               \n               The values of f3UsbWIFIDonglePortRowStatus supported are\n               createAndGo(4) and destroy(6).  All mandatory attributes\n               must be specified in a single SNMP SET request with\n               f3UsbWIFIDonglePortRowStatus value as createAndGo(4).\n               Upon successful row creation, this object has a\n               value of active(1).\n               \n               The f3UsbWIFIDonglePortRowStatus object may be modified if\n               the associated instance of this object is equal to active(1).\n               \n               Note that flow creation and deletion is only supported\n               with access port in connection-oriented evpl mode.')
f3UsbWIFIDonglePortAccessdUsers = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAccessdUsers.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortAccessdUsers.setDescription('The users list of accessed via WIFI dongle port.')
f3UsbWIFIDonglePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 77, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3UsbWIFIDonglePortName.setStatus('current')
if mibBuilder.loadTexts: f3UsbWIFIDonglePortName.setDescription('The WIFI dongle port name.')
bits8PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78), )
if mibBuilder.loadTexts: bits8PortGroupTable.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupTable.setDescription('A list of entries corresponding to BITS 8 Port Group \n             Facilities for configuration purposes.')
bits8PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "bits8PortGroupIndex"))
if mibBuilder.loadTexts: bits8PortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupEntry.setDescription('A conceptual row in the bits8PortGroupTable.')
bits8PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupIndex.setDescription('An integer index value used to uniquely identify\n          this BITS Port within the card.\n          Note that each BITs Port is uniquely identified\n          by the indices neIndex, shelfIndex, \n          slotIndex, portIndex, bits8PortGroupIndex.')
bits8PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 2), InterfaceIndex().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupIfIndex.setDescription('An integer index value used to uniquely identify\n          this BITS Port within the card.\n          Note that each BITs Port is uniquely identified\n          by the indices neIndex, shelfIndex, \n          slotIndex, bits8PortGroupIndex, bits8PortGroupIfIndex. ')
bits8PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupAdminState.setDescription('This object represents the Administrative State of the BITS \n             8 Port Group.')
bits8PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupOperationalState.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupOperationalState.setDescription('This object represents the Operational State of the BITS \n             8 Port Group.')
bits8PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupSecondaryState.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupSecondaryState.setDescription('This object represents the Secondary State of the BITS \n             8 Port Group.')
bits8PortGroupLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 6), BitsPortLineType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineType.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupLineType.setDescription('This object represents the BITS 8 Port Group Line Type.\n             Determines whether the T1/E1 BITS port operates in T1, E1, \n             or 2048kHz mode.')
bits8PortGroupLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 7), BitsPortLineCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineCode.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupLineCode.setDescription('This object represents the BITS 8 Port Group Line Code.\n             When the group is configured for a Line Type of T1, \n             the valid values are t1-b8zs and t1-ami and the default value\n             is t1-b8zs. When the group is configured for a Line Type of E1, \n             the valid values are e1-hdb3 and e1-ami and the default value \n             is e1-hdb3. When the group is configured for a Line Type of \n             2048kHz, the value is none.')
bits8PortGroupFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 8), BitsFrameFormat()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupFrameFormat.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupFrameFormat.setDescription('This object represents the BITS 8 Port Group Frame Format.\n             When the group is configured for a Line Type of T1, the\n             valid values are t1-sf and t1-esf and the default value is t1-esf.\n             When the group is configured for a Line Type of E1, the\n             valid values are e1-unframed, e1-crc4, and e1-dualFrame \n             and the default value is e1-crc4. When the group is configured \n             for a Line Type of 2048kHz, the value is none.\n\n             R4.1CC and R4.3CC do not support e1-unframed.')
bits8PortGroupSaBitDesignation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 9), SaBitDesignation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupSaBitDesignation.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupSaBitDesignation.setDescription('This object represents the BITS 8 Port Group Sa Bit Designation.\n             Determines which E1 Sa Bit is used to transmit/receive the SSM. \n             For T1 and 2048khz Line Types, the only allowed value is None. \n             For E1 Line Type, the default value is bit4 and it can \n             only have a value of None if QL Mode is disabled, otherwise, \n             None is an invalid value.')
bits8PortGroupQLModeEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupQLModeEnabled.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupQLModeEnabled.setDescription('This object allows to specify whether the BITS 8 Port Group \n          can be enabled/disabled for QL Mode. \n          When enabled, on receive side \n            -port shall PEER the SSM (Sync Status Messages) slow protocol PDUs \n             and take appropriate action \n          When enabled, on transmit side \n            -port shall periodically (once a second) transmit QL TLV \n             information PDUs\n          When disabled, on receive side,\n            -port shall terminate and discard any SSM slow protocol PDUs \n          When disabled, on transmit side \n            -port shall not transmit any SSM slow protocol PDUs.')
bits8PortGroupTransmitQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 11), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bits8PortGroupTransmitQL.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupTransmitQL.setDescription("This object provides the Transmitted QL value for the BITS 8 Port Group. \n          If the BITS group's QL Mode is disabled, then the received \n          QL value is not applicable.")
bits8PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 12), SSMQualityLevel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupSquelchQL.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupSquelchQL.setDescription("This object allows to set the Squelch QL for the BITS 8 Port Group. \n          The Squelch QL is only meaningful if the QL Mode is Enabled. \n          The Squelch QL is used to determine whether or not to squelch \n          the output of the BITS 8 Port Group. If the system's QL is lower \n          than the Squelch QL, the output is squelched.\n          If the BITS group's QL Mode is disabled, then the received \n          QL value is not applicable.")
bits8PortGroupLineBuildOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 13), LineBuildOut()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupLineBuildOut.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupLineBuildOut.setDescription('This object allows to manage the line build out on the BITS 8 Port Group when\n          the Line Type is T1.')
bits8PortGroupImpedance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 14), BitsPortImpedanceMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupImpedance.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupImpedance.setDescription('This object provides the line impedance mode for the BITS 8 Port Group.')
bits8PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: bits8PortGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of bits8PortGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            bits8PortGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The bits8PortGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
bits8PortGroupActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 16), PortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupActivePorts.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupActivePorts.setDescription('This object represents the Active State for each port of the BITS \n             8 Port Group.')
bits8PortGroupClkIfEnabledPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 78, 1, 17), PortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bits8PortGroupClkIfEnabledPorts.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupClkIfEnabledPorts.setDescription('This object represents the Clock Enabling State for each port of the BITS \n             8 Port Group.')
pps16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79), )
if mibBuilder.loadTexts: pps16PortGroupTable.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupTable.setDescription('A list of entries corresponding to Pulse Per Second \n             Port Facilities.')
pps16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "pps16PortGroupIndex"))
if mibBuilder.loadTexts: pps16PortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupEntry.setDescription('A conceptual row in the pps16PortGroupTable.')
pps16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupIndex.setDescription('An integer index value used to uniquely identify\n          this Pulse Per Second Port within the card.')
pps16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupIfIndex.setDescription('This object has the same value as ifIndex for \n          Pulse Per Second Port.  An integer index value used to \n          uniquely identify this Pulse Per Second Port.')
pps16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupAdminState.setDescription('This object represents the Administrative State of the Pulse Per Second \n             Port.')
pps16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupOperationalState.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupOperationalState.setDescription('This object represents the Operational State of the Pulse Per Second \n             Port.')
pps16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupSecondaryState.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupSecondaryState.setDescription('This object represents the Secondary State of the Pulse Per Second \n             Port.')
pps16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupAlias.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the gps 10MHz Port entity.')
pps16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 7), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupSquelchControl.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupSquelchControl.setDescription('This object allows to set the Squelch Control for the Pulse Per Second port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port.')
pps16PortGroupTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 8), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupTODSource.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupTODSource.setDescription('This object allows to set the Pulse Per Second Source for the Port.')
pps16PortGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 9), SignalDirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pps16PortGroupDirection.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupDirection.setDescription('This object allows specification of the signal type \n             (i.e. input or output).')
pps16PortGroupDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pps16PortGroupDelayCompensation.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupDelayCompensation.setDescription('This object allows specification of the PPS external Delay\n             Compensation in nanoseconds. The valid values are 0 to 96 in \n             8 nanoseconds steps. Values which are not multiple of 8 will\n             be automatically rounded up to the next multiple of 8.')
pps16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 79, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pps16PortGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of pps16PortGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            pps16PortGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The pps16PortGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
clk16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80), )
if mibBuilder.loadTexts: clk16PortGroupTable.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupTable.setDescription('A list of entries corresponding to Pulse Per Second \n             Port Facilities.')
clk16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "clk16PortGroupIndex"))
if mibBuilder.loadTexts: clk16PortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupEntry.setDescription('A conceptual row in the clk16PortGroupTable.')
clk16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupIndex.setDescription('An integer index value used to uniquely identify\n          this Pulse Per Second Port within the card.')
clk16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupIfIndex.setDescription('This object has the same value as ifIndex for \n          Pulse Per Second Port.  An integer index value used to \n          uniquely identify this Pulse Per Second Port.')
clk16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupAdminState.setDescription('This object represents the Administrative State of the Pulse Per Second \n             Port.')
clk16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupOperationalState.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupOperationalState.setDescription('This object represents the Operational State of the Pulse Per Second \n             Port.')
clk16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSecondaryState.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupSecondaryState.setDescription('This object represents the Secondary State of the Pulse Per Second \n             Port.')
clk16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupAlias.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the gps 10MHz Port entity.')
clk16PortGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 7), SignalDirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupDirection.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupDirection.setDescription('This object allows specification of the signal type \n             (i.e. input or output).')
clk16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 8), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSquelchControl.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupSquelchControl.setDescription('This object allows to set the Squelch Control for the Pulse Per Second port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port.')
clk16PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 9), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clk16PortGroupSquelchQL.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupSquelchQL.setDescription("This object allows to set the Squelch QL for the 10MHz port. \n          This value is used when f310MHzClockPortSquelchControl is squelch-ql.\n          The Squelch QL is used to determine whether or not to squelch \n          the output of the TOD port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.")
clk16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 80, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clk16PortGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of clk16PortGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            clk16PortGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The clk16PortGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
todPps16PortGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81), )
if mibBuilder.loadTexts: todPps16PortGroupTable.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupTable.setDescription('A list of entries corresponding to Time Of Day \n             Port Facilities.')
todPps16PortGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "todPps16PortGroupIndex"))
if mibBuilder.loadTexts: todPps16PortGroupEntry.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupEntry.setDescription('A conceptual row in the todPps16PortGroupTable.')
todPps16PortGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupIndex.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupIndex.setDescription('An integer index value used to uniquely identify\n          this Time Of Day Port within the card.')
todPps16PortGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupIfIndex.setDescription('This object has the same value as ifIndex for \n          Time Of Day Port.  An integer index value used to \n          uniquely identify this Time Of Day Port.')
todPps16PortGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 3), AdminState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupAdminState.setDescription('This object represents the Administrative State of the Time Of Day \n             Port.')
todPps16PortGroupOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupOperationalState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupOperationalState.setDescription('This object represents the Operational State of the Time Of Day \n             Port.')
todPps16PortGroupSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSecondaryState.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupSecondaryState.setDescription('This object represents the Secondary State of the Time Of Day \n             Port.')
todPps16PortGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupAlias.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the gps 10MHz Port entity.')
todPps16PortGroupSquelchControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 7), SquelchControl()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSquelchControl.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupSquelchControl.setDescription('This object allows to set the Squelch Control for the Time Of Day port. \n          The Squelch Control is used to determine the type of squelch control \n          used to squelch the output of the TOD port.')
todPps16PortGroupSquelchQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 8), SSMQualityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupSquelchQL.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupSquelchQL.setDescription("This object allows to set the Squelch QL for the Time Of Day port. \n          This value is used when todPps16PortGroupSquelchControl is squelch-ql.\n          The Squelch QL is used to determine whether or not to squelch \n          the output of the TOD port. If the system's QL is lower \n          than the Squelch QL, the output is squelched.")
todPps16PortGroupTODSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 9), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupTODSource.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupTODSource.setDescription('This object allows to set the Time Of Day Source for the Port.')
todPps16PortGroupOutputFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 10), TODOutputFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: todPps16PortGroupOutputFormat.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupOutputFormat.setDescription('This object allows to set the Output Format for the Time Of Day port. \n          The Output Format is used to determine the type of output format \n          of the TOD port.')
todPps16PortGroupDelayCompensation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: todPps16PortGroupDelayCompensation.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupDelayCompensation.setDescription('This object allows specification of the PPS external Delay\n             Compensation in nanoseconds. The valid values are 0 to 96 in \n             8 nanoseconds steps. Values which are not multiple of 8 will\n             be automatically rounded up to the next multiple of 8.')
todPps16PortGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 81, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: todPps16PortGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n            active state unless all objects in the entry have an \n            appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of clk16PortGroupRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            todPps16PortGroupRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The clk16PortGroupRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3PolicerEnvelopeTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82), )
if mibBuilder.loadTexts: f3PolicerEnvelopeTable.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeTable.setDescription('A list of entries corresponding to policer envelope for configuration purposes.')
f3PolicerEnvelopeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"))
if mibBuilder.loadTexts: f3PolicerEnvelopeEntry.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeEntry.setDescription('A conceptual row in the f3PolicerEnvelopeTable.')
f3PolicerEnvelopeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 1), Integer32())
if mibBuilder.loadTexts: f3PolicerEnvelopeIndex.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeIndex.setDescription('An integer index value used to uniquely identify policer envelope.')
f3PolicerEnvelopeCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PolicerEnvelopeCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeCouplingFlag.setDescription('This object allows specification of Policer Envelope Coupling Flag.\n            When coupling is enabled, tokens that would normally be \n            added to the C-bucket are passed to the E-bucket only once the CIR\n            bucket has reached its CBS level. Therefore under this condition\n            the E-bucket is being filled at the rate of CIR + EIR. \n            Normally the long term average of frames declared yellow, which is \n            bounded by the EIR. Coupling is a function to allow the \n            long term average of frames declared yellow to be bounded by \n            CIR + EIR. This allows a higher volume of yellow frames \n            to be delivered/received if the arrival of green marked frames \n            is low.  Tokens from the E-bucket do NOT get passed to the \n            C-bucket once the EBS level has been reached.\n            Enabling coupling in combination with a provisioned EIR of 0 \n            allows for a single rate three color marking (srTCM) algorithm \n            to be established.  In this situation the E-bucket is filled at the \n            CIR rate in the case the C-bucket is filled to its CBS level')
f3PolicerEnvelopeStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 3), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PolicerEnvelopeStorageType.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeStorageType.setDescription('The type of storage configured for this entry.')
f3PolicerEnvelopeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 82, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3PolicerEnvelopeRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeRowStatus.setDescription('The status of this row.\n               An entry MUST NOT exist in the active state unless all\n               objects in the entry have an appropriate value, as described\n               in the description clause for each writable object.\n               \n               The values of f3PolicerEnvelopeRowStatus supported are\n               createAndGo(4) and destroy(6).  All mandatory attributes\n               must be specified in a single SNMP SET request with\n               f3UsbWIFIDonglePortRowStatus value as createAndGo(4).\n               Upon successful row creation, this object has a\n               value of active(1).\n               \n               The f3PolicerEnvelopeRowStatus object may be modified if\n               the associated instance of this object is equal to active(1).\n               \n               Note that flow creation and deletion is only supported\n               with access port in connection-oriented evpl mode.')
f3EnvelopeAssocPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83), )
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerTable.setStatus('current')
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerTable.setDescription('A list of entries corresponding to Flows which are envelope associated policers instance')
f3EnvelopeAssocPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"), (0, "CM-FACILITY-MIB", "f3EnvelopeAssocPolicer"))
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: f3EnvelopeAssocPolicerEntry.setDescription('A conceptual row in the f3EnvelopeAssocPolicerTable.')
f3EnvelopeAssocPolicer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 83, 1, 1), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EnvelopeAssocPolicer.setStatus('current')
if mibBuilder.loadTexts: f3EnvelopeAssocPolicer.setDescription('Pointer to a policer instance which is associated with envelope.')
cmNetPortExpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84), )
if mibBuilder.loadTexts: cmNetPortExpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncTable.setDescription('Ethernet Network Port Exp drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Network port.')
cmNetPortExpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncEntry.setDescription('A conceptual row in the cmNetPortExpDEEncTable.')
cmNetPortExpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible encoding table.')
cmNetPortExpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmNetPortExpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncDropIneligiblePrio.setDescription('This object is the Exp value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmNetPortExpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 84, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEEncDropEligiblePrio.setDescription('This object is the Exp value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmNetPortExpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85), )
if mibBuilder.loadTexts: cmNetPortExpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecTable.setDescription('Ethernet Network Port Exp drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmNetPortExpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecEntry.setDescription('A conceptual row in the cmNetPortExpDEDecTable.')
cmNetPortExpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible decoding table.')
cmNetPortExpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmNetPortExpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming Exp value.')
cmNetPortExpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 85, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          Exp value.')
cmNetPortExpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86), )
if mibBuilder.loadTexts: cmNetPortExpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEPairTable.setDescription('Ethernet Network Port Exp drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the Exp DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmNetPortExpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortExpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortExpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEPairEntry.setDescription('A conceptual row in the cmNetPortExpDEPairEntry.')
cmNetPortExpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortExpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible priority pair table.')
cmNetPortExpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmNetPortExpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 86, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortExpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmNetPortIpPrecDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncTable.setDescription('Ethernet Network Port IpPrec drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Network port.')
cmNetPortIpPrecDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncEntry.setDescription('A conceptual row in the cmNetPortIpPrecDEEncTable.')
cmNetPortIpPrecDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the IpPrec drop eligible encoding table.')
cmNetPortIpPrecDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmNetPortIpPrecDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropIneligiblePrio.setDescription('This object is the IpPrec value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmNetPortIpPrecDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 87, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEEncDropEligiblePrio.setDescription('This object is the IpPrec value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmNetPortIpPrecDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecTable.setDescription('Ethernet Network Port IpPrec drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmNetPortIpPrecDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecEntry.setDescription('A conceptual row in the cmNetPortIpPrecDEDecTable.')
cmNetPortIpPrecDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the IpPrec drop eligible decoding table.')
cmNetPortIpPrecDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmNetPortIpPrecDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming IpPrec value.')
cmNetPortIpPrecDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 88, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          IpPrec value.')
cmNetPortIpPrecDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89), )
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairTable.setDescription('Ethernet Network Port IpPrec drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the IpPrec DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmNetPortIpPrecDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortIpPrecDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairEntry.setDescription('A conceptual row in the cmNetPortIpPrecDEPairEntry.')
cmNetPortIpPrecDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the IpPrec drop eligible priority pair table.')
cmNetPortIpPrecDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmNetPortIpPrecDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 89, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmNetPortEncapPcpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncTable.setDescription('Ethernet Network Port EncapPcp drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Network port.')
cmNetPortEncapPcpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncEntry.setDescription('A conceptual row in the cmNetPortEncapPcpDEEncTable.')
cmNetPortEncapPcpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the EncapPcp drop eligible encoding table.')
cmNetPortEncapPcpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
cmNetPortEncapPcpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropIneligiblePrio.setDescription('This object is the EncapPcp value that has a priority value with\n          implicit drop ineligibility encoded into it.')
cmNetPortEncapPcpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 90, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEEncDropEligiblePrio.setDescription('This object is the EncapPcp value that has a priority value with\n          implicit drop eligibility encoded into it.')
cmNetPortEncapPcpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecTable.setDescription('Ethernet Network Port EncapPcp drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
cmNetPortEncapPcpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecEntry.setDescription('A conceptual row in the cmNetPortEncapPcpDEDecTable.')
cmNetPortEncapPcpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the EncapPcp drop eligible decoding table.')
cmNetPortEncapPcpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
cmNetPortEncapPcpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming EncapPcp value.')
cmNetPortEncapPcpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 91, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          EncapPcp value.')
cmNetPortEncapPcpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92), )
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairTable.setDescription('Ethernet Network Port EncapPcp drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the EncapPcp DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
cmNetPortEncapPcpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "cmNetPortEncapPcpDEPairIndex"))
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairEntry.setDescription('A conceptual row in the cmNetPortEncapPcpDEPairEntry.')
cmNetPortEncapPcpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 1), Integer32())
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the EncapPcp drop eligible priority pair table.')
cmNetPortEncapPcpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
cmNetPortEncapPcpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 92, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
f3SatelliteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93), )
if mibBuilder.loadTexts: f3SatelliteTable.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteTable.setDescription('A list of GNSS Satellite entries on the NIDs.')
f3SatelliteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1), ).setIndexNames((0, "CM-FACILITY-MIB", "f3SatelliteIndex"))
if mibBuilder.loadTexts: f3SatelliteEntry.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteEntry.setDescription('A conceptual row in the f3SatelliteTable Entries can\n            be created/deleted in this table by management application action.')
f3SatelliteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3SatelliteIndex.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteIndex.setDescription('An integer index value used to uniquely identify\n             this Satellite Entry in the f3SatelliteTable.')
f3SatelliteInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteInUse.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteInUse.setDescription('This object indicates whether the Satellite Entry been used by GNSS receiver.\n     It is supported only on OSA542x devices.')
f3SatelliteSV = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteSV.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteSV.setDescription('This object indicates the Satellite Entry SV PRN number.')
f3SatelliteSVType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 4), ConstellationTypesBitMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteSVType.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteSVType.setDescription('This object indicates the Satellite Entry Constellation Type.')
f3SatelliteCNO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteCNO.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteCNO.setDescription('This object indicates the Satellite Entry Signal Level (Carrier-to-Noise power ratio)\n     in dB-Hz units.')
f3SatelliteHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 6), SatelliteHealth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteHealth.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteHealth.setDescription('This object indicates the Satellite Entry Health.')
f3SatelliteAzimuth = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 360))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteAzimuth.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteAzimuth.setDescription('This object indicates the Satellite Entry Azimuth Angle in degrees.')
f3SatelliteElevation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 90))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteElevation.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteElevation.setDescription('This object indicates the Satellite Entry Elevation Angle in degrees.')
f3SatelliteGnssReceiverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 93, 1, 9), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3SatelliteGnssReceiverPort.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteGnssReceiverPort.setDescription('This object provides the GNSS Receiver Port OID related to this Satellite Entry.')
cmEthernetTrafficPortJdsuExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94), )
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtTable.setDescription('A list of entries corresponding to Ethernet Traffic Port \n            Facilities for JDSU configuration purposes.')
cmEthernetTrafficPortJdsuExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1), )
cmEthernetTrafficPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuExtEntry"))
cmEthernetTrafficPortJdsuExtEntry.setIndexNames(*cmEthernetTrafficPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtEntry.setDescription('A conceptual row in the cmEthernetTrafficPortJdsuExtTable.')
cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled.setDescription("Enabled: reaction/response to JDSU in-band loopback requests and hallo requests.\n         Disabled: Not reaction/response to JDSU in-band loopback requests and hallo requests. \n         FPGA shall not filter the JDSU control frames to processor.\n         From enabled to disabled, if there is already a JDSU loopback on the port, \n         release current loopback.\n         JDSU loopback doesn't need port in maintenance state.")
cmEthernetTrafficPortJDSULoopbackVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlan.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlan.setDescription('Applicable when port in JDSU VLAN loopback.')
cmEthernetTrafficPortJDSULoopbackVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 94, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlanList.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJDSULoopbackVlanList.setDescription("The format is like 'OuterVid1-OuterPri1;InnerVid1-InnerPri1, OuterVid2-OuterPri2, \n        OuterVid3-OuterPri3;InnerVid3-InnerPri3'('1-*;2-*, 3-*, 4-*;5-*').")
f3FpQosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95), )
if mibBuilder.loadTexts: f3FpQosShaperTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperTable.setDescription('A list of entries corresponding to Flow Point \n        Quality of Service Shaper for configuration purposes.')
f3FpQosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosShaperIndex"))
if mibBuilder.loadTexts: f3FpQosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperEntry.setDescription('A conceptual row in the f3FpQosShaperTable. \n        These entries represent an Flow Point Quality \n        of Service Shaper.')
f3FpQosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3FpQosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Shaper.')
f3FpQosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperAdminState.setDescription('This object represents the Administrative State of a Shaper.')
f3FpQosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperOperationalState.setDescription('This object represents the Operational State of a Shaper.')
f3FpQosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperSecondaryState.setDescription('This object represents the Secondary State of the Shaper.')
f3FpQosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Shaper.')
f3FpQosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Shaper.')
f3FpQosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3FpQosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Shaper.')
f3FpQosShaperCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperCBS.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Shaper.')
f3FpQosShaperEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperEBS.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Shaper.')
f3FpQosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
f3FpQosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperCOS.setDescription('This object provides the COS (Class of Service) value for\n        the QOS Shaper.')
f3FpQosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStorageType.setDescription('The type of storage configured for this entry.')
f3FpQosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3FpQosShaperRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3FpQosShaperRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3FpQosShaperRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3FpQosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 95, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperWfqWeight.setDescription('This object represents the wfq weight of the QoS Shaper.')
f3FpQosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96), )
if mibBuilder.loadTexts: f3FpQosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerTable.setDescription('A list of entries corresponding to Flow Point\n        Quality of Service Policer for configuration purposes.')
f3FpQosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosPolicerIndex"))
if mibBuilder.loadTexts: f3FpQosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEntry.setDescription('A conceptual row in the f3FpQosPolicerTable. \n        These entries represent an Flow Point Quality\n        of Service Policer.')
f3FpQosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: f3FpQosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerIndex.setDescription('The unique integer index value corresponding to a Quality \n        of Service Policer.\n        The Policer Index represents the COS level. This\n        is applicable in case of a Multi COS Flow Point. Index 1\n        represents COS 0; Index 2 represents COS 1 and so on.')
f3FpQosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 2), AdminState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerAdminState.setDescription('This object represents the Administrative State of a Policer.')
f3FpQosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerOperationalState.setDescription('This object represents the Operational State of a Policer.')
f3FpQosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerSecondaryState.setDescription('This object represents the Secondary State of a Policer.')
f3FpQosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCIRLo.setDescription('This object represents the Commited Information Rate (CIR)\n        (Lower 32 bits) of the Policer.')
f3FpQosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCIRHi.setDescription('This object represents the Commited Information Rate (CIR)\n        (Higher 32 bits) of the Policer.')
f3FpQosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEIRLo.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3FpQosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEIRHi.setDescription('This object represents the Excess Information Rate (EIR)\n        (Lower 32 bits) of a Policer.')
f3FpQosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCBS.setDescription('This object represents the Commited Burst Size (CBS) \n        of a Policer.')
f3FpQosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEBS.setDescription('This object represents the Excess Burst Size (EBS) \n        of a Policer.')
f3FpQosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerAlgorithm.setDescription("This object represents Policer algorithm as 'srTCM'\n        (Single Rate Triple Color Marking) or 'trTCM' \n        (Two Rate Triple Color Marking).")
f3FpQosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n        'color-aware' or 'color-blind'.")
f3FpQosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low. Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
f3FpQosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 14), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerPolicingEnabled.setDescription('This object allows specification of Policer Policing.\n        When Policing is disabled, traffic policing is bypassed. \n        When Policing is enabled, traffic policing is applied.')
f3FpQosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 15), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStorageType.setDescription('The type of storage configured for this entry.')
f3FpQosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3FpQosPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerRowStatus.setDescription('The status of this row.\n        An entry MUST NOT exist in the active state unless all\n        objects in the entry have an appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3FpQosPolicerRowStatus supported are\n        createAndGo(4) and destroy(6). All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3FpQosPolicerRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3FpQosPolicerRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3FpQosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the high 32 bits.')
f3FpQosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerCIRMaxLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the lower 32 bits.')
f3FpQosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the high 32 bits.')
f3FpQosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEIRMaxLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the lower 32 bits.')
f3FpQosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerEnvelopeObject.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerEnvelopeObject.setDescription('This object allows specification of envelope object.')
f3FpQosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 96, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerRank.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerRank.setDescription('This object allows specification of rank value.')
cmEthernetTrafficPortCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97), )
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Table.setDescription('A list of entries corresponding to Ethernet Traffic Port \n             Control Protocol Disposition (CPD) V2.  This support of\n             CPD is provided on the GE206/GE201 device.')
cmEthernetTrafficPortCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Index"))
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Entry.setDescription('A conceptual row in the cmEthernetTrafficPortCpdV2Table. \n             These entries represent a Control Protocol Disposition \n             filtering criteria on the Ethernet Traffic Port.')
cmEthernetTrafficPortCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Index.setDescription('Unique Index value to access the CPD row.')
cmEthernetTrafficPortCpdV2CiscoGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CiscoGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CiscoGroupDispType.setDescription('Deprecated - each Cisco protocol has its own disposition.\n         Control Protocol Disposition for Cisco Group.  This includes\n         ISL, PAGP, UDLD, CDP, VTP, DTP, PSVTP+, UplinkFast, VLAN Bridge,\n         L2PT.  Note that a specific protocol filter overrides the\n         group setting.')
cmEthernetTrafficPortCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n         MAC Address (01:00:0C:00:00:00).')
cmEthernetTrafficPortCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
cmEthernetTrafficPortCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
cmEthernetTrafficPortCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
cmEthernetTrafficPortCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
cmEthernetTrafficPortCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
cmEthernetTrafficPortCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n         MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
cmEthernetTrafficPortCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n         MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
cmEthernetTrafficPortCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n         MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
cmEthernetTrafficPortCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n         MAC Address (01:00:0C:CD:CD:D0).')
cmEthernetTrafficPortCpdV2BridgeGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeGroupDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Bridge Group Control Protocol Disposition Type.  This\n         includes BPDU, PAUSE (IEEE 802.3x Flow Control), \n         LACP (Link Aggregation), LACP Marker (Marker), \n         EFM OAM (IEEE 802.3 ah) and IEEE 802.1x Port Authentication, \n         besides reserved MAC addresses from \n         01:80:C2:00:00:04 thru 01:80:C2:00:00:0F.')
cmEthernetTrafficPortCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n         MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n         Spanning Tree). MAC Address (01:80:C2:00:00:00).')
cmEthernetTrafficPortCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n         (PAUSE frames).')
cmEthernetTrafficPortCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n         Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
cmEthernetTrafficPortCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
cmEthernetTrafficPortCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
cmEthernetTrafficPortCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n         MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
cmEthernetTrafficPortCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n         MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
cmEthernetTrafficPortCpdV2BridgeReservedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeReservedDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2BridgeReservedDispType.setDescription('Deprecated - individual dispositions available for each MAC.\n         Control Protocol Disposition for Range of MAC Addresses\n         from 01:80:C2:00:00:04 to 01:80:C2:00:00:0F.')
cmEthernetTrafficPortCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n         MAC Address (01:80:C2:00:00:10).')
cmEthernetTrafficPortCpdV2GARPGroupDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 23), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPGroupDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPGroupDispType.setDescription('Deprecated - each GARP Group protocol has its own disposition.\n         Group Disposition type which includes GMRP, GVRP and\n         MAC Address from range 01:80:C2:00:00:20 to 01:80:C2:00:00:2F.')
cmEthernetTrafficPortCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n         Protocol. MAC Address (01:80:C2:00:00:20).')
cmEthernetTrafficPortCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n         Protocol. MAC Address (01:80:C2:00:00:21).')
cmEthernetTrafficPortCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n         MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
cmEthernetTrafficPortCpdV2LLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LLDPDispType.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2LLDPDispType.setDescription('Deprecated - each LLDP MAC protocol has its own disposition.\n         LLDP (Link Layer Discovery Protocol) Disposition type. \n         MAC Address 01:80:C2:00:00:0e, 01:80:C2:00:00:03, or\n         01:80:C2:00:00:00.')
cmEthernetTrafficPortCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n         MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
cmEthernetTrafficPortCpdV2L2PTTunnelMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTTunnelMac.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2L2PTTunnelMac.setDescription("Configurable Layer 2 Protocol Tunneling MAC Address.  \n         For protocols STP, CDP and VTP, with control protocol disposition as \n         pass-thru-l2pt, this configured MAC address replaces the DA, upon\n         encapsulation.  For decapsulation, protocol signature and this \n         configured MAC address are matched and the MAC address is replaced\n         with the protocol's inferred MAC address.")
cmEthernetTrafficPortCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
cmEthernetTrafficPortCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
cmEthernetTrafficPortCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
cmEthernetTrafficPortCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
cmEthernetTrafficPortCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
cmEthernetTrafficPortCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
cmEthernetTrafficPortCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
cmEthernetTrafficPortCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
cmEthernetTrafficPortCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
cmEthernetTrafficPortCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
cmEthernetTrafficPortCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
cmEthernetTrafficPortCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
cmEthernetTrafficPortCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
cmEthernetTrafficPortCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
cmEthernetTrafficPortCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 44), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
cmEthernetTrafficPortCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 45), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
cmEthernetTrafficPortCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 46), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 47), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
cmEthernetTrafficPortCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 48), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
cmEthernetTrafficPortCpdV2PtpUntaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 49), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpUntaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpUntaggedDispType.setDescription('PTP untagged frame Disposition type.')
cmEthernetTrafficPortCpdV2PtpTaggedDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 97, 1, 50), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpTaggedDispType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortCpdV2PtpTaggedDispType.setDescription('PTP tagged frame Disposition type.')
f3FlowPointCpdV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98), )
if mibBuilder.loadTexts: f3FlowPointCpdV2Table.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Table.setDescription('A list of entries corresponding to  Flow Point\n        Control Protocol Disposition V2.')
f3FlowPointCpdV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FlowPointCpdV2Index"))
if mibBuilder.loadTexts: f3FlowPointCpdV2Entry.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Entry.setDescription('A conceptual row in the f3FlowPointCpdV2Table. \n        These entries represent a Control Protocol Disposition \n        filtering criteria on the  Flow Point.')
f3FlowPointCpdV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 1), Integer32())
if mibBuilder.loadTexts: f3FlowPointCpdV2Index.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Index.setDescription('Unique Index value to access the CPD row.')
f3FlowPointCpdV2IslDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 2), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2IslDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2IslDispType.setDescription('Control Protocol Disposition for ISL (Inter Switch Link).\n        MAC Address (01:00:0C:00:00:00).')
f3FlowPointCpdV2PagpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 3), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PagpDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2PagpDispType.setDescription('Control Protocol Disposition for PAGP (Port Aggregation Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x104).')
f3FlowPointCpdV2UdldDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 4), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2UdldDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2UdldDispType.setDescription('Control Protocol Disposition for UDLD (Unidirectional Link Detection).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x111).')
f3FlowPointCpdV2CdpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 5), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2CdpDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2CdpDispType.setDescription('Control Protocol Disposition for CDP (Cisco Discovery Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2000).')
f3FlowPointCpdV2VtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 6), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2VtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2VtpDispType.setDescription('Control Protocol Disposition for VTP (VLAN Trunking Protocol).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2003).')
f3FlowPointCpdV2DtpDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 7), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2DtpDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2DtpDispType.setDescription('Control Protocol Disposition for DTP (Dynamic Trunking).\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x2004).')
f3FlowPointCpdV2PvstpPlusDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 8), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PvstpPlusDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2PvstpPlusDispType.setDescription('Control Protocol Disposition for Spanning Tree PVSTP+.\n        MAC Address (01:00:0C:CC:CC:CC), Ethertype(0x10B).')
f3FlowPointCpdV2UplinkFastDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 9), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2UplinkFastDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2UplinkFastDispType.setDescription('Control Protocol Disposition for STP UplinkFast.\n        MAC Address (01:00:0C:CD:CD:CD), Ethertype(0x200A).')
f3FlowPointCpdV2VlanBridgeDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 10), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2VlanBridgeDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2VlanBridgeDispType.setDescription('Control Protocol Disposition for VLAN Bridge.\n        MAC Address (01:00:0C:CD:CD:CE), Ethertype(0x10C).')
f3FlowPointCpdV2L2PTDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 11), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2L2PTDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2L2PTDispType.setDescription('Control Protocol Disposition for Layer 2 Protocol Tunnelling(L2PT).\n        MAC Address (01:00:0C:CD:CD:D0).')
f3FlowPointCpdV2BPDUDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 12), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2BPDUDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2BPDUDispType.setDescription('Control Protocol Disposition for IEEE Spanning Tree(STP),\n        MSTP (Multiple Spanning Tree) and RSTP (Rapid Reconfiguration of\n        Spanning Tree). MAC Address (01:80:C2:00:00:00).')
f3FlowPointCpdV2PauseDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 13), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PauseDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2PauseDispType.setDescription('Control Protocol Disposition for IEEE 802.3x Flow Control \n        (PAUSE frames).')
f3FlowPointCpdV2LACPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 14), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPDispType.setDescription('Control Protocol Disposition for 802.3ad Link Aggregation\n        Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(01).')
f3FlowPointCpdV2LACPMarkerDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 15), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPMarkerDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2LACPMarkerDispType.setDescription('Control Protocol Disposition for IEEE 802.3ad Marker Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(02).')
f3FlowPointCpdV2EfmOamDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 16), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2EfmOamDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2EfmOamDispType.setDescription('Control Protocol Disposition for IEEE 802.3ah EFM OAM.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x8809), Subtype(03).')
f3FlowPointCpdV2SSMDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 17), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2SSMDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2SSMDispType.setDescription('Control Protocol Disposition for Sync Status Messages.\n        MAC Address (01:80:C2:00:00:02), Ethertype (0x19A7), Subtype(0A).')
f3FlowPointCpdV2PortAuthenDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 18), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2PortAuthenDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2PortAuthenDispType.setDescription('Control Protocol Disposition for IEEE 802.1x Protocol.\n        MAC Address (01:80:C2:00:00:03), Ethertype (0x888E).')
f3FlowPointCpdV2LANBridgesDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 19), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2LANBridgesDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2LANBridgesDispType.setDescription('Control Protocol Disposition for IEEE 802.1d LAN Bridge Managment.\n        MAC Address (01:80:C2:00:00:10).')
f3FlowPointCpdV2GMRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 20), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GMRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2GMRPDispType.setDescription('Control Protocol Disposition for GARP Multicast Registration\n        Protocol. MAC Address (01:80:C2:00:00:20).')
f3FlowPointCpdV2GVRPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 21), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GVRPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2GVRPDispType.setDescription('Control Protocol Disposition for GARP VLAN Registration\n        Protocol. MAC Address (01:80:C2:00:00:21).')
f3FlowPointCpdV2GARPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 22), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2GARPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2GARPDispType.setDescription('Group Disposition type which includes GARP Reserved \n        MAC Address from range 01:80:C2:00:00:22 to 01:80:C2:00:00:2F.')
f3FlowPointCpdV2ActiveControlProtocols = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 23), CmActiveControlProtocolsType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FlowPointCpdV2ActiveControlProtocols.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2ActiveControlProtocols.setDescription('List of Active Control Protocol Dispositions. Note that\n        if the Port Level Disposition control is set to PEER or \n        DISCARD, the flow level disposition is no longer active.\n        This object provides information on all the active\n        dispositions.')
f3FlowPointCpdV2ELMIDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 24), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2ELMIDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2ELMIDispType.setDescription('ELMI (Ethernet Local Management Interface) Disposition type. \n        MAC Address 01:80:C2:00:00:07 and EtherType of 0x88EE.')
f3FlowPointCpdV2Mac00DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 25), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac00DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac00DispType.setDescription('MAC Address 01:80:C2:00:00:00 Disposition type.')
f3FlowPointCpdV2Mac01DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 26), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac01DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac01DispType.setDescription('MAC Address 01:80:C2:00:00:01 Disposition type.')
f3FlowPointCpdV2Mac02DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 27), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac02DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac02DispType.setDescription('MAC Address 01:80:C2:00:00:02 Disposition type.')
f3FlowPointCpdV2Mac03DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 28), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac03DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac03DispType.setDescription('MAC Address 01:80:C2:00:00:03 Disposition type.')
f3FlowPointCpdV2Mac04DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 29), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac04DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac04DispType.setDescription('MAC Address 01:80:C2:00:00:04 Disposition type.')
f3FlowPointCpdV2Mac05DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 30), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac05DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac05DispType.setDescription('MAC Address 01:80:C2:00:00:05 Disposition type.')
f3FlowPointCpdV2Mac06DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 31), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac06DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac06DispType.setDescription('MAC Address 01:80:C2:00:00:06 Disposition type.')
f3FlowPointCpdV2Mac07DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 32), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac07DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac07DispType.setDescription('MAC Address 01:80:C2:00:00:07 Disposition type.')
f3FlowPointCpdV2Mac08DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 33), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac08DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac08DispType.setDescription('MAC Address 01:80:C2:00:00:08 Disposition type.')
f3FlowPointCpdV2Mac09DispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 34), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac09DispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac09DispType.setDescription('MAC Address 01:80:C2:00:00:09 Disposition type.')
f3FlowPointCpdV2Mac0ADispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 35), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0ADispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0ADispType.setDescription('MAC Address 01:80:C2:00:00:0A Disposition type.')
f3FlowPointCpdV2Mac0BDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 36), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0BDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0BDispType.setDescription('MAC Address 01:80:C2:00:00:0B Disposition type.')
f3FlowPointCpdV2Mac0CDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 37), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0CDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0CDispType.setDescription('MAC Address 01:80:C2:00:00:0C Disposition type.')
f3FlowPointCpdV2Mac0DDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 38), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0DDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0DDispType.setDescription('MAC Address 01:80:C2:00:00:0D Disposition type.')
f3FlowPointCpdV2Mac0EDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 39), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0EDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0EDispType.setDescription('MAC Address 01:80:C2:00:00:0E Disposition type.')
f3FlowPointCpdV2Mac0FDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 40), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0FDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2Mac0FDispType.setDescription('MAC Address 01:80:C2:00:00:0F Disposition type.')
f3FlowPointCpdV2NearestLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 41), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2NearestLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2NearestLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Nearest Bridge Disposition type.')
f3FlowPointCpdV2NonTpmrLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 42), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2NonTpmrLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2NonTpmrLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Non-TPMR Bridge Disposition type.')
f3FlowPointCpdV2CustomerLLDPDispType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 98, 1, 43), CmControlProtocolDispType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FlowPointCpdV2CustomerLLDPDispType.setStatus('current')
if mibBuilder.loadTexts: f3FlowPointCpdV2CustomerLLDPDispType.setDescription('LLDP (Link Layer Discovery Protocol) Customer Bridge Disposition type.')
f3AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99), )
if mibBuilder.loadTexts: f3AclRuleTable.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleTable.setDescription('A list of entries for the L2 ACL rule.')
f3AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3AclRuleIndex"))
if mibBuilder.loadTexts: f3AclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleEntry.setDescription('A conceptual row in the f3AclRuleTable.')
f3AclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 1), Integer32())
if mibBuilder.loadTexts: f3AclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleIndex.setDescription('The ACL rule number.')
f3AclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleAdminState.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleAdminState.setDescription('This object allows user configure the Acl Rule in-service or management state.')
f3AclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleAlias.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleAlias.setDescription('The ACL rule alias.')
f3AclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriority.setStatus('current')
if mibBuilder.loadTexts: f3AclRulePriority.setDescription('The ACL rule priority.')
f3AclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 5), AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOperation.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOperation.setDescription('The ACL rule action.')
f3AclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleCosOverrideControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleCosOverrideControl.setDescription('The ACL rule COS Override control.')
f3AclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleCOS.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleCOS.setDescription('The ACL rule class of service.')
f3AclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressControl.setDescription('The ACL rule Source MAC address control.')
f3AclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 9), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcMacAddress.setDescription('The ACL rule dynamic Source MAC address.')
f3AclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 10), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcMacAddressMask.setDescription('The ACL rule dynamic Source MAC address mask.')
f3AclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstMacAddressControl.setDescription('The ACL rule dynamic Destination MAC address control.')
f3AclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 12), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstMacAddress.setDescription('The ACL rule dynamic Destination MAC address.')
f3AclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 13), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstMacAddressMask.setDescription('The ACL rule dynamic Destination MAC address mask.')
f3AclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDControl.setDescription('The ACL rule outer VID control.')
f3AclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 15), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDLowLimit.setDescription('The ACL rule outer Vlan ID low limit.')
f3AclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 16), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanVIDHighLimit.setDescription('The ACL rule outer Vlan ID high limit.')
f3AclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDControl.setDescription('The ACL rule inner VID control.')
f3AclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 18), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDLowLimit.setDescription('The ACL rule inner Vlan ID low limit.')
f3AclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 19), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanVIDHighLimit.setDescription('The ACL rule Inner Vlan ID high limit.')
f3AclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpControl.setDescription('The ACL rule outer vlan PCP control.')
f3AclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 21), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpLowLimit.setDescription('The ACL rule outer vlan PCP priority low limit.')
f3AclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 22), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanPcpHighLimit.setDescription('The ACL rule outer vlan PCP priority high limit.')
f3AclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpControl.setDescription('The ACL rule inner vlan PCP control.')
f3AclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 24), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpLowLimit.setDescription('The ACL rule inner vlan PCP priority low limit.')
f3AclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 25), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleInnerVlanPcpHighLimit.setDescription('The ACL rule inner vlan PCP priority high limit.')
f3AclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanDeiControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanDeiControl.setDescription('The ACL rule outer vlan DEI control.')
f3AclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleOuterVlanDei.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleOuterVlanDei.setDescription('The ACL rule outer vlan DEI.')
f3AclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleEtherTypeControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleEtherTypeControl.setDescription('The ACL rule outer vlan ether type control.')
f3AclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleEtherType.setDescription('The ACL rule outer vlan ether type.')
f3AclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityControl.setDescription('The ACL rule IPv4 Priority control whether enabled.')
f3AclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityLowLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityLowLimit.setDescription('The ACL rule IPv4 priority low limit.')
f3AclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityHighLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRuleIpv4PriorityHighLimit.setDescription('The ACL rule ipv4 priority high limit.')
f3AclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 33), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleProtocolControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleProtocolControl.setDescription('The ACL rule protocol control whether enabled.')
f3AclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleProtocolNumber.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleProtocolNumber.setDescription('The ACL rule protocol number.')
f3AclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 35), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressControl.setDescription('The ACL rule source IPv4 Adress control whether enabled.')
f3AclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 36), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressLowLimit.setDescription('The ACL rule source IPv4 Adress low limit.')
f3AclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 37), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv4AddressHighLimit.setDescription('The ACL rule source ipv4 adress high limit.')
f3AclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 38), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressControl.setDescription('The ACL rule Destination IPv4 Adress control whether enabled.')
f3AclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 39), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressLowLimit.setDescription('The ACL rule Destination IPv4 Adress low limit.')
f3AclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 40), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv4AddressHighLimit.setDescription('The ACL rule destination ipv4 adress high limit.')
f3AclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 41), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcPortControl.setDescription('The ACL rule source port whether enabled.')
f3AclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcPortLowLimit.setDescription('The ACL rule source port low limit.')
f3AclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcPortHighLimit.setDescription('The ACL rule source port low limit.')
f3AclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstPortControl.setDescription('The ACL rule destination port whether enabled.')
f3AclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstPortLowLimit.setDescription('The ACL rule destination port low limit.')
f3AclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstPortHighLimit.setDescription('The ACL rule destination port low limit.')
f3AclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleTcpFlagsControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleTcpFlagsControl.setDescription('The ACL rule outer vlan TCP flags control.')
f3AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleTcpFlags.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleTcpFlags.setDescription('The ACL rule outer vlan TCP flags.')
f3AclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 49), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AclRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStorageType.setDescription('The type of storage configured for this entry.')
f3AclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3AclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n    \n            The values of f3AclRuleRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3AclRuleRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n    \n            The f3AclRuleRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3AclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 51), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleActive.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleActive.setDescription('The ACL Rule Active activates/deactivates ACL Rule.')
f3AclRuleSrcIpv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 52), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressControl.setDescription('The ACL rule source ipv6 adress is control enabled.')
f3AclRuleSrcIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 53), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv6Address.setDescription('The ACL rule source ipv6 adress high limit.')
f3AclRuleSrcIpv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleSrcIpv6AddressPrefixLen.setDescription('The ACL rule source ipv6 prefix length.')
f3AclRuleDstIpv6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressControl.setDescription('The ACL rule destination ipv6 Adress is control enabled.')
f3AclRuleDstIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 56), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv6Address.setDescription('The ACL rule destination ipv6 adress.')
f3AclRuleDstIpv6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleDstIpv6AddressPrefixLen.setDescription('The ACL rule destination ipv6 prefix length.')
f3AclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 58), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabelControl.setDescription('The ACL rule ipv6 Flow Label Control enables/disables Flow Label.')
f3AclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 59), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleIpV6FlowLabel.setDescription('The ACL rule ipv6 Flow Label.')
f3AclRulePriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 60), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRulePriorityControl.setDescription('The ACL rule Priority control whether enabled.')
f3AclRulePriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityLowLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRulePriorityLowLimit.setDescription('The ACL rule priority low limit.')
f3AclRulePriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 99, 1, 62), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRulePriorityHighLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3AclRulePriorityHighLimit.setDescription('The ACL rule priority high limit.')
f3EthernetTrafficPortExpDEEncTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncTable.setDescription('Ethernet Traffic Port Exp drop eligibility encoding table. This\n         is applied to a frame that is egressing at the Traffic Port.')
f3EthernetTrafficPortExpDEEncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncEntry.setDescription('A conceptual row in the f3EthernetTrafficPortExpDEEncTable.')
f3EthernetTrafficPortExpDEEncIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncIndex.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible encoding table.')
f3EthernetTrafficPortExpDEEncInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncInPriority.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncInPriority.setDescription('This object is the input priority that is translated to a\n          drop eligibility priority or a drop ineligibility priority.')
f3EthernetTrafficPortExpDEEncDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropIneligiblePrio.setDescription('This object is the Exp value that has a priority value with\n          implicit drop ineligibility encoded into it.')
f3EthernetTrafficPortExpDEEncDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 100, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEEncDropEligiblePrio.setDescription('This object is the Exp value that has a priority value with\n          implicit drop eligibility encoded into it.')
f3EthernetTrafficPortExpDEDecTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecTable.setDescription('Ethernet Traffic Port Exp drop eligibility decoding table. This\n             is applied to a frame that is ingressing at a port.')
f3EthernetTrafficPortExpDEDecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecEntry.setDescription('A conceptual row in the f3EthernetTrafficPortExpDEDecTable.')
f3EthernetTrafficPortExpDEDecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecIndex.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible decoding table.')
f3EthernetTrafficPortExpDEDecInPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecInPriority.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecInPriority.setDescription('This object is the input priority that is decoded to get\n          priority and the drop eligibility of a frame.')
f3EthernetTrafficPortExpDEDecOutPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecOutPriority.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecOutPriority.setDescription('This object is the priority value decoded from a incoming Exp value.')
f3EthernetTrafficPortExpDEDecDropEligible = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 101, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecDropEligible.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDecDropEligible.setDescription('This object is the drop eligibility decoded from a incoming\n          Exp value.')
f3EthernetTrafficPortExpDEPairTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102), )
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairTable.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairTable.setDescription('Ethernet Traffic Port Exp drop eligibility priority pair table.\n             The priority pair is encoded to same drop eligibility and\n             drop ineligibility priority. Depending on the Exp DE Enc/Dec\n             mode there can be upto 3 pairs in the table. There will one\n             pair for 7P1D, two pairs for 6P2D and three pairs for 5P3D.')
f3EthernetTrafficPortExpDEPairEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEPairIndex"))
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairEntry.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairEntry.setDescription('A conceptual row in the f3EthernetTrafficPortExpDEPairEntry.')
f3EthernetTrafficPortExpDEPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairIndex.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEPairIndex.setDescription('An integer index value used to uniquely identify\n             a row in the Exp drop eligible priority pair table.')
f3EthernetTrafficPortExpDEDropIneligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 2), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropIneligiblePrio.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropIneligiblePrio.setDescription('This object is the drop ineligible priority.')
f3EthernetTrafficPortExpDEDropEligiblePrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 102, 1, 3), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropEligiblePrio.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDEDropEligiblePrio.setDescription('This object is the drop eligible priority.')
cmEthernetNetPortPppoeParamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103), )
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             PPPoE Parameters for configuration purposes.')
cmEthernetNetPortPppoeParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortPppoeParamEntry"))
cmEthernetNetPortPppoeParamEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeParamEntry.setDescription('A conceptual row in the cmEthernetNetPortPppoeParamTable.')
cmEthernetNetPortPppoeOuterVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanControl.setDescription('This object specify outer vlan whether enabled.')
cmEthernetNetPortPppoeOuterVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanEtherType.setDescription('This object specify outer vlan ether type value.')
cmEthernetNetPortPppoeOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 3), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanId.setDescription('This object specify vlan id of outer tag.')
cmEthernetNetPortPppoeOuterVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 4), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeOuterVlanPriority.setDescription('This object specify vlan priority of outer tag.')
cmEthernetNetPortPppoeInnerVlanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanControl.setDescription('This object specify inner vlan whether enabled.')
cmEthernetNetPortPppoeInnerVlanEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanEtherType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanEtherType.setDescription('This object specify inner vlan ether type value.')
cmEthernetNetPortPppoeInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 7), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanId.setDescription('This object specify vlan id of inner tag.')
cmEthernetNetPortPppoeInnerVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 8), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeInnerVlanPriority.setDescription('This object specify vlan priority of inner tag.')
cmEthernetNetPortPppoeServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeServiceName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeServiceName.setDescription('The service name requested.')
cmEthernetNetPortPppoeLcpKeepAlivePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpKeepAlivePeriod.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpKeepAlivePeriod.setDescription('The service name requested.')
cmEthernetNetPortPppoeLcpRetryThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpRetryThreshold.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeLcpRetryThreshold.setDescription('This object specify the lcp retry threshold.')
cmEthernetNetPortPppoeRxAcName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxAcName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxAcName.setDescription('The ac name received.')
cmEthernetNetPortPppoeRxServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxServiceName.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeRxServiceName.setDescription('The service names received.')
cmEthernetNetPortPppoeSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeSessionId.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeSessionId.setDescription('pppoe session id.')
cmEthernetNetPortPppoeConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 103, 1, 15), PPPoEConnectionStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortPppoeConnStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortPppoeConnStatus.setDescription('This object provides the connection status of pppoe connection.')
cmEthernetNetPortXdslParamTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104), )
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamTable.setDescription('A list of entries corresponding to Ethernet Network Port \n             XDSL Parameters for configuration purposes.')
cmEthernetNetPortXdslParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1), )
cmEthernetNetPortEntry.registerAugmentions(("CM-FACILITY-MIB", "cmEthernetNetPortXdslParamEntry"))
cmEthernetNetPortXdslParamEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslParamEntry.setDescription('A conceptual row in the cmEthernetNetPortXdslParamTable.')
cmEthernetNetPortXdslConnControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslConnControl.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslConnControl.setDescription('This object enable/disable xdsl link.')
cmEthernetNetPortXdslModulationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 2), XDSLModulationMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslModulationMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslModulationMode.setDescription('Xdsl modulation.')
cmEthernetNetPortXdslBitSwapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslBitSwapEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslBitSwapEnabled.setDescription('Enable/disable bitswap.')
cmEthernetNetPortXdslGvectorEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslGvectorEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslGvectorEnabled.setDescription('Enable/disable G.vector.')
cmEthernetNetPortXdslVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 5), VDSLProfileFields()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslVdslProfile.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslVdslProfile.setDescription('Selected vdsl profile.')
cmEthernetNetPortXdslStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 6), XDSLStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatus.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatus.setDescription('Xdsl link status.')
cmEthernetNetPortXdslCurVdslProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 7), VDSLProfileField()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslCurVdslProfile.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslCurVdslProfile.setDescription('Selected vdsl profile.')
cmEthernetNetPortXdslActualLinkRateUpStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateUpStream.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateUpStream.setDescription('Actual link rate upstream.')
cmEthernetNetPortXdslActualLinkRateDownStream = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateDownStream.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslActualLinkRateDownStream.setDescription('Actual link rate downstream.')
cmEthernetNetPortXdslControlChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 10), XDSLControlChannel()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslControlChannel.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslControlChannel.setDescription('Actual link rate downstream.')
cmEthernetNetPortXdslCarrierSet = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 11), XDSLCarrierSet()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortXdslCarrierSet.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslCarrierSet.setDescription('Specify the carrier set.')
cmEthernetNetPortXdslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 12), XDSLMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslMode.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslMode.setDescription('Xdsl mode after handshake.')
cmEthernetNetPortXdslAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 13), XDSLAnnex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslAnnex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslAnnex.setDescription('Annex version after handshake.')
cmEthernetNetPortXdslDsSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSNRMargin.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSNRMargin.setDescription('Downstream SNR margin.')
cmEthernetNetPortXdslUsSNRMargin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsSNRMargin.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsSNRMargin.setDescription('Upstream SNR margin.')
cmEthernetNetPortXdslDsSignalAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSignalAttenuation.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsSignalAttenuation.setDescription('Downstream signal attenuation.')
cmEthernetNetPortXdslDsLineAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsLineAttenuation.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsLineAttenuation.setDescription('Downstream line attenuation.')
cmEthernetNetPortXdslDsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsTxPower.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsTxPower.setDescription('Downstream transmit power.')
cmEthernetNetPortXdslUsTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsTxPower.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsTxPower.setDescription('Upstream transmit power.')
cmEthernetNetPortXdslDsAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsAttainableRate.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslDsAttainableRate.setDescription('Attainable link rate downstream.')
cmEthernetNetPortXdslUsAttainableRate = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 104, 1, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsAttainableRate.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslUsAttainableRate.setDescription('attainable link rate upstream.')
sciPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105), )
if mibBuilder.loadTexts: sciPortTable.setStatus('current')
if mibBuilder.loadTexts: sciPortTable.setDescription('A list of entries corresponding to SCI Port \n             Facilities for configuration purposes.')
sciPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "sciPortIndex"))
if mibBuilder.loadTexts: sciPortEntry.setStatus('current')
if mibBuilder.loadTexts: sciPortEntry.setDescription('A conceptual row in the sciPortTable.')
sciPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciPortIndex.setStatus('current')
if mibBuilder.loadTexts: sciPortIndex.setDescription('An integer index value used to uniquely identify\n          this SCI Port.')
sciPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortAdminState.setStatus('current')
if mibBuilder.loadTexts: sciPortAdminState.setDescription('This object represents the Administrative State of the SCI \n             Port.')
sciPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sciPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: sciPortOperationalState.setDescription('This object represents the Operational State of the SCI \n             Port.')
sciPortSignalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 4), SciSignalMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortSignalMode.setStatus('current')
if mibBuilder.loadTexts: sciPortSignalMode.setDescription('This object allows to manage the signal mode of the SCI port.')
sciPortSignalDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 5), SciSignalDirection()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortSignalDirection.setStatus('current')
if mibBuilder.loadTexts: sciPortSignalDirection.setDescription('This object allows to manage the signal direction of the SCI port.')
sciPortRxSsmQL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 105, 1, 6), SciRxSsmQL()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sciPortRxSsmQL.setStatus('current')
if mibBuilder.loadTexts: sciPortRxSsmQL.setDescription('This object allows to manage the RX QL of the SCI port.')
f3IrigRs422OutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106), )
if mibBuilder.loadTexts: f3IrigRs422OutputPortTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortTable.setDescription('A list of entries corresponding to IRIG RS422 output ports.')
f3IrigRs422OutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"))
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntry.setDescription('A conceptual row in the f3IrigRs422OutputPortTable.')
f3IrigRs422OutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigRs422OutputPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortIndex.setDescription('An integer index value used to uniquely identify\n          this IRIG RS422 output port in its parent card.')
f3IrigRs422OutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortIfIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an interface in ifTable entries with ifIndex value.')
f3IrigRs422OutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortEntityIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
f3IrigRs422OutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the output port entity.')
f3IrigRs422OutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortAdminState.setDescription('This object represents the administrative state of the IRIG output port.')
f3IrigRs422OutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortOperationalState.setDescription('This object represents the operational state of the IRIG output port.')
f3IrigRs422OutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRs422OutputPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortSecondaryState.setDescription('This object represents the Secondary State of the IRIG output port.')
f3IrigRs422OutputPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortTimeCode.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortTimeCode.setDescription('This object allows to manage the Time Code of the IRIG output port.')
f3IrigRs422OutputPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 106, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRs422OutputPortControlField.setStatus('current')
if mibBuilder.loadTexts: f3IrigRs422OutputPortControlField.setDescription('This object allows to manage the Control field of the IRIG output port.')
f3IrigOpticalOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107), )
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTable.setDescription('A list of entries corresponding to IRIG Optical output ports.')
f3IrigOpticalOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"))
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntry.setDescription('A conceptual row in the f3IrigOpticalOutputPortTable.')
f3IrigOpticalOutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIndex.setDescription('An integer index value used to uniquely identify\n          this IRIG optical output port in it parent card.')
f3IrigOpticalOutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortIfIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an interface in ifTable entries with ifIndex value.')
f3IrigOpticalOutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortEntityIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
f3IrigOpticalOutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the output port entity.')
f3IrigOpticalOutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortAdminState.setDescription('This object represents the administrative state of the IRIG output port.')
f3IrigOpticalOutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortOperationalState.setDescription('This object represents the operational state of the IRIG output port.')
f3IrigOpticalOutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortSecondaryState.setDescription('This object represents the Secondary State of the IRIG output port.')
f3IrigOpticalOutputPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTimeCode.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortTimeCode.setDescription('This object allows to manage the Time Code of the IRIG output port.')
f3IrigOpticalOutputPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 107, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOpticalOutputPortControlField.setStatus('current')
if mibBuilder.loadTexts: f3IrigOpticalOutputPortControlField.setDescription('This object allows to manage the Control field of the IRIG output port.')
f3IrigRelayOutputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108), )
if mibBuilder.loadTexts: f3IrigRelayOutputPortTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortTable.setDescription('A list of entries corresponding to IRIG time relay output ports.')
f3IrigRelayOutputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"))
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntry.setDescription('A conceptual row in the f3IrigRelayOutputPortTable.')
f3IrigRelayOutputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigRelayOutputPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortIndex.setDescription('An integer index value used to uniquely identify\n          this IRIG time relay output port in its parent card.')
f3IrigRelayOutputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortIfIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an interface in ifTable entries with ifIndex value.')
f3IrigRelayOutputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortEntityIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
f3IrigRelayOutputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the output port entity.')
f3IrigRelayOutputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortAdminState.setDescription('This object represents the administrative state of the IRIG output port.')
f3IrigRelayOutputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortOperationalState.setDescription('This object represents the operational state of the IRIG output port.')
f3IrigRelayOutputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigRelayOutputPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortSecondaryState.setDescription('This object represents the Secondary State of the IRIG output port.')
f3IrigRelayOutputPortRelayOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 108, 1, 8), IrigRelayOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigRelayOutputPortRelayOperation.setStatus('current')
if mibBuilder.loadTexts: f3IrigRelayOutputPortRelayOperation.setDescription('This object allows to manage the relay operation of the IRIG output port.')
f3IrigOutputGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109), )
if mibBuilder.loadTexts: f3IrigOutputGroupTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupTable.setDescription('A list of entries corresponding to output groups.')
f3IrigOutputGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputGroupIndex"))
if mibBuilder.loadTexts: f3IrigOutputGroupEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupEntry.setDescription('A conceptual row in the f3IrigOutputGroupTable.')
f3IrigOutputGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOutputGroupIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupIndex.setDescription('An integer index value used to uniquely identify\n          this IRIG output group in its parent card.')
f3IrigOutputGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupIfIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an interface in ifTable entries with ifIndex value.')
f3IrigOutputGroupEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupEntityIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
f3IrigOutputGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputGroupAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the output group entity.')
f3IrigOutputGroupExtensionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 5), IrigGroupExtensionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionType.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionType.setDescription('This object allows to manage the Time Code of the IRIG output group.')
f3IrigOutputGroupExtensionDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 109, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionDetection.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputGroupExtensionDetection.setDescription('This object allows to manage the Control field of the IRIG output group.')
f3IrigOutputUnitPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110), )
if mibBuilder.loadTexts: f3IrigOutputUnitPortTable.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortTable.setDescription('A list of entries corresponding to IRIG output unit ports\n             in IRIG output groups for management purposes.')
f3IrigOutputUnitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), (0, "CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"))
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntry.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntry.setDescription('A conceptual row in the f3IrigOutputUnitPortTable.')
f3IrigOutputUnitPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3IrigOutputUnitPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortIndex.setDescription('An integer index value used to uniquely identify\n          this IRIG output unit port in its output group.')
f3IrigOutputUnitPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortIfIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an interface in ifTable entries with ifIndex value.')
f3IrigOutputUnitPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortEntityIndex.setDescription('An integer index value used to uniquely identify this output port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
f3IrigOutputUnitPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortAlias.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the output port entity.')
f3IrigOutputUnitPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortAdminState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortAdminState.setDescription('This object represents the administrative state of the IRIG output port.')
f3IrigOutputUnitPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortOperationalState.setDescription('This object represents the operational state of the IRIG output port.')
f3IrigOutputUnitPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3IrigOutputUnitPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortSecondaryState.setDescription('This object represents the Secondary State of the IRIG output port.')
f3IrigOutputUnitPortTimeCode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 8), IrigTimeCode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortTimeCode.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortTimeCode.setDescription('This object allows to manage the Time Code of the IRIG output port.')
f3IrigOutputUnitPortControlField = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 9), IrigControlField()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortControlField.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortControlField.setDescription('This object allows to manage the Control field of the IRIG output port.')
f3IrigOutputUnitPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 10), IrigOutputType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortType.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortType.setDescription('This object allows to manage the output type, digital or analogous,\n          of the IRIG output port.')
f3IrigOutputUnitPortDigitalVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 110, 1, 11), IrigDigitalSignalVoltage()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IrigOutputUnitPortDigitalVoltage.setStatus('current')
if mibBuilder.loadTexts: f3IrigOutputUnitPortDigitalVoltage.setDescription('This object allows to manage, for digital output type only, the voltage \n          of the IRIG output port.')
ccInputPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111), )
if mibBuilder.loadTexts: ccInputPortTable.setStatus('current')
if mibBuilder.loadTexts: ccInputPortTable.setDescription('A list of entries corresponding to Composite input\n             Port Facilities for configuration purposes.')
ccInputPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ccInputPortIndex"))
if mibBuilder.loadTexts: ccInputPortEntry.setStatus('current')
if mibBuilder.loadTexts: ccInputPortEntry.setDescription('A conceptual row in the ccInputPortTable.')
ccInputPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortIndex.setStatus('current')
if mibBuilder.loadTexts: ccInputPortIndex.setDescription('An integer index value used to uniquely identify\n          this CC input Port.')
ccInputPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccInputPortIfIndex.setDescription('An integer index value used to uniquely identify this input port \n          as an interface in ifTable entries with ifIndex value.')
ccInputPortEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ccInputPortEntityIndex.setDescription('An integer index value used to uniquely identify this input port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
ccInputPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccInputPortAlias.setStatus('current')
if mibBuilder.loadTexts: ccInputPortAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the input port entity.')
ccInputPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccInputPortAdminState.setStatus('current')
if mibBuilder.loadTexts: ccInputPortAdminState.setDescription('This object represents the Administrative State of the CC input Port.')
ccInputPortOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortOperationalState.setStatus('current')
if mibBuilder.loadTexts: ccInputPortOperationalState.setDescription('This object represents the Operational State of the CC input Port.')
ccInputPortSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 111, 1, 7), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccInputPortSecondaryState.setStatus('current')
if mibBuilder.loadTexts: ccInputPortSecondaryState.setDescription('This object represents the Secondary State of the CC input port.')
ccGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112), )
if mibBuilder.loadTexts: ccGroupTable.setStatus('current')
if mibBuilder.loadTexts: ccGroupTable.setDescription('A list of entries corresponding to Composite group\n             output Facilities for configuration purposes.')
ccGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ccGroupIndex"))
if mibBuilder.loadTexts: ccGroupEntry.setStatus('current')
if mibBuilder.loadTexts: ccGroupEntry.setDescription('A conceptual row in the ccGroupTable.')
ccGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupIndex.setStatus('current')
if mibBuilder.loadTexts: ccGroupIndex.setDescription('An integer index value used to uniquely identify\n          this CC Group.')
ccGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: ccGroupIfIndex.setDescription('An integer index value used to uniquely identify this group \n          as an interface in ifTable entries with ifIndex value.')
ccGroupEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 3), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccGroupEntityIndex.setStatus('current')
if mibBuilder.loadTexts: ccGroupEntityIndex.setDescription('An integer index value used to uniquely identify this input port \n          as an entity in entityPhysical entries with entPhysicalIndex value.')
ccGroupAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupAlias.setStatus('current')
if mibBuilder.loadTexts: ccGroupAlias.setDescription('This object allows SNMP management entities to provide an \n          alias to the group entity.')
ccGroupActivePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 5), CcActivePortState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupActivePorts.setStatus('current')
if mibBuilder.loadTexts: ccGroupActivePorts.setDescription('This object represents the Active State for each port of the CC \n             10 output port Group.')
ccGroupPhaseAdjust = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 249999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupPhaseAdjust.setStatus('current')
if mibBuilder.loadTexts: ccGroupPhaseAdjust.setDescription('The delay of CC output. This value is duplicated to all the CC outputs\n          of all the CC cards in the same 54x0. This value is usually derived from\n          a phase measurement of the CC input.\n          It could also use a different method to derive the CC Phase Adjust..')
ccGroupDutyCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 112, 1, 7), CcPortDutyCycle()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccGroupDutyCycle.setStatus('current')
if mibBuilder.loadTexts: ccGroupDutyCycle.setDescription('63/37 or 50/50 duty cycles.')
cmEncapFlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113), )
if mibBuilder.loadTexts: cmEncapFlowPointTable.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointTable.setDescription('A list of entries corresponding to Encap FlowPoint\n             for configuration purposes.')
cmEncapFlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-FACILITY-MIB", "cmEncapFlowPointIndex"))
if mibBuilder.loadTexts: cmEncapFlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointEntry.setDescription('A conceptual row in the cmEncapFlowPointTable. These entries represent\n             an Encap FlowPoint.')
cmEncapFlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointIndex.setDescription('The integer index value corresponding to an Encap FlowPoint.')
cmEncapFlowPointCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCircuitName.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointCircuitName.setDescription('This object allows SNMP management entities to provide a\n          circuit identifier with the FlowPoint.')
cmEncapFlowPointAssociatedFlowId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEncapFlowPointAssociatedFlowId.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointAssociatedFlowId.setDescription('This object provides the association of an Flow with an Encap FlowPoint.')
cmEncapFlowPointRefEoMplsPwObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 4), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointRefEoMplsPwObject.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointRefEoMplsPwObject.setDescription('This object specifies EoMpls Pw object OID.')
cmEncapFlowPointCTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 5), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagControl.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointCTagControl.setDescription("This object allows specification of the tag management \n        operation on the C-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push',\n        the VLAN Id (f3EncapFlowPointCTagVlanId) and priority\n        (f3EncapFlowPointCTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits)\n        are swapped with the specified f3EncapFlowPointCTagVlanId and \n        f3EncapFlowPointCTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3EncapFlowPointCTagVlanId; \n        if the type is 'none', no C-TAG management is performed.")
cmEncapFlowPointCTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 6), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3EncapFlowPointIngressCTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
cmEncapFlowPointCTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 7), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointCTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of f3EncapFlowPointIngressCTagControl.\n        It is applicable for 'push' and 'swaptag' control types.")
cmEncapFlowPointSTagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 8), FlowTagControl()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagControl.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointSTagControl.setDescription("This object allows specification of the tag management \n        operation on the S-TAG.  Supported types are 'push', 'pushvid',\n        'swaptag', 'swapvid' and 'none'. If the type is 'push', \n        the VLAN Id (f3EncapFlowPointSTagVlanId) and priority\n        (f3EncapFlowPointSTagVlanPriority) are pushed onto the frame;\n        if the type is 'pushvid', only the VLAN Id (12 bits) is pushed,\n        the Priority is copied from incoming tag's priority;\n        if the type is 'swaptag', both VLAN Id and Priority (15 bits) \n        are swapped with the specified f3EncapFlowPointSTagVlanId and \n        f3EncapFlowPointSTagVlanPriority;\n        if the type is 'swapvid', only the VLAN Id (12 bits) are \n        swapped with the specified f3EncapFlowPointSTagVlanId; \n        if the type is 'none', no S-TAG management is performed.")
cmEncapFlowPointSTagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 9), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanId.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanId.setDescription("This object allows specification of the VLAN Id to\n        be pushed or swapped, based on the value of \n        f3EncapFlowPointIngressSTagControl. It is applicable \n        for 'push', 'swaptag', 'swapvid' and 'pushvid' control types.")
cmEncapFlowPointSTagVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 10), VlanPriority()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanPriority.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointSTagVlanPriority.setDescription("This object allows specification of the VLAN Priority to\n        be pushed or swapped, based on the value of \n        f3EncapFlowPointIngressSTagControl. It is applicable\n        for 'push' and 'swaptag' control types.")
cmEncapFlowPointEgressOuterTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointEgressOuterTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointEgressOuterTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio \n        Mapping to swap the priority of outer tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled,the EgressPrioMapTable operations are ignored \n        for specified Flow COS.')
cmEncapFlowPointEgressInnerTagPrioMapEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointEgressInnerTagPrioMapEnabled.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointEgressInnerTagPrioMapEnabled.setDescription('This object defines whether to use the Egress Prio\n        Mapping to swap the priority of inner tag. When Enabled,\n        it indicates that the operation specified in the \n        EgressPrioMapTable would be applied to Flow for specified COS.\n        When Disabled, the EgressPrioMapTable operations are ignored\n        for specified Flow COS.')
cmEncapFlowPointRefPrioMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 13), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEncapFlowPointRefPrioMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointRefPrioMapProfile.setDescription('This object allows to set priority map profile.')
cmEncapFlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 14), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointStorageType.setDescription('The type of storage configured for this entry.')
cmEncapFlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 1, 113, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmEncapFlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmEncapFlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmEncapFlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmEncapFlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmFacilityCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 1))
cmFacilityGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2))
cmFacilityCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 1, 1)).setObjects(("CM-FACILITY-MIB", "cmFacilityObjectGroup"), ("CM-FACILITY-MIB", "ethernetAccessPortGroup"), ("CM-FACILITY-MIB", "ethernetNetworkPortGroup"), ("CM-FACILITY-MIB", "ethernetMgmtPortGroup"), ("CM-FACILITY-MIB", "bitsPortGroup"), ("CM-FACILITY-MIB", "trafficGroup"), ("CM-FACILITY-MIB", "prioMapGroup"), ("CM-FACILITY-MIB", "pcpEncodeGroup"), ("CM-FACILITY-MIB", "cpdV2Group"), ("CM-FACILITY-MIB", "trafficGroupCmHub"), ("CM-FACILITY-MIB", "ocnStmGroup"), ("CM-FACILITY-MIB", "stsVcPathGroup"), ("CM-FACILITY-MIB", "vtVcPathGroup"), ("CM-FACILITY-MIB", "e1t1InterfaceGroup"), ("CM-FACILITY-MIB", "e3t3InterfaceGroup"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortGroup"), ("CM-FACILITY-MIB", "f3TimeOfDayPortGroup"), ("CM-FACILITY-MIB", "f3Gps10MhzPortGroup"), ("CM-FACILITY-MIB", "neTMParamsGroup"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuExtGroup"), ("CM-FACILITY-MIB", "f3FpQosShaperGroup"), ("CM-FACILITY-MIB", "f3FpQosPolicerGroup"), ("CM-FACILITY-MIB", "cpdV2TrafficPortGroup"), ("CM-FACILITY-MIB", "f3AclRuleGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFacilityCompliance = cmFacilityCompliance.setStatus('current')
if mibBuilder.loadTexts: cmFacilityCompliance.setDescription('Describes the requirements for conformance to the CM Facility\n             group.')
cmFacilityObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 1))
for _cmFacilityObjectGroup_obj in [[("CM-FACILITY-MIB", "cmEthernetAccPortIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetAccPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortMTU"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetAccPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetAccPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamId"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdFilterType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdFilterDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdEthertype"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdSubtype"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2AVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2NPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2APopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowCpdIndex"), ("CM-FACILITY-MIB", "cmFlowCpdFilterType"), ("CM-FACILITY-MIB", "cmFlowCpdFilterDescr"), ("CM-FACILITY-MIB", "cmFlowCpdDispType"), ("CM-FACILITY-MIB", "cmFlowCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmFlowCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmFlowCpdEthertype"), ("CM-FACILITY-MIB", "cmFlowCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmFlowCpdSubtype"), ("CM-FACILITY-MIB", "cmFlowCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetNetPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortMTU"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetNetPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetNetPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamId"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapingEnabled")], [("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdFilterType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdFilterDescr"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdMacAddressMatch"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdMacAddressMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdEthertype"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdEthertypeMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdSubtype"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdSubtypeMask"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMTU"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXStatus"), ("CM-FACILITY-MIB", "cmPrioMapIndex"), ("CM-FACILITY-MIB", "cmPrioMapInPriority"), ("CM-FACILITY-MIB", "cmPrioMapXTagControl"), ("CM-FACILITY-MIB", "cmPrioMapXTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapCOS"), ("CM-FACILITY-MIB", "cmPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapInnerTagPriority"), ("CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerDirection"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAdminState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerOperationalState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerSecondaryState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAlgorithm"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMode"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMarkingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCouplingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAssociatedShaper"), ("CM-FACILITY-MIB", "cmQosFlowPolicerStorageType"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRowStatus"), ("CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmAccPortQosShaperDirection"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Index"), ("CM-FACILITY-MIB", "cmFlowCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "bitsPortTypeIndex"), ("CM-FACILITY-MIB", "bitsPortIndex"), ("CM-FACILITY-MIB", "bitsPortIfIndex"), ("CM-FACILITY-MIB", "bitsPortEntityIndex"), ("CM-FACILITY-MIB", "bitsPortAdminState"), ("CM-FACILITY-MIB", "bitsPortOperationalState"), ("CM-FACILITY-MIB", "bitsPortSecondaryState"), ("CM-FACILITY-MIB", "bitsPortType"), ("CM-FACILITY-MIB", "bitsPortLineType"), ("CM-FACILITY-MIB", "bitsPortLineCode"), ("CM-FACILITY-MIB", "bitsPortFrameFormat"), ("CM-FACILITY-MIB", "bitsPortSaBitDesignation"), ("CM-FACILITY-MIB", "bitsPortQLModeEnabled"), ("CM-FACILITY-MIB", "bitsPortExpectedQL"), ("CM-FACILITY-MIB", "bitsPortAssumedQL"), ("CM-FACILITY-MIB", "bitsPortReceivedQL"), ("CM-FACILITY-MIB", "bitsPortTransmitQL"), ("CM-FACILITY-MIB", "bitsPortSquelchQL"), ("CM-FACILITY-MIB", "bitsPortLineBuildOut"), ("CM-FACILITY-MIB", "bitsPortImpedance"), ("CM-FACILITY-MIB", "bitsPortCrc4"), ("CM-FACILITY-MIB", "bitsPortIdleCode"), ("CM-FACILITY-MIB", "bitsPortAis"), ("CM-FACILITY-MIB", "bitsPortSaBitsAdminState"), ("CM-FACILITY-MIB", "bitsPortSquelchControl"), ("CM-FACILITY-MIB", "bitsPortSignalShape"), ("CM-FACILITY-MIB", "bitsPortSignalFrequency"), ("CM-FACILITY-MIB", "ieee1588EthernetPortIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortIfIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortEntityIndex"), ("CM-FACILITY-MIB", "ieee1588EthernetPortAdminState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortOperationalState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortSecondaryState"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMTU"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMediaType"), ("CM-FACILITY-MIB", "ieee1588EthernetPortConfigSpeed"), ("CM-FACILITY-MIB", "ieee1588EthernetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "ieee1588EthernetPortMDIXType"), ("CM-FACILITY-MIB", "gps10MHzPortIndex"), ("CM-FACILITY-MIB", "gps10MHzPortIfIndex"), ("CM-FACILITY-MIB", "gps10MHzPortEntityIndex"), ("CM-FACILITY-MIB", "gps10MHzPortAdminState"), ("CM-FACILITY-MIB", "gps10MHzPortOperationalState"), ("CM-FACILITY-MIB", "gps10MHzPortSecondaryState"), ("CM-FACILITY-MIB", "gps10MHzPortSignalDirection"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchControl"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchQL"), ("CM-FACILITY-MIB", "gps10MHzPortFrequencySource"), ("CM-FACILITY-MIB", "gps10MHzPortClockClass"), ("CM-FACILITY-MIB", "gps10MHzPortClockAccuracy"), ("CM-FACILITY-MIB", "gps10MHzPortTimeSource"), ("CM-FACILITY-MIB", "gps10MHzPortAssumedQL"), ("CM-FACILITY-MIB", "gps10MHzPortAlias"), ("CM-FACILITY-MIB", "gps10MHzPortInputSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbDescr"), ("CM-FACILITY-MIB", "cmNetPortPrioMapIndex"), ("CM-FACILITY-MIB", "cmNetPortPrioMapInPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapCOS"), ("CM-FACILITY-MIB", "cmNetPortPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmPortCpdProfileIndex"), ("CM-FACILITY-MIB", "cmPortCpdProfileName"), ("CM-FACILITY-MIB", "cmPortCpdProfileCiscoGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileIslDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePagpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileUdldDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileCdpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileVtpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileDtpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePvstpPlusDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileUplinkFastDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileVlanBridgeDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileL2PTDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileBridgeGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileBPDUDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePauseDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLACPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLACPMarkerDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileEfmOamDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileSSMDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfilePortAuthenDispType")], [("CM-FACILITY-MIB", "cmPortCpdProfileBridgeReservedDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLANBridgesDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGARPGroupDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGMRPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGVRPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileGARPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileLldpDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileStorageType"), ("CM-FACILITY-MIB", "cmPortCpdProfileRowStatus"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac00DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac01DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac02DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac03DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac04DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac05DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac06DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac07DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac08DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac09DispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0ADispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0BDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0CDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0DDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0EDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileMac0FDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileNearestLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileNonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileCustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmPortCpdProfileELMIDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileIndex"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileName"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileIslDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePagpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileUdldDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCdpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileVtpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileDtpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileUplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileVlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileL2PTDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBPDUDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePauseDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLACPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileEfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileSSMDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfilePortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileBridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGMRPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGVRPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileGARPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileLldpDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileStorageType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac00DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac01DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac02DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac03DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac04DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac05DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac06DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac07DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac08DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac09DispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0ADispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0BDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0CDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0DDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0EDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileMac0FDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileNearestLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileNonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileCustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowPointCpdProfileELMIDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssociatedCpdProfile"), ("CM-FACILITY-MIB", "cmEthernetFlowPointCpdIndex"), ("CM-FACILITY-MIB", "cmEthernetFlowPointAssociatedCpdProfile"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMTU"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPriorityVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTagFrameControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPhyType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugGMetroAutoTuningMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugChannelType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugOutOfBandChannelStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpConnectorValue"), ("CM-FACILITY-MIB", "cmIngressPrioMapIndex"), ("CM-FACILITY-MIB", "cmIngressPrioMapInPriority"), ("CM-FACILITY-MIB", "cmIngressPrioMapCOS"), ("CM-FACILITY-MIB", "cmEgressCOSIndex"), ("CM-FACILITY-MIB", "cmEgressOuterTagCtrl"), ("CM-FACILITY-MIB", "cmEgressCOS"), ("CM-FACILITY-MIB", "cmEgressOuterTagPriority"), ("CM-FACILITY-MIB", "cmElineFlowIndex"), ("CM-FACILITY-MIB", "cmElineFlowCircuitName"), ("CM-FACILITY-MIB", "cmElineFlowAdminState"), ("CM-FACILITY-MIB", "cmElineFlowOperationalState"), ("CM-FACILITY-MIB", "cmElineFlowSecondaryState"), ("CM-FACILITY-MIB", "cmElineFlowFP1"), ("CM-FACILITY-MIB", "cmElineFlowFP2"), ("CM-FACILITY-MIB", "cmElineFlowStorageType"), ("CM-FACILITY-MIB", "cmElineFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointIndex"), ("CM-FACILITY-MIB", "cmFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmFlowPointAdminState"), ("CM-FACILITY-MIB", "cmFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmFlowPointIngressMultiCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedAclProfile"), ("CM-FACILITY-MIB", "cmFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberActionVlan"), ("CM-FACILITY-MIB", "cmFlowPointIngressUntaggedFrameEnabled"), ("CM-FACILITY-MIB", "cmFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointColorMarkingSupported"), ("CM-FACILITY-MIB", "cmFlowPointStorageType"), ("CM-FACILITY-MIB", "cmFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmQosPolicerV2Index"), ("CM-FACILITY-MIB", "cmQosPolicerV2AdminState"), ("CM-FACILITY-MIB", "cmQosPolicerV2OperationalState"), ("CM-FACILITY-MIB", "cmQosPolicerV2SecondaryState"), ("CM-FACILITY-MIB", "cmQosPolicerV2ColorMarkingEnabled"), ("CM-FACILITY-MIB", "cmQosPolicerV2AssociatedProfile"), ("CM-FACILITY-MIB", "cmQosPolicerV2StorageType"), ("CM-FACILITY-MIB", "cmQosPolicerV2RowStatus"), ("CM-FACILITY-MIB", "cmQosShaperV2Index"), ("CM-FACILITY-MIB", "cmQosShaperV2AdminState"), ("CM-FACILITY-MIB", "cmQosShaperV2OperationalState"), ("CM-FACILITY-MIB", "cmQosShaperV2SecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperV2AssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmQosShaperV2CIRLo"), ("CM-FACILITY-MIB", "cmQosShaperV2CIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2EIRLo"), ("CM-FACILITY-MIB", "cmQosShaperV2EIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2IngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmQosShaperV2StorageType"), ("CM-FACILITY-MIB", "cmQosShaperV2RowStatus"), ("CM-FACILITY-MIB", "cmQosShaperV2AdditionalCIRLo")], [("CM-FACILITY-MIB", "cmQosShaperV2AdditionalCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperV2ActualCIR"), ("CM-FACILITY-MIB", "cmQosShaperV2ActualEIR"), ("CM-FACILITY-MIB", "cmQosShaperV2WFQWeight"), ("CM-FACILITY-MIB", "cmQosShaperV2LowLatencyControl"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperStorageType"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperWfqWeight"), ("CM-FACILITY-MIB", "cmQosPolicerProfileIndex"), ("CM-FACILITY-MIB", "cmQosPolicerProfileName"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCIRLo"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCIRHi"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEIRLo"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEIRHi"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCBS"), ("CM-FACILITY-MIB", "cmQosPolicerProfileEBS"), ("CM-FACILITY-MIB", "cmQosPolicerProfileColorMode"), ("CM-FACILITY-MIB", "cmQosPolicerProfileCouplingFlag"), ("CM-FACILITY-MIB", "cmQosPolicerProfileStorageType"), ("CM-FACILITY-MIB", "cmQosPolicerProfileRowStatus"), ("CM-FACILITY-MIB", "cmQosQueueProfileIndex"), ("CM-FACILITY-MIB", "cmQosQueueProfileName"), ("CM-FACILITY-MIB", "cmQosQueueProfileBufferSize"), ("CM-FACILITY-MIB", "cmQosQueueProfileREDEnabled"), ("CM-FACILITY-MIB", "cmQosQueueProfileStorageType"), ("CM-FACILITY-MIB", "cmQosQueueProfileRowStatus"), ("CM-FACILITY-MIB", "cmOAMFlowPointIndex"), ("CM-FACILITY-MIB", "cmOAMFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmOAMFlowPointAdminState"), ("CM-FACILITY-MIB", "cmOAMFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmOAMFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmOAMFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmOAMFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmOAMFlowPointIngressUntaggedFrameSupported"), ("CM-FACILITY-MIB", "cmOAMFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmOAMFlowPointStorageType"), ("CM-FACILITY-MIB", "cmOAMFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmTrafficAclRulesIndex"), ("CM-FACILITY-MIB", "cmTrafficAclFilterAction"), ("CM-FACILITY-MIB", "cmTrafficAclFilterType"), ("CM-FACILITY-MIB", "cmTrafficAclEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcMacAddr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcMacAddrEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclDstMacAddr"), ("CM-FACILITY-MIB", "cmTrafficAclDstMacAddrEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpFilterEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpFilterEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV4Addr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV4AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV4Addr"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV4AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV6Addr"), ("CM-FACILITY-MIB", "cmTrafficAclSrcIpV6AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV6Addr"), ("CM-FACILITY-MIB", "cmTrafficAclDstIpV6AddrMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortNum"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpSrcPortEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortNum"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortMask"), ("CM-FACILITY-MIB", "cmTrafficAclTcpUdpDstPortEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosType"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosValue"), ("CM-FACILITY-MIB", "cmTrafficAclIpQosTypeEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclVlanId"), ("CM-FACILITY-MIB", "cmTrafficAclVlanIdEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclVlanPriority"), ("CM-FACILITY-MIB", "cmTrafficAclVlanPriorityEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclProtocolType"), ("CM-FACILITY-MIB", "cmTrafficAclProtocolTypeEnabled"), ("CM-FACILITY-MIB", "cmTrafficAclStorageType"), ("CM-FACILITY-MIB", "cmTrafficAclRowStatus"), ("CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), ("CM-FACILITY-MIB", "f3NetPortQosShaperDirection"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAdminState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCOS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIfIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortEntityIndex"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortAdminState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortOperationalState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSecondaryState"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortVendorName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortModel"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortFSN"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIMEI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortHardwareVersion"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortFirmwareVersion"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSIMStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPINLeftChances"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPUKLeftChances"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortConnectionStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRSSI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortSpeed"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortMTU"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortProviderName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDNS1"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDNS2"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortAPN"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortUserName"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPassword"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortDailNumber"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRedialTimer"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortCurrentPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortNewPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortConfirmPinCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortCurrentPukCode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPINCodeAction"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortStorageType"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortRowStatus"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIMSI"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortPINStatus"), ("CM-FACILITY-MIB", "f3UsbDCNPortMobileNetworkType"), ("CM-FACILITY-MIB", "f3Usb3GDCNMuxOperationalMode"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortIpAddress"), ("CM-FACILITY-MIB", "f3Usb3GDCNPortNetMask"), ("CM-FACILITY-MIB", "ocnStmIndex"), ("CM-FACILITY-MIB", "ocnStmIfIndex"), ("CM-FACILITY-MIB", "ocnStmEntityIndex"), ("CM-FACILITY-MIB", "ocnStmAdminState"), ("CM-FACILITY-MIB", "ocnStmOperationalState"), ("CM-FACILITY-MIB", "ocnStmSecondaryState"), ("CM-FACILITY-MIB", "ocnStmSfpVendorName"), ("CM-FACILITY-MIB", "ocnStmSfpPartNumber"), ("CM-FACILITY-MIB", "ocnStmSfpSerialNumber"), ("CM-FACILITY-MIB", "ocnStmSfpDateOfManufacture"), ("CM-FACILITY-MIB", "ocnStmSfpConnectorValue"), ("CM-FACILITY-MIB", "ocnStmSfpLinkLength"), ("CM-FACILITY-MIB", "ocnStmSfpLaserWaveLength"), ("CM-FACILITY-MIB", "ocnStmSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "ocnStmSfpMediaType"), ("CM-FACILITY-MIB", "ocnStmMultiplexingStructures"), ("CM-FACILITY-MIB", "ocnStmEoTDMMode"), ("CM-FACILITY-MIB", "ocnStmLoopbackConfig"), ("CM-FACILITY-MIB", "ocnStmLoopbackStatus"), ("CM-FACILITY-MIB", "ocnStmLoopbackTime"), ("CM-FACILITY-MIB", "ocnStmInsertingAIS"), ("CM-FACILITY-MIB", "ocnStmBerExcThreshold"), ("CM-FACILITY-MIB", "ocnStmBerDegThreshold"), ("CM-FACILITY-MIB", "ocnStmRxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmExpectedTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTrailTraceFormat"), ("CM-FACILITY-MIB", "ocnStmQLModeEnabled"), ("CM-FACILITY-MIB", "ocnStmExpectedQL"), ("CM-FACILITY-MIB", "ocnStmAssumedQL"), ("CM-FACILITY-MIB", "ocnStmReceivedQL"), ("CM-FACILITY-MIB", "ocnStmTransmitQL"), ("CM-FACILITY-MIB", "ocnStmSfpName"), ("CM-FACILITY-MIB", "ocnStmSfpHardwareRevision"), ("CM-FACILITY-MIB", "stsVcPathParentIfIndex"), ("CM-FACILITY-MIB", "stsVcPathIndex"), ("CM-FACILITY-MIB", "stsVcPathIfIndex"), ("CM-FACILITY-MIB", "stsVcPathAdminState"), ("CM-FACILITY-MIB", "stsVcPathOperationalState"), ("CM-FACILITY-MIB", "stsVcPathSecondaryState"), ("CM-FACILITY-MIB", "stsVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "stsVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "stsVcPathLoopbackTime"), ("CM-FACILITY-MIB", "stsVcPathInsertingAIS"), ("CM-FACILITY-MIB", "stsVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "stsVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "stsVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "stsVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathRowStatus"), ("CM-FACILITY-MIB", "vtVcPathRowStatus"), ("CM-FACILITY-MIB", "vtVcPathParentIfIndex"), ("CM-FACILITY-MIB", "vtVcPathIndex"), ("CM-FACILITY-MIB", "vtVcPathIfIndex"), ("CM-FACILITY-MIB", "vtVcPathAdminState"), ("CM-FACILITY-MIB", "vtVcPathOperationalState"), ("CM-FACILITY-MIB", "vtVcPathSecondaryState"), ("CM-FACILITY-MIB", "vtVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "vtVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "vtVcPathLoopbackTime"), ("CM-FACILITY-MIB", "vtVcPathInsertingAIS"), ("CM-FACILITY-MIB", "vtVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "vtVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "vtVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "vtVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "e1t1ParentIfIndex"), ("CM-FACILITY-MIB", "e1t1Index"), ("CM-FACILITY-MIB", "e1t1IfIndex"), ("CM-FACILITY-MIB", "e1t1AdminState"), ("CM-FACILITY-MIB", "e1t1OperationalState"), ("CM-FACILITY-MIB", "e1t1SecondaryState"), ("CM-FACILITY-MIB", "e1t1LoopbackConfig"), ("CM-FACILITY-MIB", "e1t1LoopbackStatus"), ("CM-FACILITY-MIB", "e1t1LoopbackTime"), ("CM-FACILITY-MIB", "e1t1RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e1t1InsertingAIS"), ("CM-FACILITY-MIB", "e1t1RowStatus"), ("CM-FACILITY-MIB", "e3t3ParentIfIndex"), ("CM-FACILITY-MIB", "e3t3Index"), ("CM-FACILITY-MIB", "e3t3IfIndex"), ("CM-FACILITY-MIB", "e3t3EntityIndex"), ("CM-FACILITY-MIB", "e3t3AdminState"), ("CM-FACILITY-MIB", "e3t3OperationalState"), ("CM-FACILITY-MIB", "e3t3SecondaryState"), ("CM-FACILITY-MIB", "e3t3LoopbackConfig"), ("CM-FACILITY-MIB", "e3t3LoopbackStatus"), ("CM-FACILITY-MIB", "e3t3LoopbackTime"), ("CM-FACILITY-MIB", "e3t3RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e3t3InsertingAIS"), ("CM-FACILITY-MIB", "e3t3CBitEnable"), ("CM-FACILITY-MIB", "e3t3T3Channelized"), ("CM-FACILITY-MIB", "e3t3RowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTDMEncapsulation"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRelatedVCG"), ("CM-FACILITY-MIB", "bits8PortGroupIndex"), ("CM-FACILITY-MIB", "bits8PortGroupIfIndex"), ("CM-FACILITY-MIB", "bits8PortGroupAdminState"), ("CM-FACILITY-MIB", "bits8PortGroupOperationalState"), ("CM-FACILITY-MIB", "bits8PortGroupSecondaryState"), ("CM-FACILITY-MIB", "bits8PortGroupLineType"), ("CM-FACILITY-MIB", "bits8PortGroupLineCode"), ("CM-FACILITY-MIB", "bits8PortGroupFrameFormat"), ("CM-FACILITY-MIB", "bits8PortGroupSaBitDesignation"), ("CM-FACILITY-MIB", "bits8PortGroupQLModeEnabled")], [("CM-FACILITY-MIB", "bits8PortGroupTransmitQL"), ("CM-FACILITY-MIB", "bits8PortGroupSquelchQL"), ("CM-FACILITY-MIB", "bits8PortGroupLineBuildOut"), ("CM-FACILITY-MIB", "bits8PortGroupImpedance"), ("CM-FACILITY-MIB", "bits8PortGroupRowStatus"), ("CM-FACILITY-MIB", "bits8PortGroupActivePorts"), ("CM-FACILITY-MIB", "bits8PortGroupClkIfEnabledPorts"), ("CM-FACILITY-MIB", "pps16PortGroupIndex"), ("CM-FACILITY-MIB", "pps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "pps16PortGroupAdminState"), ("CM-FACILITY-MIB", "pps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "pps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "pps16PortGroupAlias"), ("CM-FACILITY-MIB", "pps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "pps16PortGroupTODSource"), ("CM-FACILITY-MIB", "pps16PortGroupDirection"), ("CM-FACILITY-MIB", "pps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "pps16PortGroupRowStatus"), ("CM-FACILITY-MIB", "clk16PortGroupIndex"), ("CM-FACILITY-MIB", "clk16PortGroupIfIndex"), ("CM-FACILITY-MIB", "clk16PortGroupAdminState"), ("CM-FACILITY-MIB", "clk16PortGroupOperationalState"), ("CM-FACILITY-MIB", "clk16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "clk16PortGroupAlias"), ("CM-FACILITY-MIB", "clk16PortGroupDirection"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "clk16PortGroupRowStatus"), ("CM-FACILITY-MIB", "todPps16PortGroupIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupAdminState"), ("CM-FACILITY-MIB", "todPps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "todPps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "todPps16PortGroupAlias"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "todPps16PortGroupTODSource"), ("CM-FACILITY-MIB", "todPps16PortGroupOutputFormat"), ("CM-FACILITY-MIB", "todPps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "todPps16PortGroupRowStatus"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortRelayOperation"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupAlias"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionType"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionDetection"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAlias"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortControlField"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortType"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortDigitalVoltage"), ("CM-FACILITY-MIB", "ccInputPortIndex"), ("CM-FACILITY-MIB", "ccInputPortIfIndex"), ("CM-FACILITY-MIB", "ccInputPortEntityIndex"), ("CM-FACILITY-MIB", "ccInputPortAlias"), ("CM-FACILITY-MIB", "ccInputPortAdminState"), ("CM-FACILITY-MIB", "ccInputPortOperationalState"), ("CM-FACILITY-MIB", "ccInputPortSecondaryState"), ("CM-FACILITY-MIB", "ccGroupIndex"), ("CM-FACILITY-MIB", "ccGroupIfIndex"), ("CM-FACILITY-MIB", "ccGroupEntityIndex"), ("CM-FACILITY-MIB", "ccGroupAlias"), ("CM-FACILITY-MIB", "ccGroupActivePorts"), ("CM-FACILITY-MIB", "ccGroupPhaseAdjust"), ("CM-FACILITY-MIB", "ccGroupDutyCycle")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmFacilityObjectGroup = cmFacilityObjectGroup.setObjects(*_cmFacilityObjectGroup_obj)
    else:
        cmFacilityObjectGroup = cmFacilityObjectGroup.setObjects(*_cmFacilityObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFacilityObjectGroup = cmFacilityObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmFacilityObjectGroup.setDescription('*********************THIS GROUP IS NOW DEPRECATED *********************\n             A collection of objects used to manage the CM Facility\n             group.')
ethernetAccessPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 2)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetAccPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortMTU"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetAccPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetAccPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetAccPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamId"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetAccPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2AVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2NPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2APopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetAccPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetAccPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetAccPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetAccPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetAccPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetAccPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortXgePhyType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetAccPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetAccPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetAccPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetAccPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetAccPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortA2nSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortN2aSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortSwapPriorityVID"), ("CM-FACILITY-MIB", "cmEthernetAccPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetAccPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetAccPortDefaultCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortTrafficModel"), ("CM-FACILITY-MIB", "cmEthernetAccPortIndependentShaperBW"), ("CM-FACILITY-MIB", "cmEthernetAccPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetAccPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetAccPortSilentStartControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetAccPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetAccPortPersistentLoopbackControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetAccPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetAccPortPowerdDeviceDetection"), ("CM-FACILITY-MIB", "cmEthernetAccPortPoEStatus"), ("CM-FACILITY-MIB", "cmEthernetAccPortSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetAccessPortGroup = ethernetAccessPortGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetAccessPortGroup.setDescription('A collection of objects used to manage the F3 Ethernet Access Port \n             function.')
ethernetNetworkPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 3)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetNetPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortMTU"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetNetPortJumboFramesEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetNetPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetNetPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamId"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxPauseDisposition"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetNetPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpReach"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetNetPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetNetPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetNetPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortClbDescr"), ("CM-FACILITY-MIB", "cmEthernetNetPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortXgePhyType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetNetPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetNetPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetNetPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetNetPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetNetPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortDefaultCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortTrafficModel"), ("CM-FACILITY-MIB", "cmEthernetNetPortIndependentShaperBW"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortExpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortIpPrecDEEncType"), ("CM-FACILITY-MIB", "cmEthernetNetPortIpPrecDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortEncapPcpDEEncodingType"), ("CM-FACILITY-MIB", "cmEthernetNetPortEncapPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetNetPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetNetPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetNetPortSilentStartControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetNetPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetNetPortPersistentLoopbackControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetNetPortSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortGroup = ethernetNetworkPortGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetNetworkPortGroup.setDescription(' A collection of objects used to manage the F3 Ethernet Network Port \n              function.')
ethernetMgmtPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 4)).setObjects(("CM-FACILITY-MIB", "cmEthernetMgmtPortIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMTU"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetMgmtPortMediaType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetMgmtPortGroup = ethernetMgmtPortGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetMgmtPortGroup.setDescription('A collection of objects used to manage the F3 Ethernet Management Port\n             function.')
bitsPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 5)).setObjects(("CM-FACILITY-MIB", "bitsPortTypeIndex"), ("CM-FACILITY-MIB", "bitsPortIndex"), ("CM-FACILITY-MIB", "bitsPortIfIndex"), ("CM-FACILITY-MIB", "bitsPortEntityIndex"), ("CM-FACILITY-MIB", "bitsPortAdminState"), ("CM-FACILITY-MIB", "bitsPortOperationalState"), ("CM-FACILITY-MIB", "bitsPortSecondaryState"), ("CM-FACILITY-MIB", "bitsPortType"), ("CM-FACILITY-MIB", "bitsPortLineType"), ("CM-FACILITY-MIB", "bitsPortLineCode"), ("CM-FACILITY-MIB", "bitsPortFrameFormat"), ("CM-FACILITY-MIB", "bitsPortSaBitDesignation"), ("CM-FACILITY-MIB", "bitsPortQLModeEnabled"), ("CM-FACILITY-MIB", "bitsPortExpectedQL"), ("CM-FACILITY-MIB", "bitsPortAssumedQL"), ("CM-FACILITY-MIB", "bitsPortReceivedQL"), ("CM-FACILITY-MIB", "bitsPortTransmitQL"), ("CM-FACILITY-MIB", "bitsPortSquelchQL"), ("CM-FACILITY-MIB", "bitsPortLineBuildOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bitsPortGroup = bitsPortGroup.setStatus('current')
if mibBuilder.loadTexts: bitsPortGroup.setDescription('A collection of objects used to manage the F3 Bits Port \n             function.')
trafficGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 6)).setObjects(("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowSTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowAutoBandwidthConfigEnabled"), ("CM-FACILITY-MIB", "cmFlowPort1"), ("CM-FACILITY-MIB", "cmFlowPort2"), ("CM-FACILITY-MIB", "cmFlowPolicingControl"), ("CM-FACILITY-MIB", "cmFlowAutoCIRPercentage"), ("CM-FACILITY-MIB", "cmFlowLoopAvoidanceObject"), ("CM-FACILITY-MIB", "cmFlowConfigType"), ("CM-FACILITY-MIB", "cmFlowN2NForwardingEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NMulticastRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NBroadcastRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitControl"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitLo"), ("CM-FACILITY-MIB", "cmFlowA2NCombinedRateLimitHi"), ("CM-FACILITY-MIB", "cmFlowRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmFlowRefN2APrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowSecureBlockingEnabled"), ("CM-FACILITY-MIB", "cmFlowRefConnectGuardFlowList"), ("CM-FACILITY-MIB", "cmFlowSecureStateList"), ("CM-FACILITY-MIB", "cmFlowIndependentA2NShaperBW"), ("CM-FACILITY-MIB", "cmFlowWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmFlowWfqGroupCOS"), ("CM-FACILITY-MIB", "cmFlowWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmFlowWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "cmQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "cmQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "cmQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "cmQosShaperWfqWeight"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), ("CM-FACILITY-MIB", "cmQosFlowPolicerDirection"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAdminState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerOperationalState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerSecondaryState"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEBS"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAlgorithm"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMode"), ("CM-FACILITY-MIB", "cmQosFlowPolicerColorMarkingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCouplingFlag"), ("CM-FACILITY-MIB", "cmQosFlowPolicerAssociatedShaper"), ("CM-FACILITY-MIB", "cmQosFlowPolicerStorageType"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRowStatus"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRMaxHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerCIRMaxLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRMaxHi"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEIRMaxLo"), ("CM-FACILITY-MIB", "cmQosFlowPolicerEnvelopeObject"), ("CM-FACILITY-MIB", "cmQosFlowPolicerRank"), ("CM-FACILITY-MIB", "cmQosFlowPolicerPolicingEnabled"), ("CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmAccPortQosShaperDirection"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperEBS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmAccPortQosShaperCOS"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "cmAccPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "cmAccPortQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "cmAccPortQosShaperWfqWeight"), ("CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), ("CM-FACILITY-MIB", "f3NetPortQosShaperDirection"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAdminState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperEBS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3NetPortQosShaperCOS"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamCIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRLo"), ("CM-FACILITY-MIB", "f3NetPortQosShaperSoamEIRHi"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenMinQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenMaxQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredGreenDropProbability"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowMinQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowMaxQueueThreshold"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWredYellowDropProbability"), ("CM-FACILITY-MIB", "f3NetPortQosShaperAvgFrameSizeBeforeFragment"), ("CM-FACILITY-MIB", "f3NetPortQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficGroup = trafficGroup.setStatus('current')
if mibBuilder.loadTexts: trafficGroup.setDescription('A collection of objects used to manage the F3 traffic path, consists of\n             Flows, Policers and Shapers.')
prioMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 7)).setObjects(("CM-FACILITY-MIB", "cmPrioMapIndex"), ("CM-FACILITY-MIB", "cmPrioMapInPriority"), ("CM-FACILITY-MIB", "cmPrioMapXTagControl"), ("CM-FACILITY-MIB", "cmPrioMapXTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapCOS"), ("CM-FACILITY-MIB", "cmPrioMapOuterTagPriority"), ("CM-FACILITY-MIB", "cmPrioMapInnerTagPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapIndex"), ("CM-FACILITY-MIB", "cmNetPortPrioMapInPriority"), ("CM-FACILITY-MIB", "cmNetPortPrioMapCOS"), ("CM-FACILITY-MIB", "cmNetPortPrioMapOuterTagPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    prioMapGroup = prioMapGroup.setStatus('current')
if mibBuilder.loadTexts: prioMapGroup.setDescription('A collection of objects used to manage the F3 Priority Mapping function.')
pcpEncodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 8)).setObjects(("CM-FACILITY-MIB", "cmAccPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmAccPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmAccPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortPcpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcpEncodeGroup = pcpEncodeGroup.setStatus('current')
if mibBuilder.loadTexts: pcpEncodeGroup.setDescription('A collection of objects used to manage the F3 Priority Mapping function.')
cpdV2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 9)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetAccPortCpdV2PtpTaggedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Index"), ("CM-FACILITY-MIB", "cmFlowCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmFlowCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetNetPortCpdV2PtpTaggedDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpdV2Group = cpdV2Group.setStatus('current')
if mibBuilder.loadTexts: cpdV2Group.setDescription('A collection of objects used to manage the \n             Control Protocol Disposition version 2 function.')
trafficGroupCmHub = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 10)).setObjects(("CM-FACILITY-MIB", "cmFlowIndex"), ("CM-FACILITY-MIB", "cmFlowCircuitName"), ("CM-FACILITY-MIB", "cmFlowAdminState"), ("CM-FACILITY-MIB", "cmFlowOperationalState"), ("CM-FACILITY-MIB", "cmFlowSecondaryState"), ("CM-FACILITY-MIB", "cmFlowType"), ("CM-FACILITY-MIB", "cmFlowMultiCOS"), ("CM-FACILITY-MIB", "cmFlowA2NCIR"), ("CM-FACILITY-MIB", "cmFlowA2NEIR"), ("CM-FACILITY-MIB", "cmFlowN2ARateLimitingEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACIR"), ("CM-FACILITY-MIB", "cmFlowN2AEIR"), ("CM-FACILITY-MIB", "cmFlowStorageType"), ("CM-FACILITY-MIB", "cmFlowRowStatus"), ("CM-FACILITY-MIB", "cmFlowTrafficType"), ("CM-FACILITY-MIB", "cmFlowCOS"), ("CM-FACILITY-MIB", "cmFlowVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowAction"), ("CM-FACILITY-MIB", "cmFlowActionVlan"), ("CM-FACILITY-MIB", "cmFlowUntaggedMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NCIRHi"), ("CM-FACILITY-MIB", "cmFlowA2NEIRHi"), ("CM-FACILITY-MIB", "cmFlowN2ACIRHi"), ("CM-FACILITY-MIB", "cmFlowN2AEIRHi"), ("CM-FACILITY-MIB", "cmFlowHCOSMgmtEnabled"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowGuaranteedA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthLo"), ("CM-FACILITY-MIB", "cmFlowMaximumA2NBandwidthHi"), ("CM-FACILITY-MIB", "cmFlowCTagControl"), ("CM-FACILITY-MIB", "cmFlowCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowCTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmFlowSTagControl"), ("CM-FACILITY-MIB", "cmFlowSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowN2ACOSPriorityTagType"), ("CM-FACILITY-MIB", "cmFlowESFramesLossThreshold"), ("CM-FACILITY-MIB", "cmFlowSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPolicingEnabled"), ("CM-FACILITY-MIB", "cmFlowPreserveSTagProperties"), ("CM-FACILITY-MIB", "cmFlowInnerTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowA2NShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AShapingType"), ("CM-FACILITY-MIB", "cmFlowN2AOuterTagPrioEnabled"), ("CM-FACILITY-MIB", "cmFlowSTagMatchRxPrio"), ("CM-FACILITY-MIB", "cmQosShaperTypeIndex"), ("CM-FACILITY-MIB", "cmQosShaperIndex"), ("CM-FACILITY-MIB", "cmQosShaperDirection"), ("CM-FACILITY-MIB", "cmQosShaperAdminState"), ("CM-FACILITY-MIB", "cmQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmQosShaperCIR"), ("CM-FACILITY-MIB", "cmQosShaperCBS"), ("CM-FACILITY-MIB", "cmQosShaperEIR"), ("CM-FACILITY-MIB", "cmQosShaperEBS"), ("CM-FACILITY-MIB", "cmQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmQosShaperStorageType"), ("CM-FACILITY-MIB", "cmQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmQosShaperCOS"), ("CM-FACILITY-MIB", "cmQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmQosShaperEIRHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficGroupCmHub = trafficGroupCmHub.setStatus('current')
if mibBuilder.loadTexts: trafficGroupCmHub.setDescription('A collection of objects used to manage the F3 traffic path, consists of\n             Flows, Policers and Shapers.')
ocnStmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 11)).setObjects(("CM-FACILITY-MIB", "ocnStmIndex"), ("CM-FACILITY-MIB", "ocnStmIfIndex"), ("CM-FACILITY-MIB", "ocnStmEntityIndex"), ("CM-FACILITY-MIB", "ocnStmAdminState"), ("CM-FACILITY-MIB", "ocnStmOperationalState"), ("CM-FACILITY-MIB", "ocnStmSecondaryState"), ("CM-FACILITY-MIB", "ocnStmSfpVendorName"), ("CM-FACILITY-MIB", "ocnStmSfpPartNumber"), ("CM-FACILITY-MIB", "ocnStmSfpSerialNumber"), ("CM-FACILITY-MIB", "ocnStmSfpDateOfManufacture"), ("CM-FACILITY-MIB", "ocnStmMultiplexingStructures"), ("CM-FACILITY-MIB", "ocnStmEoTDMMode"), ("CM-FACILITY-MIB", "ocnStmLoopbackConfig"), ("CM-FACILITY-MIB", "ocnStmLoopbackStatus"), ("CM-FACILITY-MIB", "ocnStmLoopbackTime"), ("CM-FACILITY-MIB", "ocnStmInsertingAIS"), ("CM-FACILITY-MIB", "ocnStmBerExcThreshold"), ("CM-FACILITY-MIB", "ocnStmBerDegThreshold"), ("CM-FACILITY-MIB", "ocnStmRxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTxTrailTrace"), ("CM-FACILITY-MIB", "ocnStmExpectedTrailTrace"), ("CM-FACILITY-MIB", "ocnStmTrailTraceFormat"), ("CM-FACILITY-MIB", "ocnStmQLModeEnabled"), ("CM-FACILITY-MIB", "ocnStmExpectedQL"), ("CM-FACILITY-MIB", "ocnStmAssumedQL"), ("CM-FACILITY-MIB", "ocnStmReceivedQL"), ("CM-FACILITY-MIB", "ocnStmTransmitQL"), ("CM-FACILITY-MIB", "ocnStmPortType"), ("CM-FACILITY-MIB", "ocnStmFreqSourceType"), ("CM-FACILITY-MIB", "ocnStmSfpName"), ("CM-FACILITY-MIB", "ocnStmSfpHardwareRevision"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ocnStmGroup = ocnStmGroup.setStatus('current')
if mibBuilder.loadTexts: ocnStmGroup.setDescription('A collection of objects used to manage the OCN/STM Line.')
stsVcPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 12)).setObjects(("CM-FACILITY-MIB", "stsVcPathParentIfIndex"), ("CM-FACILITY-MIB", "stsVcPathIndex"), ("CM-FACILITY-MIB", "stsVcPathIfIndex"), ("CM-FACILITY-MIB", "stsVcPathAdminState"), ("CM-FACILITY-MIB", "stsVcPathOperationalState"), ("CM-FACILITY-MIB", "stsVcPathSecondaryState"), ("CM-FACILITY-MIB", "stsVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "stsVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "stsVcPathLoopbackTime"), ("CM-FACILITY-MIB", "stsVcPathInsertingAIS"), ("CM-FACILITY-MIB", "stsVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "stsVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "stsVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "stsVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "stsVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "stsVcPathRowStatus"), ("CM-FACILITY-MIB", "stsVcPathLowOrderPathType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stsVcPathGroup = stsVcPathGroup.setStatus('current')
if mibBuilder.loadTexts: stsVcPathGroup.setDescription('A collection of objects used to manage the STS/VC Higher Order Path.')
vtVcPathGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 13)).setObjects(("CM-FACILITY-MIB", "vtVcPathParentIfIndex"), ("CM-FACILITY-MIB", "vtVcPathIndex"), ("CM-FACILITY-MIB", "vtVcPathIfIndex"), ("CM-FACILITY-MIB", "vtVcPathAdminState"), ("CM-FACILITY-MIB", "vtVcPathOperationalState"), ("CM-FACILITY-MIB", "vtVcPathSecondaryState"), ("CM-FACILITY-MIB", "vtVcPathLoopbackConfig"), ("CM-FACILITY-MIB", "vtVcPathLoopbackStatus"), ("CM-FACILITY-MIB", "vtVcPathLoopbackTime"), ("CM-FACILITY-MIB", "vtVcPathInsertingAIS"), ("CM-FACILITY-MIB", "vtVcPathBerExcThreshold"), ("CM-FACILITY-MIB", "vtVcPathBerDegThreshold"), ("CM-FACILITY-MIB", "vtVcPathTrailTraceFormat"), ("CM-FACILITY-MIB", "vtVcPathRxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathTxTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathExpectedTrailTrace"), ("CM-FACILITY-MIB", "vtVcPathRxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathTxSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathExpectedSignalLabel"), ("CM-FACILITY-MIB", "vtVcPathRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtVcPathGroup = vtVcPathGroup.setStatus('current')
if mibBuilder.loadTexts: vtVcPathGroup.setDescription('A collection of objects used to manage the VT/VC Lower Order Path.')
e1t1InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 14)).setObjects(("CM-FACILITY-MIB", "e1t1ParentIfIndex"), ("CM-FACILITY-MIB", "e1t1Index"), ("CM-FACILITY-MIB", "e1t1IfIndex"), ("CM-FACILITY-MIB", "e1t1EntityIndex"), ("CM-FACILITY-MIB", "e1t1AdminState"), ("CM-FACILITY-MIB", "e1t1OperationalState"), ("CM-FACILITY-MIB", "e1t1SecondaryState"), ("CM-FACILITY-MIB", "e1t1LoopbackConfig"), ("CM-FACILITY-MIB", "e1t1LoopbackStatus"), ("CM-FACILITY-MIB", "e1t1LoopbackTime"), ("CM-FACILITY-MIB", "e1t1RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e1t1InsertingAIS"), ("CM-FACILITY-MIB", "e1t1RowStatus"), ("CM-FACILITY-MIB", "e1t1LineType"), ("CM-FACILITY-MIB", "e1t1LineCode"), ("CM-FACILITY-MIB", "e1t1FrameFormat"), ("CM-FACILITY-MIB", "e1t1LineBuildOut"), ("CM-FACILITY-MIB", "e1t1TimingDomain"), ("CM-FACILITY-MIB", "e1t1RcvSensitivity"), ("CM-FACILITY-MIB", "e1t1IdlePatternProfile"), ("CM-FACILITY-MIB", "e1t1LoopbackProfile"), ("CM-FACILITY-MIB", "e1t1RelatedContainerId"), ("CM-FACILITY-MIB", "e1t1PatternLpbkControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    e1t1InterfaceGroup = e1t1InterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: e1t1InterfaceGroup.setDescription('A collection of objects used to manage the E1/T1 Interface Group.')
e3t3InterfaceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 15)).setObjects(("CM-FACILITY-MIB", "e3t3ParentIfIndex"), ("CM-FACILITY-MIB", "e3t3Index"), ("CM-FACILITY-MIB", "e3t3IfIndex"), ("CM-FACILITY-MIB", "e3t3EntityIndex"), ("CM-FACILITY-MIB", "e3t3AdminState"), ("CM-FACILITY-MIB", "e3t3OperationalState"), ("CM-FACILITY-MIB", "e3t3SecondaryState"), ("CM-FACILITY-MIB", "e3t3LoopbackConfig"), ("CM-FACILITY-MIB", "e3t3LoopbackStatus"), ("CM-FACILITY-MIB", "e3t3LoopbackTime"), ("CM-FACILITY-MIB", "e3t3RemoteLoopbackRequest"), ("CM-FACILITY-MIB", "e3t3InsertingAIS"), ("CM-FACILITY-MIB", "e3t3CBitEnable"), ("CM-FACILITY-MIB", "e3t3T3Channelized"), ("CM-FACILITY-MIB", "e3t3RowStatus"), ("CM-FACILITY-MIB", "e3t3FrameFormat"), ("CM-FACILITY-MIB", "e3t3RelatedContainerId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    e3t3InterfaceGroup = e3t3InterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: e3t3InterfaceGroup.setDescription('A collection of objects used to manage the E3/T3 Interface Group.')
f3PulsePerSecondPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 16)).setObjects(("CM-FACILITY-MIB", "f3PulsePerSecondPortIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortIfIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortEntityIndex"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAdminState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortOperationalState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSecondaryState"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSquelchControl"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortSquelchQL"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortTODSource"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortDirection"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortInputRate"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortDelayCompensation"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortClockClass"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortClockAccuracy"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortTimeSource"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortPhyInterfaceType"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortOutputDelay"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortWidth"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortPolarity"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortImpedance"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAlias"), ("CM-FACILITY-MIB", "f3PulsePerSecondPortAssumedClockClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PulsePerSecondPortGroup = f3PulsePerSecondPortGroup.setStatus('current')
if mibBuilder.loadTexts: f3PulsePerSecondPortGroup.setDescription('A collection of objects used to manage the F3 Pulse Per Second Group.')
f3TimeOfDayPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 17)).setObjects(("CM-FACILITY-MIB", "f3TimeOfDayPortIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortIfIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortEntityIndex"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAdminState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortOperationalState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSecondaryState"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSquelchControl"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSquelchQL"), ("CM-FACILITY-MIB", "f3TimeOfDayPortTODSource"), ("CM-FACILITY-MIB", "f3TimeOfDayPortOutputFormat"), ("CM-FACILITY-MIB", "f3TimeOfDayPortSignalDirection"), ("CM-FACILITY-MIB", "f3TimeOfDayPortInputRate"), ("CM-FACILITY-MIB", "f3TimeOfDayPortDelayCompensation"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAlias"), ("CM-FACILITY-MIB", "f3TimeOfDayPortAssumedClockClass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3TimeOfDayPortGroup = f3TimeOfDayPortGroup.setStatus('current')
if mibBuilder.loadTexts: f3TimeOfDayPortGroup.setDescription('A collection of objects used to manage the F3 Time of Day Port Group.')
f3Gps10MhzPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 18)).setObjects(("CM-FACILITY-MIB", "gps10MHzPortIndex"), ("CM-FACILITY-MIB", "gps10MHzPortIfIndex"), ("CM-FACILITY-MIB", "gps10MHzPortEntityIndex"), ("CM-FACILITY-MIB", "gps10MHzPortAdminState"), ("CM-FACILITY-MIB", "gps10MHzPortOperationalState"), ("CM-FACILITY-MIB", "gps10MHzPortSecondaryState"), ("CM-FACILITY-MIB", "gps10MHzPortSignalDirection"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchControl"), ("CM-FACILITY-MIB", "gps10MHzPortSquelchQL"), ("CM-FACILITY-MIB", "gps10MHzPortFrequencySource"), ("CM-FACILITY-MIB", "gps10MHzPortClockClass"), ("CM-FACILITY-MIB", "gps10MHzPortClockAccuracy"), ("CM-FACILITY-MIB", "gps10MHzPortTimeSource"), ("CM-FACILITY-MIB", "gps10MHzPortAssumedQL"), ("CM-FACILITY-MIB", "gps10MHzPortAlias"), ("CM-FACILITY-MIB", "gps10MHzPortInputSignalType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3Gps10MhzPortGroup = f3Gps10MhzPortGroup.setStatus('current')
if mibBuilder.loadTexts: f3Gps10MhzPortGroup.setDescription('A collection of objects used to manage the F3 GPS 10 Mhz Port Group.')
ethernetNetworkPortExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 19)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortTDMEncapsulation"), ("CM-FACILITY-MIB", "cmEthernetNetPortAssociatedTdmEntity"), ("CM-FACILITY-MIB", "cmEthernetNetPortInsertingAIS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortExtGroup = ethernetNetworkPortExtGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetNetworkPortExtGroup.setDescription(' A collection of objects used to manage the F3 Ethernet Network Port \n              extense function.')
f3GPSReceiverPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 20)).setObjects(("CM-FACILITY-MIB", "f3GPSReceiverPortIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortIfIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortEntityIndex"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAdminState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortOperationalState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSecondaryState"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPPSGenCondition"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaCableLength"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaStatus"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatellitesUsableFlag"), ("CM-FACILITY-MIB", "f3GPSReceiverPortNumTrackingSatellites"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyProgress"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPPSGeneratedFlag"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssSystem"), ("CM-FACILITY-MIB", "f3GPSReceiverPortInstallationType"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssTOD"), ("CM-FACILITY-MIB", "f3GPSReceiverPortGnssSystemsBitMap"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAlias"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaDelayValue"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAntennaDelayType"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCNOMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortElevationMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateLatitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateLongitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateAltitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortFirmwareUpgradePercent"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPDOPMask"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyPeriod"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatMin1Threshold"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSatMin2Threshold"), ("CM-FACILITY-MIB", "f3GPSReceiverPortPDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyControl"), ("CM-FACILITY-MIB", "f3GPSReceiverPortCoordinateStringAltitude"), ("CM-FACILITY-MIB", "f3GPSReceiverPortLocationMode"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTimeAdvanceMode"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTimeAdvanceValue"), ("CM-FACILITY-MIB", "f3GPSReceiverPortForcedAntennaConnected"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceAvailableTime"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceUnavailableTime"), ("CM-FACILITY-MIB", "f3GPSReceiverPortServiceAvailablePercentage"), ("CM-FACILITY-MIB", "f3GPSReceiverPortAGC"), ("CM-FACILITY-MIB", "f3GPSReceiverPortSelfSurveyPositionAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortHorizontalAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortVerticalAccuracy"), ("CM-FACILITY-MIB", "f3GPSReceiverPortTDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortHDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortVDOP"), ("CM-FACILITY-MIB", "f3GPSReceiverPortFailureSuspendTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3GPSReceiverPortGroup = f3GPSReceiverPortGroup.setStatus('current')
if mibBuilder.loadTexts: f3GPSReceiverPortGroup.setDescription('A collection of objects used to manage the F3 GPS Receiver Port Group.')
cmPsePortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 21)).setObjects(("CM-FACILITY-MIB", "cmPethPsePortExtGroupIndex"), ("CM-FACILITY-MIB", "cmPethPsePortExtIndex"), ("CM-FACILITY-MIB", "cmPethPsePortExtAssociatedPort"), ("CM-FACILITY-MIB", "pethPsePortExtPowerConsumption"), ("CM-FACILITY-MIB", "pethPsePortExtAvailablePowerLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPsePortGroup = cmPsePortGroup.setStatus('current')
if mibBuilder.loadTexts: cmPsePortGroup.setDescription('A collection of objects used to manage the pse port ext entry Group.')
cmPseEXTGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 22)).setObjects(("CM-FACILITY-MIB", "pethMainPseExtGroupIndex"), ("CM-FACILITY-MIB", "pethMainPseExtNonStandardPD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPseEXTGroup = cmPseEXTGroup.setStatus('current')
if mibBuilder.loadTexts: cmPseEXTGroup.setDescription('A collection of objects used to manage the pse group ext entry Group.')
cmMPFlowGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 23)).setObjects(("CM-FACILITY-MIB", "cmMPFlowIndex"), ("CM-FACILITY-MIB", "cmMPFlowCircuitName"), ("CM-FACILITY-MIB", "cmMPFlowAdminState"), ("CM-FACILITY-MIB", "cmMPFlowOperationalState"), ("CM-FACILITY-MIB", "cmMPFlowSecondaryState"), ("CM-FACILITY-MIB", "cmMPFlowLearningEnabled"), ("CM-FACILITY-MIB", "cmMPFlowAgingTimer"), ("CM-FACILITY-MIB", "cmMPFlowFwdTableSizeProfileID"), ("CM-FACILITY-MIB", "cmMPFlowtableFullAction"), ("CM-FACILITY-MIB", "cmMPFlowStorageType"), ("CM-FACILITY-MIB", "cmMPFlowRowStatus"), ("CM-FACILITY-MIB", "cmMPFlowLearningConfigAction"), ("CM-FACILITY-MIB", "cmMPFlowFPList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmMPFlowGroup = cmMPFlowGroup.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowGroup.setDescription('A collection of objects used to manage the MP flow entry Group.')
cmMPFlowMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 24)).setObjects(("CM-FACILITY-MIB", "cmMPFlowMemberFPIndex"), ("CM-FACILITY-MIB", "cmMPFlowPointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmMPFlowMemberGroup = cmMPFlowMemberGroup.setStatus('current')
if mibBuilder.loadTexts: cmMPFlowMemberGroup.setDescription('A collection of objects used to manage the MP flow Member entry Group.')
cmEthernetTrafficPortPcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 25)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEDropEligiblePrio"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortClbDescr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortPcpGroup = cmEthernetTrafficPortPcpGroup.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPcpGroup.setDescription('A collection of objects used to manage the traffic port pcp Group.')
neTMParamsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 26)).setObjects(("CM-FACILITY-MIB", "neTMParamsBandwidthProfileMode"), ("CM-FACILITY-MIB", "neTMParamsAgingtime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    neTMParamsGroup = neTMParamsGroup.setStatus('current')
if mibBuilder.loadTexts: neTMParamsGroup.setDescription('A collection of objects used to manage the ne facility entry Group.')
cmEthernetTrafficPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 27)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIfIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEntityIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOperationalState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSecondaryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMTU"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortConfigSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortNegotiatedSpeed"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMDIXStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackConfig"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSwapSADA"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdSignalType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTriggerTypes"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdDelay"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdActive"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdPartnerEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdLocalLinkId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRemoteLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdTxActionType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamDiscoveryState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamLocalMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteVarRtrvsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteLinkEventsEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteOamLoopbacksSupported"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteUnidirSupportEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMaxPDUSize"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamRemoteMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOamAdminState"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSvcType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAfpType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortShapedSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQinQEtherType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressVlanTrunkingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPushPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPortVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPriorityVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPrioMapMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressCOSPriority"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortQLModeEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpectedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAssumedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortReceivedQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTransmitQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTagFrameControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxPauseEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPhyType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpLaserWaveLengthPicometer"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRowStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSSMRemoteMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopbackMask"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback1"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback2"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInnerVlanLoopback3"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserWDMChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserIsTunable"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDeiEnable"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPcpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortInitiateDiag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair1Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair2Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair3Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosePair4Cond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseAutoNegCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseEfmLpbkCond"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseResult"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseTestStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnoseTestTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortAutoDiagEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDeleteEntitiesAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMaxMpFpNum"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackVlanId"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressPopPriorityVidEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxDeiAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxDeiOuterTagType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortServiceType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSourceMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackDestMacControlEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackSourceMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackDestMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackBlockingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMediaTypeAutoSelected"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLowLatencyQueuingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortDiagnosticMacAddress"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortMcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCombinedRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortIngressSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortEgressSwapPriorityVIDEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSwapPriorityVID"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpDEEncType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortExpDEPairsAction"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJdsuLoopbackSrcIp"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortTxSsm"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRxSsmQL"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceAvailableTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceUnavailableTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSyncEServiceAvailablePercentage"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupCOS"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortWfqGroupEirHi"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterTagTpidOverride"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortOuterTagTpid"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpTxPowerLevel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpRxPowerLevel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortBwResourcePort"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv4Address"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLoopbackTestReflectorIPv6Address"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortSfpIdentifierValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugGMetroAutoTuningMode"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugChannelType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortPlugOutOfBandChannelStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugITUCbandChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugRelativeChannel"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemotePlugFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpVendorName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpName"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpPartNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpHardwareRevision"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpSerialNumber"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpDateOfManufacture"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLinkLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserWaveLength"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpLaserFrequency"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpMediaType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpConnectorValue"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortRemoteSfpIdentifierValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortGroup = cmEthernetTrafficPortGroup.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortGroup.setDescription('A collection of objects used to manage the traffic port entry Group.')
cmFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 28)).setObjects(("CM-FACILITY-MIB", "cmFlowPointIndex"), ("CM-FACILITY-MIB", "cmFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmFlowPointAdminState"), ("CM-FACILITY-MIB", "cmFlowPointOperationalState"), ("CM-FACILITY-MIB", "cmFlowPointSecondaryState"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmFlowPointIngressMultiCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressCOS"), ("CM-FACILITY-MIB", "cmFlowPointIngressVlanMemberList"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberAction"), ("CM-FACILITY-MIB", "cmFlowPointAssociatedAclProfile"), ("CM-FACILITY-MIB", "cmFlowPointSESFramesLossThresholdRatio"), ("CM-FACILITY-MIB", "cmFlowPointVlanMemberActionVlan"), ("CM-FACILITY-MIB", "cmFlowPointIngressUntaggedFrameEnabled"), ("CM-FACILITY-MIB", "cmFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointColorMarkingSupported"), ("CM-FACILITY-MIB", "cmFlowPointStorageType"), ("CM-FACILITY-MIB", "cmFlowPointRowStatus"), ("CM-FACILITY-MIB", "cmFlowPointDefaultMemberEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointMcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointSplitHorizonGroupOID"), ("CM-FACILITY-MIB", "cmFlowPointLoopAvoidance"), ("CM-FACILITY-MIB", "cmFlowPointHierarchicalCosEnabled"), ("CM-FACILITY-MIB", "cmFlowPointWfqQid"), ("CM-FACILITY-MIB", "cmFlowPointWfqOutPriority"), ("CM-FACILITY-MIB", "cmFlowPointMaximumBWLo"), ("CM-FACILITY-MIB", "cmFlowPointGuaranteedBWLo"), ("CM-FACILITY-MIB", "cmFlowPointMaximumBWHi"), ("CM-FACILITY-MIB", "cmFlowPointGuaranteedBWHi"), ("CM-FACILITY-MIB", "cmFlowPointRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitEnabled"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitSpeedLo"), ("CM-FACILITY-MIB", "cmFlowPointMcastAndBcastRateLimitSpeedHi"), ("CM-FACILITY-MIB", "cmFlowPointEgressShapingType"), ("CM-FACILITY-MIB", "cmFlowPointEgressInnerTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmFlowPointAutoBandwidthConfigEnabled"), ("CM-FACILITY-MIB", "cmFlowPointAutoCIRPercentage"), ("CM-FACILITY-MIB", "cmFlowPointFrameFwdEnabled"), ("CM-FACILITY-MIB", "cmFlowPointUsePortPrioMapProfile"), ("CM-FACILITY-MIB", "cmFlowPointRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmFlowPointElmiEvcIdentifier"), ("CM-FACILITY-MIB", "cmFlowPointRefElpObject"), ("CM-FACILITY-MIB", "cmFlowPointEfEnabled"), ("CM-FACILITY-MIB", "cmFlowPointEfIdentificationType"), ("CM-FACILITY-MIB", "cmFlowPointEfRateThresholdLo"), ("CM-FACILITY-MIB", "cmFlowPointEfRateThresholdHi"), ("CM-FACILITY-MIB", "cmFlowPointAclNoMatchDisposition"), ("CM-FACILITY-MIB", "cmFlowPointEfIdentificationFields"), ("CM-FACILITY-MIB", "cmFlowPointWfqSegmentationCOS"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupCOS"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupEirLo"), ("CM-FACILITY-MIB", "cmFlowPointWfqGroupEirHi"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFlowPointGroup = cmFlowPointGroup.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointGroup.setDescription('A collection of objects used to manage the flow point entry Group.')
ethernetAccessPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 29)).setObjects(("CM-FACILITY-MIB", "cmEthernetAccPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetAccPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetAccPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetAccessPortJdsuExtGroup = ethernetAccessPortJdsuExtGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetAccessPortJdsuExtGroup.setDescription(' A collection of objects used to manage the F3 Ethernet Access Port \n              JDSU extense function.')
ethernetNetworkPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 30)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetNetPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortJdsuExtGroup = ethernetNetworkPortJdsuExtGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetNetworkPortJdsuExtGroup.setDescription(' A collection of objects used to manage the F3 Ethernet Network Port \n              JDSU extense function.')
cmTrafficPortLpbkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 31)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkIndex"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkInnerVlanEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkInnerVlanTag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkOuterVlanEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkOuterVlanTag"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkTime"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkStatus"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortLpbkConfig"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmTrafficPortLpbkGroup = cmTrafficPortLpbkGroup.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortLpbkGroup.setDescription('A collection of objects used to manage the traffic port lpbk group.')
cmPrioMapV2ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 32)).setObjects(("CM-FACILITY-MIB", "cmPrioMapV2ProfileIndex"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileAlias"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileMapModeType"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileStorageType"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileRowStatus"), ("CM-FACILITY-MIB", "cmPrioMapV2ProfileIngressCosPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPrioMapV2ProfileGroup = cmPrioMapV2ProfileGroup.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2ProfileGroup.setDescription('A collection of objects used to manage the priority map profile group.')
cmPrioMapV2IngressPrioMappingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 33)).setObjects(("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingIndex"), ("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingInPriority"), ("CM-FACILITY-MIB", "cmPrioMapV2IngressPrioMappingCOS"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPrioMapV2IngressPrioMappingGroup = cmPrioMapV2IngressPrioMappingGroup.setStatus('current')
if mibBuilder.loadTexts: cmPrioMapV2IngressPrioMappingGroup.setDescription('A collection of objects used to manage the priority map group.')
bits8PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 34)).setObjects(("CM-FACILITY-MIB", "bits8PortGroupIndex"), ("CM-FACILITY-MIB", "bits8PortGroupIfIndex"), ("CM-FACILITY-MIB", "bits8PortGroupAdminState"), ("CM-FACILITY-MIB", "bits8PortGroupOperationalState"), ("CM-FACILITY-MIB", "bits8PortGroupSecondaryState"), ("CM-FACILITY-MIB", "bits8PortGroupLineType"), ("CM-FACILITY-MIB", "bits8PortGroupLineCode"), ("CM-FACILITY-MIB", "bits8PortGroupFrameFormat"), ("CM-FACILITY-MIB", "bits8PortGroupSaBitDesignation"), ("CM-FACILITY-MIB", "bits8PortGroupQLModeEnabled"), ("CM-FACILITY-MIB", "bits8PortGroupTransmitQL"), ("CM-FACILITY-MIB", "bits8PortGroupSquelchQL"), ("CM-FACILITY-MIB", "bits8PortGroupLineBuildOut"), ("CM-FACILITY-MIB", "bits8PortGroupImpedance"), ("CM-FACILITY-MIB", "bits8PortGroupRowStatus"), ("CM-FACILITY-MIB", "bits8PortGroupActivePorts"), ("CM-FACILITY-MIB", "bits8PortGroupClkIfEnabledPorts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bits8PortGroupGroup = bits8PortGroupGroup.setStatus('current')
if mibBuilder.loadTexts: bits8PortGroupGroup.setDescription('A collection of objects used to manage the Bits 8 Port Group\n             function.')
pps16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 35)).setObjects(("CM-FACILITY-MIB", "pps16PortGroupIndex"), ("CM-FACILITY-MIB", "pps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "pps16PortGroupAdminState"), ("CM-FACILITY-MIB", "pps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "pps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "pps16PortGroupAlias"), ("CM-FACILITY-MIB", "pps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "pps16PortGroupTODSource"), ("CM-FACILITY-MIB", "pps16PortGroupDirection"), ("CM-FACILITY-MIB", "pps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "pps16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pps16PortGroupGroup = pps16PortGroupGroup.setStatus('current')
if mibBuilder.loadTexts: pps16PortGroupGroup.setDescription('A collection of objects used to manage the Pps 16 port card Group\n             function.')
clk16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 36)).setObjects(("CM-FACILITY-MIB", "clk16PortGroupIndex"), ("CM-FACILITY-MIB", "clk16PortGroupIfIndex"), ("CM-FACILITY-MIB", "clk16PortGroupAdminState"), ("CM-FACILITY-MIB", "clk16PortGroupOperationalState"), ("CM-FACILITY-MIB", "clk16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "clk16PortGroupAlias"), ("CM-FACILITY-MIB", "clk16PortGroupDirection"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "clk16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "clk16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    clk16PortGroupGroup = clk16PortGroupGroup.setStatus('current')
if mibBuilder.loadTexts: clk16PortGroupGroup.setDescription('A collection of objects used to manage the CLK 16 port card Group\n             function.')
todPps16PortGroupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 37)).setObjects(("CM-FACILITY-MIB", "todPps16PortGroupIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupIfIndex"), ("CM-FACILITY-MIB", "todPps16PortGroupAdminState"), ("CM-FACILITY-MIB", "todPps16PortGroupOperationalState"), ("CM-FACILITY-MIB", "todPps16PortGroupSecondaryState"), ("CM-FACILITY-MIB", "todPps16PortGroupAlias"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchControl"), ("CM-FACILITY-MIB", "todPps16PortGroupSquelchQL"), ("CM-FACILITY-MIB", "todPps16PortGroupTODSource"), ("CM-FACILITY-MIB", "todPps16PortGroupOutputFormat"), ("CM-FACILITY-MIB", "todPps16PortGroupDelayCompensation"), ("CM-FACILITY-MIB", "todPps16PortGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    todPps16PortGroupGroup = todPps16PortGroupGroup.setStatus('current')
if mibBuilder.loadTexts: todPps16PortGroupGroup.setDescription('A collection of objects used to manage the TOD and PPS 16 port card Group\n             function.')
f3PolicerEnvelopeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 38)).setObjects(("CM-FACILITY-MIB", "f3PolicerEnvelopeIndex"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeCouplingFlag"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeStorageType"), ("CM-FACILITY-MIB", "f3PolicerEnvelopeRowStatus"), ("CM-FACILITY-MIB", "f3EnvelopeAssocPolicer"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3PolicerEnvelopeGroup = f3PolicerEnvelopeGroup.setStatus('current')
if mibBuilder.loadTexts: f3PolicerEnvelopeGroup.setDescription('A collection of objects used to manage the policer envelope group\n             function.')
cmNetPortExpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 39)).setObjects(("CM-FACILITY-MIB", "cmNetPortExpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortExpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortExpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortExpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortExpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortExpDeGroup = cmNetPortExpDeGroup.setStatus('current')
if mibBuilder.loadTexts: cmNetPortExpDeGroup.setDescription('A collection of objects used to manage the exp de decoding and encoding group\n             function.')
cmNetPortIpPrecDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 40)).setObjects(("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortIpPrecDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortIpPrecDeGroup = cmNetPortIpPrecDeGroup.setStatus('current')
if mibBuilder.loadTexts: cmNetPortIpPrecDeGroup.setDescription('A collection of objects used to manage the ip prec de decoding and encoding group\n             function.')
cmNetPortEncapPcpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 41)).setObjects(("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncInPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecInPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecOutPriority"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDecDropEligible"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEPairIndex"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "cmNetPortEncapPcpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmNetPortEncapPcpDeGroup = cmNetPortEncapPcpDeGroup.setStatus('current')
if mibBuilder.loadTexts: cmNetPortEncapPcpDeGroup.setDescription('A collection of objects used to manage the encap PCP de decoding and encoding group\n             function.')
f3SatelliteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 42)).setObjects(("CM-FACILITY-MIB", "f3SatelliteIndex"), ("CM-FACILITY-MIB", "f3SatelliteSV"), ("CM-FACILITY-MIB", "f3SatelliteInUse"), ("CM-FACILITY-MIB", "f3SatelliteSVType"), ("CM-FACILITY-MIB", "f3SatelliteCNO"), ("CM-FACILITY-MIB", "f3SatelliteHealth"), ("CM-FACILITY-MIB", "f3SatelliteAzimuth"), ("CM-FACILITY-MIB", "f3SatelliteElevation"), ("CM-FACILITY-MIB", "f3SatelliteGnssReceiverPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3SatelliteGroup = f3SatelliteGroup.setStatus('current')
if mibBuilder.loadTexts: f3SatelliteGroup.setDescription('A collection of objects used to manage the GNSS satellite group\n             function.')
cmEthernetTrafficPortJdsuExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 43)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSULoopbackVlan"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortJDSULoopbackVlanList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortJdsuExtGroup = cmEthernetTrafficPortJdsuExtGroup.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortJdsuExtGroup.setDescription('A collection of objects used to manage the F3 Ethernet Traffic Port \n              JDSU extense function.')
f3FpQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 44)).setObjects(("CM-FACILITY-MIB", "f3FpQosShaperIndex"), ("CM-FACILITY-MIB", "f3FpQosShaperAdminState"), ("CM-FACILITY-MIB", "f3FpQosShaperOperationalState"), ("CM-FACILITY-MIB", "f3FpQosShaperSecondaryState"), ("CM-FACILITY-MIB", "f3FpQosShaperCIRLo"), ("CM-FACILITY-MIB", "f3FpQosShaperCIRHi"), ("CM-FACILITY-MIB", "f3FpQosShaperEIRLo"), ("CM-FACILITY-MIB", "f3FpQosShaperEIRHi"), ("CM-FACILITY-MIB", "f3FpQosShaperCBS"), ("CM-FACILITY-MIB", "f3FpQosShaperEBS"), ("CM-FACILITY-MIB", "f3FpQosShaperBufferSize"), ("CM-FACILITY-MIB", "f3FpQosShaperCOS"), ("CM-FACILITY-MIB", "f3FpQosShaperStorageType"), ("CM-FACILITY-MIB", "f3FpQosShaperRowStatus"), ("CM-FACILITY-MIB", "f3FpQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosShaperGroup = f3FpQosShaperGroup.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperGroup.setDescription('A collection of objects used to manage the \n             F3 Ethernet Traffic Port FlowPoint Shaper.')
f3FpQosPolicerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 45)).setObjects(("CM-FACILITY-MIB", "f3FpQosPolicerIndex"), ("CM-FACILITY-MIB", "f3FpQosPolicerAdminState"), ("CM-FACILITY-MIB", "f3FpQosPolicerOperationalState"), ("CM-FACILITY-MIB", "f3FpQosPolicerSecondaryState"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerCBS"), ("CM-FACILITY-MIB", "f3FpQosPolicerEBS"), ("CM-FACILITY-MIB", "f3FpQosPolicerAlgorithm"), ("CM-FACILITY-MIB", "f3FpQosPolicerColorMode"), ("CM-FACILITY-MIB", "f3FpQosPolicerCouplingFlag"), ("CM-FACILITY-MIB", "f3FpQosPolicerPolicingEnabled"), ("CM-FACILITY-MIB", "f3FpQosPolicerStorageType"), ("CM-FACILITY-MIB", "f3FpQosPolicerRowStatus"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRMaxHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerCIRMaxLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRMaxHi"), ("CM-FACILITY-MIB", "f3FpQosPolicerEIRMaxLo"), ("CM-FACILITY-MIB", "f3FpQosPolicerEnvelopeObject"), ("CM-FACILITY-MIB", "f3FpQosPolicerRank"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosPolicerGroup = f3FpQosPolicerGroup.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerGroup.setDescription('A collection of objects used to manage the \n             F3 Ethernet Traffic Port FlowPoint Policer.')
cpdV2TrafficPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 46)).setObjects(("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Index"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CiscoGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2IslDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PagpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2UdldDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CdpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2VtpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2DtpDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BridgeGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PauseDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LACPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2SSMDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2BridgeReservedDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GARPGroupDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2GARPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2CustomerLLDPDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PtpUntaggedDispType"), ("CM-FACILITY-MIB", "cmEthernetTrafficPortCpdV2PtpTaggedDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Index"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2IslDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PagpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2UdldDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2CdpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2VtpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2DtpDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PvstpPlusDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2UplinkFastDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2VlanBridgeDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2L2PTDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2BPDUDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PauseDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LACPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LACPMarkerDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2EfmOamDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2SSMDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2PortAuthenDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2LANBridgesDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GMRPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GVRPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2GARPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2ActiveControlProtocols"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2ELMIDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac00DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac01DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac02DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac03DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac04DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac05DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac06DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac07DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac08DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac09DispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0ADispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0BDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0CDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0DDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0EDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2Mac0FDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2NearestLLDPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2NonTpmrLLDPDispType"), ("CM-FACILITY-MIB", "f3FlowPointCpdV2CustomerLLDPDispType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cpdV2TrafficPortGroup = cpdV2TrafficPortGroup.setStatus('current')
if mibBuilder.loadTexts: cpdV2TrafficPortGroup.setDescription('A collection of objects used to manage the \n             Control Protocol Disposition version 2 function.')
f3AclRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 47)).setObjects(("CM-FACILITY-MIB", "f3AclRuleIndex"), ("CM-FACILITY-MIB", "f3AclRuleAdminState"), ("CM-FACILITY-MIB", "f3AclRuleAlias"), ("CM-FACILITY-MIB", "f3AclRulePriority"), ("CM-FACILITY-MIB", "f3AclRuleOperation"), ("CM-FACILITY-MIB", "f3AclRuleCosOverrideControl"), ("CM-FACILITY-MIB", "f3AclRuleCOS"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddress"), ("CM-FACILITY-MIB", "f3AclRuleSrcMacAddressMask"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddress"), ("CM-FACILITY-MIB", "f3AclRuleDstMacAddressMask"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanVIDHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDControl"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanVIDHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanPcpHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpControl"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleInnerVlanPcpHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanDeiControl"), ("CM-FACILITY-MIB", "f3AclRuleOuterVlanDei"), ("CM-FACILITY-MIB", "f3AclRuleEtherTypeControl"), ("CM-FACILITY-MIB", "f3AclRuleEtherType"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityControl"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleIpv4PriorityHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleProtocolControl"), ("CM-FACILITY-MIB", "f3AclRuleProtocolNumber"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv4AddressHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv4AddressHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleSrcPortHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstPortControl"), ("CM-FACILITY-MIB", "f3AclRuleDstPortLowLimit"), ("CM-FACILITY-MIB", "f3AclRuleDstPortHighLimit"), ("CM-FACILITY-MIB", "f3AclRuleTcpFlagsControl"), ("CM-FACILITY-MIB", "f3AclRuleTcpFlags"), ("CM-FACILITY-MIB", "f3AclRuleStorageType"), ("CM-FACILITY-MIB", "f3AclRuleRowStatus"), ("CM-FACILITY-MIB", "f3AclRuleActive"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6Address"), ("CM-FACILITY-MIB", "f3AclRuleSrcIpv6AddressPrefixLen"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6AddressControl"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6Address"), ("CM-FACILITY-MIB", "f3AclRuleDstIpv6AddressPrefixLen"), ("CM-FACILITY-MIB", "f3AclRuleIpV6FlowLabelControl"), ("CM-FACILITY-MIB", "f3AclRuleIpV6FlowLabel"), ("CM-FACILITY-MIB", "f3AclRulePriorityControl"), ("CM-FACILITY-MIB", "f3AclRulePriorityLowLimit"), ("CM-FACILITY-MIB", "f3AclRulePriorityHighLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AclRuleGroup = f3AclRuleGroup.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleGroup.setDescription('A collection of objects used to manage the \n             F3 Ethernet Traffic Port FlowPoint ACL Rule.')
f3EthernetTrafficPortExpDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 48)).setObjects(("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncInPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncDropIneligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEEncDropEligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecInPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecOutPriority"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDecDropEligible"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEPairIndex"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDropIneligiblePrio"), ("CM-FACILITY-MIB", "f3EthernetTrafficPortExpDEDropEligiblePrio"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3EthernetTrafficPortExpDeGroup = f3EthernetTrafficPortExpDeGroup.setStatus('current')
if mibBuilder.loadTexts: f3EthernetTrafficPortExpDeGroup.setDescription('A collection of objects used to manage the \n             F3 Ethernet Traffic Port Exp De Decoding/Encoding \n             group function.')
f3XdslAndPpppoeParamGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 49)).setObjects(("CM-FACILITY-MIB", "cmEthernetNetPortXdslConnControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslModulationMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslBitSwapEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslGvectorEnabled"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslVdslProfile"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslStatus"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslCurVdslProfile"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslActualLinkRateUpStream"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslActualLinkRateDownStream"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslControlChannel"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslCarrierSet"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslMode"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslAnnex"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsSNRMargin"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsSNRMargin"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsSignalAttenuation"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsLineAttenuation"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsTxPower"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsTxPower"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslDsAttainableRate"), ("CM-FACILITY-MIB", "cmEthernetNetPortXdslUsAttainableRate"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeOuterVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanControl"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanEtherType"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeInnerVlanPriority"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeServiceName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeLcpKeepAlivePeriod"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeLcpRetryThreshold"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeRxAcName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeRxServiceName"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeSessionId"), ("CM-FACILITY-MIB", "cmEthernetNetPortPppoeConnStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3XdslAndPpppoeParamGroup = f3XdslAndPpppoeParamGroup.setStatus('current')
if mibBuilder.loadTexts: f3XdslAndPpppoeParamGroup.setDescription('A collection of objects used to manage the \n             F3 Ethernet Traffic Port XDSL Parameter.')
sciPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 50)).setObjects(("CM-FACILITY-MIB", "sciPortIndex"), ("CM-FACILITY-MIB", "sciPortAdminState"), ("CM-FACILITY-MIB", "sciPortOperationalState"), ("CM-FACILITY-MIB", "sciPortSignalMode"), ("CM-FACILITY-MIB", "sciPortSignalDirection"), ("CM-FACILITY-MIB", "sciPortRxSsmQL"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    sciPortGroup = sciPortGroup.setStatus('current')
if mibBuilder.loadTexts: sciPortGroup.setDescription('A collection of objects used to manage the SCI port.')
cmTrafficPortQosShaperGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 51)).setObjects(("CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdminState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperOperationalState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperSecondaryState"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAssociatedQueueProfile"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperBufferSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperEIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperStorageType"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperRowStatus"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperIngressAverageFrameSize"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRLo"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperAdditionalCIRHi"), ("CM-FACILITY-MIB", "cmTrafficPortQosShaperWfqWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmTrafficPortQosShaperGroup = cmTrafficPortQosShaperGroup.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperGroup.setDescription('A collection of objects used to manage the\n             Ethernet Traffic Port QOS Shaper.')
f3IrigPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 52)).setObjects(("CM-FACILITY-MIB", "f3IrigRs422OutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigRs422OutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOpticalOutputPortControlField"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAlias"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortAdminState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigRelayOutputPortRelayOperation"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputGroupAlias"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionType"), ("CM-FACILITY-MIB", "f3IrigOutputGroupExtensionDetection"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortIfIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortEntityIndex"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAlias"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortAdminState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortOperationalState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortSecondaryState"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortTimeCode"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortControlField"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortType"), ("CM-FACILITY-MIB", "f3IrigOutputUnitPortDigitalVoltage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3IrigPortGroup = f3IrigPortGroup.setStatus('current')
if mibBuilder.loadTexts: f3IrigPortGroup.setDescription('A collection of objects used to manage IRIG Card and Port.')
ccGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 53)).setObjects(("CM-FACILITY-MIB", "ccInputPortIndex"), ("CM-FACILITY-MIB", "ccInputPortIfIndex"), ("CM-FACILITY-MIB", "ccInputPortEntityIndex"), ("CM-FACILITY-MIB", "ccInputPortAlias"), ("CM-FACILITY-MIB", "ccInputPortAdminState"), ("CM-FACILITY-MIB", "ccInputPortOperationalState"), ("CM-FACILITY-MIB", "ccInputPortSecondaryState"), ("CM-FACILITY-MIB", "ccGroupIndex"), ("CM-FACILITY-MIB", "ccGroupIfIndex"), ("CM-FACILITY-MIB", "ccGroupEntityIndex"), ("CM-FACILITY-MIB", "ccGroupAlias"), ("CM-FACILITY-MIB", "ccGroupActivePorts"), ("CM-FACILITY-MIB", "ccGroupPhaseAdjust"), ("CM-FACILITY-MIB", "ccGroupDutyCycle"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccGroup = ccGroup.setStatus('current')
if mibBuilder.loadTexts: ccGroup.setDescription('A collection of objects used to manage the CC Card.')
cmEncapFlowPointGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 4, 2, 2, 54)).setObjects(("CM-FACILITY-MIB", "cmEncapFlowPointIndex"), ("CM-FACILITY-MIB", "cmEncapFlowPointCircuitName"), ("CM-FACILITY-MIB", "cmEncapFlowPointAssociatedFlowId"), ("CM-FACILITY-MIB", "cmEncapFlowPointRefEoMplsPwObject"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagControl"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagVlanId"), ("CM-FACILITY-MIB", "cmEncapFlowPointCTagVlanPriority"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagControl"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagVlanId"), ("CM-FACILITY-MIB", "cmEncapFlowPointSTagVlanPriority"), ("CM-FACILITY-MIB", "cmEncapFlowPointEgressOuterTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmEncapFlowPointEgressInnerTagPrioMapEnabled"), ("CM-FACILITY-MIB", "cmEncapFlowPointRefPrioMapProfile"), ("CM-FACILITY-MIB", "cmEncapFlowPointStorageType"), ("CM-FACILITY-MIB", "cmEncapFlowPointRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEncapFlowPointGroup = cmEncapFlowPointGroup.setStatus('current')
if mibBuilder.loadTexts: cmEncapFlowPointGroup.setDescription('A collection of objects used to manage the encap flow point entry Group.')
mibBuilder.exportSymbols("CM-FACILITY-MIB", f3FlowPointCpdV2LACPDispType=f3FlowPointCpdV2LACPDispType, gps10MHzPortAssumedQL=gps10MHzPortAssumedQL, cmNetPortPcpDEDecIndex=cmNetPortPcpDEDecIndex, cmQosPolicerProfileEntry=cmQosPolicerProfileEntry, cmPortCpdProfileVlanBridgeDispType=cmPortCpdProfileVlanBridgeDispType, cmNetPortExtCombinedRateLimitEnabled=cmNetPortExtCombinedRateLimitEnabled, cmEthernetTrafficPortLpbkOuterVlanTag=cmEthernetTrafficPortLpbkOuterVlanTag, cmEthernetNetPortPppoeRxServiceName=cmEthernetNetPortPppoeRxServiceName, cmEthernetAccPortOamLocalMaxPDUSize=cmEthernetAccPortOamLocalMaxPDUSize, ccInputPortSecondaryState=ccInputPortSecondaryState, cmEthernetTrafficPortCpdV2Mac05DispType=cmEthernetTrafficPortCpdV2Mac05DispType, cmFlowGuaranteedA2NBandwidthHi=cmFlowGuaranteedA2NBandwidthHi, cmEthernetTrafficPortOamLocalMode=cmEthernetTrafficPortOamLocalMode, cmMPFlowFwdTableSizeProfileID=cmMPFlowFwdTableSizeProfileID, f3IrigOpticalOutputPortAdminState=f3IrigOpticalOutputPortAdminState, cmPrioMapV2PrioMappingCOSIndex=cmPrioMapV2PrioMappingCOSIndex, cmTrafficAclStorageType=cmTrafficAclStorageType, f3FlowPointCpdV2Mac07DispType=f3FlowPointCpdV2Mac07DispType, cmAccPortExtBcastRateLimitSpeedHi=cmAccPortExtBcastRateLimitSpeedHi, bitsPortSquelchControl=bitsPortSquelchControl, cmPrioMapV2PrioMappingCOSTable=cmPrioMapV2PrioMappingCOSTable, ccGroupEntry=ccGroupEntry, ethernetAccessPortGroup=ethernetAccessPortGroup, cmTrafficAclVlanPriorityEnabled=cmTrafficAclVlanPriorityEnabled, cmEncapFlowPointCTagControl=cmEncapFlowPointCTagControl, cmEthernetTrafficPortLowLatencyQueuingEnabled=cmEthernetTrafficPortLowLatencyQueuingEnabled, cmTrafficAclSrcIpV4AddrMask=cmTrafficAclSrcIpV4AddrMask, cmEthernetTrafficPortCpdV2NearestLLDPDispType=cmEthernetTrafficPortCpdV2NearestLLDPDispType, f3IrigRs422OutputPortEntry=f3IrigRs422OutputPortEntry, f3IrigRs422OutputPortIfIndex=f3IrigRs422OutputPortIfIndex, cmFlowCpdV2GARPDispType=cmFlowCpdV2GARPDispType, cmEthernetTrafficPortIngressSwapPriorityVIDEnabled=cmEthernetTrafficPortIngressSwapPriorityVIDEnabled, cmNetPortExpDEEncTable=cmNetPortExpDEEncTable, cmEthernetMgmtPortEntityIndex=cmEthernetMgmtPortEntityIndex, cmEthernetTrafficPortCpdV2GMRPDispType=cmEthernetTrafficPortCpdV2GMRPDispType, cmEthernetTrafficPortLpbkIndex=cmEthernetTrafficPortLpbkIndex, cmFlowPointCpdProfileELMIDispType=cmFlowPointCpdProfileELMIDispType, cmEncapFlowPointCTagVlanPriority=cmEncapFlowPointCTagVlanPriority, bits8PortGroupSecondaryState=bits8PortGroupSecondaryState, cmEthernetAccPortLinkLossFwdEnabled=cmEthernetAccPortLinkLossFwdEnabled, f3NetPortQosShaperSoamEIRHi=f3NetPortQosShaperSoamEIRHi, f3UsbWIFIDonglePortIPAddress=f3UsbWIFIDonglePortIPAddress, cmEthernetAccPortLoopbackStatus=cmEthernetAccPortLoopbackStatus, cmEthernetAccPortSfpIdentifierValue=cmEthernetAccPortSfpIdentifierValue, cmQosFlowPolicerCouplingFlag=cmQosFlowPolicerCouplingFlag, cmEthernetNetPortShapedSpeedHi=cmEthernetNetPortShapedSpeedHi, e1t1EntityIndex=e1t1EntityIndex, cmFlowCpdV2Mac0FDispType=cmFlowCpdV2Mac0FDispType, CmAclConfiguration=CmAclConfiguration, cmPortCpdProfileGARPGroupDispType=cmPortCpdProfileGARPGroupDispType, cmFlowPointCpdProfileMac0FDispType=cmFlowPointCpdProfileMac0FDispType, f3GPSReceiverPortGnssDynamicModel=f3GPSReceiverPortGnssDynamicModel, todPps16PortGroupRowStatus=todPps16PortGroupRowStatus, f3SatelliteSV=f3SatelliteSV, ethernetAccessPortJdsuExtGroup=ethernetAccessPortJdsuExtGroup, cmEthernetTrafficPortCpdV2Mac06DispType=cmEthernetTrafficPortCpdV2Mac06DispType, cmEthernetNetPortLoopbackSourceMacAddress=cmEthernetNetPortLoopbackSourceMacAddress, gps10MHzPortSquelchControl=gps10MHzPortSquelchControl, cmQosQueueProfileRowStatus=cmQosQueueProfileRowStatus, bitsPortFrameFormat=bitsPortFrameFormat, clk16PortGroupSecondaryState=clk16PortGroupSecondaryState, cmEthernetFlowPointCpdTable=cmEthernetFlowPointCpdTable, cmQosShaperCIRHi=cmQosShaperCIRHi, f3FlowPointCpdV2Mac09DispType=f3FlowPointCpdV2Mac09DispType, cmEthernetNetPortCpdV2Mac07DispType=cmEthernetNetPortCpdV2Mac07DispType, cmEncapFlowPointRefEoMplsPwObject=cmEncapFlowPointRefEoMplsPwObject, cmQosShaperV2SecondaryState=cmQosShaperV2SecondaryState, f3TimeOfDayPortSquelchQL=f3TimeOfDayPortSquelchQL, cmNetPortPcpDEEncInPriority=cmNetPortPcpDEEncInPriority, cmEthernetNetPortIndependentShaperBW=cmEthernetNetPortIndependentShaperBW, f3AclRuleDstIpv4AddressHighLimit=f3AclRuleDstIpv4AddressHighLimit, f3Usb3GDCNPINCodeAction=f3Usb3GDCNPINCodeAction, cmEthernetNetPortOamAdminState=cmEthernetNetPortOamAdminState, e1t1Table=e1t1Table, f3GPSReceiverPortElevationMask=f3GPSReceiverPortElevationMask, cmEthernetAccPortOamRemoteLinkEventsEnabled=cmEthernetAccPortOamRemoteLinkEventsEnabled, cmFlowN2AEIR=cmFlowN2AEIR, cmFlowCpdV2EfmOamDispType=cmFlowCpdV2EfmOamDispType, cmEthernetNetPortCpdV2BridgeGroupDispType=cmEthernetNetPortCpdV2BridgeGroupDispType, cmEthernetTrafficPortLoopbackTime=cmEthernetTrafficPortLoopbackTime, cmOAMFlowPointEntry=cmOAMFlowPointEntry, cmQosShaperV2IngressAverageFrameSize=cmQosShaperV2IngressAverageFrameSize, cmQosPolicerV2Entry=cmQosPolicerV2Entry, cmFlowCpdV2NearestLLDPDispType=cmFlowCpdV2NearestLLDPDispType, cmEthernetNetPortExtTable=cmEthernetNetPortExtTable, cmEthernetNetPortXdslCarrierSet=cmEthernetNetPortXdslCarrierSet, cmNetPortExtBcastRateLimitSpeedLo=cmNetPortExtBcastRateLimitSpeedLo, ieee1588EthernetPortIfIndex=ieee1588EthernetPortIfIndex, clk16PortGroupDirection=clk16PortGroupDirection, cmEthernetTrafficPortSfpVendorName=cmEthernetTrafficPortSfpVendorName, cmEthernetAccPortOamEnabled=cmEthernetAccPortOamEnabled, cmEthernetNetPortInnerVlanLoopbackMask=cmEthernetNetPortInnerVlanLoopbackMask, cmAccPortPcpDEDecIndex=cmAccPortPcpDEDecIndex, f3FlowPointCpdV2CustomerLLDPDispType=f3FlowPointCpdV2CustomerLLDPDispType, ccInputPortEntry=ccInputPortEntry, cmEthernetAccPortSfpReach=cmEthernetAccPortSfpReach, cmEthernetNetPortXgePhyType=cmEthernetNetPortXgePhyType, cmFlowCTagControl=cmFlowCTagControl, vtVcPathRxTrailTrace=vtVcPathRxTrailTrace, stsVcPathTable=stsVcPathTable, f3AclRulePriorityLowLimit=f3AclRulePriorityLowLimit, cmNetPortExtEntry=cmNetPortExtEntry, cmEthernetTrafficPortOamLocalVarRtrvsEnabled=cmEthernetTrafficPortOamLocalVarRtrvsEnabled, e1t1LineBuildOut=e1t1LineBuildOut, f3SatelliteCNO=f3SatelliteCNO, cmEthernetNetPortSfpSerialNumber=cmEthernetNetPortSfpSerialNumber, f3GPSReceiverPortGnssTOD=f3GPSReceiverPortGnssTOD, cmPsePortGroup=cmPsePortGroup, cmFlowCpdV2BPDUDispType=cmFlowCpdV2BPDUDispType, cmPortCpdProfileMac0BDispType=cmPortCpdProfileMac0BDispType, f3FpQosPolicerRank=f3FpQosPolicerRank, cmEthernetTrafficPortPlugGMetroAutoTuningMode=cmEthernetTrafficPortPlugGMetroAutoTuningMode, cmEthernetNetPortConfigSpeed=cmEthernetNetPortConfigSpeed, cmEthernetAccPortCpdV2LACPMarkerDispType=cmEthernetAccPortCpdV2LACPMarkerDispType, cmOAMFlowPointSecondaryState=cmOAMFlowPointSecondaryState, cmEthernetTrafficPortPcpDEDecEntry=cmEthernetTrafficPortPcpDEDecEntry, cmEthernetNetPortPppoeInnerVlanPriority=cmEthernetNetPortPppoeInnerVlanPriority, cmFlowA2NEIRHi=cmFlowA2NEIRHi, cmEthernetTrafficPortAdminState=cmEthernetTrafficPortAdminState, f3PulsePerSecondPortIndex=f3PulsePerSecondPortIndex, cmEthernetTrafficPortCpdV2LACPDispType=cmEthernetTrafficPortCpdV2LACPDispType, f3NetPortQosShaperAvgFrameSizeBeforeFragment=f3NetPortQosShaperAvgFrameSizeBeforeFragment, cmFlowPointCpdProfileMac03DispType=cmFlowPointCpdProfileMac03DispType, cmElineFlowCircuitName=cmElineFlowCircuitName, cmTrafficPortQosShaperAdditionalCIRHi=cmTrafficPortQosShaperAdditionalCIRHi, cmEncapFlowPointSTagVlanId=cmEncapFlowPointSTagVlanId, LocationMode=LocationMode, cmNetPortExtBcastRateLimitEnabled=cmNetPortExtBcastRateLimitEnabled, BitsPortLineType=BitsPortLineType, cmEthernetAccPortAfpType=cmEthernetAccPortAfpType, cmFlowCpdV2GMRPDispType=cmFlowCpdV2GMRPDispType, cmFlowPointWfqOutPriority=cmFlowPointWfqOutPriority, f3IrigRelayOutputPortEntityIndex=f3IrigRelayOutputPortEntityIndex, cmEthernetAccPortCpdV2BridgeReservedDispType=cmEthernetAccPortCpdV2BridgeReservedDispType, cmAccPortPcpDEEncDropEligiblePrio=cmAccPortPcpDEEncDropEligiblePrio, cmEthernetTrafficPortIngressCOSPriority=cmEthernetTrafficPortIngressCOSPriority, cmEthernetAccPortIngressCOSPriority=cmEthernetAccPortIngressCOSPriority, cmEthernetTrafficPortJdsuLoopbackSrcIp=cmEthernetTrafficPortJdsuLoopbackSrcIp, cmFlowCpdEthertype=cmFlowCpdEthertype, ieee1588EthernetPortNegotiatedSpeed=ieee1588EthernetPortNegotiatedSpeed, SynceMode=SynceMode, f3AclRuleIpv4PriorityHighLimit=f3AclRuleIpv4PriorityHighLimit, f3GPSReceiverPortSpoofingLocationDifference=f3GPSReceiverPortSpoofingLocationDifference, f3FpQosShaperStorageType=f3FpQosShaperStorageType, f3FpQosPolicerCIRMaxHi=f3FpQosPolicerCIRMaxHi, bitsPortAis=bitsPortAis, cmPortCpdProfileDtpDispType=cmPortCpdProfileDtpDispType, cmEthernetNetPortOamAdminDisposition=cmEthernetNetPortOamAdminDisposition, cmQosShaperEntry=cmQosShaperEntry, f3Usb3GDCNPortNewPinCode=f3Usb3GDCNPortNewPinCode, cmEthernetNetPortPersistentLoopbackControl=cmEthernetNetPortPersistentLoopbackControl, f3UsbWIFIDonglePortPassword=f3UsbWIFIDonglePortPassword, f3SatelliteInUse=f3SatelliteInUse, cmQosShaperStorageType=cmQosShaperStorageType, TxDeiAction=TxDeiAction, cmEthernetTrafficPortSfpTxPowerLevel=cmEthernetTrafficPortSfpTxPowerLevel, cmEthernetNetPortSyncEEnabled=cmEthernetNetPortSyncEEnabled, cmFlowPort1=cmFlowPort1, cmEthernetAccPortLoopbackConfig=cmEthernetAccPortLoopbackConfig, cmQosShaperRowStatus=cmQosShaperRowStatus, cmFlowCpdV2CustomerLLDPDispType=cmFlowCpdV2CustomerLLDPDispType, cmFacilityCompliances=cmFacilityCompliances, cmEncapFlowPointSTagVlanPriority=cmEncapFlowPointSTagVlanPriority, gps10MHzPortFrequencySource=gps10MHzPortFrequencySource, stsVcPathLoopbackTime=stsVcPathLoopbackTime, cmQosShaperV2Entry=cmQosShaperV2Entry, cmEthernetTrafficPortDiagnoseTestTime=cmEthernetTrafficPortDiagnoseTestTime, cmNetPortExpDEDropEligiblePrio=cmNetPortExpDEDropEligiblePrio, cmEthernetNetPortJDSULoopbackVlan=cmEthernetNetPortJDSULoopbackVlan, cmIngressPrioMapInPriority=cmIngressPrioMapInPriority, cmEthernetTrafficPortRemoteSfpDateOfManufacture=cmEthernetTrafficPortRemoteSfpDateOfManufacture, cmTrafficAclRulesIndex=cmTrafficAclRulesIndex, vtVcPathLoopbackTime=vtVcPathLoopbackTime, cmEthernetAccPortShapedSpeedHi=cmEthernetAccPortShapedSpeedHi, f3FlowPointCpdV2Mac0FDispType=f3FlowPointCpdV2Mac0FDispType, cmNetPortEncapPcpDEEncInPriority=cmNetPortEncapPcpDEEncInPriority, cmAccPortQosShaperCIRHi=cmAccPortQosShaperCIRHi, BitErrRate=BitErrRate, cmQosShaperV2AssociatedQueueProfile=cmQosShaperV2AssociatedQueueProfile, f3Gps10MhzPortGroup=f3Gps10MhzPortGroup, f3XdslAndPpppoeParamGroup=f3XdslAndPpppoeParamGroup, cmFlowPointAutoBandwidthConfigEnabled=cmFlowPointAutoBandwidthConfigEnabled, f3AclRuleSrcMacAddressMask=f3AclRuleSrcMacAddressMask, f3GPSReceiverPortGnssSystem=f3GPSReceiverPortGnssSystem, cmFacilityObjects=cmFacilityObjects, f3TimeOfDayPortOperationalState=f3TimeOfDayPortOperationalState, cmEthernetTrafficPortPcpDEDecInPriority=cmEthernetTrafficPortPcpDEDecInPriority, cmEthernetNetPortSfpReach=cmEthernetNetPortSfpReach, f3FpQosPolicerIndex=f3FpQosPolicerIndex, cmAccPortQosShaperDirection=cmAccPortQosShaperDirection, cmFlowPointOperationalState=cmFlowPointOperationalState, cmFlowPointEfRateThresholdHi=cmFlowPointEfRateThresholdHi, ocnStmAssumedQL=ocnStmAssumedQL, cmTrafficAclTcpUdpSrcPortMask=cmTrafficAclTcpUdpSrcPortMask, e1t1SecondaryState=e1t1SecondaryState, cmEthernetNetPortXdslControlChannel=cmEthernetNetPortXdslControlChannel, cmAccPortExtEntry=cmAccPortExtEntry, ccGroupDutyCycle=ccGroupDutyCycle, f3FpQosShaperCBS=f3FpQosShaperCBS, f3TimeOfDayPortEntityIndex=f3TimeOfDayPortEntityIndex, cmEthernetNetPortTransmitQL=cmEthernetNetPortTransmitQL, cmFlowA2NEIR=cmFlowA2NEIR, cmEthernetAccPortCpdV2GMRPDispType=cmEthernetAccPortCpdV2GMRPDispType, cmEthernetTrafficPortPlugChannelType=cmEthernetTrafficPortPlugChannelType, cmFlowA2NBroadcastRateLimitHi=cmFlowA2NBroadcastRateLimitHi, E3T3FrameFormat=E3T3FrameFormat, SignalFrequency=SignalFrequency, cmEthernetNetPortDiagnosePair1Cond=cmEthernetNetPortDiagnosePair1Cond, f3FlowPointCpdV2Mac0EDispType=f3FlowPointCpdV2Mac0EDispType, ccGroupAlias=ccGroupAlias, SciRxSsmQL=SciRxSsmQL, cmEthernetNetPortAssumedQL=cmEthernetNetPortAssumedQL, cmQosShaperCBS=cmQosShaperCBS, cmEthernetAccPortCpdV2Entry=cmEthernetAccPortCpdV2Entry, cmTrafficAclIpQosValue=cmTrafficAclIpQosValue, cmOAMFlowPointVlanMemberActionVlan=cmOAMFlowPointVlanMemberActionVlan, SfpChannelIdentifier=SfpChannelIdentifier, ccGroup=ccGroup, f3GPSReceiverPortAntennaDelayValue=f3GPSReceiverPortAntennaDelayValue, f3IrigOutputUnitPortEntityIndex=f3IrigOutputUnitPortEntityIndex, f3UsbWIFIDonglePortAccessdUsers=f3UsbWIFIDonglePortAccessdUsers, cmFlowCpdV2BridgeGroupDispType=cmFlowCpdV2BridgeGroupDispType, cmPrioMapXTagControl=cmPrioMapXTagControl, cmEthernetNetPortSfpLaserWaveLength=cmEthernetNetPortSfpLaserWaveLength, ieee1588EthernetPortAdminState=ieee1588EthernetPortAdminState, trafficGroup=trafficGroup, cmQosFlowPolicerIndex=cmQosFlowPolicerIndex, cmEthernetTrafficPortSecondaryState=cmEthernetTrafficPortSecondaryState, f3Usb3GDCNPortProviderName=f3Usb3GDCNPortProviderName, ocnStmExpectedTrailTrace=ocnStmExpectedTrailTrace, cmEthernetAccPortIfIndex=cmEthernetAccPortIfIndex, clk16PortGroupEntry=clk16PortGroupEntry, cmEthernetTrafficPortRemoteSfpVendorName=cmEthernetTrafficPortRemoteSfpVendorName, f3NetPortQosShaperWredGreenDropProbability=f3NetPortQosShaperWredGreenDropProbability, cmEthernetAccPortLaserFrequency=cmEthernetAccPortLaserFrequency, cmEthernetTrafficPortExpDEPairsAction=cmEthernetTrafficPortExpDEPairsAction, f3AclRuleGroup=f3AclRuleGroup, cmPrioMapV2IngressPrioMappingEntry=cmPrioMapV2IngressPrioMappingEntry, cmTrafficPortQosShaperEntry=cmTrafficPortQosShaperEntry, cmTrafficPortQosShaperGroup=cmTrafficPortQosShaperGroup, cmTrafficPortQosShaperOperationalState=cmTrafficPortQosShaperOperationalState, cmEthernetNetPortTrafficModel=cmEthernetNetPortTrafficModel, f3FpQosPolicerSecondaryState=f3FpQosPolicerSecondaryState, cmEthernetTrafficPortMode=cmEthernetTrafficPortMode, cmEthernetTrafficPortCpdV2Mac00DispType=cmEthernetTrafficPortCpdV2Mac00DispType, f3FpQosShaperEBS=f3FpQosShaperEBS, f3NetPortQosShaperSoamEIRLo=f3NetPortQosShaperSoamEIRLo, cmEthernetTrafficPortCombinedRateLimitEnabled=cmEthernetTrafficPortCombinedRateLimitEnabled, cmFlowA2NMulticastRateLimitLo=cmFlowA2NMulticastRateLimitLo, cmFlowCpdV2ActiveControlProtocols=cmFlowCpdV2ActiveControlProtocols, bitsPortQLModeEnabled=bitsPortQLModeEnabled, cmEgressCOSIndex=cmEgressCOSIndex, FlowConfigType=FlowConfigType, cmEthernetAccPortA2nSwapPriorityVIDEnabled=cmEthernetAccPortA2nSwapPriorityVIDEnabled)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmIngressPrioMapTable=cmIngressPrioMapTable, cmEthernetTrafficPortNegotiatedSpeed=cmEthernetTrafficPortNegotiatedSpeed, cmFlowStorageType=cmFlowStorageType, cmNetPortPrioMapTable=cmNetPortPrioMapTable, ccInputPortOperationalState=ccInputPortOperationalState, PpsPortImpedanceMode=PpsPortImpedanceMode, e3t3InsertingAIS=e3t3InsertingAIS, cmQosShaperV2OperationalState=cmQosShaperV2OperationalState, cmEthernetNetPortPppoeRxAcName=cmEthernetNetPortPppoeRxAcName, cmEthernetTrafficPortClbIndex=cmEthernetTrafficPortClbIndex, OutOfBandChannelStatus=OutOfBandChannelStatus, cmEthernetAccPortTrafficModel=cmEthernetAccPortTrafficModel, ocnStmSfpSerialNumber=ocnStmSfpSerialNumber, cmFlowPointCpdProfileLACPMarkerDispType=cmFlowPointCpdProfileLACPMarkerDispType, cmNetPortPcpDEPairTable=cmNetPortPcpDEPairTable, f3NetPortQosShaperEntry=f3NetPortQosShaperEntry, cmEthernetNetPortCpdV2GVRPDispType=cmEthernetNetPortCpdV2GVRPDispType, cmOAMFlowPointCircuitName=cmOAMFlowPointCircuitName, f3AclRulePriorityHighLimit=f3AclRulePriorityHighLimit, CmActiveControlProtocolsType=CmActiveControlProtocolsType, cmEthernetTrafficPortExtTable=cmEthernetTrafficPortExtTable, f3AclRuleDstMacAddress=f3AclRuleDstMacAddress, IrigControlField=IrigControlField, cmFlowPointCpdProfilePauseDispType=cmFlowPointCpdProfilePauseDispType, bits8PortGroupIndex=bits8PortGroupIndex, f3UsbWIFIDonglePortStorageType=f3UsbWIFIDonglePortStorageType, cmEthernetNetPortLinkLossFwdPartnerEnabled=cmEthernetNetPortLinkLossFwdPartnerEnabled, cmQosFlowPolicerRank=cmQosFlowPolicerRank, cmEthernetNetPortPppoeLcpRetryThreshold=cmEthernetNetPortPppoeLcpRetryThreshold, cmFlowAutoBandwidthConfigEnabled=cmFlowAutoBandwidthConfigEnabled, f3FlowPointCpdV2PauseDispType=f3FlowPointCpdV2PauseDispType, cmFlowPointEntry=cmFlowPointEntry, cmQosShaperWredGreenMaxQueueThreshold=cmQosShaperWredGreenMaxQueueThreshold, f3GPSReceiverPortAGC=f3GPSReceiverPortAGC, f3AclRulePriorityControl=f3AclRulePriorityControl, cmNetPortIpPrecDEDecOutPriority=cmNetPortIpPrecDEDecOutPriority, cmEthernetMgmtPortTable=cmEthernetMgmtPortTable, cmEthernetNetPortWfqSegmentationCOS=cmEthernetNetPortWfqSegmentationCOS, cmEthernetNetPortCpdV2L2PTDispType=cmEthernetNetPortCpdV2L2PTDispType, f3Usb3GDCNPortVendorName=f3Usb3GDCNPortVendorName, f3IrigOutputUnitPortType=f3IrigOutputUnitPortType, cmPortCpdProfileGARPDispType=cmPortCpdProfileGARPDispType, cmEthernetNetPortCpdV2PtpUntaggedDispType=cmEthernetNetPortCpdV2PtpUntaggedDispType, cmIngressPrioMapCOS=cmIngressPrioMapCOS, ocnStmLoopbackTime=ocnStmLoopbackTime, cmPrioMapV2PrioMappingPriIndex=cmPrioMapV2PrioMappingPriIndex, cmAccPortQosShaperCOS=cmAccPortQosShaperCOS, pethMainPseExtNonStandardPD=pethMainPseExtNonStandardPD, cmEthernetTrafficPortClbEnabled=cmEthernetTrafficPortClbEnabled, cmEthernetNetPortExpDEPairsAction=cmEthernetNetPortExpDEPairsAction, cmPortCpdProfilePagpDispType=cmPortCpdProfilePagpDispType, cmEthernetNetPortAssociatedTdmEntity=cmEthernetNetPortAssociatedTdmEntity, cmEthernetNetPortXdslDsSignalAttenuation=cmEthernetNetPortXdslDsSignalAttenuation, cmEthernetAccPortN2aSwapPriorityVIDEnabled=cmEthernetAccPortN2aSwapPriorityVIDEnabled, f3AclRuleAdminState=f3AclRuleAdminState, cmEncapFlowPointRefPrioMapProfile=cmEncapFlowPointRefPrioMapProfile, cmEthernetNetPortClbTable=cmEthernetNetPortClbTable, cmEthernetAccPortCpdEthertype=cmEthernetAccPortCpdEthertype, cmEthernetNetPortXdslDsAttainableRate=cmEthernetNetPortXdslDsAttainableRate, e3t3CBitEnable=e3t3CBitEnable, cmEthernetNetPortCpdV2LANBridgesDispType=cmEthernetNetPortCpdV2LANBridgesDispType, cmEthernetNetPortCpdV2UdldDispType=cmEthernetNetPortCpdV2UdldDispType, f3IrigRelayOutputPortSecondaryState=f3IrigRelayOutputPortSecondaryState, f3PulsePerSecondPortDelayCompensation=f3PulsePerSecondPortDelayCompensation, cmEthernetNetPortIngressCOSPriority=cmEthernetNetPortIngressCOSPriority, cmEthernetNetPortCpdMacAddressMatch=cmEthernetNetPortCpdMacAddressMatch, cmNetPortEncapPcpDEDropIneligiblePrio=cmNetPortEncapPcpDEDropIneligiblePrio, cmOAMFlowPointAdminState=cmOAMFlowPointAdminState, bits8PortGroupImpedance=bits8PortGroupImpedance, bitsPortEntry=bitsPortEntry, f3GPSReceiverPortHDOP=f3GPSReceiverPortHDOP, CmEthernetDiagAction=CmEthernetDiagAction, cmEthernetAccPortCpdV2LANBridgesDispType=cmEthernetAccPortCpdV2LANBridgesDispType, cmEthernetNetPortLaserIsTunable=cmEthernetNetPortLaserIsTunable, cmEthernetTrafficPortPcpDEEncDropEligiblePrio=cmEthernetTrafficPortPcpDEEncDropEligiblePrio, cmNetPortIpPrecDEEncInPriority=cmNetPortIpPrecDEEncInPriority, cmEthernetTrafficPortOamLocalUnidirSupportEnabled=cmEthernetTrafficPortOamLocalUnidirSupportEnabled, cmEthernetTrafficPortSfpConnectorValue=cmEthernetTrafficPortSfpConnectorValue, f3Usb3GDCNPortSecondaryState=f3Usb3GDCNPortSecondaryState, stsVcPathExpectedSignalLabel=stsVcPathExpectedSignalLabel, FlowTagControl=FlowTagControl, cmNetPortEncapPcpDEDecDropEligible=cmNetPortEncapPcpDEDecDropEligible, f3FpQosPolicerCBS=f3FpQosPolicerCBS, f3GPSReceiverPortGroup=f3GPSReceiverPortGroup, cmTrafficAclSrcIpFilterEnabled=cmTrafficAclSrcIpFilterEnabled, f3AclRuleDstPortControl=f3AclRuleDstPortControl, bits8PortGroupTable=bits8PortGroupTable, cmQosPolicerProfileCIRHi=cmQosPolicerProfileCIRHi, cmPrioMapV2PrioMappingDscpValue=cmPrioMapV2PrioMappingDscpValue, f3EthernetTrafficPortExpDEDropEligiblePrio=f3EthernetTrafficPortExpDEDropEligiblePrio, cmEthernetNetPortCpdV2PtpTaggedDispType=cmEthernetNetPortCpdV2PtpTaggedDispType, f3AclRuleSrcPortControl=f3AclRuleSrcPortControl, cmEncapFlowPointCircuitName=cmEncapFlowPointCircuitName, cmEthernetNetPortLowLatencyQueuingEnabled=cmEthernetNetPortLowLatencyQueuingEnabled, f3NetPortQosShaperOperationalState=f3NetPortQosShaperOperationalState, f3AclRuleEtherTypeControl=f3AclRuleEtherTypeControl, f3IrigOutputGroupTable=f3IrigOutputGroupTable, f3FpQosPolicerCIRLo=f3FpQosPolicerCIRLo, cmEthernetTrafficPortRemoteSfpPartNumber=cmEthernetTrafficPortRemoteSfpPartNumber, cmTrafficAclProtocolTypeEnabled=cmTrafficAclProtocolTypeEnabled, pps16PortGroupRowStatus=pps16PortGroupRowStatus, cmEthernetNetPortQLModeEnabled=cmEthernetNetPortQLModeEnabled, cmEthernetTrafficPortCpdV2PtpTaggedDispType=cmEthernetTrafficPortCpdV2PtpTaggedDispType, vtVcPathEntry=vtVcPathEntry, cmEthernetAccPortOamDiscoveryState=cmEthernetAccPortOamDiscoveryState, pps16PortGroupDelayCompensation=pps16PortGroupDelayCompensation, cmFlowCpdFilterDescr=cmFlowCpdFilterDescr, f3PulsePerSecondPortOperationalState=f3PulsePerSecondPortOperationalState, f3FlowPointCpdV2BPDUDispType=f3FlowPointCpdV2BPDUDispType, cmEthernetTrafficPortCpdV2Mac02DispType=cmEthernetTrafficPortCpdV2Mac02DispType, cmEthernetNetPortOuterTagTpid=cmEthernetNetPortOuterTagTpid, cmPseEXTGroup=cmPseEXTGroup, f3IrigOutputGroupIndex=f3IrigOutputGroupIndex, cmEthernetNetPortClbLength=cmEthernetNetPortClbLength, CcPortDutyCycle=CcPortDutyCycle, cmAccPortQosShaperWredGreenDropProbability=cmAccPortQosShaperWredGreenDropProbability, bitsPortIfIndex=bitsPortIfIndex, cmNetPortExpDEDecInPriority=cmNetPortExpDEDecInPriority, cmEthernetTrafficPortRxSsmQL=cmEthernetTrafficPortRxSsmQL, clk16PortGroupIfIndex=clk16PortGroupIfIndex, cmEthernetTrafficPortCpdV2Mac0DDispType=cmEthernetTrafficPortCpdV2Mac0DDispType, cmEncapFlowPointEntry=cmEncapFlowPointEntry, f3FlowPointCpdV2GMRPDispType=f3FlowPointCpdV2GMRPDispType, cmEthernetAccPortCpdV2VlanBridgeDispType=cmEthernetAccPortCpdV2VlanBridgeDispType, cmEthernetNetPortDeiEnable=cmEthernetNetPortDeiEnable, PrioMapControlType=PrioMapControlType, cmFlowAutoCIRPercentage=cmFlowAutoCIRPercentage, cmQosFlowPolicerCIRHi=cmQosFlowPolicerCIRHi, stsVcPathParentIfIndex=stsVcPathParentIfIndex, f3FlowPointCpdV2UdldDispType=f3FlowPointCpdV2UdldDispType, cmEthernetNetPortWfqGroupEirLo=cmEthernetNetPortWfqGroupEirLo, PlugMode=PlugMode, cmNetPortEncapPcpDEEncEntry=cmNetPortEncapPcpDEEncEntry, ethernetNetworkPortJdsuExtGroup=ethernetNetworkPortJdsuExtGroup, PolicerAlgorithmType=PolicerAlgorithmType, stsVcPathTxSignalLabel=stsVcPathTxSignalLabel, e3t3LoopbackConfig=e3t3LoopbackConfig, f3UsbWIFIDonglePortAdminState=f3UsbWIFIDonglePortAdminState, cmNetPortExpDEDecTable=cmNetPortExpDEDecTable, cmEthernetNetPortXdslModulationMode=cmEthernetNetPortXdslModulationMode, cmEthernetAccPortLoopbackTestReflectorIPv4Address=cmEthernetAccPortLoopbackTestReflectorIPv4Address, cmEthernetNetPortXdslParamTable=cmEthernetNetPortXdslParamTable, cmFlowPointElmiEvcIdentifier=cmFlowPointElmiEvcIdentifier, cmQosFlowPolicerEIRHi=cmQosFlowPolicerEIRHi, gps10MHzPortTable=gps10MHzPortTable, cmEthernetAccPortCpdV2Index=cmEthernetAccPortCpdV2Index, cmEthernetAccPortN2AVlanTrunkingEnabled=cmEthernetAccPortN2AVlanTrunkingEnabled, cmTrafficAclIpQosType=cmTrafficAclIpQosType, cmEthernetNetPortPppoeOuterVlanEtherType=cmEthernetNetPortPppoeOuterVlanEtherType, cmFlowPointBcastRateLimitSpeedLo=cmFlowPointBcastRateLimitSpeedLo, cmFlowCpdV2CiscoGroupDispType=cmFlowCpdV2CiscoGroupDispType, f3AclRuleCOS=f3AclRuleCOS, cmEthernetNetPortSfpLinkLength=cmEthernetNetPortSfpLinkLength, cmTrafficPortQosShaperAdminState=cmTrafficPortQosShaperAdminState, f3TimeOfDayPortIndex=f3TimeOfDayPortIndex, cmAccPortQosShaperBufferSize=cmAccPortQosShaperBufferSize, OCNSTMPortType=OCNSTMPortType, cmTrafficAclDstMacAddr=cmTrafficAclDstMacAddr, cmEthernetAccPortInitiateDiag=cmEthernetAccPortInitiateDiag, cmEthernetAccPortClbEntry=cmEthernetAccPortClbEntry, cmAccPortPcpDEDropEligiblePrio=cmAccPortPcpDEDropEligiblePrio, pps16PortGroupIndex=pps16PortGroupIndex, cmEthernetTrafficPortSyncEServiceUnavailableTime=cmEthernetTrafficPortSyncEServiceUnavailableTime, f3FpQosShaperBufferSize=f3FpQosShaperBufferSize, cmQosShaperV2Table=cmQosShaperV2Table, cmFlowCpdV2Mac0EDispType=cmFlowCpdV2Mac0EDispType, f3IrigOutputGroupAlias=f3IrigOutputGroupAlias, cmEthernetNetPortCpdV2LACPDispType=cmEthernetNetPortCpdV2LACPDispType, cmPortCpdProfileCdpDispType=cmPortCpdProfileCdpDispType, cmQosShaperTypeIndex=cmQosShaperTypeIndex, cmEthernetTrafficPortLaserWDMChannel=cmEthernetTrafficPortLaserWDMChannel, cmEthernetNetPortOuterVlanLoopbackMask=cmEthernetNetPortOuterVlanLoopbackMask, cmEthernetTrafficPortPcpDEPairsAction=cmEthernetTrafficPortPcpDEPairsAction, cmEthernetTrafficPortJdsuExtGroup=cmEthernetTrafficPortJdsuExtGroup, cmPortCpdProfileCustomerLLDPDispType=cmPortCpdProfileCustomerLLDPDispType, cmFlowPointCpdProfileLANBridgesDispType=cmFlowPointCpdProfileLANBridgesDispType, cmEthernetTrafficPortOamRemoteVarRtrvsEnabled=cmEthernetTrafficPortOamRemoteVarRtrvsEnabled, cmNetPortEncapPcpDEEncDropIneligiblePrio=cmNetPortEncapPcpDEEncDropIneligiblePrio, todPps16PortGroupOperationalState=todPps16PortGroupOperationalState, cmEthernetTrafficPortSyncEServiceAvailableTime=cmEthernetTrafficPortSyncEServiceAvailableTime, f3NetPortQosShaperBufferSize=f3NetPortQosShaperBufferSize, cmEthernetAccPortCpdV2NonTpmrLLDPDispType=cmEthernetAccPortCpdV2NonTpmrLLDPDispType, cmNetPortIpPrecDEEncTable=cmNetPortIpPrecDEEncTable, cmNetPortPrioMapOuterTagPriority=cmNetPortPrioMapOuterTagPriority, cmEthernetTrafficPortCpdV2GARPDispType=cmEthernetTrafficPortCpdV2GARPDispType, cmEthernetTrafficPortJDSULoopbackVlanList=cmEthernetTrafficPortJDSULoopbackVlanList, cmPrioMapV2PrioMappingPriPrioControl=cmPrioMapV2PrioMappingPriPrioControl, cmEthernetAccPortSfpName=cmEthernetAccPortSfpName, cmPrioMapV2ProfileAppliedObjEntry=cmPrioMapV2ProfileAppliedObjEntry, GMetroAutoTuningMode=GMetroAutoTuningMode, cmEthernetAccPortCpdV2CiscoGroupDispType=cmEthernetAccPortCpdV2CiscoGroupDispType, e3t3IfIndex=e3t3IfIndex, vtVcPathTrailTraceFormat=vtVcPathTrailTraceFormat, cmMPFlowCircuitName=cmMPFlowCircuitName, cmEthernetNetPortSfpHardwareRevision=cmEthernetNetPortSfpHardwareRevision, gps10MHzPortClockAccuracy=gps10MHzPortClockAccuracy, bitsPortTable=bitsPortTable, cmEthernetTrafficPortInnerVlanLoopbackMask=cmEthernetTrafficPortInnerVlanLoopbackMask, cmEthernetAccPortCpdV2PtpTaggedDispType=cmEthernetAccPortCpdV2PtpTaggedDispType, cmFlowPointVlanMemberActionVlan=cmFlowPointVlanMemberActionVlan, cmNetPortExpDeGroup=cmNetPortExpDeGroup, cmEthernetTrafficPortIngressPushPVIDEnabled=cmEthernetTrafficPortIngressPushPVIDEnabled, f3GPSReceiverPortCNOMask=f3GPSReceiverPortCNOMask, pps16PortGroupIfIndex=pps16PortGroupIfIndex, ChannelType=ChannelType, cmNetPortIpPrecDEEncEntry=cmNetPortIpPrecDEEncEntry, pps16PortGroupAdminState=pps16PortGroupAdminState, cmEthernetNetPortIndex=cmEthernetNetPortIndex, cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl=cmEthernetAccPortLoopbackTestReflectorIPv6AddressControl, f3FpQosShaperCIRLo=f3FpQosShaperCIRLo, cmEthernetNetPortOamRemoteMaxPDUSize=cmEthernetNetPortOamRemoteMaxPDUSize, cmEthernetNetPortClbEntry=cmEthernetNetPortClbEntry, cmEthernetTrafficPortDiagnoseAutoNegCond=cmEthernetTrafficPortDiagnoseAutoNegCond, ieee1588EthernetPortSecondaryState=ieee1588EthernetPortSecondaryState, ocnStmQLModeEnabled=ocnStmQLModeEnabled, f3FpQosPolicerEIRLo=f3FpQosPolicerEIRLo, CmDiagTestStatus=CmDiagTestStatus, ocnStmSfpName=ocnStmSfpName, f3PulsePerSecondPortTimeSource=f3PulsePerSecondPortTimeSource, PPSPhyInterfaceType=PPSPhyInterfaceType, cmNetPortIpPrecDEPairTable=cmNetPortIpPrecDEPairTable, cmEthernetAccPortTxDeiOuterTagType=cmEthernetAccPortTxDeiOuterTagType, f3NetPortQosShaperEBS=f3NetPortQosShaperEBS, cmEthernetNetPortMDIXType=cmEthernetNetPortMDIXType, e1t1InsertingAIS=e1t1InsertingAIS, stsVcPathExpectedTrailTrace=stsVcPathExpectedTrailTrace, bitsPortLineBuildOut=bitsPortLineBuildOut, cmFlowPolicingEnabled=cmFlowPolicingEnabled, cmEthernetTrafficPortClbDescr=cmEthernetTrafficPortClbDescr, cmEthernetNetPortDiagnoseTestTime=cmEthernetNetPortDiagnoseTestTime, f3FlowPointCpdV2UplinkFastDispType=f3FlowPointCpdV2UplinkFastDispType, e1t1LoopbackConfig=e1t1LoopbackConfig, bitsPortLineCode=bitsPortLineCode, CmEthernetSvcPortMode=CmEthernetSvcPortMode, todPps16PortGroupGroup=todPps16PortGroupGroup, cmEthernetNetPortLinkLossFwdRemoteLinkIds=cmEthernetNetPortLinkLossFwdRemoteLinkIds, cmElineFlowStorageType=cmElineFlowStorageType, cmFlowCpdV2LLDPDispType=cmFlowCpdV2LLDPDispType, cmFlowA2NMulticastRateLimitHi=cmFlowA2NMulticastRateLimitHi, cmEthernetNetPortCpdV2DtpDispType=cmEthernetNetPortCpdV2DtpDispType, cmEthernetAccPortCpdSubtypeMask=cmEthernetAccPortCpdSubtypeMask, cmAccPortQosShaperWredYellowMinQueueThreshold=cmAccPortQosShaperWredYellowMinQueueThreshold, cmEthernetTrafficPortOamRemoteOamLoopbacksSupported=cmEthernetTrafficPortOamRemoteOamLoopbacksSupported, cmFlowPointWfqQid=cmFlowPointWfqQid, cmEthernetAccPortTxPauseEnabled=cmEthernetAccPortTxPauseEnabled, f3FlowPointCpdV2Entry=f3FlowPointCpdV2Entry, ccGroupIfIndex=ccGroupIfIndex, f3FpQosPolicerCIRHi=f3FpQosPolicerCIRHi, ocnStmEntry=ocnStmEntry, cmOAMFlowPointStorageType=cmOAMFlowPointStorageType, cmAccPortExtCombinedRateLimitSpeedLo=cmAccPortExtCombinedRateLimitSpeedLo, cmEthernetTrafficPortOamRemoteLinkEventsEnabled=cmEthernetTrafficPortOamRemoteLinkEventsEnabled, cmEthernetTrafficPortDiagnosePair3Cond=cmEthernetTrafficPortDiagnosePair3Cond, cmEthernetTrafficPortIngressPopPriorityVidEnabled=cmEthernetTrafficPortIngressPopPriorityVidEnabled)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmEthernetAccPortMTU=cmEthernetAccPortMTU, cmTrafficAclTcpUdpDstPortMask=cmTrafficAclTcpUdpDstPortMask, cmAccPortExtMcastRateLimitSpeedHi=cmAccPortExtMcastRateLimitSpeedHi, f3FlowPointCpdV2LACPMarkerDispType=f3FlowPointCpdV2LACPMarkerDispType, f3Usb3GDCNPortFirmwareVersion=f3Usb3GDCNPortFirmwareVersion, cmFlowCpdIndex=cmFlowCpdIndex, cmQosPolicerV2PolicingEnabled=cmQosPolicerV2PolicingEnabled, cmNetPortExpDEDecOutPriority=cmNetPortExpDEDecOutPriority, f3FlowPointCpdV2ActiveControlProtocols=f3FlowPointCpdV2ActiveControlProtocols, f3PulsePerSecondPortAdminState=f3PulsePerSecondPortAdminState, CmLinkLossFwdSignalType=CmLinkLossFwdSignalType, ocnStmTrailTraceFormat=ocnStmTrailTraceFormat, cmAccPortQosShaperWredGreenMinQueueThreshold=cmAccPortQosShaperWredGreenMinQueueThreshold, cmEthernetAccPortEntry=cmEthernetAccPortEntry, cmAccPortPcpDEDropIneligiblePrio=cmAccPortPcpDEDropIneligiblePrio, vtVcPathBerExcThreshold=vtVcPathBerExcThreshold, cmEthernetAccPortCpdV2L2PTDispType=cmEthernetAccPortCpdV2L2PTDispType, bits8PortGroupTransmitQL=bits8PortGroupTransmitQL, cmPrioMapV2PrioMappingPriEntry=cmPrioMapV2PrioMappingPriEntry, ccInputPortAdminState=ccInputPortAdminState, cmEthernetAccPortLinkLossFwdTriggerTypes=cmEthernetAccPortLinkLossFwdTriggerTypes, f3AclRuleInnerVlanPcpHighLimit=f3AclRuleInnerVlanPcpHighLimit, bitsPortTransmitQL=bitsPortTransmitQL, cmEthernetNetPortCpdV2BridgeReservedDispType=cmEthernetNetPortCpdV2BridgeReservedDispType, ocnStmBerExcThreshold=ocnStmBerExcThreshold, cmEthernetTrafficPortCpdV2Entry=cmEthernetTrafficPortCpdV2Entry, cmEthernetAccPortLoopbackSourceMacControlEnabled=cmEthernetAccPortLoopbackSourceMacControlEnabled, cmAccPortPcpDEEncInPriority=cmAccPortPcpDEEncInPriority, cmEthernetAccPortCpdV2SSMDispType=cmEthernetAccPortCpdV2SSMDispType, cmNetPortIpPrecDEPairIndex=cmNetPortIpPrecDEPairIndex, cmEthernetNetPortCpdEntry=cmEthernetNetPortCpdEntry, cmEthernetAccPortCpdV2LLDPDispType=cmEthernetAccPortCpdV2LLDPDispType, cmEthernetTrafficPortPcpDEPairEntry=cmEthernetTrafficPortPcpDEPairEntry, f3AclRuleTcpFlags=f3AclRuleTcpFlags, f3Usb3GDCNPortIndex=f3Usb3GDCNPortIndex, cmEthernetTrafficPortCpdV2CdpDispType=cmEthernetTrafficPortCpdV2CdpDispType, cmEthernetAccPortOamLocalUnidirSupportEnabled=cmEthernetAccPortOamLocalUnidirSupportEnabled, cmAccPortPcpDEDecInPriority=cmAccPortPcpDEDecInPriority, SciSignalDirection=SciSignalDirection, cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds=cmEthernetTrafficPortLinkLossFwdRxRLDLinkIds, cmEthernetNetPortOamRemoteMacAddress=cmEthernetNetPortOamRemoteMacAddress, cmFlowCpdV2Index=cmFlowCpdV2Index, cmAccPortPcpDEPairIndex=cmAccPortPcpDEPairIndex, cmNetPortEncapPcpDEPairIndex=cmNetPortEncapPcpDEPairIndex, cmEthernetAccPortJDSULoopbackVlan=cmEthernetAccPortJDSULoopbackVlan, vtVcPathTxTrailTrace=vtVcPathTxTrailTrace, cmEthernetTrafficPortCpdV2PagpDispType=cmEthernetTrafficPortCpdV2PagpDispType, cmEthernetTrafficPortRemoteSfpHardwareRevision=cmEthernetTrafficPortRemoteSfpHardwareRevision, cmEthernetNetPortLoopbackBlockingEnabled=cmEthernetNetPortLoopbackBlockingEnabled, cmEthernetNetPortDiagnoseTestStatus=cmEthernetNetPortDiagnoseTestStatus, f3IrigRelayOutputPortTable=f3IrigRelayOutputPortTable, CmOamMode=CmOamMode, cmFlowPointCpdProfileMac01DispType=cmFlowPointCpdProfileMac01DispType, f3FpQosShaperAdminState=f3FpQosShaperAdminState, cmEthernetTrafficPortEgressVlanTrunkingEnabled=cmEthernetTrafficPortEgressVlanTrunkingEnabled, cmEthernetTrafficPortEgressPopPVIDEnabled=cmEthernetTrafficPortEgressPopPVIDEnabled, cmEthernetTrafficPortOamLocalMaxPDUSize=cmEthernetTrafficPortOamLocalMaxPDUSize, cmQosShaperBufferSize=cmQosShaperBufferSize, cmEthernetNetPortInnerVlanLoopback3=cmEthernetNetPortInnerVlanLoopback3, BitsPortLineCode=BitsPortLineCode, cmEthernetAccPortCpdIndex=cmEthernetAccPortCpdIndex, e1t1Index=e1t1Index, f3Usb3GDCNPortNetMask=f3Usb3GDCNPortNetMask, f3EthernetTrafficPortExpDEPairTable=f3EthernetTrafficPortExpDEPairTable, cmQosFlowPolicerPolicingEnabled=cmQosFlowPolicerPolicingEnabled, PPPoEConnectionStatus=PPPoEConnectionStatus, cmPrioMapV2PrioMappingEncapInnerTagPriority=cmPrioMapV2PrioMappingEncapInnerTagPriority, f3GPSReceiverPortNumTrackingSatellites=f3GPSReceiverPortNumTrackingSatellites, cmFlowPointCTagVlanPriority=cmFlowPointCTagVlanPriority, cmEthernetTrafficPortInitiateDiag=cmEthernetTrafficPortInitiateDiag, cmEthernetAccPortRxPauseEnabled=cmEthernetAccPortRxPauseEnabled, cmEthernetNetPortCpdV2LACPMarkerDispType=cmEthernetNetPortCpdV2LACPMarkerDispType, cmEthernetNetPortNegotiatedSpeed=cmEthernetNetPortNegotiatedSpeed, cmEthernetTrafficPortWfqGroupEirHi=cmEthernetTrafficPortWfqGroupEirHi, cmEthernetAccPortLaserIsTunable=cmEthernetAccPortLaserIsTunable, cmFlowCpdV2Mac07DispType=cmFlowCpdV2Mac07DispType, cmFlowA2NCombinedRateLimitControl=cmFlowA2NCombinedRateLimitControl, f3NetPortQosShaperIndex=f3NetPortQosShaperIndex, cmAccPortPcpDEPairEntry=cmAccPortPcpDEPairEntry, cmEthernetTrafficPortOamRemoteUnidirSupportEnabled=cmEthernetTrafficPortOamRemoteUnidirSupportEnabled, cmEthernetAccPortOperationalState=cmEthernetAccPortOperationalState, f3SatelliteAzimuth=f3SatelliteAzimuth, cmEthernetTrafficPortCpdV2Mac0CDispType=cmEthernetTrafficPortCpdV2Mac0CDispType, cmFlowCpdMacAddressMask=cmFlowCpdMacAddressMask, cmNetPortExtTable=cmNetPortExtTable, ocnStmInsertingAIS=ocnStmInsertingAIS, f3NetPortQosShaperWredGreenMinQueueThreshold=f3NetPortQosShaperWredGreenMinQueueThreshold, cmFlowRefN2APrioMapProfile=cmFlowRefN2APrioMapProfile, cmPortCpdProfileCiscoGroupDispType=cmPortCpdProfileCiscoGroupDispType, cmFlowCpdV2ELMIDispType=cmFlowCpdV2ELMIDispType, cmNetPortIpPrecDEEncDropEligiblePrio=cmNetPortIpPrecDEEncDropEligiblePrio, UsbOperationalMode=UsbOperationalMode, f3UsbWIFIDonglePortWIFIAllocatedIPEnd=f3UsbWIFIDonglePortWIFIAllocatedIPEnd, cmEthernetNetPortOamRemoteOamLoopbacksSupported=cmEthernetNetPortOamRemoteOamLoopbacksSupported, BitsPortImpedanceMode=BitsPortImpedanceMode, PcpDEEncType=PcpDEEncType, cmEthernetAccPortWfqGroupCOS=cmEthernetAccPortWfqGroupCOS, cmEthernetTrafficPortLinkLossFwdDelay=cmEthernetTrafficPortLinkLossFwdDelay, cmFlowN2ACOSPriorityTagType=cmFlowN2ACOSPriorityTagType, cmEthernetAccPortOamRemoteUnidirSupportEnabled=cmEthernetAccPortOamRemoteUnidirSupportEnabled, cmEthernetTrafficPortPcpDEDropIneligiblePrio=cmEthernetTrafficPortPcpDEDropIneligiblePrio, stsVcPathGroup=stsVcPathGroup, cmEthernetTrafficPortCpdEntry=cmEthernetTrafficPortCpdEntry, cmEthernetTrafficPortRemoteSfpLinkLength=cmEthernetTrafficPortRemoteSfpLinkLength, cmQosPolicerProfileCBS=cmQosPolicerProfileCBS, cmPortCpdProfilePvstpPlusDispType=cmPortCpdProfilePvstpPlusDispType, cmNetPortExpDEDecIndex=cmNetPortExpDEDecIndex, cmEthernetNetPortXdslVdslProfile=cmEthernetNetPortXdslVdslProfile, cmEthernetTrafficPortBcastRateLimitSpeedHi=cmEthernetTrafficPortBcastRateLimitSpeedHi, cmAccPortQosShaperSoamEIRLo=cmAccPortQosShaperSoamEIRLo, cmEthernetNetPortLinkLossFwdLocalLinkId=cmEthernetNetPortLinkLossFwdLocalLinkId, cmEthernetAccPortCpdV2CustomerLLDPDispType=cmEthernetAccPortCpdV2CustomerLLDPDispType, cmEthernetTrafficPortPriorityVlanId=cmEthernetTrafficPortPriorityVlanId, cmPortCpdProfileBridgeReservedDispType=cmPortCpdProfileBridgeReservedDispType, vtVcPathLoopbackConfig=vtVcPathLoopbackConfig, cmEthernetAccPortLinkLossFwdActive=cmEthernetAccPortLinkLossFwdActive, cmFlowCpdV2IslDispType=cmFlowCpdV2IslDispType, todPps16PortGroupAlias=todPps16PortGroupAlias, cmEthernetTrafficPortCpdV2CiscoGroupDispType=cmEthernetTrafficPortCpdV2CiscoGroupDispType, f3IrigRelayOutputPortAdminState=f3IrigRelayOutputPortAdminState, cmPortCpdProfileVtpDispType=cmPortCpdProfileVtpDispType, cmEthernetTrafficPortCpdV2DtpDispType=cmEthernetTrafficPortCpdV2DtpDispType, ccInputPortIndex=ccInputPortIndex, cmAccPortPcpDEEncIndex=cmAccPortPcpDEEncIndex, e1t1TimingDomain=e1t1TimingDomain, cmEthernetTrafficPortJDSULoopbackVlan=cmEthernetTrafficPortJDSULoopbackVlan, PoEStatus=PoEStatus, PcpDEPairsAction=PcpDEPairsAction, cmEthernetAccPortDiagnoseResult=cmEthernetAccPortDiagnoseResult, cmFlowAction=cmFlowAction, cmEthernetNetPortCpdEthertype=cmEthernetNetPortCpdEthertype, cmTrafficAclSrcIpV6Addr=cmTrafficAclSrcIpV6Addr, cmFlowA2NCIRHi=cmFlowA2NCIRHi, cmFlowPointAclNoMatchDisposition=cmFlowPointAclNoMatchDisposition, f3Usb3GDCNPortMTU=f3Usb3GDCNPortMTU, f3Usb3GDCNPortSpeed=f3Usb3GDCNPortSpeed, cmEthernetNetPortCpdV2Mac0CDispType=cmEthernetNetPortCpdV2Mac0CDispType, cmEthernetTrafficPortRxDeiAction=cmEthernetTrafficPortRxDeiAction, cmFlowPointIngressUntaggedFrameEnabled=cmFlowPointIngressUntaggedFrameEnabled, stsVcPathInsertingAIS=stsVcPathInsertingAIS, cmFlowCpdV2Mac0ADispType=cmFlowCpdV2Mac0ADispType, cmPortCpdProfileNearestLLDPDispType=cmPortCpdProfileNearestLLDPDispType, cmEthernetTrafficPortBcastRateLimitSpeedLo=cmEthernetTrafficPortBcastRateLimitSpeedLo, f3PulsePerSecondPortTable=f3PulsePerSecondPortTable, cmFlowConfigType=cmFlowConfigType, cmFacilityCompliance=cmFacilityCompliance, pps16PortGroupTable=pps16PortGroupTable, cmEthernetTrafficPortDeleteEntitiesAction=cmEthernetTrafficPortDeleteEntitiesAction, todPps16PortGroupTODSource=todPps16PortGroupTODSource, cmEthernetTrafficPortCpdV2LACPMarkerDispType=cmEthernetTrafficPortCpdV2LACPMarkerDispType, cmNetPortPcpDEEncTable=cmNetPortPcpDEEncTable, cmAccPortExtMcastRateLimitEnabled=cmAccPortExtMcastRateLimitEnabled, stsVcPathIfIndex=stsVcPathIfIndex, vtVcPathIndex=vtVcPathIndex, ShapingType=ShapingType, cmEthernetAccPortCpdV2PtpUntaggedDispType=cmEthernetAccPortCpdV2PtpUntaggedDispType, XDSLMode=XDSLMode, cmEthernetTrafficPortSfpIdentifierValue=cmEthernetTrafficPortSfpIdentifierValue, cmFlowCpdTable=cmFlowCpdTable, cmEthernetNetPortSecondaryState=cmEthernetNetPortSecondaryState, f3PulsePerSecondPortEntityIndex=f3PulsePerSecondPortEntityIndex, cmFlowMaximumA2NBandwidthLo=cmFlowMaximumA2NBandwidthLo, cmEthernetAccPortLinkLossFwdLocalLinkId=cmEthernetAccPortLinkLossFwdLocalLinkId, f3Usb3GDCNPortIMSI=f3Usb3GDCNPortIMSI, cmFlowPointWfqSegmentationCOS=cmFlowPointWfqSegmentationCOS, cmElineFlowFP2=cmElineFlowFP2, TODOutputFormat=TODOutputFormat, cmFlowN2NForwardingEnabled=cmFlowN2NForwardingEnabled, cmEthernetNetPortJumboFramesEnabled=cmEthernetNetPortJumboFramesEnabled, cmFlowPointCircuitName=cmFlowPointCircuitName, f3GPSReceiverPortSelfSurveyPeriod=f3GPSReceiverPortSelfSurveyPeriod, cmPortCpdProfilePauseDispType=cmPortCpdProfilePauseDispType, cmQosShaperWredYellowMinQueueThreshold=cmQosShaperWredYellowMinQueueThreshold, cmFlowPointCpdProfileName=cmFlowPointCpdProfileName, cmQosPolicerProfileColorMode=cmQosPolicerProfileColorMode, f3IrigOpticalOutputPortIndex=f3IrigOpticalOutputPortIndex, cmPortCpdProfileMac05DispType=cmPortCpdProfileMac05DispType, cmNetPortExpDEEncIndex=cmNetPortExpDEEncIndex, cmPortCpdProfileELMIDispType=cmPortCpdProfileELMIDispType, cmAccPortQosShaperEIRLo=cmAccPortQosShaperEIRLo, cmEthernetNetPortWfqGroupCOS=cmEthernetNetPortWfqGroupCOS, cmEthernetAccPortCpdV2Mac00DispType=cmEthernetAccPortCpdV2Mac00DispType, cmEthernetTrafficPortPcpDEDecIndex=cmEthernetTrafficPortPcpDEDecIndex, cmFlowPolicingControl=cmFlowPolicingControl, BitsFrameFormat=BitsFrameFormat, f3AclRuleProtocolNumber=f3AclRuleProtocolNumber, cmEthernetTrafficPortPcpDEEncIndex=cmEthernetTrafficPortPcpDEEncIndex, cmEthernetTrafficPortPcpDEDecOutPriority=cmEthernetTrafficPortPcpDEDecOutPriority, cmEthernetTrafficPortOuterVlanLoopback3=cmEthernetTrafficPortOuterVlanLoopback3, cmQosFlowPolicerCIRLo=cmQosFlowPolicerCIRLo, cmPrioMapV2PrioMappingCOSInnerTagPri=cmPrioMapV2PrioMappingCOSInnerTagPri, f3UsbWIFIDonglePortSecondaryState=f3UsbWIFIDonglePortSecondaryState, e3t3OperationalState=e3t3OperationalState, cmEthernetNetPortCpdV2PauseDispType=cmEthernetNetPortCpdV2PauseDispType, cmFlowPointCpdProfileEntry=cmFlowPointCpdProfileEntry, cmEthernetNetPortCpdV2Mac0DDispType=cmEthernetNetPortCpdV2Mac0DDispType, cmEthernetNetPortCpdMacAddressMask=cmEthernetNetPortCpdMacAddressMask, cmFlowCpdV2L2PTDispType=cmFlowCpdV2L2PTDispType, cmQosFlowPolicerEIRMaxHi=cmQosFlowPolicerEIRMaxHi, cmEthernetTrafficPortLoopbackSwapSADA=cmEthernetTrafficPortLoopbackSwapSADA, cmEthernetAccPortPcpDEEncType=cmEthernetAccPortPcpDEEncType, cmPrioMapV2ProfileAppliedObjTable=cmPrioMapV2ProfileAppliedObjTable, AclRuleOperation=AclRuleOperation, cmFlowPointSTagVlanId=cmFlowPointSTagVlanId, cmNetPortExpDEEncInPriority=cmNetPortExpDEEncInPriority, networkElementTMParamsEntry=networkElementTMParamsEntry, cmQosPolicerProfileEBS=cmQosPolicerProfileEBS, bitsPortOperationalState=bitsPortOperationalState, ocnStmSfpLaserWaveLengthPicometer=ocnStmSfpLaserWaveLengthPicometer, f3FpQosPolicerTable=f3FpQosPolicerTable, cmEthernetMgmtPortMediaType=cmEthernetMgmtPortMediaType, cmAccPortQosShaperWredYellowDropProbability=cmAccPortQosShaperWredYellowDropProbability, cmElineFlowRowStatus=cmElineFlowRowStatus, cmFlowSTagControl=cmFlowSTagControl, cmPortCpdProfileLACPMarkerDispType=cmPortCpdProfileLACPMarkerDispType, PPSGenCondition=PPSGenCondition, cmFlowPointSplitHorizonGroupOID=cmFlowPointSplitHorizonGroupOID, cmFlowCTagMatchRxPrio=cmFlowCTagMatchRxPrio, cmPortCpdProfileMac0DDispType=cmPortCpdProfileMac0DDispType, cmOAMFlowPointOperationalState=cmOAMFlowPointOperationalState, cmFlowIndependentA2NShaperBW=cmFlowIndependentA2NShaperBW, e3t3T3Channelized=e3t3T3Channelized, cmFlowA2NShapingType=cmFlowA2NShapingType, sciPortOperationalState=sciPortOperationalState, cmEthernetTrafficPortPcpDEEncType=cmEthernetTrafficPortPcpDEEncType, cmQosPolicerV2Index=cmQosPolicerV2Index, cmEthernetNetPortMediaType=cmEthernetNetPortMediaType, cmFlowPointCpdProfileGARPDispType=cmFlowPointCpdProfileGARPDispType, cmTrafficAclRulesEntry=cmTrafficAclRulesEntry, cmEthernetTrafficPortEgressPopPriorityVidEnabled=cmEthernetTrafficPortEgressPopPriorityVidEnabled, pps16PortGroupEntry=pps16PortGroupEntry, cmEthernetAccPortCpdV2Mac0BDispType=cmEthernetAccPortCpdV2Mac0BDispType, cmEthernetTrafficPortLpbkInnerVlanTag=cmEthernetTrafficPortLpbkInnerVlanTag, ccInputPortAlias=ccInputPortAlias, cmEthernetTrafficPortOuterTagTpid=cmEthernetTrafficPortOuterTagTpid, f3FlowPointCpdV2Mac03DispType=f3FlowPointCpdV2Mac03DispType, stsVcPathRxSignalLabel=stsVcPathRxSignalLabel, cmEthernetNetPortJdsuExtEntry=cmEthernetNetPortJdsuExtEntry, gps10MHzPortSecondaryState=gps10MHzPortSecondaryState, cmQosShaperSoamEIRLo=cmQosShaperSoamEIRLo, f3AclRuleDstMacAddressControl=f3AclRuleDstMacAddressControl, cmEthernetNetPortDiagnosePair2Cond=cmEthernetNetPortDiagnosePair2Cond, DHCPType=DHCPType, cmPrioMapV2IngressPrioMappingGroup=cmPrioMapV2IngressPrioMappingGroup, cmTrafficAclDstMacAddrEnabled=cmTrafficAclDstMacAddrEnabled, cmPortCpdProfileLACPDispType=cmPortCpdProfileLACPDispType, cmNetPortExpDEDecDropEligible=cmNetPortExpDEDecDropEligible, cmFlowCOS=cmFlowCOS, f3UsbWIFIDonglePortRowStatus=f3UsbWIFIDonglePortRowStatus, cmEthernetNetPortEntityIndex=cmEthernetNetPortEntityIndex, cmFlowPointCpdProfileVlanBridgeDispType=cmFlowPointCpdProfileVlanBridgeDispType, cmEthernetTrafficPortCpdV2BridgeReservedDispType=cmEthernetTrafficPortCpdV2BridgeReservedDispType, f3FpQosShaperSecondaryState=f3FpQosShaperSecondaryState, f3FpQosShaperRowStatus=f3FpQosShaperRowStatus)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmNetPortExtBcastRateLimitSpeedHi=cmNetPortExtBcastRateLimitSpeedHi, cmEthernetTrafficPortPlugType=cmEthernetTrafficPortPlugType, cmEthernetAccPortCpdV2GARPGroupDispType=cmEthernetAccPortCpdV2GARPGroupDispType, cmTrafficPortQosShaperAdditionalCIRLo=cmTrafficPortQosShaperAdditionalCIRLo, ieee1588EthernetPortTable=ieee1588EthernetPortTable, cmEthernetAccPortCpdV2EfmOamDispType=cmEthernetAccPortCpdV2EfmOamDispType, cmEthernetTrafficPortLoopbackTestReflectorIPv4Address=cmEthernetTrafficPortLoopbackTestReflectorIPv4Address, f3PulsePerSecondPortTODSource=f3PulsePerSecondPortTODSource, f3Usb3GDCNPortSIMStatus=f3Usb3GDCNPortSIMStatus, f3FlowPointCpdV2Mac04DispType=f3FlowPointCpdV2Mac04DispType, UsbDCNMobileNetworkType=UsbDCNMobileNetworkType, cmTrafficAclDstIpFilterEnabled=cmTrafficAclDstIpFilterEnabled, cmEthernetTrafficPortCpdV2IslDispType=cmEthernetTrafficPortCpdV2IslDispType, cmEthernetTrafficPortDiagnoseEfmLpbkCond=cmEthernetTrafficPortDiagnoseEfmLpbkCond, cmTrafficPortQosShaperStorageType=cmTrafficPortQosShaperStorageType, cmEthernetTrafficPortLoopbackSourceMacControlEnabled=cmEthernetTrafficPortLoopbackSourceMacControlEnabled, cmEthernetTrafficPortEgressSwapPriorityVIDEnabled=cmEthernetTrafficPortEgressSwapPriorityVIDEnabled, cmAccPortQosShaperWredGreenMaxQueueThreshold=cmAccPortQosShaperWredGreenMaxQueueThreshold, cmFlowA2NCIR=cmFlowA2NCIR, cmEthernetNetPortOuterVlanLoopback3=cmEthernetNetPortOuterVlanLoopback3, e3t3Entry=e3t3Entry, cmEthernetTrafficPortCpdV2Mac0ADispType=cmEthernetTrafficPortCpdV2Mac0ADispType, f3NetPortQosShaperWredGreenMaxQueueThreshold=f3NetPortQosShaperWredGreenMaxQueueThreshold, cmEthernetTrafficPortPcpDEEncDropIneligiblePrio=cmEthernetTrafficPortPcpDEEncDropIneligiblePrio, e1t1LoopbackTime=e1t1LoopbackTime, cmEthernetNetPortOamLocalLinkEventsEnabled=cmEthernetNetPortOamLocalLinkEventsEnabled, cmEthernetTrafficPortSfpSerialNumber=cmEthernetTrafficPortSfpSerialNumber, stsVcPathLoopbackStatus=stsVcPathLoopbackStatus, cmEthernetNetPortCpdV2PortAuthenDispType=cmEthernetNetPortCpdV2PortAuthenDispType, cmEthernetNetPortClbDescr=cmEthernetNetPortClbDescr, cmFlowRefPrioMapProfile=cmFlowRefPrioMapProfile, PpsPolarity=PpsPolarity, cmFlowCpdV2Mac01DispType=cmFlowCpdV2Mac01DispType, cmTrafficPortQosShaperCIRHi=cmTrafficPortQosShaperCIRHi, f3UsbWIFIDonglePortwWIFIIPNetMask=f3UsbWIFIDonglePortwWIFIIPNetMask, f3NetPortQosShaperSoamCIRLo=f3NetPortQosShaperSoamCIRLo, f3AclRuleDstIpv4AddressLowLimit=f3AclRuleDstIpv4AddressLowLimit, cmEthernetTrafficPortMediaTypeAutoSelected=cmEthernetTrafficPortMediaTypeAutoSelected, cmEthernetNetPortLinkLossFwdSignalType=cmEthernetNetPortLinkLossFwdSignalType, cmMPFlowMemberEntry=cmMPFlowMemberEntry, f3Usb3GDCNPortRedialTimer=f3Usb3GDCNPortRedialTimer, cmTrafficAclRscAllocation=cmTrafficAclRscAllocation, cmQosShaperV2ActualCIR=cmQosShaperV2ActualCIR, cmNetPortExtMcastRateLimitEnabled=cmNetPortExtMcastRateLimitEnabled, cmEthernetTrafficPortDiagnoseTestStatus=cmEthernetTrafficPortDiagnoseTestStatus, cmNetPortIpPrecDEDecDropEligible=cmNetPortIpPrecDEDecDropEligible, ocnStmLoopbackConfig=ocnStmLoopbackConfig, cmPrioMapV2ProfileDefaultCos=cmPrioMapV2ProfileDefaultCos, CmFlowType=CmFlowType, cmEthernetAccPortLoopbackDestMacControlEnabled=cmEthernetAccPortLoopbackDestMacControlEnabled, bits8PortGroupSaBitDesignation=bits8PortGroupSaBitDesignation, cmEthernetNetPortDiagnoseAutoNegCond=cmEthernetNetPortDiagnoseAutoNegCond, f3GPSReceiverPortPPSGenCondition=f3GPSReceiverPortPPSGenCondition, cmFlowN2AShapingType=cmFlowN2AShapingType, cmEthernetAccPortPrioMapMode=cmEthernetAccPortPrioMapMode, cmEthernetAccPortSfpVendorName=cmEthernetAccPortSfpVendorName, cmEthernetNetPortClbEnabled=cmEthernetNetPortClbEnabled, cmEthernetNetPortDiagnosticMacAddress=cmEthernetNetPortDiagnosticMacAddress, f3AclRuleDstIpv6AddressControl=f3AclRuleDstIpv6AddressControl, sciPortTable=sciPortTable, pethPsePortExtAvailablePowerLevel=pethPsePortExtAvailablePowerLevel, cmQosShaperV2EIRLo=cmQosShaperV2EIRLo, cmEthernetTrafficPortAfpType=cmEthernetTrafficPortAfpType, cmFlowN2ARateLimitingEnabled=cmFlowN2ARateLimitingEnabled, cmEthernetTrafficPortTxDeiAction=cmEthernetTrafficPortTxDeiAction, cmEthernetTrafficPortMcastRateLimitSpeedHi=cmEthernetTrafficPortMcastRateLimitSpeedHi, cmFlowCpdMacAddressMatch=cmFlowCpdMacAddressMatch, cmOAMFlowPointIndex=cmOAMFlowPointIndex, ocnStmSfpDateOfManufacture=ocnStmSfpDateOfManufacture, cmNetPortPcpDEEncDropIneligiblePrio=cmNetPortPcpDEEncDropIneligiblePrio, f3GPSReceiverPortFailureSuspendTime=f3GPSReceiverPortFailureSuspendTime, cmEthernetNetPortXdslStatus=cmEthernetNetPortXdslStatus, cmFlowCpdV2Mac09DispType=cmFlowCpdV2Mac09DispType, cmElineFlowAdminState=cmElineFlowAdminState, ocnStmIfIndex=ocnStmIfIndex, bits8PortGroupClkIfEnabledPorts=bits8PortGroupClkIfEnabledPorts, cmEthernetTrafficPortPcpDEEncTable=cmEthernetTrafficPortPcpDEEncTable, f3PulsePerSecondPortEntry=f3PulsePerSecondPortEntry, VDSLProfileFields=VDSLProfileFields, cmQosPolicerProfileStorageType=cmQosPolicerProfileStorageType, f3UsbWIFIDonglePortTable=f3UsbWIFIDonglePortTable, cmFlowCpdV2Mac05DispType=cmFlowCpdV2Mac05DispType, f3IrigRs422OutputPortOperationalState=f3IrigRs422OutputPortOperationalState, vtVcPathBerDegThreshold=vtVcPathBerDegThreshold, f3GPSReceiverPortPDOP=f3GPSReceiverPortPDOP, clk16PortGroupGroup=clk16PortGroupGroup, cmNetPortPcpDEDropIneligiblePrio=cmNetPortPcpDEDropIneligiblePrio, f3GPSReceiverPortVDOP=f3GPSReceiverPortVDOP, stsVcPathTxTrailTrace=stsVcPathTxTrailTrace, bitsPortEntityIndex=bitsPortEntityIndex, cmTrafficAclProfileIndex=cmTrafficAclProfileIndex, cmEthernetNetPortTxDeiAction=cmEthernetNetPortTxDeiAction, cmTrafficAclProfileRowStatus=cmTrafficAclProfileRowStatus, cmFlowHCOSMgmtEnabled=cmFlowHCOSMgmtEnabled, cmPrioMapV2ProfileTable=cmPrioMapV2ProfileTable, cmFlowPointDefaultMemberEnabled=cmFlowPointDefaultMemberEnabled, cmFlowPointFrameFwdEnabled=cmFlowPointFrameFwdEnabled, f3IrigOpticalOutputPortTimeCode=f3IrigOpticalOutputPortTimeCode, cmEthernetTrafficPortRelatedVCG=cmEthernetTrafficPortRelatedVCG, pethMainPseEXTTable=pethMainPseEXTTable, cmEthernetNetPortDiagnosePair4Cond=cmEthernetNetPortDiagnosePair4Cond, cmEthernetTrafficPortQLModeEnabled=cmEthernetTrafficPortQLModeEnabled, cmEthernetNetPortXdslAnnex=cmEthernetNetPortXdslAnnex, ethernetNetworkPortGroup=ethernetNetworkPortGroup, cmMPFlowEntry=cmMPFlowEntry, cmQosFlowPolicerStorageType=cmQosFlowPolicerStorageType, cmFlowCpdV2UdldDispType=cmFlowCpdV2UdldDispType, cmFlowPointBcastRateLimitSpeedHi=cmFlowPointBcastRateLimitSpeedHi, cmQosShaperCOS=cmQosShaperCOS, cmFlowPointUsePortPrioMapProfile=cmFlowPointUsePortPrioMapProfile, cmEthernetTrafficPortAssociatedCpdProfile=cmEthernetTrafficPortAssociatedCpdProfile, cmNetPortEncapPcpDEDecTable=cmNetPortEncapPcpDEDecTable, cmEthernetAccPortSfpLinkLength=cmEthernetAccPortSfpLinkLength, cmEthernetAccPortN2APopPVIDEnabled=cmEthernetAccPortN2APopPVIDEnabled, cmNetPortPcpDEDecDropEligible=cmNetPortPcpDEDecDropEligible, f3AclRuleInnerVlanVIDHighLimit=f3AclRuleInnerVlanVIDHighLimit, sciPortRxSsmQL=sciPortRxSsmQL, e1t1OperationalState=e1t1OperationalState, f3IrigOutputUnitPortIndex=f3IrigOutputUnitPortIndex, cmQosShaperAvgFrameSizeBeforeFragment=cmQosShaperAvgFrameSizeBeforeFragment, cmQosShaperSoamCIRHi=cmQosShaperSoamCIRHi, cmFlowIndex=cmFlowIndex, gps10MHzPortAlias=gps10MHzPortAlias, cmQosPolicerProfileRowStatus=cmQosPolicerProfileRowStatus, cmTrafficAclVlanIdEnabled=cmTrafficAclVlanIdEnabled, cmFlowPointCpdProfileEfmOamDispType=cmFlowPointCpdProfileEfmOamDispType, cmEthernetNetPortPcpDEPairsAction=cmEthernetNetPortPcpDEPairsAction, f3Usb3GDCNPortConfirmPinCode=f3Usb3GDCNPortConfirmPinCode, AclNoMatchDispositionType=AclNoMatchDispositionType, cmFlowWfqGroupEirLo=cmFlowWfqGroupEirLo, f3GPSReceiverPortCoordinateLongitude=f3GPSReceiverPortCoordinateLongitude, f3EthernetTrafficPortExpDEDecEntry=f3EthernetTrafficPortExpDEDecEntry, cmEthernetTrafficPortExpectedQL=cmEthernetTrafficPortExpectedQL, cmEthernetTrafficPortCombinedRateLimitSpeedHi=cmEthernetTrafficPortCombinedRateLimitSpeedHi, f3IrigOutputUnitPortIfIndex=f3IrigOutputUnitPortIfIndex, cmEthernetAccPortCpdV2PauseDispType=cmEthernetAccPortCpdV2PauseDispType, cmEthernetTrafficPortCpdV2PvstpPlusDispType=cmEthernetTrafficPortCpdV2PvstpPlusDispType, cmFlowCpdV2Entry=cmFlowCpdV2Entry, cmEthernetAccPortOuterVlanLoopback2=cmEthernetAccPortOuterVlanLoopback2, cmFlowPointGuaranteedBWHi=cmFlowPointGuaranteedBWHi, cmFlowPointRowStatus=cmFlowPointRowStatus, f3NetPortQosShaperSoamCIRHi=f3NetPortQosShaperSoamCIRHi, MultiplexingStructure=MultiplexingStructure, f3GPSReceiverPortSecondaryState=f3GPSReceiverPortSecondaryState, cmEthernetAccPortTable=cmEthernetAccPortTable, cmPethPsePortExtIndex=cmPethPsePortExtIndex, bits8PortGroupSquelchQL=bits8PortGroupSquelchQL, cmEthernetAccPortAutoDiagEnabled=cmEthernetAccPortAutoDiagEnabled, f3GPSReceiverPortSatMin2Threshold=f3GPSReceiverPortSatMin2Threshold, f3NetPortQosShaperWfqWeight=f3NetPortQosShaperWfqWeight, cmFlowPointEgressInnerTagPrioMapEnabled=cmFlowPointEgressInnerTagPrioMapEnabled, cmAccPortQosShaperOperationalState=cmAccPortQosShaperOperationalState, bitsPortAssumedQL=bitsPortAssumedQL, cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl=cmEthernetTrafficPortLoopbackTestReflectorIPv6AddressControl, cmEthernetAccPortOuterTagTpidOverride=cmEthernetAccPortOuterTagTpidOverride, E1T1FrameFormat=E1T1FrameFormat, cmEthernetNetPortReceivedQL=cmEthernetNetPortReceivedQL, f3PulsePerSecondPortClockAccuracy=f3PulsePerSecondPortClockAccuracy, cmEthernetAccPortCpdV2CdpDispType=cmEthernetAccPortCpdV2CdpDispType, cmEthernetTrafficPortSyncEMode=cmEthernetTrafficPortSyncEMode, cmIngressPrioMapIndex=cmIngressPrioMapIndex, cmEthernetNetPortLinkLossFwdEnabled=cmEthernetNetPortLinkLossFwdEnabled, f3PulsePerSecondPortWidth=f3PulsePerSecondPortWidth, f3GPSReceiverPortAdminState=f3GPSReceiverPortAdminState, cmFlowPointAssociatedAclProfile=cmFlowPointAssociatedAclProfile, cmPortCpdProfileMac0CDispType=cmPortCpdProfileMac0CDispType, f3PulsePerSecondPortInputRate=f3PulsePerSecondPortInputRate, ocnStmSfpLaserWaveLength=ocnStmSfpLaserWaveLength, cmEthernetAccPortCpdV2IslDispType=cmEthernetAccPortCpdV2IslDispType, bits8PortGroupOperationalState=bits8PortGroupOperationalState, ocnStmExpectedQL=ocnStmExpectedQL, cmEthernetAccPortAssumedQL=cmEthernetAccPortAssumedQL, cmEthernetAccPortDiagnosePair3Cond=cmEthernetAccPortDiagnosePair3Cond, cmFlowCpdV2GVRPDispType=cmFlowCpdV2GVRPDispType, cmFacilityObjectGroup=cmFacilityObjectGroup, f3Usb3GDCNPortHardwareVersion=f3Usb3GDCNPortHardwareVersion, cmFlowRefConnectGuardFlowList=cmFlowRefConnectGuardFlowList, cmEthernetTrafficPortJdsuExtTable=cmEthernetTrafficPortJdsuExtTable, cmEthernetTrafficPortLinkLossFwdPartnerEnabled=cmEthernetTrafficPortLinkLossFwdPartnerEnabled, SaBitDesignation=SaBitDesignation, cmQosPolicerProfileCIRLo=cmQosPolicerProfileCIRLo, PolicerColorMode=PolicerColorMode, cmEthernetAccPortLinkLossFwdRxRLDLinkIds=cmEthernetAccPortLinkLossFwdRxRLDLinkIds, cmEthernetTrafficPortInnerVlanLoopback1=cmEthernetTrafficPortInnerVlanLoopback1, cmEthernetNetPortCpdV2Mac04DispType=cmEthernetNetPortCpdV2Mac04DispType, cmTrafficPortQosShaperIngressAverageFrameSize=cmTrafficPortQosShaperIngressAverageFrameSize, f3UsbDCNPortMobileNetworkType=f3UsbDCNPortMobileNetworkType, cmFlowPointEfEnabled=cmFlowPointEfEnabled, stsVcPathBerExcThreshold=stsVcPathBerExcThreshold, f3GPSReceiverPortAlias=f3GPSReceiverPortAlias, cmEthernetNetPortLinkLossFwdRxRLDLinkIds=cmEthernetNetPortLinkLossFwdRxRLDLinkIds, f3Usb3GDCNPortTable=f3Usb3GDCNPortTable, f3FlowPointCpdV2GARPDispType=f3FlowPointCpdV2GARPDispType, f3FpQosPolicerGroup=f3FpQosPolicerGroup, cmEthernetAccPortLaserWDMChannel=cmEthernetAccPortLaserWDMChannel, cmFlowSecondaryState=cmFlowSecondaryState, cmEthernetNetPortOamLocalOamLoopbacksSupported=cmEthernetNetPortOamLocalOamLoopbacksSupported, pps16PortGroupAlias=pps16PortGroupAlias, cmEthernetTrafficPortCpdV2LANBridgesDispType=cmEthernetTrafficPortCpdV2LANBridgesDispType, cmQosPolicerV2AdminState=cmQosPolicerV2AdminState, f3UsbWIFIDonglePortEncryption=f3UsbWIFIDonglePortEncryption, pps16PortGroupOperationalState=pps16PortGroupOperationalState, f3PulsePerSecondPortOutputDelay=f3PulsePerSecondPortOutputDelay, f3NetPortQosShaperWredYellowMinQueueThreshold=f3NetPortQosShaperWredYellowMinQueueThreshold, f3Usb3GDCNPortDailNumber=f3Usb3GDCNPortDailNumber, cmFlowPointCpdProfileMac06DispType=cmFlowPointCpdProfileMac06DispType, cmQosFlowPolicerEBS=cmQosFlowPolicerEBS, f3PulsePerSecondPortSquelchQL=f3PulsePerSecondPortSquelchQL, f3FpQosPolicerEIRMaxLo=f3FpQosPolicerEIRMaxLo, cmEthernetNetPortLoopbackConfig=cmEthernetNetPortLoopbackConfig, cmEthernetAccPortCpdMacAddressMask=cmEthernetAccPortCpdMacAddressMask, cmEthernetTrafficPortCpdV2VlanBridgeDispType=cmEthernetTrafficPortCpdV2VlanBridgeDispType, cmFlowPointRefElpObject=cmFlowPointRefElpObject, cmEthernetNetPortCpdV2Mac0BDispType=cmEthernetNetPortCpdV2Mac0BDispType, cmEthernetMgmtPortMTU=cmEthernetMgmtPortMTU, cmEthernetNetPortPppoeInnerVlanId=cmEthernetNetPortPppoeInnerVlanId, f3GPSReceiverPortLocationMode=f3GPSReceiverPortLocationMode, cmFlowPointCpdProfilePagpDispType=cmFlowPointCpdProfilePagpDispType, f3TimeOfDayPortEntry=f3TimeOfDayPortEntry, cmEthernetNetPortTable=cmEthernetNetPortTable, f3AclRuleOuterVlanPcpHighLimit=f3AclRuleOuterVlanPcpHighLimit, cmFlowCpdDispType=cmFlowCpdDispType, cmMPFlowPointRowStatus=cmMPFlowPointRowStatus, cmEncapFlowPointIndex=cmEncapFlowPointIndex, f3PolicerEnvelopeCouplingFlag=f3PolicerEnvelopeCouplingFlag, cmEthernetTrafficPortServiceType=cmEthernetTrafficPortServiceType, cmQosPolicerV2OperationalState=cmQosPolicerV2OperationalState, cmAccPortPcpDEPairTable=cmAccPortPcpDEPairTable, e1t1LoopbackStatus=e1t1LoopbackStatus, cmFlowCpdV2Table=cmFlowCpdV2Table, cmElineFlowTable=cmElineFlowTable, ocnStmOperationalState=ocnStmOperationalState, CmSwapSADAType=CmSwapSADAType, cmEthernetAccPortA2NPushPVIDEnabled=cmEthernetAccPortA2NPushPVIDEnabled, cmEthernetNetPortPcpDEEncType=cmEthernetNetPortPcpDEEncType, cmFlowPointCpdProfileStorageType=cmFlowPointCpdProfileStorageType, cmEthernetTrafficPortCpdTable=cmEthernetTrafficPortCpdTable, vtVcPathSecondaryState=vtVcPathSecondaryState, f3FlowPointCpdV2GVRPDispType=f3FlowPointCpdV2GVRPDispType, f3AclRuleAlias=f3AclRuleAlias, cmEthernetNetPortLoopbackTestReflectorIPv4Address=cmEthernetNetPortLoopbackTestReflectorIPv4Address, cmEthernetNetPortDiagnoseEfmLpbkCond=cmEthernetNetPortDiagnoseEfmLpbkCond, cmEthernetTrafficPortPortVlanId=cmEthernetTrafficPortPortVlanId, cmEthernetNetPortIpPrecDEEncType=cmEthernetNetPortIpPrecDEEncType, cmPortCpdProfileEntry=cmPortCpdProfileEntry, f3Usb3GDCNPortIpAddress=f3Usb3GDCNPortIpAddress, bits8PortGroupIfIndex=bits8PortGroupIfIndex, cmAccPortQosShaperEntry=cmAccPortQosShaperEntry, ocnStmTable=ocnStmTable, cmFlowWfqGroupCOS=cmFlowWfqGroupCOS, cmQosShaperIndex=cmQosShaperIndex, cmEthernetTrafficPortCpdV2L2PTTunnelMac=cmEthernetTrafficPortCpdV2L2PTTunnelMac, f3Usb3GDCNPortPassword=f3Usb3GDCNPortPassword, cmEthernetNetPortOamRemoteMode=cmEthernetNetPortOamRemoteMode)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmEthernetNetPortCpdFilterDescr=cmEthernetNetPortCpdFilterDescr, f3EthernetTrafficPortExpDEPairIndex=f3EthernetTrafficPortExpDEPairIndex, f3Usb3GDCNPortPINLeftChances=f3Usb3GDCNPortPINLeftChances, cmFlowPointMcastAndBcastRateLimitSpeedLo=cmFlowPointMcastAndBcastRateLimitSpeedLo, cmPortCpdProfileRowStatus=cmPortCpdProfileRowStatus, todPps16PortGroupDelayCompensation=todPps16PortGroupDelayCompensation, cmEthernetAccPortJDSULoopbackVlanList=cmEthernetAccPortJDSULoopbackVlanList, cmPrioMapEntry=cmPrioMapEntry, e3t3LoopbackTime=e3t3LoopbackTime, f3GPSReceiverPortAntennaCableLength=f3GPSReceiverPortAntennaCableLength, cmNetPortPcpDEEncDropEligiblePrio=cmNetPortPcpDEEncDropEligiblePrio, e3t3RowStatus=e3t3RowStatus, f3UsbWIFIDonglePortOperationalState=f3UsbWIFIDonglePortOperationalState, ocnStmTxTrailTrace=ocnStmTxTrailTrace, f3PulsePerSecondPortAlias=f3PulsePerSecondPortAlias, cmAccPortExtCombinedRateLimitSpeedHi=cmAccPortExtCombinedRateLimitSpeedHi, cmEthernetTrafficPortOperationalState=cmEthernetTrafficPortOperationalState, ocnStmSfpVendorName=ocnStmSfpVendorName, f3TimeOfDayPortAssumedClockClass=f3TimeOfDayPortAssumedClockClass, todPps16PortGroupTable=todPps16PortGroupTable, bitsPortSignalShape=bitsPortSignalShape, CmDiagLpbkCondType=CmDiagLpbkCondType, cmFlowPointCpdProfileCustomerLLDPDispType=cmFlowPointCpdProfileCustomerLLDPDispType, cmFlowPointHierarchicalCosEnabled=cmFlowPointHierarchicalCosEnabled, cmEthernetAccPortCpdEthertypeMask=cmEthernetAccPortCpdEthertypeMask, cmEthernetNetPortEncapPcpDEPairsAction=cmEthernetNetPortEncapPcpDEPairsAction, f3FpQosShaperEIRLo=f3FpQosShaperEIRLo, f3GPSReceiverPortFirmwareUpgradePercent=f3GPSReceiverPortFirmwareUpgradePercent, SaBitsState=SaBitsState, f3AclRuleDstMacAddressMask=f3AclRuleDstMacAddressMask, cmEthernetTrafficPortPlugITUCbandChannel=cmEthernetTrafficPortPlugITUCbandChannel, f3FpQosPolicerEnvelopeObject=f3FpQosPolicerEnvelopeObject, f3FpQosPolicerStorageType=f3FpQosPolicerStorageType, f3FlowPointCpdV2Mac08DispType=f3FlowPointCpdV2Mac08DispType, SignalShape=SignalShape, cmEthernetAccPortCpdV2Mac04DispType=cmEthernetAccPortCpdV2Mac04DispType, cmEthernetAccPortSfpDateOfManufacture=cmEthernetAccPortSfpDateOfManufacture, f3GPSReceiverPortIndex=f3GPSReceiverPortIndex, cmEthernetNetPortLoopbackDestMacAddress=cmEthernetNetPortLoopbackDestMacAddress, f3FpQosPolicerOperationalState=f3FpQosPolicerOperationalState, cmEthernetNetPortMTU=cmEthernetNetPortMTU, f3TimeOfDayPortOutputFormat=f3TimeOfDayPortOutputFormat, cmEthernetMgmtPortAdminState=cmEthernetMgmtPortAdminState, cmPrioMapV2IngressPrioMappingIndex=cmPrioMapV2IngressPrioMappingIndex, cmPrioMapV2ProfileAppliedObj=cmPrioMapV2ProfileAppliedObj, cmEthernetNetPortOamDiscoveryState=cmEthernetNetPortOamDiscoveryState, cmEgressOuterTagPriority=cmEgressOuterTagPriority, cmEthernetTrafficPortSfpMediaType=cmEthernetTrafficPortSfpMediaType, cmEthernetNetPortDefaultCOS=cmEthernetNetPortDefaultCOS, f3GPSReceiverPortTDOP=f3GPSReceiverPortTDOP, cmPortCpdProfileMac03DispType=cmPortCpdProfileMac03DispType, ocnStmSfpMediaType=ocnStmSfpMediaType, cmEthernetNetPortPppoeParamTable=cmEthernetNetPortPppoeParamTable, f3FlowPointCpdV2CdpDispType=f3FlowPointCpdV2CdpDispType, f3AclRuleIpv4PriorityControl=f3AclRuleIpv4PriorityControl, cmFlowCTagVlanPriority=cmFlowCTagVlanPriority, cmEthernetTrafficPortLoopbackDestMacAddress=cmEthernetTrafficPortLoopbackDestMacAddress, vtVcPathRowStatus=vtVcPathRowStatus, cmAccPortQosShaperSoamCIRLo=cmAccPortQosShaperSoamCIRLo, gps10MHzPortEntry=gps10MHzPortEntry, f3AclRuleSrcIpv4AddressControl=f3AclRuleSrcIpv4AddressControl, f3SatelliteHealth=f3SatelliteHealth, f3IrigOutputUnitPortOperationalState=f3IrigOutputUnitPortOperationalState, cmQosPolicerProfileEIRHi=cmQosPolicerProfileEIRHi, XgePhyType=XgePhyType, f3AclRuleSrcPortHighLimit=f3AclRuleSrcPortHighLimit, cmEncapFlowPointEgressInnerTagPrioMapEnabled=cmEncapFlowPointEgressInnerTagPrioMapEnabled, f3IrigOpticalOutputPortOperationalState=f3IrigOpticalOutputPortOperationalState, cmEthernetAccPortDiagnoseLpbkCond=cmEthernetAccPortDiagnoseLpbkCond, cmEthernetNetPortOamLocalMaxPDUSize=cmEthernetNetPortOamLocalMaxPDUSize, cmEthernetNetPortCpdV2ELMIDispType=cmEthernetNetPortCpdV2ELMIDispType, f3IrigRs422OutputPortIndex=f3IrigRs422OutputPortIndex, cmEthernetNetPortCpdV2NearestLLDPDispType=cmEthernetNetPortCpdV2NearestLLDPDispType, f3GPSReceiverPortTimeAdvanceValue=f3GPSReceiverPortTimeAdvanceValue, cmEthernetAccPortInnerVlanLoopbackMask=cmEthernetAccPortInnerVlanLoopbackMask, cmEthernetAccPortJumboFramesEnabled=cmEthernetAccPortJumboFramesEnabled, cmEthernetAccPortXgePhyType=cmEthernetAccPortXgePhyType, cmFlowCpdFilterType=cmFlowCpdFilterType, cmPortCpdProfileMac01DispType=cmPortCpdProfileMac01DispType, cmEthernetNetPortOuterVlanLoopback1=cmEthernetNetPortOuterVlanLoopback1, ocnStmTransmitQL=ocnStmTransmitQL, cmEthernetTrafficPortMediaType=cmEthernetTrafficPortMediaType, f3IrigRelayOutputPortIfIndex=f3IrigRelayOutputPortIfIndex, cmEthernetNetPortJdsuLoopbackSrcIp=cmEthernetNetPortJdsuLoopbackSrcIp, f3TimeOfDayPortSignalDirection=f3TimeOfDayPortSignalDirection, f3IrigOutputUnitPortEntry=f3IrigOutputUnitPortEntry, cmEthernetAccPortCpdV2UdldDispType=cmEthernetAccPortCpdV2UdldDispType, cmEthernetNetPortTxPauseEnabled=cmEthernetNetPortTxPauseEnabled, cmEthernetTrafficPortOamRemoteMode=cmEthernetTrafficPortOamRemoteMode, f3IrigOutputUnitPortAlias=f3IrigOutputUnitPortAlias, cmFlowSecureStateList=cmFlowSecureStateList, cmNetPortExpDEDropIneligiblePrio=cmNetPortExpDEDropIneligiblePrio, cmQosPolicerV2StorageType=cmQosPolicerV2StorageType, cmFlowPointMcastAndBcastRateLimitSpeedHi=cmFlowPointMcastAndBcastRateLimitSpeedHi, cmEthernetNetPortCpdV2L2PTTunnelMac=cmEthernetNetPortCpdV2L2PTTunnelMac, f3Usb3GDCNPortModel=f3Usb3GDCNPortModel, cmEthernetNetPortIpPrecDEPairsAction=cmEthernetNetPortIpPrecDEPairsAction, cmElineFlowSecondaryState=cmElineFlowSecondaryState, f3FlowPointCpdV2PortAuthenDispType=f3FlowPointCpdV2PortAuthenDispType, cmQosShaperSoamEIRHi=cmQosShaperSoamEIRHi, cmPortCpdProfileMac02DispType=cmPortCpdProfileMac02DispType, cmEthernetTrafficPortAutoDiagEnabled=cmEthernetTrafficPortAutoDiagEnabled, vtVcPathAdminState=vtVcPathAdminState, todPps16PortGroupEntry=todPps16PortGroupEntry, cmEthernetTrafficPortJdsuLoopbackVlanId=cmEthernetTrafficPortJdsuLoopbackVlanId, cmEthernetNetPortExpDEEncType=cmEthernetNetPortExpDEEncType, cmNetPortPcpDEDecInPriority=cmNetPortPcpDEDecInPriority, gps10MHzPortIfIndex=gps10MHzPortIfIndex, cmEthernetTrafficPortCpdV2UdldDispType=cmEthernetTrafficPortCpdV2UdldDispType, f3GPSReceiverPortSpoofingPpsDifference=f3GPSReceiverPortSpoofingPpsDifference, e3t3AdminState=e3t3AdminState, f3GPSReceiverPortIfIndex=f3GPSReceiverPortIfIndex, cmEthernetTrafficPortTxPauseEnabled=cmEthernetTrafficPortTxPauseEnabled, f3NetPortQosShaperCIRHi=f3NetPortQosShaperCIRHi, cmMPFlowMemberTable=cmMPFlowMemberTable, cmFlowTable=cmFlowTable, cmQosFlowPolicerAssociatedShaper=cmQosFlowPolicerAssociatedShaper, cmFlowCpdV2BridgeReservedDispType=cmFlowCpdV2BridgeReservedDispType, EfIdentificationType=EfIdentificationType, cmEthernetNetPortCpdV2VlanBridgeDispType=cmEthernetNetPortCpdV2VlanBridgeDispType, cmEthernetNetPortSfpVendorName=cmEthernetNetPortSfpVendorName, cmPortCpdProfileSSMDispType=cmPortCpdProfileSSMDispType, ccInputPortEntityIndex=ccInputPortEntityIndex, cmEthernetAccPortCpdV2Mac0DDispType=cmEthernetAccPortCpdV2Mac0DDispType, cmEncapFlowPointGroup=cmEncapFlowPointGroup, cmFlowPointCpdProfileTable=cmFlowPointCpdProfileTable, cmEthernetNetPortLaserFrequency=cmEthernetNetPortLaserFrequency, cmEthernetMgmtPortMDIXStatus=cmEthernetMgmtPortMDIXStatus, cmEthernetTrafficPortRxPauseEnabled=cmEthernetTrafficPortRxPauseEnabled, f3EnvelopeAssocPolicerTable=f3EnvelopeAssocPolicerTable, cmEthernetTrafficPortCpdV2GVRPDispType=cmEthernetTrafficPortCpdV2GVRPDispType, f3AclRuleIndex=f3AclRuleIndex, cmFlowPointCpdProfileCiscoGroupDispType=cmFlowPointCpdProfileCiscoGroupDispType, cmEgressPrioMapTable=cmEgressPrioMapTable, cmEthernetAccPortTransmitQL=cmEthernetAccPortTransmitQL, cmEthernetAccPortConfigSpeed=cmEthernetAccPortConfigSpeed, cmEthernetNetPortCpdFilterType=cmEthernetNetPortCpdFilterType, cmFlowPointCpdProfileRowStatus=cmFlowPointCpdProfileRowStatus, cmEthernetAccPortMediaType=cmEthernetAccPortMediaType, cmQosShaperV2AdditionalCIRLo=cmQosShaperV2AdditionalCIRLo, cmFlowPointCpdProfileGVRPDispType=cmFlowPointCpdProfileGVRPDispType, cmEthernetAccPortClbTable=cmEthernetAccPortClbTable, cmQosFlowPolicerCIRMaxHi=cmQosFlowPolicerCIRMaxHi, ITUCBandChannelIdentifier=ITUCBandChannelIdentifier, cmMPFlowAgingTimer=cmMPFlowAgingTimer, f3NetPortQosShaperEIRLo=f3NetPortQosShaperEIRLo, ethernetNetworkPortExtGroup=ethernetNetworkPortExtGroup, cmPortCpdProfileIslDispType=cmPortCpdProfileIslDispType, cmQosFlowPolicerColorMarkingFlag=cmQosFlowPolicerColorMarkingFlag, IrigOutputType=IrigOutputType, cmEthernetAccPortExpectedQL=cmEthernetAccPortExpectedQL, cmEthernetAccPortCpdMacAddressMatch=cmEthernetAccPortCpdMacAddressMatch, cmEthernetAccPortSSMRemoteMacAddress=cmEthernetAccPortSSMRemoteMacAddress, cmFlowCpdV2Mac00DispType=cmFlowCpdV2Mac00DispType, cmOAMFlowPointRowStatus=cmOAMFlowPointRowStatus, f3FlowPointCpdV2PagpDispType=f3FlowPointCpdV2PagpDispType, cmNetPortExtCombinedRateLimitSpeedHi=cmNetPortExtCombinedRateLimitSpeedHi, f3IrigRelayOutputPortIndex=f3IrigRelayOutputPortIndex, cmEthernetTrafficPortRemoteSfpConnectorValue=cmEthernetTrafficPortRemoteSfpConnectorValue, XDSLStatus=XDSLStatus, clk16PortGroupOperationalState=clk16PortGroupOperationalState, cmEthernetAccPortPortVlanId=cmEthernetAccPortPortVlanId, cmEthernetNetPortXdslActualLinkRateDownStream=cmEthernetNetPortXdslActualLinkRateDownStream, f3FlowPointCpdV2Mac05DispType=f3FlowPointCpdV2Mac05DispType, cmNetPortPcpDEPairEntry=cmNetPortPcpDEPairEntry, cmEthernetAccPortDiagnoseTestStatus=cmEthernetAccPortDiagnoseTestStatus, cmEthernetNetPortXdslConnControl=cmEthernetNetPortXdslConnControl, cmEthernetAccPortDiagnosePair4Cond=cmEthernetAccPortDiagnosePair4Cond, cmEthernetAccPortCpdV2Mac06DispType=cmEthernetAccPortCpdV2Mac06DispType, pps16PortGroupDirection=pps16PortGroupDirection, cmFlowPointWfqGroupCOS=cmFlowPointWfqGroupCOS, f3GPSReceiverPortTimeAdvanceMode=f3GPSReceiverPortTimeAdvanceMode, cmEthernetNetPortSilentStartControl=cmEthernetNetPortSilentStartControl, f3GPSReceiverPortCoordinateStringAltitude=f3GPSReceiverPortCoordinateStringAltitude, f3Usb3GDCNPortFSN=f3Usb3GDCNPortFSN, cmEthernetTrafficPortIngressPrioMapMode=cmEthernetTrafficPortIngressPrioMapMode, e1t1RelatedContainerId=e1t1RelatedContainerId, f3AclRuleIpV6FlowLabel=f3AclRuleIpV6FlowLabel, cmMPFlowMemberFPIndex=cmMPFlowMemberFPIndex, cmNetPortIpPrecDEEncDropIneligiblePrio=cmNetPortIpPrecDEEncDropIneligiblePrio, cmFlowCpdV2UplinkFastDispType=cmFlowCpdV2UplinkFastDispType, f3AclRuleOuterVlanVIDControl=f3AclRuleOuterVlanVIDControl, ieee1588EthernetPortOperationalState=ieee1588EthernetPortOperationalState, cmEthernetNetPortIfIndex=cmEthernetNetPortIfIndex, f3EthernetTrafficPortExpDEEncDropIneligiblePrio=f3EthernetTrafficPortExpDEEncDropIneligiblePrio, cmFlowCpdV2SSMDispType=cmFlowCpdV2SSMDispType, f3Usb3GDCNPortRSSI=f3Usb3GDCNPortRSSI, cmNetPortExpDEPairIndex=cmNetPortExpDEPairIndex, cmNetPortPcpDEDropEligiblePrio=cmNetPortPcpDEDropEligiblePrio, cmEthernetMgmtPortSecondaryState=cmEthernetMgmtPortSecondaryState, cmEthernetNetPortInitiateDiag=cmEthernetNetPortInitiateDiag, stsVcPathAdminState=stsVcPathAdminState, cmEthernetTrafficPortSSMRemoteMacAddress=cmEthernetTrafficPortSSMRemoteMacAddress, cmEthernetAccPortLinkLossFwdPartnerEnabled=cmEthernetAccPortLinkLossFwdPartnerEnabled, cmFlowSTagVlanPriority=cmFlowSTagVlanPriority, cmMPFlowStorageType=cmMPFlowStorageType, f3Usb3GDCNPortAPN=f3Usb3GDCNPortAPN, cmEthernetNetPortPppoeOuterVlanId=cmEthernetNetPortPppoeOuterVlanId, cmTrafficAclTcpUdpDstPortNum=cmTrafficAclTcpUdpDstPortNum, cmEthernetTrafficPortLoopbackSourceMacAddress=cmEthernetTrafficPortLoopbackSourceMacAddress, cmFlowPointCpdProfileGARPGroupDispType=cmFlowPointCpdProfileGARPGroupDispType, cmQosFlowPolicerCBS=cmQosFlowPolicerCBS, cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl=cmEthernetNetPortLoopbackTestReflectorIPv4AddressControl, f3AclRuleTcpFlagsControl=f3AclRuleTcpFlagsControl, cmFlowPointCpdProfileNonTpmrLLDPDispType=cmFlowPointCpdProfileNonTpmrLLDPDispType, cmEthernetAccPortNegotiatedSpeed=cmEthernetAccPortNegotiatedSpeed, f3EthernetTrafficPortExpDEDropIneligiblePrio=f3EthernetTrafficPortExpDEDropIneligiblePrio, f3FlowPointCpdV2Mac0DDispType=f3FlowPointCpdV2Mac0DDispType, f3UsbWIFIDonglePortName=f3UsbWIFIDonglePortName, cmQosShaperWredGreenDropProbability=cmQosShaperWredGreenDropProbability, cmPortCpdProfileMac0EDispType=cmPortCpdProfileMac0EDispType, PSENonStandardPD=PSENonStandardPD, cmPethPsePortExtAssociatedPort=cmPethPsePortExtAssociatedPort, cmFlowGuaranteedA2NBandwidthLo=cmFlowGuaranteedA2NBandwidthLo, cmQosShaperV2ActualEIR=cmQosShaperV2ActualEIR, cmEthernetTrafficPortOuterVlanLoopbackMask=cmEthernetTrafficPortOuterVlanLoopbackMask, cmFlowType=cmFlowType, cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType=cmEthernetTrafficPortCpdV2NonTpmrLLDPDispType, cmFlowPointCpdProfilePvstpPlusDispType=cmFlowPointCpdProfilePvstpPlusDispType, cmEthernetAccPortDeiEnable=cmEthernetAccPortDeiEnable, cmEthernetTrafficPortBcastRateLimitEnabled=cmEthernetTrafficPortBcastRateLimitEnabled, pethMainPseEXTEntry=pethMainPseEXTEntry, bitsPortIndex=bitsPortIndex, f3TimeOfDayPortTODSource=f3TimeOfDayPortTODSource, cmPortCpdProfileMac06DispType=cmPortCpdProfileMac06DispType, ocnStmSfpLinkLength=ocnStmSfpLinkLength, neTMParamsGroup=neTMParamsGroup, cmEthernetNetPortEncapPcpDEEncodingType=cmEthernetNetPortEncapPcpDEEncodingType, cmFlowPointCpdProfileCdpDispType=cmFlowPointCpdProfileCdpDispType, cmEthernetTrafficPortShapedSpeedLo=cmEthernetTrafficPortShapedSpeedLo, cmEthernetTrafficPortMaxMpFpNum=cmEthernetTrafficPortMaxMpFpNum, f3IrigRelayOutputPortRelayOperation=f3IrigRelayOutputPortRelayOperation, PortState=PortState, cmQosFlowPolicerSecondaryState=cmQosFlowPolicerSecondaryState, cmAccPortExtMcastRateLimitSpeedLo=cmAccPortExtMcastRateLimitSpeedLo, f3Usb3GDCNPortOperationalState=f3Usb3GDCNPortOperationalState, cmEthernetTrafficPortLoopbackStatus=cmEthernetTrafficPortLoopbackStatus, cmEthernetTrafficPortCpdV2Mac0FDispType=cmEthernetTrafficPortCpdV2Mac0FDispType, TDMPathType=TDMPathType, cmEthernetAccPortCpdV2Mac01DispType=cmEthernetAccPortCpdV2Mac01DispType, cmFlowTrafficType=cmFlowTrafficType, f3GPSReceiverPortPDOPMask=f3GPSReceiverPortPDOPMask, cmPortCpdProfilePortAuthenDispType=cmPortCpdProfilePortAuthenDispType, cmEthernetTrafficPortAssumedQL=cmEthernetTrafficPortAssumedQL, cmPortCpdProfileUdldDispType=cmPortCpdProfileUdldDispType, cmEthernetAccPortCpdV2NearestLLDPDispType=cmEthernetAccPortCpdV2NearestLLDPDispType, cmEthernetAccPortWfqGroupEirHi=cmEthernetAccPortWfqGroupEirHi, cmEthernetAccPortSfpHardwareRevision=cmEthernetAccPortSfpHardwareRevision, cmQosShaperV2AdditionalCIRHi=cmQosShaperV2AdditionalCIRHi, cmEthernetTrafficPortCpdV2SSMDispType=cmEthernetTrafficPortCpdV2SSMDispType, cmFlowPointCpdProfileGMRPDispType=cmFlowPointCpdProfileGMRPDispType, f3EthernetTrafficPortExpDEDecIndex=f3EthernetTrafficPortExpDEDecIndex, cmEncapFlowPointCTagVlanId=cmEncapFlowPointCTagVlanId, clk16PortGroupAdminState=clk16PortGroupAdminState)
mibBuilder.exportSymbols("CM-FACILITY-MIB", e1t1AdminState=e1t1AdminState, E1T1LineCode=E1T1LineCode, cmEthernetTrafficPortCpdV2GARPGroupDispType=cmEthernetTrafficPortCpdV2GARPGroupDispType, PYSNMP_MODULE_ID=cmFacilityMIB, CmLinkLossFwdTxActionType=CmLinkLossFwdTxActionType, ieee1588EthernetPortMTU=ieee1588EthernetPortMTU, f3FpQosPolicerRowStatus=f3FpQosPolicerRowStatus, f3GPSReceiverPortVerticalAccuracy=f3GPSReceiverPortVerticalAccuracy, cmEthernetTrafficPortLinkLossFwdRemoteLinkIds=cmEthernetTrafficPortLinkLossFwdRemoteLinkIds, e3t3LoopbackStatus=e3t3LoopbackStatus, prioMapGroup=prioMapGroup, cmEthernetTrafficPortCpdV2PtpUntaggedDispType=cmEthernetTrafficPortCpdV2PtpUntaggedDispType, ethernetMgmtPortGroup=ethernetMgmtPortGroup, cmEthernetTrafficPortJdsuExtEntry=cmEthernetTrafficPortJdsuExtEntry, cmFlowPointCpdProfileMac0ADispType=cmFlowPointCpdProfileMac0ADispType, gps10MHzPortEntityIndex=gps10MHzPortEntityIndex, bits8PortGroupLineType=bits8PortGroupLineType, cmEthernetNetPortOamLocalMode=cmEthernetNetPortOamLocalMode, cmEthernetTrafficPortRemoteSfpMediaType=cmEthernetTrafficPortRemoteSfpMediaType, cmQosShaperOperationalState=cmQosShaperOperationalState, cmEthernetTrafficPortShapingEnabled=cmEthernetTrafficPortShapingEnabled, cmEthernetTrafficPortRemoteSfpLaserFrequency=cmEthernetTrafficPortRemoteSfpLaserFrequency, trafficGroupCmHub=trafficGroupCmHub, stsVcPathOperationalState=stsVcPathOperationalState, ieee1588EthernetPortMDIXType=ieee1588EthernetPortMDIXType, cmEthernetNetPortCpdV2Mac01DispType=cmEthernetNetPortCpdV2Mac01DispType, cmEthernetAccPortOamAdminState=cmEthernetAccPortOamAdminState, cmNetPortEncapPcpDeGroup=cmNetPortEncapPcpDeGroup, cmEthernetAccPortJdsuLoopbackSrcIp=cmEthernetAccPortJdsuLoopbackSrcIp, cmFlowA2NCombinedRateLimitLo=cmFlowA2NCombinedRateLimitLo, f3PulsePerSecondPortAssumedClockClass=f3PulsePerSecondPortAssumedClockClass, cmPrioMapInnerTagPriority=cmPrioMapInnerTagPriority, vtVcPathRxSignalLabel=vtVcPathRxSignalLabel, cmEthernetNetPortClbIndex=cmEthernetNetPortClbIndex, cmEthernetAccPortLinkLossFwdRemoteLinkIds=cmEthernetAccPortLinkLossFwdRemoteLinkIds, cmFlowPointMcastRateLimitSpeedHi=cmFlowPointMcastRateLimitSpeedHi, cmFacilityMIB=cmFacilityMIB, f3PulsePerSecondPortDirection=f3PulsePerSecondPortDirection, TimeAdvanceMode=TimeAdvanceMode, cmQosShaperV2Index=cmQosShaperV2Index, cmEthernetTrafficPortCpdV2LLDPDispType=cmEthernetTrafficPortCpdV2LLDPDispType, f3AclRuleDstPortLowLimit=f3AclRuleDstPortLowLimit, gps10MHzPortTimeSource=gps10MHzPortTimeSource, cmEthernetAccPortCpdSubtype=cmEthernetAccPortCpdSubtype, f3FpQosShaperCOS=f3FpQosShaperCOS, ccGroupTable=ccGroupTable, neTMParamsBandwidthProfileMode=neTMParamsBandwidthProfileMode, cmFlowPointCpdProfileLACPDispType=cmFlowPointCpdProfileLACPDispType, ocnStmPortType=ocnStmPortType, cmQosFlowPolicerDirection=cmQosFlowPolicerDirection, todPps16PortGroupSquelchControl=todPps16PortGroupSquelchControl, bits8PortGroupLineBuildOut=bits8PortGroupLineBuildOut, cmEthernetTrafficPortSwapPriorityVID=cmEthernetTrafficPortSwapPriorityVID, cmEthernetNetPortSSMRemoteMacAddress=cmEthernetNetPortSSMRemoteMacAddress, cmAccPortPcpDEDecTable=cmAccPortPcpDEDecTable, f3IrigPortGroup=f3IrigPortGroup, f3NetPortQosShaperDirection=f3NetPortQosShaperDirection, cmFlowPointCTagControl=cmFlowPointCTagControl, cmPrioMapV2PrioMappingPriCOS=cmPrioMapV2PrioMappingPriCOS, cmEthernetTrafficPortCpdV2CustomerLLDPDispType=cmEthernetTrafficPortCpdV2CustomerLLDPDispType, cmEthernetNetPortXdslDsSNRMargin=cmEthernetNetPortXdslDsSNRMargin, cmEthernetTrafficPortPcpDEEncInPriority=cmEthernetTrafficPortPcpDEEncInPriority, cmQosShaperWfqWeight=cmQosShaperWfqWeight, cmNetPortPcpDEEncEntry=cmNetPortPcpDEEncEntry, stsVcPathLoopbackConfig=stsVcPathLoopbackConfig, cmEthernetAccPortLoopbackBlockingEnabled=cmEthernetAccPortLoopbackBlockingEnabled, f3NetPortQosShaperCOS=f3NetPortQosShaperCOS, sciPortSignalDirection=sciPortSignalDirection, cmEthernetNetPortInnerVlanLoopback1=cmEthernetNetPortInnerVlanLoopback1, f3GPSReceiverPortSatellitesUsableFlag=f3GPSReceiverPortSatellitesUsableFlag, cmPrioMapV2PrioMappingEncapOuterDscpValue=cmPrioMapV2PrioMappingEncapOuterDscpValue, cmEthernetTrafficPortConfigSpeed=cmEthernetTrafficPortConfigSpeed, f3EthernetTrafficPortExpDEDecTable=f3EthernetTrafficPortExpDEDecTable, f3GPSReceiverPortServiceUnavailableTime=f3GPSReceiverPortServiceUnavailableTime, cmFlowCpdV2NonTpmrLLDPDispType=cmFlowCpdV2NonTpmrLLDPDispType, cmQosFlowPolicerTable=cmQosFlowPolicerTable, cmFlowCpdV2PortAuthenDispType=cmFlowCpdV2PortAuthenDispType, cmFlowCpdSubtype=cmFlowCpdSubtype, cmEthernetTrafficPortSfpHardwareRevision=cmEthernetTrafficPortSfpHardwareRevision, cmPortCpdProfileTable=cmPortCpdProfileTable, vtVcPathTxSignalLabel=vtVcPathTxSignalLabel, cmNetPortExtMcastRateLimitSpeedLo=cmNetPortExtMcastRateLimitSpeedLo, cmEthernetAccPortDiagnoseAutoNegCond=cmEthernetAccPortDiagnoseAutoNegCond, stsVcPathEntry=stsVcPathEntry, E1T1RcvSensitivity=E1T1RcvSensitivity, cmEthernetTrafficPortLinkLossFwdLocalLinkId=cmEthernetTrafficPortLinkLossFwdLocalLinkId, cmAccPortQosShaperAvgFrameSizeBeforeFragment=cmAccPortQosShaperAvgFrameSizeBeforeFragment, cmTrafficAclIpQosTypeEnabled=cmTrafficAclIpQosTypeEnabled, G3AuthStatus=G3AuthStatus, cmEthernetAccPortLoopbackSwapSADA=cmEthernetAccPortLoopbackSwapSADA, bitsPortSaBitsAdminState=bitsPortSaBitsAdminState, cmEthernetNetPortPppoeInnerVlanEtherType=cmEthernetNetPortPppoeInnerVlanEtherType, cmEthernetNetPortLinkLossFwdTriggerTypes=cmEthernetNetPortLinkLossFwdTriggerTypes, cmQosPolicerProfileEIRLo=cmQosPolicerProfileEIRLo, cmEncapFlowPointAssociatedFlowId=cmEncapFlowPointAssociatedFlowId, cmEthernetTrafficPortDiagnosePair2Cond=cmEthernetTrafficPortDiagnosePair2Cond, cmPortCpdProfileLldpDispType=cmPortCpdProfileLldpDispType, cmPrioMapV2IngressPrioMappingCOS=cmPrioMapV2IngressPrioMappingCOS, cmFlowCpdV2Mac06DispType=cmFlowCpdV2Mac06DispType, cmEthernetAccPortMode=cmEthernetAccPortMode, cmEgressCOS=cmEgressCOS, cmTrafficPortQosShaperEIRLo=cmTrafficPortQosShaperEIRLo, cmTrafficPortQosShaperSecondaryState=cmTrafficPortQosShaperSecondaryState, cmNetPortExpDEEncDropIneligiblePrio=cmNetPortExpDEEncDropIneligiblePrio, cmEthernetNetPortCpdV2LLDPDispType=cmEthernetNetPortCpdV2LLDPDispType, cmFlowCpdV2Mac08DispType=cmFlowCpdV2Mac08DispType, cmFlowPointAutoCIRPercentage=cmFlowPointAutoCIRPercentage, cmEthernetNetPortPppoeInnerVlanControl=cmEthernetNetPortPppoeInnerVlanControl, cmEthernetTrafficPortCpdV2PauseDispType=cmEthernetTrafficPortCpdV2PauseDispType, gps10MHzPortIndex=gps10MHzPortIndex, cmEthernetTrafficPortLinkLossFwdTriggerTypes=cmEthernetTrafficPortLinkLossFwdTriggerTypes, cmFlowPointCpdProfileIslDispType=cmFlowPointCpdProfileIslDispType, cmFlowCpdV2VtpDispType=cmFlowCpdV2VtpDispType, bitsPortSignalFrequency=bitsPortSignalFrequency, ccGroupIndex=ccGroupIndex, cmEthernetAccPortCpdV2Mac09DispType=cmEthernetAccPortCpdV2Mac09DispType, cmEthernetAccPortSilentStartControl=cmEthernetAccPortSilentStartControl, e3t3InterfaceGroup=e3t3InterfaceGroup, cmPortCpdProfileMac00DispType=cmPortCpdProfileMac00DispType, bitsPortSecondaryState=bitsPortSecondaryState, ccGroupActivePorts=ccGroupActivePorts, cmEthernetNetPortCpdV2PvstpPlusDispType=cmEthernetNetPortCpdV2PvstpPlusDispType, f3IrigOutputUnitPortTable=f3IrigOutputUnitPortTable, cmQosShaperV2RowStatus=cmQosShaperV2RowStatus, f3FlowPointCpdV2DtpDispType=f3FlowPointCpdV2DtpDispType, cmEthernetTrafficPortDeiEnable=cmEthernetTrafficPortDeiEnable, cmIngressPrioMapEntry=cmIngressPrioMapEntry, cmEthernetAccPortPcpDEPairsAction=cmEthernetAccPortPcpDEPairsAction, cmEthernetNetPortPppoeOuterVlanControl=cmEthernetNetPortPppoeOuterVlanControl, f3FlowPointCpdV2VtpDispType=f3FlowPointCpdV2VtpDispType, cmEthernetAccPortCpdV2DtpDispType=cmEthernetAccPortCpdV2DtpDispType, cmMPFlowRowStatus=cmMPFlowRowStatus, cmTrafficAclProfileName=cmTrafficAclProfileName, cmEthernetTrafficPortOuterTagTpidOverride=cmEthernetTrafficPortOuterTagTpidOverride, f3AclRuleOuterVlanVIDHighLimit=f3AclRuleOuterVlanVIDHighLimit, stsVcPathBerDegThreshold=stsVcPathBerDegThreshold, cmEthernetTrafficPortLinkLossFwdSignalType=cmEthernetTrafficPortLinkLossFwdSignalType, f3EthernetTrafficPortExpDEDecInPriority=f3EthernetTrafficPortExpDEDecInPriority, f3AclRuleIpv4PriorityLowLimit=f3AclRuleIpv4PriorityLowLimit, cmEthernetTrafficPortLpbkTable=cmEthernetTrafficPortLpbkTable, f3AclRuleStorageType=f3AclRuleStorageType, cmEthernetAccPortCpdV2GVRPDispType=cmEthernetAccPortCpdV2GVRPDispType, cmEthernetTrafficPortCpdV2Mac08DispType=cmEthernetTrafficPortCpdV2Mac08DispType, cmFlowPointCpdProfileNearestLLDPDispType=cmFlowPointCpdProfileNearestLLDPDispType, cmPrioMapV2PrioMappingCOSEntry=cmPrioMapV2PrioMappingCOSEntry, cmEthernetNetPortCpdSubtypeMask=cmEthernetNetPortCpdSubtypeMask, cmEthernetTrafficPortExpDEEncType=cmEthernetTrafficPortExpDEEncType, cmNetPortPcpDEDecEntry=cmNetPortPcpDEDecEntry, f3FlowPointCpdV2IslDispType=f3FlowPointCpdV2IslDispType, f3EthernetTrafficPortExpDEEncEntry=f3EthernetTrafficPortExpDEEncEntry, FlowTrafficType=FlowTrafficType, cmElineFlowOperationalState=cmElineFlowOperationalState, cmQosFlowPolicerRowStatus=cmQosFlowPolicerRowStatus, cmEthernetTrafficPortOamId=cmEthernetTrafficPortOamId, cmEthernetTrafficPortPcpDEEncEntry=cmEthernetTrafficPortPcpDEEncEntry, cmFlowPointCpdProfileMac08DispType=cmFlowPointCpdProfileMac08DispType, cmNetPortEncapPcpDEPairEntry=cmNetPortEncapPcpDEPairEntry, cmEthernetAccPortOamId=cmEthernetAccPortOamId, bitsPortTypeIndex=bitsPortTypeIndex, TrafficPortDeleteEntitiesAction=TrafficPortDeleteEntitiesAction, e3t3RemoteLoopbackRequest=e3t3RemoteLoopbackRequest, clk16PortGroupSquelchControl=clk16PortGroupSquelchControl, cmEthernetTrafficPortIndex=cmEthernetTrafficPortIndex, cmEthernetAccPortLowLatencyQueuingEnabled=cmEthernetAccPortLowLatencyQueuingEnabled, cmEthernetTrafficPortBwResourcePort=cmEthernetTrafficPortBwResourcePort, cmEthernetAccPortCpdV2PortAuthenDispType=cmEthernetAccPortCpdV2PortAuthenDispType, cmEthernetNetPortLoopbackTime=cmEthernetNetPortLoopbackTime, cmEthernetNetPortCpdV2BPDUDispType=cmEthernetNetPortCpdV2BPDUDispType, bitsPortLineType=bitsPortLineType, F3Usb3GRecvSignalStrengthInd=F3Usb3GRecvSignalStrengthInd, f3EthernetTrafficPortExpDEEncDropEligiblePrio=f3EthernetTrafficPortExpDEEncDropEligiblePrio, f3FpQosShaperOperationalState=f3FpQosShaperOperationalState, cmPortCpdProfileMac0ADispType=cmPortCpdProfileMac0ADispType, cmFlowPointIndex=cmFlowPointIndex, bitsPortSquelchQL=bitsPortSquelchQL, cmFlowSecureBlockingEnabled=cmFlowSecureBlockingEnabled, LineBuildOut=LineBuildOut, cmAccPortQosShaperIndex=cmAccPortQosShaperIndex, ccInputPortTable=ccInputPortTable, cmFlowPointEfIdentificationFields=cmFlowPointEfIdentificationFields, cmOAMFlowPointIngressVlanMemberList=cmOAMFlowPointIngressVlanMemberList, cmEthernetNetPortDiagnoseResult=cmEthernetNetPortDiagnoseResult, CmOamAdminState=CmOamAdminState, cmEthernetAccPortClbLength=cmEthernetAccPortClbLength, cmFlowPointCpdProfileMac00DispType=cmFlowPointCpdProfileMac00DispType, cmEthernetTrafficPortOamRemoteMacAddress=cmEthernetTrafficPortOamRemoteMacAddress, cmEthernetNetPortShapedSpeedLo=cmEthernetNetPortShapedSpeedLo, cmEthernetNetPortCpdV2CiscoGroupDispType=cmEthernetNetPortCpdV2CiscoGroupDispType, cmFlowPointCpdProfileSSMDispType=cmFlowPointCpdProfileSSMDispType, f3FpQosPolicerAdminState=f3FpQosPolicerAdminState, todPps16PortGroupIndex=todPps16PortGroupIndex, cmEthernetAccPortClbEnabled=cmEthernetAccPortClbEnabled, E3T3Type=E3T3Type, cmFlowPointGroup=cmFlowPointGroup, cmEthernetNetPortOamLocalUnidirSupportEnabled=cmEthernetNetPortOamLocalUnidirSupportEnabled, cmQosShaperEIR=cmQosShaperEIR, cmTrafficAclSrcIpV6AddrMask=cmTrafficAclSrcIpV6AddrMask, cmEthernetTrafficPortRemoteSfpName=cmEthernetTrafficPortRemoteSfpName, cmFlowInnerTagPrioEnabled=cmFlowInnerTagPrioEnabled, cmEthernetNetPortCpdV2UplinkFastDispType=cmEthernetNetPortCpdV2UplinkFastDispType, cmQosPolicerProfileCouplingFlag=cmQosPolicerProfileCouplingFlag, cmAccPortQosShaperAdminState=cmAccPortQosShaperAdminState, cmMPFlowIndex=cmMPFlowIndex, bits8PortGroupFrameFormat=bits8PortGroupFrameFormat, cmNetPortPcpDEDecOutPriority=cmNetPortPcpDEDecOutPriority, bits8PortGroupLineCode=bits8PortGroupLineCode, cmAccPortQosShaperWfqWeight=cmAccPortQosShaperWfqWeight, cmQosShaperV2AdminState=cmQosShaperV2AdminState, cmNetPortIpPrecDEDropEligiblePrio=cmNetPortIpPrecDEDropEligiblePrio, LearningAction=LearningAction, ocnStmSfpConnectorValue=ocnStmSfpConnectorValue, cmQosShaperSoamCIRLo=cmQosShaperSoamCIRLo, cmMPFlowOperationalState=cmMPFlowOperationalState, cmFlowPointWfqGroupEirLo=cmFlowPointWfqGroupEirLo, vtVcPathLoopbackStatus=vtVcPathLoopbackStatus, f3FpQosPolicerEBS=f3FpQosPolicerEBS, cmEthernetTrafficPortLinkLossFwdTxActionType=cmEthernetTrafficPortLinkLossFwdTxActionType, cmEthernetTrafficPortOuterVlanLoopback2=cmEthernetTrafficPortOuterVlanLoopback2, cmFlowPointTable=cmFlowPointTable, CmEthernetTrafficSvcType=CmEthernetTrafficSvcType, cmEthernetNetPortCpdV2Mac03DispType=cmEthernetNetPortCpdV2Mac03DispType, f3AclRuleOuterVlanDei=f3AclRuleOuterVlanDei, cmEthernetNetPortOuterTagTpidOverride=cmEthernetNetPortOuterTagTpidOverride, ieee1588EthernetPortMediaType=ieee1588EthernetPortMediaType, f3UsbWIFIDonglePortSSID=f3UsbWIFIDonglePortSSID, CmEthernetMDIXType=CmEthernetMDIXType, cmFlowPointCpdProfileUdldDispType=cmFlowPointCpdProfileUdldDispType, cmFlowRowStatus=cmFlowRowStatus, XDSLCarrierSet=XDSLCarrierSet, cmEthernetAccPortOamLocalLinkEventsEnabled=cmEthernetAccPortOamLocalLinkEventsEnabled, cmEthernetTrafficPortIfIndex=cmEthernetTrafficPortIfIndex, cmTrafficAclRowStatus=cmTrafficAclRowStatus, cmQosQueueProfileIndex=cmQosQueueProfileIndex, neTMParamsAgingtime=neTMParamsAgingtime, cmEncapFlowPointTable=cmEncapFlowPointTable, cmElineFlowFP1=cmElineFlowFP1, cmFlowPointCpdProfileUplinkFastDispType=cmFlowPointCpdProfileUplinkFastDispType, f3UsbWIFIDonglePortEntry=f3UsbWIFIDonglePortEntry, cmQosShaperWredYellowMaxQueueThreshold=cmQosShaperWredYellowMaxQueueThreshold, f3SatelliteElevation=f3SatelliteElevation, vtVcPathIfIndex=vtVcPathIfIndex, cmAccPortQosShaperCBS=cmAccPortQosShaperCBS, cmEthernetTrafficPortPcpDEDropEligiblePrio=cmEthernetTrafficPortPcpDEDropEligiblePrio, f3IrigOutputUnitPortControlField=f3IrigOutputUnitPortControlField, cmQosPolicerV2Table=cmQosPolicerV2Table, cmTrafficAclVlanPriority=cmTrafficAclVlanPriority, f3GPSReceiverPortTable=f3GPSReceiverPortTable, cmEthernetAccPortSfpPartNumber=cmEthernetAccPortSfpPartNumber, f3IrigOpticalOutputPortAlias=f3IrigOpticalOutputPortAlias, cmEthernetAccPortMDIXStatus=cmEthernetAccPortMDIXStatus, cmPortCpdProfileBPDUDispType=cmPortCpdProfileBPDUDispType, f3AclRuleOuterVlanPcpControl=f3AclRuleOuterVlanPcpControl, cmEthernetNetPortRxPauseDisposition=cmEthernetNetPortRxPauseDisposition, cmEthernetNetPortXdslCurVdslProfile=cmEthernetNetPortXdslCurVdslProfile)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmFlowPointGuaranteedBWLo=cmFlowPointGuaranteedBWLo, CmDiagEfmOamLpbkCondType=CmDiagEfmOamLpbkCondType, f3AclRuleSrcIpv6AddressPrefixLen=f3AclRuleSrcIpv6AddressPrefixLen, F3Usb3GSimCardState=F3Usb3GSimCardState, cmEthernetNetPortCpdV2Mac02DispType=cmEthernetNetPortCpdV2Mac02DispType, cmEthernetTrafficPortRowStatus=cmEthernetTrafficPortRowStatus, cmPrioMapV2PrioMappingPriXTagPrio=cmPrioMapV2PrioMappingPriXTagPrio, cmNetPortExtRefPrioMapProfile=cmNetPortExtRefPrioMapProfile, F3Usb3GNetworkConnectionState=F3Usb3GNetworkConnectionState, cmEthernetNetPortCpdV2EfmOamDispType=cmEthernetNetPortCpdV2EfmOamDispType, cmFlowSTagVlanId=cmFlowSTagVlanId, f3FpQosPolicerAlgorithm=f3FpQosPolicerAlgorithm, cmEthernetTrafficPortPcpDEDecTable=cmEthernetTrafficPortPcpDEDecTable, pps16PortGroupSquelchControl=pps16PortGroupSquelchControl, cmEthernetNetPortRxDeiAction=cmEthernetNetPortRxDeiAction, f3GPSReceiverPortAntennaStatus=f3GPSReceiverPortAntennaStatus, cmEthernetTrafficPortQinQEtherType=cmEthernetTrafficPortQinQEtherType, cmEthernetTrafficPortTxDeiOuterTagType=cmEthernetTrafficPortTxDeiOuterTagType, f3EthernetTrafficPortExpDEEncTable=f3EthernetTrafficPortExpDEEncTable, cmEthernetAccPortLoopbackTime=cmEthernetAccPortLoopbackTime, f3FpQosShaperGroup=f3FpQosShaperGroup, cmOAMFlowPointIngressUntaggedFrameSupported=cmOAMFlowPointIngressUntaggedFrameSupported, f3AclRuleEtherType=f3AclRuleEtherType, f3Usb3GDCNPortEntry=f3Usb3GDCNPortEntry, f3GPSReceiverPortSelfSurveyProgress=f3GPSReceiverPortSelfSurveyProgress, cmQosQueueProfileREDEnabled=cmQosQueueProfileREDEnabled, cmFlowCpdV2CdpDispType=cmFlowCpdV2CdpDispType, f3Usb3GDCNPortConnectionStatus=f3Usb3GDCNPortConnectionStatus, cmAccPortPcpDEDecOutPriority=cmAccPortPcpDEDecOutPriority, cmPrioMapV2ProfileIndex=cmPrioMapV2ProfileIndex, cmAccPortExtRefPrioMapProfile=cmAccPortExtRefPrioMapProfile, cmMPFlowTable=cmMPFlowTable, f3FlowPointCpdV2VlanBridgeDispType=f3FlowPointCpdV2VlanBridgeDispType, cmEthernetNetPortXdslUsTxPower=cmEthernetNetPortXdslUsTxPower, stsVcPathTrailTraceFormat=stsVcPathTrailTraceFormat, cmTrafficPortLpbkGroup=cmTrafficPortLpbkGroup, cmFlowAdminState=cmFlowAdminState, cmEthernetNetPortCpdV2SSMDispType=cmEthernetNetPortCpdV2SSMDispType, cmEthernetTrafficPortRxDeiOuterTagType=cmEthernetTrafficPortRxDeiOuterTagType, cmEthernetNetPortPppoeServiceName=cmEthernetNetPortPppoeServiceName, f3TimeOfDayPortDelayCompensation=f3TimeOfDayPortDelayCompensation, cmPortCpdProfileUplinkFastDispType=cmPortCpdProfileUplinkFastDispType, cmTrafficAclTcpUdpSrcPortNum=cmTrafficAclTcpUdpSrcPortNum, cmEthernetTrafficPortTable=cmEthernetTrafficPortTable, cmFlowCpdV2VlanBridgeDispType=cmFlowCpdV2VlanBridgeDispType, stsVcPathRxTrailTrace=stsVcPathRxTrailTrace, cmEthernetNetPortXdslDsLineAttenuation=cmEthernetNetPortXdslDsLineAttenuation, f3UsbWIFIDonglePortWIFIAllocatedIPFrom=f3UsbWIFIDonglePortWIFIAllocatedIPFrom, cmEthernetAccPortDiagnosticMacAddress=cmEthernetAccPortDiagnosticMacAddress, cmNetPortEncapPcpDEDecIndex=cmNetPortEncapPcpDEDecIndex, cmEthernetNetPortCpdV2Mac0EDispType=cmEthernetNetPortCpdV2Mac0EDispType, bitsPortType=bitsPortType, cmPrioMapV2IngressPrioMappingTable=cmPrioMapV2IngressPrioMappingTable, cmTrafficPortQosShaperCIRLo=cmTrafficPortQosShaperCIRLo, f3FpQosShaperTable=f3FpQosShaperTable, cmQosShaperEIRHi=cmQosShaperEIRHi, cmQosShaperCIR=cmQosShaperCIR, cmEthernetNetPortCpdV2GMRPDispType=cmEthernetNetPortCpdV2GMRPDispType, f3TimeOfDayPortIfIndex=f3TimeOfDayPortIfIndex, cmEthernetNetPortPppoeConnStatus=cmEthernetNetPortPppoeConnStatus, cmEthernetTrafficPortSyncEServiceAvailablePercentage=cmEthernetTrafficPortSyncEServiceAvailablePercentage, EoTDMMode=EoTDMMode, cmPortCpdProfileL2PTDispType=cmPortCpdProfileL2PTDispType, cmQosPolicerProfileTable=cmQosPolicerProfileTable, cmEthernetAccPortCpdV2Mac0CDispType=cmEthernetAccPortCpdV2Mac0CDispType, cmNetPortExpDEPairTable=cmNetPortExpDEPairTable, LearningConfigAction=LearningConfigAction, cmEthernetTrafficPortCpdV2Table=cmEthernetTrafficPortCpdV2Table, cmNetPortIpPrecDEDropIneligiblePrio=cmNetPortIpPrecDEDropIneligiblePrio, e1t1ParentIfIndex=e1t1ParentIfIndex, cmEthernetAccPortCpdV2L2PTTunnelMac=cmEthernetAccPortCpdV2L2PTTunnelMac, e3t3RelatedContainerId=e3t3RelatedContainerId, f3FlowPointCpdV2NonTpmrLLDPDispType=f3FlowPointCpdV2NonTpmrLLDPDispType, cmEthernetNetPortMediaTypeAutoSelected=cmEthernetNetPortMediaTypeAutoSelected, cmEthernetAccPortJdsuExtEntry=cmEthernetAccPortJdsuExtEntry, f3FlowPointCpdV2L2PTDispType=f3FlowPointCpdV2L2PTDispType, f3NetPortQosShaperWredYellowDropProbability=f3NetPortQosShaperWredYellowDropProbability, cmFlowPointCpdProfileMac0DDispType=cmFlowPointCpdProfileMac0DDispType, ocnStmEoTDMMode=ocnStmEoTDMMode, cmEthernetTrafficPortOamAdminState=cmEthernetTrafficPortOamAdminState, cmOAMFlowPointTable=cmOAMFlowPointTable, cmFlowPointMaximumBWHi=cmFlowPointMaximumBWHi, cmEthernetAccPortOuterVlanLoopbackMask=cmEthernetAccPortOuterVlanLoopbackMask, cmEthernetAccPortCpdV2Mac03DispType=cmEthernetAccPortCpdV2Mac03DispType, f3IrigOutputGroupExtensionType=f3IrigOutputGroupExtensionType, cmEthernetAccPortCpdEntry=cmEthernetAccPortCpdEntry, cmFlowCpdV2DtpDispType=cmFlowCpdV2DtpDispType, cmEthernetTrafficPortCpdV2Mac01DispType=cmEthernetTrafficPortCpdV2Mac01DispType, cmFlowPointSecondaryState=cmFlowPointSecondaryState, ocnStmRxTrailTrace=ocnStmRxTrailTrace, e1t1IdlePatternProfile=e1t1IdlePatternProfile, cmFacilityGroups=cmFacilityGroups, cmNetPortPrioMapInPriority=cmNetPortPrioMapInPriority, cmEthernetAccPortIndex=cmEthernetAccPortIndex, sciPortSignalMode=sciPortSignalMode, cmAccPortExtTable=cmAccPortExtTable, WIFIEncryptionType=WIFIEncryptionType, InstallationType=InstallationType, cmEthernetAccPortCpdV2Mac02DispType=cmEthernetAccPortCpdV2Mac02DispType, cmTrafficAclProfileTable=cmTrafficAclProfileTable, f3IrigRs422OutputPortEntityIndex=f3IrigRs422OutputPortEntityIndex, vtVcPathParentIfIndex=vtVcPathParentIfIndex, cmTrafficAclSrcMacAddr=cmTrafficAclSrcMacAddr, cmTrafficPortQosShaperEIRHi=cmTrafficPortQosShaperEIRHi, cmEthernetNetPortCpdV2Mac08DispType=cmEthernetNetPortCpdV2Mac08DispType, cmFlowCpdEthertypeMask=cmFlowCpdEthertypeMask, f3AclRuleActive=f3AclRuleActive, f3EthernetTrafficPortExpDEEncIndex=f3EthernetTrafficPortExpDEEncIndex, cmEthernetTrafficPortMcastRateLimitEnabled=cmEthernetTrafficPortMcastRateLimitEnabled, f3FpQosShaperWfqWeight=f3FpQosShaperWfqWeight, cmMPFlowFPList=cmMPFlowFPList, f3AclRuleSrcIpv4AddressHighLimit=f3AclRuleSrcIpv4AddressHighLimit, f3AclRuleOuterVlanPcpLowLimit=f3AclRuleOuterVlanPcpLowLimit, cmQosQueueProfileBufferSize=cmQosQueueProfileBufferSize, cmEthernetAccPortSvcType=cmEthernetAccPortSvcType, cmFlowCpdV2Mac04DispType=cmFlowCpdV2Mac04DispType, cmEthernetAccPortSfpMediaType=cmEthernetAccPortSfpMediaType, cmEthernetTrafficPortRemotePlugRelativeChannel=cmEthernetTrafficPortRemotePlugRelativeChannel, cmEthernetAccPortOamLocalMode=cmEthernetAccPortOamLocalMode, cmEthernetTrafficPortPlugRelativeChannel=cmEthernetTrafficPortPlugRelativeChannel, cmFlowCpdV2PvstpPlusDispType=cmFlowCpdV2PvstpPlusDispType, cmEthernetAccPortWfqSegmentationCOS=cmEthernetAccPortWfqSegmentationCOS, cmPortCpdProfileEfmOamDispType=cmPortCpdProfileEfmOamDispType, f3AclRuleOuterVlanDeiControl=f3AclRuleOuterVlanDeiControl, cmQosFlowPolicerColorMode=cmQosFlowPolicerColorMode, cmEthernetAccPortSwapPriorityVID=cmEthernetAccPortSwapPriorityVID, FrequencyIdentifier=FrequencyIdentifier, cmEthernetNetPortCpdV2Table=cmEthernetNetPortCpdV2Table, f3GPSReceiverPortOperationalState=f3GPSReceiverPortOperationalState, cmEthernetTrafficPortOamLocalLinkEventsEnabled=cmEthernetTrafficPortOamLocalLinkEventsEnabled, F3Usb3GDCNPINCodeActionType=F3Usb3GDCNPINCodeActionType, cmEthernetTrafficPortCpdIndex=cmEthernetTrafficPortCpdIndex, cmQosQueueProfileTable=cmQosQueueProfileTable, cmPrioMapCOS=cmPrioMapCOS, e3t3SecondaryState=e3t3SecondaryState, cmPortCpdProfileNonTpmrLLDPDispType=cmPortCpdProfileNonTpmrLLDPDispType, f3FlowPointCpdV2LANBridgesDispType=f3FlowPointCpdV2LANBridgesDispType, cmPortCpdProfileLANBridgesDispType=cmPortCpdProfileLANBridgesDispType, cmEthernetTrafficPortOamLocalOamLoopbacksSupported=cmEthernetTrafficPortOamLocalOamLoopbacksSupported, cmTrafficAclDstIpV4Addr=cmTrafficAclDstIpV4Addr, bitsPortGroup=bitsPortGroup, cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl=cmEthernetNetPortLoopbackTestReflectorIPv6AddressControl, CmLinkLossFwdTriggerTypes=CmLinkLossFwdTriggerTypes, f3EnvelopeAssocPolicer=f3EnvelopeAssocPolicer, cmPethPsePortExtTable=cmPethPsePortExtTable, cmEthernetTrafficPortPlugOutOfBandChannelStatus=cmEthernetTrafficPortPlugOutOfBandChannelStatus, cmEthernetAccPortCpdV2PagpDispType=cmEthernetAccPortCpdV2PagpDispType, f3FlowPointCpdV2Mac00DispType=f3FlowPointCpdV2Mac00DispType, f3GPSReceiverPortForcedAntennaConnected=f3GPSReceiverPortForcedAntennaConnected, f3SatelliteEntry=f3SatelliteEntry, f3FlowPointCpdV2EfmOamDispType=f3FlowPointCpdV2EfmOamDispType, cmEthernetAccPortMDIXType=cmEthernetAccPortMDIXType, sciPortIndex=sciPortIndex, DelayOption=DelayOption, VDSLProfileField=VDSLProfileField, cmEthernetNetPortAfpType=cmEthernetNetPortAfpType, cmFlowPointEfIdentificationType=cmFlowPointEfIdentificationType, cmEthernetAccPortPoEStatus=cmEthernetAccPortPoEStatus, cmEthernetNetPortCpdV2PagpDispType=cmEthernetNetPortCpdV2PagpDispType, f3PulsePerSecondPortClockClass=f3PulsePerSecondPortClockClass, ocnStmLoopbackStatus=ocnStmLoopbackStatus, cmFlowPreserveSTagProperties=cmFlowPreserveSTagProperties, cmNetPortExtMcastRateLimitSpeedHi=cmNetPortExtMcastRateLimitSpeedHi, cmTrafficAclProfileStorageType=cmTrafficAclProfileStorageType, cmEthernetTrafficPortLpbkConfig=cmEthernetTrafficPortLpbkConfig, e3t3Index=e3t3Index, cmEthernetAccPortOuterVlanLoopback1=cmEthernetAccPortOuterVlanLoopback1, cmNetPortExpDEEncDropEligiblePrio=cmNetPortExpDEEncDropEligiblePrio, cmFlowPointCpdProfileBPDUDispType=cmFlowPointCpdProfileBPDUDispType, cmFlowCpdV2PagpDispType=cmFlowCpdV2PagpDispType, f3NetPortQosShaperEIRHi=f3NetPortQosShaperEIRHi, cmEthernetAccPortShapingEnabled=cmEthernetAccPortShapingEnabled, f3PolicerEnvelopeIndex=f3PolicerEnvelopeIndex, f3IrigRelayOutputPortEntry=f3IrigRelayOutputPortEntry, cmFlowPointVlanMemberAction=cmFlowPointVlanMemberAction, cmNetPortEncapPcpDEDecEntry=cmNetPortEncapPcpDEDecEntry, cmFlowPointMaximumBWLo=cmFlowPointMaximumBWLo, cmEthernetAccPortCpdV2UplinkFastDispType=cmEthernetAccPortCpdV2UplinkFastDispType, f3EthernetTrafficPortExpDEPairEntry=f3EthernetTrafficPortExpDEPairEntry, cmEthernetTrafficPortLinkLossFwdEnabled=cmEthernetTrafficPortLinkLossFwdEnabled, cmEthernetNetPortCpdV2GARPGroupDispType=cmEthernetNetPortCpdV2GARPGroupDispType, cmEthernetTrafficPortLoopbackConfig=cmEthernetTrafficPortLoopbackConfig, cmQosFlowPolicerEIRMaxLo=cmQosFlowPolicerEIRMaxLo, f3Usb3GDCNPortPUKLeftChances=f3Usb3GDCNPortPUKLeftChances, cmPortCpdProfileGVRPDispType=cmPortCpdProfileGVRPDispType, cmFlowCpdV2Mac0DDispType=cmFlowCpdV2Mac0DDispType, cmEthernetTrafficPortMcastRateLimitSpeedLo=cmEthernetTrafficPortMcastRateLimitSpeedLo, bits8PortGroupRowStatus=bits8PortGroupRowStatus, cmEthernetNetPortCpdDispType=cmEthernetNetPortCpdDispType, cmNetPortIpPrecDEPairEntry=cmNetPortIpPrecDEPairEntry, cmFlowCircuitName=cmFlowCircuitName, f3GPSReceiverPortServiceAvailableTime=f3GPSReceiverPortServiceAvailableTime, f3IrigOpticalOutputPortEntityIndex=f3IrigOpticalOutputPortEntityIndex, cmPrioMapV2PrioMappingCOSValue=cmPrioMapV2PrioMappingCOSValue, pethPsePortExtPowerConsumption=pethPsePortExtPowerConsumption, cmFlowCpdV2PauseDispType=cmFlowCpdV2PauseDispType, cmEthernetNetPortXdslParamEntry=cmEthernetNetPortXdslParamEntry, cmEthernetTrafficPortRemoteSfpSerialNumber=cmEthernetTrafficPortRemoteSfpSerialNumber, cmNetPortEncapPcpDEPairTable=cmNetPortEncapPcpDEPairTable, cmEthernetTrafficPortRemoteSfpLaserWaveLength=cmEthernetTrafficPortRemoteSfpLaserWaveLength, f3TimeOfDayPortGroup=f3TimeOfDayPortGroup, cmFlowPointRefEoMplsPwObject=cmFlowPointRefEoMplsPwObject, cmEthernetMgmtPortEntry=cmEthernetMgmtPortEntry, cmEthernetNetPortCpdV2Index=cmEthernetNetPortCpdV2Index, ocnStmAdminState=ocnStmAdminState, f3FlowPointCpdV2PvstpPlusDispType=f3FlowPointCpdV2PvstpPlusDispType, TrailTraceFormat=TrailTraceFormat, cmEthernetNetPortSfpDateOfManufacture=cmEthernetNetPortSfpDateOfManufacture, cmFlowCpdV2GARPGroupDispType=cmFlowCpdV2GARPGroupDispType, cmPrioMapV2ProfileCosMapModeType=cmPrioMapV2ProfileCosMapModeType, XDSLModulationMode=XDSLModulationMode, SciSignalMode=SciSignalMode, f3IrigOutputUnitPortSecondaryState=f3IrigOutputUnitPortSecondaryState, cmEthernetTrafficPortCpdV2PortAuthenDispType=cmEthernetTrafficPortCpdV2PortAuthenDispType, f3IrigRs422OutputPortTable=f3IrigRs422OutputPortTable, e3t3Table=e3t3Table, f3AclRuleProtocolControl=f3AclRuleProtocolControl, cmEthernetNetPortPppoeSessionId=cmEthernetNetPortPppoeSessionId, cmFlowCTagVlanId=cmFlowCTagVlanId, cmEthernetNetPortLinkLossFwdActive=cmEthernetNetPortLinkLossFwdActive, cmEthernetNetPortCpdV2VtpDispType=cmEthernetNetPortCpdV2VtpDispType, CmControlProtocolDispType=CmControlProtocolDispType, cmEthernetAccPortLinkLossFwdDelay=cmEthernetAccPortLinkLossFwdDelay, cmEthernetAccPortCpdV2Mac0ADispType=cmEthernetAccPortCpdV2Mac0ADispType, ConstellationTypesBitMap=ConstellationTypesBitMap, XDSLControlChannel=XDSLControlChannel, gps10MHzPortOperationalState=gps10MHzPortOperationalState, cmEthernetTrafficPortDiagnoseResult=cmEthernetTrafficPortDiagnoseResult, cmEthernetNetPortXdslUsAttainableRate=cmEthernetNetPortXdslUsAttainableRate, cmEthernetNetPortCpdV2Entry=cmEthernetNetPortCpdV2Entry, cmEthernetTrafficPortEntityIndex=cmEthernetTrafficPortEntityIndex, cmEthernetNetPortCpdV2IslDispType=cmEthernetNetPortCpdV2IslDispType, cmPortCpdProfileIndex=cmPortCpdProfileIndex, bitsPortIdleCode=bitsPortIdleCode, cmEthernetTrafficPortSfpPartNumber=cmEthernetTrafficPortSfpPartNumber, cmEthernetNetPortCpdIndex=cmEthernetNetPortCpdIndex, f3EthernetTrafficPortExpDEDecDropEligible=f3EthernetTrafficPortExpDEDecDropEligible, cmQosFlowPolicerEnvelopeObject=cmQosFlowPolicerEnvelopeObject, cmEthernetNetPortOamLocalVarRtrvsEnabled=cmEthernetNetPortOamLocalVarRtrvsEnabled, f3AclRuleDstIpv6AddressPrefixLen=f3AclRuleDstIpv6AddressPrefixLen, f3GPSReceiverPortSpoofingLocationThreshold=f3GPSReceiverPortSpoofingLocationThreshold, cmEthernetTrafficPortCpdV2Mac09DispType=cmEthernetTrafficPortCpdV2Mac09DispType, cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl=cmEthernetAccPortLoopbackTestReflectorIPv4AddressControl, e1t1IfIndex=e1t1IfIndex, cmEgressPrioMapEntry=cmEgressPrioMapEntry, cmAccPortQosShaperCIRLo=cmAccPortQosShaperCIRLo, clk16PortGroupIndex=clk16PortGroupIndex, f3PulsePerSecondPortPhyInterfaceType=f3PulsePerSecondPortPhyInterfaceType, ieee1588EthernetPortEntry=ieee1588EthernetPortEntry, f3GPSReceiverPortSatMin1Threshold=f3GPSReceiverPortSatMin1Threshold, f3UsbWIFIDonglePortIndex=f3UsbWIFIDonglePortIndex, cmNetPortIpPrecDEDecIndex=cmNetPortIpPrecDEDecIndex, RelativeChannelIdentifier=RelativeChannelIdentifier, cmMPFlowLearningConfigAction=cmMPFlowLearningConfigAction)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmEthernetNetPortSfpMediaType=cmEthernetNetPortSfpMediaType, cmQosQueueProfileEntry=cmQosQueueProfileEntry, cmEthernetAccPortClbDescr=cmEthernetAccPortClbDescr, DeiOuterTagType=DeiOuterTagType, f3TimeOfDayPortInputRate=f3TimeOfDayPortInputRate, cmFlowPointIngressCOS=cmFlowPointIngressCOS, f3PolicerEnvelopeStorageType=f3PolicerEnvelopeStorageType, f3IrigOpticalOutputPortEntry=f3IrigOpticalOutputPortEntry, ieee1588EthernetPortEntityIndex=ieee1588EthernetPortEntityIndex, cmEthernetNetPortExpectedQL=cmEthernetNetPortExpectedQL, cmQosShaperV2StorageType=cmQosShaperV2StorageType, f3AclRuleInnerVlanVIDLowLimit=f3AclRuleInnerVlanVIDLowLimit, bits8PortGroupEntry=bits8PortGroupEntry, f3Usb3GDCNPortIMEI=f3Usb3GDCNPortIMEI, cmFlowCpdV2Mac02DispType=cmFlowCpdV2Mac02DispType, todPps16PortGroupSquelchQL=todPps16PortGroupSquelchQL, cmEthernetTrafficPortLpbkOuterVlanEnabled=cmEthernetTrafficPortLpbkOuterVlanEnabled, ieee1588EthernetPortConfigSpeed=ieee1588EthernetPortConfigSpeed, f3PulsePerSecondPortIfIndex=f3PulsePerSecondPortIfIndex, cmEthernetAccPortTxDeiAction=cmEthernetAccPortTxDeiAction, CmControlProtocolFilterType=CmControlProtocolFilterType, cmQosPolicerV2ColorMarkingEnabled=cmQosPolicerV2ColorMarkingEnabled, ocnStmHighOrderPathType=ocnStmHighOrderPathType, cmEthernetNetPortPppoeParamEntry=cmEthernetNetPortPppoeParamEntry, cmFlowEntry=cmFlowEntry, clk16PortGroupRowStatus=clk16PortGroupRowStatus, cmEthernetAccPortOamRemoteVarRtrvsEnabled=cmEthernetAccPortOamRemoteVarRtrvsEnabled, ocnStmSecondaryState=ocnStmSecondaryState, cmEthernetAccPortCpdV2Mac08DispType=cmEthernetAccPortCpdV2Mac08DispType, XDSLAnnex=XDSLAnnex, cmEthernetAccPortSfpLaserWaveLength=cmEthernetAccPortSfpLaserWaveLength, f3GPSReceiverPortSpoofingPpsThreshold=f3GPSReceiverPortSpoofingPpsThreshold, f3SatelliteIndex=f3SatelliteIndex, cmFlowVlanMemberList=cmFlowVlanMemberList, cmEthernetNetPortXdslActualLinkRateUpStream=cmEthernetNetPortXdslActualLinkRateUpStream, f3PulsePerSecondPortImpedance=f3PulsePerSecondPortImpedance, cmEthernetNetPortCpdV2Mac00DispType=cmEthernetNetPortCpdV2Mac00DispType, CmEthernetSvcType=CmEthernetSvcType, cmFlowCpdV2Mac03DispType=cmFlowCpdV2Mac03DispType, cmEthernetTrafficPortCpdV2EfmOamDispType=cmEthernetTrafficPortCpdV2EfmOamDispType, cmEthernetAccPortDiagnoseEfmLpbkCond=cmEthernetAccPortDiagnoseEfmLpbkCond, cmEthernetTrafficPortRefPrioMapProfile=cmEthernetTrafficPortRefPrioMapProfile, f3PulsePerSecondPortSecondaryState=f3PulsePerSecondPortSecondaryState, cmEthernetAccPortCpdV2GARPDispType=cmEthernetAccPortCpdV2GARPDispType, cmPortCpdProfileBridgeGroupDispType=cmPortCpdProfileBridgeGroupDispType, e1t1InterfaceGroup=e1t1InterfaceGroup, cmEthernetTrafficPortCpdV2BridgeGroupDispType=cmEthernetTrafficPortCpdV2BridgeGroupDispType, cmEthernetTrafficPortOamRemoteMaxPDUSize=cmEthernetTrafficPortOamRemoteMaxPDUSize, cmEthernetTrafficPortLaserIsTunable=cmEthernetTrafficPortLaserIsTunable, cmNetPortPcpDEDecTable=cmNetPortPcpDEDecTable, f3AclRuleInnerVlanPcpLowLimit=f3AclRuleInnerVlanPcpLowLimit, f3GPSReceiverPortSelfSurveyPositionAccuracy=f3GPSReceiverPortSelfSurveyPositionAccuracy, cmAccPortQosShaperSecondaryState=cmAccPortQosShaperSecondaryState, clk16PortGroupSquelchQL=clk16PortGroupSquelchQL, cmQosPolicerProfileIndex=cmQosPolicerProfileIndex, f3IrigRs422OutputPortSecondaryState=f3IrigRs422OutputPortSecondaryState, cmEthernetNetPortCpdV2Mac0ADispType=cmEthernetNetPortCpdV2Mac0ADispType, cmEthernetNetPortSfpName=cmEthernetNetPortSfpName, cmFlowPointWfqGroupEirHi=cmFlowPointWfqGroupEirHi, cmEthernetMgmtPortMDIXType=cmEthernetMgmtPortMDIXType, f3AclRuleTable=f3AclRuleTable, f3Usb3GDCNPortDNS1=f3Usb3GDCNPortDNS1, f3PolicerEnvelopeTable=f3PolicerEnvelopeTable, pcpEncodeGroup=pcpEncodeGroup, cmEthernetAccPortReceivedQL=cmEthernetAccPortReceivedQL, cmEthernetAccPortOamRemoteMacAddress=cmEthernetAccPortOamRemoteMacAddress, cmEthernetNetPortDiagnoseLpbkCond=cmEthernetNetPortDiagnoseLpbkCond, CmAfpType=CmAfpType, cmEthernetTrafficPortLoopbackBlockingEnabled=cmEthernetTrafficPortLoopbackBlockingEnabled, cmEthernetAccPortDiagnosePair1Cond=cmEthernetAccPortDiagnosePair1Cond, todPps16PortGroupSecondaryState=todPps16PortGroupSecondaryState, cmEncapFlowPointStorageType=cmEncapFlowPointStorageType, cmFlowPointIngressVlanMemberList=cmFlowPointIngressVlanMemberList, e3t3FrameFormat=e3t3FrameFormat, cmEthernetNetPortOamEnabled=cmEthernetNetPortOamEnabled, cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled=cmEthernetTrafficPortJDSUControlFramesSnoopingEnabled, cmFlowPointCpdProfileMac05DispType=cmFlowPointCpdProfileMac05DispType, cmPrioMapV2ProfileCosMapControl=cmPrioMapV2ProfileCosMapControl, cmEthernetTrafficPortSfpName=cmEthernetTrafficPortSfpName, cmEthernetAccPortIndependentShaperBW=cmEthernetAccPortIndependentShaperBW, cmFlowPointColorMarkingSupported=cmFlowPointColorMarkingSupported, cmEthernetNetPortLoopbackTestReflectorIPv6Address=cmEthernetNetPortLoopbackTestReflectorIPv6Address, cmEthernetNetPortInsertingAIS=cmEthernetNetPortInsertingAIS, ccGroupEntityIndex=ccGroupEntityIndex, cmEthernetAccPortOamRemoteMaxPDUSize=cmEthernetAccPortOamRemoteMaxPDUSize, PlugType=PlugType, bitsPortCrc4=bitsPortCrc4, cmEthernetAccPortCpdV2BPDUDispType=cmEthernetAccPortCpdV2BPDUDispType, CosMappingMode=CosMappingMode, cmAccPortPcpDEDecEntry=cmAccPortPcpDEDecEntry, cmFlowWfqGroupEirHi=cmFlowWfqGroupEirHi, cmEthernetTrafficPortTxSsm=cmEthernetTrafficPortTxSsm, cmEthernetAccPortLoopbackDestMacAddress=cmEthernetAccPortLoopbackDestMacAddress, cmAccPortQosShaperTable=cmAccPortQosShaperTable, cmNetPortIpPrecDeGroup=cmNetPortIpPrecDeGroup, cmOAMFlowPointVlanMemberAction=cmOAMFlowPointVlanMemberAction, stsVcPathIndex=stsVcPathIndex, cmEthernetAccPortCpdV2PvstpPlusDispType=cmEthernetAccPortCpdV2PvstpPlusDispType, cmEthernetAccPortCpdV2Mac0FDispType=cmEthernetAccPortCpdV2Mac0FDispType, f3FlowPointCpdV2ELMIDispType=f3FlowPointCpdV2ELMIDispType, cmEthernetTrafficPortCpdV2VtpDispType=cmEthernetTrafficPortCpdV2VtpDispType, cmEthernetTrafficPortCpdV2UplinkFastDispType=cmEthernetTrafficPortCpdV2UplinkFastDispType, cmFacilityConformance=cmFacilityConformance, cmFlowPointCpdProfileMac02DispType=cmFlowPointCpdProfileMac02DispType, stsVcPathSecondaryState=stsVcPathSecondaryState, cmEncapFlowPointEgressOuterTagPrioMapEnabled=cmEncapFlowPointEgressOuterTagPrioMapEnabled, E1T1LineType=E1T1LineType, cmEgressOuterTagCtrl=cmEgressOuterTagCtrl, cmFlowOuterTagPrioEnabled=cmFlowOuterTagPrioEnabled, cmEthernetAccPortPowerdDeviceDetection=cmEthernetAccPortPowerdDeviceDetection, f3AclRuleDstPortHighLimit=f3AclRuleDstPortHighLimit, cmNetPortIpPrecDEDecTable=cmNetPortIpPrecDEDecTable, cmEthernetTrafficPortPlugMode=cmEthernetTrafficPortPlugMode, f3FpQosPolicerEIRMaxHi=f3FpQosPolicerEIRMaxHi, f3EthernetTrafficPortExpDeGroup=f3EthernetTrafficPortExpDeGroup, bits8PortGroupAdminState=bits8PortGroupAdminState, FlowVlanActionType=FlowVlanActionType, SynceRxSsmQl=SynceRxSsmQl, cmEthernetAccPortLinkLossFwdSignalType=cmEthernetAccPortLinkLossFwdSignalType, ocnStmSfpPartNumber=ocnStmSfpPartNumber, cmQosShaperWredGreenMinQueueThreshold=cmQosShaperWredGreenMinQueueThreshold, f3FpQosShaperEntry=f3FpQosShaperEntry, f3NetPortQosShaperSecondaryState=f3NetPortQosShaperSecondaryState, f3PolicerEnvelopeEntry=f3PolicerEnvelopeEntry, cmQosFlowPolicerAlgorithm=cmQosFlowPolicerAlgorithm, f3Usb3GDCNPortUserName=f3Usb3GDCNPortUserName, CmOamDiscoveryState=CmOamDiscoveryState, cmEthernetAccPortLinkLossFwdTxActionType=cmEthernetAccPortLinkLossFwdTxActionType, vtVcPathExpectedSignalLabel=vtVcPathExpectedSignalLabel, BandwidthProfileMode=BandwidthProfileMode, cmEthernetNetPortTxDeiOuterTagType=cmEthernetNetPortTxDeiOuterTagType, f3GPSReceiverPortSelfSurveyControl=f3GPSReceiverPortSelfSurveyControl, cmNetPortEncapPcpDEEncIndex=cmNetPortEncapPcpDEEncIndex, f3IrigRs422OutputPortTimeCode=f3IrigRs422OutputPortTimeCode, cmEthernetAccPortOamLocalOamLoopbacksSupported=cmEthernetAccPortOamLocalOamLoopbacksSupported, cmEthernetAccPortCpdV2Mac0EDispType=cmEthernetAccPortCpdV2Mac0EDispType, cmEthernetNetPortOuterVlanLoopback2=cmEthernetNetPortOuterVlanLoopback2, cmFlowPointCpdProfileBridgeReservedDispType=cmFlowPointCpdProfileBridgeReservedDispType, f3GPSReceiverPortCoordinateLatitude=f3GPSReceiverPortCoordinateLatitude, cmEthernetTrafficPortOuterVlanLoopback1=cmEthernetTrafficPortOuterVlanLoopback1, cmEthernetFlowPointAssociatedCpdProfile=cmEthernetFlowPointAssociatedCpdProfile, ocnStmReceivedQL=ocnStmReceivedQL, cmFlowPointCpdProfileMac0BDispType=cmFlowPointCpdProfileMac0BDispType, e1t1FrameFormat=e1t1FrameFormat, cmFlowA2NCombinedRateLimitHi=cmFlowA2NCombinedRateLimitHi, ieee1588EthernetPortIndex=ieee1588EthernetPortIndex, f3SatelliteSVType=f3SatelliteSVType, cmEthernetMgmtPortOperationalState=cmEthernetMgmtPortOperationalState, cmEthernetTrafficPortLpbkTime=cmEthernetTrafficPortLpbkTime, f3GPSReceiverPortEntry=f3GPSReceiverPortEntry, cmQosQueueProfileStorageType=cmQosQueueProfileStorageType, f3GPSReceiverPortAntennaDelayType=f3GPSReceiverPortAntennaDelayType, cmEthernetNetPortJDSULoopbackVlanList=cmEthernetNetPortJDSULoopbackVlanList, cmFlowPointAdminState=cmFlowPointAdminState, cmFlowRefEoMplsPwObject=cmFlowRefEoMplsPwObject, cmEthernetTrafficPortCpdV2BPDUDispType=cmEthernetTrafficPortCpdV2BPDUDispType, cmFlowOperationalState=cmFlowOperationalState, f3FlowPointCpdV2SSMDispType=f3FlowPointCpdV2SSMDispType, f3GPSReceiverPortServiceAvailablePercentage=f3GPSReceiverPortServiceAvailablePercentage, cmEthernetAccPortMediaTypeAutoSelected=cmEthernetAccPortMediaTypeAutoSelected, cpdV2TrafficPortGroup=cpdV2TrafficPortGroup, f3FpQosPolicerCouplingFlag=f3FpQosPolicerCouplingFlag, cmEthernetAccPortCpdFilterType=cmEthernetAccPortCpdFilterType, cmEthernetNetPortLinkLossFwdTxActionType=cmEthernetNetPortLinkLossFwdTxActionType, f3FpQosPolicerPolicingEnabled=f3FpQosPolicerPolicingEnabled, f3FpQosShaperIndex=f3FpQosShaperIndex, EthernetPortTrafficModel=EthernetPortTrafficModel, f3SatelliteGnssReceiverPort=f3SatelliteGnssReceiverPort, cmFlowLoopAvoidanceObject=cmFlowLoopAvoidanceObject, f3IrigOutputUnitPortDigitalVoltage=f3IrigOutputUnitPortDigitalVoltage, cmEthernetAccPortInnerVlanLoopback2=cmEthernetAccPortInnerVlanLoopback2, cmEthernetMgmtPortConfigSpeed=cmEthernetMgmtPortConfigSpeed, cmEthernetAccPortOuterVlanLoopback3=cmEthernetAccPortOuterVlanLoopback3, cmAccPortQosShaperWredYellowMaxQueueThreshold=cmAccPortQosShaperWredYellowMaxQueueThreshold, cmFlowPointSESFramesLossThresholdRatio=cmFlowPointSESFramesLossThresholdRatio, cmFlowPointCpdProfileMac0CDispType=cmFlowPointCpdProfileMac0CDispType, f3NetPortQosShaperCIRLo=f3NetPortQosShaperCIRLo, cmTrafficAclDstIpV6Addr=cmTrafficAclDstIpV6Addr, cmEthernetTrafficPortLaserFrequency=cmEthernetTrafficPortLaserFrequency, e3t3ParentIfIndex=e3t3ParentIfIndex, cmEthernetAccPortPortVlanPriority=cmEthernetAccPortPortVlanPriority, cmEthernetNetPortExtEntry=cmEthernetNetPortExtEntry, cmPrioMapV2PrioMappingCOSOuterTagPri=cmPrioMapV2PrioMappingCOSOuterTagPri, cmEthernetTrafficPortSvcType=cmEthernetTrafficPortSvcType, f3FpQosPolicerEIRHi=f3FpQosPolicerEIRHi, cmEthernetNetPortAdminState=cmEthernetNetPortAdminState, cpdV2Group=cpdV2Group, cmEthernetTrafficPortPcpDEPairIndex=cmEthernetTrafficPortPcpDEPairIndex, f3UsbWIFIDonglePortEntityIndex=f3UsbWIFIDonglePortEntityIndex, e1t1LineCode=e1t1LineCode, cmPrioMapIndex=cmPrioMapIndex, f3FlowPointCpdV2Index=f3FlowPointCpdV2Index, f3NetPortQosShaperAdminState=f3NetPortQosShaperAdminState, cmEthernetAccPortCpdV2Mac05DispType=cmEthernetAccPortCpdV2Mac05DispType, f3Usb3GDCNPortCurrentPinCode=f3Usb3GDCNPortCurrentPinCode, gps10MHzPortSquelchQL=gps10MHzPortSquelchQL, cmNetPortEncapPcpDEDecInPriority=cmNetPortEncapPcpDEDecInPriority, f3NetPortQosShaperCBS=f3NetPortQosShaperCBS, cmPortCpdProfileMac09DispType=cmPortCpdProfileMac09DispType, cmEthernetTrafficPortInnerVlanLoopback3=cmEthernetTrafficPortInnerVlanLoopback3, f3AclRuleOuterVlanVIDLowLimit=f3AclRuleOuterVlanVIDLowLimit, cmEthernetNetPortCpdV2Mac05DispType=cmEthernetNetPortCpdV2Mac05DispType, pethMainPseExtGroupIndex=pethMainPseExtGroupIndex, f3FlowPointCpdV2Table=f3FlowPointCpdV2Table, ocnStmEntityIndex=ocnStmEntityIndex, cmPrioMapV2ProfileAlias=cmPrioMapV2ProfileAlias, vtVcPathInsertingAIS=vtVcPathInsertingAIS, cmQosPolicerV2AssociatedProfile=cmQosPolicerV2AssociatedProfile, cmFlowA2NBroadcastRateLimitControl=cmFlowA2NBroadcastRateLimitControl, cmTrafficPortQosShaperTable=cmTrafficPortQosShaperTable, cmEthernetTrafficPortOamEnabled=cmEthernetTrafficPortOamEnabled, cmQosShaperTable=cmQosShaperTable, cmAccPortQosShaperEBS=cmAccPortQosShaperEBS, cmEthernetNetPortLaserWDMChannel=cmEthernetNetPortLaserWDMChannel, cmEthernetMgmtPortIndex=cmEthernetMgmtPortIndex, cmTrafficAclSrcIpV4Addr=cmTrafficAclSrcIpV4Addr, cmEthernetNetPortLoopbackDestMacControlEnabled=cmEthernetNetPortLoopbackDestMacControlEnabled, cmEthernetTrafficPortLpbkEntry=cmEthernetTrafficPortLpbkEntry, cmEthernetTrafficPortReceivedQL=cmEthernetTrafficPortReceivedQL, cmAccPortQosShaperEIRHi=cmAccPortQosShaperEIRHi, f3IrigOutputGroupIfIndex=f3IrigOutputGroupIfIndex, cmEthernetNetPortOamRemoteVarRtrvsEnabled=cmEthernetNetPortOamRemoteVarRtrvsEnabled, cmEthernetTrafficPortSfpLaserWaveLengthPicometer=cmEthernetTrafficPortSfpLaserWaveLengthPicometer, sciPortGroup=sciPortGroup, cmEthernetTrafficPortDiagnoseLpbkCond=cmEthernetTrafficPortDiagnoseLpbkCond, cmEthernetFlowPointCpdIndex=cmEthernetFlowPointCpdIndex, cmAccPortQosShaperSoamEIRHi=cmAccPortQosShaperSoamEIRHi, cmNetPortPcpDEEncIndex=cmNetPortPcpDEEncIndex, cmQosShaperV2EIRHi=cmQosShaperV2EIRHi, cmFlowPointRefPrioMapProfile=cmFlowPointRefPrioMapProfile, gps10MHzPortClockClass=gps10MHzPortClockClass, ocnStmMultiplexingStructures=ocnStmMultiplexingStructures, f3IrigOutputUnitPortAdminState=f3IrigOutputUnitPortAdminState, cmFlowSTagMatchRxPrio=cmFlowSTagMatchRxPrio, cmEthernetTrafficPortShapedSpeedHi=cmEthernetTrafficPortShapedSpeedHi, cmEthernetTrafficPortCpdV2Mac04DispType=cmEthernetTrafficPortCpdV2Mac04DispType, cmQosShaperSecondaryState=cmQosShaperSecondaryState, cmAccPortPcpDEDecDropEligible=cmAccPortPcpDEDecDropEligible, cmEthernetTrafficPortExtEntry=cmEthernetTrafficPortExtEntry, cmNetPortExpDEEncEntry=cmNetPortExpDEEncEntry, cmNetPortIpPrecDEDecInPriority=cmNetPortIpPrecDEDecInPriority, cmPortCpdProfileMac04DispType=cmPortCpdProfileMac04DispType, cmTrafficAclDstIpV4AddrMask=cmTrafficAclDstIpV4AddrMask, cmEthernetAccPortSecondaryState=cmEthernetAccPortSecondaryState, e1t1Entry=e1t1Entry, cmFlowMaximumA2NBandwidthHi=cmFlowMaximumA2NBandwidthHi, f3GPSReceiverPortEntityIndex=f3GPSReceiverPortEntityIndex, cmEthernetNetPortLinkLossFwdDelay=cmEthernetNetPortLinkLossFwdDelay, f3TimeOfDayPortAlias=f3TimeOfDayPortAlias, cmPrioMapV2ProfileIngressCosPriority=cmPrioMapV2ProfileIngressCosPriority, cmEthernetNetPortCpdV2Mac06DispType=cmEthernetNetPortCpdV2Mac06DispType, cmPrioMapV2IngressPrioMappingInPriority=cmPrioMapV2IngressPrioMappingInPriority, cmNetPortEncapPcpDEEncTable=cmNetPortEncapPcpDEEncTable, f3PolicerEnvelopeGroup=f3PolicerEnvelopeGroup)
mibBuilder.exportSymbols("CM-FACILITY-MIB", cmFlowPointEgressShapingType=cmFlowPointEgressShapingType, cmEncapFlowPointRowStatus=cmEncapFlowPointRowStatus, cmFlowN2ACIR=cmFlowN2ACIR, cmEthernetAccPortSfpConnectorValue=cmEthernetAccPortSfpConnectorValue, cmAccPortPcpDEEncDropIneligiblePrio=cmAccPortPcpDEEncDropIneligiblePrio, f3Usb3GDCNPortCurrentPukCode=f3Usb3GDCNPortCurrentPukCode, cmNetPortPcpDEPairIndex=cmNetPortPcpDEPairIndex, cmPortCpdProfileMac07DispType=cmPortCpdProfileMac07DispType, f3Usb3GDCNPortAdminState=f3Usb3GDCNPortAdminState, cmEthernetAccPortCpdV2Mac07DispType=cmEthernetAccPortCpdV2Mac07DispType, f3PulsePerSecondPortSquelchControl=f3PulsePerSecondPortSquelchControl, cmEthernetAccPortCpdFilterDescr=cmEthernetAccPortCpdFilterDescr, cmEthernetNetPortAutoDiagEnabled=cmEthernetNetPortAutoDiagEnabled, cmAccPortExtCombinedRateLimitEnabled=cmAccPortExtCombinedRateLimitEnabled, cmEthernetNetPortCpdV2Mac09DispType=cmEthernetNetPortCpdV2Mac09DispType, cmEthernetTrafficPortWfqGroupEirLo=cmEthernetTrafficPortWfqGroupEirLo, f3NetPortQosShaperTable=f3NetPortQosShaperTable, cmTrafficAclTcpUdpDstPortEnabled=cmTrafficAclTcpUdpDstPortEnabled, cmTrafficPortQosShaperIndex=cmTrafficPortQosShaperIndex, cmEthernetNetPortDiagnosePair3Cond=cmEthernetNetPortDiagnosePair3Cond, cmEthernetTrafficPortLpbkStatus=cmEthernetTrafficPortLpbkStatus, cmFlowPointCpdProfileBridgeGroupDispType=cmFlowPointCpdProfileBridgeGroupDispType, cmEthernetNetPortPppoeLcpKeepAlivePeriod=cmEthernetNetPortPppoeLcpKeepAlivePeriod, cmFlowPointCTagVlanId=cmFlowPointCTagVlanId, ocnStmIndex=ocnStmIndex, bits8PortGroupActivePorts=bits8PortGroupActivePorts, f3FpQosPolicerCIRMaxLo=f3FpQosPolicerCIRMaxLo, cmFlowPointMcastRateLimitSpeedLo=cmFlowPointMcastRateLimitSpeedLo, ccGroupPhaseAdjust=ccGroupPhaseAdjust, cmTrafficAclProtocolType=cmTrafficAclProtocolType, cmFlowPointEfRateThresholdLo=cmFlowPointEfRateThresholdLo, PsePowerLevel=PsePowerLevel, cmEthernetTrafficPortRemoteSfpIdentifierValue=cmEthernetTrafficPortRemoteSfpIdentifierValue, cmEthernetTrafficPortTDMEncapsulation=cmEthernetTrafficPortTDMEncapsulation, e1t1LoopbackProfile=e1t1LoopbackProfile, BitsPortType=BitsPortType, f3FpQosShaperCIRHi=f3FpQosShaperCIRHi, f3NetPortQosShaperWredYellowMaxQueueThreshold=f3NetPortQosShaperWredYellowMaxQueueThreshold, cmFlowWfqSegmentationCOS=cmFlowWfqSegmentationCOS, cmFlowPointMcastAndBcastRateLimitEnabled=cmFlowPointMcastAndBcastRateLimitEnabled, f3FlowPointCpdV2Mac06DispType=f3FlowPointCpdV2Mac06DispType, sciPortAdminState=sciPortAdminState, cmEthernetNetPortCpdV2CustomerLLDPDispType=cmEthernetNetPortCpdV2CustomerLLDPDispType, cmEthernetTrafficPortLoopbackDestMacControlEnabled=cmEthernetTrafficPortLoopbackDestMacControlEnabled, cmEthernetAccPortQLModeEnabled=cmEthernetAccPortQLModeEnabled, f3AclRuleSrcMacAddress=f3AclRuleSrcMacAddress, cmFlowPointCpdProfileMac07DispType=cmFlowPointCpdProfileMac07DispType, cmEthernetNetPortCpdTable=cmEthernetNetPortCpdTable, cmNetPortPrioMapCOS=cmNetPortPrioMapCOS, cmEthernetMgmtPortNegotiatedSpeed=cmEthernetMgmtPortNegotiatedSpeed, cmFlowPointCpdProfileLldpDispType=cmFlowPointCpdProfileLldpDispType, cmEthernetTrafficPortCpdV2Mac0BDispType=cmEthernetTrafficPortCpdV2Mac0BDispType, f3FlowPointCpdV2Mac01DispType=f3FlowPointCpdV2Mac01DispType, cmEthernetNetPortCpdEthertypeMask=cmEthernetNetPortCpdEthertypeMask, cmPrioMapXTagPriority=cmPrioMapXTagPriority, cmEthernetNetPortCpdV2GARPDispType=cmEthernetNetPortCpdV2GARPDispType, cmQosShaperWredYellowDropProbability=cmQosShaperWredYellowDropProbability, f3GPSReceiverPortCoordinateAltitude=f3GPSReceiverPortCoordinateAltitude, cmPrioMapV2PrioMappingEncapOuterTagPriority=cmPrioMapV2PrioMappingEncapOuterTagPriority, cmTrafficAclDstIpV6AddrMask=cmTrafficAclDstIpV6AddrMask, cmEthernetNetPortXdslUsSNRMargin=cmEthernetNetPortXdslUsSNRMargin, cmEthernetTrafficPortClbTable=cmEthernetTrafficPortClbTable, cmFlowPointCpdProfileMac04DispType=cmFlowPointCpdProfileMac04DispType, f3AclRuleSrcPortLowLimit=f3AclRuleSrcPortLowLimit, cmTrafficAclProfileEntry=cmTrafficAclProfileEntry, cmFlowPointLoopAvoidance=cmFlowPointLoopAvoidance, bits8PortGroupGroup=bits8PortGroupGroup, f3UsbWIFIDonglePortWIFIDHCPRole=f3UsbWIFIDonglePortWIFIDHCPRole, e1t1RowStatus=e1t1RowStatus, cmEthernetTrafficPortClbLength=cmEthernetTrafficPortClbLength, f3PulsePerSecondPortGroup=f3PulsePerSecondPortGroup, cmQosPolicerV2RowStatus=cmQosPolicerV2RowStatus, cmPrioMapV2ProfileEgressCos=cmPrioMapV2ProfileEgressCos, f3IrigOpticalOutputPortIfIndex=f3IrigOpticalOutputPortIfIndex, f3PulsePerSecondPortPolarity=f3PulsePerSecondPortPolarity, f3FlowPointCpdV2Mac0CDispType=f3FlowPointCpdV2Mac0CDispType, cmEthernetNetPortCpdSubtype=cmEthernetNetPortCpdSubtype, cmEthernetTrafficPortCombinedRateLimitSpeedLo=cmEthernetTrafficPortCombinedRateLimitSpeedLo, ToggleValue=ToggleValue, DynamicModelType=DynamicModelType, cmEthernetNetPortOamId=cmEthernetNetPortOamId, cmEthernetTrafficPortMDIXType=cmEthernetTrafficPortMDIXType, cmPrioMapV2ProfileMapModeType=cmPrioMapV2ProfileMapModeType, cmEthernetAccPortDefaultCOS=cmEthernetAccPortDefaultCOS, cmEthernetNetPortLoopbackSwapSADA=cmEthernetNetPortLoopbackSwapSADA, ccInputPortIfIndex=ccInputPortIfIndex, cmTrafficAclFilterAction=cmTrafficAclFilterAction, cmQosFlowPolicerTypeIndex=cmQosFlowPolicerTypeIndex, cmEthernetTrafficPortEntry=cmEthernetTrafficPortEntry, clk16PortGroupTable=clk16PortGroupTable, IrigTimeCode=IrigTimeCode, cmFlowUntaggedMemberEnabled=cmFlowUntaggedMemberEnabled, f3IrigRelayOutputPortAlias=f3IrigRelayOutputPortAlias, cmEthernetAccPortCpdTable=cmEthernetAccPortCpdTable, cmPethPsePortExtEntry=cmPethPsePortExtEntry, cmEthernetTrafficPortCpdV2Mac07DispType=cmEthernetTrafficPortCpdV2Mac07DispType, f3EthernetTrafficPortExpDEEncInPriority=f3EthernetTrafficPortExpDEEncInPriority, cmMPFlowMemberGroup=cmMPFlowMemberGroup, cmEthernetTrafficPortLpbkInnerVlanEnabled=cmEthernetTrafficPortLpbkInnerVlanEnabled, cmTrafficPortQosShaperBufferSize=cmTrafficPortQosShaperBufferSize, cmFlowPointCpdProfilePortAuthenDispType=cmFlowPointCpdProfilePortAuthenDispType, networkElementTMParamsTable=networkElementTMParamsTable, cmEthernetNetPortSfpConnectorValue=cmEthernetNetPortSfpConnectorValue, f3Usb3GDCNPortStorageType=f3Usb3GDCNPortStorageType, pps16PortGroupSecondaryState=pps16PortGroupSecondaryState, f3EthernetTrafficPortExpDEDecOutPriority=f3EthernetTrafficPortExpDEDecOutPriority, clk16PortGroupAlias=clk16PortGroupAlias, cmFlowESFramesLossThreshold=cmFlowESFramesLossThreshold, cmMPFlowSecondaryState=cmMPFlowSecondaryState, todPps16PortGroupAdminState=todPps16PortGroupAdminState, CmDiagCableCondType=CmDiagCableCondType, cmEthernetFlowPointCpdEntry=cmEthernetFlowPointCpdEntry, f3GPSReceiverPortGnssSystemsBitMap=f3GPSReceiverPortGnssSystemsBitMap, f3AclRuleDstIpv4AddressControl=f3AclRuleDstIpv4AddressControl, cmTrafficPortQosShaperAssociatedQueueProfile=cmTrafficPortQosShaperAssociatedQueueProfile, e1t1RemoteLoopbackRequest=e1t1RemoteLoopbackRequest, e1t1RcvSensitivity=e1t1RcvSensitivity, cmQosFlowPolicerEIRLo=cmQosFlowPolicerEIRLo, f3FlowPointCpdV2Mac0ADispType=f3FlowPointCpdV2Mac0ADispType, cmEthernetTrafficPortSfpRxPowerLevel=cmEthernetTrafficPortSfpRxPowerLevel, cmPortCpdProfileGMRPDispType=cmPortCpdProfileGMRPDispType, cmElineFlowIndex=cmElineFlowIndex, cmTrafficPortQosShaperWfqWeight=cmTrafficPortQosShaperWfqWeight, cmEthernetNetPortJdsuExtTable=cmEthernetNetPortJdsuExtTable, cmFlowMultiCOS=cmFlowMultiCOS, f3AclRulePriority=f3AclRulePriority, pps16PortGroupTODSource=pps16PortGroupTODSource, f3AclRuleEntry=f3AclRuleEntry, cmFlowPointCpdProfileL2PTDispType=cmFlowPointCpdProfileL2PTDispType, f3AclRuleSrcIpv4AddressLowLimit=f3AclRuleSrcIpv4AddressLowLimit, cmPortCpdProfileStorageType=cmPortCpdProfileStorageType, f3IrigOutputGroupEntityIndex=f3IrigOutputGroupEntityIndex, IrigGroupExtensionType=IrigGroupExtensionType, cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl=cmEthernetTrafficPortLoopbackTestReflectorIPv4AddressControl, stsVcPathRowStatus=stsVcPathRowStatus, bitsPortAdminState=bitsPortAdminState, cmAccPortQosShaperSoamCIRHi=cmAccPortQosShaperSoamCIRHi, cmFlowCpdV2LACPDispType=cmFlowCpdV2LACPDispType, f3AclRuleDstIpv6Address=f3AclRuleDstIpv6Address, cmNetPortExpDEPairEntry=cmNetPortExpDEPairEntry, cmFlowPointSTagControl=cmFlowPointSTagControl, cmEthernetNetPortXdslMode=cmEthernetNetPortXdslMode, f3AclRuleOperation=f3AclRuleOperation, cmEthernetAccPortOamLocalVarRtrvsEnabled=cmEthernetAccPortOamLocalVarRtrvsEnabled, cmEthernetTrafficPortCpdV2ELMIDispType=cmEthernetTrafficPortCpdV2ELMIDispType, cmEthernetAccPortSyncEEnabled=cmEthernetAccPortSyncEEnabled, cmNetPortPrioMapIndex=cmNetPortPrioMapIndex, cmEthernetNetPortPppoeOuterVlanPriority=cmEthernetNetPortPppoeOuterVlanPriority, f3FlowPointCpdV2Mac02DispType=f3FlowPointCpdV2Mac02DispType, cmEthernetNetPortWfqGroupEirHi=cmEthernetNetPortWfqGroupEirHi, cmQosFlowPolicerEntry=cmQosFlowPolicerEntry, cmEthernetNetPortPrioMapMode=cmEthernetNetPortPrioMapMode, cmEthernetAccPortCpdDispType=cmEthernetAccPortCpdDispType, f3Usb3GDCNPortPINStatus=f3Usb3GDCNPortPINStatus, cmQosQueueProfileName=cmQosQueueProfileName, cmEthernetNetPortMDIXStatus=cmEthernetNetPortMDIXStatus, cmTrafficPortQosShaperRowStatus=cmTrafficPortQosShaperRowStatus, vtVcPathTable=vtVcPathTable, cmPrioMapV2ProfileStorageType=cmPrioMapV2ProfileStorageType, cmPrioMapTable=cmPrioMapTable, cmPrioMapV2ProfileEntry=cmPrioMapV2ProfileEntry, cmNetPortPrioMapEntry=cmNetPortPrioMapEntry, cmEthernetTrafficPortClbEntry=cmEthernetTrafficPortClbEntry, f3AclRuleSrcIpv6AddressControl=f3AclRuleSrcIpv6AddressControl, cmTrafficAclVlanId=cmTrafficAclVlanId, cmPrioMapInPriority=cmPrioMapInPriority, e1t1PatternLpbkControl=e1t1PatternLpbkControl, f3IrigOpticalOutputPortSecondaryState=f3IrigOpticalOutputPortSecondaryState, cmFlowPointBcastRateLimitEnabled=cmFlowPointBcastRateLimitEnabled, todPps16PortGroupIfIndex=todPps16PortGroupIfIndex, cmEthernetTrafficPortPcpDEPairTable=cmEthernetTrafficPortPcpDEPairTable, cmEthernetNetPortRxDeiOuterTagType=cmEthernetNetPortRxDeiOuterTagType, cmEthernetAccPortEntityIndex=cmEthernetAccPortEntityIndex, cmFlowN2AOuterTagPrioEnabled=cmFlowN2AOuterTagPrioEnabled, cmEthernetAccPortCpdV2VtpDispType=cmEthernetAccPortCpdV2VtpDispType, cmQosFlowPolicerOperationalState=cmQosFlowPolicerOperationalState, gps10MHzPortSignalDirection=gps10MHzPortSignalDirection, cmEthernetAccPortSfpSerialNumber=cmEthernetAccPortSfpSerialNumber, cmQosPolicerProfileName=cmQosPolicerProfileName, cmEthernetAccPortDiagnosePair2Cond=cmEthernetAccPortDiagnosePair2Cond, cmEthernetNetPortXdslDsTxPower=cmEthernetNetPortXdslDsTxPower, cmEthernetNetPortSfpIdentifierValue=cmEthernetNetPortSfpIdentifierValue, EfIdentificationFieldType=EfIdentificationFieldType, cmFlowCpdSubtypeMask=cmFlowCpdSubtypeMask, cmEthernetNetPortCpdV2CdpDispType=cmEthernetNetPortCpdV2CdpDispType, cmEthernetNetPortSfpPartNumber=cmEthernetNetPortSfpPartNumber, cmEthernetTrafficPortCpdV2Mac0EDispType=cmEthernetTrafficPortCpdV2Mac0EDispType, cmPethPsePortExtGroupIndex=cmPethPsePortExtGroupIndex, f3Usb3GDCNPortDNS2=f3Usb3GDCNPortDNS2, cmPrioMapV2PrioMappingPriInPrio=cmPrioMapV2PrioMappingPriInPrio, f3IrigOutputGroupEntry=f3IrigOutputGroupEntry, cmEthernetAccPortAdminState=cmEthernetAccPortAdminState, cmEthernetTrafficPortOamDiscoveryState=cmEthernetTrafficPortOamDiscoveryState, f3GPSReceiverPortPPSGeneratedFlag=f3GPSReceiverPortPPSGeneratedFlag, cmEthernetNetPortCpdV2Mac0FDispType=cmEthernetNetPortCpdV2Mac0FDispType, bitsPortSaBitDesignation=bitsPortSaBitDesignation, cmFlowPointCpdProfileMac09DispType=cmFlowPointCpdProfileMac09DispType, cmNetPortExpDEDecEntry=cmNetPortExpDEDecEntry, f3TimeOfDayPortSecondaryState=f3TimeOfDayPortSecondaryState, f3AclRuleInnerVlanVIDControl=f3AclRuleInnerVlanVIDControl, cmEthernetAccPortRxDeiOuterTagType=cmEthernetAccPortRxDeiOuterTagType, cmEthernetTrafficPortPcpGroup=cmEthernetTrafficPortPcpGroup, cmEthernetAccPortQinQEtherType=cmEthernetAccPortQinQEtherType, cmEthernetTrafficPortPortVlanPriority=cmEthernetTrafficPortPortVlanPriority, cmEthernetNetPortXdslBitSwapEnabled=cmEthernetNetPortXdslBitSwapEnabled, cmEthernetTrafficPortMTU=cmEthernetTrafficPortMTU, cmEthernetNetPortXdslGvectorEnabled=cmEthernetNetPortXdslGvectorEnabled, cmEthernetNetPortInnerVlanLoopback2=cmEthernetNetPortInnerVlanLoopback2, cmEthernetTrafficPortDiagnosePair4Cond=cmEthernetTrafficPortDiagnosePair4Cond, cmFlowPointCpdProfileIndex=cmFlowPointCpdProfileIndex, cmQosFlowPolicerAdminState=cmQosFlowPolicerAdminState, f3IrigRs422OutputPortControlField=f3IrigRs422OutputPortControlField, IrigDigitalSignalVoltage=IrigDigitalSignalVoltage, cmPrioMapOuterTagPriority=cmPrioMapOuterTagPriority, f3Usb3GDCNPortIfIndex=f3Usb3GDCNPortIfIndex, cmFlowActionVlan=cmFlowActionVlan, cmEthernetAccPortCpdV2LACPDispType=cmEthernetAccPortCpdV2LACPDispType, cmFlowSESFramesLossThresholdRatio=cmFlowSESFramesLossThresholdRatio, cmQosShaperV2CIRLo=cmQosShaperV2CIRLo, cmPortCpdProfileMac0FDispType=cmPortCpdProfileMac0FDispType, cmFlowCpdEntry=cmFlowCpdEntry, ocnStmFreqSourceType=ocnStmFreqSourceType, cmEthernetTrafficPortSyncEEnabled=cmEthernetTrafficPortSyncEEnabled, cmEthernetAccPortOamRemoteMode=cmEthernetAccPortOamRemoteMode, bitsPortImpedance=bitsPortImpedance, cmFlowPointCpdProfileVtpDispType=cmFlowPointCpdProfileVtpDispType, cmEthernetAccPortCpdV2Table=cmEthernetAccPortCpdV2Table, cmEthernetTrafficPortPlugFrequency=cmEthernetTrafficPortPlugFrequency, cmEthernetTrafficPortSfpDateOfManufacture=cmEthernetTrafficPortSfpDateOfManufacture, cmEthernetAccPortInnerVlanLoopback1=cmEthernetAccPortInnerVlanLoopback1, f3FpQosPolicerColorMode=f3FpQosPolicerColorMode, cmEthernetAccPortOuterTagTpid=cmEthernetAccPortOuterTagTpid, cmEthernetTrafficPortMDIXStatus=cmEthernetTrafficPortMDIXStatus, cmEthernetAccPortPersistentLoopbackControl=cmEthernetAccPortPersistentLoopbackControl, cmFlowA2NBroadcastRateLimitLo=cmFlowA2NBroadcastRateLimitLo, f3IrigRelayOutputPortOperationalState=f3IrigRelayOutputPortOperationalState, cmFlowPointSTagVlanPriority=cmFlowPointSTagVlanPriority, cmEthernetNetPortLoopbackStatus=cmEthernetNetPortLoopbackStatus, cmQosFlowPolicerCIRMaxLo=cmQosFlowPolicerCIRMaxLo, e3t3EntityIndex=e3t3EntityIndex, pps16PortGroupGroup=pps16PortGroupGroup, IrigRelayOperation=IrigRelayOperation, cmFlowCpdV2Mac0CDispType=cmFlowCpdV2Mac0CDispType, cmEthernetTrafficPortGroup=cmEthernetTrafficPortGroup, sciPortEntry=sciPortEntry, ocnStmGroup=ocnStmGroup, cmEthernetNetPortEntry=cmEthernetNetPortEntry, PPSInputRate=PPSInputRate, cmEthernetTrafficPortRemotePlugITUCbandChannel=cmEthernetTrafficPortRemotePlugITUCbandChannel, cmEthernetNetPortOperationalState=cmEthernetNetPortOperationalState, f3IrigOutputUnitPortTimeCode=f3IrigOutputUnitPortTimeCode, cmFlowPointAssociatedFlowId=cmFlowPointAssociatedFlowId, cmEthernetNetPortTDMEncapsulation=cmEthernetNetPortTDMEncapsulation, cmEthernetTrafficPortRemotePlugFrequency=cmEthernetTrafficPortRemotePlugFrequency)
mibBuilder.exportSymbols("CM-FACILITY-MIB", f3Usb3GDCNPortEntityIndex=f3Usb3GDCNPortEntityIndex, f3TimeOfDayPortTable=f3TimeOfDayPortTable, cmElineFlowEntry=cmElineFlowEntry, f3FpQosShaperEIRHi=f3FpQosShaperEIRHi, cmQosShaperV2CIRHi=cmQosShaperV2CIRHi, cmPrioMapV2PrioMappingPriTable=cmPrioMapV2PrioMappingPriTable, cmEthernetTrafficPortJdsuLoopbackEnabled=cmEthernetTrafficPortJdsuLoopbackEnabled, vtVcPathGroup=vtVcPathGroup, cmEthernetAccPortLoopbackSourceMacAddress=cmEthernetAccPortLoopbackSourceMacAddress, cmFlowPort2=cmFlowPort2, PolicingControl=PolicingControl, cmAccPortExtBcastRateLimitSpeedLo=cmAccPortExtBcastRateLimitSpeedLo, cmPrioMapV2ProfileGroup=cmPrioMapV2ProfileGroup, cmNetPortEncapPcpDEDecOutPriority=cmNetPortEncapPcpDEDecOutPriority, cmNetPortIpPrecDEDecEntry=cmNetPortIpPrecDEDecEntry, RxDeiAction=RxDeiAction, cmFlowPointStorageType=cmFlowPointStorageType, vtVcPathOperationalState=vtVcPathOperationalState, gps10MHzPortAdminState=gps10MHzPortAdminState, cmNetPortExtCombinedRateLimitSpeedLo=cmNetPortExtCombinedRateLimitSpeedLo, cmTrafficAclTcpUdpSrcPortEnabled=cmTrafficAclTcpUdpSrcPortEnabled, cmEthernetTrafficPortCpdV2L2PTDispType=cmEthernetTrafficPortCpdV2L2PTDispType, cmFlowN2AEIRHi=cmFlowN2AEIRHi, cmEthernetAccPortCpdV2BridgeGroupDispType=cmEthernetAccPortCpdV2BridgeGroupDispType, gps10MHzPortInputSignalType=gps10MHzPortInputSignalType, cmQosShaperV2WFQWeight=cmQosShaperV2WFQWeight, cmEthernetNetPortShapingEnabled=cmEthernetNetPortShapingEnabled, cmQosShaperAdminState=cmQosShaperAdminState, f3UsbWIFIDonglePortIfIndex=f3UsbWIFIDonglePortIfIndex, f3GPSReceiverPortHorizontalAccuracy=f3GPSReceiverPortHorizontalAccuracy, cmEthernetTrafficPortWfqSegmentationCOS=cmEthernetTrafficPortWfqSegmentationCOS, f3TimeOfDayPortSquelchControl=f3TimeOfDayPortSquelchControl, cmEthernetTrafficPortLoopbackTestReflectorIPv6Address=cmEthernetTrafficPortLoopbackTestReflectorIPv6Address, cmEthernetAccPortRxPauseDisposition=cmEthernetAccPortRxPauseDisposition, cmEthernetNetPortLoopbackSourceMacControlEnabled=cmEthernetNetPortLoopbackSourceMacControlEnabled, cmEthernetTrafficPortSfpLinkLength=cmEthernetTrafficPortSfpLinkLength, CmDiagAutoNegCondType=CmDiagAutoNegCondType, f3EnvelopeAssocPolicerEntry=f3EnvelopeAssocPolicerEntry, f3FlowPointCpdV2Mac0BDispType=f3FlowPointCpdV2Mac0BDispType, f3AclRuleIpV6FlowLabelControl=f3AclRuleIpV6FlowLabelControl, cmEthernetAccPortClbIndex=cmEthernetAccPortClbIndex, cmQosShaperV2LowLatencyControl=cmQosShaperV2LowLatencyControl, CmRemoteLinkIds=CmRemoteLinkIds, cmPortCpdProfileName=cmPortCpdProfileName, f3PolicerEnvelopeRowStatus=f3PolicerEnvelopeRowStatus, cmEthernetAccPortOamRemoteOamLoopbacksSupported=cmEthernetAccPortOamRemoteOamLoopbacksSupported, f3IrigRs422OutputPortAdminState=f3IrigRs422OutputPortAdminState, CmLoopbackType=CmLoopbackType, cmEthernetTrafficPortTagFrameControl=cmEthernetTrafficPortTagFrameControl, cmEthernetTrafficPortCpdV2Index=cmEthernetTrafficPortCpdV2Index, f3AclRuleInnerVlanPcpControl=f3AclRuleInnerVlanPcpControl, stsVcPathLowOrderPathType=stsVcPathLowOrderPathType, f3AclRuleSrcMacAddressControl=f3AclRuleSrcMacAddressControl, cmNetPortEncapPcpDEEncDropEligiblePrio=cmNetPortEncapPcpDEEncDropEligiblePrio, cmEthernetNetPortOamRemoteUnidirSupportEnabled=cmEthernetNetPortOamRemoteUnidirSupportEnabled, f3Usb3GDCNPortRowStatus=f3Usb3GDCNPortRowStatus, cmEthernetTrafficPortInnerVlanLoopback2=cmEthernetTrafficPortInnerVlanLoopback2, cmTrafficAclFilterType=cmTrafficAclFilterType, f3AclRuleCosOverrideControl=f3AclRuleCosOverrideControl, cmNetPortIpPrecDEEncIndex=cmNetPortIpPrecDEEncIndex, vtVcPathExpectedTrailTrace=vtVcPathExpectedTrailTrace, cmPrioMapV2ProfileRowStatus=cmPrioMapV2ProfileRowStatus, cmFlowA2NMulticastRateLimitControl=cmFlowA2NMulticastRateLimitControl, cmQosShaperEBS=cmQosShaperEBS, cmEthernetTrafficPortDiagnosticMacAddress=cmEthernetTrafficPortDiagnosticMacAddress, cmEthernetTrafficPortTransmitQL=cmEthernetTrafficPortTransmitQL, cmFlowPointIngressMultiCOS=cmFlowPointIngressMultiCOS, cmNetPortEncapPcpDEDropEligiblePrio=cmNetPortEncapPcpDEDropEligiblePrio, f3IrigOutputGroupExtensionDetection=f3IrigOutputGroupExtensionDetection, cmTrafficAclEnabled=cmTrafficAclEnabled, cmEthernetNetPortJDSUControlFramesSnoopingEnabled=cmEthernetNetPortJDSUControlFramesSnoopingEnabled, cmFlowN2ACIRHi=cmFlowN2ACIRHi, cmEthernetAccPortInnerVlanLoopback3=cmEthernetAccPortInnerVlanLoopback3, f3AclRuleSrcIpv6Address=f3AclRuleSrcIpv6Address, CcActivePortState=CcActivePortState, cmEthernetAccPortJdsuExtTable=cmEthernetAccPortJdsuExtTable, cmFlowPointEgressOuterTagPrioMapEnabled=cmFlowPointEgressOuterTagPrioMapEnabled, todPps16PortGroupOutputFormat=todPps16PortGroupOutputFormat, cmMPFlowGroup=cmMPFlowGroup, GPSAntennaStatus=GPSAntennaStatus, cmEthernetTrafficPortPhyType=cmEthernetTrafficPortPhyType, f3SatelliteTable=f3SatelliteTable, cmEthernetTrafficPortLinkLossFwdActive=cmEthernetTrafficPortLinkLossFwdActive, f3Usb3GDCNMuxOperationalMode=f3Usb3GDCNMuxOperationalMode, ocnStmBerDegThreshold=ocnStmBerDegThreshold, cmEthernetAccPortShapedSpeedLo=cmEthernetAccPortShapedSpeedLo, cmEthernetNetPortQinQEtherType=cmEthernetNetPortQinQEtherType, bitsPortExpectedQL=bitsPortExpectedQL, cmQosPolicerV2SecondaryState=cmQosPolicerV2SecondaryState, f3TimeOfDayPortAdminState=f3TimeOfDayPortAdminState, f3IrigOpticalOutputPortControlField=f3IrigOpticalOutputPortControlField, GFPEncapsulationType=GFPEncapsulationType, bitsPortReceivedQL=bitsPortReceivedQL, cmAccPortPcpDEEncTable=cmAccPortPcpDEEncTable, cmEthernetAccPortJDSUControlFramesSnoopingEnabled=cmEthernetAccPortJDSUControlFramesSnoopingEnabled, f3IrigOpticalOutputPortTable=f3IrigOpticalOutputPortTable, cmFlowPointMcastRateLimitEnabled=cmFlowPointMcastRateLimitEnabled, f3AclRuleRowStatus=f3AclRuleRowStatus, cmEthernetNetPortCpdV2NonTpmrLLDPDispType=cmEthernetNetPortCpdV2NonTpmrLLDPDispType, cmEthernetAccPortOamAdminDisposition=cmEthernetAccPortOamAdminDisposition, cmQosShaperDirection=cmQosShaperDirection, cmTrafficAclSrcMacAddrEnabled=cmTrafficAclSrcMacAddrEnabled, SatelliteHealth=SatelliteHealth, e1t1LineType=e1t1LineType, cmEthernetAccPortRxDeiAction=cmEthernetAccPortRxDeiAction, cmEthernetTrafficPortDiagnosePair1Cond=cmEthernetTrafficPortDiagnosePair1Cond, ConstellationType=ConstellationType, cmEthernetTrafficPortCpdV2Mac03DispType=cmEthernetTrafficPortCpdV2Mac03DispType, bits8PortGroupQLModeEnabled=bits8PortGroupQLModeEnabled, cmMPFlowtableFullAction=cmMPFlowtableFullAction, cmEthernetAccPortCpdV2ELMIDispType=cmEthernetAccPortCpdV2ELMIDispType, cmEthernetAccPortDiagnoseTestTime=cmEthernetAccPortDiagnoseTestTime, cmEncapFlowPointSTagControl=cmEncapFlowPointSTagControl, cmEthernetTrafficPortPcpDEDecDropEligible=cmEthernetTrafficPortPcpDEDecDropEligible, cmFlowCpdV2LACPMarkerDispType=cmFlowCpdV2LACPMarkerDispType, cmMPFlowAdminState=cmMPFlowAdminState, f3GPSReceiverPortInstallationType=f3GPSReceiverPortInstallationType, cmFlowPointCpdProfileDtpDispType=cmFlowPointCpdProfileDtpDispType, cmEthernetTrafficPortWfqGroupCOS=cmEthernetTrafficPortWfqGroupCOS, cmMPFlowLearningEnabled=cmMPFlowLearningEnabled, cmEthernetTrafficPortSfpLaserWaveLength=cmEthernetTrafficPortSfpLaserWaveLength, cmAccPortPcpDEEncEntry=cmAccPortPcpDEEncEntry, cmAccPortExtBcastRateLimitEnabled=cmAccPortExtBcastRateLimitEnabled, f3FlowPointCpdV2NearestLLDPDispType=f3FlowPointCpdV2NearestLLDPDispType, cmOAMFlowPointSESFramesLossThresholdRatio=cmOAMFlowPointSESFramesLossThresholdRatio, f3IrigRs422OutputPortAlias=f3IrigRs422OutputPortAlias, cmFlowCpdV2LANBridgesDispType=cmFlowCpdV2LANBridgesDispType, f3SatelliteGroup=f3SatelliteGroup, cmEthernetNetPortOamRemoteLinkEventsEnabled=cmEthernetNetPortOamRemoteLinkEventsEnabled, cmPortCpdProfileMac08DispType=cmPortCpdProfileMac08DispType, cmEthernetAccPortWfqGroupEirLo=cmEthernetAccPortWfqGroupEirLo, ocnStmSfpHardwareRevision=ocnStmSfpHardwareRevision, f3FpQosPolicerEntry=f3FpQosPolicerEntry, cmEthernetAccPortLoopbackTestReflectorIPv6Address=cmEthernetAccPortLoopbackTestReflectorIPv6Address, cmTrafficAclRulesTable=cmTrafficAclRulesTable, cmFlowPointCpdProfileMac0EDispType=cmFlowPointCpdProfileMac0EDispType, cmFlowCpdV2Mac0BDispType=cmFlowCpdV2Mac0BDispType)
