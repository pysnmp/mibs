#
# PySNMP MIB module EATON-ATS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eaton/EATON-ATS2-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:01:50 2024
# On host fv-az1433-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
sts, = mibBuilder.importSymbols("EATON-OIDS", "sts")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, Bits, Unsigned32, ObjectIdentity, ModuleIdentity, TimeTicks, Counter32, MibIdentifier, Integer32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "Bits", "Unsigned32", "ObjectIdentity", "ModuleIdentity", "TimeTicks", "Counter32", "MibIdentifier", "Integer32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ats2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 534, 10, 2))
ats2.setRevisions(('2014-07-31 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ats2.setRevisionsDescriptions(('Initial release.',))
if mibBuilder.loadTexts: ats2.setLastUpdated('201407311200Z')
if mibBuilder.loadTexts: ats2.setOrganization('Eaton Corporation')
if mibBuilder.loadTexts: ats2.setContactInfo('www.eaton.com')
if mibBuilder.loadTexts: ats2.setDescription('The MIB module for Eaton ATS (Automatic Transfer Switch).')
ats2Ident = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 1))
ats2Measure = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 2))
ats2Status = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 3))
ats2Config = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 4))
ats2Environment = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 5))
ats2Traps = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 10))
class UnixTimeStamp(TextualConvention, Counter32):
    description = 'Unix time stamp.  Measured in seconds since January 1, 1970.'
    status = 'current'
    displayHint = 'dddddddddd'

ats2IdentManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentManufacturer.setStatus('current')
if mibBuilder.loadTexts: ats2IdentManufacturer.setDescription('The manufacturer name.')
ats2IdentModel = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentModel.setStatus('current')
if mibBuilder.loadTexts: ats2IdentModel.setDescription('Device model name.')
ats2IdentFWVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentFWVersion.setStatus('current')
if mibBuilder.loadTexts: ats2IdentFWVersion.setDescription('Device F/W version.')
ats2IdentRelease = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentRelease.setStatus('current')
if mibBuilder.loadTexts: ats2IdentRelease.setDescription('The released date.')
ats2IdentSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentSerialNumber.setStatus('current')
if mibBuilder.loadTexts: ats2IdentSerialNumber.setDescription('Device serial number')
ats2IdentPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentPartNumber.setStatus('current')
if mibBuilder.loadTexts: ats2IdentPartNumber.setDescription('Device part number')
ats2IdentAgentVersion = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2IdentAgentVersion.setStatus('current')
if mibBuilder.loadTexts: ats2IdentAgentVersion.setDescription('Communication Card F/W version')
ats2Input = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 1))
ats2InputDephasing = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 1, 1), Integer32()).setUnits('degrees').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputDephasing.setStatus('current')
if mibBuilder.loadTexts: ats2InputDephasing.setDescription('The dephasing in between Source 1 and Source 2.')
ats2InputTable = MibTable((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 2), )
if mibBuilder.loadTexts: ats2InputTable.setStatus('current')
if mibBuilder.loadTexts: ats2InputTable.setDescription('The table of input information.')
ats2Output = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 3))
ats2OperationMode = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("initialization", 1), ("diagnosis", 2), ("off", 3), ("source1", 4), ("source2", 5), ("safe", 6), ("fault", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2OperationMode.setStatus('current')
if mibBuilder.loadTexts: ats2OperationMode.setDescription('The operation mode.')
ats2InputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 2, 1), ).setIndexNames((0, "EATON-ATS2-MIB", "ats2InputIndex"))
if mibBuilder.loadTexts: ats2InputEntry.setStatus('current')
if mibBuilder.loadTexts: ats2InputEntry.setDescription('The input information of each source input:\n\t\t<node>.1   source1\n\t\t<node>.2   source2')
ats2InputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputIndex.setStatus('current')
if mibBuilder.loadTexts: ats2InputIndex.setDescription('Index to input.')
ats2InputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 2, 1, 2), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputVoltage.setStatus('current')
if mibBuilder.loadTexts: ats2InputVoltage.setDescription('The input voltage in front of relay. Units are 0.1 V.')
ats2InputFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 2, 1, 3), Integer32()).setUnits('0.1 Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputFrequency.setStatus('current')
if mibBuilder.loadTexts: ats2InputFrequency.setDescription('The input frequency.  Units are 0.1 Hz.')
ats2OutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 3, 1), Integer32()).setUnits('0.1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2OutputVoltage.setStatus('current')
if mibBuilder.loadTexts: ats2OutputVoltage.setDescription('The output voltage. Units are 0.1 V.')
ats2OutputCurrent = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 2, 3, 2), Integer32()).setUnits('0.1 A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2OutputCurrent.setStatus('current')
if mibBuilder.loadTexts: ats2OutputCurrent.setDescription('The output current. Units are 0.1 A.')
ats2InputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 1))
ats2InputStatusDephasing = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("outOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusDephasing.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusDephasing.setDescription('The dephasing status in between Source 1 and Source 2.')
ats2InputStatusTable = MibTable((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2), )
if mibBuilder.loadTexts: ats2InputStatusTable.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusTable.setDescription('The table of input status.')
ats2OutputStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3))
ats2InputStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1), ).setIndexNames((0, "EATON-ATS2-MIB", "ats2InputStatusIndex"))
if mibBuilder.loadTexts: ats2InputStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusEntry.setDescription('The input flow status:\n\t\t<node>.1   source1\n\t\t<node>.2   source2')
ats2InputStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusIndex.setDescription('Index of input entry.')
ats2InputStatusFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("outOfRange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusFrequency.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusFrequency.setDescription('The status of input frequency.')
ats2InputStatusGood = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("voltageOrFreqOutofRange", 1), ("voltageAndFreqNormalRange", 2), ("voltageDeratedRangeAndFreqNormalRange", 3), ("voltageAndFreqNormalRangeWaveformNok", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusGood.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusGood.setDescription('The summarized status of input AC flow.')
ats2InputStatusInternalFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("internalFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusInternalFailure.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusInternalFailure.setDescription('The internal fault status of input.')
ats2InputStatusVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normalRange", 1), ("deratedRange", 2), ("outofRange", 3), ("missing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusVoltage.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusVoltage.setDescription('The status of input voltage.')
ats2InputStatusUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notPoweringLoad", 1), ("poweringLoad", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2InputStatusUsed.setStatus('current')
if mibBuilder.loadTexts: ats2InputStatusUsed.setDescription('The status of input relay.')
ats2StatusInternalFailure = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("internalFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusInternalFailure.setStatus('current')
if mibBuilder.loadTexts: ats2StatusInternalFailure.setDescription('Output fault.')
ats2StatusOutput = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outputNotPowered", 1), ("outputPowered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusOutput.setStatus('current')
if mibBuilder.loadTexts: ats2StatusOutput.setDescription('Output powered status.')
ats2StatusOverload = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOverload", 1), ("warningOverload", 2), ("criticalOverload", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusOverload.setStatus('current')
if mibBuilder.loadTexts: ats2StatusOverload.setDescription('The output overload status.')
ats2StatusOverTemperature = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOverTemperature", 1), ("overTemperature", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusOverTemperature.setStatus('current')
if mibBuilder.loadTexts: ats2StatusOverTemperature.setDescription('The over temperature status.')
ats2StatusShortCircuit = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noShortCircuit", 1), ("shortCircuit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusShortCircuit.setStatus('current')
if mibBuilder.loadTexts: ats2StatusShortCircuit.setDescription('Short circuit status.')
ats2StatusCommunicationLost = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("communicationLost", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: ats2StatusCommunicationLost.setDescription('Communication failure status.')
ats2StatusConfigurationFailure = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("good", 1), ("configurationFailure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2StatusConfigurationFailure.setStatus('current')
if mibBuilder.loadTexts: ats2StatusConfigurationFailure.setDescription('Configuration failure status.')
ats2ConfigTime = MibIdentifier((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 1))
ats2ConfigInputVoltageRating = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 2), Integer32()).setUnits('1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigInputVoltageRating.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigInputVoltageRating.setDescription('The input voltage rating. Unit is 1 V.')
ats2ConfigInputFrequencyRating = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 3), Integer32()).setUnits('Hz').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigInputFrequencyRating.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigInputFrequencyRating.setDescription('The input frequency rating. Unit is 1 Hz.')
ats2ConfigOutputVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 4), Integer32()).setUnits('1 V').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ConfigOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigOutputVoltage.setDescription('The output voltage config. Unit is 1 V.')
ats2ConfigPreferred = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("source1", 1), ("source2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ConfigPreferred.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigPreferred.setDescription('The preferred source.')
ats2ConfigSensitivity = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("highSensitivity", 2), ("lowSensitivity", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ConfigSensitivity.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigSensitivity.setDescription('The AC Blackout Sensitivity.')
ats2ConfigTransferMode = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("gap", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ConfigTransferMode.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigTransferMode.setDescription('behavior configuration when transfering from one source to other source not synchronized.')
ats2ConfigTransferTest = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("doneAndPassed", 1), ("doneAndWarning", 2), ("doneAndError", 3), ("aborted", 4), ("inProgress", 5), ("noTestInitiated", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigTransferTest.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigTransferTest.setDescription('The status of transfer test.')
ats2ConfigBrownoutLow = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 9), Integer32()).setUnits('1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigBrownoutLow.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigBrownoutLow.setDescription('Setting of input brownout low voltage. Unit is 1 V.')
ats2ConfigBrownoutLowDerated = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 10), Integer32()).setUnits('1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigBrownoutLowDerated.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigBrownoutLowDerated.setDescription('Setting of input brownout low derated voltage. Unit is 1 V.')
ats2ConfigBrownoutHigh = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 11), Integer32()).setUnits('1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigBrownoutHigh.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigBrownoutHigh.setDescription('Setting of input brownout high voltage. Unit is 1 V.')
ats2ConfigHysteresisVoltage = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 12), Integer32()).setUnits('1 V').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigHysteresisVoltage.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigHysteresisVoltage.setDescription('Hysteresis between loss point and comeback point. Unit is 1 V.')
ats2ConfigTimeRTC = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 1, 1), UnixTimeStamp()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ConfigTimeRTC.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigTimeRTC.setDescription('Clock value.  This could be from either a real-time clock (in which case\n\t\t it is likely writeable) or from a time server via NTP (probably read-only).\n     (since 1/1/1970 at 1:00:00).')
ats2ConfigTimeTextDate = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigTimeTextDate.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigTimeTextDate.setDescription('The present date in MM/DD/YYYY text format.')
ats2ConfigTimeTextTime = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ConfigTimeTextTime.setStatus('current')
if mibBuilder.loadTexts: ats2ConfigTimeTextTime.setDescription('The present time in hh:mm:ss text format.')
ats2EnvRemoteTemp = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2EnvRemoteTemp.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteTemp.setDescription("The reading of an EMP's temperature sensor.")
ats2EnvRemoteHumidity = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2EnvRemoteHumidity.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteHumidity.setDescription("The reading of an EMP's humidity sensor.")
ats2EnvNumContacts = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2EnvNumContacts.setStatus('current')
if mibBuilder.loadTexts: ats2EnvNumContacts.setDescription('The number of Contacts in the ats2ContactSenseTable.\n        This object indicates the number of rows in the \n        ats2ContactSenseTable.')
ats2ContactSenseTable = MibTable((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4), )
if mibBuilder.loadTexts: ats2ContactSenseTable.setStatus('current')
if mibBuilder.loadTexts: ats2ContactSenseTable.setDescription('A list of Contact Sensing table entries.  \n        The number of entries is given by the value of \n        ats2EnvNumContacts.')
ats2ContactsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4, 1), ).setIndexNames((0, "EATON-ATS2-MIB", "ats2ContactIndex"))
if mibBuilder.loadTexts: ats2ContactsTableEntry.setStatus('current')
if mibBuilder.loadTexts: ats2ContactsTableEntry.setDescription('An entry containing information applicable \n        to a particular Contact input.')
ats2ContactIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ContactIndex.setStatus('current')
if mibBuilder.loadTexts: ats2ContactIndex.setDescription('The Contact identifier; identical to the Contact Number.\n        This object is not-accessible to MIB browsers, but had to be changed to\n        read-only to satisfy SMIv2 syntax checkers if it is included in traps.')
ats2ContactType = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("anyChange", 3), ("notUsed", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ContactType.setStatus('current')
if mibBuilder.loadTexts: ats2ContactType.setDescription("The normal state for this contact.  The 'other' (not 'Normally')\n        state is the Active state for generating the ats2tdContactActiveNotice\n        trap.  If anyChange(3) is selected, then this trap is sent\n        any time the contact changes to either Open or Closed.\n        No traps are sent if the Contact is set to notUsed(4).\n        In many cases, the configuration for Contacts may be done by other \n        means, so this object may be read-only.")
ats2ContactState = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("open", 1), ("closed", 2), ("openWithNotice", 3), ("closedWithNotice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ats2ContactState.setStatus('current')
if mibBuilder.loadTexts: ats2ContactState.setDescription('The current state of the Contact input;\n        the value is based on the open/closed input state \n        and the setting for ats2ContactType.\n        When entering the openWithNotice(3) and closedWithNotice(4) \n        states, no entries added to the ats2AlarmTable, but\n        the ats2tdContactActiveNotice trap is sent.')
ats2ContactDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2ContactDescr.setStatus('current')
if mibBuilder.loadTexts: ats2ContactDescr.setDescription('A label identifying the Contact.  This object should be\n        set by the administrator.')
ats2EnvRemoteTempLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2EnvRemoteTempLowerLimit.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteTempLowerLimit.setDescription('The Lower Limit of the EMP temperature; if ats2EnvRemoteTemp \n        falls below this value, the ats2RemoteTempBad alarm will occur.')
ats2EnvRemoteTempUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 200))).setUnits('degrees Centigrade').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2EnvRemoteTempUpperLimit.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteTempUpperLimit.setDescription('The Upper Limit of the EMP temperature; if ats2EnvRemoteTemp \n        rises above this value, the ats2RemoteTempBad alarm will occur.\n        This value should be greater than ats2EnvRemoteTempLowerLimit.')
ats2EnvRemoteHumidityLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2EnvRemoteHumidityLowerLimit.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteHumidityLowerLimit.setDescription('The Lower Limit of the EMP humidity reading; if ats2EnvRemoteHumidity\n        falls below this value, the ats2RemoteHumidityBad alarm will occur.')
ats2EnvRemoteHumidityUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 534, 10, 2, 5, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ats2EnvRemoteHumidityUpperLimit.setStatus('current')
if mibBuilder.loadTexts: ats2EnvRemoteHumidityUpperLimit.setDescription('The Upper Limit of the EMP humidity reading; if ats2EnvRemoteHumidity \n        rises above this value, the ats2RemoteHumidityBad alarm will occur.\n        This value should be greater than ats2EnvRemoteHumidityLowerLimit.')
ats2TrapCommunicationLost = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 1))
if mibBuilder.loadTexts: ats2TrapCommunicationLost.setStatus('current')
if mibBuilder.loadTexts: ats2TrapCommunicationLost.setDescription('Communication with the ATS failed.')
ats2TrapCommunicationRecovered = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 2))
if mibBuilder.loadTexts: ats2TrapCommunicationRecovered.setStatus('current')
if mibBuilder.loadTexts: ats2TrapCommunicationRecovered.setDescription('Communication with the ATS recovered.')
ats2TrapOutputPowered = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 3))
if mibBuilder.loadTexts: ats2TrapOutputPowered.setStatus('current')
if mibBuilder.loadTexts: ats2TrapOutputPowered.setDescription('The ATS powers the load.')
ats2TrapOutputNotPowered = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 4))
if mibBuilder.loadTexts: ats2TrapOutputNotPowered.setStatus('current')
if mibBuilder.loadTexts: ats2TrapOutputNotPowered.setDescription('The ATS does not powers the load.')
ats2TrapOverload = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 5))
if mibBuilder.loadTexts: ats2TrapOverload.setStatus('current')
if mibBuilder.loadTexts: ats2TrapOverload.setDescription('The ATS has sensed a critical overload.')
ats2TrapNoOverLoad = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 6))
if mibBuilder.loadTexts: ats2TrapNoOverLoad.setStatus('current')
if mibBuilder.loadTexts: ats2TrapNoOverLoad.setDescription('The critical overload disappeared.')
ats2TrapInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 7))
if mibBuilder.loadTexts: ats2TrapInternalFailure.setStatus('current')
if mibBuilder.loadTexts: ats2TrapInternalFailure.setDescription('The ATS has an internal failure (sum of all HW internal failure).')
ats2TrapNoInternalFailure = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 8))
if mibBuilder.loadTexts: ats2TrapNoInternalFailure.setStatus('current')
if mibBuilder.loadTexts: ats2TrapNoInternalFailure.setDescription('The ATS internal failure disappeared.')
ats2TrapSource1Normal = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 9))
if mibBuilder.loadTexts: ats2TrapSource1Normal.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSource1Normal.setDescription('Source 1 returns to normal.')
ats2TrapSource1OutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 10))
if mibBuilder.loadTexts: ats2TrapSource1OutOfRange.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSource1OutOfRange.setDescription('Source 1 out of range.')
ats2TrapSource2Normal = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 11))
if mibBuilder.loadTexts: ats2TrapSource2Normal.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSource2Normal.setDescription('Source 2 returns to normal.')
ats2TrapSource2OutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 12))
if mibBuilder.loadTexts: ats2TrapSource2OutOfRange.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSource2OutOfRange.setDescription('Source 2 out of range.')
ats2TrapSourceDesynchronized = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 13))
if mibBuilder.loadTexts: ats2TrapSourceDesynchronized.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSourceDesynchronized.setDescription('Source 1 and Source 2 phase are desynchronized.')
ats2TrapSourceSynchronized = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 14))
if mibBuilder.loadTexts: ats2TrapSourceSynchronized.setStatus('current')
if mibBuilder.loadTexts: ats2TrapSourceSynchronized.setDescription('Source 1 and Source 2 phase are synchronized.')
ats2TrapOutputPoweredBySource1 = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 15))
if mibBuilder.loadTexts: ats2TrapOutputPoweredBySource1.setStatus('current')
if mibBuilder.loadTexts: ats2TrapOutputPoweredBySource1.setDescription('Source 1 powers the output.')
ats2TrapOutputPoweredBySource2 = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 16))
if mibBuilder.loadTexts: ats2TrapOutputPoweredBySource2.setStatus('current')
if mibBuilder.loadTexts: ats2TrapOutputPoweredBySource2.setDescription('Source 2 powers the output.')
ats2TrapRemoteTempLow = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 20))
if mibBuilder.loadTexts: ats2TrapRemoteTempLow.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteTempLow.setDescription('The remote temperature, ats2EnvRemoteTemp, has fallen below \n    the set lower limit, ats2EnvRemoteTempLowerLimit.')
ats2TrapRemoteTempHigh = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 21))
if mibBuilder.loadTexts: ats2TrapRemoteTempHigh.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteTempHigh.setDescription('The remote temperature, ats2EnvRemoteTemp, has risen above \n    the set upper limit, xupsEnvRemoteTempUpperLimit.')
ats2TrapRemoteTempNormal = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 22))
if mibBuilder.loadTexts: ats2TrapRemoteTempNormal.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteTempNormal.setDescription('The remote temperature, ats2EnvRemoteTemp, is inside the interval\n       defined by the lower limit and the upper limit.')
ats2TrapRemoteHumidityLow = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 23))
if mibBuilder.loadTexts: ats2TrapRemoteHumidityLow.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteHumidityLow.setDescription('The remote humidity, ats2EnvRemoteHumidity, has fallen below \n    the set lower limit, ats2EnvRemoteHumidityLowerLimit.')
ats2TrapRemoteHumidityHigh = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 24))
if mibBuilder.loadTexts: ats2TrapRemoteHumidityHigh.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteHumidityHigh.setDescription('The remote humidity, ats2EnvRemoteHumidity, has risen above \n    the set upper limit, ats2EnvRemoteHumidityUpperLimit.')
ats2TrapRemoteHumidityNormal = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 25))
if mibBuilder.loadTexts: ats2TrapRemoteHumidityNormal.setStatus('current')
if mibBuilder.loadTexts: ats2TrapRemoteHumidityNormal.setDescription('The remote humidity, ats2EnvRemoteHumidity, is inside the interval\n       defined by the lower limit and the upper limit.')
ats2Contact1ActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 26))
if mibBuilder.loadTexts: ats2Contact1ActiveNotice.setStatus('current')
if mibBuilder.loadTexts: ats2Contact1ActiveNotice.setDescription('The Contact 1 is in its Active state.\n     The following are the situations that generate this trap:\n        For ats2ContactType:    and     ats2ContactState: \n            normallyOpen(1)     and     closedWithNotice(4)\n            normallyClosed(2)   and     openWithNotice(3)\n            anyChange(3)        and     openWithNotice(3) or closedWithNotice(4)')
ats2Contact1InactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 27))
if mibBuilder.loadTexts: ats2Contact1InactiveNotice.setStatus('current')
if mibBuilder.loadTexts: ats2Contact1InactiveNotice.setDescription('The Contact 1 has changed to its Inactive state.')
ats2Contact2ActiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 28))
if mibBuilder.loadTexts: ats2Contact2ActiveNotice.setStatus('current')
if mibBuilder.loadTexts: ats2Contact2ActiveNotice.setDescription('The Contact 2 is in its Active state.\n     The following are the situations that generate this trap:\n        For ats2ContactType:    and     ats2ContactState: \n            normallyOpen(1)     and     closedWithNotice(4)\n            normallyClosed(2)   and     openWithNotice(3)\n            anyChange(3)        and     openWithNotice(3) or closedWithNotice(4)')
ats2Contact2InactiveNotice = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 29))
if mibBuilder.loadTexts: ats2Contact2InactiveNotice.setStatus('current')
if mibBuilder.loadTexts: ats2Contact2InactiveNotice.setDescription('The Contact 2 has changed to its Inactive state.')
ats2TestTrap = NotificationType((1, 3, 6, 1, 4, 1, 534, 10, 2, 10, 40))
if mibBuilder.loadTexts: ats2TestTrap.setStatus('current')
if mibBuilder.loadTexts: ats2TestTrap.setDescription('Sent whenever the trap test feature is used by the communication card.')
mibBuilder.exportSymbols("EATON-ATS2-MIB", ats2Contact1ActiveNotice=ats2Contact1ActiveNotice, ats2=ats2, ats2Contact2InactiveNotice=ats2Contact2InactiveNotice, ats2IdentPartNumber=ats2IdentPartNumber, ats2InputStatusVoltage=ats2InputStatusVoltage, ats2TrapOutputNotPowered=ats2TrapOutputNotPowered, ats2StatusCommunicationLost=ats2StatusCommunicationLost, ats2IdentManufacturer=ats2IdentManufacturer, ats2OutputCurrent=ats2OutputCurrent, ats2ContactType=ats2ContactType, UnixTimeStamp=UnixTimeStamp, ats2ContactsTableEntry=ats2ContactsTableEntry, ats2Status=ats2Status, ats2ConfigTimeTextTime=ats2ConfigTimeTextTime, ats2OutputVoltage=ats2OutputVoltage, ats2OutputStatus=ats2OutputStatus, ats2EnvRemoteHumidity=ats2EnvRemoteHumidity, ats2OperationMode=ats2OperationMode, ats2EnvRemoteHumidityUpperLimit=ats2EnvRemoteHumidityUpperLimit, ats2IdentSerialNumber=ats2IdentSerialNumber, ats2InputFrequency=ats2InputFrequency, ats2InputStatusGood=ats2InputStatusGood, ats2InputStatusDephasing=ats2InputStatusDephasing, ats2InputEntry=ats2InputEntry, ats2StatusOverload=ats2StatusOverload, ats2ConfigTimeRTC=ats2ConfigTimeRTC, ats2TrapCommunicationLost=ats2TrapCommunicationLost, ats2IdentModel=ats2IdentModel, ats2TrapOutputPoweredBySource1=ats2TrapOutputPoweredBySource1, ats2Contact1InactiveNotice=ats2Contact1InactiveNotice, ats2EnvRemoteTempLowerLimit=ats2EnvRemoteTempLowerLimit, ats2Contact2ActiveNotice=ats2Contact2ActiveNotice, ats2InputStatusUsed=ats2InputStatusUsed, ats2TrapCommunicationRecovered=ats2TrapCommunicationRecovered, ats2TrapRemoteHumidityNormal=ats2TrapRemoteHumidityNormal, ats2ConfigBrownoutLow=ats2ConfigBrownoutLow, ats2TrapSource2Normal=ats2TrapSource2Normal, ats2Traps=ats2Traps, ats2IdentFWVersion=ats2IdentFWVersion, ats2TestTrap=ats2TestTrap, ats2TrapRemoteTempNormal=ats2TrapRemoteTempNormal, ats2InputStatusIndex=ats2InputStatusIndex, ats2TrapRemoteHumidityLow=ats2TrapRemoteHumidityLow, ats2ConfigTime=ats2ConfigTime, ats2ContactIndex=ats2ContactIndex, ats2IdentAgentVersion=ats2IdentAgentVersion, ats2StatusShortCircuit=ats2StatusShortCircuit, ats2ConfigTimeTextDate=ats2ConfigTimeTextDate, ats2StatusOverTemperature=ats2StatusOverTemperature, ats2ContactDescr=ats2ContactDescr, ats2Ident=ats2Ident, ats2TrapSource1Normal=ats2TrapSource1Normal, ats2InputStatusInternalFailure=ats2InputStatusInternalFailure, ats2TrapRemoteTempLow=ats2TrapRemoteTempLow, ats2ConfigInputFrequencyRating=ats2ConfigInputFrequencyRating, ats2TrapOutputPowered=ats2TrapOutputPowered, ats2ContactState=ats2ContactState, ats2ContactSenseTable=ats2ContactSenseTable, ats2InputDephasing=ats2InputDephasing, ats2InputVoltage=ats2InputVoltage, ats2TrapOutputPoweredBySource2=ats2TrapOutputPoweredBySource2, ats2Measure=ats2Measure, ats2EnvRemoteTemp=ats2EnvRemoteTemp, ats2TrapSource2OutOfRange=ats2TrapSource2OutOfRange, ats2ConfigInputVoltageRating=ats2ConfigInputVoltageRating, ats2TrapInternalFailure=ats2TrapInternalFailure, ats2InputTable=ats2InputTable, ats2StatusConfigurationFailure=ats2StatusConfigurationFailure, ats2ConfigBrownoutHigh=ats2ConfigBrownoutHigh, ats2EnvRemoteTempUpperLimit=ats2EnvRemoteTempUpperLimit, ats2TrapSourceDesynchronized=ats2TrapSourceDesynchronized, ats2TrapRemoteHumidityHigh=ats2TrapRemoteHumidityHigh, ats2InputIndex=ats2InputIndex, ats2StatusOutput=ats2StatusOutput, ats2TrapRemoteTempHigh=ats2TrapRemoteTempHigh, ats2EnvRemoteHumidityLowerLimit=ats2EnvRemoteHumidityLowerLimit, ats2TrapOverload=ats2TrapOverload, ats2ConfigHysteresisVoltage=ats2ConfigHysteresisVoltage, ats2ConfigPreferred=ats2ConfigPreferred, ats2Config=ats2Config, ats2Input=ats2Input, ats2EnvNumContacts=ats2EnvNumContacts, ats2TrapNoInternalFailure=ats2TrapNoInternalFailure, ats2ConfigOutputVoltage=ats2ConfigOutputVoltage, ats2Output=ats2Output, ats2StatusInternalFailure=ats2StatusInternalFailure, PYSNMP_MODULE_ID=ats2, ats2ConfigTransferTest=ats2ConfigTransferTest, ats2Environment=ats2Environment, ats2InputStatusEntry=ats2InputStatusEntry, ats2InputStatus=ats2InputStatus, ats2InputStatusTable=ats2InputStatusTable, ats2InputStatusFrequency=ats2InputStatusFrequency, ats2ConfigTransferMode=ats2ConfigTransferMode, ats2TrapSourceSynchronized=ats2TrapSourceSynchronized, ats2TrapSource1OutOfRange=ats2TrapSource1OutOfRange, ats2ConfigBrownoutLowDerated=ats2ConfigBrownoutLowDerated, ats2IdentRelease=ats2IdentRelease, ats2ConfigSensitivity=ats2ConfigSensitivity, ats2TrapNoOverLoad=ats2TrapNoOverLoad)
