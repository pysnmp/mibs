#
# PySNMP MIB module MPIOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/maipu/MPIOS-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 13:10:53 2024
# On host fv-az883-299 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
mpMgmt, = mibBuilder.importSymbols("MAIPU-SMI", "mpMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter64, TimeTicks, Gauge32, NotificationType, ObjectIdentity, Counter32, ModuleIdentity, IpAddress, MibIdentifier, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter64", "TimeTicks", "Gauge32", "NotificationType", "ObjectIdentity", "Counter32", "ModuleIdentity", "IpAddress", "MibIdentifier", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
TextualConvention, RowStatus, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "TruthValue", "DisplayString")
mpios = ModuleIdentity((1, 3, 6, 1, 4, 1, 5651, 3, 20))
if mibBuilder.loadTexts: mpios.setLastUpdated('0101050000Z')
if mibBuilder.loadTexts: mpios.setOrganization('Maipu DataComm')
if mibBuilder.loadTexts: mpios.setContactInfo('\tMaipu DataComm\n\t\tCustomer Service\n\n\t\tPostal: Consulate Drive\n\t\t\tChengdu, Sichuan  610041\n\t\t\tChina\n\n\t        Tel: 86-028-5161006\n\n\t\tE-mail: office@maipu.com')
if mibBuilder.loadTexts: mpios.setDescription('The process and memory information of MP2600 infomation!')
class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

iosSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1))
iosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1))
sysMemory = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1))
numBytesFree = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesFree.setStatus('current')
if mibBuilder.loadTexts: numBytesFree.setDescription(' The number of bytes free in the system memory ')
numBlocksFree = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksFree.setStatus('current')
if mibBuilder.loadTexts: numBlocksFree.setDescription(' The number of blocks free in the system memory ')
avgBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeFree.setStatus('current')
if mibBuilder.loadTexts: avgBlockSizeFree.setDescription(' The average block size that is free in the system memory ')
maxBlockSizeFree = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockSizeFree.setStatus('current')
if mibBuilder.loadTexts: maxBlockSizeFree.setDescription(' The largest block size that is free in the memory ')
numBytesAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBytesAlloc.setStatus('current')
if mibBuilder.loadTexts: numBytesAlloc.setDescription(' The number of bytes of system memory that have been allocated by\n                  tasks and system services ')
numBlocksAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numBlocksAlloc.setStatus('current')
if mibBuilder.loadTexts: numBlocksAlloc.setDescription(' The number of blocks of system memory that have been allocated in\n                  the system ')
avgBlockSizeAlloc = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: avgBlockSizeAlloc.setStatus('current')
if mibBuilder.loadTexts: avgBlockSizeAlloc.setDescription(' The average memory block size that has been allocated in the\n                system ')
memoryTotalBytes = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTotalBytes.setStatus('current')
if mibBuilder.loadTexts: memoryTotalBytes.setDescription('The total available memory bytes')
allocBytesPercent = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: allocBytesPercent.setStatus('current')
if mibBuilder.loadTexts: allocBytesPercent.setDescription('The allocated bytes percent which value is allocated bytes divided\n                by total bytes, This value can be in the range from 0 to 100.')
sysTask = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2))
taskTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1), )
if mibBuilder.loadTexts: taskTable.setStatus('current')
if mibBuilder.loadTexts: taskTable.setDescription("Represents the target's task table. Each entry in this table\n                 represents a task")
taskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1), ).setIndexNames((0, "MPIOS-MIB", "taskId"))
if mibBuilder.loadTexts: taskEntry.setStatus('current')
if mibBuilder.loadTexts: taskEntry.setDescription(' Each entry contains information with regards to a task in the\n                system ')
taskId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskId.setStatus('current')
if mibBuilder.loadTexts: taskId.setDescription(' This is the task ID assigned by VxWorks to a task in the\n                  system. A taskId of zero specifies a new task.')
taskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskName.setStatus('current')
if mibBuilder.loadTexts: taskName.setDescription(' This is the name of the VxWorks task.  This value can\n                 only be specified (set) at task creation.')
taskPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskPriority.setStatus('current')
if mibBuilder.loadTexts: taskPriority.setDescription('The priority of the VxWorks task.  This value can be\n                 in the range from 0, the highest priority,\n                 to 255, the lowest priority.')
taskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("task-ready", 1), ("task-suspended", 2), ("task-delay", 3), ("task-deleted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskStatus.setStatus('current')
if mibBuilder.loadTexts: taskStatus.setDescription('This field specifies the current task status.  It\n                 can be used to change the current task state.\n                 For example, to suspend a task, the value of\n                 taskStatus is changed to task-suspended,\n                 to delete a task the value is changed to\n                 task-deleted, etc...')
taskOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskOptions.setStatus('current')
if mibBuilder.loadTexts: taskOptions.setDescription("This value represents the sum of the following\n                 options:\n\n                        value      option\n                         1        VX_SUPERVISOR_MODE(read-only)\n                         2        VX_UNBREAKABLE    (break points ignored)\n                         4        VX_DEALLOC_STACK  (deallocate stack)\n                         8        VX_FP_TASK        (floating point support)\n                        16        VX_STDIO          (read-only)\n                        128        VX_PRIVATE_ENV    (private env. variables)\n                        256        VX_NO_STACK_FILL  (don't fill stack)\n\n                 All the options above can be set at task creation time.\n                 However, once the task is executing the only option\n                 that can be changed is VX_UNBREAKABLE.  The option is\n                 toggled based on the current setting.")
taskMain = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskMain.setStatus('current')
if mibBuilder.loadTexts: taskMain.setDescription('This is the name of the entry function for the VxWorks\n                 task.  This name can only be specified when a task\n                 is created (entry added in the table).  The symbol\n                 must exist in the VxWorks target.')
taskStackPtr = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPtr.setStatus('current')
if mibBuilder.loadTexts: taskStackPtr.setDescription('This is the saved stack pointer for the task.')
taskStackBase = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackBase.setStatus('current')
if mibBuilder.loadTexts: taskStackBase.setDescription('This is the address of the bottom of the stack of\n                 the VxWorks task.')
taskStackPos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackPos.setStatus('current')
if mibBuilder.loadTexts: taskStackPos.setDescription('This is the effective top of the stack in the current\n                 task state.')
taskStackEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackEnd.setStatus('current')
if mibBuilder.loadTexts: taskStackEnd.setDescription('This is the address of the top of the stack of the\n                 VxWorks task.')
taskStackSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: taskStackSize.setStatus('current')
if mibBuilder.loadTexts: taskStackSize.setDescription('This is the actual size of the stack in bytes.  The\n                 size of the stack can only be specified at task\n                 creation (adding an entry to the table).')
taskStackSizeUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackSizeUsage.setStatus('current')
if mibBuilder.loadTexts: taskStackSizeUsage.setDescription('The number of bytes currently in use by the task from\n                 the stack.')
taskStackMaxUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackMaxUsed.setStatus('current')
if mibBuilder.loadTexts: taskStackMaxUsed.setDescription('This is the maximum number of bytes that have been used\n                 by the task from the stack.')
taskStackFree = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskStackFree.setStatus('current')
if mibBuilder.loadTexts: taskStackFree.setDescription('This is the number of bytes that are free currently in\n                 the task stack.')
taskErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskErrorStatus.setStatus('current')
if mibBuilder.loadTexts: taskErrorStatus.setDescription('This is the most recent error status for this task.')
taskDescr = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskDescr.setStatus('current')
if mibBuilder.loadTexts: taskDescr.setDescription('This is description for error task. If the task runs well the\n\t\t\t\t string will be null.')
sysCpu = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3))
sysCpuStatus = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSpyCpu", 1), ("spyCpu", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCpuStatus.setStatus('current')
if mibBuilder.loadTexts: sysCpuStatus.setDescription('This is the status of collecting CPU utilization rate\n\t\t\t\t which include two status: spyCpu (2), noSpyCpu(1), if you\n\t\t\t\t want to get cpuUtilTable and cpuTaskTable, you must make\n\t\t\t\t status to spy cpu')
sysCpuTaskTabView = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("detailed", 1), ("simple", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCpuTaskTabView.setStatus('current')
if mibBuilder.loadTexts: sysCpuTaskTabView.setDescription('This is the status of cpuTaskTable view:\n\t\t\t\tdetailed view is showing every task info and\n\t\t\t\tsimple view is only showing task which had used cpu')
checkCpuTimeInterval = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: checkCpuTimeInterval.setStatus('current')
if mibBuilder.loadTexts: checkCpuTimeInterval.setDescription('check cpu time interval,unit is second')
cpuTaskTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4), )
if mibBuilder.loadTexts: cpuTaskTable.setStatus('current')
if mibBuilder.loadTexts: cpuTaskTable.setDescription("Represents the target's task cpu table. Each entry in this table\n                 represents a task")
cpuTaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1), ).setIndexNames((0, "MPIOS-MIB", "cpuTaskId"))
if mibBuilder.loadTexts: cpuTaskEntry.setStatus('current')
if mibBuilder.loadTexts: cpuTaskEntry.setDescription(' Each entry contains information with regards to a task cpu in the\n                system ')
cpuTaskId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskId.setStatus('current')
if mibBuilder.loadTexts: cpuTaskId.setDescription(' This is the task ID assigned by VxWorks to a task in the\n                  system. A taskId of zero specifies a new task.')
cpuTaskName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskName.setStatus('current')
if mibBuilder.loadTexts: cpuTaskName.setDescription(' This is the name of the VxWorks task.  This value can\n                 only be specified (set) at task creation.')
cpuTaskPri = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskPri.setStatus('current')
if mibBuilder.loadTexts: cpuTaskPri.setDescription('The priority of the VxWorks task.  This value can be\n                 in the range from 0, the highest priority,\n                 to 255, the lowest priority.')
cpuTaskDeltaUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskDeltaUtil.setStatus('current')
if mibBuilder.loadTexts: cpuTaskDeltaUtil.setDescription('The CPU utilization of the VxWorks task during DeltaTicks.\n                 This value can be in the range from 0 to 100.')
cpuTaskDeltaTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskDeltaTicks.setStatus('current')
if mibBuilder.loadTexts: cpuTaskDeltaTicks.setDescription('The task CPU utilization delta ticks.')
cpuTaskAverageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskAverageUtil.setStatus('current')
if mibBuilder.loadTexts: cpuTaskAverageUtil.setDescription('The CPU utilization of the VxWorks task during TotalTicks.\n                 This value can be in the range from 0 to 100.')
cpuTaskTotalTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskTotalTicks.setStatus('current')
if mibBuilder.loadTexts: cpuTaskTotalTicks.setDescription('The total ticks till cpuTaskStatus been start, until the\n                 status be end.')
cpuTaskCurrentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuTaskCurrentUtil.setStatus('current')
if mibBuilder.loadTexts: cpuTaskCurrentUtil.setDescription('The cpu current utilization ')
cpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5), )
if mibBuilder.loadTexts: cpuUtilTable.setStatus('current')
if mibBuilder.loadTexts: cpuUtilTable.setDescription(' The Sys CPU total utilization table ')
cpuUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1), ).setIndexNames((0, "MPIOS-MIB", "cpuUtilCpuId"))
if mibBuilder.loadTexts: cpuUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cpuUtilEntry.setDescription(' The Sys CPU utilization table  at a certain period of time,\n                include two kind of time interval: one is from spy cpu to current\n                show cpu, the other is from last show cpu to current show cpu')
cpuUtilCpuId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilCpuId.setStatus('current')
if mibBuilder.loadTexts: cpuUtilCpuId.setDescription('cpu id for multi-cpu device')
cpuUtilDeltaUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilDeltaUtil.setStatus('current')
if mibBuilder.loadTexts: cpuUtilDeltaUtil.setDescription('The Sys CPU utilization in delta times')
cpuUtilDeltaUsedTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilDeltaUsedTicks.setStatus('current')
if mibBuilder.loadTexts: cpuUtilDeltaUsedTicks.setDescription('The System used ticks in delta ticks')
cpuUtilDeltaTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilDeltaTicks.setStatus('current')
if mibBuilder.loadTexts: cpuUtilDeltaTicks.setDescription('The Sys CPU utilization ticks in delta times')
cpuUtilDeltaTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilDeltaTimes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilDeltaTimes.setDescription('The delta times, unit is second')
cpuUtilAverageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilAverageUtil.setStatus('current')
if mibBuilder.loadTexts: cpuUtilAverageUtil.setDescription('The Sys CPU utilization in total times')
cpuUtilTotalUsedTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilTotalUsedTicks.setStatus('current')
if mibBuilder.loadTexts: cpuUtilTotalUsedTicks.setDescription('The Sys CPU utilization used ticks in total times')
cpuUtilTotalTicks = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilTotalTicks.setStatus('current')
if mibBuilder.loadTexts: cpuUtilTotalTicks.setDescription('The Sys CPU utilization ticks in total times')
cpuUtilTotalTimes = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilTotalTimes.setStatus('current')
if mibBuilder.loadTexts: cpuUtilTotalTimes.setDescription('The total times, unit is second')
cpuUtilCurrentUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 3, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuUtilCurrentUtil.setStatus('current')
if mibBuilder.loadTexts: cpuUtilCurrentUtil.setDescription('The cpu current utilization')
sysTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4))
sysCpuTemper = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCpuTemper.setStatus('current')
if mibBuilder.loadTexts: sysCpuTemper.setDescription('Get current system environment cpu temperature')
sysCpuAlertTemper = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCpuAlertTemper.setStatus('current')
if mibBuilder.loadTexts: sysCpuAlertTemper.setDescription('Get or set current system environment cpu alarm temperature\n\t\t\t\tdefault is 85¡ãC')
sysMainBoardTemper = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMainBoardTemper.setStatus('current')
if mibBuilder.loadTexts: sysMainBoardTemper.setDescription('Get current system environment main borad temperature')
sysMainBoardAlertTemper = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysMainBoardAlertTemper.setStatus('current')
if mibBuilder.loadTexts: sysMainBoardAlertTemper.setDescription('Get or set current system environment main board alarm temperature\n\t\t\t\tdefault is 65 ¡ãC')
sysAlertTrapInt = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysAlertTrapInt.setStatus('current')
if mibBuilder.loadTexts: sysAlertTrapInt.setDescription('Send alert trap time interval when system temperature is always\n\t\t\t\tmore than alert temperature, unit is second,default is 60 s')
sysNFI = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200))
sysRtrGbl = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 1))
sysRtrCtrl = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRtrCtrl.setStatus('current')
if mibBuilder.loadTexts: sysRtrCtrl.setDescription('RTR global switch\n                    \t\t\t enable--enable RTR module\n                    \t\t\t disable--no RTR module')
sysRtrResponder = MibScalar((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysRtrResponder.setStatus('current')
if mibBuilder.loadTexts: sysRtrResponder.setDescription('Rtr Responder\n                    \t\t\t TRUE--Rtr Responder\n                    \t\t\t False--no Rtr Responder\n                    \t\t\t on valid in jitter entity now')
sysRtrEntityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2))
sysRtrEntityTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100), )
if mibBuilder.loadTexts: sysRtrEntityTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrEntityTable.setDescription('Rtr entity table,config or view information about Rtr entity')
sysRtrEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrEntityId"))
if mibBuilder.loadTexts: sysRtrEntityEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrEntityEntry.setDescription('Rtr entity,config or view information about Rtr entity')
rtrEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityId.setStatus('current')
if mibBuilder.loadTexts: rtrEntityId.setDescription('Rtr entity Id,index')
rtrEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrEntityName.setStatus('current')
if mibBuilder.loadTexts: rtrEntityName.setDescription('rtr entity name,araised aumatically,read-only')
rtrEntityType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("icmpEcho", 1), ("jitter", 2), ("flowStatistics", 3), ("udpecho", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityType.setStatus('current')
if mibBuilder.loadTexts: rtrEntityType.setDescription('rtr entity,inlcuding icmpEcho,jitter,flow statistics,udpecho')
rtrEntityLogType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityLogType.setStatus('current')
if mibBuilder.loadTexts: rtrEntityLogType.setDescription('RTR entity logging type¡£\n                    \t\t\t local£\xadstored in the device file system\n                    \t\t\t remote£\xadremote services')
rtrEntityLogMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityLogMaxSize.setStatus('current')
if mibBuilder.loadTexts: rtrEntityLogMaxSize.setDescription("rtr entity's log with max lines, if log type is local")
rtrEntityLogFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("error", 2), ("overThreshold", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityLogFilter.setStatus('current')
if mibBuilder.loadTexts: rtrEntityLogFilter.setDescription('RTR entity log filter options')
rtrEntityThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityThreshold.setStatus('current')
if mibBuilder.loadTexts: rtrEntityThreshold.setDescription('RTR entity log filter threshhod,only valid with icmpEcho entity')
rtrEntityRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 2, 100, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrEntityRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrEntityRowStatus.setDescription('rtr entity row status')
sysRtrGroupMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3))
sysRtrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100), )
if mibBuilder.loadTexts: sysRtrGroupTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrGroupTable.setDescription('Rtr group table')
sysRtrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrGroupId"))
if mibBuilder.loadTexts: sysRtrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrGroupEntry.setDescription('Rtr group entity')
rtrGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrGroupId.setStatus('current')
if mibBuilder.loadTexts: rtrGroupId.setDescription('rtr group id,index')
rtrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrGroupName.setStatus('current')
if mibBuilder.loadTexts: rtrGroupName.setDescription('rtr group name,araised aumatically, read-only')
rtrGroupInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrGroupInterval.setStatus('current')
if mibBuilder.loadTexts: rtrGroupInterval.setDescription('rtr group interval, seconds')
rtrGroupEntityMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrGroupEntityMembers.setStatus('current')
if mibBuilder.loadTexts: rtrGroupEntityMembers.setDescription('RTR group members£¬string type£º\n                    \t\t\t 1£¬3£¬10-20£¬50\n                    \t\t\t string length no more than 255, separated by comma,no space in the string¡£')
rtrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 3, 100, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrGroupRowStatus.setDescription('rtr group table row status')
sysRtrScheduleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4))
sysRtrScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100), )
if mibBuilder.loadTexts: sysRtrScheduleTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrScheduleTable.setDescription('rtr schedule table')
sysRtrScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrScheduleId"))
if mibBuilder.loadTexts: sysRtrScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrScheduleEntry.setDescription('rtr schedule table entry')
rtrScheduleId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleId.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleId.setDescription('rtr schedule Id,index')
rtrScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("entity", 1), ("group", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleType.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleType.setDescription('rtr schedule type')
rtrScheduleObjId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleObjId.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleObjId.setDescription('id of rtrschedule object which means rtr group or entity.')
rtrScheduleStartTimeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("startNow", 1), ("afterTime", 2), ("startTime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleStartTimeFlag.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleStartTimeFlag.setDescription('RTR schedule start time¡£\n                    \t\t\t startNow£»\n                    \t\t\t afterTime£»\n                    \t\t\t startTime--start at the given time')
rtrScheduleAfterTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleAfterTime.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleAfterTime.setDescription('RTR schedule given time¡£\n                    \t\t\t type string£º\n                    \t\t\t HH:MM:SS\n                    \t\t\t valid when sysRtrScheduleFlag is afterTimeÊ±.')
rtrScheduleStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleStartTime.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleStartTime.setDescription('RTR schedule given time¡£\n                    \t\t\t type string£º\n                    \t\t\t HH:MM:SS,mm,dd,yyyy\n                    \t\t\t valid when sysRtrScheduleFlag is startTime.')
rtrScheduleAgeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2073600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleAgeOut.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleAgeOut.setDescription('rtr schedule ageout time in second.')
rtrScheduleLifeFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forever", 1), ("repeatAndDie", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleLifeFlag.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleLifeFlag.setDescription("rtr schedule's life\n                    \t\t\t forever,if config, no need to config lifetime and repeat times\n                    \t\t\t repeatAndDie,if config, need to config lifetime and repeat times")
rtrScheduleLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleLifeTime.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleLifeTime.setDescription("rtr schedule's lieftime in second,\n                    \t\t\tvalid only when rtrScheduleLifeFlag is repeatAndDie.")
rtrScheduleRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleRepeat.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleRepeat.setDescription("rtr schedule's repeat times,\n\t\t\t\t\tvalid only when rtrScheduleLifeFlag is repeatAndDie.")
rtrScheduleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrScheduleInterval.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleInterval.setDescription('rtr schedule interval in second')
rtrScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 4, 100, 1, 12), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrScheduleRowStatus.setDescription('rtr schedule row status')
sysRtrIcmpEchoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5))
sysRtrIcmpEchoTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100), )
if mibBuilder.loadTexts: sysRtrIcmpEchoTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrIcmpEchoTable.setDescription('RTR ICMP entity table')
sysRtrIcmpEchoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrIcmpEchoEntityId"))
if mibBuilder.loadTexts: sysRtrIcmpEchoEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrIcmpEchoEntry.setDescription('RTR ICMP entity entry')
rtrIcmpEchoEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoEntityId.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoEntityId.setDescription('ICMP entity ID,index')
rtrIcmpEchoTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoTargetIp.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoTargetIp.setDescription('ICMPECHO(ping) destination address')
rtrIcmpEchoPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoPktNum.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoPktNum.setDescription('ICMP PING send packets number once')
rtrIcmpEchoPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(36, 18024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoPktLen.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoPktLen.setDescription('ICMP PING send packets size')
rtrIcmpEchoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoTimeout.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoTimeout.setDescription('ICMP ping reply timeout in seconds.')
rtrIcmpEchoSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoSchInterval.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoSchInterval.setDescription('IcmpEcho interval in seconds.')
rtrIcmpEchoExtendFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoExtendFlag.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoExtendFlag.setDescription('ICMP extern ping flag,\n                    \t\t\thave set Tos,verify data,DF,sourceIp and vrf or yet.')
rtrIcmpEchoVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoVrfName.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoVrfName.setDescription('vrfname type string,\n                    \t\t\tvalid only rtrIcmpEchoExtendFlag is TRUE')
rtrIcmpEchoSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoSourceIp.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoSourceIp.setDescription('ICMP source IP address,\n\t\t\t\t\tvalid only rtrIcmpEchoExtendFlag is TRUE.')
rtrIcmpEchoTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoTos.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoTos.setDescription('ICMP TOS value,\n\t\t\t\t\tvalid only rtrIcmpEchoExtendFlag is TRUE.')
rtrIcmpEchoSetDf = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoSetDf.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoSetDf.setDescription('ICMP pakcet DF bit,\n                    \t\t\tvalid only rtrIcmpEchoExtendFlag is TRUE')
rtrIcmpEchoVerifyData = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoVerifyData.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoVerifyData.setDescription('ICMP verifay data flag,\n                    \t\t\tvalid only rtrIcmpEchoExtendFlag is TRUE')
rtrIcmpEchoIsScheduling = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrIcmpEchoIsScheduling.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoIsScheduling.setDescription('whether icmpEcho entity is in scheduling')
rtrIcmpEchoPktTotalSend = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrIcmpEchoPktTotalSend.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoPktTotalSend.setDescription('total packets which send by the ICMP entity.')
rtrIcmpEchoPktTotalRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrIcmpEchoPktTotalRcvd.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoPktTotalRcvd.setDescription('total packets which receive by the ICMP entity.')
rtrIcmpEchoSuccessRate = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrIcmpEchoSuccessRate.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoSuccessRate.setDescription('total success rate till now')
rtrIcmpEchoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 5, 100, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrIcmpEchoRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrIcmpEchoRowStatus.setDescription('ICMP row status')
sysRtrJitterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6))
sysRtrJitterTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100), )
if mibBuilder.loadTexts: sysRtrJitterTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrJitterTable.setDescription('RTR JITTER entity table')
sysRtrJitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrJitterEntityId"))
if mibBuilder.loadTexts: sysRtrJitterEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrJitterEntry.setDescription('RTR JITTER entity entry')
rtrJitterEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterEntityId.setStatus('current')
if mibBuilder.loadTexts: rtrJitterEntityId.setDescription('JITTER entity id,index')
rtrJitterState = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("closed", 2), ("request", 3), ("transmit", 4), ("finished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterState.setStatus('current')
if mibBuilder.loadTexts: rtrJitterState.setDescription('JITTE entity£º1£\xadinit£¬2£\xadclose£¬\n                    \t\t                 3£\xadsend request£¬4-send packets£¬\n                    \t\t                 5£\xadfinish')
rtrJitterTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterTargetIp.setStatus('current')
if mibBuilder.loadTexts: rtrJitterTargetIp.setDescription('JITTER responder destination ip address')
rtrJitterTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterTargetPort.setStatus('current')
if mibBuilder.loadTexts: rtrJitterTargetPort.setDescription('JITTER responder destination port')
rtrJitterCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("g711MULAW", 1), ("g711ALAW", 2), ("g729A", 3), ("userDefined", 4), ("invalid", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterCodec.setStatus('current')
if mibBuilder.loadTexts: rtrJitterCodec.setDescription('JITTER codec type,including:\n                    \t\t\t1 G711MULAW,2 G711ALAW,3  G729A,4 USER_DEFINED\n                    \t\t\t5 UNKOWN')
rtrJitterPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterPktLen.setStatus('current')
if mibBuilder.loadTexts: rtrJitterPktLen.setDescription('JITTER codec packet length,\n                    \t\t\tread-writable when rtrJitterCodec is USER_DEFINED\n                    \t\t\telse read-only\n\t\t\t\t\ttype:byte.')
rtrJitterPktNum = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterPktNum.setStatus('current')
if mibBuilder.loadTexts: rtrJitterPktNum.setDescription('JITTER codec packet number,\n                    \t\t\tread-writable when rtrJitterCodec is USER_DEFINED\n                    \t\t\telse read-only.')
rtrJitterPktInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 6000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterPktInterval.setStatus('current')
if mibBuilder.loadTexts: rtrJitterPktInterval.setDescription('JITTER codec packet send interval,\n                    \t\t\tread-writable when rtrJitterCodec is USER_DEFINED\n                    \t\t\telse read-only,\n                    \t\t\ttype:ms')
rtrJitterSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterSchInterval.setStatus('current')
if mibBuilder.loadTexts: rtrJitterSchInterval.setDescription('Jitter schedule interval,\n                    \t\t\tread-writable when rtrJitterCodec is USER_DEFINED\n                    \t\t\telse read-only,\n                    \t\t\ttype:s')
rtrJitterSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterSourceIp.setStatus('current')
if mibBuilder.loadTexts: rtrJitterSourceIp.setDescription('JITTER source IP address')
rtrJitterSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterSourcePort.setStatus('current')
if mibBuilder.loadTexts: rtrJitterSourcePort.setDescription('JITTER source port')
rtrJitterTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterTimeout.setStatus('current')
if mibBuilder.loadTexts: rtrJitterTimeout.setDescription('JITTER timeout value,type:ms,\n                    \t\t\tnotice,the value must no less than then interval between two schedule')
rtrJitterVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterVrfName.setStatus('current')
if mibBuilder.loadTexts: rtrJitterVrfName.setDescription('JITTER vrf')
rtrJitterTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterTos.setStatus('current')
if mibBuilder.loadTexts: rtrJitterTos.setDescription('JITTER pakcet TOS value')
rtrJitterMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterMinRtt.setStatus('current')
if mibBuilder.loadTexts: rtrJitterMinRtt.setDescription('JITTER minimal  round-trip-time value in ms')
rtrJitterMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterMaxRtt.setStatus('current')
if mibBuilder.loadTexts: rtrJitterMaxRtt.setDescription('JITTER maximal round-trip-time value in ms')
rtrJitterPktLossSd = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterPktLossSd.setStatus('current')
if mibBuilder.loadTexts: rtrJitterPktLossSd.setDescription('JITTER total lossed pakcets which send by the source ')
rtrJitterPktLossDs = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterPktLossDs.setStatus('current')
if mibBuilder.loadTexts: rtrJitterPktLossDs.setDescription('JITTER total loss pakcets which send by the target')
rtrJitterDsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDsMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDsMin.setDescription('JITTER minimal destination to source jitter in millisecond')
rtrJitterDsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDsMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDsMax.setDescription('JITTER maximal destionation to source jitter in millisecond')
rtrJitterSdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterSdMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterSdMin.setDescription('JITTER minimal source to destination jitter in millisecond')
rtrJitterSdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterSdMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterSdMax.setDescription('JITTER maximal source to destination jitter in millisecond')
rtrJitterDelayDsMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDelayDsMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDelayDsMin.setDescription('JITTER minimal destination to source delay in millisecond')
rtrJitterDelayDsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDelayDsMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDelayDsMax.setDescription('JITTER maximal destination to source delay in millisecond')
rtrJitterDelaySdMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDelaySdMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDelaySdMin.setDescription('JITTER minimal souce to destionation delay in millisecond')
rtrJitterDelaySdMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterDelaySdMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterDelaySdMax.setDescription('JITTER maximal source to destination delay in millisecond')
rtrJitterIcpifMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterIcpifMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterIcpifMin.setDescription('JITTER minimal icpif')
rtrJitterIcpifMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterIcpifMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterIcpifMax.setDescription('JITTER maximal icpif')
rtrJitterMosMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterMosMin.setStatus('current')
if mibBuilder.loadTexts: rtrJitterMosMin.setDescription('JITTER minimal MOS')
rtrJitterMosMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrJitterMosMax.setStatus('current')
if mibBuilder.loadTexts: rtrJitterMosMax.setDescription('JITTER maximal MOS')
rtrJitterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 6, 100, 1, 31), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrJitterRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrJitterRowStatus.setDescription('JITTER row status')
sysRtrFlowStatisticsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7))
sysRtrFlowStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100), )
if mibBuilder.loadTexts: sysRtrFlowStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrFlowStatisticsTable.setDescription('RTR flow statistics table')
sysRtrFlowStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrFlStatisticsEntityId"))
if mibBuilder.loadTexts: sysRtrFlowStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrFlowStatisticsEntry.setDescription('RTR flow statistics entry')
rtrFlStatisticsEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrFlStatisticsEntityId.setStatus('current')
if mibBuilder.loadTexts: rtrFlStatisticsEntityId.setDescription('flow statistics entity Id')
rtrFlStatisticsIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrFlStatisticsIfName.setStatus('current')
if mibBuilder.loadTexts: rtrFlStatisticsIfName.setDescription('interface name which will be statistic')
rtrFlStatisticsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrFlStatisticsInterval.setStatus('current')
if mibBuilder.loadTexts: rtrFlStatisticsInterval.setDescription('monitor interval in second')
rtrFlStaInputMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaInputMaxPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaInputMaxPkts.setDescription('maximal pakcets received once sampling period ')
rtrFlStaTmInputMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmInputMaxPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmInputMaxPkts.setDescription('maximal time between minimal received packets number and miximal received packets number')
rtrFlStaInputMaxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaInputMaxFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaInputMaxFlow.setDescription('maximal flow value received')
rtrFlStaTmInputMaxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmInputMaxFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmInputMaxFlow.setDescription('maximal time between minimal flow value and miximal flow vlaue')
rtrFlStaInputMinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaInputMinPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaInputMinPkts.setDescription('minimal pakcets received once sampling period ')
rtrFlStaTmInputMinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmInputMinPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmInputMinPkts.setDescription('minimal time between minimal packets number and miximal packets number')
rtrFlStaInputMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaInputMinFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaInputMinFlow.setDescription('minimal flow value received')
rtrFlStaTmInputMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmInputMinFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmInputMinFlow.setDescription('minimal time between minimal flow value and miximal flow vlaue')
rtrFlStaOutputMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaOutputMaxPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaOutputMaxPkts.setDescription('maximal pakcets send once sampling period ')
rtrFlStaTmOutputMaxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmOutputMaxPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmOutputMaxPkts.setDescription('maximal time between minimal send packets number and miximal send packets number')
rtrFlStaOutputMaxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaOutputMaxFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaOutputMaxFlow.setDescription('maximal flow send ')
rtrFlStaTmOutputMaxFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmOutputMaxFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmOutputMaxFlow.setDescription('maximal time between minimal send flow and miximal send flow ')
rtrFlStaOutputMinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaOutputMinPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaOutputMinPkts.setDescription('minimal pakcets send once sampling period ')
rtrFlStaTmOutputMinPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmOutputMinPkts.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmOutputMinPkts.setDescription('minimal time between minimal send packets number and miximal send packets number')
rtrFlStaOutputMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaOutputMinFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaOutputMinFlow.setDescription('minimal flow send ')
rtrFlStaTmOutputMinFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrFlStaTmOutputMinFlow.setStatus('current')
if mibBuilder.loadTexts: rtrFlStaTmOutputMinFlow.setDescription('minimal time between minimal send flow and miximal send flow ')
rtrFlowStatisticsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 7, 100, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrFlowStatisticsRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrFlowStatisticsRowStatus.setDescription('flow statistics row status')
sysRtrUdpechoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8))
sysRtrUdpechoTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100), )
if mibBuilder.loadTexts: sysRtrUdpechoTable.setStatus('current')
if mibBuilder.loadTexts: sysRtrUdpechoTable.setDescription('RTR UDPECHO entity table')
sysRtrUdpechoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "rtrUdpechoEntityId"))
if mibBuilder.loadTexts: sysRtrUdpechoEntry.setStatus('current')
if mibBuilder.loadTexts: sysRtrUdpechoEntry.setDescription('RTR UDPECHO entity entry')
rtrUdpechoEntityId = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoEntityId.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoEntityId.setDescription('UDPECHO entity id,index')
rtrUdpechoState = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("init", 1), ("closed", 2), ("request", 3), ("transmit", 4), ("finished", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoState.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoState.setDescription('UDPECHO entity£º1£\xadinit£¬2£\xadclose£¬\n                    \t\t                 3£\xadsend request£¬4-send packets£¬\n                    \t\t                 5£\xadfinish')
rtrUdpechoTargetIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoTargetIp.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoTargetIp.setDescription('UDPECHO responder destination ip address')
rtrUdpechoTargetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoTargetPort.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoTargetPort.setDescription('UDPECHO responder destination port')
rtrUdpechoPktLen = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 1500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoPktLen.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoPktLen.setDescription('UDPECHO packet length')
rtrUdpechoSchInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoSchInterval.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoSchInterval.setDescription('UDPECHO schedule interval,\n                   \t\t\ttype:s')
rtrUdpechoSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoSourceIp.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoSourceIp.setDescription('UDPECHO source IP address')
rtrUdpechoSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoSourcePort.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoSourcePort.setDescription('UDPECHO source port')
rtrUdpechoTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 604800000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoTimeout.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoTimeout.setDescription('UDPECHO timeout value,type:ms,\n                    \t\t\tnotice,the value must no less than then interval between two schedule')
rtrUdpechoVrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoVrfName.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoVrfName.setDescription('UDPECHO vrf')
rtrUdpechoTos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoTos.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoTos.setDescription('UDPECHO pakcet TOS value')
rtrUdpechoPktLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoPktLoss.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoPktLoss.setDescription('UDPECHO total lossed pakcets which send by the source ')
rtrUdpechoPktSucc = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoPktSucc.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoPktSucc.setDescription('UDPECHO total pakcets sent and received successfully')
rtrUdpechoDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoDelay.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoDelay.setDescription('UDPECHO destination to source and source to destinatino delay in millisecond')
rtrUdpechoDelayMin = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoDelayMin.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoDelayMin.setDescription('UDPECHO maximal destination to source and source to destinatino delay in millisecond')
rtrUdpechoDelayMax = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtrUdpechoDelayMax.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoDelayMax.setDescription('UDPECHO maximal destination to source and source to destinatino delay in millisecond')
rtrUdpechoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 200, 8, 100, 1, 17), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtrUdpechoRowStatus.setStatus('current')
if mibBuilder.loadTexts: rtrUdpechoRowStatus.setDescription('UDPECHO row status')
sysIfStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300))
sysIfPktPriStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1))
sysIfPktPriStaTable = MibTable((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100), )
if mibBuilder.loadTexts: sysIfPktPriStaTable.setStatus('current')
if mibBuilder.loadTexts: sysIfPktPriStaTable.setDescription("The statistics of interface's flow based on\n\t\t\t\t\t\t\t\tthe precedence of IP packet. The index of this table is\n\t\t\t\t\t\t\t\tpriority and ifIndex")
sysIfPktPriStaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1), ).setIndexNames((0, "MPIOS-MIB", "sysIfPktPriority"), (0, "MPIOS-MIB", "sysIfIndex"))
if mibBuilder.loadTexts: sysIfPktPriStaEntry.setStatus('current')
if mibBuilder.loadTexts: sysIfPktPriStaEntry.setDescription("The statistics of interface's flow based on\n\t\t\t\t\t\t\t\tthe precedence of IP packet. The index of this table is\n\t\t\t\t\t\t\t\tpriority and ifIndex")
sysIfPktPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("priority0", 1), ("priority1", 2), ("priority2", 3), ("priority3", 4), ("priority4", 5), ("priority5", 6), ("priority6", 7), ("priority7", 8), ("other", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfPktPriority.setStatus('current')
if mibBuilder.loadTexts: sysIfPktPriority.setDescription('The precedence of IP packet, it start from 1 to 9.\n                    \t\t\tNumeric one represent the precedence 0, two represent\n\t\t\t\t\t\t\t\t1 and so on. 9 represent the number of non-IP packet.')
sysIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfIndex.setStatus('current')
if mibBuilder.loadTexts: sysIfIndex.setDescription('The index of interface in the system')
sysIfDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfDesc.setStatus('current')
if mibBuilder.loadTexts: sysIfDesc.setDescription('The name of interface assigned to')
sysIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInOctets.setStatus('current')
if mibBuilder.loadTexts: sysIfInOctets.setDescription('The interface received bytes at specified precedence')
sysIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered\n\t\t\t\t\t\t\t\tto a higher-layer protocol with specified precedence.')
sysIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or\n\t\t\t\t\t\t\t\tsubnetwork-multicast) packets delivered to a higher-layer\n\t\t\t\t\t\t\t\tprotocol.')
sysIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: sysIfInDiscards.setDescription('The number of inbound packets which were chosen to be\n\t\t\t\t\t\t\t\tdiscarded')
sysIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInErrors.setStatus('current')
if mibBuilder.loadTexts: sysIfInErrors.setDescription('The number of inbound packets that contained errors\n\t\t\t\t\t\t\t\tpreventing them from being deliverable to a higher-layer\n\t\t\t\t\t\t\t\tprotocol.')
sysIfInUnkownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfInUnkownProtos.setStatus('current')
if mibBuilder.loadTexts: sysIfInUnkownProtos.setDescription('The number of packets received via the interface which\n\t\t\t\t\t\t\t\twere discarded because of an unknown or unsupported\n\t\t\t\t\t\t\t\tprotocol.')
sysIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: sysIfOutOctets.setDescription('The total number of octets transmitted out of the\n\t\t\t\t\t\t\t\tinterface, including framing characters.')
sysIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t\t\t\trequested be transmitted to a subnetwork-unicast address,\n\t\t\t\t\t\t\t\tincluding those that were discarded or not sent.')
sysIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: sysIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols\n\t\t\t\t\t\t\t\trequested be transmitted to a non- unicast (i.e., a\n\t\t\t\t\t\t\t\tsubnetwork-broadcast or subnetwork-multicast) address,\n\t\t\t\t\t\t\t\tincluding those that were discarded or not sent.')
sysIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: sysIfOutDiscards.setDescription('The number of outbound packets which were chosen to be\n\t\t\t\t\t\t\t\teven though no errors had been detected to prevent their\n\t\t\t\t\t\t\t\tbeing transmitted.  One possible reason for discarding\n\t\t\t\t\t\t\t\tsuch a packet could be to free up buffer space.')
sysIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 5651, 3, 20, 1, 1, 300, 1, 100, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: sysIfOutErrors.setDescription('The number of outbound packets that could not be\n\t\t\t\t\t\t\t\ttransmitted because of errors.')
mibBuilder.exportSymbols("MPIOS-MIB", rtrFlStaTmOutputMaxFlow=rtrFlStaTmOutputMaxFlow, sysIfOutOctets=sysIfOutOctets, taskStackBase=taskStackBase, sysRtrJitterMgt=sysRtrJitterMgt, rtrJitterVrfName=rtrJitterVrfName, cpuTaskName=cpuTaskName, cpuUtilTotalTicks=cpuUtilTotalTicks, sysRtrEntityMgt=sysRtrEntityMgt, rtrIcmpEchoPktNum=rtrIcmpEchoPktNum, rtrFlStatisticsIfName=rtrFlStatisticsIfName, rtrGroupRowStatus=rtrGroupRowStatus, sysIfInOctets=sysIfInOctets, memoryTotalBytes=memoryTotalBytes, sysTemperature=sysTemperature, rtrFlStaOutputMaxFlow=rtrFlStaOutputMaxFlow, rtrIcmpEchoVerifyData=rtrIcmpEchoVerifyData, rtrIcmpEchoVrfName=rtrIcmpEchoVrfName, rtrGroupId=rtrGroupId, sysRtrIcmpEchoTable=sysRtrIcmpEchoTable, rtrIcmpEchoEntityId=rtrIcmpEchoEntityId, rtrUdpechoPktLen=rtrUdpechoPktLen, rtrJitterPktNum=rtrJitterPktNum, rtrJitterDelaySdMax=rtrJitterDelaySdMax, rtrJitterIcpifMin=rtrJitterIcpifMin, rtrUdpechoSchInterval=rtrUdpechoSchInterval, cpuTaskDeltaTicks=cpuTaskDeltaTicks, avgBlockSizeFree=avgBlockSizeFree, cpuTaskDeltaUtil=cpuTaskDeltaUtil, rtrScheduleRowStatus=rtrScheduleRowStatus, rtrEntityLogMaxSize=rtrEntityLogMaxSize, rtrIcmpEchoTos=rtrIcmpEchoTos, rtrIcmpEchoPktLen=rtrIcmpEchoPktLen, rtrFlStaTmOutputMinPkts=rtrFlStaTmOutputMinPkts, sysIfStatistic=sysIfStatistic, cpuUtilDeltaTicks=cpuUtilDeltaTicks, sysIfPktPriority=sysIfPktPriority, iosObjects=iosObjects, sysRtrJitterTable=sysRtrJitterTable, sysNFI=sysNFI, cpuUtilTotalTimes=cpuUtilTotalTimes, sysMainBoardAlertTemper=sysMainBoardAlertTemper, rtrJitterSdMax=rtrJitterSdMax, sysMemory=sysMemory, sysAlertTrapInt=sysAlertTrapInt, rtrEntityLogType=rtrEntityLogType, sysRtrUdpechoTable=sysRtrUdpechoTable, sysMainBoardTemper=sysMainBoardTemper, rtrUdpechoTargetPort=rtrUdpechoTargetPort, sysIfOutUcastPkts=sysIfOutUcastPkts, PYSNMP_MODULE_ID=mpios, rtrJitterDelaySdMin=rtrJitterDelaySdMin, rtrIcmpEchoIsScheduling=rtrIcmpEchoIsScheduling, rtrEntityId=rtrEntityId, rtrJitterSchInterval=rtrJitterSchInterval, cpuUtilDeltaUsedTicks=cpuUtilDeltaUsedTicks, rtrScheduleLifeTime=rtrScheduleLifeTime, rtrIcmpEchoPktTotalSend=rtrIcmpEchoPktTotalSend, rtrFlStaInputMinPkts=rtrFlStaInputMinPkts, rtrUdpechoSourceIp=rtrUdpechoSourceIp, rtrFlStaOutputMinFlow=rtrFlStaOutputMinFlow, rtrJitterRowStatus=rtrJitterRowStatus, rtrIcmpEchoSuccessRate=rtrIcmpEchoSuccessRate, rtrJitterEntityId=rtrJitterEntityId, rtrGroupInterval=rtrGroupInterval, rtrFlStaInputMaxFlow=rtrFlStaInputMaxFlow, rtrFlStaTmInputMinPkts=rtrFlStaTmInputMinPkts, rtrScheduleAfterTime=rtrScheduleAfterTime, sysTask=sysTask, rtrUdpechoPktSucc=rtrUdpechoPktSucc, rtrFlStaTmInputMaxPkts=rtrFlStaTmInputMaxPkts, rtrJitterPktLossSd=rtrJitterPktLossSd, rtrFlStaOutputMaxPkts=rtrFlStaOutputMaxPkts, rtrFlStaOutputMinPkts=rtrFlStaOutputMinPkts, sysRtrJitterEntry=sysRtrJitterEntry, taskEntry=taskEntry, cpuUtilDeltaUtil=cpuUtilDeltaUtil, rtrJitterState=rtrJitterState, sysIfOutNUcastPkts=sysIfOutNUcastPkts, sysCpuTaskTabView=sysCpuTaskTabView, sysRtrGroupEntry=sysRtrGroupEntry, sysRtrIcmpEchoEntry=sysRtrIcmpEchoEntry, maxBlockSizeFree=maxBlockSizeFree, numBytesFree=numBytesFree, rtrIcmpEchoTargetIp=rtrIcmpEchoTargetIp, sysRtrResponder=sysRtrResponder, taskStackPtr=taskStackPtr, rtrGroupName=rtrGroupName, taskTable=taskTable, rtrScheduleInterval=rtrScheduleInterval, sysIfOutErrors=sysIfOutErrors, taskStackMaxUsed=taskStackMaxUsed, taskMain=taskMain, cpuTaskId=cpuTaskId, rtrJitterMosMin=rtrJitterMosMin, rtrJitterMosMax=rtrJitterMosMax, rtrScheduleStartTimeFlag=rtrScheduleStartTimeFlag, cpuTaskEntry=cpuTaskEntry, sysRtrUdpechoMgt=sysRtrUdpechoMgt, sysRtrUdpechoEntry=sysRtrUdpechoEntry, rtrJitterMaxRtt=rtrJitterMaxRtt, rtrJitterTos=rtrJitterTos, rtrJitterIcpifMax=rtrJitterIcpifMax, rtrFlStaTmOutputMinFlow=rtrFlStaTmOutputMinFlow, rtrUdpechoRowStatus=rtrUdpechoRowStatus, rtrScheduleRepeat=rtrScheduleRepeat, cpuTaskPri=cpuTaskPri, rtrUdpechoEntityId=rtrUdpechoEntityId, rtrEntityName=rtrEntityName, sysCpu=sysCpu, EnabledStatus=EnabledStatus, sysRtrCtrl=sysRtrCtrl, rtrIcmpEchoPktTotalRcvd=rtrIcmpEchoPktTotalRcvd, sysRtrScheduleTable=sysRtrScheduleTable, rtrUdpechoVrfName=rtrUdpechoVrfName, rtrUdpechoDelay=rtrUdpechoDelay, sysRtrGroupMgt=sysRtrGroupMgt, sysIfInDiscards=sysIfInDiscards, cpuTaskTotalTicks=cpuTaskTotalTicks, cpuUtilTotalUsedTicks=cpuUtilTotalUsedTicks, sysCpuStatus=sysCpuStatus, taskStackSizeUsage=taskStackSizeUsage, rtrJitterDsMax=rtrJitterDsMax, cpuUtilDeltaTimes=cpuUtilDeltaTimes, rtrJitterSdMin=rtrJitterSdMin, rtrFlStatisticsEntityId=rtrFlStatisticsEntityId, numBlocksFree=numBlocksFree, checkCpuTimeInterval=checkCpuTimeInterval, rtrJitterTargetIp=rtrJitterTargetIp, sysIfDesc=sysIfDesc, rtrFlStaInputMinFlow=rtrFlStaInputMinFlow, rtrFlStaTmInputMinFlow=rtrFlStaTmInputMinFlow, rtrUdpechoPktLoss=rtrUdpechoPktLoss, rtrUdpechoDelayMax=rtrUdpechoDelayMax, rtrIcmpEchoExtendFlag=rtrIcmpEchoExtendFlag, allocBytesPercent=allocBytesPercent, sysRtrGbl=sysRtrGbl, taskPriority=taskPriority, rtrJitterPktInterval=rtrJitterPktInterval, taskStackPos=taskStackPos, sysRtrScheduleEntry=sysRtrScheduleEntry, sysRtrIcmpEchoMgt=sysRtrIcmpEchoMgt, rtrFlStaTmInputMaxFlow=rtrFlStaTmInputMaxFlow, sysIfPktPriStaEntry=sysIfPktPriStaEntry, rtrEntityLogFilter=rtrEntityLogFilter, rtrJitterCodec=rtrJitterCodec, sysIfPktPriStatistics=sysIfPktPriStatistics, rtrJitterPktLen=rtrJitterPktLen, rtrJitterMinRtt=rtrJitterMinRtt, iosSystem=iosSystem, rtrEntityType=rtrEntityType, rtrJitterTargetPort=rtrJitterTargetPort, rtrUdpechoDelayMin=rtrUdpechoDelayMin, cpuUtilCpuId=cpuUtilCpuId, rtrScheduleStartTime=rtrScheduleStartTime, sysIfInUcastPkts=sysIfInUcastPkts, rtrFlStaTmOutputMaxPkts=rtrFlStaTmOutputMaxPkts, avgBlockSizeAlloc=avgBlockSizeAlloc, cpuUtilCurrentUtil=cpuUtilCurrentUtil, sysRtrGroupTable=sysRtrGroupTable, rtrJitterSourcePort=rtrJitterSourcePort, cpuUtilAverageUtil=cpuUtilAverageUtil, taskOptions=taskOptions, numBlocksAlloc=numBlocksAlloc, rtrScheduleAgeOut=rtrScheduleAgeOut, sysRtrScheduleMgt=sysRtrScheduleMgt, rtrIcmpEchoSchInterval=rtrIcmpEchoSchInterval, taskStatus=taskStatus, rtrUdpechoTargetIp=rtrUdpechoTargetIp, sysIfIndex=sysIfIndex, taskName=taskName, rtrScheduleType=rtrScheduleType, sysCpuTemper=sysCpuTemper, taskDescr=taskDescr, taskId=taskId, rtrUdpechoSourcePort=rtrUdpechoSourcePort, sysIfInNUcastPkts=sysIfInNUcastPkts, sysIfInErrors=sysIfInErrors, rtrUdpechoState=rtrUdpechoState, sysRtrFlowStatisticsMgt=sysRtrFlowStatisticsMgt, sysIfInUnkownProtos=sysIfInUnkownProtos, sysCpuAlertTemper=sysCpuAlertTemper, rtrGroupEntityMembers=rtrGroupEntityMembers, rtrJitterDelayDsMin=rtrJitterDelayDsMin, rtrIcmpEchoRowStatus=rtrIcmpEchoRowStatus, rtrJitterDelayDsMax=rtrJitterDelayDsMax, rtrFlStaInputMaxPkts=rtrFlStaInputMaxPkts, cpuTaskCurrentUtil=cpuTaskCurrentUtil, rtrEntityRowStatus=rtrEntityRowStatus, rtrJitterTimeout=rtrJitterTimeout, taskStackEnd=taskStackEnd, sysIfOutDiscards=sysIfOutDiscards, cpuTaskAverageUtil=cpuTaskAverageUtil, rtrJitterPktLossDs=rtrJitterPktLossDs, numBytesAlloc=numBytesAlloc, cpuUtilEntry=cpuUtilEntry, sysIfPktPriStaTable=sysIfPktPriStaTable, taskStackSize=taskStackSize, sysRtrEntityEntry=sysRtrEntityEntry, rtrIcmpEchoSetDf=rtrIcmpEchoSetDf, taskErrorStatus=taskErrorStatus, cpuUtilTable=cpuUtilTable, rtrIcmpEchoSourceIp=rtrIcmpEchoSourceIp, sysRtrEntityTable=sysRtrEntityTable, rtrEntityThreshold=rtrEntityThreshold, rtrScheduleObjId=rtrScheduleObjId, rtrJitterDsMin=rtrJitterDsMin, rtrFlStatisticsInterval=rtrFlStatisticsInterval, taskStackFree=taskStackFree, rtrJitterSourceIp=rtrJitterSourceIp, rtrScheduleLifeFlag=rtrScheduleLifeFlag, mpios=mpios, rtrScheduleId=rtrScheduleId, rtrFlowStatisticsRowStatus=rtrFlowStatisticsRowStatus, rtrUdpechoTimeout=rtrUdpechoTimeout, rtrIcmpEchoTimeout=rtrIcmpEchoTimeout, rtrUdpechoTos=rtrUdpechoTos, cpuTaskTable=cpuTaskTable, sysRtrFlowStatisticsEntry=sysRtrFlowStatisticsEntry, sysRtrFlowStatisticsTable=sysRtrFlowStatisticsTable)
