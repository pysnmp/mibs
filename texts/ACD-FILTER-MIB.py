#
# PySNMP MIB module ACD-FILTER-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-FILTER-MIB
# Produced by pysmi-1.1.12 at Wed May 29 07:13:23 2024
# On host fv-az1114-382 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Integer32, Bits, Gauge32, Counter64, Counter32, NotificationType, ObjectIdentity, TimeTicks, Unsigned32, iso, ModuleIdentity, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Integer32", "Bits", "Gauge32", "Counter64", "Counter32", "NotificationType", "ObjectIdentity", "TimeTicks", "Unsigned32", "iso", "ModuleIdentity", "MibIdentifier")
MacAddress, TruthValue, TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "TextualConvention", "RowStatus", "DisplayString")
acdFilter = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 2))
acdFilter.setRevisions(('2011-10-10 01:00', '2010-11-10 01:00', '2008-05-01 01:00', '2006-08-06 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdFilter.setRevisionsDescriptions(('Add acdSmapL2FilterTableLastChangeTid and\n             acdSmapIPv4FilterTableLastChangeTid.\n             \n             Deprecated acdL2FilterTable and acdIPv4FilterTable tables.', 'Add compliance section.', 'Add SMAP filter tables and RowStatus in acdL2FilterTable and\n             acdIPv4FilterTable tables.', 'Initial version of MIB module ACD-FILTER-MIB.',))
if mibBuilder.loadTexts: acdFilter.setLastUpdated('201110100100Z')
if mibBuilder.loadTexts: acdFilter.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdFilter.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdFilter.setDescription('The Filter database for this Accedian Networks device.')
acdFilterNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 5))
acdFilterMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 6))
acdFilterConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7))
acdFilterTableTid = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 6, 1))
class AcdFilterOperator(TextualConvention, Integer32):
    description = 'Operator for field comparaison. Valid operator types are:\n        Greater than, Less than, Equal to or Range (inclusive range).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("lessThan", 1), ("greaterThan", 2), ("equalTo", 3), ("range", 4))

class AcdFilterVlanType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cvlan", 1), ("svlan", 2), ("both", 3))

acdL2FilterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1), )
if mibBuilder.loadTexts: acdL2FilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: acdL2FilterTable.setDescription('Table of all Layer 2 filters')
acdL2FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1), ).setIndexNames((0, "ACD-FILTER-MIB", "acdL2FilterID"))
if mibBuilder.loadTexts: acdL2FilterEntry.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterEntry.setDescription('A Filter is a pattern matching a definition against packets.')
acdL2FilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdL2FilterID.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterID.setDescription('Unique value for each filter. Its value ranges from 1 to maximum\n         value. This maximum  value depend of the type of platform.')
acdL2FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterName.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterName.setDescription('This is a string to identify the filter.')
acdL2FilterMacDstEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacDstEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacDstEn.setDescription('Enable or disable the destination MAC address check.')
acdL2FilterMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacDst.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacDst.setDescription('The destination MAC address used to compare the incoming traffic.')
acdL2FilterMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48)).clone(48)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacDstMask.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacDstMask.setDescription('Number of destination MAC address bits to compare. Its value ranges\n         from 0 to 48. Only specific mask are valid per platform.')
acdL2FilterMacSrcEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacSrcEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacSrcEn.setDescription('Enable or disable the source MAC address check.')
acdL2FilterMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 7), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacSrc.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacSrc.setDescription('The source MAC address used to compare the incoming traffic.')
acdL2FilterMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 48)).clone(48)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterMacSrcMask.setDescription('Number of source MAC address bits to compare. Its value ranges\n         from 0 to 48. Only specific mask are valid per platform.')
acdL2FilterEtypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterEtypeEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterEtypeEn.setDescription('Enable or disable the Ethernet type check.')
acdL2FilterEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterEtype.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterEtype.setDescription('The Ethernet type used to compare the incoming traffic.')
acdL2FilterVlan1PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1PriorEn.setDescription('Enable or disable the first VLAN priority check.')
acdL2FilterVlan1Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1Prior.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1Prior.setDescription('The first VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdL2FilterVlan1CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1CfiEn.setDescription('Enable or disable the first VLAN CFI check.')
acdL2FilterVlan1Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1Cfi.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1Cfi.setDescription('The first VLAN CFI used to compare the incoming traffic.\n         Its value is 0 or 1.')
acdL2FilterVlan1IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1IdEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1IdEn.setDescription('Enable or disable the first VLAN ID check.')
acdL2FilterVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan1Id.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan1Id.setDescription('The first VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdL2FilterVlan2PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2PriorEn.setDescription('Enable or disable the second VLAN priority check.')
acdL2FilterVlan2Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2Prior.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2Prior.setDescription('The second VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdL2FilterVlan2CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2CfiEn.setDescription('Enable or disable the second VLAN CFI check.')
acdL2FilterVlan2Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2Cfi.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2Cfi.setDescription('The second VLAN CFI used to compare the incoming traffic.\n         Its value is 0 or 1.')
acdL2FilterVlan2IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2IdEn.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2IdEn.setDescription('Enable or disable the second VLAN ID check.')
acdL2FilterVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4065))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterVlan2Id.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterVlan2Id.setDescription('The second VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdL2FilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 1, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdL2FilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new filter you shall provide the a unique filter name for\n        an empty row with the RowStatus set to Create and Go. To delete the\n        row you need to set the RowStatus to destroy.')
acdIPv4FilterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2), )
if mibBuilder.loadTexts: acdIPv4FilterTable.setStatus('deprecated')
if mibBuilder.loadTexts: acdIPv4FilterTable.setDescription('Table of all IPv4 filters')
acdIPv4FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1), ).setIndexNames((0, "ACD-FILTER-MIB", "acdIPv4FilterID"))
if mibBuilder.loadTexts: acdIPv4FilterEntry.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterEntry.setDescription('A Filter is a pattern matching a definition against packets.')
acdIPv4FilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdIPv4FilterID.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterID.setDescription('Unique value for each filter. Its value ranges from 1 to maximum\n         value. This maximum  value depend of the type of platform.')
acdIPv4FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterName.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterName.setDescription('This is a string to identify the filter.')
acdIPv4FilterSrcEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterSrcEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterSrcEn.setDescription('Enable or disable the Source IP address check.')
acdIPv4FilterSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 4), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterSrc.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterSrc.setDescription('The source IP address used to compare the incoming traffic.')
acdIPv4FilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 5), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterSrcMask.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterSrcMask.setDescription('The source IP address mask used to compare the incoming traffic.')
acdIPv4FilterDstEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDstEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDstEn.setDescription('Enable or disable the Destination IP address check.')
acdIPv4FilterDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 7), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDst.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDst.setDescription('The destination IP address used to compare the incoming traffic.')
acdIPv4FilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 8), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDstMask.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDstMask.setDescription('The destination IP address mask used to compare the incoming\n         traffic.')
acdIPv4FilterProtoEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 9), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterProtoEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterProtoEn.setDescription('Enable or disable the IP protocol check.')
acdIPv4FilterProto = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterProto.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterProto.setDescription('The IP protocol used to compare the incoming traffic. Its value\n         ranges from 0 to 255.')
acdIPv4FilterTTLEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 11), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterTTLEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterTTLEn.setDescription('Enable or disable the TTL check.')
acdIPv4FilterTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(255)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterTTL.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterTTL.setDescription('The TTL used to compare the incoming traffic.\n         Its value ranges from 0 to 255.')
acdIPv4FilterIHLEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIHLEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIHLEn.setDescription('Enable or disable the IP Header Length check.')
acdIPv4FilterIHL = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 15)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIHL.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIHL.setDescription('The IP Header Length used to compare the incoming traffic.\n         Its value ranges from 5 to 15.')
acdIPv4FilterDscpEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 15), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDscpEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDscpEn.setDescription('Enable or disable the DSCP (Diff-Serv Code Point) check.')
acdIPv4FilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDscp.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDscp.setDescription('The DSCP value used to compare the incoming traffic.\n         Its value ranges from 0 to 63.')
acdIPv4FilterECNEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 17), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterECNEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterECNEn.setDescription('Enable or disable the ECN (Explicite Cogestion Notification) check.')
acdIPv4FilterECN = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterECN.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterECN.setDescription('The ECN value used to compare the incoming traffic.\n         Its value ranges from 0 to 3.')
acdIPv4FilterSrcPortEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 19), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterSrcPortEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterSrcPortEn.setDescription('Enable or disable the UDP/TCP Source port check.')
acdIPv4FilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterSrcPort.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterSrcPort.setDescription('The UDP/TCP Source Port used to compare the incoming traffic.\n         Its value ranges from 0 to 65535.')
acdIPv4FilterDstPortEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 21), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDstPortEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDstPortEn.setDescription('Enable or disable the UDP/TCP Destination port check.')
acdIPv4FilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterDstPort.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterDstPort.setDescription('The UDP/TCP Destination Port used to compare the incoming traffic.\n         Its value ranges from 0 to 65535.')
acdIPv4FilterIcmpTypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 23), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIcmpTypeEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIcmpTypeEn.setDescription('Enable or disable the ICMP type check.')
acdIPv4FilterIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 24), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIcmpType.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIcmpType.setDescription('The ICMP type used to compare the incoming traffic.\n         Its value ranges from 0 to 255.')
acdIPv4FilterIcmpCodeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 25), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIcmpCodeEn.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIcmpCodeEn.setDescription('Enable or disable the ICMP code check.')
acdIPv4FilterIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterIcmpCode.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterIcmpCode.setDescription('The ICMP code used to compare the incoming traffic.\n         Its value ranges from 0 to 255.')
acdIPv4FilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 2, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdIPv4FilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new filter you shall provide the a unique filter name for\n        an empty row with the RowStatus set to Create and Go. To delete the\n        row you need to set the RowStatus to destroy.')
acdSmapL2FilterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3), )
if mibBuilder.loadTexts: acdSmapL2FilterTable.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterTable.setDescription('Table of all service mapping (SMAP) Layer 2 filters')
acdSmapL2FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1), ).setIndexNames((0, "ACD-FILTER-MIB", "acdSmapL2FilterID"))
if mibBuilder.loadTexts: acdSmapL2FilterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterEntry.setDescription('A Filter is a pattern matching a definition against packets.')
acdSmapL2FilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSmapL2FilterID.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterID.setDescription('Unique value for each filter. Its value ranges from 1 to maximum\n         value. This maximum  value depend of the type of platform.')
acdSmapL2FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterName.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterName.setDescription('This is a string to identify the filter.')
acdSmapL2FilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new filter you shall provide the a unique filter name for\n        an empty row with the RowStatus set to Create and Go. To delete the\n        row you need to set the RowStatus to destroy.')
acdSmapL2FilterVlan1PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorEn.setDescription('Enable or disable the first VLAN priority check.')
acdSmapL2FilterVlan1Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Prior.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Prior.setDescription('The first VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdSmapL2FilterVlan1PriorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorLast.setDescription('First VLAN priority last value, used in range operation.\n         Its value ranges from 0 to 7.')
acdSmapL2FilterVlan1PriorOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 7), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1PriorOper.setDescription('First VLAN Priority operator. Valid operator types are:\n         Greater than, Less than, Equal to or Range (inclusive range).')
acdSmapL2FilterVlan1IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdEn.setDescription('Enable or disable the first VLAN ID check.')
acdSmapL2FilterVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Id.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Id.setDescription('The first VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdSmapL2FilterVlan1IdLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdLast.setDescription('First VLAN ID last value, used in range operation.\n         Its value ranges from 0 to 4095.')
acdSmapL2FilterVlan1IdOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 11), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1IdOper.setDescription('First VLAN ID operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapL2FilterVlan1CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1CfiEn.setDescription('Enable or disable the first VLAN CFI check.')
acdSmapL2FilterVlan1Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Cfi.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Cfi.setDescription('The first VLAN CFI used to compare the incoming traffic.\n         Its value is 0 or 1.')
acdSmapL2FilterVlan1TypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1TypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1TypeEn.setDescription('Enable or disable the first VLAN Ethertype check.')
acdSmapL2FilterVlan1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 15), AcdFilterVlanType().clone('cvlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Type.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan1Type.setDescription('VLAN Ethernet type.')
acdSmapL2FilterVlan2PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorEn.setDescription('Enable or disable the second VLAN priority check.')
acdSmapL2FilterVlan2Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Prior.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Prior.setDescription('The second VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdSmapL2FilterVlan2PriorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorLast.setDescription('Second VLAN priority last value, used in range operation.\n         Its value ranges from 0 to 7.')
acdSmapL2FilterVlan2PriorOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 19), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2PriorOper.setDescription('VLAN Priority operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapL2FilterVlan2IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdEn.setDescription('Enable or disable the second VLAN ID check.')
acdSmapL2FilterVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Id.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Id.setDescription('The second VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdSmapL2FilterVlan2IdLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdLast.setDescription('Second VLAN ID last value, used in range operation.\n         Its value ranges from 0 to 4095.')
acdSmapL2FilterVlan2IdOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 23), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2IdOper.setDescription('Second VLAN ID operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapL2FilterVlan2CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2CfiEn.setDescription('Enable or disable the second VLAN CFI check.')
acdSmapL2FilterVlan2Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Cfi.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Cfi.setDescription('The second VLAN CFI used to compare the incoming traffic.\n             Its value is 0 or 1.')
acdSmapL2FilterVlan2TypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2TypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2TypeEn.setDescription('Enable or disable the second VLAN Ethertype check.')
acdSmapL2FilterVlan2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 27), AcdFilterVlanType().clone('cvlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Type.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterVlan2Type.setDescription('VLAN Ethernet type.')
acdSmapL2FilterMacDstEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacDstEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacDstEn.setDescription('Enable or disable the destination MAC address check.')
acdSmapL2FilterMacDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 29), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacDst.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacDst.setDescription('The destination MAC address used to compare the incoming traffic.')
acdSmapL2FilterMacDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 30), Unsigned32().clone(48)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacDstMask.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacDstMask.setDescription('Number of destination MAC address bits to compare. Its value ranges\n         from 0 to 48.')
acdSmapL2FilterMacSrcEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacSrcEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacSrcEn.setDescription('Enable or disable the source MAC address check.')
acdSmapL2FilterMacSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 32), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacSrc.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacSrc.setDescription('The source MAC address used to compare the incoming traffic.')
acdSmapL2FilterMacSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 33), Unsigned32().clone(48)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterMacSrcMask.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterMacSrcMask.setDescription('Number of source MAC address bits to compare. Its value ranges\n         from 0 to 48.')
acdSmapL2FilterEtypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterEtypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterEtypeEn.setDescription('Enable or disable the Ethernet type check.')
acdSmapL2FilterEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterEtype.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterEtype.setDescription('The Ethernet type used to compare the incoming traffic.')
acdSmapL2FilterIpCosEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 36), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterIpCosEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterIpCosEn.setDescription('Enable or disable the Ethernet type check.')
acdSmapL2FilterIpCosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dscp", 1), ("pre", 2))).clone('dscp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterIpCosMode.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterIpCosMode.setDescription('VLAN ID operator. Valid operator types are: Greater than, Less than,\n            Equal to or Range (inclusive range).')
acdSmapL2FilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 38), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterDscp.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterDscp.setDescription('The DSCP value used to compare the incoming traffic.\n             Its value ranges from 0 to 63.')
acdSmapL2FilterDscpLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterDscpLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterDscpLast.setDescription('The last DSCP value, used in range operation.\n             Its value ranges from 0 to 63.')
acdSmapL2FilterDscpOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 40), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterDscpOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterDscpOper.setDescription('DSCP operator. Valid operator types are: Greater than,\n            Less than, Equal to or Range (inclusive range).')
acdSmapL2FilterPre = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 41), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterPre.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterPre.setDescription('The  Precedence value used to compare the incoming traffic.\n             Its value ranges from 0 to 3.')
acdSmapL2FilterPreLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterPreLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterPreLast.setDescription('The last Precedence value, used in range operation.\n             Its value ranges from 0 to 3.')
acdSmapL2FilterPreOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 3, 1, 43), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapL2FilterPreOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterPreOper.setDescription('Precedence operator. Valid operator types are: Greater than,\n            Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4), )
if mibBuilder.loadTexts: acdSmapIPv4FilterTable.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterTable.setDescription('Table of all Extended IPv4 filters')
acdSmapIPv4FilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1), ).setIndexNames((0, "ACD-FILTER-MIB", "acdSmapIPv4FilterID"))
if mibBuilder.loadTexts: acdSmapIPv4FilterEntry.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterEntry.setDescription('A Filter is a pattern matching a definition against packets.')
acdSmapIPv4FilterID = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: acdSmapIPv4FilterID.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterID.setDescription('Unique value for each filter. Its value ranges from 1 to maximum\n         value. This maximum  value depend of the type of platform.')
acdSmapIPv4FilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterName.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterName.setDescription('This is a string to identify the filter.')
acdSmapIPv4FilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterRowStatus.setDescription('All columns must have a valid value before a row can be activated. To\n        create a new filter you shall provide the a unique filter name for\n        an empty row with the RowStatus set to Create and Go. To delete the\n        row you need to set the RowStatus to destroy.')
acdSmapIPv4FilterVlan1PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 4), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorEn.setDescription('Enable or disable the first VLAN priority check.')
acdSmapIPv4FilterVlan1Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Prior.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Prior.setDescription('The first VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdSmapIPv4FilterVlan1PriorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorLast.setDescription('First VLAN priority last value, used in range operation.\n         Its value ranges from 0 to 7.')
acdSmapIPv4FilterVlan1PriorOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 7), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1PriorOper.setDescription('VLAN Priority operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterVlan1IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 8), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdEn.setDescription('Enable or disable the first VLAN ID check.')
acdSmapIPv4FilterVlan1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Id.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Id.setDescription('The first VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdSmapIPv4FilterVlan1IdLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdLast.setDescription('First VLAN ID last value, used in range operation.\n         Its value ranges from 0 to 4095.')
acdSmapIPv4FilterVlan1IdOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 11), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1IdOper.setDescription('First VLAN ID operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterVlan1CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 12), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1CfiEn.setDescription('Enable or disable the first VLAN CFI check.')
acdSmapIPv4FilterVlan1Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Cfi.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Cfi.setDescription('The first VLAN CFI used to compare the incoming traffic.\n         Its value is 0 or 1.')
acdSmapIPv4FilterVlan1TypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1TypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1TypeEn.setDescription('Enable or disable the first VLAN Ethertype check.')
acdSmapIPv4FilterVlan1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 15), AcdFilterVlanType().clone('cvlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Type.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan1Type.setDescription('VLAN Ethernet type.')
acdSmapIPv4FilterVlan2PriorEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 16), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorEn.setDescription('Enable or disable the second VLAN priority check.')
acdSmapIPv4FilterVlan2Prior = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Prior.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Prior.setDescription('The second VLAN priority used to compare the incoming traffic.\n         Its value ranges from 0 to 7.')
acdSmapIPv4FilterVlan2PriorLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorLast.setDescription('Second VLAN priority last value, used in range operation.\n         Its value ranges from 0 to 7.')
acdSmapIPv4FilterVlan2PriorOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 19), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2PriorOper.setDescription('VLAN Priority operator. Valid operator types are: Greater than,\n         Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterVlan2IdEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdEn.setDescription('Enable or disable the second VLAN ID check.')
acdSmapIPv4FilterVlan2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Id.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Id.setDescription('The second VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdSmapIPv4FilterVlan2IdLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdLast.setDescription('The second VLAN ID used to compare the incoming traffic.\n         Its value ranges from 0 to 4095.')
acdSmapIPv4FilterVlan2IdOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 23), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2IdOper.setDescription('VLAN ID operator. Valid operator types are: Greater than, Less than,\n         Equal to or Range (inclusive range).')
acdSmapIPv4FilterVlan2CfiEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 24), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2CfiEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2CfiEn.setDescription('Enable or disable the second VLAN CFI check.')
acdSmapIPv4FilterVlan2Cfi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 25), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Cfi.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Cfi.setDescription('The second VLAN CFI used to compare the incoming traffic.\n             Its value is 0 or 1.')
acdSmapIPv4FilterVlan2TypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 26), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2TypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2TypeEn.setDescription('Enable or disable the second VLAN Ethertype check.')
acdSmapIPv4FilterVlan2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 27), AcdFilterVlanType().clone('cvlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Type.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterVlan2Type.setDescription('VLAN Ethernet type.')
acdSmapIPv4FilterSrcEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 28), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcEn.setDescription('Enable or disable the Source IP address check.')
acdSmapIPv4FilterSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 29), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterSrc.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterSrc.setDescription('The source IP address used to compare the incoming traffic.')
acdSmapIPv4FilterSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 30), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcMask.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcMask.setDescription('The source IP address mask used to compare the incoming traffic.')
acdSmapIPv4FilterDstEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 31), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDstEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDstEn.setDescription('Enable or disable the Destination IP address check.')
acdSmapIPv4FilterDst = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 32), IpAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDst.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDst.setDescription('The destination IP address used to compare the incoming traffic.')
acdSmapIPv4FilterDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 33), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDstMask.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDstMask.setDescription('The destination IP address mask used to compare the \n            incoming traffic.')
acdSmapIPv4FilterProtoEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 34), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterProtoEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterProtoEn.setDescription('Enable or disable the IP protocol check.')
acdSmapIPv4FilterProto = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 35), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterProto.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterProto.setDescription('The IP protocol used to compare the incoming traffic.\n             Its value ranges from 0 to 255.')
acdSmapIPv4FilterTTLEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 36), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterTTLEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterTTLEn.setDescription('Enable or disable the TTL check.')
acdSmapIPv4FilterTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 37), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterTTL.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterTTL.setDescription('The TTL used to compare the incoming traffic.\n             Its value ranges from 0 to 255.')
acdSmapIPv4FilterIHLEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 38), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIHLEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIHLEn.setDescription('Enable or disable the IP Header Length check.')
acdSmapIPv4FilterIHL = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 39), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5, 15)).clone(5)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIHL.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIHL.setDescription('The IP Header Length used to compare the incoming traffic.\n             Its value ranges from 5 to 15.')
acdSmapIPv4FilterIpCosEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 40), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIpCosEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIpCosEn.setDescription('Enable or disable the Ethernet type check.')
acdSmapIPv4FilterIpCosMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dscp", 1), ("pre", 2))).clone('dscp')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIpCosMode.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIpCosMode.setDescription('VLAN ID operator. Valid operator types are: Greater than, Less than,\n            Equal to or Range (inclusive range).')
acdSmapIPv4FilterDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 42), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDscp.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDscp.setDescription('The DSCP value used to compare the incoming traffic.\n             Its value ranges from 0 to 63.')
acdSmapIPv4FilterDscpLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 43), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDscpLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDscpLast.setDescription('The DSCP value used to compare the incoming traffic.\n             Its value ranges from 0 to 63.')
acdSmapIPv4FilterDscpOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 44), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDscpOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDscpOper.setDescription('DSCP operator. Valid operator types are: Greater than,\n            Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterPre = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 45), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterPre.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterPre.setDescription('The  Precedence value used to compare the incoming traffic.\n             Its value ranges from 0 to 3.')
acdSmapIPv4FilterPreLast = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 46), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterPreLast.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterPreLast.setDescription('The Precedence value used to compare the incoming traffic.\n             Its value ranges from 0 to 3.')
acdSmapIPv4FilterPreOper = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 47), AcdFilterOperator().clone('equalTo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterPreOper.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterPreOper.setDescription('Precedence operator. Valid operator types are: Greater than,\n            Less than, Equal to or Range (inclusive range).')
acdSmapIPv4FilterECNEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 48), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterECNEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterECNEn.setDescription('Enable or disable the ECN (Explicite Cogestion Notification) check.')
acdSmapIPv4FilterECN = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 49), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterECN.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterECN.setDescription('The ECN value used to compare the incoming traffic.\n             Its value ranges from 0 to 3.')
acdSmapIPv4FilterSrcPortEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 50), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcPortEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcPortEn.setDescription('Enable or disable the UDP/TCP Source port check.')
acdSmapIPv4FilterSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcPort.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterSrcPort.setDescription('The UDP/TCP Source Port used to compare the incoming traffic.\n             Its value ranges from 0 to 65535.')
acdSmapIPv4FilterDstPortEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 52), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDstPortEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDstPortEn.setDescription('Enable or disable the UDP/TCP Destination port check.')
acdSmapIPv4FilterDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterDstPort.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterDstPort.setDescription('The UDP/TCP Destination Port used to compare the incoming traffic.\n             Its value ranges from 0 to 65535.')
acdSmapIPv4FilterIcmpTypeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 54), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpTypeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpTypeEn.setDescription('Enable or disable the ICMP type check.')
acdSmapIPv4FilterIcmpType = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpType.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpType.setDescription('The ICMP type used to compare the incoming traffic.\n             Its value ranges from 0 to 255.')
acdSmapIPv4FilterIcmpCodeEn = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 56), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpCodeEn.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpCodeEn.setDescription('Enable or disable the ICMP code check.')
acdSmapIPv4FilterIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 2, 4, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpCode.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterIcmpCode.setDescription('The ICMP code used to compare the incoming traffic.\n             Its value ranges from 0 to 255.')
acdSmapL2FilterTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 2, 6, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSmapL2FilterTableLastChangeTid.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterTableLastChangeTid.setDescription('This is the transaction ID of the last change of the acdSmapL2FilterTable\n        table.  If this value is different since the last read this is indicate \n        a table change.')
acdSmapIPv4FilterTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 2, 6, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdSmapIPv4FilterTableLastChangeTid.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterTableLastChangeTid.setDescription('This is the transaction ID of the last change of the acdSmapIPv4FilterTable\n        table.  If this value is different since the last read this is indicate \n        a table change.')
acdFilterCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 1))
acdFilterGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2))
acdL2FilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2, 1)).setObjects(("ACD-FILTER-MIB", "acdL2FilterName"), ("ACD-FILTER-MIB", "acdL2FilterMacDstEn"), ("ACD-FILTER-MIB", "acdL2FilterMacDst"), ("ACD-FILTER-MIB", "acdL2FilterMacDstMask"), ("ACD-FILTER-MIB", "acdL2FilterMacSrcEn"), ("ACD-FILTER-MIB", "acdL2FilterMacSrc"), ("ACD-FILTER-MIB", "acdL2FilterMacSrcMask"), ("ACD-FILTER-MIB", "acdL2FilterEtypeEn"), ("ACD-FILTER-MIB", "acdL2FilterEtype"), ("ACD-FILTER-MIB", "acdL2FilterVlan1PriorEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan1Prior"), ("ACD-FILTER-MIB", "acdL2FilterVlan1CfiEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan1Cfi"), ("ACD-FILTER-MIB", "acdL2FilterVlan1IdEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan1Id"), ("ACD-FILTER-MIB", "acdL2FilterVlan2PriorEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan2Prior"), ("ACD-FILTER-MIB", "acdL2FilterVlan2CfiEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan2Cfi"), ("ACD-FILTER-MIB", "acdL2FilterVlan2IdEn"), ("ACD-FILTER-MIB", "acdL2FilterVlan2Id"), ("ACD-FILTER-MIB", "acdL2FilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdL2FilterGroup = acdL2FilterGroup.setStatus('current')
if mibBuilder.loadTexts: acdL2FilterGroup.setDescription('Objects for the L2 filter configuration Group.')
acdIPv4FilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2, 2)).setObjects(("ACD-FILTER-MIB", "acdIPv4FilterName"), ("ACD-FILTER-MIB", "acdIPv4FilterSrcEn"), ("ACD-FILTER-MIB", "acdIPv4FilterSrc"), ("ACD-FILTER-MIB", "acdIPv4FilterSrcMask"), ("ACD-FILTER-MIB", "acdIPv4FilterDstEn"), ("ACD-FILTER-MIB", "acdIPv4FilterDst"), ("ACD-FILTER-MIB", "acdIPv4FilterDstMask"), ("ACD-FILTER-MIB", "acdIPv4FilterProtoEn"), ("ACD-FILTER-MIB", "acdIPv4FilterProto"), ("ACD-FILTER-MIB", "acdIPv4FilterTTLEn"), ("ACD-FILTER-MIB", "acdIPv4FilterTTL"), ("ACD-FILTER-MIB", "acdIPv4FilterIHLEn"), ("ACD-FILTER-MIB", "acdIPv4FilterIHL"), ("ACD-FILTER-MIB", "acdIPv4FilterDscpEn"), ("ACD-FILTER-MIB", "acdIPv4FilterDscp"), ("ACD-FILTER-MIB", "acdIPv4FilterECNEn"), ("ACD-FILTER-MIB", "acdIPv4FilterECN"), ("ACD-FILTER-MIB", "acdIPv4FilterSrcPortEn"), ("ACD-FILTER-MIB", "acdIPv4FilterSrcPort"), ("ACD-FILTER-MIB", "acdIPv4FilterDstPortEn"), ("ACD-FILTER-MIB", "acdIPv4FilterDstPort"), ("ACD-FILTER-MIB", "acdIPv4FilterIcmpTypeEn"), ("ACD-FILTER-MIB", "acdIPv4FilterIcmpType"), ("ACD-FILTER-MIB", "acdIPv4FilterIcmpCodeEn"), ("ACD-FILTER-MIB", "acdIPv4FilterIcmpCode"), ("ACD-FILTER-MIB", "acdIPv4FilterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdIPv4FilterGroup = acdIPv4FilterGroup.setStatus('current')
if mibBuilder.loadTexts: acdIPv4FilterGroup.setDescription('Objects for the IPv4 filter configuration Group.')
acdSmapL2FilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2, 3)).setObjects(("ACD-FILTER-MIB", "acdSmapL2FilterName"), ("ACD-FILTER-MIB", "acdSmapL2FilterRowStatus"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1PriorEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1Prior"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1PriorLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1PriorOper"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1IdEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1Id"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1IdLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1IdOper"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1CfiEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1Cfi"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1TypeEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan1Type"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2PriorEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2Prior"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2PriorLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2PriorOper"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2IdEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2Id"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2IdLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2IdOper"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2CfiEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2Cfi"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2TypeEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterVlan2Type"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacDstEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacDst"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacDstMask"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacSrcEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacSrc"), ("ACD-FILTER-MIB", "acdSmapL2FilterMacSrcMask"), ("ACD-FILTER-MIB", "acdSmapL2FilterEtypeEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterEtype"), ("ACD-FILTER-MIB", "acdSmapL2FilterIpCosEn"), ("ACD-FILTER-MIB", "acdSmapL2FilterIpCosMode"), ("ACD-FILTER-MIB", "acdSmapL2FilterDscp"), ("ACD-FILTER-MIB", "acdSmapL2FilterDscpLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterDscpOper"), ("ACD-FILTER-MIB", "acdSmapL2FilterPre"), ("ACD-FILTER-MIB", "acdSmapL2FilterPreLast"), ("ACD-FILTER-MIB", "acdSmapL2FilterPreOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSmapL2FilterGroup = acdSmapL2FilterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSmapL2FilterGroup.setDescription('Objects for the SMAP L2 filter configuration Group.')
acdSmapIPv4FilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2, 4)).setObjects(("ACD-FILTER-MIB", "acdSmapIPv4FilterName"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterRowStatus"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1PriorEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1Prior"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1PriorLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1PriorOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1IdEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1Id"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1IdLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1IdOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1CfiEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1Cfi"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1TypeEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan1Type"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2PriorEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2Prior"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2PriorLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2PriorOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2IdEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2Id"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2IdLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2IdOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2CfiEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2Cfi"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2TypeEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterVlan2Type"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterSrcEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterSrc"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterSrcMask"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDstEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDst"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDstMask"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterProtoEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterProto"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterTTLEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterTTL"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIHLEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIHL"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIpCosEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIpCosMode"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDscp"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDscpLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDscpOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterPre"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterPreLast"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterPreOper"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterECNEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterECN"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterSrcPortEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterSrcPort"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDstPortEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterDstPort"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIcmpTypeEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIcmpType"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIcmpCodeEn"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterIcmpCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdSmapIPv4FilterGroup = acdSmapIPv4FilterGroup.setStatus('current')
if mibBuilder.loadTexts: acdSmapIPv4FilterGroup.setDescription('Objects for the SMAP IPv4 filter configuration Group.')
acdFilterTidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 2, 5)).setObjects(("ACD-FILTER-MIB", "acdSmapL2FilterTableLastChangeTid"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterTableLastChangeTid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdFilterTidGroup = acdFilterTidGroup.setStatus('current')
if mibBuilder.loadTexts: acdFilterTidGroup.setDescription('List of scalars to monitior changes in tables.')
acdFilterCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 2, 7, 1, 1)).setObjects(("ACD-FILTER-MIB", "acdL2FilterGroup"), ("ACD-FILTER-MIB", "acdIPv4FilterGroup"), ("ACD-FILTER-MIB", "acdSmapL2FilterGroup"), ("ACD-FILTER-MIB", "acdSmapIPv4FilterGroup"), ("ACD-FILTER-MIB", "acdFilterTidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdFilterCompliance = acdFilterCompliance.setStatus('current')
if mibBuilder.loadTexts: acdFilterCompliance.setDescription('The compliance statement for support of the ACD-FILTER-MIB module.')
mibBuilder.exportSymbols("ACD-FILTER-MIB", acdL2FilterVlan1IdEn=acdL2FilterVlan1IdEn, acdIPv4FilterEntry=acdIPv4FilterEntry, acdL2FilterEtype=acdL2FilterEtype, acdSmapL2FilterID=acdSmapL2FilterID, acdL2FilterEtypeEn=acdL2FilterEtypeEn, acdSmapIPv4FilterProtoEn=acdSmapIPv4FilterProtoEn, acdSmapIPv4FilterECNEn=acdSmapIPv4FilterECNEn, acdSmapL2FilterPre=acdSmapL2FilterPre, acdSmapIPv4FilterTable=acdSmapIPv4FilterTable, acdIPv4FilterIHLEn=acdIPv4FilterIHLEn, acdSmapIPv4FilterSrcPort=acdSmapIPv4FilterSrcPort, acdIPv4FilterIcmpCode=acdIPv4FilterIcmpCode, acdSmapIPv4FilterRowStatus=acdSmapIPv4FilterRowStatus, acdFilterConformance=acdFilterConformance, acdSmapIPv4FilterDscpOper=acdSmapIPv4FilterDscpOper, acdSmapIPv4FilterVlan1Cfi=acdSmapIPv4FilterVlan1Cfi, acdIPv4FilterIcmpTypeEn=acdIPv4FilterIcmpTypeEn, acdL2FilterName=acdL2FilterName, acdSmapL2FilterMacDstEn=acdSmapL2FilterMacDstEn, acdSmapIPv4FilterProto=acdSmapIPv4FilterProto, acdSmapL2FilterVlan1TypeEn=acdSmapL2FilterVlan1TypeEn, acdSmapIPv4FilterIcmpType=acdSmapIPv4FilterIcmpType, acdL2FilterMacSrcEn=acdL2FilterMacSrcEn, acdIPv4FilterDstMask=acdIPv4FilterDstMask, acdIPv4FilterDstEn=acdIPv4FilterDstEn, acdSmapL2FilterVlan1IdLast=acdSmapL2FilterVlan1IdLast, acdFilterCompliances=acdFilterCompliances, acdFilterCompliance=acdFilterCompliance, acdL2FilterVlan2PriorEn=acdL2FilterVlan2PriorEn, acdL2FilterEntry=acdL2FilterEntry, acdSmapL2FilterVlan2PriorEn=acdSmapL2FilterVlan2PriorEn, acdSmapIPv4FilterVlan2Cfi=acdSmapIPv4FilterVlan2Cfi, acdIPv4FilterTTL=acdIPv4FilterTTL, acdSmapIPv4FilterVlan2CfiEn=acdSmapIPv4FilterVlan2CfiEn, acdL2FilterVlan1Prior=acdL2FilterVlan1Prior, acdIPv4FilterTable=acdIPv4FilterTable, acdIPv4FilterIcmpCodeEn=acdIPv4FilterIcmpCodeEn, acdSmapIPv4FilterVlan1IdOper=acdSmapIPv4FilterVlan1IdOper, acdSmapL2FilterRowStatus=acdSmapL2FilterRowStatus, acdSmapL2FilterName=acdSmapL2FilterName, acdSmapIPv4FilterDstEn=acdSmapIPv4FilterDstEn, acdL2FilterMacSrc=acdL2FilterMacSrc, acdSmapIPv4FilterDscpLast=acdSmapIPv4FilterDscpLast, acdFilterMIBObjects=acdFilterMIBObjects, acdL2FilterMacDstEn=acdL2FilterMacDstEn, acdIPv4FilterDstPortEn=acdIPv4FilterDstPortEn, acdSmapL2FilterIpCosMode=acdSmapL2FilterIpCosMode, acdIPv4FilterGroup=acdIPv4FilterGroup, acdSmapL2FilterEtype=acdSmapL2FilterEtype, acdSmapIPv4FilterDscp=acdSmapIPv4FilterDscp, acdIPv4FilterDscpEn=acdIPv4FilterDscpEn, AcdFilterOperator=AcdFilterOperator, acdFilterNotifications=acdFilterNotifications, acdSmapL2FilterPreLast=acdSmapL2FilterPreLast, acdSmapL2FilterVlan1PriorEn=acdSmapL2FilterVlan1PriorEn, acdSmapIPv4FilterVlan1PriorEn=acdSmapIPv4FilterVlan1PriorEn, acdSmapL2FilterVlan1PriorOper=acdSmapL2FilterVlan1PriorOper, acdSmapL2FilterMacSrc=acdSmapL2FilterMacSrc, acdL2FilterTable=acdL2FilterTable, acdSmapL2FilterVlan2IdLast=acdSmapL2FilterVlan2IdLast, acdSmapIPv4FilterName=acdSmapIPv4FilterName, acdL2FilterID=acdL2FilterID, acdSmapIPv4FilterSrc=acdSmapIPv4FilterSrc, acdIPv4FilterSrcMask=acdIPv4FilterSrcMask, acdSmapL2FilterVlan2IdEn=acdSmapL2FilterVlan2IdEn, acdIPv4FilterSrcPortEn=acdIPv4FilterSrcPortEn, acdSmapL2FilterVlan1IdEn=acdSmapL2FilterVlan1IdEn, acdIPv4FilterSrcEn=acdIPv4FilterSrcEn, acdSmapIPv4FilterID=acdSmapIPv4FilterID, acdIPv4FilterDscp=acdIPv4FilterDscp, acdSmapIPv4FilterDstPort=acdSmapIPv4FilterDstPort, acdSmapL2FilterDscp=acdSmapL2FilterDscp, acdSmapL2FilterVlan1CfiEn=acdSmapL2FilterVlan1CfiEn, acdL2FilterVlan2Cfi=acdL2FilterVlan2Cfi, acdSmapL2FilterDscpOper=acdSmapL2FilterDscpOper, acdL2FilterMacDstMask=acdL2FilterMacDstMask, acdSmapIPv4FilterTTLEn=acdSmapIPv4FilterTTLEn, acdSmapIPv4FilterVlan2Type=acdSmapIPv4FilterVlan2Type, acdIPv4FilterName=acdIPv4FilterName, acdSmapIPv4FilterVlan2PriorLast=acdSmapIPv4FilterVlan2PriorLast, acdSmapIPv4FilterSrcPortEn=acdSmapIPv4FilterSrcPortEn, acdFilterTidGroup=acdFilterTidGroup, acdIPv4FilterRowStatus=acdIPv4FilterRowStatus, acdSmapIPv4FilterTableLastChangeTid=acdSmapIPv4FilterTableLastChangeTid, acdSmapL2FilterVlan2Cfi=acdSmapL2FilterVlan2Cfi, acdSmapIPv4FilterIpCosMode=acdSmapIPv4FilterIpCosMode, acdSmapL2FilterVlan2Type=acdSmapL2FilterVlan2Type, acdSmapL2FilterGroup=acdSmapL2FilterGroup, acdSmapIPv4FilterEntry=acdSmapIPv4FilterEntry, acdSmapL2FilterVlan1Cfi=acdSmapL2FilterVlan1Cfi, acdL2FilterVlan1PriorEn=acdL2FilterVlan1PriorEn, acdIPv4FilterECN=acdIPv4FilterECN, acdSmapL2FilterEntry=acdSmapL2FilterEntry, acdSmapIPv4FilterVlan2IdOper=acdSmapIPv4FilterVlan2IdOper, acdSmapIPv4FilterDstMask=acdSmapIPv4FilterDstMask, acdSmapL2FilterVlan1PriorLast=acdSmapL2FilterVlan1PriorLast, acdIPv4FilterID=acdIPv4FilterID, acdSmapIPv4FilterDstPortEn=acdSmapIPv4FilterDstPortEn, acdSmapIPv4FilterIpCosEn=acdSmapIPv4FilterIpCosEn, acdL2FilterMacSrcMask=acdL2FilterMacSrcMask, acdSmapL2FilterMacSrcEn=acdSmapL2FilterMacSrcEn, acdSmapL2FilterVlan2IdOper=acdSmapL2FilterVlan2IdOper, acdSmapIPv4FilterVlan1TypeEn=acdSmapIPv4FilterVlan1TypeEn, acdSmapIPv4FilterIcmpTypeEn=acdSmapIPv4FilterIcmpTypeEn, acdSmapL2FilterVlan2Id=acdSmapL2FilterVlan2Id, acdFilterTableTid=acdFilterTableTid, acdSmapIPv4FilterVlan1Type=acdSmapIPv4FilterVlan1Type, acdSmapIPv4FilterVlan2Prior=acdSmapIPv4FilterVlan2Prior, acdSmapIPv4FilterPreLast=acdSmapIPv4FilterPreLast, acdSmapIPv4FilterIcmpCodeEn=acdSmapIPv4FilterIcmpCodeEn, AcdFilterVlanType=AcdFilterVlanType, acdSmapL2FilterVlan2Prior=acdSmapL2FilterVlan2Prior, acdSmapL2FilterVlan1Prior=acdSmapL2FilterVlan1Prior, acdSmapIPv4FilterVlan1PriorOper=acdSmapIPv4FilterVlan1PriorOper, acdSmapL2FilterVlan2TypeEn=acdSmapL2FilterVlan2TypeEn, acdL2FilterMacDst=acdL2FilterMacDst, acdSmapIPv4FilterVlan1Id=acdSmapIPv4FilterVlan1Id, acdSmapIPv4FilterIcmpCode=acdSmapIPv4FilterIcmpCode, acdSmapL2FilterIpCosEn=acdSmapL2FilterIpCosEn, acdIPv4FilterProtoEn=acdIPv4FilterProtoEn, acdSmapIPv4FilterGroup=acdSmapIPv4FilterGroup, acdSmapIPv4FilterVlan2PriorOper=acdSmapIPv4FilterVlan2PriorOper, acdIPv4FilterProto=acdIPv4FilterProto, acdSmapIPv4FilterTTL=acdSmapIPv4FilterTTL, acdSmapIPv4FilterVlan1IdEn=acdSmapIPv4FilterVlan1IdEn, acdSmapIPv4FilterVlan2IdEn=acdSmapIPv4FilterVlan2IdEn, acdSmapIPv4FilterPreOper=acdSmapIPv4FilterPreOper, acdIPv4FilterIcmpType=acdIPv4FilterIcmpType, acdSmapL2FilterTableLastChangeTid=acdSmapL2FilterTableLastChangeTid, acdSmapL2FilterVlan2CfiEn=acdSmapL2FilterVlan2CfiEn, acdSmapL2FilterPreOper=acdSmapL2FilterPreOper, acdSmapL2FilterVlan1Type=acdSmapL2FilterVlan1Type, acdSmapIPv4FilterPre=acdSmapIPv4FilterPre, acdIPv4FilterSrc=acdIPv4FilterSrc, acdSmapL2FilterEtypeEn=acdSmapL2FilterEtypeEn, acdL2FilterVlan2IdEn=acdL2FilterVlan2IdEn, acdSmapL2FilterTable=acdSmapL2FilterTable, acdL2FilterVlan1Cfi=acdL2FilterVlan1Cfi, acdSmapL2FilterDscpLast=acdSmapL2FilterDscpLast, acdSmapIPv4FilterVlan2PriorEn=acdSmapIPv4FilterVlan2PriorEn, acdSmapIPv4FilterVlan2TypeEn=acdSmapIPv4FilterVlan2TypeEn, acdSmapIPv4FilterECN=acdSmapIPv4FilterECN, acdFilterGroups=acdFilterGroups, acdSmapIPv4FilterIHL=acdSmapIPv4FilterIHL, acdIPv4FilterSrcPort=acdIPv4FilterSrcPort, acdL2FilterGroup=acdL2FilterGroup, acdL2FilterRowStatus=acdL2FilterRowStatus, acdIPv4FilterDstPort=acdIPv4FilterDstPort, acdL2FilterVlan2CfiEn=acdL2FilterVlan2CfiEn, PYSNMP_MODULE_ID=acdFilter, acdSmapL2FilterMacDst=acdSmapL2FilterMacDst, acdSmapL2FilterVlan2PriorOper=acdSmapL2FilterVlan2PriorOper, acdSmapL2FilterMacDstMask=acdSmapL2FilterMacDstMask, acdSmapIPv4FilterVlan1PriorLast=acdSmapIPv4FilterVlan1PriorLast, acdSmapIPv4FilterVlan1CfiEn=acdSmapIPv4FilterVlan1CfiEn, acdSmapIPv4FilterVlan2IdLast=acdSmapIPv4FilterVlan2IdLast, acdSmapIPv4FilterVlan1IdLast=acdSmapIPv4FilterVlan1IdLast, acdSmapL2FilterVlan1IdOper=acdSmapL2FilterVlan1IdOper, acdL2FilterVlan1CfiEn=acdL2FilterVlan1CfiEn, acdSmapIPv4FilterVlan1Prior=acdSmapIPv4FilterVlan1Prior, acdL2FilterVlan2Id=acdL2FilterVlan2Id, acdIPv4FilterTTLEn=acdIPv4FilterTTLEn, acdIPv4FilterECNEn=acdIPv4FilterECNEn, acdIPv4FilterIHL=acdIPv4FilterIHL, acdL2FilterVlan2Prior=acdL2FilterVlan2Prior, acdL2FilterVlan1Id=acdL2FilterVlan1Id, acdIPv4FilterDst=acdIPv4FilterDst, acdSmapIPv4FilterDst=acdSmapIPv4FilterDst, acdSmapIPv4FilterVlan2Id=acdSmapIPv4FilterVlan2Id, acdFilter=acdFilter, acdSmapL2FilterMacSrcMask=acdSmapL2FilterMacSrcMask, acdSmapIPv4FilterSrcMask=acdSmapIPv4FilterSrcMask, acdSmapIPv4FilterSrcEn=acdSmapIPv4FilterSrcEn, acdSmapL2FilterVlan2PriorLast=acdSmapL2FilterVlan2PriorLast, acdSmapL2FilterVlan1Id=acdSmapL2FilterVlan1Id, acdSmapIPv4FilterIHLEn=acdSmapIPv4FilterIHLEn)
