#
# PySNMP MIB module ACD-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/accedian/ACD-PORT-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:50:49 2024
# On host fv-az1206-254 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acdMibs, = mibBuilder.importSymbols("ACCEDIAN-SMI", "acdMibs")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, Integer32, ObjectIdentity, Counter64, Bits, ModuleIdentity, TimeTicks, IpAddress, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Unsigned32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Integer32", "ObjectIdentity", "Counter64", "Bits", "ModuleIdentity", "TimeTicks", "IpAddress", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Unsigned32", "iso")
MacAddress, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TruthValue", "DisplayString", "TextualConvention")
acdPort = ModuleIdentity((1, 3, 6, 1, 4, 1, 22420, 2, 9))
acdPort.setRevisions(('2011-10-10 01:00', '2010-10-01 01:00', '2008-05-01 01:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acdPort.setRevisionsDescriptions(('Add acdPortConfigTableLastChangeTid.', '...', 'Initial version of MIB module ACD-PORT-MIB.',))
if mibBuilder.loadTexts: acdPort.setLastUpdated('201110100100Z')
if mibBuilder.loadTexts: acdPort.setOrganization('Accedian Networks, Inc.')
if mibBuilder.loadTexts: acdPort.setContactInfo('Accedian Technical Assistance Center\n             Accedian Networks, Inc.\n             4878 Levy, suite 202\n             Saint-Laurent, Quebec Canada H4R 2P1\n             E-mail: support@accedian.com')
if mibBuilder.loadTexts: acdPort.setDescription('The Port statistics for this Accedian Networks device.')
acdPortMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1))
acdPortConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2))
acdPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1))
acdPortStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2))
acdPortStats = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3))
acdPortTableTid = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 4))
acdPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1), )
if mibBuilder.loadTexts: acdPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigTable.setDescription('Table of port configuration attributes')
acdPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortConfigIndex"))
if mibBuilder.loadTexts: acdPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigEntry.setDescription('Port configuration.')
acdPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortConfigIndex.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigIndex.setDescription('The value of this object uniquely identifies this acdPortConfig\n        entry.')
acdPortConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigName.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigName.setDescription('This is a string to identify the port.')
acdPortConfigAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAlias.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigAlias.setDescription('This is a string to give the port an alias.')
acdPortConfigMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigMacAddress.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigMacAddress.setDescription('The MAC address of the port.')
acdPortConfigConnectorId = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 5), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigConnectorId.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigConnectorId.setDescription('This object identifies the connector ID of the port. This object\n         shall identify the acdDescConnectorID object, defined in the\n         ACD-DESC-MIB.')
acdPortConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigState.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigState.setDescription('Enable or disable the port.')
acdPortConfigMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigMtu.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigMtu.setDescription('The configured MTU of the port. The value ranges from 1518 to 10240.')
acdPortConfigAutoNegoState = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAutoNegoState.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigAutoNegoState.setDescription('Enable or disable the auto negociation on the port.')
acdPortConfigSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigSpeed.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigSpeed.setDescription('The configured speed of the port in Mbps. The valid values are 10, 100,\n         1000 and 10000.')
acdPortConfigDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigDuplex.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigDuplex.setDescription('The configured duplex mode for this port.')
acdPortConfigMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("autoMdi", 1), ("mdi", 2), ("mdix", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigMdi.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigMdi.setDescription('The configured MDI mode for this port.')
acdPortConfigPauseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("local", 2), ("forward", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigPauseMode.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigPauseMode.setDescription('The configured pause mode for this port.')
acdPortConfigAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 1, 1, 1, 13), Bits().clone(namedValues=NamedValues(("bHalfDuplex10Mbps", 0), ("bFullDuplex10Mbps", 1), ("bHalfDuplex100Mbps", 2), ("bFullDuplex100Mbps", 3), ("bHalfDuplex1Gbps", 4), ("bFullDuplex1Gbps", 5), ("bPauseSymmetric", 6), ("bPauseAsymmetric", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acdPortConfigAdvertisement.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigAdvertisement.setDescription('A value that identifies the set of port capabilities \n                to advertise during auto-negociation. Each bit indicates whether\n                or not the specific capability is valid on the system.')
acdPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1), )
if mibBuilder.loadTexts: acdPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusTable.setDescription('Table for port status')
acdPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortStatusIndex"))
if mibBuilder.loadTexts: acdPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusEntry.setDescription('Port status.')
acdPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusIndex.setDescription('The value of this object uniquely identifies this acdPortStatus\n        entry.')
acdPortStatusSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusSpeed.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusSpeed.setDescription('The current speed of the port in Mbps. The valid values are 10, 100\n         1000 and 10000.')
acdPortStatusDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("halfDuplex", 1), ("fullDuplex", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusDuplex.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusDuplex.setDescription('The current duplex mode of the port.')
acdPortStatusMdi = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("mdi", 1), ("mdix", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusMdi.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusMdi.setDescription('The current MDI mode of the port.')
acdPortStatusTxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusTxPause.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusTxPause.setDescription('Indicates whether or not the port is transmitting pause frames.')
acdPortStatusRxPause = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusRxPause.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusRxPause.setDescription('Indicates whether or not the port is receiving pause frames.')
acdPortStatusLinkPartnerAbility = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 7), Bits().clone(namedValues=NamedValues(("bHalfDuplex10Mbps", 0), ("bFullDuplex10Mbps", 1), ("bHalfDuplex100Mbps", 2), ("bFullDuplex100Mbps", 3), ("bHalfDuplex1Gbps", 4), ("bFullDuplex1Gbps", 5), ("bPauseSymmetric", 6), ("bPauseAsymmetric", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusLinkPartnerAbility.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusLinkPartnerAbility.setDescription('A value that identifies the set of port capabilities \n                advertised by the link partner. Each bit indicates whether\n                or not the specific capability is valid on the link partner\n                system.')
acdPortStatusLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusLinkStatus.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusLinkStatus.setDescription('Indicates if the port link is Up or Down.\n        Down(FALSE),\n        Up(TRUE)')
acdPortStatusMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 9), Bits().clone(namedValues=NamedValues(("bOther", 0), ("bAUI", 1), ("b10base5", 2), ("bFoirl", 3), ("b10base2", 4), ("b10baseT", 5), ("b10baseFP", 6), ("b10baseFB", 7), ("b10baseFL", 8), ("b10broad36", 9), ("b10baseTHD", 10), ("b10baseTFD", 11), ("b10baseFLHD", 12), ("b10baseFLFD", 13), ("b100baseT4", 14), ("b100baseTXHD", 15), ("b100baseTXFD", 16), ("b100baseFXHD", 17), ("b100baseFXFD", 18), ("b100baseT2HD", 19), ("b100baseT2FD", 20), ("b1000baseXHD", 21), ("b1000baseXFD", 22), ("b1000baseLXHD", 23), ("b1000baseLXFD", 24), ("b1000baseSXHD", 25), ("b1000baseSXFD", 26), ("b1000baseCXHD", 27), ("b1000baseCXFD", 28), ("b1000baseTHD", 29), ("b1000baseTFD", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusMedia.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusMedia.setDescription('A value that uniquely identifies the selected media type.')
acdPortStatusIsMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsMonitor.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusIsMonitor.setDescription('Indicates if the port is a monitor port.\n        No(FALSE),\n        Yes(TRUE)')
acdPortStatusIsManagement = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsManagement.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusIsManagement.setDescription('Indicates if the port is a management port.\n        No(FALSE),\n        Yes(TRUE)')
acdPortStatusIsSFP = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsSFP.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusIsSFP.setDescription('Indicates if the port has an SFP.\n        No(FALSE),\n        Yes(TRUE)')
acdPortStatusIsFiber = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortStatusIsFiber.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusIsFiber.setDescription('Indicates if the port is connected to fiber.\n        No(FALSE),\n        Yes(TRUE)')
acdPortTxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1), )
if mibBuilder.loadTexts: acdPortTxStatsTable.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsTable.setDescription('Table of port transmit statistics')
acdPortTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortTxStatsIndex"))
if mibBuilder.loadTexts: acdPortTxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsEntry.setDescription('port transmit statistics.')
acdPortTxStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortTxStatsIndex.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsIndex.setDescription('The value of this object uniquely identifies this acdPortTxStats\n        entry.')
acdPortTxStatsSupportBits = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 2), Bits().clone(namedValues=NamedValues(("bBytesGood", 0), ("bBytesTotal", 1), ("bUnicastPkts", 2), ("bMulticastPkts", 3), ("bBroadcastPkts", 4), ("bPauseFrames", 5), ("bTaggedFrames", 6), ("bCRCErrors", 7), ("bDeferred", 8), ("bExcessiveDeferrals", 9), ("bSingleCollisions", 10), ("bMultipleCollisions", 11), ("bExcessiveCollisions", 12), ("bLateCollisions", 13), ("bNormalCollisions", 14), ("bFifoErrors", 15), ("bPkts64", 16), ("bPkts65to127", 17), ("bPkts128to255", 18), ("bPkts256to511", 19), ("bPkts512to1023", 20), ("bPkts1024to1518", 21), ("bPkts1519to2047", 22), ("bPkts2048to4095", 23), ("bPkts4096to8191", 24), ("bPkts8192andMore", 25), ("bPktsLarge", 26)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsSupportBits.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsSupportBits.setDescription('A value that identifies the set of TX statistics\n               supported by the device. Each bit indicates whether\n               or not the specific statistic value is valid on the\n               system.')
acdPortTxStatsBytesGood = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 3), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBytesGood.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsBytesGood.setDescription('This is a count of the total number of bytes transmitted by the port\n        in good packets. The count includes the 4 CRC bytes but does not \n        include the preamble or SFD bytes. A good packet is one that has been\n        transmitted successfully (not aborted) with a good CRC. It is assumed\n        that all transmit packets are properly sized, 64 bytes (after any \n        padding) to maxsize bytes long.')
acdPortTxStatsBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBytesTotal.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsBytesTotal.setDescription('This is a count of the total number of bytes transmitted by the port\n        in good and bad packets. The count includes the 4 CRC bytes but does\n        not include the preamble or SFD bytes. Bad packets include normal \n        collisions, late collisions, and FIFO underflows. For collisions, \n        all bytes transmitted before the start of the collision as well as\n        the colliding and jam bytes are counted. For FIFO underflows, all\n        bytes actually transmitted are counted.')
acdPortTxStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsUnicastPkts.setDescription('This is a count of the good unicast packets transmitted by this port.\n        Good unicast packets are packets that are not dropped and have a good\n        CRC. Unicast packets are identified by having a 0 in the least\n        significant bit of the first byte of the destination address (i.e.\n        the first bit transmitted is a 0).')
acdPortTxStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsMulticastPkts.setDescription('This is a count of the good multicast packets transmitted by this\n        port (good means not dropped and valid CRC). Multicast packets are\n        identified by having a 1 in the least significant bit of the first\n        byte of the destination address (i.e. the first bit transmitted is\n        a 1). Broadcast packets are not included in this count.')
acdPortTxStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsBroadcastPkts.setDescription('This is a count of the good broadcast packets transmitted by this\n        port (good means not dropped and valid CRC). Broadcast packets are\n        identified by a destination address of all 1.')
acdPortTxStatsPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPauseFrames.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPauseFrames.setDescription('This is a count of the good flow control pause packets transmitted\n        by this port (good means not dropped and valid CRC). Flow control\n        pause packets are identified by a type of 0x8808 and an opcode field\n        of 0x0001.')
acdPortTxStatsTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsTaggedFrames.setDescription('This is a count of the good VLAN packets transmitted by this port\n        (good means not dropped and valid CRC). VLAN packets are identified\n        by a type field equal to 0x8100 in the outer VLAN tag.')
acdPortTxStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsCRCErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsCRCErrors.setDescription("This is a count of the transmitted packets with a bad non-appended\n         CRC field. This count doesn't include any packets with a bad CRC due\n         to a FIFO underflow.")
acdPortTxStatsDeferred = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsDeferred.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsDeferred.setDescription('This is a count of the number of packets that were deferred on the\n        first transmit attempt due to the medium being busy. Packets with\n        subsequent deferrals (for instance, after a collision back off) are\n        not counted. Whether the packet is eventually transmitted successfully\n        or not is irrelevant to this counter. Packets dropped due to excess\n        deferral that occur during the initial transmit attempt are not\n        counted.')
acdPortTxStatsExcessiveDeferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsExcessiveDeferrals.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsExcessiveDeferrals.setDescription('This is a count of the number of packets dropped by this port due to\n        excessive deferral. The deferral time starts at the beginning of each\n        transmission attempt and ends when the transmission starts (regardless\n        of collisions). The deferral is excessive if more than 3036 byte times\n        have passed without the transmission starting.')
acdPortTxStatsSingleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsSingleCollisions.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsSingleCollisions.setDescription('This is a count of the number of times a packet is successfully\n        transmitted from this port after experiencing a single collision.\n        This count does not include erroneous (dropped) packets.')
acdPortTxStatsMultipleCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsMultipleCollisions.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsMultipleCollisions.setDescription('This is a count of the number of times a packet is successfully\n        transmitted from this port after experiencing multiple collisions.\n        This count does not include erroneous (dropped) packets and also does\n        not include packets dropped due to excess collisions.')
acdPortTxStatsExcessiveCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 15), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsExcessiveCollisions.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsExcessiveCollisions.setDescription('This is a count of the number of packets dropped by this port due\n        to excess collisions (number of collisions equals MaxRetry+1). This\n        count does not include packets dropped due to FIFO underflow or\n        late collisions (even if the late collision is also an excessive\n        collision).')
acdPortTxStatsLateCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsLateCollisions.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsLateCollisions.setDescription('This is a count of the number of packets dropped by this port due\n        to late collisions. A late collision is a collision that occurs\n        after the collision window time (normally 512-bit times). This count\n        does not include packets dropped due to FIFO underflow. Late\n        collisions are not retried.')
acdPortTxStatsNormalCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 17), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsNormalCollisions.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsNormalCollisions.setDescription('This is a count of the total number of normal collisions that have\n        occurred on this port during all transmission attempts. FIFO\n        underflows, late collisions and collisions that occur while this\n        port is not trying to transmit are not counted. This count does not\n        include collisions during half-duplex back pressure.')
acdPortTxStatsFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 18), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsFifoErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsFifoErrors.setDescription('This is a count of the number of packets dropped by this port due to\n        an underflow in the transmit FIFO. When an underflow is detected,\n        transmission is immediately aborted after sending a known bad \n        (inverted) CRC sequence. The FIFO underflow error takes precedence\n        over all other errors if this counter is incremented, then none of\n        the other packet type counters are incremented.')
acdPortTxStatsPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts64.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts64.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were exactly 64 bytes in length (excluding preamble and SFD but\n        including CRC).')
acdPortTxStatsPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 20), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts65to127.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts65to127.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 65 to 127 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 21), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts128to255.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts128to255.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 128 to 255 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts256to511.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts256to511.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 256 to 511 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 23), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts512to1023.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts512to1023.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 512 to 1023 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 24), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts1024to1518.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts1024to1518.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 1024 to 1518 bytes in length (excluding preamble and SFD\n        but including CRC).')
acdPortTxStatsPkts1519to2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 25), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts1519to2047.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts1519to2047.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 1519 to 2047 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 26), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts2048to4095.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts2048to4095.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 2048 to 4095 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 27), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts4096to8191.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts4096to8191.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were 4096 to 8191 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortTxStatsPkts8192andMore = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPkts8192andMore.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPkts8192andMore.setDescription('The total number of packets, good or bad, transmitted by this port\n        that were greater than 8192 bytes in length (excluding preamble and\n        SFD but including CRC).')
acdPortTxStatsPktsLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 1, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortTxStatsPktsLarge.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsPktsLarge.setDescription('The total number of large packets transmitted by this port. Define\n        the size of large packets on the Port configuration.')
acdPortRxStatsTable = MibTable((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2), )
if mibBuilder.loadTexts: acdPortRxStatsTable.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsTable.setDescription('Table of port receive statistics')
acdPortRxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1), ).setIndexNames((0, "ACD-PORT-MIB", "acdPortRxStatsIndex"))
if mibBuilder.loadTexts: acdPortRxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsEntry.setDescription('port receive statistics.')
acdPortRxStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: acdPortRxStatsIndex.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsIndex.setDescription('The value of this object uniquely identifies this acdPortRxStats\n        entry.')
acdPortRxStatsSupportBits = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 2), Bits().clone(namedValues=NamedValues(("bBytesGood", 0), ("bBytesTotal", 1), ("bRxStatsShortOk", 2), ("bRxStatsShortBad", 3), ("bRxStatsLongOk", 4), ("bRxStatsLongBad", 5), ("bUnicastPkts", 6), ("bMulticastPkts", 7), ("bBroadcastPkts", 8), ("bPauseFrames", 9), ("bTaggedFrames", 10), ("bCRCErrors", 11), ("bAlignErrors", 12), ("bRuntFrames", 13), ("bLengthErrors", 14), ("bFalseCRS", 15), ("bPhyErrors", 16), ("bFifoErrors", 17), ("bIgnored", 18), ("bBadOpcode", 19), ("bPkts64", 20), ("bPkts65to127", 21), ("bPkts128to255", 22), ("bPkts256to511", 23), ("bPkts512to1023", 24), ("bPkts1024to1518", 25), ("bPkts1519to2047", 26), ("bPkts2048to4095", 27), ("bPkts4096to8191", 28), ("bPkts8192andMore", 29), ("bPktsLarge", 30)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsSupportBits.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsSupportBits.setDescription('A value that identifies the set of RX statistics\n               supported by the device. Each bit indicates whether\n               or not the specific statistic value is valid on the\n               system.')
acdPortRxStatsBytesGood = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 3), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBytesGood.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsBytesGood.setDescription('This is a count of the total number of bytes received by the port in\n        good packets. The count includes the 4 CRC bytes but does not include\n        the preamble or SFD bytes. A good packet is a well-formed normally \n        sized packet (64 to maxsize bytes) with good CRC and no PHY or FIFO\n        errors.')
acdPortRxStatsBytesTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBytesTotal.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsBytesTotal.setDescription('This is a count of the total number of bytes received by the port in\n        good and bad packets. The count includes the 4 CRC bytes (if present)\n        but does not include the preamble or SFD bytes. Good packets are \n        described above. Bad packets include short packets (less than 64 \n        bytes), long packets (greater than maxsize bytes), packets with bad\n        CRC, packets with PHY errors, and packets with receive FIFO errors.\n        Bytes in bad  packets resulting from a collision are counted if the\n        SFD is detected.')
acdPortRxStatsShortOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsShortOk.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsShortOk.setDescription('This is a count of error-free packets received on this port that are\n        shorter than 64 bytes. A packet is error-free if it has a valid CRC,\n        no PHY errorsand no FIFO errors.')
acdPortRxStatsShortBad = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsShortBad.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsShortBad.setDescription('This is a count of packets received on this port that are shorter\n        than 64 bytes and have a bad CRC. Packets with PHY or FIFO errors \n        are not counted.')
acdPortRxStatsLongOk = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLongOk.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsLongOk.setDescription('This is a count of error-free packets received on this port that\n        are longer than maxsize bytes. A packet is error-free if it has a\n        valid CRC, no PHY errors and no FIFO errors.')
acdPortRxStatsLongBad = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLongBad.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsLongBad.setDescription('This is a count of packets received on this port that are longer\n        than 64 bytes and have a bad CRC. Packets with PHY or FIFO errors\n        are not counted.')
acdPortRxStatsUnicastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsUnicastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsUnicastPkts.setDescription('This is a count of the good unicast packets received by this port.\n        A good unicast packet is a normally sized packet (64 to maxsize\n        bytes) that is received without error a good CRC, no PHY or FIFO\n        errors. Unicast packets are identified by having a 0 in the least\n        significant bit of the first byte of the destination address (i.e.\n        the first bit received is a 0).')
acdPortRxStatsMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsMulticastPkts.setDescription('This is a count of the good multicast packets received by this port.\n        A good multicast packet is a normally sized packet (64 to maxsize\n        bytes) that is received without error, a good CRC, no PHY or FIFO\n        errors. Multicast packets are identified by having a 1 in the least\n        significant bit of the first byte of the destination address (i.e.\n        the first bit received is a 1). Broadcast packets are not included\n        in this count.')
acdPortRxStatsBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsBroadcastPkts.setDescription("This is a count of the good broadcast packets received by this port.\n        A good broadcast packet is a normally sized packet (64 to maxsize\n        bytes) that is received without error, a good CRC, no PHY or FIFO\n        errors. Broadcast packets are identified by a destination address\n        of all 1's.")
acdPortRxStatsPauseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPauseFrames.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPauseFrames.setDescription('This is a count of the good flow control pause packets received by\n        this port (good CRC, no PHY or FIFO errors, normally sized). Flow\n        control pause packets are identified by a type of 0x8808, and an\n        opcode field of 0x0001.')
acdPortRxStatsTaggedFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsTaggedFrames.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsTaggedFrames.setDescription('This is a count of the good VLAN packets receive by this port\n        (good CRC, no PHY or FIFO errors, normally sized). VLAN packets\n        are identified by a type field equal to 0x8100 in the outer VLAN tag.')
acdPortRxStatsCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 14), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsCRCErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsCRCErrors.setDescription('This is a count of normally sized packets (64 to maxsize bytes)\n        received by this port with a CRC error but not a dribbling nibble\n        (packet is an integral number of bytes long). Packets with FIFO or\n        PHY errors are not counted.')
acdPortRxStatsAlignErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 15), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsAlignErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsAlignErrors.setDescription('This is a count of normally sized packets (64 to maxsize bytes)\n        received by this port with a CRC error and a dribbling nibble (packet\n        is not an integral number of bytes long). Packets with PHY or FIFO\n        errors are not counted.')
acdPortRxStatsRuntFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsRuntFrames.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsRuntFrames.setDescription('This is a count of the number of receive packets (or events)\n        detected by this port without SDF detection but with carrier\n        assertion. Packets with valid SFD but no data bytes are also\n        counted as runts. After detecting a runt packet, the update of\n        the RxRunts counter is held off until the next valid packet is\n        received. If multiple runt packets occur between valid packets,\n        the RxRunts counter is incremented only once.')
acdPortRxStatsLengthErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 17), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsLengthErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsLengthErrors.setDescription('This is a count of the number of good packets received by this\n        port with a length field check error. A length check error occurs\n        when the value in the length field is within the valid range for\n        data length (3-1500 bytes) but does not match the actual data\n        length of the packet. Length field values less than 46 bytes \n        (which corresponds to the minimum legal packet size of 64 bytes)\n        are not checked due to padding.')
acdPortRxStatsFalseCRS = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 18), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsFalseCRS.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsFalseCRS.setDescription('This is a count of the number of receive packets (or events)\n        detected by this port with a false carrier (SSD1 not followed by\n        SSD2). After detecting a false carrier, update of the RxFalseCRS\n        counter is held off until the next valid packet is received. If\n        multiple false carrier events occur between valid packets, the\n        RxFalseCRS counter is incremented only once.')
acdPortRxStatsPhyErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPhyErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPhyErrors.setDescription('This is a count of the number of packets received by this port with\n        RX_ER asserted during reception (while RX_DV asserted). Packets with\n        a FIFO error are not counted.')
acdPortRxStatsFifoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 20), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsFifoErrors.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsFifoErrors.setDescription('This is a count of the number of receive packets dropped or aborted\n        due to receive FIFO overflow. The FIFO overflow error takes precedence\n        over all other errors - if this counter is incremented, then none of\n        the other packet type counters is incremented.')
acdPortRxStatsIgnored = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 21), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsIgnored.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsIgnored.setDescription('This is a count of the number of received packets that have been\n        ignored by this port. A packet is ignored if it violates the\n        programmed preamble rules or it violates the minimum data gap. The\n        preamble rules include long preamble enforcement (greater than 23\n        nibbles) and pure preamble enforcement (only 55h bytes). The minimum\n        data gap is the time between packet data transfers and is measured\n        from immediately after the last CRC byte of the previous packet\n        through the SFD field of the current packet. The normal data gap\n        is 20 bytes long (12 bytes of IPG and 8 bytes of preamble/SFD).\n        The enforcement limit is set to 10 bytes (half the normal gap\n        length).')
acdPortRxStatsBadOpcode = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 22), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsBadOpcode.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsBadOpcode.setDescription('This is a count of the good control packets received by this port\n        (good CRC, no PHY or FIFO errors, normally sized) with an unknown\n        opcode. Unknown control packets are identified by a type field of\n        88-08 and an opcode field not equal to 00-01.')
acdPortRxStatsPkts64 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 23), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts64.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts64.setDescription('The total number of packets, good or bad, received by this port\n        that were exactly 64 bytes in length (excluding preamble and SFD\n        but including CRC).')
acdPortRxStatsPkts65to127 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 24), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts65to127.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts65to127.setDescription('The total number of packets, good or bad, received by this port that\n        were 65 to 127 bytes in length inclusive (excluding preamble and SFD\n        but including CRC).')
acdPortRxStatsPkts128to255 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 25), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts128to255.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts128to255.setDescription('The total number of packets, good or bad, received by this port\n        that were 128 to 255 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts256to511 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 26), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts256to511.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts256to511.setDescription('The total number of packets, good or bad, received by this port\n        that were 256 to 511 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts512to1023 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 27), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts512to1023.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts512to1023.setDescription('The total number of packets, good or bad, received by this port\n        that were 512 to 1023 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts1024to1518 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts1024to1518.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts1024to1518.setDescription('The total number of packets, good or bad, received by this port\n        that were 1024 to 1518 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts1519to2047 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts1519to2047.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts1519to2047.setDescription('The total number of packets, good or bad, received by this port\n        that were 1519 to 2047 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts2048to4095 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 30), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts2048to4095.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts2048to4095.setDescription('The total number of packets, good or bad, received by this port\n        that were 2048 to 4095 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts4096to8191 = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 31), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts4096to8191.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts4096to8191.setDescription('The total number of packets, good or bad, received by this port\n        that were 4096 to 8191 bytes in length inclusive (excluding preamble\n        and SFD but including CRC).')
acdPortRxStatsPkts8192andMore = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 32), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPkts8192andMore.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPkts8192andMore.setDescription('The total number of packets, good or bad, received by this port that\n        were greater than 8192 bytes in length (excluding preamble and SFD\n        but including CRC).')
acdPortRxStatsPktsLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 3, 2, 1, 33), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortRxStatsPktsLarge.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsPktsLarge.setDescription('The total number of large packets received by this port. Define the\n        size of large packets on the Port configuration page.')
acdPortConfigTableLastChangeTid = MibScalar((1, 3, 6, 1, 4, 1, 22420, 2, 9, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acdPortConfigTableLastChangeTid.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigTableLastChangeTid.setDescription('This is the transaction ID of the last change of the acdPortConfigTable\n        table.  If this value is different since the last read this is indicate \n        a table change.')
acdPortCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 1))
acdPortGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2))
acdPortConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 1)).setObjects(("ACD-PORT-MIB", "acdPortConfigName"), ("ACD-PORT-MIB", "acdPortConfigAlias"), ("ACD-PORT-MIB", "acdPortConfigMacAddress"), ("ACD-PORT-MIB", "acdPortConfigConnectorId"), ("ACD-PORT-MIB", "acdPortConfigState"), ("ACD-PORT-MIB", "acdPortConfigMtu"), ("ACD-PORT-MIB", "acdPortConfigAutoNegoState"), ("ACD-PORT-MIB", "acdPortConfigSpeed"), ("ACD-PORT-MIB", "acdPortConfigDuplex"), ("ACD-PORT-MIB", "acdPortConfigMdi"), ("ACD-PORT-MIB", "acdPortConfigPauseMode"), ("ACD-PORT-MIB", "acdPortConfigAdvertisement"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortConfigGroup = acdPortConfigGroup.setStatus('current')
if mibBuilder.loadTexts: acdPortConfigGroup.setDescription('.')
acdPortStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 2)).setObjects(("ACD-PORT-MIB", "acdPortStatusSpeed"), ("ACD-PORT-MIB", "acdPortStatusDuplex"), ("ACD-PORT-MIB", "acdPortStatusMdi"), ("ACD-PORT-MIB", "acdPortStatusTxPause"), ("ACD-PORT-MIB", "acdPortStatusRxPause"), ("ACD-PORT-MIB", "acdPortStatusLinkPartnerAbility"), ("ACD-PORT-MIB", "acdPortStatusLinkStatus"), ("ACD-PORT-MIB", "acdPortStatusMedia"), ("ACD-PORT-MIB", "acdPortStatusIsMonitor"), ("ACD-PORT-MIB", "acdPortStatusIsManagement"), ("ACD-PORT-MIB", "acdPortStatusIsSFP"), ("ACD-PORT-MIB", "acdPortStatusIsFiber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortStatusGroup = acdPortStatusGroup.setStatus('current')
if mibBuilder.loadTexts: acdPortStatusGroup.setDescription('.')
acdPortTxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 3)).setObjects(("ACD-PORT-MIB", "acdPortTxStatsSupportBits"), ("ACD-PORT-MIB", "acdPortTxStatsBytesGood"), ("ACD-PORT-MIB", "acdPortTxStatsBytesTotal"), ("ACD-PORT-MIB", "acdPortTxStatsUnicastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsMulticastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsBroadcastPkts"), ("ACD-PORT-MIB", "acdPortTxStatsPauseFrames"), ("ACD-PORT-MIB", "acdPortTxStatsTaggedFrames"), ("ACD-PORT-MIB", "acdPortTxStatsCRCErrors"), ("ACD-PORT-MIB", "acdPortTxStatsDeferred"), ("ACD-PORT-MIB", "acdPortTxStatsExcessiveDeferrals"), ("ACD-PORT-MIB", "acdPortTxStatsSingleCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsMultipleCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsExcessiveCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsLateCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsNormalCollisions"), ("ACD-PORT-MIB", "acdPortTxStatsFifoErrors"), ("ACD-PORT-MIB", "acdPortTxStatsPkts64"), ("ACD-PORT-MIB", "acdPortTxStatsPkts65to127"), ("ACD-PORT-MIB", "acdPortTxStatsPkts128to255"), ("ACD-PORT-MIB", "acdPortTxStatsPkts256to511"), ("ACD-PORT-MIB", "acdPortTxStatsPkts512to1023"), ("ACD-PORT-MIB", "acdPortTxStatsPkts1024to1518"), ("ACD-PORT-MIB", "acdPortTxStatsPkts1519to2047"), ("ACD-PORT-MIB", "acdPortTxStatsPkts2048to4095"), ("ACD-PORT-MIB", "acdPortTxStatsPkts4096to8191"), ("ACD-PORT-MIB", "acdPortTxStatsPkts8192andMore"), ("ACD-PORT-MIB", "acdPortTxStatsPktsLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortTxStatsGroup = acdPortTxStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdPortTxStatsGroup.setDescription('.')
acdPortRxStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 4)).setObjects(("ACD-PORT-MIB", "acdPortRxStatsSupportBits"), ("ACD-PORT-MIB", "acdPortRxStatsBytesGood"), ("ACD-PORT-MIB", "acdPortRxStatsBytesTotal"), ("ACD-PORT-MIB", "acdPortRxStatsShortOk"), ("ACD-PORT-MIB", "acdPortRxStatsShortBad"), ("ACD-PORT-MIB", "acdPortRxStatsLongOk"), ("ACD-PORT-MIB", "acdPortRxStatsLongBad"), ("ACD-PORT-MIB", "acdPortRxStatsUnicastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsMulticastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsBroadcastPkts"), ("ACD-PORT-MIB", "acdPortRxStatsPauseFrames"), ("ACD-PORT-MIB", "acdPortRxStatsTaggedFrames"), ("ACD-PORT-MIB", "acdPortRxStatsCRCErrors"), ("ACD-PORT-MIB", "acdPortRxStatsAlignErrors"), ("ACD-PORT-MIB", "acdPortRxStatsRuntFrames"), ("ACD-PORT-MIB", "acdPortRxStatsLengthErrors"), ("ACD-PORT-MIB", "acdPortRxStatsFalseCRS"), ("ACD-PORT-MIB", "acdPortRxStatsPhyErrors"), ("ACD-PORT-MIB", "acdPortRxStatsFifoErrors"), ("ACD-PORT-MIB", "acdPortRxStatsIgnored"), ("ACD-PORT-MIB", "acdPortRxStatsBadOpcode"), ("ACD-PORT-MIB", "acdPortRxStatsPkts64"), ("ACD-PORT-MIB", "acdPortRxStatsPkts65to127"), ("ACD-PORT-MIB", "acdPortRxStatsPkts128to255"), ("ACD-PORT-MIB", "acdPortRxStatsPkts256to511"), ("ACD-PORT-MIB", "acdPortRxStatsPkts512to1023"), ("ACD-PORT-MIB", "acdPortRxStatsPkts1024to1518"), ("ACD-PORT-MIB", "acdPortRxStatsPkts1519to2047"), ("ACD-PORT-MIB", "acdPortRxStatsPkts2048to4095"), ("ACD-PORT-MIB", "acdPortRxStatsPkts4096to8191"), ("ACD-PORT-MIB", "acdPortRxStatsPkts8192andMore"), ("ACD-PORT-MIB", "acdPortRxStatsPktsLarge"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortRxStatsGroup = acdPortRxStatsGroup.setStatus('current')
if mibBuilder.loadTexts: acdPortRxStatsGroup.setDescription('.')
acdPortTidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 2, 5)).setObjects(("ACD-PORT-MIB", "acdPortConfigTableLastChangeTid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortTidGroup = acdPortTidGroup.setStatus('current')
if mibBuilder.loadTexts: acdPortTidGroup.setDescription('List of scalars to monitior changes in tables.')
acdPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 22420, 2, 9, 2, 1, 1)).setObjects(("ACD-PORT-MIB", "acdPortConfigGroup"), ("ACD-PORT-MIB", "acdPortStatusGroup"), ("ACD-PORT-MIB", "acdPortTxStatsGroup"), ("ACD-PORT-MIB", "acdPortRxStatsGroup"), ("ACD-PORT-MIB", "acdPortTidGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    acdPortCompliance = acdPortCompliance.setStatus('current')
if mibBuilder.loadTexts: acdPortCompliance.setDescription('The compliance statement for support of the ACD-PORT-MIB module.')
mibBuilder.exportSymbols("ACD-PORT-MIB", acdPortTxStatsSupportBits=acdPortTxStatsSupportBits, acdPortRxStatsGroup=acdPortRxStatsGroup, acdPortConfigConnectorId=acdPortConfigConnectorId, acdPortStatusTable=acdPortStatusTable, acdPortStatusIsSFP=acdPortStatusIsSFP, acdPortCompliances=acdPortCompliances, acdPortStatusTxPause=acdPortStatusTxPause, acdPortRxStatsPktsLarge=acdPortRxStatsPktsLarge, acdPortTxStatsExcessiveDeferrals=acdPortTxStatsExcessiveDeferrals, acdPortTxStatsPauseFrames=acdPortTxStatsPauseFrames, PYSNMP_MODULE_ID=acdPort, acdPortTxStatsTable=acdPortTxStatsTable, acdPortTxStatsTaggedFrames=acdPortTxStatsTaggedFrames, acdPortStats=acdPortStats, acdPortStatusDuplex=acdPortStatusDuplex, acdPortRxStatsRuntFrames=acdPortRxStatsRuntFrames, acdPortRxStatsPkts64=acdPortRxStatsPkts64, acdPortStatusEntry=acdPortStatusEntry, acdPortTxStatsPkts128to255=acdPortTxStatsPkts128to255, acdPortStatusRxPause=acdPortStatusRxPause, acdPortRxStatsShortOk=acdPortRxStatsShortOk, acdPortMIBObjects=acdPortMIBObjects, acdPortTxStatsCRCErrors=acdPortTxStatsCRCErrors, acdPortTxStatsNormalCollisions=acdPortTxStatsNormalCollisions, acdPortRxStatsPauseFrames=acdPortRxStatsPauseFrames, acdPortRxStatsPhyErrors=acdPortRxStatsPhyErrors, acdPortStatusIsFiber=acdPortStatusIsFiber, acdPortStatusIndex=acdPortStatusIndex, acdPortTxStatsPkts2048to4095=acdPortTxStatsPkts2048to4095, acdPortTxStatsPkts4096to8191=acdPortTxStatsPkts4096to8191, acdPortTxStatsMultipleCollisions=acdPortTxStatsMultipleCollisions, acdPortTxStatsExcessiveCollisions=acdPortTxStatsExcessiveCollisions, acdPortStatusGroup=acdPortStatusGroup, acdPortTxStatsPkts8192andMore=acdPortTxStatsPkts8192andMore, acdPortTxStatsGroup=acdPortTxStatsGroup, acdPortTxStatsPkts1519to2047=acdPortTxStatsPkts1519to2047, acdPortConfigAutoNegoState=acdPortConfigAutoNegoState, acdPortRxStatsLengthErrors=acdPortRxStatsLengthErrors, acdPortTxStatsUnicastPkts=acdPortTxStatsUnicastPkts, acdPortRxStatsBadOpcode=acdPortRxStatsBadOpcode, acdPortRxStatsPkts65to127=acdPortRxStatsPkts65to127, acdPortRxStatsPkts1519to2047=acdPortRxStatsPkts1519to2047, acdPortRxStatsBroadcastPkts=acdPortRxStatsBroadcastPkts, acdPortStatusLinkStatus=acdPortStatusLinkStatus, acdPortConfigMtu=acdPortConfigMtu, acdPortTxStatsDeferred=acdPortTxStatsDeferred, acdPortRxStatsPkts4096to8191=acdPortRxStatsPkts4096to8191, acdPortStatusLinkPartnerAbility=acdPortStatusLinkPartnerAbility, acdPortTxStatsBytesTotal=acdPortTxStatsBytesTotal, acdPortConfigMacAddress=acdPortConfigMacAddress, acdPortStatusMdi=acdPortStatusMdi, acdPortConfigEntry=acdPortConfigEntry, acdPortConformance=acdPortConformance, acdPortStatusSpeed=acdPortStatusSpeed, acdPortRxStatsPkts8192andMore=acdPortRxStatsPkts8192andMore, acdPortConfigTableLastChangeTid=acdPortConfigTableLastChangeTid, acdPortRxStatsFalseCRS=acdPortRxStatsFalseCRS, acdPortRxStatsFifoErrors=acdPortRxStatsFifoErrors, acdPortStatusMedia=acdPortStatusMedia, acdPortConfigDuplex=acdPortConfigDuplex, acdPortConfigAdvertisement=acdPortConfigAdvertisement, acdPortConfigSpeed=acdPortConfigSpeed, acdPortRxStatsSupportBits=acdPortRxStatsSupportBits, acdPort=acdPort, acdPortTxStatsBroadcastPkts=acdPortTxStatsBroadcastPkts, acdPortConfigIndex=acdPortConfigIndex, acdPortTxStatsPkts65to127=acdPortTxStatsPkts65to127, acdPortRxStatsPkts1024to1518=acdPortRxStatsPkts1024to1518, acdPortConfigState=acdPortConfigState, acdPortConfig=acdPortConfig, acdPortStatus=acdPortStatus, acdPortTxStatsIndex=acdPortTxStatsIndex, acdPortRxStatsTable=acdPortRxStatsTable, acdPortRxStatsShortBad=acdPortRxStatsShortBad, acdPortRxStatsTaggedFrames=acdPortRxStatsTaggedFrames, acdPortTxStatsBytesGood=acdPortTxStatsBytesGood, acdPortRxStatsIndex=acdPortRxStatsIndex, acdPortRxStatsPkts128to255=acdPortRxStatsPkts128to255, acdPortTxStatsPkts256to511=acdPortTxStatsPkts256to511, acdPortCompliance=acdPortCompliance, acdPortConfigMdi=acdPortConfigMdi, acdPortTxStatsPkts1024to1518=acdPortTxStatsPkts1024to1518, acdPortConfigPauseMode=acdPortConfigPauseMode, acdPortRxStatsUnicastPkts=acdPortRxStatsUnicastPkts, acdPortGroups=acdPortGroups, acdPortTidGroup=acdPortTidGroup, acdPortConfigGroup=acdPortConfigGroup, acdPortTxStatsPkts512to1023=acdPortTxStatsPkts512to1023, acdPortTxStatsFifoErrors=acdPortTxStatsFifoErrors, acdPortRxStatsBytesTotal=acdPortRxStatsBytesTotal, acdPortTxStatsLateCollisions=acdPortTxStatsLateCollisions, acdPortRxStatsIgnored=acdPortRxStatsIgnored, acdPortTxStatsEntry=acdPortTxStatsEntry, acdPortRxStatsLongBad=acdPortRxStatsLongBad, acdPortRxStatsBytesGood=acdPortRxStatsBytesGood, acdPortRxStatsAlignErrors=acdPortRxStatsAlignErrors, acdPortRxStatsPkts256to511=acdPortRxStatsPkts256to511, acdPortConfigTable=acdPortConfigTable, acdPortConfigAlias=acdPortConfigAlias, acdPortRxStatsPkts2048to4095=acdPortRxStatsPkts2048to4095, acdPortTableTid=acdPortTableTid, acdPortTxStatsSingleCollisions=acdPortTxStatsSingleCollisions, acdPortTxStatsPktsLarge=acdPortTxStatsPktsLarge, acdPortConfigName=acdPortConfigName, acdPortRxStatsPkts512to1023=acdPortRxStatsPkts512to1023, acdPortTxStatsPkts64=acdPortTxStatsPkts64, acdPortStatusIsMonitor=acdPortStatusIsMonitor, acdPortTxStatsMulticastPkts=acdPortTxStatsMulticastPkts, acdPortRxStatsEntry=acdPortRxStatsEntry, acdPortRxStatsMulticastPkts=acdPortRxStatsMulticastPkts, acdPortStatusIsManagement=acdPortStatusIsManagement, acdPortRxStatsCRCErrors=acdPortRxStatsCRCErrors, acdPortRxStatsLongOk=acdPortRxStatsLongOk)
