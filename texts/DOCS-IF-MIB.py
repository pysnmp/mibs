#
# PySNMP MIB module DOCS-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/output/asn1/DOCS-IF-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 11:32:43 2024
# On host fv-az702-886 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Unsigned32, NotificationType, ModuleIdentity, Gauge32, MibIdentifier, transmission, Integer32, IpAddress, Counter64, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Unsigned32", "NotificationType", "ModuleIdentity", "Gauge32", "MibIdentifier", "transmission", "Integer32", "IpAddress", "Counter64", "ObjectIdentity", "Bits")
TextualConvention, MacAddress, RowStatus, TruthValue, DisplayString, TimeInterval, TimeStamp = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "MacAddress", "RowStatus", "TruthValue", "DisplayString", "TimeInterval", "TimeStamp")
docsIfMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 127))
docsIfMib.setRevisions(('1999-08-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: docsIfMib.setRevisionsDescriptions(('Initial Version, published as RFC 2670.\n             Modified by Mike StJohns to fix problems identified by\n             the first pass of the MIB doctor.  Of special note,\n             docsIfRangingResp and docsIfCmtsInsertionInterval were\n             obsoleted and replaced by other objects with the same\n             functionality, but more appropriate SYNTAX.',))
if mibBuilder.loadTexts: docsIfMib.setLastUpdated('9908190000Z')
if mibBuilder.loadTexts: docsIfMib.setOrganization('IETF IPCDN Working Group')
if mibBuilder.loadTexts: docsIfMib.setContactInfo('        Michael StJohns\n             Postal: @Home Network\n                     425 Broadway\n                     Redwood City, CA\n                     U.S.A.\n             Phone:  +1 650 569 5368\n             E-mail: stjohns@corp.home.net')
if mibBuilder.loadTexts: docsIfMib.setDescription('This is the MIB Module for MCNS/DOCSIS compliant Radio\n             Frequency (RF) interfaces in Cable Modems (CM) and\n             Cable Modem Termination Systems (CMTS).')
class TenthdBmV(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally\n             expressed in dBmV. Units are in tenths of a dBmV;\n             for example, 5.1 dBmV will be represented as 51.'
    status = 'current'
    displayHint = 'd-1'

class TenthdB(TextualConvention, Integer32):
    description = 'This data type represents power levels that are normally\n             expressed in dB. Units are in tenths of a dB;\n             for example, 5.1 dB will be represented as 51.'
    status = 'current'
    displayHint = 'd-1'

docsIfMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1))
docsIfBaseObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 1))
docsIfCmObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 2))
docsIfCmtsObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 1, 3))
docsIfDownstreamChannelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1), )
if mibBuilder.loadTexts: docsIfDownstreamChannelTable.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: docsIfDownstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: docsIfDownstreamChannelTable.setDescription('This table describes the attributes of downstream\n             channels (frequency bands).')
docsIfDownstreamChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfDownstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfDownstreamChannelEntry.setDescription('An entry provides a list of attributes for a single\n             Downstream channel.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableDownstream(128).')
docsIfDownChannelId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfDownChannelId.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelId.setDescription('The Cable Modem Termination System (CMTS) identification\n             of the downstream channel within this particular MAC\n             interface. If the interface is down, the object returns\n             the most current value. If the downstream channel ID is\n             unknown, this object returns a value of 0.')
docsIfDownChannelFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelFrequency.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 4.3.3.')
if mibBuilder.loadTexts: docsIfDownChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelFrequency.setDescription('The center of the downstream frequency associated with\n             this channel. This object will return the current tuner\n             frequency. If a CMTS provides IF output, this object\n             will return 0, unless this CMTS is in control of the\n             final downstream RF frequency.  See the associated\n             compliance object for a description of valid frequencies\n             that may be written to this object.')
docsIfDownChannelWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelWidth.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: docsIfDownChannelWidth.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelWidth.setDescription('The bandwidth of this downstream channel. Most\n             implementations are expected to support a channel width\n             of 6 MHz (North America) and/or 8 MHz (Europe).  See the\n             associated compliance object for a description of the\n             valid channel widths for this object.')
docsIfDownChannelModulation = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("qam64", 3), ("qam256", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelModulation.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 3.6.2.')
if mibBuilder.loadTexts: docsIfDownChannelModulation.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelModulation.setDescription('The modulation type associated with this downstream\n             channel. If the interface is down, this object either\n             returns the configured value (CMTS), the most current\n             value (CM), or the value of unknown(1).  See the\n             associated conformance object for write conditions and\n             limitations. See the reference for specifics on the\n             modulation profiles implied by qam64 and qam256.')
docsIfDownChannelInterleave = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("other", 2), ("taps8Increment16", 3), ("taps16Increment8", 4), ("taps32Increment4", 5), ("taps64Increment2", 6), ("taps128Increment1", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelInterleave.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 4.3.2.')
if mibBuilder.loadTexts: docsIfDownChannelInterleave.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelInterleave.setDescription('The Forward Error Correction (FEC) interleaving used\n             for this downstream channel.\n             Values are defined as follows:\n             taps8Increment16(3):   protection 5.9/4.1 usec,\n                                    latency .22/.15 msec\n             taps16Increment8(4):   protection 12/8.2 usec,\n                                    latency .48/.33 msec\n             taps32Increment4(5):   protection 24/16 usec,\n                                    latency .98/.68 msec\n             taps64Increment2(6):   protection 47/33 usec,\n                                    latency 2/1.4 msec\n             taps128Increment1(7):  protection 95/66 usec,\n                                    latency 4/2.8 msec\n             If the interface is down, this object either returns\n             the configured value (CMTS), the most current value (CM),\n             or the value of unknown(1).\n             The value of other(2) is returned if the interleave\n             is known but not defined in the above list.\n             See the associated conformance object for write\n             conditions and limitations. See the reference for the FEC\n             configuration described by the setting of this object.')
docsIfDownChannelPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 1, 1, 6), TenthdBmV()).setUnits('dBmV').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfDownChannelPower.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 4-12 and Table 4-13.')
if mibBuilder.loadTexts: docsIfDownChannelPower.setStatus('current')
if mibBuilder.loadTexts: docsIfDownChannelPower.setDescription('At the CMTS, the operational transmit power. At the CM,\n             the received power level. May be set to zero at the CM\n             if power level measurement is not supported.\n             If the interface is down, this object either returns\n             the configured value (CMTS), the most current value (CM)\n             or the value of 0. See the associated conformance object\n             for write conditions and limitations. See the reference\n             for recommended and required power levels.')
docsIfUpstreamChannelTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2), )
if mibBuilder.loadTexts: docsIfUpstreamChannelTable.setStatus('current')
if mibBuilder.loadTexts: docsIfUpstreamChannelTable.setDescription('This table describes the attributes of attached upstream\n             channels (frequency bands).')
docsIfUpstreamChannelEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfUpstreamChannelEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfUpstreamChannelEntry.setDescription('List of attributes for a single upstream channel.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableUpstream(129).')
docsIfUpChannelId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfUpChannelId.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelId.setDescription('The CMTS identification of the upstream channel.')
docsIfUpChannelFrequency = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelFrequency.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 2-2.')
if mibBuilder.loadTexts: docsIfUpChannelFrequency.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelFrequency.setDescription('The center of the frequency band associated with this\n             upstream channel. This object returns 0 if the frequency\n             is undefined or unknown. Minimum permitted upstream\n             frequency is 5,000,000 Hz for current technology.  See\n             the associated conformance object for write conditions\n             and limitations.')
docsIfUpChannelWidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000000))).setUnits('hertz').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelWidth.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 4-3.')
if mibBuilder.loadTexts: docsIfUpChannelWidth.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelWidth.setDescription('The bandwidth of this upstream channel. This object\n             returns 0 if the channel width is undefined or unknown.\n             Minimum permitted channel width is 200,000 Hz currently.\n             See the associated conformance object for write conditions\n             and limitations.')
docsIfUpChannelModulationProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelModulationProfile.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelModulationProfile.setDescription('An entry identical to the docsIfModIndex in the\n             docsIfCmtsModulationTable that describes this channel.\n             This channel is further instantiated there by a grouping\n             of interval usage codes which together fully describe the\n             channel modulation. This object returns 0 if the\n             docsIfCmtsModulationTable entry does not exist or\n             docsIfCmtsModulationTable is empty. See\n             the associated conformance object for write conditions\n             and limitations.')
docsIfUpChannelSlotSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelSlotSize.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.1.2.4.')
if mibBuilder.loadTexts: docsIfUpChannelSlotSize.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelSlotSize.setDescription('The number of 6.25 microsecond ticks in each upstream mini-\n             slot. Returns zero if the value is undefined or unknown.\n             See the associated conformance object for write\n             conditions and limitations.')
docsIfUpChannelTxTimingOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfUpChannelTxTimingOffset.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.5.')
if mibBuilder.loadTexts: docsIfUpChannelTxTimingOffset.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelTxTimingOffset.setDescription('A measure of the current round trip time at the CM, or the\n             maximum round trip time seen by the CMTS.  Used for timing\n             of CM upstream transmissions to ensure synchronized\n             arrivals at the CMTS. Units are in terms of\n             (6.25 microseconds/64).')
docsIfUpChannelRangingBackoffStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffStart.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.4.4.')
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffStart.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffStart.setDescription('The initial random backoff window to use when retrying\n             Ranging Requests. Expressed as a power of 2. A value of 16\n             at the CMTS indicates that a proprietary adaptive retry\n             mechanism is to be used. See the associated conformance\n             object for write conditions and limitations.')
docsIfUpChannelRangingBackoffEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffEnd.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.4.4.')
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffEnd.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelRangingBackoffEnd.setDescription('The final random backoff window to use when retrying\n             Ranging Requests. Expressed as a power of 2. A value of 16\n             at the CMTS indicates that a proprietary adaptive retry\n             mechanism is to be used. See the associated conformance\n             object for write conditions and limitations.')
docsIfUpChannelTxBackoffStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffStart.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.4.4.')
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffStart.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffStart.setDescription('The initial random backoff window to use when retrying\n             transmissions. Expressed as a power of 2. A value of 16\n             at the CMTS indicates that a proprietary adaptive retry\n             mechanism is to be used. See the associated conformance\n             object for write conditions and limitations.')
docsIfUpChannelTxBackoffEnd = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffEnd.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.4.4.')
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffEnd.setStatus('current')
if mibBuilder.loadTexts: docsIfUpChannelTxBackoffEnd.setDescription('The final random backoff window to use when retrying\n             transmissions. Expressed as a power of 2. A value of 16\n             at the CMTS indicates that a proprietary adaptive retry\n             mechanism is to be used. See the associated conformance\n             object for write conditions and limitations.')
docsIfQosProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3), )
if mibBuilder.loadTexts: docsIfQosProfileTable.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfileTable.setDescription('Describes the attributes for each class of service.')
docsIfQosProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfQosProfIndex"))
if mibBuilder.loadTexts: docsIfQosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfileEntry.setDescription('Describes the attributes for a single class of service.\n\n             If implemented as read-create in the Cable Modem\n             Termination System, creation of entries in this table is\n             controlled by the value of docsIfCmtsQosProfilePermissions.\n\n             If implemented as read-only, entries are created based\n             on information in REG-REQ MAC messages received from\n             Cable Modems (Cable Modem Termination System\n             implementation), or based on information extracted from\n             the TFTP option file (Cable Modem implementation).\n             In the Cable Modem Termination system, read-only entries\n             are removed if no longer referenced by\n             docsIfCmtsServiceTable.\n\n             An entry in this table must not be removed while it is\n             referenced by an entry in docsIfCmServiceTable (Cable Modem)\n             or docsIfCmtsServiceTable (Cable Modem Termination System).\n\n             An entry in this table should not be changeable while\n             it is referenced by an entry in docsIfCmtsServiceTable.\n\n             If this table is created automatically, there should only\n             be a single entry for each Class of Service. Multiple\n             entries with the same Class of Service parameters are not\n             recommended.')
docsIfQosProfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfQosProfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfIndex.setDescription('The index value which uniquely identifies an entry\n             in the docsIfQosProfileTable.')
docsIfQosProfPriority = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfPriority.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfPriority.setDescription('A relative priority assigned to this service when\n             allocating bandwidth. Zero indicates lowest priority;\n             and seven indicates highest priority.\n             Interpretation of priority is device-specific.\n             MUST NOT be changed while this row is active.')
docsIfQosProfMaxUpBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxUpBandwidth.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfMaxUpBandwidth.setDescription('The maximum upstream bandwidth, in bits per second,\n             allowed for a service with this service class.\n             Zero if there is no restriction of upstream bandwidth.\n             MUST NOT be changed while this row is active.')
docsIfQosProfGuarUpBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfGuarUpBandwidth.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfGuarUpBandwidth.setDescription('Minimum guaranteed upstream bandwidth, in bits per second,\n             allowed for a service with this service class.\n             MUST NOT be changed while this row is active.')
docsIfQosProfMaxDownBandwidth = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxDownBandwidth.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfMaxDownBandwidth.setDescription('The maximum downstream bandwidth, in bits per second,\n             allowed for a service with this service class.\n             Zero if there is no restriction of downstream bandwidth.\n             MUST NOT be changed while this row is active.')
docsIfQosProfMaxTxBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfMaxTxBurst.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfMaxTxBurst.setDescription('The maximum number of mini-slots that may be requested\n             for a single upstream transmission.\n             A value of zero means there is no limit.\n             MUST NOT be changed while this row is active.')
docsIfQosProfBaselinePrivacy = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfBaselinePrivacy.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfBaselinePrivacy.setDescription('Indicates whether Baseline Privacy is enabled for this\n             service class.\n             MUST NOT be changed while this row is active.')
docsIfQosProfStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 3, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfQosProfStatus.setStatus('current')
if mibBuilder.loadTexts: docsIfQosProfStatus.setDescription('This is object is to used to create or delete rows in\n             this table.  This object MUST NOT be changed from active\n             while the row is referenced by the any entry in either\n             docsIfCmServiceTable (on the CM), or the\n             docsIfCmtsServiceTable (on the CMTS).')
docsIfSignalQualityTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4), )
if mibBuilder.loadTexts: docsIfSignalQualityTable.setStatus('current')
if mibBuilder.loadTexts: docsIfSignalQualityTable.setDescription('At the CM, describes the PHY signal quality of downstream\n             channels. At the CMTS, describes the PHY signal quality of\n             upstream channels. At the CMTS, this table may exclude\n             contention intervals.')
docsIfSignalQualityEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfSignalQualityEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfSignalQualityEntry.setDescription('At the CM, describes the PHY characteristics of a\n             downstream channel. At the CMTS, describes the PHY signal\n             quality of an upstream channel.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableUpstream(129) for Cable Modem Termination\n             Systems and docsCableDownstream(128) for Cable Modems.')
docsIfSigQIncludesContention = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQIncludesContention.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.4')
if mibBuilder.loadTexts: docsIfSigQIncludesContention.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQIncludesContention.setDescription('true(1) if this CMTS includes contention intervals in\n             the counters in this table. Always false(2) for CMs.')
docsIfSigQUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQUnerroreds.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3 and 4.3.6')
if mibBuilder.loadTexts: docsIfSigQUnerroreds.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQUnerroreds.setDescription('Codewords received on this channel without error.\n             This includes all codewords, whether or not they\n             were part of frames destined for this device.')
docsIfSigQCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQCorrecteds.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3 and 4.3.6')
if mibBuilder.loadTexts: docsIfSigQCorrecteds.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQCorrecteds.setDescription('Codewords received on this channel with correctable\n             errors. This includes all codewords, whether or not\n             they were part of frames destined for this device.')
docsIfSigQUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQUncorrectables.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3 and 4.3.6')
if mibBuilder.loadTexts: docsIfSigQUncorrectables.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQUncorrectables.setDescription('Codewords received on this channel with uncorrectable\n             errors. This includes all codewords, whether or not\n             they were part of frames destined for this device.')
docsIfSigQSignalNoise = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 5), TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQSignalNoise.setReference('DOCSIS Radio Frequency Interface specification,\n             Table 2-1 and 2-2')
if mibBuilder.loadTexts: docsIfSigQSignalNoise.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQSignalNoise.setDescription('Signal/Noise ratio as perceived for this channel.\n             At the CM, describes the Signal/Noise of the downstream\n             channel.  At the CMTS, describes the average Signal/Noise\n             of the upstream channel.')
docsIfSigQMicroreflections = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQMicroreflections.setReference('DOCSIS Radio Frequency Interface specification,\n             Table 2-1 and 2-2')
if mibBuilder.loadTexts: docsIfSigQMicroreflections.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQMicroreflections.setDescription('Total microreflections including in-channel response\n             as perceived on this interface, measured in dBc below\n             the signal level.\n             This object is not assumed to return an absolutely\n             accurate value, but should give a rough indication\n             of microreflections received on this interface.\n             It is up to the implementor to provide information\n             as accurate as possible.')
docsIfSigQEqualizationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 1, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfSigQEqualizationData.setReference('DOCSIS Radio Frequency Interface Specification,\n             Figure 6-23.')
if mibBuilder.loadTexts: docsIfSigQEqualizationData.setStatus('current')
if mibBuilder.loadTexts: docsIfSigQEqualizationData.setDescription('At the CM, returns the equalization data for the downstream\n             channel. At the CMTS, returns the average equalization\n             data for the upstream channel. Returns an empty string\n             if the value is unknown or if there is no equalization\n             data available or defined.')
docsIfCmMacTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1), )
if mibBuilder.loadTexts: docsIfCmMacTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmMacTable.setDescription('Describes the attributes of each CM MAC interface,\n             extending the information available from ifEntry.')
docsIfCmMacEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmMacEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmMacEntry.setDescription('An entry containing objects describing attributes of\n             each MAC entry, extending the information in ifEntry.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableMaclayer(127).')
docsIfCmCmtsAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmCmtsAddress.setStatus('current')
if mibBuilder.loadTexts: docsIfCmCmtsAddress.setDescription('Identifies the CMTS that is believed to control this MAC\n             domain. At the CM, this will be the source address from\n             SYNC, MAP, and other MAC-layer messages. If the CMTS is\n             unknown, returns 00-00-00-00-00-00.')
docsIfCmCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 2), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmCapabilities.setStatus('current')
if mibBuilder.loadTexts: docsIfCmCapabilities.setDescription('Identifies the capabilities of the MAC implementation\n             at this interface. Note that packet transmission is\n             always supported. Therefore, there is no specific bit\n             required to explicitely indicate this capability.')
docsIfCmRangingRespTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 3), TimeTicks().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmRangingRespTimeout.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-6 and 7-7, timer T3.')
if mibBuilder.loadTexts: docsIfCmRangingRespTimeout.setStatus('obsolete')
if mibBuilder.loadTexts: docsIfCmRangingRespTimeout.setDescription('Waiting time for a Ranging Response packet.')
docsIfCmRangingTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 1, 1, 4), TimeInterval().clone(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmRangingTimeout.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-6 and 7-7, timer T3.')
if mibBuilder.loadTexts: docsIfCmRangingTimeout.setStatus('current')
if mibBuilder.loadTexts: docsIfCmRangingTimeout.setDescription('Waiting time for a Ranging Response packet.')
docsIfCmStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2), )
if mibBuilder.loadTexts: docsIfCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusTable.setDescription('This table maintains a number of status objects\n             and counters for Cable Modems.')
docsIfCmStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusEntry.setDescription('A set of status objects and counters for a single MAC\n             layer instance in a Cable Modem.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableMaclayer(127).')
docsIfCmStatusValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("other", 1), ("notReady", 2), ("notSynchronized", 3), ("phySynchronized", 4), ("usParametersAcquired", 5), ("rangingComplete", 6), ("ipComplete", 7), ("todEstablished", 8), ("securityEstablished", 9), ("paramTransferComplete", 10), ("registrationComplete", 11), ("operational", 12), ("accessDenied", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusValue.setReference('DOCSIS Radio Frequency Interface Specification,\n             Chapter 7.2.')
if mibBuilder.loadTexts: docsIfCmStatusValue.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusValue.setDescription('Current Cable Modem connectivity state, as specified\n             in the RF Interface Specification.')
docsIfCmStatusCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusCode.setReference('DOCSIS Radio Frequency Interface Specification,\n             Cable Modem status codes.')
if mibBuilder.loadTexts: docsIfCmStatusCode.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusCode.setDescription('Status code for this Cable Modem as defined in the\n             RF Interface Specification. The status code consists\n             of a single character indicating error groups, followed\n             by a two- or three-digit number indicating the status\n             condition.')
docsIfCmStatusTxPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 3), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusTxPower.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.8.')
if mibBuilder.loadTexts: docsIfCmStatusTxPower.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusTxPower.setDescription('The operational transmit power for the attached upstream\n             channel.')
docsIfCmStatusResets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusResets.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusResets.setDescription('Number of times the CM reset or initialized\n             this interface.')
docsIfCmStatusLostSyncs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusLostSyncs.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.5.')
if mibBuilder.loadTexts: docsIfCmStatusLostSyncs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusLostSyncs.setDescription('Number of times the CM lost synchronization with\n             the downstream channel.')
docsIfCmStatusInvalidMaps = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidMaps.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.3.2.3 and 6.4.2.')
if mibBuilder.loadTexts: docsIfCmStatusInvalidMaps.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusInvalidMaps.setDescription('Number of times the CM received invalid MAP messages.')
docsIfCmStatusInvalidUcds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidUcds.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.3.2.2.')
if mibBuilder.loadTexts: docsIfCmStatusInvalidUcds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusInvalidUcds.setDescription('Number of times the CM received invalid UCD messages.')
docsIfCmStatusInvalidRangingResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidRangingResponses.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusInvalidRangingResponses.setDescription('Number of times the CM received invalid ranging response\n             messages.')
docsIfCmStatusInvalidRegistrationResponses = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusInvalidRegistrationResponses.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusInvalidRegistrationResponses.setDescription('Number of times the CM received invalid registration\n             response messages.')
docsIfCmStatusT1Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT1Timeouts.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-3.')
if mibBuilder.loadTexts: docsIfCmStatusT1Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusT1Timeouts.setDescription('Number of times counter T1 expired in the CM.')
docsIfCmStatusT2Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT2Timeouts.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-6.')
if mibBuilder.loadTexts: docsIfCmStatusT2Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusT2Timeouts.setDescription('Number of times counter T2 expired in the CM.')
docsIfCmStatusT3Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT3Timeouts.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-6 and 7-7.')
if mibBuilder.loadTexts: docsIfCmStatusT3Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusT3Timeouts.setDescription('Number of times counter T3 expired in the CM.')
docsIfCmStatusT4Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusT4Timeouts.setReference('DOCSIS Radio Frequency Interface specification,\n             Figure 7-7.')
if mibBuilder.loadTexts: docsIfCmStatusT4Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusT4Timeouts.setDescription('Number of times counter T4 expired in the CM.')
docsIfCmStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmStatusRangingAborteds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmStatusRangingAborteds.setDescription('Number of times the ranging process was aborted\n             by the CMTS.')
docsIfCmServiceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3), )
if mibBuilder.loadTexts: docsIfCmServiceTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceTable.setDescription('Describes the attributes of each upstream service queue\n             on a CM.')
docsIfCmServiceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF-MIB", "docsIfCmServiceId"))
if mibBuilder.loadTexts: docsIfCmServiceEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceEntry.setDescription('Describes the attributes of an upstream bandwidth service\n             queue.\n             An entry in this table exists for each Service ID.\n             The primary index is an ifIndex with an ifType of\n             docsCableMaclayer(127).')
docsIfCmServiceId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfCmServiceId.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceId.setDescription('Identifies a service queue for upstream bandwidth. The\n             attributes of this service queue are shared between the\n             CM and the CMTS. The CMTS allocates upstream bandwidth\n             to this service queue based on requests from the CM and\n             on the class of service associated with this queue.')
docsIfCmServiceQosProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceQosProfile.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceQosProfile.setDescription('The index in docsIfQosProfileTable describing the quality\n             of service attributes associated with this particular\n             service. If no associated entry in docsIfQosProfileTable\n             exists, this object returns a value of zero.')
docsIfCmServiceTxSlotsImmed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsImmed.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsImmed.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsImmed.setDescription('The number of upstream mini-slots which have been used to\n             transmit data PDUs in immediate (contention) mode. This\n             includes only those PDUs which are presumed to have\n             arrived at the headend (i.e., those which were explicitly\n             acknowledged.) It does not include retransmission attempts\n             or mini-slots used by Requests.')
docsIfCmServiceTxSlotsDed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsDed.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsDed.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceTxSlotsDed.setDescription('The number of upstream mini-slots which have been used to\n             transmit data PDUs in dedicated mode (i.e., as a result\n             of a unicast Data Grant).')
docsIfCmServiceTxRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxRetries.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceTxRetries.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceTxRetries.setDescription('The number of attempts to transmit data PDUs containing\n             requests for acknowledgment which did not result in\n             acknowledgment.')
docsIfCmServiceTxExceededs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceTxExceededs.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceTxExceededs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceTxExceededs.setDescription('The number of data PDUs transmission failures due to\n             excessive retries without acknowledgment.')
docsIfCmServiceRqRetries = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceRqRetries.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceRqRetries.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceRqRetries.setDescription('The number of attempts to transmit bandwidth requests\n             which did not result in acknowledgment.')
docsIfCmServiceRqExceededs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmServiceRqExceededs.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 6.4.')
if mibBuilder.loadTexts: docsIfCmServiceRqExceededs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmServiceRqExceededs.setDescription('The number of requests for bandwidth which failed due to\n             excessive retries without acknowledgment.')
docsIfCmtsMacTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1), )
if mibBuilder.loadTexts: docsIfCmtsMacTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsMacTable.setDescription('Describes the attributes of each CMTS MAC interface,\n             extending the information available from ifEntry.\n             Mandatory for all CMTS devices.')
docsIfCmtsMacEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsMacEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsMacEntry.setDescription('An entry containing objects describing attributes of each\n             MAC entry, extending the information in ifEntry.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableMaclayer(127).')
docsIfCmtsCapabilities = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 1), Bits().clone(namedValues=NamedValues(("atmCells", 0), ("concatenation", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCapabilities.setReference('DOCSIS Radio Frequency Interface specification,\n             Chapter 6.')
if mibBuilder.loadTexts: docsIfCmtsCapabilities.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCapabilities.setDescription('Identifies the capabilities of the CMTS MAC\n             implementation at this interface. Note that packet\n             transmission is always supported. Therefore, there\n             is no specific bit required to explicitely indicate\n             this capability.')
docsIfCmtsSyncInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsSyncInterval.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.5 and Appendix B.')
if mibBuilder.loadTexts: docsIfCmtsSyncInterval.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsSyncInterval.setDescription('The interval between CMTS transmission of successive SYNC\n             messages at this interface.')
docsIfCmtsUcdInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2000))).setUnits('Milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsUcdInterval.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.5 and Appendix B.')
if mibBuilder.loadTexts: docsIfCmtsUcdInterval.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsUcdInterval.setDescription('The interval between CMTS transmission of successive\n             Upstream Channel Descriptor messages for each upstream\n             channel at this interface.')
docsIfCmtsMaxServiceIds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsMaxServiceIds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsMaxServiceIds.setDescription('The maximum number of service IDs that may be\n             simultaneously active.')
docsIfCmtsInsertionInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 5), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInsertionInterval.setReference('DOCSIS Radio Frequency Interface Specification,\n             Appendix B, Ranging Interval.')
if mibBuilder.loadTexts: docsIfCmtsInsertionInterval.setStatus('obsolete')
if mibBuilder.loadTexts: docsIfCmtsInsertionInterval.setDescription('The amount of time to elapse between each broadcast\n             station maintenance grant. Broadcast station maintenance\n             grants are used to allow new cable modems to join the\n             network. Zero indicates that a vendor-specific algorithm\n             is used instead of a fixed time. Maximum amount of time\n             permitted by the specification is 2 seconds.')
docsIfCmtsInvitedRangingAttempts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInvitedRangingAttempts.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 7.2.5 and Appendix B.')
if mibBuilder.loadTexts: docsIfCmtsInvitedRangingAttempts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsInvitedRangingAttempts.setDescription('The maximum number of attempts to make on invitations\n             for ranging requests. A value of zero means the system\n             should attempt to range forever.')
docsIfCmtsInsertInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 1, 1, 7), TimeInterval()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsInsertInterval.setReference('DOCSIS Radio Frequency Interface Specification,\n             Appendix B.')
if mibBuilder.loadTexts: docsIfCmtsInsertInterval.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsInsertInterval.setDescription('The amount of time to elapse between each broadcast\n             station maintenance grant. Broadcast station maintenance\n             grants are used to allow new cable modems to join the\n             network. Zero indicates that a vendor-specific algorithm\n             is used instead of a fixed time. Maximum amount of time\n             permitted by the specification is 2 seconds.')
docsIfCmtsStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2), )
if mibBuilder.loadTexts: docsIfCmtsStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusTable.setDescription('For the MAC layer, this group maintains a number of\n             status objects and counters.')
docsIfCmtsStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: docsIfCmtsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusEntry.setDescription('Status entry for a single MAC layer.\n             An entry in this table exists for each ifEntry with an\n             ifType of docsCableMaclayer(127).')
docsIfCmtsStatusInvalidRangeReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRangeReqs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRangeReqs.setDescription('This object counts invalid RNG-REQ messages received on\n             this interface.')
docsIfCmtsStatusRangingAborteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusRangingAborteds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusRangingAborteds.setDescription('This object counts ranging attempts that were explicitely\n             aborted by the CMTS.')
docsIfCmtsStatusInvalidRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRegReqs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidRegReqs.setDescription('This object counts invalid REG-REQ messages received on\n             this interface.')
docsIfCmtsStatusFailedRegReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusFailedRegReqs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusFailedRegReqs.setDescription('This object counts failed registration attempts, i.e.,\n             authentication failures and class of service failures,\n             on this interface.')
docsIfCmtsStatusInvalidDataReqs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidDataReqs.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusInvalidDataReqs.setDescription('This object counts invalid data request messages\n             received on this interface.')
docsIfCmtsStatusT5Timeouts = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsStatusT5Timeouts.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsStatusT5Timeouts.setDescription('This object counts the number of times counter T5\n             expired on this interface.')
docsIfCmtsCmStatusTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3), )
if mibBuilder.loadTexts: docsIfCmtsCmStatusTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusTable.setDescription('A set of objects in the CMTS, maintained for each\n             Cable Modem connected to this CMTS.')
docsIfCmtsCmStatusEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmStatusIndex"))
if mibBuilder.loadTexts: docsIfCmtsCmStatusEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusEntry.setDescription('Status information for a single Cable Modem.\n             An entry in this table exists for each Cable Modem\n             that is connected to the CMTS implementing this table.')
docsIfCmtsCmStatusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsIfCmtsCmStatusIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusIndex.setDescription('Index value to uniquely identify an entry in this table.\n             For an individual Cable Modem, this index value should\n             not change during CMTS uptime.')
docsIfCmtsCmStatusMacAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusMacAddress.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusMacAddress.setDescription('MAC address of this Cable Modem. If the Cable Modem has\n             multiple MAC addresses, this is the MAC address associated\n             with the Cable interface.')
docsIfCmtsCmStatusIpAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusIpAddress.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusIpAddress.setDescription('IP address of this Cable Modem. If the Cable Modem has no\n             IP address assigned, or the IP address is unknown, this\n             object returns a value of 0.0.0.0. If the Cable Modem has\n             multiple IP addresses, this object returns the IP address\n             associated with the Cable interface.')
docsIfCmtsCmStatusDownChannelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusDownChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusDownChannelIfIndex.setDescription('IfIndex of the downstream channel this CM is connected\n             to. If the downstream channel is unknown, this object\n             returns a value of zero.')
docsIfCmtsCmStatusUpChannelIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 5), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUpChannelIfIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusUpChannelIfIndex.setDescription('IfIndex of the upstream channel this CM is connected\n             to. If the upstream channel is unknown, this object\n             returns a value of zero.')
docsIfCmtsCmStatusRxPower = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 6), TenthdBmV()).setUnits('dBmV').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusRxPower.setReference('DOCSIS Radio Frequency Interface Specification,\n             Table 4-13.')
if mibBuilder.loadTexts: docsIfCmtsCmStatusRxPower.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusRxPower.setDescription('The receive power as percieved for upstream data from\n             this Cable Modem.\n             If the receive power is unknown, this object returns\n             a value of zero.')
docsIfCmtsCmStatusTimingOffset = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusTimingOffset.setReference('DOCSIS Radio Frequency Interface Specification,\n             Section 6.5.')
if mibBuilder.loadTexts: docsIfCmtsCmStatusTimingOffset.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusTimingOffset.setDescription('A measure of the current round trip time for this CM.\n             Used for timing of CM upstream transmissions to ensure\n             synchronized arrivals at the CMTS. Units are in terms\n             of (6.25 microseconds/64). Returns zero if the value\n             is unknown.')
docsIfCmtsCmStatusEqualizationData = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusEqualizationData.setReference('DOCSIS Radio Frequency Interface Specification,\n             Figure 6-23.')
if mibBuilder.loadTexts: docsIfCmtsCmStatusEqualizationData.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusEqualizationData.setDescription('Equalization data for this CM. Returns an empty string\n             if the value is unknown or if there is no equalization\n             data available or defined.')
docsIfCmtsCmStatusValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("ranging", 2), ("rangingAborted", 3), ("rangingComplete", 4), ("ipComplete", 5), ("registrationComplete", 6), ("accessDenied", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusValue.setReference('DOCSIS Radio Frequency Interface Specification,\n             Chapter 7.2.')
if mibBuilder.loadTexts: docsIfCmtsCmStatusValue.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusValue.setDescription('Current Cable Modem connectivity state, as specified\n             in the RF Interface Specification. Returned status\n             information is the CM status as assumed by the CMTS,\n             and indicates the following events:\n             other(1)\n                Any state other than below.\n             ranging(2)\n                The CMTS has received an Initial Ranging Request\n                message from the CM, and the ranging process is not\n                yet complete.\n             rangingAborted(3)\n                The CMTS has sent a Ranging Abort message to the CM.\n             rangingComplete(4)\n                The CMTS has sent a Ranging Complete message to the CM.\n             ipComplete(5)\n                The CMTS has received a DHCP reply message and forwarded\n                it to the CM.\n             registrationComplete(6)\n                The CMTS has sent a Registration Response mesage to\n                the CM.\n             accessDenied(7)\n                The CMTS has sent a Registration Aborted message\n                to the CM.\n             The CMTS only needs to report states it is able to detect.')
docsIfCmtsCmStatusUnerroreds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUnerroreds.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3')
if mibBuilder.loadTexts: docsIfCmtsCmStatusUnerroreds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusUnerroreds.setDescription('Codewords received without error from this Cable Modem.')
docsIfCmtsCmStatusCorrecteds = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusCorrecteds.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3')
if mibBuilder.loadTexts: docsIfCmtsCmStatusCorrecteds.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusCorrecteds.setDescription('Codewords received with correctable errors from this\n             Cable Modem.')
docsIfCmtsCmStatusUncorrectables = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusUncorrectables.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3')
if mibBuilder.loadTexts: docsIfCmtsCmStatusUncorrectables.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusUncorrectables.setDescription('Codewords received with uncorrectable errors from this\n             Cable Modem.')
docsIfCmtsCmStatusSignalNoise = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 13), TenthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusSignalNoise.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusSignalNoise.setDescription('Signal/Noise ratio as perceived for upstream data from\n             this Cable Modem.\n             If the Signal/Noise is unknown, this object returns\n             a value of zero.')
docsIfCmtsCmStatusMicroreflections = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 3, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setUnits('dBc').setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmStatusMicroreflections.setReference('DOCSIS Radio Frequency Interface specification,\n             Table 2-1 and 2-2')
if mibBuilder.loadTexts: docsIfCmtsCmStatusMicroreflections.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmStatusMicroreflections.setDescription('Total microreflections including in-channel response\n             as perceived on this interface, measured in dBc below\n             the signal level.\n             This object is not assumed to return an absolutely\n             accurate value, but should give a rough indication\n             of microreflections received on this interface.\n             It is up to the implementor to provide information\n             as accurate as possible.')
docsIfCmtsServiceTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4), )
if mibBuilder.loadTexts: docsIfCmtsServiceTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceTable.setDescription('Describes the attributes of upstream service queues\n             in a Cable Modem Termination System.')
docsIfCmtsServiceEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-IF-MIB", "docsIfCmtsServiceId"))
if mibBuilder.loadTexts: docsIfCmtsServiceEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceEntry.setDescription('Describes the attributes of a single upstream bandwidth\n             service queue.\n             Entries in this table exist for each ifEntry with an\n             ifType of docsCableMaclayer(127), and for each service\n             queue (Service ID) within this MAC layer.\n             Entries in this table are created with the creation of\n             individual Service IDs by the MAC layer and removed\n             when a Service ID is removed.')
docsIfCmtsServiceId = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16383)))
if mibBuilder.loadTexts: docsIfCmtsServiceId.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceId.setDescription('Identifies a service queue for upstream bandwidth. The\n             attributes of this service queue are shared between the\n             Cable Modem and the Cable Modem Termination System.\n             The CMTS allocates upstream bandwidth to this service\n             queue based on requests from the CM and on the class of\n             service associated with this queue.')
docsIfCmtsServiceCmStatusIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceCmStatusIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceCmStatusIndex.setDescription('Pointer to an entry in docsIfCmtsCmStatusTable identifying\n             the Cable Modem using this Service Queue. If multiple\n             Cable Modems are using this Service Queue, the value of\n             this object is zero.')
docsIfCmtsServiceAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("destroyed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsServiceAdminStatus.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceAdminStatus.setDescription('Allows a service class for a particular modem to be\n             suppressed, (re-)enabled, or deleted altogether.')
docsIfCmtsServiceQosProfile = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceQosProfile.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceQosProfile.setDescription('The index in docsIfQosProfileTable describing the quality\n             of service attributes associated with this particular\n             service. If no associated docsIfQosProfileTable entry\n             exists, this object returns a value of zero.')
docsIfCmtsServiceCreateTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceCreateTime.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceCreateTime.setDescription('The value of sysUpTime when this entry was created.')
docsIfCmtsServiceInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceInOctets.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceInOctets.setDescription('The cumulative number of Packet Data octets received\n             on this Service ID. The count does not include the\n             size of the Cable MAC header')
docsIfCmtsServiceInPackets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsServiceInPackets.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsServiceInPackets.setDescription('The cumulative number of Packet Data packets received\n             on this Service ID.')
docsIfCmtsModulationTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5), )
if mibBuilder.loadTexts: docsIfCmtsModulationTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModulationTable.setDescription('Describes a modulation profile associated with one or more\n             upstream channels.')
docsIfCmtsModulationEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsModIndex"), (0, "DOCS-IF-MIB", "docsIfCmtsModIntervalUsageCode"))
if mibBuilder.loadTexts: docsIfCmtsModulationEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModulationEntry.setDescription('Describes a modulation profile for an Interval Usage Code\n             for one or more upstream channels.\n             Entries in this table are created by the operator. Initial\n             default entries may be created at system initialization\n             time. No individual objects have to be specified in order\n             to create an entry in this table.\n             Note that some objects do not have DEFVALs, but do have\n             calculated defaults and need not be specified during row\n             creation.\n             There is no restriction on the changing of values in this\n             table while their associated rows are active.')
docsIfCmtsModIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: docsIfCmtsModIndex.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModIndex.setDescription('An index into the Channel Modulation table representing\n              a group of Interval Usage Codes, all associated with the\n              same channel.')
docsIfCmtsModIntervalUsageCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("request", 1), ("requestData", 2), ("initialRanging", 3), ("periodicRanging", 4), ("shortData", 5), ("longData", 6))))
if mibBuilder.loadTexts: docsIfCmtsModIntervalUsageCode.setReference('DOCSIS Radio Frequency Interface specification,\n             Table 6-16.')
if mibBuilder.loadTexts: docsIfCmtsModIntervalUsageCode.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModIntervalUsageCode.setDescription('An index into the Channel Modulation table which, when\n             grouped with other Interval Usage Codes, fully\n             instantiate all modulation sets for a given upstream\n             channel.')
docsIfCmtsModControl = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModControl.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModControl.setDescription('Controls and reflects the status of rows in this table.')
docsIfCmtsModType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("qpsk", 2), ("qam16", 3))).clone('qpsk')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModType.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.2.')
if mibBuilder.loadTexts: docsIfCmtsModType.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModType.setDescription('The modulation type used on this channel. Returns\n             other(1) if the modulation type is neither qpsk or\n             qam16. See the reference for the modulation profiles\n             implied by qpsk or qam16.  See the conformance object for\n             write conditions and limitations.')
docsIfCmtsModPreambleLen = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModPreambleLen.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.5.')
if mibBuilder.loadTexts: docsIfCmtsModPreambleLen.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModPreambleLen.setDescription('The preamble length for this modulation profile in bits.\n             Default value is the minimum needed by the implementation\n             at the CMTS for the given modulation profile.')
docsIfCmtsModDifferentialEncoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 6), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModDifferentialEncoding.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModDifferentialEncoding.setDescription('Specifies whether or not differential encoding is used\n             on this channel.')
docsIfCmtsModFECErrorCorrection = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModFECErrorCorrection.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3.')
if mibBuilder.loadTexts: docsIfCmtsModFECErrorCorrection.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModFECErrorCorrection.setDescription('The number of correctable errored bytes (t) used in\n             forward error correction code. The value of 0 indicates\n             no correction is employed. The number of check bytes\n             appended will be twice this value.')
docsIfCmtsModFECCodewordLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(32)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModFECCodewordLength.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.3.')
if mibBuilder.loadTexts: docsIfCmtsModFECCodewordLength.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModFECCodewordLength.setDescription('The number of data bytes (k) in the forward error\n             correction codeword.\n             This object is not used if docsIfCmtsModFECErrorCorrection\n             is zero.')
docsIfCmtsModScramblerSeed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScramblerSeed.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.4.')
if mibBuilder.loadTexts: docsIfCmtsModScramblerSeed.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModScramblerSeed.setDescription('The 15 bit seed value for the scrambler polynomial.')
docsIfCmtsModMaxBurstSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModMaxBurstSize.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModMaxBurstSize.setDescription("The maximum number of mini-slots that can be transmitted\n             during this channel's burst time. Returns zero if the\n             burst length is bounded by the allocation MAP rather than\n             this profile.\n             Default value is 0 except for shortData, where it is 8.")
docsIfCmtsModGuardTimeSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsModGuardTimeSize.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.7.')
if mibBuilder.loadTexts: docsIfCmtsModGuardTimeSize.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModGuardTimeSize.setDescription("The number of symbol-times which must follow the end of\n             this channel's burst. Default value is the minimum time\n             needed by the implementation for this modulation profile.")
docsIfCmtsModLastCodewordShortened = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 12), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModLastCodewordShortened.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.10.')
if mibBuilder.loadTexts: docsIfCmtsModLastCodewordShortened.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModLastCodewordShortened.setDescription('Indicates if the last FEC codeword is truncated.')
docsIfCmtsModScrambler = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 5, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: docsIfCmtsModScrambler.setReference('DOCSIS Radio Frequency Interface specification,\n             Section 4.2.4.')
if mibBuilder.loadTexts: docsIfCmtsModScrambler.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsModScrambler.setDescription('Indicates if the scrambler is employed.')
docsIfCmtsQosProfilePermissions = MibScalar((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 6), Bits().clone(namedValues=NamedValues(("createByManagement", 0), ("updateByManagement", 1), ("createByModems", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: docsIfCmtsQosProfilePermissions.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsQosProfilePermissions.setDescription('This object specifies permitted methods of creating\n             entries in docsIfQosProfileTable.\n             CreateByManagement(0) is set if entries can be created\n             using SNMP. UpdateByManagement(1) is set if updating\n             entries using SNMP is permitted. CreateByModems(2)\n             is set if entries can be created based on information\n             in REG-REQ MAC messages received from Cable Modems.\n             Information in this object is only applicable if\n             docsIfQosProfileTable is implemented as read-create.\n             Otherwise, this object is implemented as read-only\n             and returns CreateByModems(2).\n             Either CreateByManagement(0) or CreateByModems(1)\n             must be set when writing to this object.')
docsIfCmtsMacToCmTable = MibTable((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7), )
if mibBuilder.loadTexts: docsIfCmtsMacToCmTable.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsMacToCmTable.setDescription("This is a table to provide a quick access index into the\n             docsIfCmtsCmStatusTable. There is exactly one row in this\n             table for each row in the docsIfCmtsCmStatusTable. In\n             general, the management station should use this table only\n             to get a pointer into the docsIfCmtsCmStatusTable (which\n             corresponds to the CM's RF interface MAC address), and\n             should not iterate (e.g. GetNext through) this table.")
docsIfCmtsMacToCmEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1), ).setIndexNames((0, "DOCS-IF-MIB", "docsIfCmtsCmMac"))
if mibBuilder.loadTexts: docsIfCmtsMacToCmEntry.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsMacToCmEntry.setDescription('A row in the docsIfCmtsMacToCmTable.\n             An entry in this table exists for each Cable Modem\n             that is connected to the CMTS implementing this table.')
docsIfCmtsCmMac = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 1), MacAddress())
if mibBuilder.loadTexts: docsIfCmtsCmMac.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmMac.setDescription('The RF side MAC address for the referenced CM. (E.g. the\n             interface on the CM that has docsCableMacLayer(127) as\n             its ifType.')
docsIfCmtsCmPtr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 127, 1, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: docsIfCmtsCmPtr.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsCmPtr.setDescription("An row index into docsIfCmtsCmStatusTable. When queried\n             with the correct instance value (e.g. a CM's MAC address),\n             returns the index in docsIfCmtsCmStatusTable which\n             represents that CM.")
docsIfNotification = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 2))
docsIfConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3))
docsIfCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 1))
docsIfGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 127, 3, 2))
docsIfBasicCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 127, 3, 1, 1)).setObjects(("DOCS-IF-MIB", "docsIfBasicGroup"), ("DOCS-IF-MIB", "docsIfCmGroup"), ("DOCS-IF-MIB", "docsIfCmtsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicCompliance = docsIfBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: docsIfBasicCompliance.setDescription('The compliance statement for devices that implement\n             MCNS/DOCSIS compliant Radio Frequency Interfaces.')
docsIfBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 1)).setObjects(("DOCS-IF-MIB", "docsIfDownChannelId"), ("DOCS-IF-MIB", "docsIfDownChannelFrequency"), ("DOCS-IF-MIB", "docsIfDownChannelWidth"), ("DOCS-IF-MIB", "docsIfDownChannelModulation"), ("DOCS-IF-MIB", "docsIfDownChannelInterleave"), ("DOCS-IF-MIB", "docsIfDownChannelPower"), ("DOCS-IF-MIB", "docsIfUpChannelId"), ("DOCS-IF-MIB", "docsIfUpChannelFrequency"), ("DOCS-IF-MIB", "docsIfUpChannelWidth"), ("DOCS-IF-MIB", "docsIfUpChannelModulationProfile"), ("DOCS-IF-MIB", "docsIfUpChannelSlotSize"), ("DOCS-IF-MIB", "docsIfUpChannelTxTimingOffset"), ("DOCS-IF-MIB", "docsIfUpChannelRangingBackoffStart"), ("DOCS-IF-MIB", "docsIfUpChannelRangingBackoffEnd"), ("DOCS-IF-MIB", "docsIfUpChannelTxBackoffStart"), ("DOCS-IF-MIB", "docsIfUpChannelTxBackoffEnd"), ("DOCS-IF-MIB", "docsIfQosProfPriority"), ("DOCS-IF-MIB", "docsIfQosProfMaxUpBandwidth"), ("DOCS-IF-MIB", "docsIfQosProfGuarUpBandwidth"), ("DOCS-IF-MIB", "docsIfQosProfMaxDownBandwidth"), ("DOCS-IF-MIB", "docsIfQosProfMaxTxBurst"), ("DOCS-IF-MIB", "docsIfQosProfBaselinePrivacy"), ("DOCS-IF-MIB", "docsIfQosProfStatus"), ("DOCS-IF-MIB", "docsIfSigQIncludesContention"), ("DOCS-IF-MIB", "docsIfSigQUnerroreds"), ("DOCS-IF-MIB", "docsIfSigQCorrecteds"), ("DOCS-IF-MIB", "docsIfSigQUncorrectables"), ("DOCS-IF-MIB", "docsIfSigQSignalNoise"), ("DOCS-IF-MIB", "docsIfSigQMicroreflections"), ("DOCS-IF-MIB", "docsIfSigQEqualizationData"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfBasicGroup = docsIfBasicGroup.setStatus('current')
if mibBuilder.loadTexts: docsIfBasicGroup.setDescription('Group of objects implemented in both Cable Modems and\n             Cable Modem Termination Systems.')
docsIfCmGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 2)).setObjects(("DOCS-IF-MIB", "docsIfCmCmtsAddress"), ("DOCS-IF-MIB", "docsIfCmCapabilities"), ("DOCS-IF-MIB", "docsIfCmRangingTimeout"), ("DOCS-IF-MIB", "docsIfCmStatusValue"), ("DOCS-IF-MIB", "docsIfCmStatusCode"), ("DOCS-IF-MIB", "docsIfCmStatusTxPower"), ("DOCS-IF-MIB", "docsIfCmStatusResets"), ("DOCS-IF-MIB", "docsIfCmStatusLostSyncs"), ("DOCS-IF-MIB", "docsIfCmStatusInvalidMaps"), ("DOCS-IF-MIB", "docsIfCmStatusInvalidUcds"), ("DOCS-IF-MIB", "docsIfCmStatusInvalidRangingResponses"), ("DOCS-IF-MIB", "docsIfCmStatusInvalidRegistrationResponses"), ("DOCS-IF-MIB", "docsIfCmStatusT1Timeouts"), ("DOCS-IF-MIB", "docsIfCmStatusT2Timeouts"), ("DOCS-IF-MIB", "docsIfCmStatusT3Timeouts"), ("DOCS-IF-MIB", "docsIfCmStatusT4Timeouts"), ("DOCS-IF-MIB", "docsIfCmStatusRangingAborteds"), ("DOCS-IF-MIB", "docsIfCmServiceQosProfile"), ("DOCS-IF-MIB", "docsIfCmServiceTxSlotsImmed"), ("DOCS-IF-MIB", "docsIfCmServiceTxSlotsDed"), ("DOCS-IF-MIB", "docsIfCmServiceTxRetries"), ("DOCS-IF-MIB", "docsIfCmServiceTxExceededs"), ("DOCS-IF-MIB", "docsIfCmServiceRqRetries"), ("DOCS-IF-MIB", "docsIfCmServiceRqExceededs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmGroup = docsIfCmGroup.setStatus('current')
if mibBuilder.loadTexts: docsIfCmGroup.setDescription('Group of objects implemented in Cable Modems.')
docsIfCmtsGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 3)).setObjects(("DOCS-IF-MIB", "docsIfCmtsCapabilities"), ("DOCS-IF-MIB", "docsIfCmtsSyncInterval"), ("DOCS-IF-MIB", "docsIfCmtsUcdInterval"), ("DOCS-IF-MIB", "docsIfCmtsMaxServiceIds"), ("DOCS-IF-MIB", "docsIfCmtsInvitedRangingAttempts"), ("DOCS-IF-MIB", "docsIfCmtsInsertInterval"), ("DOCS-IF-MIB", "docsIfCmtsStatusInvalidRangeReqs"), ("DOCS-IF-MIB", "docsIfCmtsStatusRangingAborteds"), ("DOCS-IF-MIB", "docsIfCmtsStatusInvalidRegReqs"), ("DOCS-IF-MIB", "docsIfCmtsStatusFailedRegReqs"), ("DOCS-IF-MIB", "docsIfCmtsStatusInvalidDataReqs"), ("DOCS-IF-MIB", "docsIfCmtsStatusT5Timeouts"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMacAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusIpAddress"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusDownChannelIfIndex"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusUpChannelIfIndex"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusRxPower"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusTimingOffset"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusEqualizationData"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusValue"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusUnerroreds"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusCorrecteds"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusUncorrectables"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusSignalNoise"), ("DOCS-IF-MIB", "docsIfCmtsCmStatusMicroreflections"), ("DOCS-IF-MIB", "docsIfCmtsServiceCmStatusIndex"), ("DOCS-IF-MIB", "docsIfCmtsServiceAdminStatus"), ("DOCS-IF-MIB", "docsIfCmtsServiceQosProfile"), ("DOCS-IF-MIB", "docsIfCmtsServiceCreateTime"), ("DOCS-IF-MIB", "docsIfCmtsServiceInOctets"), ("DOCS-IF-MIB", "docsIfCmtsServiceInPackets"), ("DOCS-IF-MIB", "docsIfCmtsModType"), ("DOCS-IF-MIB", "docsIfCmtsModControl"), ("DOCS-IF-MIB", "docsIfCmtsModPreambleLen"), ("DOCS-IF-MIB", "docsIfCmtsModDifferentialEncoding"), ("DOCS-IF-MIB", "docsIfCmtsModFECErrorCorrection"), ("DOCS-IF-MIB", "docsIfCmtsModFECCodewordLength"), ("DOCS-IF-MIB", "docsIfCmtsModScramblerSeed"), ("DOCS-IF-MIB", "docsIfCmtsModMaxBurstSize"), ("DOCS-IF-MIB", "docsIfCmtsModGuardTimeSize"), ("DOCS-IF-MIB", "docsIfCmtsModLastCodewordShortened"), ("DOCS-IF-MIB", "docsIfCmtsModScrambler"), ("DOCS-IF-MIB", "docsIfCmtsQosProfilePermissions"), ("DOCS-IF-MIB", "docsIfCmtsCmPtr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfCmtsGroup = docsIfCmtsGroup.setStatus('current')
if mibBuilder.loadTexts: docsIfCmtsGroup.setDescription('Group of objects implemented in Cable Modem Termination\n             Systems.')
docsIfObsoleteGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 127, 3, 2, 4)).setObjects(("DOCS-IF-MIB", "docsIfCmRangingRespTimeout"), ("DOCS-IF-MIB", "docsIfCmtsInsertionInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    docsIfObsoleteGroup = docsIfObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: docsIfObsoleteGroup.setDescription('Group of objects obsoleted.')
mibBuilder.exportSymbols("DOCS-IF-MIB", docsIfUpstreamChannelTable=docsIfUpstreamChannelTable, docsIfCmtsMacTable=docsIfCmtsMacTable, docsIfCmtsModDifferentialEncoding=docsIfCmtsModDifferentialEncoding, docsIfCmtsServiceInOctets=docsIfCmtsServiceInOctets, docsIfCmtsStatusInvalidRangeReqs=docsIfCmtsStatusInvalidRangeReqs, docsIfConformance=docsIfConformance, docsIfCmStatusLostSyncs=docsIfCmStatusLostSyncs, docsIfCmtsStatusT5Timeouts=docsIfCmtsStatusT5Timeouts, docsIfCmStatusInvalidRegistrationResponses=docsIfCmStatusInvalidRegistrationResponses, docsIfCmStatusTable=docsIfCmStatusTable, docsIfCmtsCmStatusRxPower=docsIfCmtsCmStatusRxPower, docsIfCmtsCmStatusEqualizationData=docsIfCmtsCmStatusEqualizationData, docsIfCmtsCmPtr=docsIfCmtsCmPtr, docsIfCmtsModMaxBurstSize=docsIfCmtsModMaxBurstSize, docsIfQosProfileEntry=docsIfQosProfileEntry, docsIfCmtsMacEntry=docsIfCmtsMacEntry, docsIfMibObjects=docsIfMibObjects, docsIfBasicCompliance=docsIfBasicCompliance, docsIfCmtsCmStatusTable=docsIfCmtsCmStatusTable, docsIfCmStatusEntry=docsIfCmStatusEntry, docsIfCmStatusValue=docsIfCmStatusValue, docsIfCmtsUcdInterval=docsIfCmtsUcdInterval, docsIfCmtsCmStatusTimingOffset=docsIfCmtsCmStatusTimingOffset, docsIfCmServiceTxExceededs=docsIfCmServiceTxExceededs, docsIfCmtsObjects=docsIfCmtsObjects, docsIfUpChannelWidth=docsIfUpChannelWidth, docsIfDownChannelId=docsIfDownChannelId, docsIfSigQUncorrectables=docsIfSigQUncorrectables, docsIfDownChannelInterleave=docsIfDownChannelInterleave, docsIfCmStatusT3Timeouts=docsIfCmStatusT3Timeouts, docsIfCmStatusInvalidUcds=docsIfCmStatusInvalidUcds, docsIfDownChannelModulation=docsIfDownChannelModulation, docsIfCmtsStatusRangingAborteds=docsIfCmtsStatusRangingAborteds, docsIfCmtsStatusTable=docsIfCmtsStatusTable, docsIfUpChannelRangingBackoffStart=docsIfUpChannelRangingBackoffStart, docsIfCmtsStatusFailedRegReqs=docsIfCmtsStatusFailedRegReqs, docsIfCmtsInvitedRangingAttempts=docsIfCmtsInvitedRangingAttempts, docsIfCmStatusRangingAborteds=docsIfCmStatusRangingAborteds, docsIfUpChannelTxTimingOffset=docsIfUpChannelTxTimingOffset, docsIfDownChannelWidth=docsIfDownChannelWidth, docsIfNotification=docsIfNotification, docsIfUpstreamChannelEntry=docsIfUpstreamChannelEntry, docsIfUpChannelModulationProfile=docsIfUpChannelModulationProfile, docsIfCmtsServiceInPackets=docsIfCmtsServiceInPackets, docsIfCmtsServiceAdminStatus=docsIfCmtsServiceAdminStatus, docsIfDownChannelFrequency=docsIfDownChannelFrequency, docsIfCmtsCmStatusIpAddress=docsIfCmtsCmStatusIpAddress, docsIfCmtsCmStatusUnerroreds=docsIfCmtsCmStatusUnerroreds, docsIfCmtsCmStatusMicroreflections=docsIfCmtsCmStatusMicroreflections, docsIfCmStatusResets=docsIfCmStatusResets, docsIfCmStatusT4Timeouts=docsIfCmStatusT4Timeouts, docsIfCmtsMacToCmTable=docsIfCmtsMacToCmTable, docsIfQosProfStatus=docsIfQosProfStatus, docsIfCmtsCmStatusValue=docsIfCmtsCmStatusValue, TenthdBmV=TenthdBmV, docsIfCmtsStatusEntry=docsIfCmtsStatusEntry, docsIfCmtsCmStatusSignalNoise=docsIfCmtsCmStatusSignalNoise, docsIfCmRangingRespTimeout=docsIfCmRangingRespTimeout, docsIfDownChannelPower=docsIfDownChannelPower, docsIfCompliances=docsIfCompliances, docsIfCmMacTable=docsIfCmMacTable, docsIfCmtsCmStatusEntry=docsIfCmtsCmStatusEntry, docsIfCmtsServiceCreateTime=docsIfCmtsServiceCreateTime, docsIfCmtsCmStatusMacAddress=docsIfCmtsCmStatusMacAddress, docsIfCmCapabilities=docsIfCmCapabilities, docsIfSigQUnerroreds=docsIfSigQUnerroreds, docsIfCmtsModFECCodewordLength=docsIfCmtsModFECCodewordLength, docsIfCmtsModIntervalUsageCode=docsIfCmtsModIntervalUsageCode, docsIfCmtsCmStatusUpChannelIfIndex=docsIfCmtsCmStatusUpChannelIfIndex, docsIfCmGroup=docsIfCmGroup, docsIfQosProfBaselinePrivacy=docsIfQosProfBaselinePrivacy, docsIfQosProfileTable=docsIfQosProfileTable, docsIfUpChannelTxBackoffEnd=docsIfUpChannelTxBackoffEnd, docsIfCmtsCmStatusDownChannelIfIndex=docsIfCmtsCmStatusDownChannelIfIndex, docsIfDownstreamChannelTable=docsIfDownstreamChannelTable, docsIfQosProfMaxTxBurst=docsIfQosProfMaxTxBurst, docsIfCmServiceRqRetries=docsIfCmServiceRqRetries, docsIfSigQIncludesContention=docsIfSigQIncludesContention, docsIfQosProfMaxUpBandwidth=docsIfQosProfMaxUpBandwidth, TenthdB=TenthdB, docsIfCmServiceTable=docsIfCmServiceTable, docsIfCmtsModPreambleLen=docsIfCmtsModPreambleLen, docsIfCmtsCmStatusCorrecteds=docsIfCmtsCmStatusCorrecteds, docsIfCmCmtsAddress=docsIfCmCmtsAddress, docsIfCmServiceTxSlotsDed=docsIfCmServiceTxSlotsDed, docsIfQosProfGuarUpBandwidth=docsIfQosProfGuarUpBandwidth, docsIfCmtsStatusInvalidDataReqs=docsIfCmtsStatusInvalidDataReqs, docsIfSigQEqualizationData=docsIfSigQEqualizationData, docsIfCmStatusTxPower=docsIfCmStatusTxPower, docsIfCmtsServiceQosProfile=docsIfCmtsServiceQosProfile, docsIfCmtsModulationEntry=docsIfCmtsModulationEntry, docsIfSigQMicroreflections=docsIfSigQMicroreflections, docsIfSigQCorrecteds=docsIfSigQCorrecteds, docsIfCmtsServiceTable=docsIfCmtsServiceTable, docsIfSignalQualityEntry=docsIfSignalQualityEntry, docsIfBasicGroup=docsIfBasicGroup, docsIfCmServiceQosProfile=docsIfCmServiceQosProfile, docsIfCmServiceRqExceededs=docsIfCmServiceRqExceededs, docsIfCmtsSyncInterval=docsIfCmtsSyncInterval, docsIfCmtsModScrambler=docsIfCmtsModScrambler, docsIfMib=docsIfMib, docsIfQosProfPriority=docsIfQosProfPriority, PYSNMP_MODULE_ID=docsIfMib, docsIfCmStatusInvalidRangingResponses=docsIfCmStatusInvalidRangingResponses, docsIfCmtsStatusInvalidRegReqs=docsIfCmtsStatusInvalidRegReqs, docsIfCmtsModLastCodewordShortened=docsIfCmtsModLastCodewordShortened, docsIfCmtsModControl=docsIfCmtsModControl, docsIfUpChannelId=docsIfUpChannelId, docsIfCmtsModGuardTimeSize=docsIfCmtsModGuardTimeSize, docsIfCmtsModScramblerSeed=docsIfCmtsModScramblerSeed, docsIfCmtsCmStatusUncorrectables=docsIfCmtsCmStatusUncorrectables, docsIfUpChannelTxBackoffStart=docsIfUpChannelTxBackoffStart, docsIfUpChannelFrequency=docsIfUpChannelFrequency, docsIfObsoleteGroup=docsIfObsoleteGroup, docsIfSigQSignalNoise=docsIfSigQSignalNoise, docsIfCmMacEntry=docsIfCmMacEntry, docsIfCmServiceEntry=docsIfCmServiceEntry, docsIfCmServiceId=docsIfCmServiceId, docsIfCmtsMaxServiceIds=docsIfCmtsMaxServiceIds, docsIfCmtsCapabilities=docsIfCmtsCapabilities, docsIfCmtsCmMac=docsIfCmtsCmMac, docsIfCmtsServiceEntry=docsIfCmtsServiceEntry, docsIfCmRangingTimeout=docsIfCmRangingTimeout, docsIfCmtsInsertionInterval=docsIfCmtsInsertionInterval, docsIfCmtsServiceId=docsIfCmtsServiceId, docsIfUpChannelSlotSize=docsIfUpChannelSlotSize, docsIfCmtsModType=docsIfCmtsModType, docsIfCmtsModulationTable=docsIfCmtsModulationTable, docsIfCmStatusCode=docsIfCmStatusCode, docsIfQosProfMaxDownBandwidth=docsIfQosProfMaxDownBandwidth, docsIfCmtsModIndex=docsIfCmtsModIndex, docsIfCmStatusT1Timeouts=docsIfCmStatusT1Timeouts, docsIfCmtsModFECErrorCorrection=docsIfCmtsModFECErrorCorrection, docsIfDownstreamChannelEntry=docsIfDownstreamChannelEntry, docsIfCmtsInsertInterval=docsIfCmtsInsertInterval, docsIfBaseObjects=docsIfBaseObjects, docsIfQosProfIndex=docsIfQosProfIndex, docsIfCmObjects=docsIfCmObjects, docsIfCmtsCmStatusIndex=docsIfCmtsCmStatusIndex, docsIfCmtsQosProfilePermissions=docsIfCmtsQosProfilePermissions, docsIfCmStatusInvalidMaps=docsIfCmStatusInvalidMaps, docsIfUpChannelRangingBackoffEnd=docsIfUpChannelRangingBackoffEnd, docsIfCmtsMacToCmEntry=docsIfCmtsMacToCmEntry, docsIfCmServiceTxSlotsImmed=docsIfCmServiceTxSlotsImmed, docsIfGroups=docsIfGroups, docsIfCmtsGroup=docsIfCmtsGroup, docsIfSignalQualityTable=docsIfSignalQualityTable, docsIfCmtsServiceCmStatusIndex=docsIfCmtsServiceCmStatusIndex, docsIfCmServiceTxRetries=docsIfCmServiceTxRetries, docsIfCmStatusT2Timeouts=docsIfCmStatusT2Timeouts)
