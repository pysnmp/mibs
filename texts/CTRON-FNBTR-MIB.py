#
# PySNMP MIB module CTRON-FNBTR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/enterasys/CTRON-FNBTR-MIB
# Produced by pysmi-1.1.12 at Thu Sep 26 02:13:15 2024
# On host fv-az1144-917 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ctTokenRingFnb, = mibBuilder.importSymbols("CTRON-MIB-NAMES", "ctTokenRingFnb")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, IpAddress, Integer32, NotificationType, iso, Bits, Gauge32, ObjectIdentity, Counter64, ModuleIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "IpAddress", "Integer32", "NotificationType", "iso", "Bits", "Gauge32", "ObjectIdentity", "Counter64", "ModuleIdentity", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ctronFnbTR = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1))
ctronMultiFnbTR = MibIdentifier((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2))
ctronFnbTRTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1), )
if mibBuilder.loadTexts: ctronFnbTRTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbTRTable.setDescription('A list of entries that provide connection status of\n                    Token Ring subsystems, for the FNB.')
ctronFnbTREntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1), ).setIndexNames((0, "CTRON-FNBTR-MIB", "ctronFnbTRIndex"))
if mibBuilder.loadTexts: ctronFnbTREntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbTREntry.setDescription('An entry in the ctronFnbTRTable containing objects that\n                    provide FNB connection status for a Token Ring sub-\n                    system.')
ctronFnbTRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronFnbTRIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbTRIndex.setDescription("An unique value for each Token Ring subsystem.  Its\n                     value ranges between 1 and 'chNumSlots' defined in \n                     chassis-mib.txt.")
ctronFnbConnectLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbConnectLeft.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbConnectLeft.setDescription('Denotes the connection status of the Token Ring\n                     board to the left of the current one.  An attempt to\n                     set a value of 1 or 4 will result in an error code\n                     of badValue.')
ctronFnbConnectRight = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbConnectRight.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbConnectRight.setDescription('Denotes the connection status of the Token Ring\n                    board to the right of the current one.  An attempt\n                    to set a value of 1 or 4 will result in an error\n                    code of badValue.')
ctronFnbBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbBypass.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbBypass.setDescription('Denotes the bypass status of the current Token Ring\n                    board.')
ctronFnbRPBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronFnbRPBypass.setStatus('mandatory')
if mibBuilder.loadTexts: ctronFnbRPBypass.setDescription("Denotes the Ring Port bypass status of the current Token Ring\n            board.  If this capability is not available on this board, the\n            value 'other' is returned when read, and BADSETINFO when written.")
ctronMultiFnbTRTable = MibTable((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1), )
if mibBuilder.loadTexts: ctronMultiFnbTRTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbTRTable.setDescription('A list of entries that provide connection status of\n                    Token Ring subsystems, for the FNB.')
ctronMultiFnbTREntry = MibTableRow((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1), ).setIndexNames((0, "CTRON-FNBTR-MIB", "ctronMultiFnbTRIndex"), (0, "CTRON-FNBTR-MIB", "ctronMultiFnbRingIndex"))
if mibBuilder.loadTexts: ctronMultiFnbTREntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbTREntry.setDescription('An entry in the ctronMultiFnbTRTable containing objects that\n                provide FNB connection status for a Token Ring sub-\n                system.')
ctronMultiFnbTRIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbTRIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbTRIndex.setDescription("An unique value for each Token Ring subsystem.  Its\n                value ranges between 1 and 'chNumSlots' defined in \n                chassis-mib.txt.")
ctronMultiFnbRingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbRingIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbRingIndex.setDescription('An unique value representing an instance of an FNB ring path \n                attachment.  Its value ranges between 1 and n, where n equals \n                the maximum number of FNB ring paths available in a given \n                chassis.  For an MMAC chassis with an FNB, this number is 4.')
ctronMultiFnbConnectLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbConnectLeft.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbConnectLeft.setDescription('Denotes the connection status of the left attach circuitry for\n                a particular FNB ring path attachment on this Token Ring \n                oard.')
ctronMultiFnbConnectRight = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("detached", 2), ("attached", 3), ("faulted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctronMultiFnbConnectRight.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbConnectRight.setDescription('Denotes the connection status of the right attach circuitry for\n                a particular FNB ring path attachment on this Token Ring board.')
ctronMultiFnbBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronMultiFnbBypass.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbBypass.setDescription('Denotes the connection status of the bypass circuitry for a \n                particular backplane ring path attachment on this Token Ring \n                board.')
ctronMultiFnbRPBypass = MibTableColumn((1, 3, 6, 1, 4, 1, 52, 4, 1, 2, 6, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("enable", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctronMultiFnbRPBypass.setStatus('mandatory')
if mibBuilder.loadTexts: ctronMultiFnbRPBypass.setDescription("Denotes the connection status of the ring port bypass \n                circuitry for a particular backplane ring path attachment on\n                his Token Ring board.  If this capability is not available on\n                this board, the value 'other' is returned when read, and\n                BADSETINFO when written.")
mibBuilder.exportSymbols("CTRON-FNBTR-MIB", ctronFnbTRTable=ctronFnbTRTable, ctronMultiFnbTRIndex=ctronMultiFnbTRIndex, ctronMultiFnbBypass=ctronMultiFnbBypass, ctronFnbTREntry=ctronFnbTREntry, ctronFnbTR=ctronFnbTR, ctronMultiFnbTREntry=ctronMultiFnbTREntry, ctronFnbConnectLeft=ctronFnbConnectLeft, ctronFnbRPBypass=ctronFnbRPBypass, ctronMultiFnbTRTable=ctronMultiFnbTRTable, ctronMultiFnbRingIndex=ctronMultiFnbRingIndex, ctronMultiFnbConnectLeft=ctronMultiFnbConnectLeft, ctronFnbBypass=ctronFnbBypass, ctronMultiFnbTR=ctronMultiFnbTR, ctronMultiFnbConnectRight=ctronMultiFnbConnectRight, ctronMultiFnbRPBypass=ctronMultiFnbRPBypass, ctronFnbConnectRight=ctronFnbConnectRight, ctronFnbTRIndex=ctronFnbTRIndex)
