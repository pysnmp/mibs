#
# PySNMP MIB module SP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/eltek/SP2-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 12:20:14 2024
# On host fv-az1380-78 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
eltek, = mibBuilder.importSymbols("ELTEK-COMMON-MIB", "eltek")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Counter64, IpAddress, Bits, Gauge32, NotificationType, enterprises, Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, MibIdentifier, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Counter64", "IpAddress", "Bits", "Gauge32", "NotificationType", "enterprises", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32")
DisplayString, TextualConvention, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "DateAndTime")
eNexus = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10))
eltekTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1))
powerAlarmVars = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1))
powerSystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2))
powerSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 2))
mains = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3))
mainsMainsFailure = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2))
mainsMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5))
mainsOutageLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6))
generator = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4))
generatorEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23))
generatorRunHoursLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24))
generatorFuelConsumptionLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25))
rectifiers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5))
rectifiersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2))
rectifiersCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3))
rectifiersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4))
rectifiersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7))
rectifiersTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18))
dcdc = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 6))
dcdcObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 6, 7))
solarChargers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7))
solarChargersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2))
solarChargersObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 3))
solarChargersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4))
solarChargersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7))
windChargers = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8))
windChargersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2))
windChargersObsolete = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 3))
windChargersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4))
windChargersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7))
load = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9))
loadCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2))
loadEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8))
battery = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10))
batteryVoltage = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5))
batteryCurrents = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6))
batteryTemperatures = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7))
batteryTimeLeft = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8))
batteryRemainingCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9))
batteryUsedCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10))
batteryTotalCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11))
batteryQuality = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12))
batteryLVBD = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13))
batteryChargeCurrentLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14))
batteryBoost = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15))
batteryTest = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16))
batteryTempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 17))
batteryBank = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18))
batteryMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19))
batteryEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20))
batteryCycleLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21))
batteryEqualize = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22))
batteryAhCharged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23))
batteryAhDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24))
inputs = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 11))
outputs = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 12))
controlSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4))
controlSystemIoUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7))
controlSystemInventory = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8))
currentMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9))
flexiMonitors = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10))
mainControlUnits = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11))
controlSystemSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12))
mainControlUnitsError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1))
smartNodeError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2))
batteryMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3))
loadMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4))
ioUnitError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5))
mainsMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6))
flexiMonitorError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7))
ambientTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13))
deltaTemperature = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14))
userSuspended = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15))
alarmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 14))
batteryGroup2 = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15))
batteryGroup2Voltage = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5))
batteryGroup2Currents = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6))
batteryGroup2Temperatures = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7))
batteryGroup2TimeLeft = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8))
batteryGroup2RemainingCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9))
batteryGroup2UsedCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10))
batteryGroup2TotalCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11))
batteryGroup2Quality = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12))
batteryGroup2LVBD = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13))
batteryGroup2ChargeCurrentLimit = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14))
batteryGroup2Boost = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15))
batteryGroup2Test = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16))
batteryGroup2TempComp = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 17))
batteryGroup2Bank = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18))
batteryGroup2EnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19))
batteryGroup2CycleLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20))
batteryGroup2Equalize = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21))
batteryGroup2AhCharged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22))
batteryGroup2AhDischarged = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23))
inverters = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16))
invertersCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2))
invertersCapacity = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3))
invertersError = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4))
invertersEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13))
invertersReactiveEnergyLog = MibIdentifier((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18))
alarmSubsysSourceDescr = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysSourceDescr.setStatus('current')
if mibBuilder.loadTexts: alarmSubsysSourceDescr.setDescription("A description of the source generating the trap for the Alarm Condition. \n\t\tUsed in alarmSubSystemTrap to describe the alarm source. \n\t\tExample: 'batteryVoltageDescription'")
alarmSubsysStatusOid = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 2), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusOid.setStatus('current')
if mibBuilder.loadTexts: alarmSubsysStatusOid.setDescription('The OID (name) of the object indicating the alarm-status for which the alarm is \n\t\tgenerated.  The Status must be an INTEGER  type.\n\t\t\n\t\tExample: SP2-MIB::batteryVoltage.batteryVoltageStatus\n\t\t1.3.6.1.4.1.12148.10.3.5.2:\n\t\t\n\t\tThis object maybe polled by the SNMP management application,\n\t\tto monitor the current Status object.')
alarmSubsysStatusValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusValue.setStatus('current')
if mibBuilder.loadTexts: alarmSubsysStatusValue.setDescription('The value of the Status object of the subsystem for which the\n\t\talarm-status is generated. The OID (name) of this object is\n\t\tindicated by alarmSubsysStatusOid above.\n\t\t\n\t\t\n\t\tExample: the value of SP2-MIB::batteryVoltage.batteryVoltageStatus\n\t\tone of: error (0), normal (1), minorAlarm (2), etc.')
alarmSubsysStatusOnOff = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmSubsysStatusOnOff.setStatus('current')
if mibBuilder.loadTexts: alarmSubsysStatusOnOff.setDescription('This indicates if the abnormal condition is on or goes off.')
alarmMeasuredVarOid = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 5), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMeasuredVarOid.setStatus('current')
if mibBuilder.loadTexts: alarmMeasuredVarOid.setDescription('The OID (name) of the measured-object indicating some\n\t\tmeasurement (e.g voltage) for which the alarm is generated.\n\t\t\n\t\tExample: SP2-MIB::batteryVoltage.batteryVoltageValue\n\t\t1.3.6.1.4.1.12148.10.3.5.1\n\t\t\n\t\tThis object maybe polled by the SNMP management application,\n\t\tto monitor the current measurement.')
alarmMeasuredVarValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmMeasuredVarValue.setStatus('current')
if mibBuilder.loadTexts: alarmMeasuredVarValue.setDescription("The value of the measured-object for which the alarm-status\n\t\tis generated, for example 13 volt. The actual value is in\n\t\tunits defined by the actual variable (e.g volts). The units\n\t\tmust use INTEGER type.\n\t\t\n\t\tThe OID (name) of this object is indicated by\n\t\talarmMeasuredVarOid above.\n\t\t\n\t\tExample: Value of SP2-MIB::batteryVoltage.batteryVoltageValue\n\t\t'The measured battery voltage'")
alarmTrapCounterVarValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 1, 1, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: alarmTrapCounterVarValue.setStatus('current')
if mibBuilder.loadTexts: alarmTrapCounterVarValue.setDescription('')
alarmPowerSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 1)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmPowerSystemTrap.setStatus('current')
if mibBuilder.loadTexts: alarmPowerSystemTrap.setDescription('This Trap is sent when an alarm condition occurs in the power system.')
alarmBatteryTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 2)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmBatteryTrap.setStatus('current')
if mibBuilder.loadTexts: alarmBatteryTrap.setDescription('This Trap is sent when an alarm condition occurs in the battery subsystem.')
alarmLoadGroupTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 3)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmLoadGroupTrap.setStatus('current')
if mibBuilder.loadTexts: alarmLoadGroupTrap.setDescription('This Trap is sent when an alarm condition occurs in the Load subsystem.')
alarmMainsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 4)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmMainsTrap.setStatus('current')
if mibBuilder.loadTexts: alarmMainsTrap.setDescription('This Trap is sent when an alarm condition occurs in the Mains subsystem.')
alarmRectifierTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 5)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmRectifierTrap.setStatus('current')
if mibBuilder.loadTexts: alarmRectifierTrap.setDescription('This Trap is sent when an alarm condition occurs in the Rectifier subsystem.')
alarmControlSystemTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 6)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmControlSystemTrap.setStatus('current')
if mibBuilder.loadTexts: alarmControlSystemTrap.setDescription('This Trap is sent when an alarm condition occurs in the Control-system subsystem.')
alarmDcDcTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 7)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmDcDcTrap.setStatus('current')
if mibBuilder.loadTexts: alarmDcDcTrap.setDescription('This Trap is sent when an alarm condition occurs in the DCDC converter subsystem.')
alarmInputsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 8)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmInputsTrap.setStatus('current')
if mibBuilder.loadTexts: alarmInputsTrap.setDescription('This Trap is sent when an alarm condition occurs in the Inputs subsystem.')
alarmOutputsTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 9)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmOutputsTrap.setStatus('current')
if mibBuilder.loadTexts: alarmOutputsTrap.setDescription('This Trap is sent when an alarm condition occurs in the Outputs subsystem.')
alarmGeneratorTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 10)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmGeneratorTrap.setStatus('current')
if mibBuilder.loadTexts: alarmGeneratorTrap.setDescription('This Trap is sent when an alarm condition occurs in the Generator subsystem.')
alarmSolarChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 11)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmSolarChargerTrap.setStatus('current')
if mibBuilder.loadTexts: alarmSolarChargerTrap.setDescription('This Trap is sent when an alarm condition occurs in the SolarCharger subsystem.')
alarmWindChargerTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 12)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmWindChargerTrap.setStatus('current')
if mibBuilder.loadTexts: alarmWindChargerTrap.setDescription('This Trap is sent when an alarm condition occurs in the WindCharger subsystem.')
infoHeartBeatTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 13)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"))
if mibBuilder.loadTexts: infoHeartBeatTrap.setStatus('current')
if mibBuilder.loadTexts: infoHeartBeatTrap.setDescription('When enabled, this trap will be transmitted at regular inervals. This trap is not\n\t\tintended to be an alarm but more like some information that the system is alive and\n\t\tthe link is up.')
alarmInverterTrap = NotificationType((1, 3, 6, 1, 4, 1, 12148, 10, 1, 2, 14)).setObjects(("SP2-MIB", "alarmSubsysSourceDescr"), ("SP2-MIB", "alarmSubsysStatusOid"), ("SP2-MIB", "alarmSubsysStatusValue"), ("SP2-MIB", "alarmSubsysStatusOnOff"), ("SP2-MIB", "alarmMeasuredVarOid"), ("SP2-MIB", "alarmMeasuredVarValue"), ("SP2-MIB", "alarmTrapCounterVarValue"))
if mibBuilder.loadTexts: alarmInverterTrap.setStatus('current')
if mibBuilder.loadTexts: alarmInverterTrap.setDescription('This Trap is sent when an alarm condition occurs in the Rectifier subsystem.')
powerSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemStatus.setStatus('current')
if mibBuilder.loadTexts: powerSystemStatus.setDescription('A status value showing the overall condition of the power system.')
powerSystemType = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smartpack2", 1), ("smartpackS", 2), ("compack", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemType.setStatus('current')
if mibBuilder.loadTexts: powerSystemType.setDescription('A value showing the type of the power system, which is named after the main controller.')
powerSystemMode = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("off", 0), ("test", 1), ("boost", 2), ("float", 3), ("emergency", 4), ("startupdelay", 5), ("equalize", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemMode.setStatus('current')
if mibBuilder.loadTexts: powerSystemMode.setDescription('A summary status showing if the system is in test, boost, float, equalize, emergency or start-up delay mode\n\t\t')
powerSystemCompany = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCompany.setStatus('current')
if mibBuilder.loadTexts: powerSystemCompany.setDescription('The Copmany name (as stored in the Control Unit).')
powerSystemSite = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemSite.setStatus('current')
if mibBuilder.loadTexts: powerSystemSite.setDescription('The system/site Location details (as stored in the Control Unit).')
powerSystemModel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemModel.setStatus('current')
if mibBuilder.loadTexts: powerSystemModel.setDescription('The model/part number of the power system (as stored in the Control Unit).')
powerSystemSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemSerialNumber.setStatus('current')
if mibBuilder.loadTexts: powerSystemSerialNumber.setDescription('The serial number for the complete system.')
powerSystemInstallDate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 8), DateAndTime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemInstallDate.setStatus('current')
if mibBuilder.loadTexts: powerSystemInstallDate.setDescription("The system's Installation date (as stored in the Control Unit).")
powerSystemNominalVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSystemNominalVoltage.setStatus('current')
if mibBuilder.loadTexts: powerSystemNominalVoltage.setDescription('The nominal voltage rating. 12V/24V/48V/60V/110V/220V/380V etc. systems.')
powerSystemLongitude = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-180, 180))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLongitude.setStatus('current')
if mibBuilder.loadTexts: powerSystemLongitude.setDescription('A part of the systems global positioning data. The range +-180degrees\n\t\tLongitude lines are imaginary lines running from the north pole to the south pole. \n\t\tLongitudes are usually (WGS84) referenced from Greenwich, England where it has \n\t\tbeen established as Zero Degrees longitude. Latitude and Longitude together with\n\t\tthe Elevation can be used for automagically placing system icons on \n\t\tNMS/Sitemonitors system that support this.  ')
powerSystemLongitudeDecimal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLongitudeDecimal.setStatus('current')
if mibBuilder.loadTexts: powerSystemLongitudeDecimal.setDescription('The decimal part of dcSystemLatitude contains up to 7digits. This number is \n\t\tin 1/1000000 degree fractions or 0,0000001 degree. A part of the systems global \n\t\tpositioning data. Longitude lines are imaginary lines running from the north pole to\n\t\tthe south pole.  Longitudes are usually (WGS84) referenced from Greenwich, England where it has \n\t\tbeen established as Zero Degrees longitude. Latitude and Longitude together with\n\t\tthe Elevation can be used for automagically placing system icons on \n\t\tNMS/Sitemonitors system that support this.  ')
powerSystemLatitude = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-90, 90))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLatitude.setStatus('current')
if mibBuilder.loadTexts: powerSystemLatitude.setDescription('A part of the systems global positioning data. The latitude gives the location of a place \n\t\ton Earth (or other planetary body) north or south of the equator. Lines of Latitude has \n\t\ta range of  +-90 degrees and are the imaginary horizontal lines shown running \n\t\teast-to-west (or west to east).  Latitude and Longitude together with\n\t\tthe Elevation can be used for automagically placing system icons on \n\t\tNMS/Sitemonitors system that support this. ')
powerSystemLatitudeDecimal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemLatitudeDecimal.setStatus('current')
if mibBuilder.loadTexts: powerSystemLatitudeDecimal.setDescription('The decimal part of dcSystemLatitude contains up to 7digits. This number is \n\t\tin 1/1000000 degree fractions or 0,0000001 degree. A part of the systems global \n\t\tpositioning data.\n\t\tLines of Latitude has a range of  +-90 degrees and are the imaginary horizontal \n\t\tlines shown running east-to-west (or west to east).  Latitude and Longitude together with\n\t\tthe Elevation can be used for automagically placing system icons on \n\t\tNMS/Sitemonitors system that support this. \n\t\t\n\t\t\n\t\tLongitude lines are imaginary lines running from the north pole to\n\t\tthe south pole.\n\t\t \n\t\tLongitudes are usually (WGS84) referenced from Greenwich, England where it has \n\t\tbeen established as Zero Degrees longitude. Latitude and Longitude together with\n\t\tthe Elevation can be used for automagically placing system icons on \n\t\tNMS/Sitemonitors system that support this.  ')
powerSystemElevation = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemElevation.setStatus('current')
if mibBuilder.loadTexts: powerSystemElevation.setDescription('A part of the systems global positioning data. This is the sites height above sealevel in Meters.\n\t\tThe  Elevation together with Latituse and Longitude is used for automagically placing\n\t\tsystem icons on NMS/Sitemonitors system that support this.')
powerSystemCurrentDecimalSetting = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ampere", 0), ("deciAmpere", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCurrentDecimalSetting.setStatus('current')
if mibBuilder.loadTexts: powerSystemCurrentDecimalSetting.setDescription('A global flag telling if the current values in the system is Amperes or DeciAmpres')
powerSystemTemperatureScale = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("celcius", 0), ("fahrenheit", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemTemperatureScale.setStatus('current')
if mibBuilder.loadTexts: powerSystemTemperatureScale.setDescription('A flag telling if the temperatures values in the system is of Celcius or Fahrenheit type')
powerSystemCapacityScale = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ah", 0), ("percent", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSystemCapacityScale.setStatus('current')
if mibBuilder.loadTexts: powerSystemCapacityScale.setDescription("A flag telling if the system's battery capacity value is a percentage\n\t\tof a fully charged battery, or in AmpereHours")
mainsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsStatus.setStatus('current')
if mibBuilder.loadTexts: mainsStatus.setDescription('The overall status of mains/AC feed subsystem.')
mainsMainsFailureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMainsFailureStatus.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureStatus.setDescription('This status value shows if the number of failed phases is higher than the defined alarm level.')
mainsMainsFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureDescription.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureDescription.setDescription('A textual description of the mains phase failure monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainsMainsFailureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMainsFailureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainsMainsFailureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsMainsFailureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMainsFailureValue.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureValue.setDescription('The detected number of failed phases.')
mainsMainsFailureMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureMajorAlarmLevel.setDescription('The major alarm limit')
mainsMainsFailureMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMainsFailureMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMainsFailureMinorAlarmLevel.setDescription('The minor alarm limit')
mainsNumberOfPhases = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsNumberOfPhases.setStatus('current')
if mibBuilder.loadTexts: mainsNumberOfPhases.setDescription('This value showing the number of phases of the mains subsystem.')
mainsVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4), )
if mibBuilder.loadTexts: mainsVoltageTable.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageTable.setDescription('This table contains information about mains voltage monitor')
mainsVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1), ).setIndexNames((0, "SP2-MIB", "mainsVoltageIndex"))
if mibBuilder.loadTexts: mainsVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageEntry.setDescription('')
mainsVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: mainsVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageIndex.setDescription('Index used for navigating the rows 1..12  of mainsVoltageTable')
mainsVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageStatus.setDescription('The status of the measured mains voltage.')
mainsVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageDescription.setDescription('A textual description of the mains voltage monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
mainsVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsVoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
mainsVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsVoltageValue.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageValue.setDescription('The value of the measured mains voltage.')
mainsVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageMajorHighLevel.setDescription('The major high alarm limit')
mainsVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageMinorHighLevel.setDescription('The minor high alarm limit')
mainsVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageMinorLowLevel.setDescription('The minor low alarm limit')
mainsVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsVoltageMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsVoltageMajorLowLevel.setDescription('The major low alarm limit')
mainsMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorsNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorsNumberOfUnits.setDescription('This is the number of AC Mains Monitor CAN Nodes installed in the system.')
mainsMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2), )
if mibBuilder.loadTexts: mainsMonitorsTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorsTable.setDescription('This table contains the number of voltage, current and frequency measurements in each AC Mains Monitor')
mainsMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorsEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorsEntry.setDescription('')
mainsMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mainsMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorIndex.setDescription('Index used for navigating the rows of mainsMonitorsTable\n\t\tThe size of the table is defined by the system  ')
mainsMonitorNumberOfVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfVoltages.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorNumberOfVoltages.setDescription('The number of voltage measurements in the AC Mains Monitor')
mainsMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorNumberOfCurrents.setDescription('The number of current measurements in the AC Mains Monitor')
mainsMonitorNumberOfFrequencies = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorNumberOfFrequencies.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorNumberOfFrequencies.setDescription('The number of frequency measurements in the AC Mains Monitor')
mainsMonitorVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3), )
if mibBuilder.loadTexts: mainsMonitorVoltageTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageTable.setDescription('This table contains information about mains voltage in AC Mains Monitor')
mainsMonitorVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorPhaseIndex"))
if mibBuilder.loadTexts: mainsMonitorVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageEntry.setDescription('')
mainsMonitorPhaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: mainsMonitorPhaseIndex.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorPhaseIndex.setDescription('Index used for navigating the rows 1..3  of mainsMonitorVolatgeTable')
mainsMonitorVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageStatus.setDescription('The status of the measured mains voltage in AC Mains Monitor.')
mainsMonitorVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageDescription.setDescription('A textual description of the mains voltage in AC Mains Monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainsMonitorVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorVoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
mainsMonitorVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsMonitorVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorVoltageValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageValue.setDescription('The value of the measured mains voltage in AC Mains Monitor.')
mainsMonitorVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageMajorHighLevel.setDescription('The major high alarm limit')
mainsMonitorVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageMinorHighLevel.setDescription('The minor high alarm limit')
mainsMonitorVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageMinorLowLevel.setDescription('The minor low alarm limit')
mainsMonitorVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorVoltageMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorVoltageMajorLowLevel.setDescription('The major low alarm limit')
mainsMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4), )
if mibBuilder.loadTexts: mainsMonitorCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentTable.setDescription('This table contains information about mains current in AC Mains Monitor')
mainsMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorPhaseIndex"))
if mibBuilder.loadTexts: mainsMonitorCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentEntry.setDescription('')
mainsMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentStatus.setDescription('The status of the measured mains current in AC Mains Monitor.')
mainsMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentDescription.setDescription('A textual description of the mains current in AC Mains Monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainsMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
mainsMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorCurrentValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentValue.setDescription('The value of the measured mains current in AC Mains Monitor.')
mainsMonitorCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentMajorHighLevel.setDescription('The major high alarm limit')
mainsMonitorCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorCurrentMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorCurrentMinorHighLevel.setDescription('The minor high alarm limit')
mainsMonitorFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5), )
if mibBuilder.loadTexts: mainsMonitorFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyTable.setDescription('This table contains information about mains frequency in AC Mains Monitor')
mainsMonitorFrequencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorFrequencyEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyEntry.setDescription('')
mainsMonitorFrequencyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorFrequencyStatus.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyStatus.setDescription('The status of the measured mains frequency in AC Mains Monitor.')
mainsMonitorFrequencyDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyDescription.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyDescription.setDescription('A textual description of the mains frequency in AC Mains Monitor. This is stored in the system\n\t\t controller \n\t\tand can be changed by the user.  ')
mainsMonitorFrequencyTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorFrequencyTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
mainsMonitorFrequencyAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsMonitorFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorFrequencyValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyValue.setDescription('The value of the measured mains frequency in AC Mains Monitor.')
mainsMonitorFrequencyMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorHighLevel.setDescription('The major high alarm limit')
mainsMonitorFrequencyMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorHighLevel.setDescription('The minor high alarm limit')
mainsMonitorFrequencyMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyMinorLowLevel.setDescription('The minor low alarm limit')
mainsMonitorFrequencyMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 5, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorFrequencyMajorLowLevel.setDescription('The major low alarm limit')
mainsMonitorEnergyLogAccumulatedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedTable.setDescription('This table contains the accumulated energy consumption measured in AC Mains Monitor')
mainsMonitorEnergyLogAccumulatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulatedEntry.setDescription('')
mainsMonitorEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogAccumulated.setDescription('The accumulated energy consumption value')
mainsMonitorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in hourly energy log')
mainsMonitorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursTable.setDescription('This table contains energy consumption values logged every hour in AC Mains Monitor.')
mainsMonitorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursEntry.setDescription('')
mainsMonitorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of mainsMonitorEnergyLogLastHoursTable')
mainsMonitorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastHoursValue.setDescription('Energy consumption value logged every hour in AC Mains Monitor.')
mainsMonitorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily energy log')
mainsMonitorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysTable.setDescription('This table contains energy consumption values logged every day in AC Mains Monitor.')
mainsMonitorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysEntry.setDescription('')
mainsMonitorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of mainsMonitorEnergyLogLastDaysTable')
mainsMonitorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastDaysValue.setDescription('Energy consumption value logged every day in AC Mains Monitor.')
mainsMonitorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weekly energy log')
mainsMonitorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12), )
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksTable.setDescription('This table contains energy consumption values logged every week in AC Mains Monitor.')
mainsMonitorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1), ).setIndexNames((0, "SP2-MIB", "mainsMonitorIndex"), (0, "SP2-MIB", "mainsMonitorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksEntry.setDescription('')
mainsMonitorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of mainsMonitorEnergyLogLastWeeksTable')
mainsMonitorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 5, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorEnergyLogLastWeeksValue.setDescription('Energy consumption value logged every week in AC Mains Monitor.')
mainsOutageTotal = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageTotal.setStatus('current')
if mibBuilder.loadTexts: mainsOutageTotal.setDescription('This is the total mains outage time measured in hours.')
mainsOutageLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily mains outage log.')
mainsOutageLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3), )
if mibBuilder.loadTexts: mainsOutageLogDaysTable.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogDaysTable.setDescription('This table contains daily mains outage time log.')
mainsOutageLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogDaysIndex"))
if mibBuilder.loadTexts: mainsOutageLogDaysEntry.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogDaysEntry.setDescription('')
mainsOutageLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogDaysIndex.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogDaysIndex.setDescription('Index used for navigating the rows 1..52  of mainsOutageLogDaysTable')
mainsOutageLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogDaysValue.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogDaysValue.setDescription('Mains outage time value in minutes, logged every day.')
mainsOutageLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weekly mains outage time log.')
mainsOutageLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5), )
if mibBuilder.loadTexts: mainsOutageLogWeeksTable.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogWeeksTable.setDescription('This table contains weekly mains outage time log.')
mainsOutageLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogWeeksIndex"))
if mibBuilder.loadTexts: mainsOutageLogWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogWeeksEntry.setDescription('')
mainsOutageLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogWeeksIndex.setDescription('Index used for navigating the rows 1..52  of mainsOutageLogWeeksTable')
mainsOutageLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogWeeksValue.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogWeeksValue.setDescription('Mains outage time value in hours, logged every week.')
mainsOutageLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogMonthsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogMonthsNumberOfEntries.setDescription('This is the maximal number of entries stored in monthly mains outage time log.')
mainsOutageLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7), )
if mibBuilder.loadTexts: mainsOutageLogMonthsTable.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogMonthsTable.setDescription('This table contains monthly mains outage time log.')
mainsOutageLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1), ).setIndexNames((0, "SP2-MIB", "mainsOutageLogMonthsIndex"))
if mibBuilder.loadTexts: mainsOutageLogMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogMonthsEntry.setDescription('')
mainsOutageLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsOutageLogMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogMonthsIndex.setDescription('Index used for navigating the rows 1..52  of mainsOutageLogMonthsTable')
mainsOutageLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 6, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsOutageLogMonthsValue.setStatus('current')
if mibBuilder.loadTexts: mainsOutageLogMonthsValue.setDescription('Mains outage time value in hours, logged every month.')
mainsNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: mainsNumberOfGroups.setDescription('This value showing the number of groups of the mains subsystem.')
mainsGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8), )
if mibBuilder.loadTexts: mainsGroupsTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupsTable.setDescription('This table contains the status of mains group and number of phases in each group.')
mainsGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupsEntry.setDescription('')
mainsGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: mainsGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mainsGroupIndex.setDescription('Index used for navigating the rows 1..10  of mainsGroupTable')
mainsGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupStatus.setStatus('current')
if mibBuilder.loadTexts: mainsGroupStatus.setDescription('The status of mains group.')
mainsGroupNumberOfPhases = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 8, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupNumberOfPhases.setStatus('current')
if mibBuilder.loadTexts: mainsGroupNumberOfPhases.setDescription('This value showing the number of phases of the mains group subsystem.')
mainsGroupMainsFailureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9), )
if mibBuilder.loadTexts: mainsGroupMainsFailureTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureTable.setDescription('This table contains information about mains failure monitor of mains group')
mainsGroupMainsFailureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupMainsFailureEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureEntry.setDescription('')
mainsGroupMainsFailureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupMainsFailureStatus.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureStatus.setDescription('This status value shows if the number of failed phases is higher than the defined alarm level for the mains group')
mainsGroupMainsFailureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureDescription.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureDescription.setDescription('A textual description of the mains group phase failure monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainsGroupMainsFailureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsGroupMainsFailureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainsGroupMainsFailureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsGroupMainsFailureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupMainsFailureValue.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureValue.setDescription('The detected number of failed phases in the mains group.')
mainsGroupMainsFailureMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureMajorAlarmLevel.setDescription('The major alarm limit')
mainsGroupMainsFailureMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupMainsFailureMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupMainsFailureMinorAlarmLevel.setDescription('The minor alarm limit')
mainsGroupVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10), )
if mibBuilder.loadTexts: mainsGroupVoltageTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageTable.setDescription('This table contains information about mains voltage monitors for mains group')
mainsGroupVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupVoltageIndex"))
if mibBuilder.loadTexts: mainsGroupVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageEntry.setDescription('')
mainsGroupVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12)))
if mibBuilder.loadTexts: mainsGroupVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageIndex.setDescription('Index used for navigating the rows 1..12  of mainsGroupVoltageTable')
mainsGroupVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageStatus.setDescription('The status of the measured mains voltage of the mains group.')
mainsGroupVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageDescription.setDescription('A textual description of the mains voltage monitor of the mains group. This is stored in the system controller\n\t\tand can be changed by the user.  ')
mainsGroupVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsGroupVoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
mainsGroupVoltageAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsGroupVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupVoltageValue.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageValue.setDescription('The value of the measured mains voltage in the mains group.')
mainsGroupVoltageMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageMajorHighLevel.setDescription('The major high alarm limit')
mainsGroupVoltageMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageMinorHighLevel.setDescription('The minor high alarm limit')
mainsGroupVoltageMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageMinorLowLevel.setDescription('The minor low alarm limit')
mainsGroupVoltageMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 10, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsGroupVoltageMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainsGroupVoltageMajorLowLevel.setDescription('The major low alarm limit')
mainsGroupOutageLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11), )
if mibBuilder.loadTexts: mainsGroupOutageLogTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogTable.setDescription(' This table contains total mains outage of the mains group and number of entries in each log table.')
mainsGroupOutageLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogEntry.setDescription('')
mainsGroupOutageTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageTotal.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageTotal.setDescription('This is the total mains outage time measured in hours in the mains group.')
mainsGroupOutageLogDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily mains outage log.')
mainsGroupOutageLogWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weekly mains outage time log.')
mainsGroupOutageLogMonthsNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsNumberOfEntries.setDescription('This is the maximal number of entries stored in monthly mains outage time log.')
mainsGroupOutageLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12), )
if mibBuilder.loadTexts: mainsGroupOutageLogDaysTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogDaysTable.setDescription('This table contains daily mains outage time log of mains group.')
mainsGroupOutageLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogDaysIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogDaysEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogDaysEntry.setDescription('')
mainsGroupOutageLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogDaysIndex.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogDaysIndex.setDescription('Index used for navigating the rows 1..52  of mainsGroupOutageLogDaysTable')
mainsGroupOutageLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogDaysValue.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogDaysValue.setDescription('Mains outage time value in minutes of each mains group, logged every day.')
mainsGroupOutageLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13), )
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksTable.setDescription('This table contains weekly mains outage time log of mains group.')
mainsGroupOutageLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogWeeksIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksEntry.setDescription('')
mainsGroupOutageLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksIndex.setDescription('Index used for navigating the rows 1..52  of mainsGroupOutageLogWeeksTable')
mainsGroupOutageLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksValue.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogWeeksValue.setDescription('Mains outage time value in hours of each mains group, logged every week.')
mainsGroupOutageLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14), )
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsTable.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsTable.setDescription('This table contains monthly mains outage time log of mains group.')
mainsGroupOutageLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1), ).setIndexNames((0, "SP2-MIB", "mainsGroupIndex"), (0, "SP2-MIB", "mainsGroupOutageLogMonthsIndex"))
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsEntry.setDescription('')
mainsGroupOutageLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsIndex.setDescription('Index used for navigating the rows 1..52  of mainsGroupOutageLogMonthsTable')
mainsGroupOutageLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 3, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsValue.setStatus('current')
if mibBuilder.loadTexts: mainsGroupOutageLogMonthsValue.setDescription('Mains outage time value in hours of each mains group, logged every month.')
generatorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorStatus.setStatus('current')
if mibBuilder.loadTexts: generatorStatus.setDescription('The overall status of generator subsystem.')
generatorFailStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFailStatus.setStatus('current')
if mibBuilder.loadTexts: generatorFailStatus.setDescription('The status of generator failure monitor.')
generatorActivation = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorActivation.setStatus('current')
if mibBuilder.loadTexts: generatorActivation.setDescription('Indicate if the generator run output signal is activated.')
generatorDischargeValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorDischargeValue.setStatus('current')
if mibBuilder.loadTexts: generatorDischargeValue.setDescription('This is the present discharge value in percentage of total capacity.')
generatorMainsDelay = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorMainsDelay.setStatus('current')
if mibBuilder.loadTexts: generatorMainsDelay.setDescription('Elapsing time of mains failure.')
generatorChargeTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorChargeTime.setStatus('current')
if mibBuilder.loadTexts: generatorChargeTime.setDescription('Elapsing time of charging with generator running.')
generatorCapacityControlledStartStopEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityControlledStartStopEnable.setStatus('current')
if mibBuilder.loadTexts: generatorCapacityControlledStartStopEnable.setDescription('Battery charge/discharge level control of starting and stopping of generator ')
generatorCapacityStartOnDischargeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityStartOnDischargeLimit.setStatus('current')
if mibBuilder.loadTexts: generatorCapacityStartOnDischargeLimit.setDescription('When the generatorCapacityControlled is enabled, the generator is started \n\t\twhen the remaining battery capacity drops below this limit in percentage of the total capacity.')
generatorCapacityStopOnChargeLimit = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCapacityStopOnChargeLimit.setStatus('current')
if mibBuilder.loadTexts: generatorCapacityStopOnChargeLimit.setDescription('When the generatorCapacityControlled is enabled, the generator is stopped \n\t\twhen the remaining battery capacity is greater than this limit in percentage of the total capacity.')
generatorCurrentLimitControlledStopEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopEnable.setStatus('current')
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopEnable.setDescription('Enables the generator to stop when the charge current drops below generatorCurrentLimitControlledStopValue. ')
generatorCurrentLimitControlledStopValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopValue.setStatus('current')
if mibBuilder.loadTexts: generatorCurrentLimitControlledStopValue.setDescription('Generator stops when the charge current drop drops below this level. ')
generatorVoltageControlledStartEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlledStartEnable.setStatus('current')
if mibBuilder.loadTexts: generatorVoltageControlledStartEnable.setDescription('Enable/disable voltage controlled generator activation.')
generatorVoltageControlStartVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlStartVoltage.setStatus('current')
if mibBuilder.loadTexts: generatorVoltageControlStartVoltage.setDescription('The voltage limit to start generator.')
generatorVoltageControlStopAfter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorVoltageControlStopAfter.setStatus('current')
if mibBuilder.loadTexts: generatorVoltageControlStopAfter.setDescription('A time delay for stopping generator when generator is activated by voltage.')
generatorDailyRunEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunEnable.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunEnable.setDescription('Enable/disable generator daily run function.')
generatorDailyRunSetupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16), )
if mibBuilder.loadTexts: generatorDailyRunSetupTable.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunSetupTable.setDescription('This table contains configurations of generator daily run.')
generatorDailyRunSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1), ).setIndexNames((0, "SP2-MIB", "generatorDailyRunDayIndex"))
if mibBuilder.loadTexts: generatorDailyRunSetupEntry.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunSetupEntry.setDescription('')
generatorDailyRunDayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7))))
if mibBuilder.loadTexts: generatorDailyRunDayIndex.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunDayIndex.setDescription('Index used for navigating the rows 1..7  of generatorDailyRunSetupTable')
generatorDailyRunStartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunStartHour.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunStartHour.setDescription('Generator daily starting time.')
generatorDailyRunStopHour = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 16, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorDailyRunStopHour.setStatus('current')
if mibBuilder.loadTexts: generatorDailyRunStopHour.setDescription('Generator daily stopping time.')
generatorMonthlyRunEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunEnable.setStatus('current')
if mibBuilder.loadTexts: generatorMonthlyRunEnable.setDescription('Enable/disable generator monthly run function.')
generatorMonthlyRunStartTime = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartTime.setStatus('current')
if mibBuilder.loadTexts: generatorMonthlyRunStartTime.setDescription('Generator monthly run starting time.')
generatorMonthlyRunStartDayinMonth1 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth1.setStatus('current')
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth1.setDescription('Generator monthly run starting day #1.')
generatorMonthlyRunStartDayinMonth2 = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth2.setStatus('current')
if mibBuilder.loadTexts: generatorMonthlyRunStartDayinMonth2.setDescription('Generator monthly run starting day #2.')
generatorTankNumberOfTanks = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankNumberOfTanks.setStatus('current')
if mibBuilder.loadTexts: generatorTankNumberOfTanks.setDescription('Number of fuel tanks.')
generatorTankTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22), )
if mibBuilder.loadTexts: generatorTankTable.setStatus('current')
if mibBuilder.loadTexts: generatorTankTable.setDescription('This table contains information about generator fuel tanks.')
generatorTankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"))
if mibBuilder.loadTexts: generatorTankEntry.setStatus('current')
if mibBuilder.loadTexts: generatorTankEntry.setDescription('')
generatorTankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: generatorTankIndex.setStatus('current')
if mibBuilder.loadTexts: generatorTankIndex.setDescription('Index used for navigating the rows 1..2  of generatorTankTable')
generatorTankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankStatus.setStatus('current')
if mibBuilder.loadTexts: generatorTankStatus.setDescription('The status of the measured fuel level in tank.')
generatorTankDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankDescription.setStatus('current')
if mibBuilder.loadTexts: generatorTankDescription.setDescription('A textual description of the fuel level monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
generatorTankTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: generatorTankTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: generatorTankTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
generatorTankEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankEnable.setStatus('current')
if mibBuilder.loadTexts: generatorTankEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
generatorTankValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorTankValue.setStatus('current')
if mibBuilder.loadTexts: generatorTankValue.setDescription('The value of the measured fuel level.')
generatorTankMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: generatorTankMajorHighLevel.setDescription('The major high alarm limit')
generatorTankMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: generatorTankMinorHighLevel.setDescription('The minor high alarm limit')
generatorTankMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: generatorTankMinorLowLevel.setDescription('The minor low alarm limit')
generatorTankMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 22, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: generatorTankMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: generatorTankMajorLowLevel.setDescription('The major low alarm limit')
generatorEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogAccumulated.setDescription('This is the accumulated energy delivered through rectifiers from generator.')
generatorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in generator hourly energy log.')
generatorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3), )
if mibBuilder.loadTexts: generatorEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of generator.')
generatorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastHoursEntry.setDescription('')
generatorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of generatorEnergyLogLastHoursTable')
generatorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
generatorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in generator daily energy log.')
generatorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5), )
if mibBuilder.loadTexts: generatorEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastDaysTable.setDescription('This table contains daily energy log of generator.')
generatorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastDaysEntry.setDescription('')
generatorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of generatorEnergyLogLastDaysTable')
generatorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastDaysValue.setDescription('Energy value logged every day')
generatorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in generator weekly energy log.')
generatorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7), )
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of generator.')
generatorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksEntry.setDescription('')
generatorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of generatorEnergyLogLastWeeksTable')
generatorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 23, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: generatorEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
generatorRunHoursTotalHours = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursTotalHours.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursTotalHours.setDescription('This is the total generator running hours.')
generatorRunHoursLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in generator daily running hours log.')
generatorRunHoursLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3), )
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysTable.setDescription('generator running time in minutes')
generatorRunHoursLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysEntry.setDescription('')
generatorRunHoursLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of generatorRunHoursLogLastDaysTable')
generatorRunHoursLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastDaysValue.setDescription('Generator running time in minutes, logged every day.')
generatorRunHoursLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in generator weekly running hours log.')
generatorRunHoursLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5), )
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksTable.setDescription('generator running time in hours')
generatorRunHoursLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksEntry.setDescription('')
generatorRunHoursLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of generatorRunHoursLogLastWeeksTable')
generatorRunHoursLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastWeeksValue.setDescription('Generator running time in hours, logged every week.')
generatorRunHoursLogLastMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsNumberOfEntries.setDescription('This is the maximal number of entries stored in generator monthly running hours log.')
generatorRunHoursLogLastMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7), )
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsTable.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsTable.setDescription('generator running time in hours')
generatorRunHoursLogLastMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorRunHoursLogLastMonthsIndex"))
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsEntry.setDescription('')
generatorRunHoursLogLastMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsIndex.setDescription('Index used for navigating the rows 1..52  of generatorRunHoursLogLastMonthsTable')
generatorRunHoursLogLastMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 24, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsValue.setStatus('current')
if mibBuilder.loadTexts: generatorRunHoursLogLastMonthsValue.setDescription('Generator running time in hours, logged every month.')
generatorFuelConsumptionTotalUsedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1), )
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedTable.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedTable.setDescription('This table contains total fuel consumption for each tank.')
generatorFuelConsumptionTotalUsedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedEntry.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsedEntry.setDescription('')
generatorFuelConsumptionTotalUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsed.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionTotalUsed.setDescription('Total fuel consumption value.')
generatorFuelConsumptionLogLastDaysNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysNoOfEntries.setDescription('This is the maximal number of entries stored in generator daily fuel consumption log.')
generatorFuelConsumptionLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysTable.setDescription('This table contains generator daily fuel consumption log.')
generatorFuelConsumptionLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastDaysIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysEntry.setDescription('')
generatorFuelConsumptionLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of generatorFuelConsumptionLogLastDaysTable')
generatorFuelConsumptionLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastDaysValue.setDescription('Generator fuel consumption value, logged every day.')
generatorFuelConsumptionLogLastWeeksNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksNoOfEntries.setDescription('This is the maximal number of entries stored in generator weekly fuel consumption log.')
generatorFuelConsumptionLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksTable.setDescription('This table contains generator weekly fuel consumption log.')
generatorFuelConsumptionLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastWeeksIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksEntry.setDescription('')
generatorFuelConsumptionLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of generatorFuelConsumptionLogLastWeeksTable')
generatorFuelConsumptionLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastWeeksValue.setDescription('Generator fuel consumption value, logged every week.')
generatorFuelConsumptionLogLastMonthsNoOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsNoOfEntries.setDescription('This is the maximal number of entries stored in generator hourly fuel consumption log.')
generatorFuelConsumptionLogLastMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7), )
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsTable.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsTable.setDescription('This table contains generator hourly fuel consumption log.')
generatorFuelConsumptionLogLastMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1), ).setIndexNames((0, "SP2-MIB", "generatorTankIndex"), (0, "SP2-MIB", "generatorFuelConsumptionLogLastMonthsIndex"))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsEntry.setDescription('')
generatorFuelConsumptionLogLastMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsIndex.setDescription('Index used for navigating the rows 1..52  of generatorFuelConsumptionLogLastHoursTable')
generatorFuelConsumptionLogLastMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 4, 25, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsValue.setStatus('current')
if mibBuilder.loadTexts: generatorFuelConsumptionLogLastMonthsValue.setDescription('Generator fuel consumption value, logged every hour.')
rectifiersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersStatus.setStatus('current')
if mibBuilder.loadTexts: rectifiersStatus.setDescription('The overall status of rectifier subsystem.')
rectifiersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentStatus.setDescription('The status of the measured total rectifier current.')
rectifiersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentDescription.setDescription('A textual description of the total rectifier current monitor. This is stored in the system controller\n\t\tand can be changed by the user')
rectifiersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifiersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifiersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCurrentValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentValue.setDescription('The value of the measured total rectifier current.')
rectifiersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentMajorAlarmLevel.setDescription('The major alarm limit')
rectifiersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
rectifiersCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityStatus.setDescription('The status of the measured used rectifier capacity.')
rectifiersCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityDescription.setDescription('A textual description of the used rectifier capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user')
rectifiersCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifiersCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifiersCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersCapacityValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityValue.setDescription('The used rectifier capacity value presented in percentage of the total installed rectifier capacity.')
rectifiersCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityMajorAlarmLevel.setDescription('The major alarm limit')
rectifiersCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
rectifiersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersErrorStatus.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
rectifiersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorDescription.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorDescription.setDescription('A textual description of the rectifier error monitor. This is stored in the system controller\n\t\tand can be changed by the user')
rectifiersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifiersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorEnable.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifiersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersErrorValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorValue.setDescription('The number of failed rectifiers.')
rectifiersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorMajorAlarmLevel.setDescription('The major alarm limit')
rectifiersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersErrorMinorAlarmLevel.setDescription('The minor alarm limit')
rectifiersNumberOfRectifiers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersNumberOfRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectifiersNumberOfRectifiers.setDescription('Number of installed rectifiers.')
rectifierTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6), )
if mibBuilder.loadTexts: rectifierTable.setStatus('current')
if mibBuilder.loadTexts: rectifierTable.setDescription('This table shows the information of each rectifier installed in the system.')
rectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1), ).setIndexNames((0, "SP2-MIB", "rectifierIndex"))
if mibBuilder.loadTexts: rectifierEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierEntry.setDescription('')
rectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: rectifierIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierIndex.setDescription('Index used for navigating the rows 1..100  of rectifierTable')
rectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierStatus.setDescription('The overall status of rectifier.')
rectifierOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: rectifierOutputCurrentValue.setDescription('The output current value of rectifier.')
rectifierInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: rectifierInputVoltageValue.setDescription('The input voltage value of rectifier.')
rectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierType.setStatus('current')
if mibBuilder.loadTexts: rectifierType.setDescription('Type of rectifier')
rectifierHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: rectifierHwPartNumber.setDescription('Hardware part number of rectifier')
rectifierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierHwVersion.setStatus('current')
if mibBuilder.loadTexts: rectifierHwVersion.setDescription('Hardware version number of rectifier')
rectifierSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: rectifierSwPartNumber.setDescription('Part number of secondary software in rectifier')
rectifierSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierSwVersion.setStatus('current')
if mibBuilder.loadTexts: rectifierSwVersion.setDescription('Version number of secondary software in rectifier')
rectifiersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogAccumulated.setDescription('This is the accumulated energy delivered from rectifiers.')
rectifiersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier hourly energy log.')
rectifiersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of rectifiers.')
rectifiersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursEntry.setDescription('')
rectifiersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of rectifiersEnergyLogLastHoursTable')
rectifiersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
rectifiersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier daily energy log.')
rectifiersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysTable.setDescription('This table contains daily energy log of rectifiers.')
rectifiersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysEntry.setDescription('')
rectifiersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of rectifiersEnergyLogLastDaysTable')
rectifiersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
rectifiersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier weekly energy log.')
rectifiersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7), )
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of rectifiers.')
rectifiersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "rectifiersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksEntry.setDescription('')
rectifiersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of rectifiersEnergyLogLastWeekTable')
rectifiersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
rectifiersNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: rectifiersNumberOfGroups.setDescription('Number of rectifier groups')
rectifierGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9), )
if mibBuilder.loadTexts: rectifierGroupsTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupsTable.setDescription('This table contains status and the number of installed rectifiers of each rectifier groups.')
rectifierGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupsEntry.setDescription('')
rectifierGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: rectifierGroupIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupIndex.setDescription('Index used for navigating the rows 1..10  of rectifierGroupsTable')
rectifierGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupStatus.setDescription('The status of each rectifier group.')
rectifierGroupNumberOfRectifiers = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupNumberOfRectifiers.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupNumberOfRectifiers.setDescription('Number of installed rectifiers in each rectifier groups')
rectifierGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10), )
if mibBuilder.loadTexts: rectifierGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentTable.setDescription('This table contains information about the total rectifier current of each rectifier groups, which is calculated \n\t\t by summing up current from each rectifier in a rectifier group.')
rectifierGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentEntry.setDescription('')
rectifierGroupCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentStatus.setDescription('The status of the measured total rectifier current of the rectifier group')
rectifierGroupCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentDescription.setDescription('A textual description of the total rectifier current monitor of a rectifier group. This is stored in the system controller\n\t\tand can be changed by the user')
rectifierGroupCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifierGroupCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifierGroupCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCurrentValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentValue.setDescription('The value of the measured total rectifier current of each rectifier group.')
rectifierGroupCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentMajorAlarmLevel.setDescription('The major alarm limit')
rectifierGroupCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
rectifierGroupCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11), )
if mibBuilder.loadTexts: rectifierGroupCapacityTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityTable.setDescription(' This table contains information about the used rectifier capacity of each rectifier group.')
rectifierGroupCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityEntry.setDescription('')
rectifierGroupCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityStatus.setDescription('The status of the measured used rectifier capacity of each rectifier group')
rectifierGroupCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityDescription.setDescription('A textual description of the used rectifier capacity monitor of each rectifier group. This is stored in the system controller\n\t\tand can be changed by the user')
rectifierGroupCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifierGroupCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifierGroupCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupCapacityValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityValue.setDescription('The used rectifier capacity value presented in percentage of the total installed rectifier capacity of each rectifier group.')
rectifierGroupCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityMajorAlarmLevel.setDescription('The major alarm limit')
rectifierGroupCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 11, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
rectifierGroupErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12), )
if mibBuilder.loadTexts: rectifierGroupErrorTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorTable.setDescription(' This table contains information about the rectifier error monitor of each rectifier group.')
rectifierGroupErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupErrorEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorEntry.setDescription('')
rectifierGroupErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupErrorStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
rectifierGroupErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorDescription.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorDescription.setDescription('A textual description of the rectifier error monitor of each rectifier group. This is stored in the system controller\n\t\tand can be changed by the user')
rectifierGroupErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifierGroupErrorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifierGroupErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupErrorValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorValue.setDescription('The number of failed rectifiers of each rectifier group.')
rectifierGroupErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorMajorAlarmLevel.setDescription('The major alarm limit')
rectifierGroupErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupErrorMinorAlarmLevel.setDescription('The minor alarm limit')
rectifierGroupRectifierTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13), )
if mibBuilder.loadTexts: rectifierGroupRectifierTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierTable.setDescription('This table shows the information of each rectifier installed in each of the rectifier group in the system.')
rectifierGroupRectifierEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupRectifierIndex"))
if mibBuilder.loadTexts: rectifierGroupRectifierEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierEntry.setDescription('')
rectifierGroupRectifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: rectifierGroupRectifierIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierIndex.setDescription('Index used for navigating the rows 1..100  of rectifierGroupRectifierTable')
rectifierGroupRectifierStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierStatus.setDescription('The overall status of rectifier.')
rectifierGroupRectifierOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierOutputCurrentValue.setDescription('The output current value of rectifier.')
rectifierGroupRectifierInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierInputVoltageValue.setDescription('The input voltage value of rectifier.')
rectifierGroupRectifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierType.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierType.setDescription('Type of rectifier')
rectifierGroupRectifierHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierHwPartNumber.setDescription('Hardware part number of rectifier')
rectifierGroupRectifierHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierHwVersion.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierHwVersion.setDescription('Hardware version number of rectifier')
rectifierGroupRectifierSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierSwPartNumber.setDescription('Part number of secondary software in rectifier')
rectifierGroupRectifierSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 13, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupRectifierSwVersion.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupRectifierSwVersion.setDescription('Version number of secondary software in rectifier')
rectifierGroupEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogTable.setDescription(" This branch contains information about rectifiers' energy logs of each rectifier group.")
rectifierGroupEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogEntry.setDescription('')
rectifierGroupEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogAccumulated.setDescription('This is the accumulated energy delivered from rectifiers of each rectifier group.')
rectifierGroupEnergyLogLastHoursNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier group hourly energy log.')
rectifierGroupEnergyLogLastDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier group daily energy log.')
rectifierGroupEnergyLogLastWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in rectifier group weekly energy log.')
rectifierGroupEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of each rectifier group')
rectifierGroupEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursEntry.setDescription('')
rectifierGroupEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of rectifierGroupEnergyLogLastHoursTable')
rectifierGroupEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
rectifierGroupEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysTable.setDescription('This table contains daily energy log of each rectifier group')
rectifierGroupEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysEntry.setDescription('')
rectifierGroupEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of rectifierGroupEnergyLogLasDaysTable')
rectifierGroupEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
rectifierGroupEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17), )
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of each rectifier group')
rectifierGroupEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"), (0, "SP2-MIB", "rectifierGroupEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksEntry.setDescription('')
rectifierGroupEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of rectifierGroupEnergyLogLastWeeksTable')
rectifierGroupEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
rectifiersTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureStatus.setDescription('The state of the rectifier temperature can be either one of the defined enumerated values')
rectifiersTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureDescription.setDescription('A textual description of the rectifier temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
rectifiersTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifiersTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifiersTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifiersTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifiersTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureValue.setDescription('The highest value of the rectifier temperature measurements.\n\t\tDepending on the global setting in the Control unit, this value will be presented in Celsius\n\t\tor Fahrenheit.')
rectifiersTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureMajorHighLevel.setDescription('The major high alarm limit')
rectifiersTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
rectifiersTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
rectifiersTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 5, 18, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifiersTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: rectifiersTemperatureMajorLowLevel.setDescription('The major low alarm limit')
rectifierGroupTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19), )
if mibBuilder.loadTexts: rectifierGroupTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureTable.setDescription('This table contains information about the highest rectifier temperature of each rectifier groups, which is calculated \n\t\t by summing up current from each rectifier in a rectifier group.')
rectifierGroupTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1), ).setIndexNames((0, "SP2-MIB", "rectifierGroupIndex"))
if mibBuilder.loadTexts: rectifierGroupTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureEntry.setDescription('')
rectifierGroupTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureStatus.setDescription('The status of the measured highest rectifier temperature of the rectifier group')
rectifierGroupTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureDescription.setDescription('A textual description of the highest rectifier temperature monitor of a rectifier group. This is stored in the system controller\n\t\tand can be changed by the user')
rectifierGroupTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: rectifierGroupTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
rectifierGroupTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
rectifierGroupTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rectifierGroupTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureValue.setDescription('The value of the measured highest rectifier temperature of each rectifier group.')
rectifierGroupTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorHighLevel.setDescription('The major high alarm limit')
rectifierGroupTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
rectifierGroupTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
rectifierGroupTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 5, 19, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: rectifierGroupTemperatureMajorLowLevel.setDescription('The major low alarm limit')
dcdcNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: dcdcNumberOfGroups.setDescription('Number of dcdc groups')
dcdcGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2), )
if mibBuilder.loadTexts: dcdcGroupsTable.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupsTable.setDescription('This table contains information about dcdc groups.')
dcdcGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupsEntry.setDescription('')
dcdcGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dcdcGroupIndex.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupIndex.setDescription('')
dcdcGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcGroupStatus.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupStatus.setDescription('The overall status of dcdc group.')
dcdcGroupNumberOfDcdcConverters = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcGroupNumberOfDcdcConverters.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupNumberOfDcdcConverters.setDescription('Number of installed dcdc converters.')
dcdcGroupOutputVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcGroupOutputVoltage.setStatus('current')
if mibBuilder.loadTexts: dcdcGroupOutputVoltage.setDescription('Output voltage of dcdc converters')
dcdcNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: dcdcNumberOfCurrents.setDescription('Number of dcdc currents')
dcdcNumberOfCapacities = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfCapacities.setStatus('current')
if mibBuilder.loadTexts: dcdcNumberOfCapacities.setDescription('Number of dcdc capacities')
dcdcNumberOfAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcNumberOfAlarms.setStatus('current')
if mibBuilder.loadTexts: dcdcNumberOfAlarms.setDescription('Number of dcdc alarms')
dcdcCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3), )
if mibBuilder.loadTexts: dcdcCurrentTable.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentTable.setDescription('This table contains information about the total dcdc current.')
dcdcCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentEntry.setDescription('')
dcdcCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentStatus.setDescription('The status of the measured total dcdc current.')
dcdcCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentDescription.setDescription('A textual description of the total dcdc current monitor. This is stored in the system controller\n\t\tand can be changed by the user')
dcdcCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
dcdcCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
dcdcCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCurrentValue.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentValue.setDescription('The value of the measured total dcdc current.')
dcdcCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentMajorAlarmLevel.setDescription('The major alarm limit')
dcdcCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
dcdcCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4), )
if mibBuilder.loadTexts: dcdcCapacityTable.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityTable.setDescription('This table contains information about the used dcdc capacity.')
dcdcCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityEntry.setDescription('')
dcdcCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityStatus.setDescription('The status of the measured used dcdc capacity.')
dcdcCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityDescription.setDescription('A textual description of the used dcdc capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user')
dcdcCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes of')
dcdcCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
dcdcCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcCapacityValue.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityValue.setDescription('The used dcdc capacity value presented in percentage of the total installed dcdc capacity.')
dcdcCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityMajorAlarmLevel.setDescription('The major alarm limit')
dcdcCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
dcdcTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5), )
if mibBuilder.loadTexts: dcdcTable.setStatus('current')
if mibBuilder.loadTexts: dcdcTable.setDescription('This table shows the information of each dcdc converter installed in the system.')
dcdcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"), (0, "SP2-MIB", "dcdcIndex"))
if mibBuilder.loadTexts: dcdcEntry.setStatus('current')
if mibBuilder.loadTexts: dcdcEntry.setDescription('')
dcdcIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: dcdcIndex.setStatus('current')
if mibBuilder.loadTexts: dcdcIndex.setDescription('Index used for navigating the rows 1..100  of dcdcTable')
dcdcStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcStatus.setStatus('current')
if mibBuilder.loadTexts: dcdcStatus.setDescription('The overall status of dcdc converter')
dcdcOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: dcdcOutputCurrentValue.setDescription('The output current value of dcdc.')
dcdcInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: dcdcInputVoltageValue.setDescription('The input voltage value of dcdc.')
dcdcType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcType.setStatus('current')
if mibBuilder.loadTexts: dcdcType.setDescription('Type of dcdc converter')
dcdcHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: dcdcHwPartNumber.setDescription('Hardware part number of dcdc converter')
dcdcHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcHwVersion.setStatus('current')
if mibBuilder.loadTexts: dcdcHwVersion.setDescription('Hardware version number of dcdc converter')
dcdcSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: dcdcSwPartNumber.setDescription('Part number of secondary software in dcdc converter')
dcdcSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 5, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcSwVersion.setStatus('current')
if mibBuilder.loadTexts: dcdcSwVersion.setDescription('Version number of secondary software in dcdc converter')
dcdcErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6), )
if mibBuilder.loadTexts: dcdcErrorTable.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorTable.setDescription('This table contains information about the dcdc error monitor.')
dcdcErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1), ).setIndexNames((0, "SP2-MIB", "dcdcGroupIndex"))
if mibBuilder.loadTexts: dcdcErrorEntry.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorEntry.setDescription('')
dcdcErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcErrorStatus.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
dcdcErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorDescription.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorDescription.setDescription('A textual description of the dcdc error monitor. This is stored in the system controller\n\t\tand can be changed by the user')
dcdcErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: dcdcErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
dcdcErrorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorEnable.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
dcdcErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dcdcErrorValue.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorValue.setDescription('The number of failed dcdc converters.')
dcdcErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorMajorAlarmLevel.setDescription('The major alarm limit')
dcdcErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 6, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dcdcErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: dcdcErrorMinorAlarmLevel.setDescription('The minor alarm limit')
solarChargersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersStatus.setStatus('current')
if mibBuilder.loadTexts: solarChargersStatus.setDescription('The overall status of solar charger subsystem.')
solarChargersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentStatus.setDescription('The status of the measured total solar current.')
solarChargersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentDescription.setDescription('A textual description of the total solar current monitor. This is stored in the system controller\n\t\tand can be changed by the user')
solarChargersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: solarChargersCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
solarChargersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
solarChargersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersCurrentValue.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentValue.setDescription('The value of the measured total solar current.')
solarChargersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentMajorAlarmLevel.setDescription('The major alarm limit')
solarChargersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: solarChargersCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
solarChargersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersErrorStatus.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
solarChargersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorDescription.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorDescription.setDescription('A textual description of the solar error monitor. This is stored in the system controller\n\t\tand can be changed by the user')
solarChargersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: solarChargersErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
solarChargersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorEnable.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
solarChargersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersErrorValue.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorValue.setDescription('The number of failed solar chargers.')
solarChargersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorMajorAlarmLevel.setDescription('The major alarm limit')
solarChargersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: solarChargersErrorMinorAlarmLevel.setDescription('The minor alarm limit')
solarChargersNumberOfSolarChargers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: solarChargersNumberOfSolarChargers.setStatus('current')
if mibBuilder.loadTexts: solarChargersNumberOfSolarChargers.setDescription('Number of installed solar chargers.')
solarChargerTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6), )
if mibBuilder.loadTexts: solarChargerTable.setStatus('current')
if mibBuilder.loadTexts: solarChargerTable.setDescription('This table shows the information of each solar charger installed in the system.')
solarChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1), ).setIndexNames((0, "SP2-MIB", "solarChargerIndex"))
if mibBuilder.loadTexts: solarChargerEntry.setStatus('current')
if mibBuilder.loadTexts: solarChargerEntry.setDescription('')
solarChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: solarChargerIndex.setStatus('current')
if mibBuilder.loadTexts: solarChargerIndex.setDescription('Index used for navigating the rows 1..100 of solarChargerTable')
solarChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerStatus.setStatus('current')
if mibBuilder.loadTexts: solarChargerStatus.setDescription('The overall status of solar charger.')
solarChargerOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: solarChargerOutputCurrentValue.setDescription('The output current value of solar charger.')
solarChargerInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: solarChargerInputVoltageValue.setDescription('The input voltage value of solar charger.')
solarChargerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerType.setStatus('current')
if mibBuilder.loadTexts: solarChargerType.setDescription('Type of solar charger')
solarChargerHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: solarChargerHwPartNumber.setDescription('Hardware part number of solar charger')
solarChargerHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerHwVersion.setStatus('current')
if mibBuilder.loadTexts: solarChargerHwVersion.setDescription('Hardware version number of solar charger')
solarChargerSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: solarChargerSwPartNumber.setDescription('Part number of secondary software in solar charger')
solarChargerSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargerSwVersion.setStatus('current')
if mibBuilder.loadTexts: solarChargerSwVersion.setDescription('Version number of secondary software in solar charger')
solarChargersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogAccumulated.setDescription('This is the accumulated energy delivered from solar chargers.')
solarChargersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in solar charger hourly energy log.')
solarChargersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of solar chargers.')
solarChargersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursEntry.setDescription('')
solarChargersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52 of solarChargersEnergyLogLastHoursTable')
solarChargersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
solarChargersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in solar charger daily energy log.')
solarChargersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysTable.setDescription('This table contains daily energy log of solar chargers.')
solarChargersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysEntry.setDescription('')
solarChargersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52 of solarChargersEnergyLogLastDaysTable')
solarChargersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
solarChargersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in solar charger weekly energy log.')
solarChargersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7), )
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of solar chargers.')
solarChargersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "solarChargersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksEntry.setDescription('')
solarChargersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52 of solarChargersEnergyLogLastWeekTable')
solarChargersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 7, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: solarChargersEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
windChargersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersStatus.setStatus('current')
if mibBuilder.loadTexts: windChargersStatus.setDescription('The overall status of wind charger subsystem.')
windChargersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentStatus.setDescription('The status of the measured total wind current.')
windChargersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentDescription.setDescription('A textual description of the total wind current monitor. This is stored in the system controller\n\t\tand can be changed by the user')
windChargersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: windChargersCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
windChargersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
windChargersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersCurrentValue.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentValue.setDescription('The value of the measured total wind current.')
windChargersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentMajorAlarmLevel.setDescription('The major alarm limit')
windChargersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: windChargersCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
windChargersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersErrorStatus.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
windChargersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorDescription.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorDescription.setDescription('A textual description of the wind error monitor. This is stored in the system controller\n\t\tand can be changed by the user')
windChargersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: windChargersErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
windChargersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorEnable.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
windChargersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersErrorValue.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorValue.setDescription('The number of failed wind chargers.')
windChargersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorMajorAlarmLevel.setDescription('The major alarm limit')
windChargersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: windChargersErrorMinorAlarmLevel.setDescription('The minor alarm limit')
windChargersNumberOfWindChargers = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: windChargersNumberOfWindChargers.setStatus('current')
if mibBuilder.loadTexts: windChargersNumberOfWindChargers.setDescription('Number of installed wind chargers.')
windChargerTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6), )
if mibBuilder.loadTexts: windChargerTable.setStatus('current')
if mibBuilder.loadTexts: windChargerTable.setDescription('This table shows the information of each wind charger installed in the system.')
windChargerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1), ).setIndexNames((0, "SP2-MIB", "windChargerIndex"))
if mibBuilder.loadTexts: windChargerEntry.setStatus('current')
if mibBuilder.loadTexts: windChargerEntry.setDescription('')
windChargerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: windChargerIndex.setStatus('current')
if mibBuilder.loadTexts: windChargerIndex.setDescription('Index used for navigating the rows 1..100 of windChargerTable')
windChargerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerStatus.setStatus('current')
if mibBuilder.loadTexts: windChargerStatus.setDescription('The overall status of wind charger.')
windChargerOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: windChargerOutputCurrentValue.setDescription('The output current value of wind charger.')
windChargerInputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerInputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: windChargerInputVoltageValue.setDescription('The input voltage value of wind charger.')
windChargerType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerType.setStatus('current')
if mibBuilder.loadTexts: windChargerType.setDescription('Type of wind charger')
windChargerHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: windChargerHwPartNumber.setDescription('Hardware part number of wind charger')
windChargerHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerHwVersion.setStatus('current')
if mibBuilder.loadTexts: windChargerHwVersion.setDescription('Hardware version number of wind charger')
windChargerSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: windChargerSwPartNumber.setDescription('Part number of secondary software in wind charger')
windChargerSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargerSwVersion.setStatus('current')
if mibBuilder.loadTexts: windChargerSwVersion.setDescription('Version number of secondary software in wind charger')
windChargersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogAccumulated.setDescription('This is the accumulated energy delivered to/from wind chargers.')
windChargersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in wind charger hourly energy log.')
windChargersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3), )
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of wind chargers.')
windChargersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursEntry.setDescription('')
windChargersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52 of windChargersEnergyLogLastHoursTable')
windChargersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
windChargersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in wind charger daily energy log.')
windChargersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5), )
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysTable.setDescription('This table contains daily energy log of wind chargers.')
windChargersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysEntry.setDescription('')
windChargersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52 of windChargersEnergyLogLastDaysTable')
windChargersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
windChargersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in wind charger weekly energy log.')
windChargersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7), )
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of wind chargers.')
windChargersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1), ).setIndexNames((0, "SP2-MIB", "windChargersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksEntry.setDescription('')
windChargersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52 of windChargersEnergyLogLastWeekTable')
windChargersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 8, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: windChargersEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
loadStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadStatus.setStatus('current')
if mibBuilder.loadTexts: loadStatus.setDescription('The overall status of load subsystem.')
loadCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: loadCurrentStatus.setDescription('The status of the measured load current.')
loadCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: loadCurrentDescription.setDescription('A textual description of the load current monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
loadCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: loadCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
loadCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: loadCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
loadCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadCurrentValue.setStatus('current')
if mibBuilder.loadTexts: loadCurrentValue.setDescription('The value of the measured load current.')
loadCurrentMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: loadCurrentMajorHighLevel.setDescription('The major high alarm limit')
loadCurrentMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadCurrentMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: loadCurrentMinorHighLevel.setDescription('The minor high alarm limit')
loadFusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFusesStatus.setStatus('current')
if mibBuilder.loadTexts: loadFusesStatus.setDescription('The overall status of the load fuses.')
loadNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: loadNumberOfGroups.setDescription('Number of load groups')
loadGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5), )
if mibBuilder.loadTexts: loadGroupTable.setStatus('current')
if mibBuilder.loadTexts: loadGroupTable.setDescription('This table contains information about load groups.')
loadGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"))
if mibBuilder.loadTexts: loadGroupEntry.setStatus('current')
if mibBuilder.loadTexts: loadGroupEntry.setDescription('')
loadGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: loadGroupIndex.setStatus('current')
if mibBuilder.loadTexts: loadGroupIndex.setDescription('Index used for navigating the rows 1..8  of loadGroupTable')
loadGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadGroupStatus.setStatus('current')
if mibBuilder.loadTexts: loadGroupStatus.setDescription('The status of load group')
loadNumberOfLVLDs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumberOfLVLDs.setStatus('current')
if mibBuilder.loadTexts: loadNumberOfLVLDs.setDescription('Number of LVLDs installed in load group')
loadNumberOfVoltages = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadNumberOfVoltages.setStatus('current')
if mibBuilder.loadTexts: loadNumberOfVoltages.setDescription('Number of voltages in load group')
loadLVLDTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6), )
if mibBuilder.loadTexts: loadLVLDTable.setStatus('current')
if mibBuilder.loadTexts: loadLVLDTable.setDescription('This table contains information about LVLDs')
loadLVLDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"), (0, "SP2-MIB", "loadLVLDIndex"))
if mibBuilder.loadTexts: loadLVLDEntry.setStatus('current')
if mibBuilder.loadTexts: loadLVLDEntry.setDescription('')
loadLVLDIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: loadLVLDIndex.setStatus('current')
if mibBuilder.loadTexts: loadLVLDIndex.setDescription('Index used for navigating the rows 1..8  of loadLVLDTable')
loadLVLDStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVLDStatus.setStatus('current')
if mibBuilder.loadTexts: loadLVLDStatus.setDescription('The status of LVLD')
loadLVLDDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDDescription.setStatus('current')
if mibBuilder.loadTexts: loadLVLDDescription.setDescription('A textual description of the LVLD. This is stored in the system controller\n\t\tand can be changed by the user.  ')
loadLVLDTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadLVLDTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: loadLVLDTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
loadLVLDEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDEnable.setStatus('current')
if mibBuilder.loadTexts: loadLVLDEnable.setDescription('This value once enabled, the alarm condition of the LVLD will be reported.')
loadLVLDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadLVLDValue.setStatus('current')
if mibBuilder.loadTexts: loadLVLDValue.setDescription('The measured value of the LVLD.')
loadLVLDConnectVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDConnectVoltage.setStatus('current')
if mibBuilder.loadTexts: loadLVLDConnectVoltage.setDescription("The load Contactor's Reconnect Voltage")
loadLVLDDisconnectVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadLVLDDisconnectVoltage.setStatus('current')
if mibBuilder.loadTexts: loadLVLDDisconnectVoltage.setDescription("The load Contactor's Disconnect Voltage")
loadFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7), )
if mibBuilder.loadTexts: loadFuseTable.setStatus('current')
if mibBuilder.loadTexts: loadFuseTable.setDescription('This table contains information about load fuse ')
loadFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"))
if mibBuilder.loadTexts: loadFuseEntry.setStatus('current')
if mibBuilder.loadTexts: loadFuseEntry.setDescription('')
loadFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadFuseStatus.setStatus('current')
if mibBuilder.loadTexts: loadFuseStatus.setDescription('The status of load fuse')
loadFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseDescription.setStatus('current')
if mibBuilder.loadTexts: loadFuseDescription.setDescription('A textual description of the load fuse monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
loadFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadFuseTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: loadFuseTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
loadFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: loadFuseAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
loadFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadFuseValue.setStatus('current')
if mibBuilder.loadTexts: loadFuseValue.setDescription('The measured value of the load fuse.')
loadEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogAccumulated.setDescription('This is the accumulated energy delivered to load.')
loadEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in load hourly energy log.')
loadEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3), )
if mibBuilder.loadTexts: loadEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastHoursTable.setDescription('')
loadEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastHoursEntry.setDescription('')
loadEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of loadEnergyLogLastHoursTable')
loadEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
loadEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in load daily energy log.')
loadEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5), )
if mibBuilder.loadTexts: loadEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastDaysTable.setDescription('')
loadEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastDaysEntry.setDescription('')
loadEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of loadEnergyLogLastDaysTable')
loadEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
loadEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in load weekly energy log.')
loadEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7), )
if mibBuilder.loadTexts: loadEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastWeeksTable.setDescription('')
loadEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1), ).setIndexNames((0, "SP2-MIB", "loadEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: loadEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastWeeksEntry.setDescription('')
loadEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: loadEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of loadEnergyLogLastWeekTable')
loadEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 8, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: loadEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
loadVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9), )
if mibBuilder.loadTexts: loadVoltageTable.setStatus('current')
if mibBuilder.loadTexts: loadVoltageTable.setDescription('This table contains information about voltages')
loadVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1), ).setIndexNames((0, "SP2-MIB", "loadGroupIndex"), (0, "SP2-MIB", "loadVoltageIndex"))
if mibBuilder.loadTexts: loadVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: loadVoltageEntry.setDescription('')
loadVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: loadVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: loadVoltageIndex.setDescription('Index used for navigating the rows 1..3  of loadVoltageTable')
loadVoltageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: loadVoltageStatus.setDescription('The status of voltage')
loadVoltageDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: loadVoltageDescription.setDescription('A textual description of the voltage. This is stored in the system controller\n\t\tand can be changed by the user.  ')
loadVoltageTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadVoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: loadVoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
loadVoltageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadVoltageEnable.setStatus('current')
if mibBuilder.loadTexts: loadVoltageEnable.setDescription('This value once enabled, the alarm condition of the LVLD will be reported.')
loadVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 9, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadVoltageValue.setStatus('current')
if mibBuilder.loadTexts: loadVoltageValue.setDescription('The measured value of the voltage.')
batteryStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryStatus.setStatus('current')
if mibBuilder.loadTexts: batteryStatus.setDescription("A toplevel status for the battery subsystem.  The state of this reflects the status of all \n\t\tunderlying statuses for the battery. Any change in one of the 'data monitors' in \n\t\tthe battery subsystem will propagate up to this status indicator.")
batteryDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryDescription.setStatus('current')
if mibBuilder.loadTexts: batteryDescription.setDescription('A descriptive name of the battery installed in the system.')
batteryReferenceVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(840, 60417))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryReferenceVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryReferenceVoltage.setDescription('The Voltage at which the DC System float charges.\n\t\tActs as reference voltage when running temperature compensated charging.')
batteryFusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFusesStatus.setStatus('current')
if mibBuilder.loadTexts: batteryFusesStatus.setDescription('The state of the battery fuses/breakers can mainly be normal(1) or majorAlarm(3) and  \n\t\tsome other rarely used values .')
batteryVoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltageStatus.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageStatus.setDescription('The status of the measured battery voltage.')
batteryVoltageDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageDescription.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageDescription.setDescription('A textual description of the battery voltage monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryVoltageTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryVoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryVoltageAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageAlarmEnable.setDescription('The measured battery voltage alarm enable/disable control')
batteryVoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryVoltageValue.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageValue.setDescription('The value of the measured battery voltage.')
batteryVoltageMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageMajorHighLevel.setDescription('The Major High Battery Voltage alarm limit set voltage')
batteryVoltageMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageMinorHighLevel.setDescription('The Minor High Battery Voltage alarm limit set voltage')
batteryVoltageMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageMinorLowLevel.setDescription('The Minor Low Battery Voltage alarm limit set voltage')
batteryVoltageMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryVoltageMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryVoltageMajorLowLevel.setDescription('The Major Low Battery Voltage alarm limit set voltage')
batteryCurrentsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentsStatus.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsStatus.setDescription('The status of the measured battery current')
batteryCurrentsDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsDescription.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsDescription.setDescription('A textual description of the battery current monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryCurrentsTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryCurrentsTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryCurrentsAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryCurrentsValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentsValue.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsValue.setDescription('The measured total battery current.\n\t\tThis is the sum of all the enabled shunt measurements in the system.\n\t\tNegative battery current indicates discharging of the batteries.\n\t\tPositive battery current indicates charging of the batteries.\n\t\tNote that the units measured may be i Amperes or in Deciamperes depending on global system settings')
batteryCurrentsMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsMajorHighLevel.setDescription('The major high alarm limit')
batteryCurrentsMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsMinorHighLevel.setDescription('The minor high alarm limit')
batteryCurrentsMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsMinorLowLevel.setDescription('The minor low alarm limit')
batteryCurrentsMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentsMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentsMajorLowLevel.setDescription('The major low alarm limit')
batteryTemperaturesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperaturesStatus.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesStatus.setDescription('The state of the battery fuses/breakers can be either one of the defined enumerated values')
batteryTemperaturesDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesDescription.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesDescription.setDescription('A textual description of the battery temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryTemperaturesTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTemperaturesTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryTemperaturesAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryTemperaturesValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperaturesValue.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesValue.setDescription('The highest value of the enabled battery temperature measurements.\n\t\tDepending on the global setting in the Control unit, this value will be presented in Celsius\n\t\tor Fahrenheit.')
batteryTemperaturesMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesMajorHighLevel.setDescription('The major high alarm limit')
batteryTemperaturesMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesMinorHighLevel.setDescription('The minor high alarm limit')
batteryTemperaturesMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesMinorLowLevel.setDescription('The minor low alarm limit')
batteryTemperaturesMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperaturesMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperaturesMajorLowLevel.setDescription('The major low alarm limit')
batteryTimeLeftStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTimeLeftStatus.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftStatus.setDescription('The status of the estimated battery remaining backup time.')
batteryTimeLeftDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftDescription.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftDescription.setDescription('A textual description of the battery discharge time monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryTimeLeftTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTimeLeftTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryTimeLeftAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryTimeLeftValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTimeLeftValue.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftValue.setDescription('The estimated value of battery remaining backup time.')
batteryTimeLeftMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftMinorAlarmLevel.setDescription('The minor alarm limit')
batteryTimeLeftMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTimeLeftMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTimeLeftMajorAlarmLevel.setDescription('The major alarm limit')
batteryRemainingCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryRemainingCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityStatus.setDescription('The status of the battery remaining capacity monitor.')
batteryRemainingCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityDescription.setDescription('A textual description of the battery remaining capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryRemainingCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryRemainingCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryRemainingCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryRemainingCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryRemainingCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityValue.setDescription('Battery remaining capacity (SOC) value estimated from the latest battery test result.')
batteryRemainingCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityMinorLowLevel.setDescription('The minor low alarm limit')
batteryRemainingCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryRemainingCapacityMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryRemainingCapacityMajorLowLevel.setDescription('The major low alarm limit')
batteryUsedCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryUsedCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityStatus.setDescription('The status of the battery used capacity (DoD) monitor')
batteryUsedCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityDescription.setDescription('A textual description of the battery used capacity (DoD) monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryUsedCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryUsedCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryUsedCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryUsedCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryUsedCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityValue.setDescription('This is the estimated battery used capacity (DoD).')
batteryUsedCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityMajorAlarmLevel.setDescription('The major alarm limit')
batteryUsedCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryUsedCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryUsedCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
batteryTotalCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTotalCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityStatus.setDescription('The status of the total capacity monitor.')
batteryTotalCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityDescription.setDescription('A textual description of the battery total capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryTotalCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTotalCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryTotalCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryTotalCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTotalCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityValue.setDescription('This is the estimated total battery capacity (installed Ah - SoH) value.')
batteryTotalCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityMinorLowLevel.setDescription('The minor low alarm limit')
batteryTotalCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTotalCapacityMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTotalCapacityMajorLowLevel.setDescription('The major low alarm limit')
batteryQualityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryQualityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryQualityStatus.setDescription('The status of the battery quality (SoH) monitor.')
batteryQualityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryQualityDescription.setDescription('A textual description of the battery quality (SoH) monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryQualityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryQualityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryQualityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryQualityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryQualityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryQualityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryQualityValue.setStatus('current')
if mibBuilder.loadTexts: batteryQualityValue.setDescription('The calculated battery quality (SoH) based on the latest battery test')
batteryQualityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryQualityMinorAlarmLevel.setDescription('The minor alarm limit')
batteryQualityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryQualityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryQualityMajorAlarmLevel.setDescription('The major alarm limit')
batteryLVBDStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLVBDStatus.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDStatus.setDescription('The Battery Contactor is connected, disconnected, disabled or in any other alarm condition')
batteryLVBDDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDDescription.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDDescription.setDescription('A textual description of the battery LVBD monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryLVBDTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryLVBDTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryLVBDEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDEnable.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDEnable.setDescription('This value once enabled, the alarm condition of the LVBD will be reported.')
batteryLVBDValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryLVBDValue.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDValue.setDescription('The measured value of the LVBD.')
batteryLVBDConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDConnectVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDConnectVoltage.setDescription("The Battery Contactor's Reconnect Voltage")
batteryLVBDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryLVBDDisconnectVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryLVBDDisconnectVoltage.setDescription("The Battery Contactor's Disconnect Voltage")
batteryChargeCurrentLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitEnable.setStatus('current')
if mibBuilder.loadTexts: batteryChargeCurrentLimitEnable.setDescription('Enable/disable of the battery charge current limitation feature; 0=disable, 1=enable.')
batteryChargeCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryChargeCurrentLimitValue.setStatus('current')
if mibBuilder.loadTexts: batteryChargeCurrentLimitValue.setDescription('Battery charging current limit value. Used only when AC source is mains feed.\n\t\tNote that the units measured may be i Amperes or in Deciamperes depending on global system settings')
batteryBoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryBoostVoltage.setDescription('The Voltage at which the DC System boost charges the batteries.')
batteryBoostCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startboost", 1), ("stopboost", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostCommand.setStatus('current')
if mibBuilder.loadTexts: batteryBoostCommand.setDescription('This pushbutton will start or stop a manual battery boost if the system allows it.')
batteryBoostCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: batteryBoostCurrentThreshold.setDescription('The boosting will terminate when the charge current drops below the BoostCurrentThreshold limit.')
batteryBoostManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBoostManualMaxDuration.setStatus('current')
if mibBuilder.loadTexts: batteryBoostManualMaxDuration.setDescription('A protection against overcharging.  \n\t\tWhen running manual boost, the boosting will always terminate at this point.  ')
batteryTestVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryTestVoltage.setDescription('This is the battery test end voltage. The battery test will be terminated when the voltage\n\t\tdrops below the end voltage.')
batteryTestCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("starttest", 1), ("stoptest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTestCommand.setStatus('current')
if mibBuilder.loadTexts: batteryTestCommand.setDescription('This pushbutton will start or stop a manual battery test if the system allows it.')
batteryTestNumberOfResults = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestNumberOfResults.setStatus('current')
if mibBuilder.loadTexts: batteryTestNumberOfResults.setDescription('This is the number of valid battery test results stored in controller.')
batteryTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4), )
if mibBuilder.loadTexts: batteryTestResultTable.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultTable.setDescription('This table contains the battery test results stored in controller.')
batteryTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryTestResultIndex"))
if mibBuilder.loadTexts: batteryTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultEntry.setDescription('')
batteryTestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: batteryTestResultIndex.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultIndex.setDescription('A index pointing to one of ten possible battery test results')
batteryTestResultStartDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultStartDateTime.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultStartDateTime.setDescription('This is the time and date when the test started.')
batteryTestResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultDuration.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultDuration.setDescription('This is the test duration in minutes.')
batteryTestResultDischarged = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultDischarged.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultDischarged.setDescription('This is the discharged Ah during test.')
batteryTestResultQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 16, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTestResultQuality.setStatus('current')
if mibBuilder.loadTexts: batteryTestResultQuality.setDescription('This is the calculated battery quality (SoH)in percentage.')
batteryTempCompEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTempCompEnable.setStatus('current')
if mibBuilder.loadTexts: batteryTempCompEnable.setDescription('Enable (1) or Disable (0)  of Battery Temperature Compensated output regulation mode')
batteryBankNumberOfBanks = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankNumberOfBanks.setStatus('current')
if mibBuilder.loadTexts: batteryBankNumberOfBanks.setDescription('Number of battery banks installed in system.')
batteryBankTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2), )
if mibBuilder.loadTexts: batteryBankTable.setStatus('current')
if mibBuilder.loadTexts: batteryBankTable.setDescription('')
batteryBankEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"))
if mibBuilder.loadTexts: batteryBankEntry.setStatus('current')
if mibBuilder.loadTexts: batteryBankEntry.setDescription('')
batteryBankIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryBankIndex.setStatus('current')
if mibBuilder.loadTexts: batteryBankIndex.setDescription('Index used for navigating the rows 1..8  of batteryBankTable ')
batteryBankStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankStatus.setStatus('current')
if mibBuilder.loadTexts: batteryBankStatus.setDescription('The overall status of battery bank')
batteryBankNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfTemperatures.setStatus('current')
if mibBuilder.loadTexts: batteryBankNumberOfTemperatures.setDescription('Number of temperature measurements in battery bank.')
batteryBankNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: batteryBankNumberOfCurrents.setDescription('Number of current measurements in battery bank.')
batteryBankNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfFuses.setStatus('current')
if mibBuilder.loadTexts: batteryBankNumberOfFuses.setDescription('Number of fuses installed in battery bank.')
batteryBankNumberOfSymmetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankNumberOfSymmetries.setStatus('current')
if mibBuilder.loadTexts: batteryBankNumberOfSymmetries.setDescription('Number of symmetry measurements available in battery bank.')
batteryBankTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3), )
if mibBuilder.loadTexts: batteryBankTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: batteryBankTemperatureTable.setDescription('')
batteryBankTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryTemperatureIndex"))
if mibBuilder.loadTexts: batteryBankTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: batteryBankTemperatureEntry.setDescription('')
batteryTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureIndex.setDescription('This index denotes which row in the temperature input table.\n\t\tThe size of the table is defined by the batteryBankNumberOfTemp   ')
batteryTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureStatus.setDescription('The status of battery temperature monitor')
batteryTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureDescription.setDescription('A textual description of the battery temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureValue.setDescription('The measured battery temperature.')
batteryTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureMajorHighLevel.setDescription('The major high alarm limit')
batteryTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
batteryTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
batteryTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryTemperatureMajorLowLevel.setDescription('The major low alarm limit')
batteryBankCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4), )
if mibBuilder.loadTexts: batteryBankCurrentTable.setStatus('current')
if mibBuilder.loadTexts: batteryBankCurrentTable.setDescription('')
batteryBankCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryCurrentIndex"))
if mibBuilder.loadTexts: batteryBankCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: batteryBankCurrentEntry.setDescription('')
batteryCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentIndex.setDescription('This index denotes which row in the current input table.\n\t\t        The size of the table is defined by the system')
batteryCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentStatus.setDescription('The status of battery current monitor')
batteryCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentDescription.setDescription('A textual description of the battery current monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCurrentValue.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentValue.setDescription('The measured battery current')
batteryCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentMajorHighLevel.setDescription('The major high alarm limit')
batteryCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentMinorHighLevel.setDescription('The minor high alarm limit')
batteryCurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentMinorLowLevel.setDescription('The minor low alarm limit')
batteryCurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryCurrentMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryCurrentMajorLowLevel.setDescription('The major low alarm limit')
batteryBankFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5), )
if mibBuilder.loadTexts: batteryBankFuseTable.setStatus('current')
if mibBuilder.loadTexts: batteryBankFuseTable.setDescription('')
batteryBankFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryFuseIndex"))
if mibBuilder.loadTexts: batteryBankFuseEntry.setStatus('current')
if mibBuilder.loadTexts: batteryBankFuseEntry.setDescription('')
batteryFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryFuseIndex.setStatus('current')
if mibBuilder.loadTexts: batteryFuseIndex.setDescription('This index denotes which row in the fuse table.\n\t\t        The size of the table is defined by the system')
batteryFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFuseStatus.setStatus('current')
if mibBuilder.loadTexts: batteryFuseStatus.setDescription('The status of battery fuse monitor')
batteryFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFuseDescription.setStatus('current')
if mibBuilder.loadTexts: batteryFuseDescription.setDescription('A textual description of the battery fuse monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryFuseTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryFuseTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryFuseAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryFuseAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryFuseValue.setStatus('current')
if mibBuilder.loadTexts: batteryFuseValue.setDescription('The measured value of battery fuse input.')
batteryBankSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6), )
if mibBuilder.loadTexts: batteryBankSymmetryTable.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryTable.setDescription('')
batteryBankSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryBankIndex"), (0, "SP2-MIB", "batteryBankSymmetryIndex"))
if mibBuilder.loadTexts: batteryBankSymmetryEntry.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryEntry.setDescription('')
batteryBankSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryBankSymmetryIndex.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryIndex.setDescription('This index denotes which row in the symmetry input table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfSymmetries')
batteryBankSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryStatus.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryStatus.setDescription('The status of battery symmetry monitor')
batteryBankSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryDescription.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryDescription.setDescription('A textual description of the battery monitor symmetry. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryBankSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryBankSymmetryTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryBankSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryBankSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryMeasureValue.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryMeasureValue.setDescription('The measured battery symmetry voltage in battery monitor.')
batteryBankSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryBankSymmetryDeltaValue.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryDeltaValue.setDescription('The measured battery symmetry delta voltage in battery monitor.')
batteryBankSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryMajorAlarmLevel.setDescription('The major alarm limit')
batteryBankSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 18, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryBankSymmetryMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryBankSymmetryMinorAlarmLevel.setDescription('The minor alarm limit')
batteryMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorsNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorsNumberOfUnits.setDescription('The number of battery monitor installed in system.')
batteryMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2), )
if mibBuilder.loadTexts: batteryMonitorsTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorsTable.setDescription('')
batteryMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"))
if mibBuilder.loadTexts: batteryMonitorsEntry.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorsEntry.setDescription('')
batteryMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorIndex.setDescription('Index used for navigating the rows 1..8  of batteryMonitorsTable')
batteryMonitorNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfTemperatures.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorNumberOfTemperatures.setDescription('The number of temperature measurements in battery monitor.')
batteryMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorNumberOfCurrents.setDescription('The number of current measurements in battery monitor.')
batteryMonitorNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfFuses.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorNumberOfFuses.setDescription('The number of fuse measurements in battery monitor.')
batteryMonitorNumberOfSymmetries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorNumberOfSymmetries.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorNumberOfSymmetries.setDescription('The number of symmetry measurements in battery monitor.')
batteryMonitorTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3), )
if mibBuilder.loadTexts: batteryMonitorTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureTable.setDescription('')
batteryMonitorTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorTemperatureIndex"))
if mibBuilder.loadTexts: batteryMonitorTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureEntry.setDescription('')
batteryMonitorTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureIndex.setDescription('This index denotes which row in the temperature input table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfTemperatures')
batteryMonitorTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureStatus.setDescription('The status of battery temperature monitor')
batteryMonitorTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureDescription.setDescription('A textual description of the battery monitor temperature. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryMonitorTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryMonitorTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryMonitorTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureValue.setDescription('The measured battery temperature in battery monitor.')
batteryMonitorTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorHighLevel.setDescription('The major high alarm limit')
batteryMonitorTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
batteryMonitorTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
batteryMonitorTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorTemperatureMajorLowLevel.setDescription('The major low alarm limit')
batteryMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4), )
if mibBuilder.loadTexts: batteryMonitorCurrentTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentTable.setDescription('')
batteryMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorCurrentIndex"))
if mibBuilder.loadTexts: batteryMonitorCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentEntry.setDescription('')
batteryMonitorCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentIndex.setDescription('This index denotes which row in the current input table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfCurrents')
batteryMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentStatus.setDescription('The status of battery current monitor')
batteryMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentDescription.setDescription('A textual description of the battery monitor current. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorCurrentValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentValue.setDescription('The measured battery current in battery monitor.')
batteryMonitorCurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentMajorHighLevel.setDescription('The major high alarm limit')
batteryMonitorCurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentMinorHighLevel.setDescription('The minor high alarm limit')
batteryMonitorCurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentMinorLowLevel.setDescription('The minor low alarm limit')
batteryMonitorCurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorCurrentMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorCurrentMajorLowLevel.setDescription('The major low alarm limit')
batteryMonitorFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5), )
if mibBuilder.loadTexts: batteryMonitorFuseTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseTable.setDescription('')
batteryMonitorFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorFuseIndex"))
if mibBuilder.loadTexts: batteryMonitorFuseEntry.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseEntry.setDescription('')
batteryMonitorFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryMonitorFuseIndex.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseIndex.setDescription('This index denotes which row in the fuse table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfFuses')
batteryMonitorFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorFuseStatus.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseStatus.setDescription('The status of battery fuse monitor')
batteryMonitorFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorFuseDescription.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseDescription.setDescription('A textual description of the battery monitor fuse. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryMonitorFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorFuseTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryMonitorFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorFuseAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryMonitorFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorFuseValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorFuseValue.setDescription('The measured value of battery fuse in battery monitor.')
batteryMonitorSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6), )
if mibBuilder.loadTexts: batteryMonitorSymmetryTable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryTable.setDescription('')
batteryMonitorSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryMonitorIndex"), (0, "SP2-MIB", "batteryMonitorSymmetryIndex"))
if mibBuilder.loadTexts: batteryMonitorSymmetryEntry.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryEntry.setDescription('')
batteryMonitorSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryMonitorSymmetryIndex.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryIndex.setDescription('This index denotes which row in the symmetry input table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfSymmetries')
batteryMonitorSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryStatus.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryStatus.setDescription('The status of battery symmetry monitor')
batteryMonitorSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryDescription.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryDescription.setDescription('A textual description of the battery monitor symmetry. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryMonitorSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorSymmetryTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryMonitorSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryMonitorSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryMeasureValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryMeasureValue.setDescription('The measured battery symmetry voltage in battery monitor.')
batteryMonitorSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorSymmetryDeltaValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryDeltaValue.setDescription('The measured battery symmetry delta voltage in battery monitor.')
batteryMonitorSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryMajorAlarmLevel.setDescription('The major alarm limit')
batteryMonitorSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 19, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorSymmetryMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorSymmetryMinorAlarmLevel.setDescription('The minor alarm limit')
batteryEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogAccumulated.setDescription('This is the accumulated energy delivered to/from battery.')
batteryEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in battery hourly energy log.')
batteryEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3), )
if mibBuilder.loadTexts: batteryEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of battery.')
batteryEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastHoursEntry.setDescription('')
batteryEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastHoursTable')
batteryEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
batteryEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in battery daily energy log.')
batteryEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5), )
if mibBuilder.loadTexts: batteryEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastDaysTable.setDescription('This table contains daily energy log of battery.')
batteryEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastDaysEntry.setDescription('')
batteryEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastDaysTable')
batteryEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
batteryEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in battery weekly energy log.')
batteryEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7), )
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of battery.')
batteryEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksEntry.setDescription('')
batteryEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastWeekTable')
batteryEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 20, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: batteryEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
batteryCycleLogTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogTotalCycles.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogTotalCycles.setDescription('This is the total number of battery discharge cycles.')
batteryCycleLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily battery discharge cycle log.')
batteryCycleLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3), )
if mibBuilder.loadTexts: batteryCycleLogDaysTable.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogDaysTable.setDescription('This table contains daily battery discharge cycle log.')
batteryCycleLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogDaysIndex"))
if mibBuilder.loadTexts: batteryCycleLogDaysEntry.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogDaysEntry.setDescription('')
batteryCycleLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogDaysIndex.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogDaysIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastDaysTable')
batteryCycleLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogDaysValue.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogDaysValue.setDescription('Number of discharge cycles logged every day.')
batteryCycleLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weeky battery discharge cycle log.')
batteryCycleLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5), )
if mibBuilder.loadTexts: batteryCycleLogWeeksTable.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogWeeksTable.setDescription('This table contains weekly battery discharge cycle log.')
batteryCycleLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogWeeksIndex"))
if mibBuilder.loadTexts: batteryCycleLogWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogWeeksEntry.setDescription('')
batteryCycleLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogWeeksIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastWeeksTable')
batteryCycleLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogWeeksValue.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogWeeksValue.setDescription('Number of discharge cycles logged every week.')
batteryCycleLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogMonthsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogMonthsNumberOfEntries.setDescription('This is the maximal number of entries stored in monthly battery discharge cycle log.')
batteryCycleLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7), )
if mibBuilder.loadTexts: batteryCycleLogMonthsTable.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogMonthsTable.setDescription('This table contains monthly battery discharge cycle log.')
batteryCycleLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryCycleLogMonthsIndex"))
if mibBuilder.loadTexts: batteryCycleLogMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogMonthsEntry.setDescription('')
batteryCycleLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryCycleLogMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogMonthsIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastMonthTable')
batteryCycleLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 10, 21, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryCycleLogMonthsValue.setStatus('current')
if mibBuilder.loadTexts: batteryCycleLogMonthsValue.setDescription('Number of discharge cycles logged every month.')
batteryEqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryEqualizeVoltage.setDescription('The Voltage at which the DC System equalize charges the batteries.')
batteryEqualizeCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startequalize", 1), ("stopequalize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeCommand.setStatus('current')
if mibBuilder.loadTexts: batteryEqualizeCommand.setDescription('This pushbutton will start or stop a manual battery equalize if the system allows it.')
batteryEqualizeCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: batteryEqualizeCurrentThreshold.setDescription('The equalizing will terminate when the charge current drops below the EqualizeCurrentThreshold limit.')
batteryEqualizeManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 22, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryEqualizeManualMaxDuration.setStatus('current')
if mibBuilder.loadTexts: batteryEqualizeManualMaxDuration.setDescription('A protection against overcharging.  \n\t\tWhen running manual equalize, the boosting will always terminate at this point.  ')
batteryAhChargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhChargedStatus.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedStatus.setDescription('The status of the battery ah charged monitor.')
batteryAhChargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedDescription.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedDescription.setDescription('A textual description of the battery ah charged monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryAhChargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryAhChargedTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryAhChargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryAhChargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhChargedValue.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedValue.setDescription('The calculated battery ah (x100) charged value.')
batteryAhChargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedMinorHighLevel.setDescription('The minor high alarm limit')
batteryAhChargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 23, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhChargedMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryAhChargedMajorHighLevel.setDescription('The major high alarm limit')
batteryAhDischargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhDischargedStatus.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedStatus.setDescription('The status of the battery ah discharged monitor.')
batteryAhDischargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedDescription.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedDescription.setDescription('A textual description of the battery ah discharged monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryAhDischargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryAhDischargedTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryAhDischargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryAhDischargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryAhDischargedValue.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedValue.setDescription('The calculated battery ah (x100) discharged value.')
batteryAhDischargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedMinorHighLevel.setDescription('The minor high alarm limit')
batteryAhDischargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 10, 24, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryAhDischargedMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryAhDischargedMajorHighLevel.setDescription('The major high alarm limit')
inputControlUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1), )
if mibBuilder.loadTexts: inputControlUnitsTable.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitsTable.setDescription('')
inputControlUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1), ).setIndexNames((0, "SP2-MIB", "inputControlUnitIndex"))
if mibBuilder.loadTexts: inputControlUnitsEntry.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitsEntry.setDescription('')
inputControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: inputControlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitIndex.setDescription('Index used for navigating the rows of inputControlUnitTable\n\t\tThe size of the table is defined by the system  ')
inputControlUnitNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputControlUnitNumberOfInputs.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitNumberOfInputs.setDescription('Number of programmable inputs available in controller.')
inputControlUnitInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2), )
if mibBuilder.loadTexts: inputControlUnitInputTable.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputTable.setDescription('This table contains the status of the programmable inputs for Control Units.\n\t\t')
inputControlUnitInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1), ).setIndexNames((0, "SP2-MIB", "inputControlUnitIndex"), (0, "SP2-MIB", "inputControlUnitInputIndex"))
if mibBuilder.loadTexts: inputControlUnitInputEntry.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputEntry.setDescription('')
inputControlUnitInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: inputControlUnitInputIndex.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputIndex.setDescription('Index used for navigating the rows  of inputControlUnitInputTable\n\t\tThe size of the table is defined by the inputControlUnitNumberOfInputs   ')
inputControlUnitInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputControlUnitInputStatus.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputStatus.setDescription('Programmable input status.\n\t\t')
inputControlUnitInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputDescription.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputDescription.setDescription('A textual description of the programmable input. This is stored in the system controller\n\t\tand can be changed by the user.  ')
inputControlUnitInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputControlUnitInputTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
inputControlUnitInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputAlarmEnable.setDescription("This will enable or disable this inputs Alarm functionality.\n\t\tSetting 'disabled' here will turn off lock the status to 'disabled' state")
inputControlUnitInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputValue.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputValue.setDescription("The inputs measured Value. Depending on the type of input, this may\n\t\t represent a Voltage, a Temperature, a Current or a Boolean value.\n\t\tNote: This value can only be set for virtual input on SP2 master or Smartpack S. \n\t\tWhen this value is set to '0', the input is deactivated; When this value is set to '1', \n\t\tthe input is activated; \n\t\tif set to any other value, an Inconsistent Value error\n\t\twill be generated. ")
inputControlUnitInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("diodeMatrix", 3), ("voltage", 4), ("clock", 5), ("virtual", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputControlUnitInputConfiguration.setStatus('current')
if mibBuilder.loadTexts: inputControlUnitInputConfiguration.setDescription('Configuration of the input type. Configurations available for different controllers are as follows:\n\t\tSP2 Master(clock, virtual), SP2 Basic(normally open, normally closed),Compack(normally open,\n\t\tnormally closed, diode matrix, voltage, clock), SmartpackS(normally open,\n\t\tnormally closed,voltage)')
inputIoUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3), )
if mibBuilder.loadTexts: inputIoUnitsTable.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitsTable.setDescription('')
inputIoUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1), ).setIndexNames((0, "SP2-MIB", "inputIoUnitIndex"))
if mibBuilder.loadTexts: inputIoUnitsEntry.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitsEntry.setDescription('')
inputIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: inputIoUnitIndex.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitIndex.setDescription('Index used for navigating the rows of inputIoUnitsTable\n\t\tThe size of the table is defined by the system  ')
inputIoUnitNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitNumberOfInputs.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitNumberOfInputs.setDescription('Number of programmable inputs available in IO unit.')
inputIoUnitProgInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4), )
if mibBuilder.loadTexts: inputIoUnitProgInputTable.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputTable.setDescription('This table contains the status of the programmable inputs for I/O monitor units.\n\t\t. ')
inputIoUnitProgInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1), ).setIndexNames((0, "SP2-MIB", "inputIoUnitIndex"), (0, "SP2-MIB", "inputIoUnitProgInputIndex"))
if mibBuilder.loadTexts: inputIoUnitProgInputEntry.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputEntry.setDescription('')
inputIoUnitProgInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6)))
if mibBuilder.loadTexts: inputIoUnitProgInputIndex.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputIndex.setDescription('The Index to the Input of the selected I/O monitor unit.\n\t\tOr the input number if you like.')
inputIoUnitProgInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitProgInputStatus.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputStatus.setDescription('Programmable input status.\n\t\t')
inputIoUnitProgInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputDescription.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputDescription.setDescription('A textual description of the programmable input in IO unit. This is stored in the system controller\n\t\tand can be changed by the user.')
inputIoUnitProgInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inputIoUnitProgInputTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
inputIoUnitProgInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputAlarmEnable.setDescription("This will enable or disable this inputs Alarm functionality.\n\t\tSetting 'disabled' here will turn off lock the status to 'disabled' state")
inputIoUnitProgInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inputIoUnitProgInputValue.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputValue.setDescription('The inputs measured Value. Depending on the type of input, this may\n\t\trepresent a Voltage, a Temperature, a Current or a Boolean value.')
inputIoUnitProgInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 11, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normallyOpen", 1), ("normallyClosed", 2), ("diodeMatrix", 3), ("voltage", 4), ("clock", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inputIoUnitProgInputConfiguration.setStatus('current')
if mibBuilder.loadTexts: inputIoUnitProgInputConfiguration.setDescription("Configuration of the input type. Configurations available for IO unit are normally open,\n\t\tnormally closed, diode matrix, voltage and clock. Note: If an input is set to 'clock', it can \n\t\tnot be configurated to 'normally open', 'normally closed' and 'diode matrix' directly, it has\n\t\tto be configurated to 'voltage' first. \n\t\t")
outputControlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1), )
if mibBuilder.loadTexts: outputControlUnitTable.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitTable.setDescription('')
outputControlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1), ).setIndexNames((0, "SP2-MIB", "outputControlUnitIndex"))
if mibBuilder.loadTexts: outputControlUnitEntry.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitEntry.setDescription('')
outputControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputControlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitIndex.setDescription('Index used for navigating the rows of outputControlUnitTable\n\t\tThe size of the table is defined by the system  ')
outputControlUnitNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputControlUnitNumberOfOutputs.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitNumberOfOutputs.setDescription('Number of outputs available in controller.')
outputControlUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2), )
if mibBuilder.loadTexts: outputControlUnitOutputTable.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitOutputTable.setDescription('This table contains the status of the outputs for Control Units.')
outputControlUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1), ).setIndexNames((0, "SP2-MIB", "outputControlUnitIndex"), (0, "SP2-MIB", "outputControlUnitOutputIndex"))
if mibBuilder.loadTexts: outputControlUnitOutputEntry.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitOutputEntry.setDescription('')
outputControlUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: outputControlUnitOutputIndex.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitOutputIndex.setDescription('Index used for navigating the rows  of outputControlUnitoutputTable\n\t\tThe size of the table is defined by the outputControlUnitNumberOfOutputs   ')
outputControlUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputControlUnitOutputStatus.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitOutputStatus.setDescription("General output relays may be 'energized' or 'not energized'. 'energized' and \n\t\t'not energized' correspond \n\t\tto normal and alarm condition respectively for normally\n\t\tactivated configuration. \n\t\tLatched contactors may have values 'disconnected' or 'connected' ")
outputControlUnitOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputControlUnitOutputDescription.setStatus('current')
if mibBuilder.loadTexts: outputControlUnitOutputDescription.setDescription('A textual description of the output. This is stored in the system controller\n\t\tand can be changed by the user. ')
outputIoUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3), )
if mibBuilder.loadTexts: outputIoUnitTable.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitTable.setDescription('')
outputIoUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1), ).setIndexNames((0, "SP2-MIB", "outputIoUnitIndex"))
if mibBuilder.loadTexts: outputIoUnitEntry.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitEntry.setDescription('')
outputIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputIoUnitIndex.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitIndex.setDescription('Index used for navigating the rows of outputIoUnitTable\n\t\tThe size of the table is defined by the system  ')
outputIoUnitNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIoUnitNumberOfOutputs.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitNumberOfOutputs.setDescription('Number of outputs available in IO unit.')
outputIoUnitOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4), )
if mibBuilder.loadTexts: outputIoUnitOutputTable.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitOutputTable.setDescription('This table contains the status of the outputs for IO Units.')
outputIoUnitOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1), ).setIndexNames((0, "SP2-MIB", "outputIoUnitIndex"), (0, "SP2-MIB", "outputIoUnitOutputIndex"))
if mibBuilder.loadTexts: outputIoUnitOutputEntry.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitOutputEntry.setDescription('')
outputIoUnitOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: outputIoUnitOutputIndex.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitOutputIndex.setDescription('Index used for navigating the rows  of outputIOUnitOutputTable\n\t\tThe size of the table is defined by the outputIOUnitNumberOfOutputs ')
outputIoUnitOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: outputIoUnitOutputStatus.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitOutputStatus.setDescription("General output relays may be 'energized' or 'not energized'. \n\t\tLatched contactors may have values 'disconnected' or 'connected' ")
outputIoUnitOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 12, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: outputIoUnitOutputDescription.setStatus('current')
if mibBuilder.loadTexts: outputIoUnitOutputDescription.setDescription('A textual description of the output in IO unit. This is stored in the system controller\n\t\tand can be changed by the user. ')
controlSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemStatus.setStatus('current')
if mibBuilder.loadTexts: controlSystemStatus.setDescription('The overall status of control system subsystem')
controlSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 2), DateAndTime().subtype(subtypeSpec=ValueSizeConstraint(8, 11))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemClock.setStatus('current')
if mibBuilder.loadTexts: controlSystemClock.setDescription('This is the system time.')
controlSystemNumberOfControlUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemNumberOfControlUnits.setStatus('current')
if mibBuilder.loadTexts: controlSystemNumberOfControlUnits.setDescription('Total number of main controllers (SP2 Master, SP2 Basic Ind, SP2 Basic, Compack, Smartpack S, Smartpack)')
snmpSendOffTraps = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSendOffTraps.setStatus('current')
if mibBuilder.loadTexts: snmpSendOffTraps.setDescription('When this is enabled, a trap is sent when a alarm condition goes off .')
snmpTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapRepeatRate.setStatus('current')
if mibBuilder.loadTexts: snmpTrapRepeatRate.setDescription('The time between every repeated trap when an alarm condition is on. \n\t\tTo turn repetetive traps off, set to zero.  Can be 0 to 1440 minutes i.e 24 hours.')
snmpHeartBeatTrapRepeatRate = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpHeartBeatTrapRepeatRate.setStatus('current')
if mibBuilder.loadTexts: snmpHeartBeatTrapRepeatRate.setDescription('The time between every heartbeat trap when an alarm condition is on. \n\t\tTo turn heartbeat traps off, set to zero.  Can be 0 to 1440 minutes i.e 24 hours.')
snmpInhibitTraps = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpInhibitTraps.setStatus('current')
if mibBuilder.loadTexts: snmpInhibitTraps.setDescription('When this is enabled, no trap is sent regardless of alarm conditions.\n\t\t')
controlSystemResetManualAlarms = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("resetalarm", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemResetManualAlarms.setStatus('current')
if mibBuilder.loadTexts: controlSystemResetManualAlarms.setDescription('Reset manual alarms and put buzzer into silence.')
controlSystemResetNumberOfModules = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("pushbutton", 0), ("resetnumber", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemResetNumberOfModules.setStatus('current')
if mibBuilder.loadTexts: controlSystemResetNumberOfModules.setDescription("If set to '1', the number of modules (rectifier, solar charger, wind charger, control units, etc.)\n\t\twill be reset, and only those modules communicating are counted.")
controlSystemIoUnitsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitsNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitsNumberOfUnits.setDescription('This is the number of IO units installed in the system.')
controlSystemIoUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2), )
if mibBuilder.loadTexts: controlSystemIoUnitsTable.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitsTable.setDescription('')
controlSystemIoUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitsEntry.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitsEntry.setDescription('')
controlSystemIoUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: controlSystemIoUnitIndex.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitIndex.setDescription('Index used for navigating the rows of controlSystemIoUnitTable\n\t\tThe size of the table is defined by the system')
controlSystemIoUnitNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfTemperatures.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfTemperatures.setDescription('Number of temperature measurements available in IO unit')
controlSystemIoUnitNumberOfFans = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfFans.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitNumberOfFans.setDescription('Number of fan measurements available in IO unit')
controlSystemIoUnitTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3), )
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTable.setDescription('')
controlSystemIoUnitTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"), (0, "SP2-MIB", "controlSystemIoUnitTemperatureIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureEntry.setDescription('')
controlSystemIoUnitTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureIndex.setDescription('Index used for navigating the rows  of controlSystemIoUnitTemperatureTable\n\t\tThe size of the table is defined by the controlSystemIoUnitNumberOfTemperatures')
controlSystemIoUnitTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureStatus.setDescription('The status of temperature monitor')
controlSystemIoUnitTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureDescription.setDescription('A textual description of the temperature monitor in control system. This is stored in the system controller\n\t\tand can be changed by the user.')
controlSystemIoUnitTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
controlSystemIoUnitTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
controlSystemIoUnitTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureValue.setDescription('The measured temperature value.')
controlSystemIoUnitTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorHighLevel.setDescription('The major high alarm limit')
controlSystemIoUnitTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
controlSystemIoUnitTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
controlSystemIoUnitTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitTemperatureMajorLowLevel.setDescription('The major low alarm limit')
controlSystemIoUnitFanTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4), )
if mibBuilder.loadTexts: controlSystemIoUnitFanTable.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanTable.setDescription('')
controlSystemIoUnitFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1), ).setIndexNames((0, "SP2-MIB", "controlSystemIoUnitIndex"), (0, "SP2-MIB", "controlSystemIoUnitFanIndex"))
if mibBuilder.loadTexts: controlSystemIoUnitFanEntry.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanEntry.setDescription('')
controlSystemIoUnitFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: controlSystemIoUnitFanIndex.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanIndex.setDescription('Index used for navigating the rows 1..2 of ioUnitFan Table')
controlSystemIoUnitFanSpeedValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedValue.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedValue.setDescription('The measured fan speed')
controlSystemIoUnitFanSpeedDeviation = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedDeviation.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanSpeedDeviation.setDescription('The measured fan speed deviation')
controlSystemIoUnitFanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 7, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlSystemIoUnitFanControl.setStatus('current')
if mibBuilder.loadTexts: controlSystemIoUnitFanControl.setDescription('Fan speed control value in percentage')
controlUnitNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: controlUnitNumberOfUnits.setDescription('Total number of control units installed in system.')
controlUnitTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2), )
if mibBuilder.loadTexts: controlUnitTable.setStatus('current')
if mibBuilder.loadTexts: controlUnitTable.setDescription('A table containing an inventory listing. Each row represent one of the system hardware \n\t\tunit that is connected to the can bus. These units are system controllers, \n\t\tbattery monitors, I/O units, AC Mains Monitor boxes and load monitors.  Due to the system \n\t\tarchitechture the tables index are not contiguous. Each unit type har its own address \n\t\trange on the can bus.  All unit types except the system controller may contain \n\t\tfrom 0 to 14 units.  The system controlller can never be zero.  Then there is no powersystem.\n\t\t\n\t\t')
controlUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1), ).setIndexNames((0, "SP2-MIB", "controlUnitIndex"))
if mibBuilder.loadTexts: controlUnitEntry.setStatus('current')
if mibBuilder.loadTexts: controlUnitEntry.setDescription('One row  in the table containing all hardware units connected to the canbus.   ')
controlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254)))
if mibBuilder.loadTexts: controlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: controlUnitIndex.setDescription('Index used for navigating the rows  of controlUnitTable\n\t\tThe size of the table is defined by the controlUnitNumberOfUnits   ')
controlUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitDescription.setStatus('current')
if mibBuilder.loadTexts: controlUnitDescription.setDescription('A textual description of the control unit')
controlUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitStatus.setStatus('current')
if mibBuilder.loadTexts: controlUnitStatus.setDescription('The overall status of the control unit.')
controlUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSerialNumber.setStatus('current')
if mibBuilder.loadTexts: controlUnitSerialNumber.setDescription('Serial number of the control unit.')
controlUnitHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: controlUnitHwPartNumber.setDescription('Hardware part number of the control unit.')
controlUnitHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitHwVersion.setStatus('current')
if mibBuilder.loadTexts: controlUnitHwVersion.setDescription('Hardware version of the control unit.')
controlUnitSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: controlUnitSwPartNumber.setDescription('Software part number of the control unit.')
controlUnitSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 8, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: controlUnitSwVersion.setStatus('current')
if mibBuilder.loadTexts: controlUnitSwVersion.setDescription('Software version of the control unit.')
currentMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorsNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: currentMonitorsNumberOfUnits.setDescription('This is the number of current monitors installed in the system.')
currentMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2), )
if mibBuilder.loadTexts: currentMonitorsTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorsTable.setDescription('')
currentMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"))
if mibBuilder.loadTexts: currentMonitorsEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorsEntry.setDescription('')
currentMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: currentMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorIndex.setDescription('Index used for navigating the rows of currentMonitorsTable\n\t\tThe size of the table is defined by the system')
currentMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("stdLoadMonitor", 1), ("loadCurrMonitor", 2), ("rectCurrMonitor", 3), ("dcdcCurrMonitor", 4), ("solarCurrMonitor", 5), ("windCurrMonitor", 6), ("fuelcellCurrMonitor", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorType.setStatus('current')
if mibBuilder.loadTexts: currentMonitorType.setDescription('This shows if the current monitor is configured as standard load monitor (1), load current \n\t\tmonitor (2), rectifier current monitor (3), dcdc current monitor (4), solar current monitor (5),\n\t\twind current monitor (6) or fuel cell current monitor (7).')
currentMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorId.setStatus('current')
if mibBuilder.loadTexts: currentMonitorId.setDescription('This is the unit index for each current monitor type.')
currentMonitorNumberOfFuses = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorNumberOfFuses.setStatus('current')
if mibBuilder.loadTexts: currentMonitorNumberOfFuses.setDescription('Number of fuse measurements in current monitor.')
currentMonitorNumberOfCurrents = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: currentMonitorNumberOfCurrents.setDescription('Number of current measurements in current monitor.')
currentMonitorFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3), )
if mibBuilder.loadTexts: currentMonitorFuseTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseTable.setDescription('')
currentMonitorFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorFuseIndex"))
if mibBuilder.loadTexts: currentMonitorFuseEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseEntry.setDescription('')
currentMonitorFuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: currentMonitorFuseIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseIndex.setDescription('Index used for navigating the rows  of currentMonitorFuseTable\n\t\tThe size of the table is defined by the currentMonitorNumberOfFuses')
currentMonitorFuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorFuseStatus.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseStatus.setDescription('The status of fuse in current monitor')
currentMonitorFuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorFuseDescription.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseDescription.setDescription('A textual description of the fuse monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
currentMonitorFuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentMonitorFuseTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
currentMonitorFuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorFuseAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
currentMonitorFuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorFuseValue.setStatus('current')
if mibBuilder.loadTexts: currentMonitorFuseValue.setDescription('The measured fuse value.')
currentMonitorCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4), )
if mibBuilder.loadTexts: currentMonitorCurrentTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentTable.setDescription('')
currentMonitorCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"))
if mibBuilder.loadTexts: currentMonitorCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentEntry.setDescription('')
currentMonitorCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: currentMonitorCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentIndex.setDescription('Index used for navigating the rows  of currentMonitorCurrentTable\n\t\tThe size of the table is defined by the currentMonitorNumberOfCurrents')
currentMonitorCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentStatus.setDescription('The status of current in current monitor')
currentMonitorCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentDescription.setDescription('A textual description of the current monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
currentMonitorCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: currentMonitorCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
currentMonitorCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
currentMonitorCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorCurrentValue.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentValue.setDescription('The measured current value.')
currentMonitorCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentMajorAlarmLevel.setDescription('The major alarm limit')
currentMonitorCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currentMonitorCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: currentMonitorCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
currentMonitorEnergyLogAccumulatedTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5), )
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedTable.setDescription('This table contains the accumulated energy consumption measured in current monitor')
currentMonitorEnergyLogAccumulatedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulatedEntry.setDescription('')
currentMonitorEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogAccumulated.setDescription('The accumulated energy consumption value')
currentMonitorEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in hourly energy log')
currentMonitorEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursTable.setDescription('This table contains energy consumption values logged every hour in current monitor.')
currentMonitorEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursEntry.setDescription('')
currentMonitorEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of currentMonitorEnergyLogLastHoursTable')
currentMonitorEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastHoursValue.setDescription('Energy consumption value logged every hour in current monitor.')
currentMonitorEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily energy log')
currentMonitorEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysTable.setDescription('This table contains energy consumption values logged every day in current monitor.')
currentMonitorEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysEntry.setDescription('')
currentMonitorEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of currentMonitorEnergyLogLastDaysTable')
currentMonitorEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastDaysValue.setDescription('Energy consumption value logged every day in current monitor.')
currentMonitorEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weekly energy log')
currentMonitorEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11), )
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksTable.setDescription('This table contains energy consumption values logged every week in current monitor.')
currentMonitorEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1), ).setIndexNames((0, "SP2-MIB", "currentMonitorIndex"), (0, "SP2-MIB", "currentMonitorCurrentIndex"), (0, "SP2-MIB", "currentMonitorEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksEntry.setDescription('')
currentMonitorEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of currentMonitorEnergyLogLastWeekTable')
currentMonitorEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 9, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: currentMonitorEnergyLogLastWeeksValue.setDescription('Energy consumption value logged every week in current monitor.')
flexiMonitorsNumberOfUnits = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorsNumberOfUnits.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorsNumberOfUnits.setDescription('This is the number of fleximonitors installed in the system.')
flexiMonitorsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2), )
if mibBuilder.loadTexts: flexiMonitorsTable.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorsTable.setDescription('')
flexiMonitorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"))
if mibBuilder.loadTexts: flexiMonitorsEntry.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorsEntry.setDescription('')
flexiMonitorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: flexiMonitorIndex.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorIndex.setDescription('Index used for navigating the rows of flexiMonitorsTable\n\t\tThe size of the table is defined by the system')
flexiMonitorType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("battFlexiMonitor", 1), ("loadFlexiMonitor", 2), ("rectFlexiMonitor", 3), ("contrFlexiMonitor", 4), ("dcdcFlexiMonitor", 5), ("solarFlexiMonitor", 6), ("windFlexiMonitor", 7), ("fuelcFlexiMonitor", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorType.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorType.setDescription('This shows if the fleximonitor is configured as battery monitor (1), load \n\t\tmonitor (2), rectifier monitor (3), controller monitor(4), dcdc monitor (5), solar monitor (6),\n\t\twind monitor (7) or fuel cell monitor 8).')
flexiMonitorId = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorId.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorId.setDescription('This is the unit index for each fleximonitor type.')
flexiMonitorNumberOfInputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorNumberOfInputs.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorNumberOfInputs.setDescription('Number of inputs in fleximonitor.')
flexiMonitorNumberOfOutputs = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorNumberOfOutputs.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorNumberOfOutputs.setDescription('Number of outputs in fleximonitor.')
flexiMonitorInputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3), )
if mibBuilder.loadTexts: flexiMonitorInputTable.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputTable.setDescription('')
flexiMonitorInputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"), (0, "SP2-MIB", "flexiMonitorInputIndex"))
if mibBuilder.loadTexts: flexiMonitorInputEntry.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputEntry.setDescription('')
flexiMonitorInputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: flexiMonitorInputIndex.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputIndex.setDescription('Index used for navigating the rows  of flexiMonitorInputTable\n\t\tThe size of the table is defined by the flexiMonitorNumberOfInputs')
flexiMonitorInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorInputStatus.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputStatus.setDescription('Programmable input status.\n\t\t')
flexiMonitorInputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputDescription.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputDescription.setDescription('A textual description of the programmable input. This is stored in the system controller\n\t\tand can be changed by the user.  .')
flexiMonitorInputTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flexiMonitorInputTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
flexiMonitorInputAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputAlarmEnable.setDescription("This will enable or disable this inputs Alarm functionality.\n\t\tSetting 'disabled' here will turn off lock the status to 'disabled' state")
flexiMonitorInputValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorInputValue.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputValue.setDescription('The inputs measured Value. Depending on the type of input, this may\n\t\t represent a Voltage, a Temperature, a Current, a Speed or a Boolean value.')
flexiMonitorInputConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("progIn-NormallyOpen", 1), ("progIn-NormallyClosed", 2), ("voltage", 3), ("temperature", 4), ("current", 5), ("speed", 6), ("fuse-NormallyOpen", 7), ("fuse-NormallyClosed", 8), ("fuse-DiodeMatrix", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorInputConfiguration.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorInputConfiguration.setDescription('Configuration of the input type. Available configurations are: ProgIn-Normally Open(1), ProgIn-Normally Closed(2),\n\t\tVoltage(3), Temperature(4),Current(5),Speed(6),Fuse-Normally Open(7),Fuse-Normally Closed(8), Fuse-Diode Matrix(9).')
flexiMonitorOutputTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4), )
if mibBuilder.loadTexts: flexiMonitorOutputTable.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorOutputTable.setDescription('')
flexiMonitorOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1), ).setIndexNames((0, "SP2-MIB", "flexiMonitorIndex"), (0, "SP2-MIB", "flexiMonitorOutputIndex"))
if mibBuilder.loadTexts: flexiMonitorOutputEntry.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorOutputEntry.setDescription('')
flexiMonitorOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: flexiMonitorOutputIndex.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorOutputIndex.setDescription('Index used for navigating the rows  of flexiMonitorOutputTable\n\t\tThe size of the table is defined by the flexiMonitorNumberOfOutputs')
flexiMonitorOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notenergized", 0), ("energized", 1), ("disconnected", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorOutputStatus.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorOutputStatus.setDescription("General output relays may be 'energized' or 'not energized'. 'energized' and \n\t\t'not energized' correspond \n\t\tto normal and alarm condition respectively for normally\n\t\tactivated configuration. \n\t\tLatched contactors may have values 'disconnected' or 'connected'")
flexiMonitorOutputDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 10, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorOutputDescription.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorOutputDescription.setDescription('A textual description of the output. This is stored in the system controller\n\t\tand can be changed by the user. ')
mainControlUnitsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1), )
if mibBuilder.loadTexts: mainControlUnitsTable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsTable.setDescription('')
mainControlUnitsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"))
if mibBuilder.loadTexts: mainControlUnitsEntry.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsEntry.setDescription('')
mainControlUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14)))
if mibBuilder.loadTexts: mainControlUnitIndex.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitIndex.setDescription('Index used for navigating the rows of controlUnitTable\n\t\tThe size of the table is defined by the system')
mainControlUnitNumberOfTemperatures = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitNumberOfTemperatures.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitNumberOfTemperatures.setDescription('Total number of temperature measurements in main controller')
mainControlUnitTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2), )
if mibBuilder.loadTexts: mainControlUnitTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureTable.setDescription('')
mainControlUnitTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"), (0, "SP2-MIB", "mainControlUnitTemperatureIndex"))
if mibBuilder.loadTexts: mainControlUnitTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureEntry.setDescription('')
mainControlUnitTemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: mainControlUnitTemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureIndex.setDescription('This index denotes which row in the temperature input table.\n\t\tThe size of the table is defined by the batteryBankNumberOfTemp   ')
mainControlUnitTemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureStatus.setDescription('The status of battery temperature monitor')
mainControlUnitTemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureDescription.setDescription('A textual description of the battery temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
mainControlUnitTemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainControlUnitTemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainControlUnitTemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureValue.setDescription('The measured battery temperature.')
mainControlUnitTemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorHighLevel.setDescription('The major high alarm limit')
mainControlUnitTemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
mainControlUnitTemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
mainControlUnitTemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitTemperatureMajorLowLevel.setDescription('The major low alarm limit')
mainControlUnitEarthFaultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3), )
if mibBuilder.loadTexts: mainControlUnitEarthFaultTable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultTable.setDescription('')
mainControlUnitEarthFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1), ).setIndexNames((0, "SP2-MIB", "mainControlUnitIndex"))
if mibBuilder.loadTexts: mainControlUnitEarthFaultEntry.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultEntry.setDescription('')
mainControlUnitEarthFaultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitEarthFaultStatus.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultStatus.setDescription('This status value shows if the earth resistance is lower than the defined alarm level.')
mainControlUnitEarthFaultDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultDescription.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultDescription.setDescription('A textual description of the earth fault monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainControlUnitEarthFaultTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitEarthFaultTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainControlUnitEarthFaultAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainControlUnitEarthFaultValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitEarthFaultValue.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultValue.setDescription('The measured value of the earth resistance in kOhm.')
mainControlUnitEarthFaultMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 13, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitEarthFaultMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitEarthFaultMajorAlarmLevel.setDescription('The major alarm limit')
mainControlUnitsErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitsErrorStatus.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorStatus.setDescription('This status value shows if the number of failed main controllers is higher than the defined alarm level.')
mainControlUnitsErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorDescription.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorDescription.setDescription('A textual description of the main control units error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainControlUnitsErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainControlUnitsErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainControlUnitsErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainControlUnitsErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainControlUnitsErrorValue.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorValue.setDescription('The detected number of failed main controllers.')
mainControlUnitsErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorMajorAlarmLevel.setDescription('The major alarm limit')
mainControlUnitsErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainControlUnitsErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainControlUnitsErrorMinorAlarmLevel.setDescription('The minor alarm limit')
smartNodeErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartNodeErrorStatus.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorStatus.setDescription('This status value shows if the number of failed smartnodes is higher than the defined alarm level.')
smartNodeErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorDescription.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorDescription.setDescription('A textual description of the smartnode error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
smartNodeErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smartNodeErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
smartNodeErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
smartNodeErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smartNodeErrorValue.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorValue.setDescription('The detected number of failed smartnodes.')
smartNodeErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorMajorAlarmLevel.setDescription('The major alarm limit')
smartNodeErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smartNodeErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: smartNodeErrorMinorAlarmLevel.setDescription('The minor alarm limit')
batteryMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorErrorStatus.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorStatus.setDescription('This status value shows if the number of failed battery monitors is higher than the defined alarm level.')
batteryMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorDescription.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorDescription.setDescription('A textual description of the battery monitor error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryMonitorErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryMonitorErrorValue.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorValue.setDescription('The detected number of failed battery monitors.')
batteryMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorMajorAlarmLevel.setDescription('The major alarm limit')
batteryMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryMonitorErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryMonitorErrorMinorAlarmLevel.setDescription('The minor alarm limit')
loadMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorErrorStatus.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorStatus.setDescription('This status value shows if the number of failed load monitors is higher than the defined alarm level.')
loadMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorDescription.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorDescription.setDescription('A textual description of the load monitor error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
loadMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: loadMonitorErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
loadMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
loadMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: loadMonitorErrorValue.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorValue.setDescription('The detected number of failed load monitors.')
loadMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorMajorAlarmLevel.setDescription('The major alarm limit')
loadMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: loadMonitorErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: loadMonitorErrorMinorAlarmLevel.setDescription('The minor alarm limit')
ioUnitErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitErrorStatus.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorStatus.setDescription('This status value shows if the number of failed IO units is higher than the defined alarm level.')
ioUnitErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorDescription.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorDescription.setDescription('A textual description of the IO unit error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
ioUnitErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ioUnitErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
ioUnitErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
ioUnitErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ioUnitErrorValue.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorValue.setDescription('The detected number of failed IO units.')
ioUnitErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorMajorAlarmLevel.setDescription('The major alarm limit')
ioUnitErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ioUnitErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: ioUnitErrorMinorAlarmLevel.setDescription('The minor alarm limit')
mainsMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorErrorStatus.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorStatus.setDescription('This status value shows if the number of failed mains monitors is higher than the defined alarm level.')
mainsMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorDescription.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorDescription.setDescription('A textual description of the mains monitor error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
mainsMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: mainsMonitorErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
mainsMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
mainsMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mainsMonitorErrorValue.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorValue.setDescription('The detected number of failed mains monitors.')
mainsMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorMajorAlarmLevel.setDescription('The major alarm limit')
mainsMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainsMonitorErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: mainsMonitorErrorMinorAlarmLevel.setDescription('The minor alarm limit')
flexiMonitorErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorErrorStatus.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorStatus.setDescription('This status value shows if the number of failed flexi monitors is higher than the defined alarm level.')
flexiMonitorErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorDescription.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorDescription.setDescription('A textual description of the flexi monitor error monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
flexiMonitorErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: flexiMonitorErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
flexiMonitorErrorAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
flexiMonitorErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: flexiMonitorErrorValue.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorValue.setDescription('The detected number of failed flexi monitors.')
flexiMonitorErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorMajorAlarmLevel.setDescription('The major alarm limit')
flexiMonitorErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 12, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: flexiMonitorErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: flexiMonitorErrorMinorAlarmLevel.setDescription('The minor alarm limit')
ambientTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ambientTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureStatus.setDescription('The state of the ambient temperature can be either one of the defined enumerated values')
ambientTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureDescription.setDescription('A textual description of the ambient temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
ambientTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ambientTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
ambientTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
ambientTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ambientTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureValue.setDescription('The highest value of the enabled ambient temperature measurements.\n\t\tDepending on the global setting in the Control unit, this value will be presented in Celsius\n\t\tor Fahrenheit.')
ambientTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureMajorHighLevel.setDescription('The major high alarm limit')
ambientTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
ambientTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
ambientTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 13, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ambientTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: ambientTemperatureMajorLowLevel.setDescription('The major low alarm limit')
deltaTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deltaTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureStatus.setDescription('The state of the delta temperature can be either one of the defined enumerated values')
deltaTemperatureDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureDescription.setDescription('A textual description of the delta temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
deltaTemperatureTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: deltaTemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
deltaTemperatureAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
deltaTemperatureValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deltaTemperatureValue.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureValue.setDescription('The delta temperature value.\n\t\tDepending on the global setting in the Control unit, this value will be presented in Celsius\n\t\tor Fahrenheit.')
deltaTemperatureMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureMajorHighLevel.setDescription('The major high alarm limit')
deltaTemperatureMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureMinorHighLevel.setDescription('The minor high alarm limit')
deltaTemperatureMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureMinorLowLevel.setDescription('The minor low alarm limit')
deltaTemperatureMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 14, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: deltaTemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: deltaTemperatureMajorLowLevel.setDescription('The major low alarm limit')
userSuspendedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSuspendedStatus.setStatus('current')
if mibBuilder.loadTexts: userSuspendedStatus.setDescription('This status value shows if the number of failed attempts is higher than the defined alarm level.')
userSuspendedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedDescription.setStatus('current')
if mibBuilder.loadTexts: userSuspendedDescription.setDescription('A textual description of the login failure monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
userSuspendedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userSuspendedTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: userSuspendedTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
userSuspendedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: userSuspendedAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
userSuspendedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userSuspendedValue.setStatus('current')
if mibBuilder.loadTexts: userSuspendedValue.setDescription('The detected number of failed attempts.')
userSuspendedMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 13, 15, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSuspendedMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: userSuspendedMajorAlarmLevel.setDescription('The major alarm limit')
alarmGroupTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1), )
if mibBuilder.loadTexts: alarmGroupTable.setStatus('current')
if mibBuilder.loadTexts: alarmGroupTable.setDescription('')
alarmGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1), ).setIndexNames((0, "SP2-MIB", "alarmGroupIndex"))
if mibBuilder.loadTexts: alarmGroupEntry.setStatus('current')
if mibBuilder.loadTexts: alarmGroupEntry.setDescription('')
alarmGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 49)))
if mibBuilder.loadTexts: alarmGroupIndex.setStatus('current')
if mibBuilder.loadTexts: alarmGroupIndex.setDescription('Index used for navigating the rows 1..49 of alarmGroupTable')
alarmGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("alarm", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: alarmGroupStatus.setStatus('current')
if mibBuilder.loadTexts: alarmGroupStatus.setDescription('The status of alarm group')
alarmGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmGroupDescription.setStatus('current')
if mibBuilder.loadTexts: alarmGroupDescription.setDescription('A textual description of the alarm group. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryGroup2Status = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2Status.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2Status.setDescription("A toplevel status for the battery group 2.The state of this reflects the status of all \n\t\tunderlying statuses for the battery. Any change in one of the 'data monitors' in \n\t\tthe battery subsystem will propagate up to this status indicator.")
batteryGroup2Description = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2Description.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2Description.setDescription('A descriptive name of the battery installed in the battery group 2.')
batteryGroup2ReferenceVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(840, 60417))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ReferenceVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2ReferenceVoltage.setDescription('The reference voltage of battery group 2.')
batteryGroup2FusesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FusesStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FusesStatus.setDescription('The state of the battery fuses/breakers can mainly be normal(1) or majorAlarm(3) and  \n\t\tsome other rarely used values .')
batteryGroup2VoltageStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2VoltageStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageStatus.setDescription('The status of the measured battery voltage.')
batteryGroup2VoltageDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageDescription.setDescription('A textual description of the battery voltage monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryGroup2VoltageTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2VoltageTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2VoltageAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageAlarmEnable.setDescription('The measured battery voltage alarm enable/disable control')
batteryGroup2VoltageValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2VoltageValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageValue.setDescription('The value of the measured battery voltage.')
batteryGroup2VoltageMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageMajorHighLevel.setDescription('The Major High Battery Voltage alarm limit set voltage')
batteryGroup2VoltageMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageMinorHighLevel.setDescription('The Minor High Battery Voltage alarm limit set voltage')
batteryGroup2VoltageMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageMinorLowLevel.setDescription('The Minor Low Battery Voltage alarm limit set voltage')
batteryGroup2VoltageMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2VoltageMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2VoltageMajorLowLevel.setDescription('The Major Low Battery Voltage alarm limit set voltage')
batteryGroup2CurrentsStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentsStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsStatus.setDescription('The status of the measured battery current')
batteryGroup2CurrentsDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsDescription.setDescription('A textual description of the battery current monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryGroup2CurrentsTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2CurrentsTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2CurrentsAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2CurrentsValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentsValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsValue.setDescription('The measured total battery current.\n\t\tThis is the sum of all the enabled shunt measurements in the system.\n\t\tNegative battery current indicates discharging of the batteries.\n\t\tPositive battery current indicates charging of the batteries.\n\t\tNote that the units measured may be i Amperes or in Deciamperes depending on global system settings')
batteryGroup2CurrentsMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorHighLevel.setDescription('The major high alarm limit')
batteryGroup2CurrentsMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2CurrentsMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2CurrentsMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentsMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2TemperaturesStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperaturesStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesStatus.setDescription('The state of the battery fuses/breakers can be either one of the defined enumerated values')
batteryGroup2TemperaturesDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesDescription.setDescription('A textual description of the battery temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryGroup2TemperaturesTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TemperaturesTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2TemperaturesAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2TemperaturesValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperaturesValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesValue.setDescription('The highest value of the enabled battery temperature measurements.\n\t\tDepending on the global setting in the Control unit, this value will be presented in Celsius\n\t\tor Fahrenheit.')
batteryGroup2TemperaturesMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorHighLevel.setDescription('The major high alarm limit')
batteryGroup2TemperaturesMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2TemperaturesMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2TemperaturesMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 7, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperaturesMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2TimeLeftStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TimeLeftStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftStatus.setDescription('The status of the estimated battery remaining backup time.')
batteryGroup2TimeLeftDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftDescription.setDescription('A textual description of the battery discharge time monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryGroup2TimeLeftTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TimeLeftTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2TimeLeftAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2TimeLeftValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TimeLeftValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftValue.setDescription('The estimated value of battery remaining backup time.')
batteryGroup2TimeLeftMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftMinorAlarmLevel.setDescription('The minor alarm limit')
batteryGroup2TimeLeftMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 8, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TimeLeftMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TimeLeftMajorAlarmLevel.setDescription('The major alarm limit')
batteryGroup2RemainingCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityStatus.setDescription('The status of the battery remaining capacity monitor.')
batteryGroup2RemainingCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityDescription.setDescription('A textual description of the battery remaining capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryGroup2RemainingCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2RemainingCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2RemainingCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityValue.setDescription('Battery remaining capacity (SOC) value estimated from the latest battery test result.')
batteryGroup2RemainingCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2RemainingCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 9, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2RemainingCapacityMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2UsedCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityStatus.setDescription('The status of the battery used capacity (DoD) monitor')
batteryGroup2UsedCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityDescription.setDescription('A textual description of the battery used capacity (DoD) monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryGroup2UsedCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2UsedCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2UsedCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityValue.setDescription('This is the estimated battery used capacity (DoD).')
batteryGroup2UsedCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMajorAlarmLevel.setDescription('The major alarm limit')
batteryGroup2UsedCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 10, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2UsedCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
batteryGroup2TotalCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityStatus.setDescription('The status of the total capacity monitor.')
batteryGroup2TotalCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityDescription.setDescription('A textual description of the battery total capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryGroup2TotalCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2TotalCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2TotalCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityValue.setDescription('This is the estimated total battery capacity (installed Ah - SoH) value.')
batteryGroup2TotalCapacityMinorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2TotalCapacityMajorLowLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 11, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TotalCapacityMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2QualityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2QualityStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityStatus.setDescription('The status of the battery quality (SoH) monitor.')
batteryGroup2QualityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityDescription.setDescription('A textual description of the battery quality (SoH) monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryGroup2QualityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2QualityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2QualityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2QualityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2QualityValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityValue.setDescription('The calculated battery quality (SoH) based on the latest battery test')
batteryGroup2QualityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityMinorAlarmLevel.setDescription('The minor alarm limit')
batteryGroup2QualityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 12, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2QualityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2QualityMajorAlarmLevel.setDescription('The major alarm limit')
batteryGroup2LVBDStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2LVBDStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDStatus.setDescription('The Battery Contactor is connected, disconnected, disabled or in any other alarm condition')
batteryGroup2LVBDDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDDescription.setDescription('A textual description of the battery LVBD monitor. This is stored in the system controller\n\t\tand can be changed by the user.  ')
batteryGroup2LVBDTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2LVBDTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2LVBDEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDEnable.setDescription('This value once enabled, the alarm condition of the LVBD will be reported.')
batteryGroup2LVBDValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2LVBDValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDValue.setDescription('The measured value of the LVBD.')
batteryGroup2LVBDConnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDConnectVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDConnectVoltage.setDescription("The Battery Contactor's Reconnect Voltage")
batteryGroup2LVBDDisconnectVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 13, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2LVBDDisconnectVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2LVBDDisconnectVoltage.setDescription("The Battery Contactor's Disconnect Voltage")
batteryGroup2ChargeCurrentLimitEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitEnable.setDescription('Enable/disable of the battery charge current limitation feature; 0=disable, 1=enable.')
batteryGroup2ChargeCurrentLimitValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 14, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2ChargeCurrentLimitValue.setDescription('Battery charging current limit value. Used only when AC source is mains feed.\n\t\tNote that the units measured may be i Amperes or in Deciamperes depending on global system settings')
batteryGroup2BoostVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BoostVoltage.setDescription('The Voltage at which the DC System boost charges the batteries.')
batteryGroup2BoostCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startboost", 1), ("stopboost", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostCommand.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BoostCommand.setDescription('This pushbutton will start or stop a manual battery boost if the system allows it.')
batteryGroup2BoostCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BoostCurrentThreshold.setDescription('The boosting will terminate when the charge current drops below the BoostCurrentThreshold limit.')
batteryGroup2BoostManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 15, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BoostManualMaxDuration.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BoostManualMaxDuration.setDescription('A protection against overcharging.  \n\t\tWhen running manual boost, the boosting will always terminate at this point.  ')
batteryGroup2TestVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TestVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestVoltage.setDescription('This is the battery test end voltage. The battery test will be terminated when the voltage\n\t\tdrops below the end voltage.')
batteryGroup2TestCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("starttest", 1), ("stoptest", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TestCommand.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestCommand.setDescription('This pushbutton will start or stop a manual battery test if the system allows it.')
batteryGroup2TestNumberOfResults = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestNumberOfResults.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestNumberOfResults.setDescription('This is the number of valid battery test results stored in controller.')
batteryGroup2TestResultTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4), )
if mibBuilder.loadTexts: batteryGroup2TestResultTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultTable.setDescription('This table contains the battery test results stored in controller.')
batteryGroup2TestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2TestResultIndex"))
if mibBuilder.loadTexts: batteryGroup2TestResultEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultEntry.setDescription('')
batteryGroup2TestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: batteryGroup2TestResultIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultIndex.setDescription('A index pointing to one of ten possible battery test results')
batteryGroup2TestResultStartDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultStartDateTime.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultStartDateTime.setDescription('This is the time and date when the test started.')
batteryGroup2TestResultDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultDuration.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultDuration.setDescription('This is the test duration in minutes.')
batteryGroup2TestResultDischarged = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultDischarged.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultDischarged.setDescription('This is the discharged Ah during test.')
batteryGroup2TestResultQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 16, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TestResultQuality.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TestResultQuality.setDescription('This is the calculated battery quality (SoH)in percentage.')
batteryGroup2TempCompEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TempCompEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TempCompEnable.setDescription('Enable (1) or Disable (0)  of Battery Temperature Compensated output regulation mode')
batteryGroup2BankStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankStatus.setDescription('The overall status of battery bank')
batteryGroup2BankNumberOfTemperatures = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfTemperatures.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankNumberOfTemperatures.setDescription('Number of temperature measurements in battery bank.')
batteryGroup2BankNumberOfCurrents = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfCurrents.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankNumberOfCurrents.setDescription('Number of current measurements in battery bank.')
batteryGroup2BankNumberOfFuses = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfFuses.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankNumberOfFuses.setDescription('Number of fuses installed in battery bank.')
batteryGroup2BankNumberOfSymmetries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankNumberOfSymmetries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankNumberOfSymmetries.setDescription('Number of fuses installed in battery bank.')
batteryGroup2BankTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6), )
if mibBuilder.loadTexts: batteryGroup2BankTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankTemperatureTable.setDescription('')
batteryGroup2BankTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2TemperatureIndex"))
if mibBuilder.loadTexts: batteryGroup2BankTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankTemperatureEntry.setDescription('')
batteryGroup2TemperatureIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2TemperatureIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureIndex.setDescription('This index denotes which row in the temperature input table.\n\t\tThe size of the table is defined by the batteryGroup2BankNumberOfTemperatures   ')
batteryGroup2TemperatureStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureStatus.setDescription('The status of battery temperature monitor')
batteryGroup2TemperatureDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureDescription.setDescription('A textual description of the battery temperature monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryGroup2TemperatureTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2TemperatureTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2TemperatureAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2TemperatureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2TemperatureValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureValue.setDescription('The measured battery temperature.')
batteryGroup2TemperatureMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorHighLevel.setDescription('The major high alarm limit')
batteryGroup2TemperatureMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2TemperatureMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2TemperatureMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2TemperatureMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2BankCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7), )
if mibBuilder.loadTexts: batteryGroup2BankCurrentTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankCurrentTable.setDescription('')
batteryGroup2BankCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CurrentIndex"))
if mibBuilder.loadTexts: batteryGroup2BankCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankCurrentEntry.setDescription('')
batteryGroup2CurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2CurrentIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentIndex.setDescription('This index denotes which row in the current input table.\n\t\t        The size of the table is defined by the system')
batteryGroup2CurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentStatus.setDescription('The status of battery current monitor')
batteryGroup2CurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentDescription.setDescription('A textual description of the battery current monitor. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryGroup2CurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2CurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2CurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2CurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CurrentValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentValue.setDescription('The measured battery current')
batteryGroup2CurrentMajorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentMajorHighLevel.setDescription('The major high alarm limit')
batteryGroup2CurrentMinorHighLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2CurrentMinorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMinorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentMinorLowLevel.setDescription('The minor low alarm limit')
batteryGroup2CurrentMajorLowLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 7, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2CurrentMajorLowLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CurrentMajorLowLevel.setDescription('The major low alarm limit')
batteryGroup2BankFuseTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8), )
if mibBuilder.loadTexts: batteryGroup2BankFuseTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankFuseTable.setDescription('')
batteryGroup2BankFuseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2FuseIndex"))
if mibBuilder.loadTexts: batteryGroup2BankFuseEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankFuseEntry.setDescription('')
batteryGroup2FuseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: batteryGroup2FuseIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseIndex.setDescription('This index denotes which row in the fuse table.\n\t\t        The size of the table is defined by the system')
batteryGroup2FuseStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FuseStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseStatus.setDescription('The status of battery fuse monitor')
batteryGroup2FuseDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2FuseDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseDescription.setDescription('A textual description of the battery fuse monitor. This is stored in the system controller\n\t\tand can be changed by the user.')
batteryGroup2FuseTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2FuseTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off.')
batteryGroup2FuseAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2FuseAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2FuseValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2FuseValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2FuseValue.setDescription('The measured value of battery fuse input.')
batteryGroup2BankSymmetryTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9), )
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTable.setDescription('')
batteryGroup2BankSymmetryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2BankSymmetryIndex"))
if mibBuilder.loadTexts: batteryGroup2BankSymmetryEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryEntry.setDescription('')
batteryGroup2BankSymmetryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: batteryGroup2BankSymmetryIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryIndex.setDescription('This index denotes which row in the symmetry input table.\n\t\tThe size of the table is defined by the batteryMonitorNumberOfSymmetries')
batteryGroup2BankSymmetryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryStatus.setDescription('The status of battery symmetry monitor')
batteryGroup2BankSymmetryDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDescription.setDescription('A textual description of the battery monitor symmetry. This is stored in the system controller\n\t\tand can be changed by the user. ')
batteryGroup2BankSymmetryTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 4), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryTrapRepeatCounter.setDescription('The number of consecutive times this alam condition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2BankSymmetryAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2BankSymmetryMeasureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMeasureValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMeasureValue.setDescription('The measured battery symmetry voltage in battery monitor.')
batteryGroup2BankSymmetryDeltaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDeltaValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryDeltaValue.setDescription('The measured battery symmetry delta voltage in battery monitor.')
batteryGroup2BankSymmetryMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMajorAlarmLevel.setDescription('The major alarm limit')
batteryGroup2BankSymmetryMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 18, 9, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2BankSymmetryMinorAlarmLevel.setDescription('The minor alarm limit')
batteryGroup2EnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogAccumulated.setDescription('This is the accumulated energy delivered to/from battery.')
batteryGroup2EnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in battery hourly energy log.')
batteryGroup2EnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursTable.setDescription('This table contains hourly energy log of battery.')
batteryGroup2EnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursEntry.setDescription('')
batteryGroup2EnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastHoursTable')
batteryGroup2EnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
batteryGroup2EnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in battery daily energy log.')
batteryGroup2EnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysTable.setDescription('This table contains daily energy log of battery.')
batteryGroup2EnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysEntry.setDescription('')
batteryGroup2EnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastDaysTable')
batteryGroup2EnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastDaysValue.setDescription('Energy value logged every day.')
batteryGroup2EnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in battery weekly energy log.')
batteryGroup2EnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7), )
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of battery.')
batteryGroup2EnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2EnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksEntry.setDescription('')
batteryGroup2EnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of batteryEnergyLogLastWeekTable')
batteryGroup2EnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 19, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
batteryGroup2CycleLogTotalCycles = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogTotalCycles.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogTotalCycles.setDescription('This is the total number of battery discharge cycles.')
batteryGroup2CycleLogDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in daily battery discharge cycle log.')
batteryGroup2CycleLogDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3), )
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysTable.setDescription('This table contains daily battery discharge cycle log.')
batteryGroup2CycleLogDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogDaysIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysEntry.setDescription('')
batteryGroup2CycleLogDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastDaysTable')
batteryGroup2CycleLogDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogDaysValue.setDescription('Number of discharge cycles logged every day.')
batteryGroup2CycleLogWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in weeky battery discharge cycle log.')
batteryGroup2CycleLogWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5), )
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksTable.setDescription('This table contains weekly battery discharge cycle log.')
batteryGroup2CycleLogWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogWeeksIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksEntry.setDescription('')
batteryGroup2CycleLogWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastWeeksTable')
batteryGroup2CycleLogWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogWeeksValue.setDescription('Number of discharge cycles logged every week.')
batteryGroup2CycleLogMonthsNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsNumberOfEntries.setDescription('This is the maximal number of entries stored in monthly battery discharge cycle log.')
batteryGroup2CycleLogMonthsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7), )
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsTable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsTable.setDescription('This table contains monthly battery discharge cycle log.')
batteryGroup2CycleLogMonthsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1), ).setIndexNames((0, "SP2-MIB", "batteryGroup2CycleLogMonthsIndex"))
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsEntry.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsEntry.setDescription('')
batteryGroup2CycleLogMonthsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsIndex.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsIndex.setDescription('Index used for navigating the rows 1..52  of batteryCycleLogLastMonthTable')
batteryGroup2CycleLogMonthsValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 15, 20, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2CycleLogMonthsValue.setDescription('Number of discharge cycles logged every month.')
batteryGroup2EqualizeVoltage = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(870, 60418))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeVoltage.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EqualizeVoltage.setDescription('The Voltage at which the DC System equalize charges the batteries.')
batteryGroup2EqualizeCommand = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("pushbutton", 0), ("startequalize", 1), ("stopequalize", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeCommand.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EqualizeCommand.setDescription('This pushbutton will start or stop a manual battery equalize if the system allows it.')
batteryGroup2EqualizeCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EqualizeCurrentThreshold.setDescription('The equalizing will terminate when the charge current drops below the EqualizeCurrentThreshold limit.')
batteryGroup2EqualizeManualMaxDuration = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 21, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2EqualizeManualMaxDuration.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2EqualizeManualMaxDuration.setDescription('A protection against overcharging.  \n\t\tWhen running manual equalize, the boosting will always terminate at this point.  ')
batteryGroup2AhChargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhChargedStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedStatus.setDescription('The status of the battery ah charged monitor.')
batteryGroup2AhChargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedDescription.setDescription('A textual description of the battery ah charged monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryGroup2AhChargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2AhChargedTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2AhChargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2AhChargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhChargedValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedValue.setDescription('The calculated battery ah (x100) charged value.')
batteryGroup2AhChargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2AhChargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 22, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhChargedMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhChargedMajorHighLevel.setDescription('The major high alarm limit')
batteryGroup2AhDischargedStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhDischargedStatus.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedStatus.setDescription('The status of the battery ah discharged monitor.')
batteryGroup2AhDischargedDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedDescription.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedDescription.setDescription('A textual description of the battery ah discharged monitor. This is stored in the system controller\n\t\tand can be changed by the user')
batteryGroup2AhDischargedTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: batteryGroup2AhDischargedTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
batteryGroup2AhDischargedAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
batteryGroup2AhDischargedValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: batteryGroup2AhDischargedValue.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedValue.setDescription('The calculated battery ah (x100) discharged value.')
batteryGroup2AhDischargedMinorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedMinorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedMinorHighLevel.setDescription('The minor high alarm limit')
batteryGroup2AhDischargedMajorHighLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 15, 23, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: batteryGroup2AhDischargedMajorHighLevel.setStatus('current')
if mibBuilder.loadTexts: batteryGroup2AhDischargedMajorHighLevel.setDescription('The major high alarm limit')
invertersStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersStatus.setStatus('current')
if mibBuilder.loadTexts: invertersStatus.setDescription('The overall status of inverter subsystem.')
invertersCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentStatus.setDescription('The status of the measured total inverter current.')
invertersCurrentDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentDescription.setDescription('A textual description of the total inverter current monitor. This is stored in the system controller\n\t\tand can be changed by the user')
invertersCurrentTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
invertersCurrentAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
invertersCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCurrentValue.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentValue.setDescription('The value of the measured total inverter current.')
invertersCurrentMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentMajorAlarmLevel.setDescription('The major alarm limit')
invertersCurrentMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
invertersCapacityStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityStatus.setDescription('The status of the measured used inverter capacity.')
invertersCapacityDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityDescription.setDescription('A textual description of the used inverter capacity monitor. This is stored in the system controller\n\t\tand can be changed by the user')
invertersCapacityTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
invertersCapacityAlarmEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
invertersCapacityValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersCapacityValue.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityValue.setDescription('The used inverter capacity value presented in percentage of the total installed inverter capacity.')
invertersCapacityMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityMajorAlarmLevel.setDescription('The major alarm limit')
invertersCapacityMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
invertersErrorStatus = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersErrorStatus.setStatus('current')
if mibBuilder.loadTexts: invertersErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
invertersErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorDescription.setStatus('current')
if mibBuilder.loadTexts: invertersErrorDescription.setDescription('A textual description of the inverter error monitor. This is stored in the system controller\n\t\tand can be changed by the user')
invertersErrorTrapRepeatCounter = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 3), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: invertersErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: invertersErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
invertersErrorEnable = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorEnable.setStatus('current')
if mibBuilder.loadTexts: invertersErrorEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
invertersErrorValue = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersErrorValue.setStatus('current')
if mibBuilder.loadTexts: invertersErrorValue.setDescription('The number of failed inverters.')
invertersErrorMajorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersErrorMajorAlarmLevel.setDescription('The major alarm limit')
invertersErrorMinorAlarmLevel = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: invertersErrorMinorAlarmLevel.setDescription('The minor alarm limit')
invertersNumberOfInverters = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: invertersNumberOfInverters.setStatus('current')
if mibBuilder.loadTexts: invertersNumberOfInverters.setDescription('Number of installed inverters.')
inverterTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6), )
if mibBuilder.loadTexts: inverterTable.setStatus('current')
if mibBuilder.loadTexts: inverterTable.setDescription('This table shows the information of each inverter installed in the system.')
inverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1), ).setIndexNames((0, "SP2-MIB", "inverterIndex"))
if mibBuilder.loadTexts: inverterEntry.setStatus('current')
if mibBuilder.loadTexts: inverterEntry.setDescription('')
inverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: inverterIndex.setStatus('current')
if mibBuilder.loadTexts: inverterIndex.setDescription('Index used for navigating the rows 1..100  of inverterTable')
inverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterStatus.setStatus('current')
if mibBuilder.loadTexts: inverterStatus.setDescription('The overall status of inverter.')
inverterOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: inverterOutputCurrentValue.setDescription('The output current value of inverter.')
inverterOutputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: inverterOutputVoltageValue.setDescription('The output voltage value of inverter.')
inverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterType.setStatus('current')
if mibBuilder.loadTexts: inverterType.setDescription('Type of inverter')
inverterHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: inverterHwPartNumber.setDescription('Hardware part number of inverter')
inverterHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterHwVersion.setStatus('current')
if mibBuilder.loadTexts: inverterHwVersion.setDescription('Hardware version number of inverter')
inverterSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: inverterSwPartNumber.setDescription('Part number of secondary software in inverter')
inverterSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterSwVersion.setStatus('current')
if mibBuilder.loadTexts: inverterSwVersion.setDescription('Version number of secondary software in inverter')
inverterOutputFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputFrequencyValue.setStatus('current')
if mibBuilder.loadTexts: inverterOutputFrequencyValue.setDescription('The output frequency value of inverter.')
inverterOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputPowerValue.setStatus('current')
if mibBuilder.loadTexts: inverterOutputPowerValue.setDescription('The output power value of inverter.')
inverterOutputReactivePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterOutputReactivePowerValue.setStatus('current')
if mibBuilder.loadTexts: inverterOutputReactivePowerValue.setDescription('The output reactive power value of inverter.')
invertersNumberOfGroups = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersNumberOfGroups.setStatus('current')
if mibBuilder.loadTexts: invertersNumberOfGroups.setDescription('Number of inverter groups')
inverterGroupsTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8), )
if mibBuilder.loadTexts: inverterGroupsTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupsTable.setDescription('This table contains status and the number of installed inverters of each inverter groups.')
inverterGroupsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupsEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupsEntry.setDescription('')
inverterGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)))
if mibBuilder.loadTexts: inverterGroupIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupIndex.setDescription('Index used for navigating the rows 1..10  of inverterGroupsTable')
inverterGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupStatus.setStatus('current')
if mibBuilder.loadTexts: inverterGroupStatus.setDescription('The status of each inverter group.')
inverterGroupNumberOfInverters = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupNumberOfInverters.setStatus('current')
if mibBuilder.loadTexts: inverterGroupNumberOfInverters.setDescription('Number of installed inverters in each inverter groups')
inverterGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9), )
if mibBuilder.loadTexts: inverterGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentTable.setDescription('This table contains information about the total inverter current of each inverter groups, which is calculated \n\t\t by summing up current from each inverter in a inverter group.')
inverterGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentEntry.setDescription('')
inverterGroupCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentStatus.setDescription('The status of the measured total inverter current of the inverter group')
inverterGroupCurrentDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentDescription.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentDescription.setDescription('A textual description of the total inverter current monitor of a inverter group. This is stored in the system controller\n\t\tand can be changed by the user')
inverterGroupCurrentTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupCurrentTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
inverterGroupCurrentAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
inverterGroupCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCurrentValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentValue.setDescription('The value of the measured total inverter current of each inverter group.')
inverterGroupCurrentMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentMajorAlarmLevel.setDescription('The major alarm limit')
inverterGroupCurrentMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 9, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCurrentMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCurrentMinorAlarmLevel.setDescription('The minor alarm limit')
inverterGroupCapacityTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10), )
if mibBuilder.loadTexts: inverterGroupCapacityTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityTable.setDescription(' This table contains information about the used inverter capacity of each inverter group.')
inverterGroupCapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupCapacityEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityEntry.setDescription('')
inverterGroupCapacityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCapacityStatus.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityStatus.setDescription('The status of the measured used inverter capacity of each inverter group')
inverterGroupCapacityDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityDescription.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityDescription.setDescription('A textual description of the used inverter capacity monitor of each inverter group. This is stored in the system controller\n\t\tand can be changed by the user')
inverterGroupCapacityTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupCapacityTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
inverterGroupCapacityAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
inverterGroupCapacityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupCapacityValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityValue.setDescription('The used inverter capacity value presented in percentage of the total installed inverter capacity of each inverter group.')
inverterGroupCapacityMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityMajorAlarmLevel.setDescription('The major alarm limit')
inverterGroupCapacityMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupCapacityMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupCapacityMinorAlarmLevel.setDescription('The minor alarm limit')
inverterGroupErrorTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11), )
if mibBuilder.loadTexts: inverterGroupErrorTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorTable.setDescription(' This table contains information about the inverter error monitor of each inverter group.')
inverterGroupErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupErrorEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorEntry.setDescription('')
inverterGroupErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupErrorStatus.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorStatus.setDescription('This status value shows if the number of failed units is higher than the defined alarm level.')
inverterGroupErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorDescription.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorDescription.setDescription('A textual description of the inverter error monitor of each inverter group. This is stored in the system controller\n\t\tand can be changed by the user')
inverterGroupErrorTrapRepeatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: inverterGroupErrorTrapRepeatCounter.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorTrapRepeatCounter.setDescription('The number of consecutive times this alamcondition has been transmitted in a trap. \n\t\tWhen trap repetition is enabled, this counter increments every time this trap is repeated.  \n\t\tThe counter is automatically set to zero when the alarm condition is reset and the\n\t\talarm goes off')
inverterGroupErrorAlarmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorAlarmEnable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorAlarmEnable.setDescription('This value once enabled, the alarm condition of the monitor will be reported.')
inverterGroupErrorValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupErrorValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorValue.setDescription('The number of failed inverters of each inverter group.')
inverterGroupErrorMajorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorMajorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorMajorAlarmLevel.setDescription('The major alarm limit')
inverterGroupErrorMinorAlarmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 11, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inverterGroupErrorMinorAlarmLevel.setStatus('current')
if mibBuilder.loadTexts: inverterGroupErrorMinorAlarmLevel.setDescription('The minor alarm limit')
inverterGroupInverterTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12), )
if mibBuilder.loadTexts: inverterGroupInverterTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterTable.setDescription('This table shows the information of each inverter installed in each of the inverter group in the system.')
inverterGroupInverterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupInverterIndex"))
if mibBuilder.loadTexts: inverterGroupInverterEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterEntry.setDescription('')
inverterGroupInverterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: inverterGroupInverterIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterIndex.setDescription('Index used for navigating the rows 1..100  of inverterGroupinverterTable')
inverterGroupInverterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19))).clone(namedValues=NamedValues(("error", 0), ("normal", 1), ("minorAlarm", 2), ("majorAlarm", 3), ("disabled", 4), ("disconnected", 5), ("notPresent", 6), ("minorAndMajor", 7), ("majorLow", 8), ("minorLow", 9), ("majorHigh", 10), ("minorHigh", 11), ("event", 12), ("valueVolt", 13), ("valueAmp", 14), ("valueTemp", 15), ("valueUnit", 16), ("valuePerCent", 17), ("critical", 18), ("warning", 19)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterStatus.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterStatus.setDescription('The overall status of inverter.')
inverterGroupInverterOutputCurrentValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputCurrentValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterOutputCurrentValue.setDescription('The output current value of inverter.')
inverterGroupInverterOutputVoltageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputVoltageValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterOutputVoltageValue.setDescription('The output voltage value of inverter.')
inverterGroupInverterType = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterType.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterType.setDescription('Type of inverter')
inverterGroupInverterHwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterHwPartNumber.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterHwPartNumber.setDescription('Hardware part number of inverter')
inverterGroupInverterHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterHwVersion.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterHwVersion.setDescription('Hardware version number of inverter')
inverterGroupInverterSwPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterSwPartNumber.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterSwPartNumber.setDescription('Part number of secondary software in inverter')
inverterGroupInverterSwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterSwVersion.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterSwVersion.setDescription('Version number of secondary software in inverter')
inverterGroupInverterOutputFrequencyValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputFrequencyValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterOutputFrequencyValue.setDescription('The output frequency value of inverter.')
inverterGroupInverterOutputPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputPowerValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterOutputPowerValue.setDescription('The output power value of inverter.')
inverterGroupInverterOutputReactivePowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 12, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupInverterOutputReactivePowerValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupInverterOutputReactivePowerValue.setDescription('The output reactive power value of inverter.')
invertersEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogAccumulated.setDescription('This is the accumulated energy delivered from inverters.')
invertersEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter hourly energy log.')
invertersEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3), )
if mibBuilder.loadTexts: invertersEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of inverters.')
invertersEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastHoursEntry.setDescription('')
invertersEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of invertersEnergyLogLastHoursTable')
invertersEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
invertersEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter daily energy log.')
invertersEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5), )
if mibBuilder.loadTexts: invertersEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastDaysTable.setDescription('This table contains daily energy log of inverters.')
invertersEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastDaysEntry.setDescription('')
invertersEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of invertersEnergyLogLastDaysTable')
invertersEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
invertersEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter weekly energy log.')
invertersEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7), )
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of inverters.')
invertersEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1), ).setIndexNames((0, "SP2-MIB", "invertersEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksEntry.setDescription('')
invertersEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of invertersEnergyLogLastWeekTable')
invertersEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 13, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: invertersEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
inverterGroupEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14), )
if mibBuilder.loadTexts: inverterGroupEnergyLogTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogTable.setDescription(" This branch contains information about inverters' energy logs of each inverter group.")
inverterGroupEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogEntry.setDescription('')
inverterGroupEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogAccumulated.setDescription('This is the accumulated energy delivered from inverters of each inverter group.')
inverterGroupEnergyLogLastHoursNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter group hourly energy log.')
inverterGroupEnergyLogLastDaysNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter group daily energy log.')
inverterGroupEnergyLogLastWeeksNumberOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter group weekly energy log.')
inverterGroupEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursTable.setDescription('This table contains hourly energy log of each inverter group')
inverterGroupEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursEntry.setDescription('')
inverterGroupEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupEnergyLogLastHoursTable')
inverterGroupEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastHoursValue.setDescription('Energy value logged every hour.')
inverterGroupEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysTable.setDescription('This table contains daily energy log of each inverter group')
inverterGroupEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysEntry.setDescription('')
inverterGroupEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupEnergyLogLasDaysTable')
inverterGroupEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastDaysValue.setDescription('Energy value logged every day.')
inverterGroupEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17), )
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksTable.setDescription('This table contains weekly energy log of each inverter group')
inverterGroupEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksEntry.setDescription('')
inverterGroupEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupEnergyLogLastWeeksTable')
inverterGroupEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupEnergyLogLastWeeksValue.setDescription('Energy value logged every week.')
invertersReactiveEnergyLogAccumulated = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogAccumulated.setDescription('This is the accumulated reactive energy delivered from inverters.')
invertersReactiveEnergyLogLastHoursNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter hourly reactive energy log.')
invertersReactiveEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursTable.setDescription('This table contains hourly reactive energy log of inverters.')
invertersReactiveEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursEntry.setDescription('')
invertersReactiveEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of invertersReactiveEnergyLogLastHoursTable')
invertersReactiveEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastHoursValue.setDescription('Reactive energy value logged every hour.')
invertersReactiveEnergyLogLastDaysNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter daily reactive energy log.')
invertersReactiveEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysTable.setDescription('This table contains daily reactive energy log of inverters.')
invertersReactiveEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysEntry.setDescription('')
invertersReactiveEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of invertersReactiveEnergyLogLastDaysTable')
invertersReactiveEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastDaysValue.setDescription('Reactive energy value logged every day.')
invertersReactiveEnergyLogLastWeeksNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 52))).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksNumberOfEntries.setDescription('This is the maximal number of entries stored in inverter weekly reactive energy log.')
invertersReactiveEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7), )
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksTable.setDescription('This table contains weekly reactive energy log of inverters.')
invertersReactiveEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1), ).setIndexNames((0, "SP2-MIB", "invertersReactiveEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksEntry.setDescription('')
invertersReactiveEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of invertersReactiveEnergyLogLastWeekTable')
invertersReactiveEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 18, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: invertersReactiveEnergyLogLastWeeksValue.setDescription('Reactive energy value logged every week.')
inverterGroupReactiveEnergyLogTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogTable.setDescription(" This branch contains information about inverters' reactive energy logs of each inverter group.")
inverterGroupReactiveEnergyLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogEntry.setDescription('')
inverterGroupReactiveEnergyLogAccumulated = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogAccumulated.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogAccumulated.setDescription('This is the accumulated reactive energy delivered from inverters of each inverter group.')
inverterGroupReactiveEnergyLogLastHoursNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursNoOfEntries.setDescription('This is the maximal number of entries stored in inverter group hourly reactive energy log.')
inverterGroupReactiveEnergyLogLastDaysNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysNoOfEntries.setDescription('This is the maximal number of entries stored in inverter group daily reactive energy log.')
inverterGroupReactiveEnergyLogLastWeeksNoOfEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 19, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksNoOfEntries.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksNoOfEntries.setDescription('This is the maximal number of entries stored in inverter group weekly reactive energy log.')
inverterGroupReactiveEnergyLogLastHoursTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursTable.setDescription('This table contains hourly reactive energy log of each inverter group')
inverterGroupReactiveEnergyLogLastHoursEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastHoursIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursEntry.setDescription('')
inverterGroupReactiveEnergyLogLastHoursIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupReactiveEnergyLogLastHoursTable')
inverterGroupReactiveEnergyLogLastHoursValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 20, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastHoursValue.setDescription('Reactive energy value logged every hour.')
inverterGroupReactiveEnergyLogLastDaysTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysTable.setDescription('This table contains daily reactive energy log of each inverter group')
inverterGroupReactiveEnergyLogLastDaysEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastDaysIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysEntry.setDescription('')
inverterGroupReactiveEnergyLogLastDaysIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupReactiveEnergyLogLasDaysTable')
inverterGroupReactiveEnergyLogLastDaysValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 21, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastDaysValue.setDescription('Reactive energy value logged every day.')
inverterGroupReactiveEnergyLogLastWeeksTable = MibTable((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22), )
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksTable.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksTable.setDescription('This table contains weekly reactive energy log of each inverter group')
inverterGroupReactiveEnergyLogLastWeeksEntry = MibTableRow((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1), ).setIndexNames((0, "SP2-MIB", "inverterGroupIndex"), (0, "SP2-MIB", "inverterGroupReactiveEnergyLogLastWeeksIndex"))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksEntry.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksEntry.setDescription('')
inverterGroupReactiveEnergyLogLastWeeksIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)))
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksIndex.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksIndex.setDescription('Index used for navigating the rows 1..52  of inverterGroupReactiveEnergyLogLastWeeksTable')
inverterGroupReactiveEnergyLogLastWeeksValue = MibTableColumn((1, 3, 6, 1, 4, 1, 12148, 10, 16, 22, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksValue.setStatus('current')
if mibBuilder.loadTexts: inverterGroupReactiveEnergyLogLastWeeksValue.setDescription('Reactive energy value logged every week.')
powerSystemTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 12148, 10, 1, 3)).setObjects(("SP2-MIB", "alarmBatteryTrap"), ("SP2-MIB", "alarmControlSystemTrap"), ("SP2-MIB", "alarmDcDcTrap"), ("SP2-MIB", "alarmGeneratorTrap"), ("SP2-MIB", "alarmInputsTrap"), ("SP2-MIB", "alarmInverterTrap"), ("SP2-MIB", "alarmLoadGroupTrap"), ("SP2-MIB", "alarmMainsTrap"), ("SP2-MIB", "alarmOutputsTrap"), ("SP2-MIB", "alarmPowerSystemTrap"), ("SP2-MIB", "alarmRectifierTrap"), ("SP2-MIB", "alarmSolarChargerTrap"), ("SP2-MIB", "alarmWindChargerTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    powerSystemTrapsGroup = powerSystemTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: powerSystemTrapsGroup.setDescription('The powerSystem Trap goup. Entry point for the trap list.')
mibBuilder.exportSymbols("SP2-MIB", batteryGroup2UsedCapacity=batteryGroup2UsedCapacity, batteryTotalCapacityMinorLowLevel=batteryTotalCapacityMinorLowLevel, invertersEnergyLogLastWeeksTable=invertersEnergyLogLastWeeksTable, flexiMonitorNumberOfOutputs=flexiMonitorNumberOfOutputs, invertersCurrentAlarmEnable=invertersCurrentAlarmEnable, userSuspended=userSuspended, batteryAhCharged=batteryAhCharged, batteryGroup2UsedCapacityAlarmEnable=batteryGroup2UsedCapacityAlarmEnable, inputControlUnitsEntry=inputControlUnitsEntry, batteryGroup2VoltageMajorHighLevel=batteryGroup2VoltageMajorHighLevel, batteryGroup2CurrentsMajorLowLevel=batteryGroup2CurrentsMajorLowLevel, inverterStatus=inverterStatus, userSuspendedStatus=userSuspendedStatus, batteryGroup2TempCompEnable=batteryGroup2TempCompEnable, inverterHwVersion=inverterHwVersion, ambientTemperatureMinorLowLevel=ambientTemperatureMinorLowLevel, mainsGroupMainsFailureTable=mainsGroupMainsFailureTable, generatorRunHoursLogLastDaysTable=generatorRunHoursLogLastDaysTable, generatorRunHoursLogLastDaysEntry=generatorRunHoursLogLastDaysEntry, mainsOutageLogDaysValue=mainsOutageLogDaysValue, batteryMonitorTemperatureMinorHighLevel=batteryMonitorTemperatureMinorHighLevel, alarmMainsTrap=alarmMainsTrap, eNexus=eNexus, loadLVLDDisconnectVoltage=loadLVLDDisconnectVoltage, invertersReactiveEnergyLogLastHoursValue=invertersReactiveEnergyLogLastHoursValue, batteryUsedCapacityTrapRepeatCounter=batteryUsedCapacityTrapRepeatCounter, controlSystemStatus=controlSystemStatus, generatorFuelConsumptionTotalUsed=generatorFuelConsumptionTotalUsed, batteryBoostVoltage=batteryBoostVoltage, batteryGroup2Description=batteryGroup2Description, dcdcIndex=dcdcIndex, mainControlUnitTemperatureValue=mainControlUnitTemperatureValue, generatorRunHoursTotalHours=generatorRunHoursTotalHours, alarmGeneratorTrap=alarmGeneratorTrap, mainsOutageLogMonthsEntry=mainsOutageLogMonthsEntry, rectifierGroupTemperatureMajorLowLevel=rectifierGroupTemperatureMajorLowLevel, inverterGroupInverterHwPartNumber=inverterGroupInverterHwPartNumber, mainsGroupMainsFailureEntry=mainsGroupMainsFailureEntry, generatorEnergyLogLastWeeksEntry=generatorEnergyLogLastWeeksEntry, mainControlUnitTemperatureMinorHighLevel=mainControlUnitTemperatureMinorHighLevel, rectifierGroupErrorMinorAlarmLevel=rectifierGroupErrorMinorAlarmLevel, controlSystemResetNumberOfModules=controlSystemResetNumberOfModules, batteryMonitorTemperatureTable=batteryMonitorTemperatureTable, currentMonitorsTable=currentMonitorsTable, inverterGroupErrorDescription=inverterGroupErrorDescription, batteryMonitorFuseValue=batteryMonitorFuseValue, windChargersErrorStatus=windChargersErrorStatus, mainsOutageLogDaysTable=mainsOutageLogDaysTable, batteryGroup2EnergyLogLastWeeksTable=batteryGroup2EnergyLogLastWeeksTable, batteryGroup2CurrentsValue=batteryGroup2CurrentsValue, batteryCurrentDescription=batteryCurrentDescription, batteryMonitorTemperatureMajorHighLevel=batteryMonitorTemperatureMajorHighLevel, batteryGroup2BankSymmetryDeltaValue=batteryGroup2BankSymmetryDeltaValue, batteryGroup2EnergyLogLastHoursTable=batteryGroup2EnergyLogLastHoursTable, batteryLVBDDisconnectVoltage=batteryLVBDDisconnectVoltage, rectifierGroupsTable=rectifierGroupsTable, outputIoUnitOutputIndex=outputIoUnitOutputIndex, loadCurrentValue=loadCurrentValue, rectifiersEnergyLogLastHoursEntry=rectifiersEnergyLogLastHoursEntry, mainsNumberOfGroups=mainsNumberOfGroups, mainsMonitors=mainsMonitors, mainsMonitorVoltageDescription=mainsMonitorVoltageDescription, flexiMonitorInputValue=flexiMonitorInputValue, batteryGroup2TemperaturesAlarmEnable=batteryGroup2TemperaturesAlarmEnable, mainsMonitorEnergyLogAccumulatedEntry=mainsMonitorEnergyLogAccumulatedEntry, batteryGroup2VoltageMajorLowLevel=batteryGroup2VoltageMajorLowLevel, batteryMonitorSymmetryMeasureValue=batteryMonitorSymmetryMeasureValue, batteryGroup2BankStatus=batteryGroup2BankStatus, windChargersEnergyLogLastDaysIndex=windChargersEnergyLogLastDaysIndex, batteryLVBDValue=batteryLVBDValue, batteryGroup2CurrentTrapRepeatCounter=batteryGroup2CurrentTrapRepeatCounter, powerSystemTemperatureScale=powerSystemTemperatureScale, mainsGroupOutageLogDaysEntry=mainsGroupOutageLogDaysEntry, solarChargersEnergyLogLastDaysEntry=solarChargersEnergyLogLastDaysEntry, flexiMonitorError=flexiMonitorError, generatorFuelConsumptionLogLastWeeksIndex=generatorFuelConsumptionLogLastWeeksIndex, inverterGroupEnergyLogLastHoursValue=inverterGroupEnergyLogLastHoursValue, rectifiersError=rectifiersError, generatorFuelConsumptionLogLastMonthsNoOfEntries=generatorFuelConsumptionLogLastMonthsNoOfEntries, mainsMonitorEnergyLogLastWeeksNumberOfEntries=mainsMonitorEnergyLogLastWeeksNumberOfEntries, generatorMonthlyRunEnable=generatorMonthlyRunEnable, inverterGroupReactiveEnergyLogLastHoursEntry=inverterGroupReactiveEnergyLogLastHoursEntry, batteryMonitorFuseIndex=batteryMonitorFuseIndex, batteryBankSymmetryMajorAlarmLevel=batteryBankSymmetryMajorAlarmLevel, inverterGroupCapacityMajorAlarmLevel=inverterGroupCapacityMajorAlarmLevel, mainsGroupOutageTotal=mainsGroupOutageTotal, generatorFuelConsumptionLogLastWeeksTable=generatorFuelConsumptionLogLastWeeksTable, outputIoUnitOutputEntry=outputIoUnitOutputEntry, batteryGroup2TimeLeftTrapRepeatCounter=batteryGroup2TimeLeftTrapRepeatCounter, controlSystemIoUnitFanSpeedValue=controlSystemIoUnitFanSpeedValue, currentMonitorEnergyLogLastDaysIndex=currentMonitorEnergyLogLastDaysIndex, invertersEnergyLogLastWeeksIndex=invertersEnergyLogLastWeeksIndex, loadLVLDTable=loadLVLDTable, batteryCurrentTrapRepeatCounter=batteryCurrentTrapRepeatCounter, rectifierGroupErrorValue=rectifierGroupErrorValue, inverterOutputFrequencyValue=inverterOutputFrequencyValue, dcdcHwVersion=dcdcHwVersion, inverterGroupCurrentEntry=inverterGroupCurrentEntry, controlSystemIoUnitTemperatureMajorHighLevel=controlSystemIoUnitTemperatureMajorHighLevel, batteryMonitorTemperatureMinorLowLevel=batteryMonitorTemperatureMinorLowLevel, batteryCurrentsMajorHighLevel=batteryCurrentsMajorHighLevel, mains=mains, batteryGroup2LVBD=batteryGroup2LVBD, mainControlUnitsErrorDescription=mainControlUnitsErrorDescription, mainsMonitorCurrentAlarmEnable=mainsMonitorCurrentAlarmEnable, mainsMonitorEnergyLogLastHoursTable=mainsMonitorEnergyLogLastHoursTable, invertersReactiveEnergyLogLastWeeksNumberOfEntries=invertersReactiveEnergyLogLastWeeksNumberOfEntries, invertersEnergyLogLastHoursIndex=invertersEnergyLogLastHoursIndex, mainsGroupOutageLogMonthsEntry=mainsGroupOutageLogMonthsEntry, batteryMonitorFuseEntry=batteryMonitorFuseEntry, invertersNumberOfGroups=invertersNumberOfGroups, mainsGroupVoltageAlarmEnable=mainsGroupVoltageAlarmEnable, batteryLVBDConnectVoltage=batteryLVBDConnectVoltage, inverterGroupCurrentAlarmEnable=inverterGroupCurrentAlarmEnable, batteryRemainingCapacityMinorLowLevel=batteryRemainingCapacityMinorLowLevel, batteryTempComp=batteryTempComp, batteryGroup2EnergyLogLastDaysIndex=batteryGroup2EnergyLogLastDaysIndex, inverterGroupEnergyLogLastHoursNumberOfEntries=inverterGroupEnergyLogLastHoursNumberOfEntries, rectifiersEnergyLogAccumulated=rectifiersEnergyLogAccumulated, currentMonitorFuseStatus=currentMonitorFuseStatus, rectifierGroupEnergyLogEntry=rectifierGroupEnergyLogEntry, batteryCurrentMajorLowLevel=batteryCurrentMajorLowLevel, currentMonitorEnergyLogLastWeeksNumberOfEntries=currentMonitorEnergyLogLastWeeksNumberOfEntries, windChargerType=windChargerType, rectifierGroupCurrentValue=rectifierGroupCurrentValue, batteryCurrentsMajorLowLevel=batteryCurrentsMajorLowLevel, alarmInputsTrap=alarmInputsTrap, deltaTemperatureValue=deltaTemperatureValue, currentMonitorFuseTrapRepeatCounter=currentMonitorFuseTrapRepeatCounter, ambientTemperatureDescription=ambientTemperatureDescription, batteryGroup2ChargeCurrentLimitValue=batteryGroup2ChargeCurrentLimitValue, batteryGroup2TemperatureDescription=batteryGroup2TemperatureDescription, batteryTestResultQuality=batteryTestResultQuality, generatorFailStatus=generatorFailStatus, batteryCycleLogMonthsEntry=batteryCycleLogMonthsEntry, invertersErrorValue=invertersErrorValue, invertersCapacity=invertersCapacity, dcdcCapacityMinorAlarmLevel=dcdcCapacityMinorAlarmLevel, powerSystem=powerSystem, windChargersCurrentStatus=windChargersCurrentStatus, batteryMonitorSymmetryEntry=batteryMonitorSymmetryEntry, batteryGroup2ChargeCurrentLimit=batteryGroup2ChargeCurrentLimit, batteryBoostCurrentThreshold=batteryBoostCurrentThreshold, batteryGroup2BankCurrentEntry=batteryGroup2BankCurrentEntry, flexiMonitorInputAlarmEnable=flexiMonitorInputAlarmEnable, batteryGroup2TemperaturesTrapRepeatCounter=batteryGroup2TemperaturesTrapRepeatCounter, invertersEnergyLogLastHoursTable=invertersEnergyLogLastHoursTable, windChargersNumberOfWindChargers=windChargersNumberOfWindChargers, solarChargersEnergyLogLastHoursTable=solarChargersEnergyLogLastHoursTable, batteryMonitorCurrentAlarmEnable=batteryMonitorCurrentAlarmEnable, solarChargersNumberOfSolarChargers=solarChargersNumberOfSolarChargers, batteryGroup2AhDischargedAlarmEnable=batteryGroup2AhDischargedAlarmEnable, powerSystemSerialNumber=powerSystemSerialNumber, rectifierGroupCapacityMajorAlarmLevel=rectifierGroupCapacityMajorAlarmLevel, batteryGroup2BankSymmetryAlarmEnable=batteryGroup2BankSymmetryAlarmEnable, batteryGroup2QualityTrapRepeatCounter=batteryGroup2QualityTrapRepeatCounter, batteryGroup2AhChargedValue=batteryGroup2AhChargedValue, generatorFuelConsumptionTotalUsedEntry=generatorFuelConsumptionTotalUsedEntry, invertersReactiveEnergyLog=invertersReactiveEnergyLog, controlSystemIoUnitTemperatureTrapRepeatCounter=controlSystemIoUnitTemperatureTrapRepeatCounter, inputIoUnitProgInputStatus=inputIoUnitProgInputStatus, batteryGroup2EqualizeManualMaxDuration=batteryGroup2EqualizeManualMaxDuration, batteryGroup2CurrentMinorLowLevel=batteryGroup2CurrentMinorLowLevel, dcdcGroupsTable=dcdcGroupsTable, batteryTestResultTable=batteryTestResultTable, batteryGroup2RemainingCapacityMajorLowLevel=batteryGroup2RemainingCapacityMajorLowLevel, inverterIndex=inverterIndex, mainsGroupsEntry=mainsGroupsEntry, batteryTemperaturesTrapRepeatCounter=batteryTemperaturesTrapRepeatCounter, batteryEnergyLogLastWeeksTable=batteryEnergyLogLastWeeksTable, mainsGroupsTable=mainsGroupsTable, inverterGroupReactiveEnergyLogLastWeeksValue=inverterGroupReactiveEnergyLogLastWeeksValue, dcdcTable=dcdcTable, mainsMainsFailureAlarmEnable=mainsMainsFailureAlarmEnable, userSuspendedMajorAlarmLevel=userSuspendedMajorAlarmLevel, inverterGroupEnergyLogLastDaysEntry=inverterGroupEnergyLogLastDaysEntry, invertersErrorDescription=invertersErrorDescription, loadLVLDEnable=loadLVLDEnable, loadMonitorError=loadMonitorError, batteryChargeCurrentLimitEnable=batteryChargeCurrentLimitEnable, rectifierGroupCapacityEntry=rectifierGroupCapacityEntry, batteryGroup2TotalCapacityValue=batteryGroup2TotalCapacityValue, mainsMonitorVoltageMinorHighLevel=mainsMonitorVoltageMinorHighLevel, inverterGroupReactiveEnergyLogLastHoursTable=inverterGroupReactiveEnergyLogLastHoursTable, batteryBoostCommand=batteryBoostCommand, rectifiersNumberOfGroups=rectifiersNumberOfGroups, alarmSubsysSourceDescr=alarmSubsysSourceDescr, generatorEnergyLogLastHoursIndex=generatorEnergyLogLastHoursIndex, rectifierGroupEnergyLogLastDaysNumberOfEntries=rectifierGroupEnergyLogLastDaysNumberOfEntries, batteryStatus=batteryStatus, batteryGroup2BoostCommand=batteryGroup2BoostCommand, solarChargersEnergyLogLastWeeksTable=solarChargersEnergyLogLastWeeksTable, batteryGroup2AhDischargedMajorHighLevel=batteryGroup2AhDischargedMajorHighLevel, rectifiersErrorValue=rectifiersErrorValue, batteryMonitorErrorTrapRepeatCounter=batteryMonitorErrorTrapRepeatCounter, dcdcCurrentEntry=dcdcCurrentEntry, mainControlUnitEarthFaultAlarmEnable=mainControlUnitEarthFaultAlarmEnable, loadCurrentMajorHighLevel=loadCurrentMajorHighLevel, batteryDescription=batteryDescription, mainsMainsFailureTrapRepeatCounter=mainsMainsFailureTrapRepeatCounter, batteryGroup2EqualizeCommand=batteryGroup2EqualizeCommand, batteryGroup2BankNumberOfTemperatures=batteryGroup2BankNumberOfTemperatures, rectifierGroupEnergyLogLastHoursNumberOfEntries=rectifierGroupEnergyLogLastHoursNumberOfEntries, currentMonitorEnergyLogLastHoursNumberOfEntries=currentMonitorEnergyLogLastHoursNumberOfEntries, invertersReactiveEnergyLogLastDaysTable=invertersReactiveEnergyLogLastDaysTable, batteryGroup2VoltageAlarmEnable=batteryGroup2VoltageAlarmEnable, batteryAhDischargedTrapRepeatCounter=batteryAhDischargedTrapRepeatCounter, invertersCurrent=invertersCurrent, inputControlUnitNumberOfInputs=inputControlUnitNumberOfInputs, generatorStatus=generatorStatus, mainsGroupMainsFailureStatus=mainsGroupMainsFailureStatus, mainsMainsFailureStatus=mainsMainsFailureStatus, rectifierIndex=rectifierIndex, mainsGroupMainsFailureDescription=mainsGroupMainsFailureDescription, loadFuseEntry=loadFuseEntry, mainsGroupVoltageMinorHighLevel=mainsGroupVoltageMinorHighLevel, invertersReactiveEnergyLogLastWeeksTable=invertersReactiveEnergyLogLastWeeksTable, rectifiersEnergyLogLastWeeksNumberOfEntries=rectifiersEnergyLogLastWeeksNumberOfEntries, batteryGroup2TotalCapacityDescription=batteryGroup2TotalCapacityDescription, solarChargerSwPartNumber=solarChargerSwPartNumber, ioUnitError=ioUnitError, batteryUsedCapacityValue=batteryUsedCapacityValue, solarChargersObsolete=solarChargersObsolete, rectifierGroupTemperatureMinorLowLevel=rectifierGroupTemperatureMinorLowLevel, generatorTankMajorLowLevel=generatorTankMajorLowLevel, inverterGroupCapacityTable=inverterGroupCapacityTable, batteryGroup2TestResultEntry=batteryGroup2TestResultEntry, rectifiersCurrentMinorAlarmLevel=rectifiersCurrentMinorAlarmLevel, dcdcErrorStatus=dcdcErrorStatus, mainControlUnitsError=mainControlUnitsError, rectifiersEnergyLogLastDaysEntry=rectifiersEnergyLogLastDaysEntry, windChargersObsolete=windChargersObsolete, batteryMonitorErrorValue=batteryMonitorErrorValue, inverterGroupReactiveEnergyLogLastDaysTable=inverterGroupReactiveEnergyLogLastDaysTable, generatorChargeTime=generatorChargeTime, flexiMonitorErrorValue=flexiMonitorErrorValue, controlSystemIoUnitFanEntry=controlSystemIoUnitFanEntry, batteryGroup2BankFuseEntry=batteryGroup2BankFuseEntry, mainsMonitorEnergyLogLastDaysEntry=mainsMonitorEnergyLogLastDaysEntry, outputIoUnitNumberOfOutputs=outputIoUnitNumberOfOutputs, rectifiersCapacityStatus=rectifiersCapacityStatus, dcdcGroupNumberOfDcdcConverters=dcdcGroupNumberOfDcdcConverters, mainsGroupStatus=mainsGroupStatus, rectifierGroupRectifierStatus=rectifierGroupRectifierStatus, invertersCapacityDescription=invertersCapacityDescription, inverterGroupCapacityDescription=inverterGroupCapacityDescription, rectifierGroupTemperatureMajorHighLevel=rectifierGroupTemperatureMajorHighLevel, mainsVoltageDescription=mainsVoltageDescription, batteryGroup2TestResultQuality=batteryGroup2TestResultQuality, batteryGroup2ReferenceVoltage=batteryGroup2ReferenceVoltage, currentMonitors=currentMonitors, batteryMonitorTemperatureAlarmEnable=batteryMonitorTemperatureAlarmEnable, batteryGroup2BankSymmetryTable=batteryGroup2BankSymmetryTable, dcdcObsolete=dcdcObsolete)
mibBuilder.exportSymbols("SP2-MIB", inverterGroupEnergyLogAccumulated=inverterGroupEnergyLogAccumulated, batteryGroup2CurrentValue=batteryGroup2CurrentValue, dcdcInputVoltageValue=dcdcInputVoltageValue, controlSystemInventory=controlSystemInventory, dcdcNumberOfCapacities=dcdcNumberOfCapacities, batteryGroup2AhChargedAlarmEnable=batteryGroup2AhChargedAlarmEnable, batteryGroup2AhChargedStatus=batteryGroup2AhChargedStatus, alarmWindChargerTrap=alarmWindChargerTrap, dcdcCurrentStatus=dcdcCurrentStatus, batteryBoostManualMaxDuration=batteryBoostManualMaxDuration, generatorRunHoursLogLastMonthsEntry=generatorRunHoursLogLastMonthsEntry, mainsMonitorErrorMajorAlarmLevel=mainsMonitorErrorMajorAlarmLevel, userSuspendedAlarmEnable=userSuspendedAlarmEnable, mainControlUnitEarthFaultEntry=mainControlUnitEarthFaultEntry, mainsGroupVoltageIndex=mainsGroupVoltageIndex, batteryGroup2TemperaturesMajorLowLevel=batteryGroup2TemperaturesMajorLowLevel, currentMonitorEnergyLogLastHoursIndex=currentMonitorEnergyLogLastHoursIndex, currentMonitorEnergyLogLastWeeksEntry=currentMonitorEnergyLogLastWeeksEntry, loadCurrentTrapRepeatCounter=loadCurrentTrapRepeatCounter, mainsMonitorsEntry=mainsMonitorsEntry, mainsMonitorEnergyLogLastDaysIndex=mainsMonitorEnergyLogLastDaysIndex, generatorEnergyLogLastWeeksTable=generatorEnergyLogLastWeeksTable, mainsMonitorCurrentMajorHighLevel=mainsMonitorCurrentMajorHighLevel, powerSystemType=powerSystemType, rectifierGroupRectifierIndex=rectifierGroupRectifierIndex, batteryCurrentMajorHighLevel=batteryCurrentMajorHighLevel, mainsGroupOutageLogDaysValue=mainsGroupOutageLogDaysValue, generatorTankTrapRepeatCounter=generatorTankTrapRepeatCounter, inputIoUnitProgInputTrapRepeatCounter=inputIoUnitProgInputTrapRepeatCounter, batteryGroup2BankNumberOfSymmetries=batteryGroup2BankNumberOfSymmetries, batteryBankSymmetryTrapRepeatCounter=batteryBankSymmetryTrapRepeatCounter, batteryMonitorCurrentTrapRepeatCounter=batteryMonitorCurrentTrapRepeatCounter, alarmRectifierTrap=alarmRectifierTrap, batteryGroup2TimeLeftAlarmEnable=batteryGroup2TimeLeftAlarmEnable, solarChargersEnergyLogLastWeeksNumberOfEntries=solarChargersEnergyLogLastWeeksNumberOfEntries, rectifierGroupCurrentStatus=rectifierGroupCurrentStatus, mainsStatus=mainsStatus, mainsMonitorEnergyLogLastWeeksTable=mainsMonitorEnergyLogLastWeeksTable, windChargerIndex=windChargerIndex, alarmDcDcTrap=alarmDcDcTrap, rectifierGroupRectifierHwVersion=rectifierGroupRectifierHwVersion, controlSystemIoUnitsNumberOfUnits=controlSystemIoUnitsNumberOfUnits, mainControlUnitsErrorValue=mainControlUnitsErrorValue, batteryGroup2CycleLogWeeksValue=batteryGroup2CycleLogWeeksValue, snmpHeartBeatTrapRepeatRate=snmpHeartBeatTrapRepeatRate, inverterGroupInverterOutputVoltageValue=inverterGroupInverterOutputVoltageValue, outputIoUnitEntry=outputIoUnitEntry, invertersEnergyLogLastDaysNumberOfEntries=invertersEnergyLogLastDaysNumberOfEntries, batteryGroup2Boost=batteryGroup2Boost, invertersReactiveEnergyLogLastHoursEntry=invertersReactiveEnergyLogLastHoursEntry, batteryBankSymmetryMeasureValue=batteryBankSymmetryMeasureValue, currentMonitorEnergyLogLastWeeksValue=currentMonitorEnergyLogLastWeeksValue, generatorEnergyLog=generatorEnergyLog, currentMonitorEnergyLogLastDaysValue=currentMonitorEnergyLogLastDaysValue, userSuspendedTrapRepeatCounter=userSuspendedTrapRepeatCounter, batteryMonitorCurrentEntry=batteryMonitorCurrentEntry, mainControlUnitTemperatureMinorLowLevel=mainControlUnitTemperatureMinorLowLevel, batteryUsedCapacityDescription=batteryUsedCapacityDescription, solarChargersEnergyLogLastDaysValue=solarChargersEnergyLogLastDaysValue, rectifierGroupErrorEntry=rectifierGroupErrorEntry, rectifiersEnergyLog=rectifiersEnergyLog, loadLVLDValue=loadLVLDValue, invertersEnergyLogLastWeeksValue=invertersEnergyLogLastWeeksValue, batteryGroup2TimeLeftMajorAlarmLevel=batteryGroup2TimeLeftMajorAlarmLevel, generatorRunHoursLogLastWeeksValue=generatorRunHoursLogLastWeeksValue, dcdcCapacityTrapRepeatCounter=dcdcCapacityTrapRepeatCounter, batteryMonitorNumberOfFuses=batteryMonitorNumberOfFuses, flexiMonitorErrorTrapRepeatCounter=flexiMonitorErrorTrapRepeatCounter, dcdcErrorEnable=dcdcErrorEnable, batteryGroup2AhChargedMinorHighLevel=batteryGroup2AhChargedMinorHighLevel, rectifierStatus=rectifierStatus, mainsVoltageMinorLowLevel=mainsVoltageMinorLowLevel, powerSystemLongitudeDecimal=powerSystemLongitudeDecimal, invertersCapacityStatus=invertersCapacityStatus, rectifierGroupCapacityTable=rectifierGroupCapacityTable, loadStatus=loadStatus, windChargerInputVoltageValue=windChargerInputVoltageValue, inverterGroupEnergyLogEntry=inverterGroupEnergyLogEntry, batteryCurrentMinorHighLevel=batteryCurrentMinorHighLevel, windChargersEnergyLog=windChargersEnergyLog, invertersEnergyLogLastDaysEntry=invertersEnergyLogLastDaysEntry, batteryEqualizeCommand=batteryEqualizeCommand, snmpTrapRepeatRate=snmpTrapRepeatRate, infoHeartBeatTrap=infoHeartBeatTrap, batteryVoltage=batteryVoltage, rectifiersCurrentTrapRepeatCounter=rectifiersCurrentTrapRepeatCounter, currentMonitorEnergyLogLastDaysTable=currentMonitorEnergyLogLastDaysTable, mainsMonitorPhaseIndex=mainsMonitorPhaseIndex, mainsVoltageAlarmEnable=mainsVoltageAlarmEnable, batteryCycleLogMonthsIndex=batteryCycleLogMonthsIndex, mainsMonitorsTable=mainsMonitorsTable, flexiMonitorInputTrapRepeatCounter=flexiMonitorInputTrapRepeatCounter, dcdcCapacityStatus=dcdcCapacityStatus, batteryGroup2CycleLogDaysNumberOfEntries=batteryGroup2CycleLogDaysNumberOfEntries, flexiMonitorsEntry=flexiMonitorsEntry, batteryGroup2EnergyLogLastWeeksNumberOfEntries=batteryGroup2EnergyLogLastWeeksNumberOfEntries, outputIoUnitIndex=outputIoUnitIndex, batteryTotalCapacity=batteryTotalCapacity, batteryGroup2CycleLogMonthsValue=batteryGroup2CycleLogMonthsValue, mainControlUnitsErrorTrapRepeatCounter=mainControlUnitsErrorTrapRepeatCounter, snmp=snmp, batteryMonitorSymmetryStatus=batteryMonitorSymmetryStatus, rectifierGroupCapacityMinorAlarmLevel=rectifierGroupCapacityMinorAlarmLevel, solarChargersCurrentStatus=solarChargersCurrentStatus, loadGroupStatus=loadGroupStatus, inverterGroupsTable=inverterGroupsTable, batteryCurrentIndex=batteryCurrentIndex, rectifierGroupEnergyLogLastHoursValue=rectifierGroupEnergyLogLastHoursValue, inverterGroupEnergyLogLastWeeksTable=inverterGroupEnergyLogLastWeeksTable, batteryTemperatureMajorHighLevel=batteryTemperatureMajorHighLevel, controlUnitEntry=controlUnitEntry, generatorFuelConsumptionLogLastMonthsValue=generatorFuelConsumptionLogLastMonthsValue, inverterGroupsEntry=inverterGroupsEntry, generatorEnergyLogLastDaysNumberOfEntries=generatorEnergyLogLastDaysNumberOfEntries, batteryGroup2EnergyLogLastDaysValue=batteryGroup2EnergyLogLastDaysValue, smartNodeErrorTrapRepeatCounter=smartNodeErrorTrapRepeatCounter, batteryGroup2TemperatureIndex=batteryGroup2TemperatureIndex, invertersEnergyLogLastHoursNumberOfEntries=invertersEnergyLogLastHoursNumberOfEntries, batteryCycleLog=batteryCycleLog, mainsMonitorFrequencyMinorHighLevel=mainsMonitorFrequencyMinorHighLevel, batteryEnergyLogLastWeeksEntry=batteryEnergyLogLastWeeksEntry, batteryAhChargedMinorHighLevel=batteryAhChargedMinorHighLevel, mainsMonitorVoltageValue=mainsMonitorVoltageValue, mainsOutageLogWeeksTable=mainsOutageLogWeeksTable, batteryFuseValue=batteryFuseValue, batteryGroup2BoostVoltage=batteryGroup2BoostVoltage, invertersReactiveEnergyLogLastDaysEntry=invertersReactiveEnergyLogLastDaysEntry, mainControlUnitsErrorMajorAlarmLevel=mainControlUnitsErrorMajorAlarmLevel, invertersCapacityMinorAlarmLevel=invertersCapacityMinorAlarmLevel, rectifiersCapacity=rectifiersCapacity, solarChargerInputVoltageValue=solarChargerInputVoltageValue, windChargerStatus=windChargerStatus, batteryVoltageDescription=batteryVoltageDescription, generatorDailyRunSetupEntry=generatorDailyRunSetupEntry, alarmMeasuredVarOid=alarmMeasuredVarOid, generatorTankStatus=generatorTankStatus, batteryGroup2RemainingCapacityDescription=batteryGroup2RemainingCapacityDescription, batteryGroup2CurrentsMinorLowLevel=batteryGroup2CurrentsMinorLowLevel, batteryCycleLogDaysValue=batteryCycleLogDaysValue, inverterHwPartNumber=inverterHwPartNumber, batteryGroup2EnergyLogLastDaysTable=batteryGroup2EnergyLogLastDaysTable, batteryUsedCapacity=batteryUsedCapacity, inputIoUnitProgInputDescription=inputIoUnitProgInputDescription, batteryQualityTrapRepeatCounter=batteryQualityTrapRepeatCounter, batteryTotalCapacityAlarmEnable=batteryTotalCapacityAlarmEnable, windChargersErrorEnable=windChargersErrorEnable, batteryGroup2UsedCapacityDescription=batteryGroup2UsedCapacityDescription, dcdcGroupStatus=dcdcGroupStatus, rectifierGroupStatus=rectifierGroupStatus, batteryGroup2AhDischargedStatus=batteryGroup2AhDischargedStatus, batteryChargeCurrentLimitValue=batteryChargeCurrentLimitValue, batteryMonitorSymmetryMajorAlarmLevel=batteryMonitorSymmetryMajorAlarmLevel, inverterGroupInverterType=inverterGroupInverterType, dcdcGroupOutputVoltage=dcdcGroupOutputVoltage, batteryGroup2CycleLog=batteryGroup2CycleLog, dcdcErrorTrapRepeatCounter=dcdcErrorTrapRepeatCounter, outputIoUnitTable=outputIoUnitTable, mainsGroupOutageLogDaysTable=mainsGroupOutageLogDaysTable, loadFusesStatus=loadFusesStatus, batteryBankNumberOfTemperatures=batteryBankNumberOfTemperatures, mainsMonitorFrequencyStatus=mainsMonitorFrequencyStatus, rectifiersErrorEnable=rectifiersErrorEnable, batteryCurrentsAlarmEnable=batteryCurrentsAlarmEnable, batteryGroup2TotalCapacityMinorLowLevel=batteryGroup2TotalCapacityMinorLowLevel, batteryBankEntry=batteryBankEntry, generatorTankNumberOfTanks=generatorTankNumberOfTanks, solarChargersErrorEnable=solarChargersErrorEnable, batteryGroup2CycleLogDaysValue=batteryGroup2CycleLogDaysValue, batteryTimeLeft=batteryTimeLeft, batteryGroup2CycleLogDaysEntry=batteryGroup2CycleLogDaysEntry, loadEnergyLogLastWeeksNumberOfEntries=loadEnergyLogLastWeeksNumberOfEntries, currentMonitorCurrentTrapRepeatCounter=currentMonitorCurrentTrapRepeatCounter, controlSystemIoUnitTemperatureStatus=controlSystemIoUnitTemperatureStatus, batteryMonitorCurrentMinorLowLevel=batteryMonitorCurrentMinorLowLevel, rectifierGroupCurrentTable=rectifierGroupCurrentTable, loadEnergyLogLastWeeksTable=loadEnergyLogLastWeeksTable, batteryGroup2TestResultStartDateTime=batteryGroup2TestResultStartDateTime, dcdcNumberOfAlarms=dcdcNumberOfAlarms, batteryTemperaturesValue=batteryTemperaturesValue, solarChargersEnergyLogLastHoursEntry=solarChargersEnergyLogLastHoursEntry, batteryGroup2BankTemperatureEntry=batteryGroup2BankTemperatureEntry, alarmMeasuredVarValue=alarmMeasuredVarValue, batteryVoltageStatus=batteryVoltageStatus, generatorFuelConsumptionLogLastDaysTable=generatorFuelConsumptionLogLastDaysTable, loadFuseTrapRepeatCounter=loadFuseTrapRepeatCounter, ioUnitErrorValue=ioUnitErrorValue, flexiMonitorErrorMinorAlarmLevel=flexiMonitorErrorMinorAlarmLevel, batteryGroup2QualityMinorAlarmLevel=batteryGroup2QualityMinorAlarmLevel, batteryGroup2TestNumberOfResults=batteryGroup2TestNumberOfResults, currentMonitorEnergyLogLastHoursValue=currentMonitorEnergyLogLastHoursValue, controlUnitTable=controlUnitTable, solarChargersEnergyLogLastHoursIndex=solarChargersEnergyLogLastHoursIndex, loadCurrentAlarmEnable=loadCurrentAlarmEnable, batteryGroup2EnergyLogLastDaysEntry=batteryGroup2EnergyLogLastDaysEntry, batteryTimeLeftStatus=batteryTimeLeftStatus, inverterGroupReactiveEnergyLogAccumulated=inverterGroupReactiveEnergyLogAccumulated, inverterGroupReactiveEnergyLogLastHoursValue=inverterGroupReactiveEnergyLogLastHoursValue, rectifiersCurrent=rectifiersCurrent, dcdcCapacityEntry=dcdcCapacityEntry, inverterEntry=inverterEntry, mainsMonitorErrorMinorAlarmLevel=mainsMonitorErrorMinorAlarmLevel, mainsGroupVoltageValue=mainsGroupVoltageValue, generatorCapacityStartOnDischargeLimit=generatorCapacityStartOnDischargeLimit, batteryBankSymmetryTable=batteryBankSymmetryTable, batteryGroup2FuseTrapRepeatCounter=batteryGroup2FuseTrapRepeatCounter, inverterGroupErrorAlarmEnable=inverterGroupErrorAlarmEnable, batteryGroup2ChargeCurrentLimitEnable=batteryGroup2ChargeCurrentLimitEnable, currentMonitorEnergyLogLastHoursEntry=currentMonitorEnergyLogLastHoursEntry, rectifierGroupCurrentDescription=rectifierGroupCurrentDescription, deltaTemperature=deltaTemperature, controlSystemIoUnitNumberOfTemperatures=controlSystemIoUnitNumberOfTemperatures, mainControlUnitEarthFaultTrapRepeatCounter=mainControlUnitEarthFaultTrapRepeatCounter, flexiMonitorOutputDescription=flexiMonitorOutputDescription, inverterGroupCapacityStatus=inverterGroupCapacityStatus, mainsGroupMainsFailureAlarmEnable=mainsGroupMainsFailureAlarmEnable, ioUnitErrorMajorAlarmLevel=ioUnitErrorMajorAlarmLevel, loadEnergyLogLastHoursTable=loadEnergyLogLastHoursTable, loadCurrentMinorHighLevel=loadCurrentMinorHighLevel, rectifierOutputCurrentValue=rectifierOutputCurrentValue, mainsMonitorCurrentStatus=mainsMonitorCurrentStatus, ambientTemperatureMinorHighLevel=ambientTemperatureMinorHighLevel, batteryQualityAlarmEnable=batteryQualityAlarmEnable, batteryGroup2LVBDEnable=batteryGroup2LVBDEnable, batteryCycleLogWeeksTable=batteryCycleLogWeeksTable, inputControlUnitInputTrapRepeatCounter=inputControlUnitInputTrapRepeatCounter, generatorDailyRunEnable=generatorDailyRunEnable, batteryBankSymmetryMinorAlarmLevel=batteryBankSymmetryMinorAlarmLevel, alarmSolarChargerTrap=alarmSolarChargerTrap, batteryGroup2TimeLeftDescription=batteryGroup2TimeLeftDescription, mainControlUnitsErrorStatus=mainControlUnitsErrorStatus, dcdcErrorEntry=dcdcErrorEntry, rectifierGroupErrorMajorAlarmLevel=rectifierGroupErrorMajorAlarmLevel, invertersCurrentMinorAlarmLevel=invertersCurrentMinorAlarmLevel, generatorDailyRunStartHour=generatorDailyRunStartHour, generatorRunHoursLogLastMonthsValue=generatorRunHoursLogLastMonthsValue, windChargersEnergyLogLastHoursEntry=windChargersEnergyLogLastHoursEntry, generatorCapacityStopOnChargeLimit=generatorCapacityStopOnChargeLimit, mainsGroupMainsFailureMajorAlarmLevel=mainsGroupMainsFailureMajorAlarmLevel, batteryReferenceVoltage=batteryReferenceVoltage, outputControlUnitOutputTable=outputControlUnitOutputTable, batteryMonitorTemperatureDescription=batteryMonitorTemperatureDescription, batteryEnergyLogLastWeeksValue=batteryEnergyLogLastWeeksValue, batteryGroup2QualityDescription=batteryGroup2QualityDescription, generatorFuelConsumptionLogLastMonthsIndex=generatorFuelConsumptionLogLastMonthsIndex, inverterGroupErrorMajorAlarmLevel=inverterGroupErrorMajorAlarmLevel, batteryTemperatureMinorHighLevel=batteryTemperatureMinorHighLevel, flexiMonitorInputEntry=flexiMonitorInputEntry, batteryGroup2VoltageStatus=batteryGroup2VoltageStatus, batteryGroup2Status=batteryGroup2Status, rectifierHwPartNumber=rectifierHwPartNumber, batteryRemainingCapacityMajorLowLevel=batteryRemainingCapacityMajorLowLevel, rectifiersEnergyLogLastHoursTable=rectifiersEnergyLogLastHoursTable, dcdcCapacityMajorAlarmLevel=dcdcCapacityMajorAlarmLevel, mainsMonitorErrorValue=mainsMonitorErrorValue)
mibBuilder.exportSymbols("SP2-MIB", rectifierGroupRectifierSwPartNumber=rectifierGroupRectifierSwPartNumber, windChargersEnergyLogLastWeeksEntry=windChargersEnergyLogLastWeeksEntry, loadFuseAlarmEnable=loadFuseAlarmEnable, batteryLVBDTrapRepeatCounter=batteryLVBDTrapRepeatCounter, loadCurrentStatus=loadCurrentStatus, flexiMonitorErrorStatus=flexiMonitorErrorStatus, invertersEnergyLogLastDaysTable=invertersEnergyLogLastDaysTable, invertersReactiveEnergyLogLastDaysNumberOfEntries=invertersReactiveEnergyLogLastDaysNumberOfEntries, invertersCurrentTrapRepeatCounter=invertersCurrentTrapRepeatCounter, generatorRunHoursLogLastMonthsIndex=generatorRunHoursLogLastMonthsIndex, powerSystemTrapsGroup=powerSystemTrapsGroup, flexiMonitorInputTable=flexiMonitorInputTable, mainsGroupOutageLogMonthsNumberOfEntries=mainsGroupOutageLogMonthsNumberOfEntries, batteryGroup2VoltageValue=batteryGroup2VoltageValue, snmpSendOffTraps=snmpSendOffTraps, outputControlUnitOutputStatus=outputControlUnitOutputStatus, batteryTemperatureAlarmEnable=batteryTemperatureAlarmEnable, flexiMonitorInputConfiguration=flexiMonitorInputConfiguration, batteryMonitorFuseAlarmEnable=batteryMonitorFuseAlarmEnable, currentMonitorsEntry=currentMonitorsEntry, generatorTankDescription=generatorTankDescription, mainsMonitorEnergyLogLastHoursNumberOfEntries=mainsMonitorEnergyLogLastHoursNumberOfEntries, inverterGroupReactiveEnergyLogLastHoursIndex=inverterGroupReactiveEnergyLogLastHoursIndex, solarChargerOutputCurrentValue=solarChargerOutputCurrentValue, rectifiersCapacityTrapRepeatCounter=rectifiersCapacityTrapRepeatCounter, flexiMonitorErrorMajorAlarmLevel=flexiMonitorErrorMajorAlarmLevel, batteryGroup2TemperatureMajorLowLevel=batteryGroup2TemperatureMajorLowLevel, inverterGroupReactiveEnergyLogLastDaysValue=inverterGroupReactiveEnergyLogLastDaysValue, inverterGroupCapacityTrapRepeatCounter=inverterGroupCapacityTrapRepeatCounter, batteryGroup2TotalCapacityTrapRepeatCounter=batteryGroup2TotalCapacityTrapRepeatCounter, currentMonitorIndex=currentMonitorIndex, batteryMonitorCurrentTable=batteryMonitorCurrentTable, batteryGroup2RemainingCapacityMinorLowLevel=batteryGroup2RemainingCapacityMinorLowLevel, batteryGroup2CycleLogTotalCycles=batteryGroup2CycleLogTotalCycles, invertersEnergyLogLastDaysIndex=invertersEnergyLogLastDaysIndex, batteryMonitorTemperatureTrapRepeatCounter=batteryMonitorTemperatureTrapRepeatCounter, controlUnitNumberOfUnits=controlUnitNumberOfUnits, batteryGroup2AhChargedMajorHighLevel=batteryGroup2AhChargedMajorHighLevel, batteryGroup2AhDischarged=batteryGroup2AhDischarged, dcdcType=dcdcType, batteryRemainingCapacityValue=batteryRemainingCapacityValue, batteryGroup2BankNumberOfCurrents=batteryGroup2BankNumberOfCurrents, outputIoUnitOutputStatus=outputIoUnitOutputStatus, batteryGroup2EnergyLogLastHoursEntry=batteryGroup2EnergyLogLastHoursEntry, mainsGroupOutageLogWeeksValue=mainsGroupOutageLogWeeksValue, generatorTankMinorHighLevel=generatorTankMinorHighLevel, alarmGroupTable=alarmGroupTable, batteryGroup2EnergyLogLastDaysNumberOfEntries=batteryGroup2EnergyLogLastDaysNumberOfEntries, batteryGroup2LVBDTrapRepeatCounter=batteryGroup2LVBDTrapRepeatCounter, smartNodeError=smartNodeError, ambientTemperatureValue=ambientTemperatureValue, batteryQualityMajorAlarmLevel=batteryQualityMajorAlarmLevel, batteryMonitorTemperatureStatus=batteryMonitorTemperatureStatus, batteryBoost=batteryBoost, mainsGroupMainsFailureValue=mainsGroupMainsFailureValue, dcdcCurrentAlarmEnable=dcdcCurrentAlarmEnable, mainControlUnitsEntry=mainControlUnitsEntry, windChargersEnergyLogLastDaysTable=windChargersEnergyLogLastDaysTable, inverterGroupReactiveEnergyLogLastDaysEntry=inverterGroupReactiveEnergyLogLastDaysEntry, generatorEnergyLogLastWeeksIndex=generatorEnergyLogLastWeeksIndex, ambientTemperatureTrapRepeatCounter=ambientTemperatureTrapRepeatCounter, mainsOutageLogMonthsNumberOfEntries=mainsOutageLogMonthsNumberOfEntries, rectifiersTemperatureValue=rectifiersTemperatureValue, alarmGroupDescription=alarmGroupDescription, loadEnergyLogLastHoursNumberOfEntries=loadEnergyLogLastHoursNumberOfEntries, batteryMonitorCurrentMajorHighLevel=batteryMonitorCurrentMajorHighLevel, batteryGroup2LVBDDisconnectVoltage=batteryGroup2LVBDDisconnectVoltage, mainsMonitorCurrentTrapRepeatCounter=mainsMonitorCurrentTrapRepeatCounter, rectifiersCurrentMajorAlarmLevel=rectifiersCurrentMajorAlarmLevel, batteryGroup2CurrentMinorHighLevel=batteryGroup2CurrentMinorHighLevel, rectifiersCapacityAlarmEnable=rectifiersCapacityAlarmEnable, batteryGroup2UsedCapacityValue=batteryGroup2UsedCapacityValue, inverterGroupEnergyLogTable=inverterGroupEnergyLogTable, loadEnergyLogLastDaysNumberOfEntries=loadEnergyLogLastDaysNumberOfEntries, batteryTemperatureIndex=batteryTemperatureIndex, rectifiersNumberOfRectifiers=rectifiersNumberOfRectifiers, ioUnitErrorTrapRepeatCounter=ioUnitErrorTrapRepeatCounter, loadFuseTable=loadFuseTable, invertersReactiveEnergyLogLastHoursTable=invertersReactiveEnergyLogLastHoursTable, dcdcHwPartNumber=dcdcHwPartNumber, windChargerOutputCurrentValue=windChargerOutputCurrentValue, batteryGroup2BankCurrentTable=batteryGroup2BankCurrentTable, mainsMonitorEnergyLogLastWeeksEntry=mainsMonitorEnergyLogLastWeeksEntry, inverterGroupCurrentStatus=inverterGroupCurrentStatus, rectifiersTemperatureTrapRepeatCounter=rectifiersTemperatureTrapRepeatCounter, powerSystemModel=powerSystemModel, inverterGroupInverterSwVersion=inverterGroupInverterSwVersion, windChargersEnergyLogLastWeeksIndex=windChargersEnergyLogLastWeeksIndex, batteryGroup2FuseAlarmEnable=batteryGroup2FuseAlarmEnable, batteryGroup2Test=batteryGroup2Test, dcdcNumberOfCurrents=dcdcNumberOfCurrents, rectifierGroupEnergyLogLastWeeksNumberOfEntries=rectifierGroupEnergyLogLastWeeksNumberOfEntries, inverterGroupInverterStatus=inverterGroupInverterStatus, invertersErrorMajorAlarmLevel=invertersErrorMajorAlarmLevel, batteryLVBDDescription=batteryLVBDDescription, generatorVoltageControlStartVoltage=generatorVoltageControlStartVoltage, mainControlUnitEarthFaultDescription=mainControlUnitEarthFaultDescription, rectifierGroupEnergyLogLastDaysEntry=rectifierGroupEnergyLogLastDaysEntry, powerAlarmVars=powerAlarmVars, batteryGroup2FuseStatus=batteryGroup2FuseStatus, flexiMonitorOutputEntry=flexiMonitorOutputEntry, loadEnergyLogLastDaysIndex=loadEnergyLogLastDaysIndex, batteryGroup2CycleLogWeeksEntry=batteryGroup2CycleLogWeeksEntry, batteryGroup2CycleLogMonthsIndex=batteryGroup2CycleLogMonthsIndex, inverterOutputPowerValue=inverterOutputPowerValue, batteryGroup2VoltageTrapRepeatCounter=batteryGroup2VoltageTrapRepeatCounter, mainsMonitorEnergyLogLastHoursValue=mainsMonitorEnergyLogLastHoursValue, controlUnitDescription=controlUnitDescription, batteryMonitorSymmetryMinorAlarmLevel=batteryMonitorSymmetryMinorAlarmLevel, batteryGroup2TemperaturesMinorLowLevel=batteryGroup2TemperaturesMinorLowLevel, mainControlUnitIndex=mainControlUnitIndex, batteryGroup2UsedCapacityMajorAlarmLevel=batteryGroup2UsedCapacityMajorAlarmLevel, batteryGroup2TemperatureMajorHighLevel=batteryGroup2TemperatureMajorHighLevel, invertersReactiveEnergyLogLastWeeksValue=invertersReactiveEnergyLogLastWeeksValue, mainsMonitorCurrentMinorHighLevel=mainsMonitorCurrentMinorHighLevel, solarChargersEnergyLogLastDaysIndex=solarChargersEnergyLogLastDaysIndex, batteryMonitorNumberOfSymmetries=batteryMonitorNumberOfSymmetries, batteryVoltageMinorHighLevel=batteryVoltageMinorHighLevel, inverterOutputCurrentValue=inverterOutputCurrentValue, currentMonitorCurrentIndex=currentMonitorCurrentIndex, generatorEnergyLogLastHoursTable=generatorEnergyLogLastHoursTable, batteryCurrentValue=batteryCurrentValue, rectifierGroupRectifierTable=rectifierGroupRectifierTable, controlSystemIoUnitsEntry=controlSystemIoUnitsEntry, smartNodeErrorStatus=smartNodeErrorStatus, controlSystemIoUnitNumberOfFans=controlSystemIoUnitNumberOfFans, rectifierGroupTemperatureTrapRepeatCounter=rectifierGroupTemperatureTrapRepeatCounter, batteryTestResultStartDateTime=batteryTestResultStartDateTime, inverterGroupInverterOutputFrequencyValue=inverterGroupInverterOutputFrequencyValue, batteryEnergyLogAccumulated=batteryEnergyLogAccumulated, currentMonitorFuseDescription=currentMonitorFuseDescription, generatorEnergyLogLastDaysValue=generatorEnergyLogLastDaysValue, flexiMonitorInputStatus=flexiMonitorInputStatus, batteryTotalCapacityValue=batteryTotalCapacityValue, rectifiersEnergyLogLastDaysNumberOfEntries=rectifiersEnergyLogLastDaysNumberOfEntries, rectifiersErrorStatus=rectifiersErrorStatus, batteryGroup2TempComp=batteryGroup2TempComp, mainsMonitorVoltageAlarmEnable=mainsMonitorVoltageAlarmEnable, generatorActivation=generatorActivation, controlSystemNumberOfControlUnits=controlSystemNumberOfControlUnits, inverterGroupCapacityMinorAlarmLevel=inverterGroupCapacityMinorAlarmLevel, generatorVoltageControlledStartEnable=generatorVoltageControlledStartEnable, batteryGroup2TotalCapacity=batteryGroup2TotalCapacity, mainsGroupNumberOfPhases=mainsGroupNumberOfPhases, rectifiersEnergyLogLastWeeksTable=rectifiersEnergyLogLastWeeksTable, dcdcNumberOfGroups=dcdcNumberOfGroups, batteryCycleLogDaysEntry=batteryCycleLogDaysEntry, solarChargersCurrentDescription=solarChargersCurrentDescription, windChargersErrorTrapRepeatCounter=windChargersErrorTrapRepeatCounter, batteryCurrents=batteryCurrents, mainsMonitorEnergyLogLastDaysValue=mainsMonitorEnergyLogLastDaysValue, loadVoltageStatus=loadVoltageStatus, loadVoltageDescription=loadVoltageDescription, rectifierGroupRectifierType=rectifierGroupRectifierType, generatorRunHoursLogLastMonthsNumberOfEntries=generatorRunHoursLogLastMonthsNumberOfEntries, rectifierGroupRectifierOutputCurrentValue=rectifierGroupRectifierOutputCurrentValue, inverterGroupCurrentValue=inverterGroupCurrentValue, rectifierGroupCurrentEntry=rectifierGroupCurrentEntry, batteryQualityDescription=batteryQualityDescription, rectifierGroupCapacityStatus=rectifierGroupCapacityStatus, inverterType=inverterType, mainsMonitorVoltageMinorLowLevel=mainsMonitorVoltageMinorLowLevel, solarChargerTable=solarChargerTable, invertersCurrentStatus=invertersCurrentStatus, mainControlUnitTemperatureStatus=mainControlUnitTemperatureStatus, rectifiersTemperatureStatus=rectifiersTemperatureStatus, mainsMonitorNumberOfVoltages=mainsMonitorNumberOfVoltages, userSuspendedDescription=userSuspendedDescription, windChargersErrorMajorAlarmLevel=windChargersErrorMajorAlarmLevel, batteryCurrentStatus=batteryCurrentStatus, smartNodeErrorValue=smartNodeErrorValue, batteryGroup2UsedCapacityTrapRepeatCounter=batteryGroup2UsedCapacityTrapRepeatCounter, inputIoUnitNumberOfInputs=inputIoUnitNumberOfInputs, batteryEnergyLogLastDaysValue=batteryEnergyLogLastDaysValue, dcdcCurrentMinorAlarmLevel=dcdcCurrentMinorAlarmLevel, invertersReactiveEnergyLogLastHoursNumberOfEntries=invertersReactiveEnergyLogLastHoursNumberOfEntries, generatorRunHoursLogLastDaysValue=generatorRunHoursLogLastDaysValue, solarChargerHwVersion=solarChargerHwVersion, flexiMonitorNumberOfInputs=flexiMonitorNumberOfInputs, inputIoUnitProgInputAlarmEnable=inputIoUnitProgInputAlarmEnable, controlSystemSummary=controlSystemSummary, rectifierGroupEnergyLogAccumulated=rectifierGroupEnergyLogAccumulated, loadLVLDTrapRepeatCounter=loadLVLDTrapRepeatCounter, mainsOutageLogDaysNumberOfEntries=mainsOutageLogDaysNumberOfEntries, loadGroupEntry=loadGroupEntry, batteryBankCurrentTable=batteryBankCurrentTable, batteryGroup2AhDischargedValue=batteryGroup2AhDischargedValue, mainsGroupVoltageMajorLowLevel=mainsGroupVoltageMajorLowLevel, loadFuseValue=loadFuseValue, batteryAhDischargedStatus=batteryAhDischargedStatus, deltaTemperatureMajorHighLevel=deltaTemperatureMajorHighLevel, smartNodeErrorDescription=smartNodeErrorDescription, invertersCapacityMajorAlarmLevel=invertersCapacityMajorAlarmLevel, batteryGroup2CurrentsMajorHighLevel=batteryGroup2CurrentsMajorHighLevel, loadCurrent=loadCurrent, inverterGroupCurrentDescription=inverterGroupCurrentDescription, batteryGroup2EnergyLog=batteryGroup2EnergyLog, batteryGroup2BankSymmetryEntry=batteryGroup2BankSymmetryEntry, batteryGroup2BankSymmetryTrapRepeatCounter=batteryGroup2BankSymmetryTrapRepeatCounter, batteryUsedCapacityMinorAlarmLevel=batteryUsedCapacityMinorAlarmLevel, batteryGroup2CurrentStatus=batteryGroup2CurrentStatus, rectifierGroupsEntry=rectifierGroupsEntry, batteryCurrentsMinorHighLevel=batteryCurrentsMinorHighLevel, batteryGroup2BoostManualMaxDuration=batteryGroup2BoostManualMaxDuration, solarChargersCurrent=solarChargersCurrent, mainControlUnitsTable=mainControlUnitsTable, rectifierGroupIndex=rectifierGroupIndex, controlSystem=controlSystem, generatorFuelConsumptionLog=generatorFuelConsumptionLog, inverterGroupEnergyLogLastDaysTable=inverterGroupEnergyLogLastDaysTable, batteryGroup2TimeLeftMinorAlarmLevel=batteryGroup2TimeLeftMinorAlarmLevel, rectifiersCurrentStatus=rectifiersCurrentStatus, rectifiersTemperatureMinorLowLevel=rectifiersTemperatureMinorLowLevel, inverterOutputVoltageValue=inverterOutputVoltageValue, windChargersErrorMinorAlarmLevel=windChargersErrorMinorAlarmLevel, loadNumberOfGroups=loadNumberOfGroups, batteryGroup2CycleLogWeeksIndex=batteryGroup2CycleLogWeeksIndex, batteryGroup2TemperatureMinorLowLevel=batteryGroup2TemperatureMinorLowLevel, invertersCapacityTrapRepeatCounter=invertersCapacityTrapRepeatCounter, batteryCycleLogMonthsNumberOfEntries=batteryCycleLogMonthsNumberOfEntries, invertersReactiveEnergyLogLastWeeksEntry=invertersReactiveEnergyLogLastWeeksEntry, currentMonitorEnergyLogLastDaysEntry=currentMonitorEnergyLogLastDaysEntry, battery=battery, solarChargerType=solarChargerType, currentMonitorCurrentMinorAlarmLevel=currentMonitorCurrentMinorAlarmLevel, batteryCurrentsStatus=batteryCurrentsStatus, mainsGroupOutageLogTable=mainsGroupOutageLogTable, rectifiersErrorTrapRepeatCounter=rectifiersErrorTrapRepeatCounter, inputIoUnitProgInputValue=inputIoUnitProgInputValue, generatorFuelConsumptionLogLastDaysIndex=generatorFuelConsumptionLogLastDaysIndex, batteryMonitorNumberOfTemperatures=batteryMonitorNumberOfTemperatures, batteryBankIndex=batteryBankIndex, powerSystemStatus=powerSystemStatus, alarmGroupEntry=alarmGroupEntry, rectifiersTemperature=rectifiersTemperature, batteryVoltageMajorHighLevel=batteryVoltageMajorHighLevel, batteryGroup2EqualizeVoltage=batteryGroup2EqualizeVoltage, invertersNumberOfInverters=invertersNumberOfInverters, rectifierGroupErrorAlarmEnable=rectifierGroupErrorAlarmEnable, alarmSubsysStatusOnOff=alarmSubsysStatusOnOff, batteryGroup2TemperatureAlarmEnable=batteryGroup2TemperatureAlarmEnable, mainsMainsFailureMinorAlarmLevel=mainsMainsFailureMinorAlarmLevel, inverterGroupStatus=inverterGroupStatus, inverterGroupReactiveEnergyLogLastWeeksNoOfEntries=inverterGroupReactiveEnergyLogLastWeeksNoOfEntries, loadMonitorErrorStatus=loadMonitorErrorStatus, mainControlUnitTemperatureDescription=mainControlUnitTemperatureDescription, mainsMonitorFrequencyAlarmEnable=mainsMonitorFrequencyAlarmEnable, batteryGroup2UsedCapacityMinorAlarmLevel=batteryGroup2UsedCapacityMinorAlarmLevel, inverterGroupReactiveEnergyLogLastWeeksEntry=inverterGroupReactiveEnergyLogLastWeeksEntry, windChargerTable=windChargerTable, batteryAhDischargedMinorHighLevel=batteryAhDischargedMinorHighLevel, windChargersCurrent=windChargersCurrent, rectifierGroupRectifierSwVersion=rectifierGroupRectifierSwVersion, inputControlUnitInputIndex=inputControlUnitInputIndex)
mibBuilder.exportSymbols("SP2-MIB", rectifierGroupTemperatureStatus=rectifierGroupTemperatureStatus, loadVoltageEnable=loadVoltageEnable, batteryTimeLeftDescription=batteryTimeLeftDescription, mainsGroupOutageLogDaysNumberOfEntries=mainsGroupOutageLogDaysNumberOfEntries, currentMonitorEnergyLogLastHoursTable=currentMonitorEnergyLogLastHoursTable, mainControlUnitTemperatureTrapRepeatCounter=mainControlUnitTemperatureTrapRepeatCounter, loadGroupIndex=loadGroupIndex, powerSystemCurrentDecimalSetting=powerSystemCurrentDecimalSetting, mainsOutageLogWeeksIndex=mainsOutageLogWeeksIndex, mainsVoltageEntry=mainsVoltageEntry, solarChargerIndex=solarChargerIndex, deltaTemperatureStatus=deltaTemperatureStatus, mainsGroupOutageLogWeeksEntry=mainsGroupOutageLogWeeksEntry, batteryMonitorSymmetryAlarmEnable=batteryMonitorSymmetryAlarmEnable, loadEnergyLog=loadEnergyLog, inverterGroupInverterOutputReactivePowerValue=inverterGroupInverterOutputReactivePowerValue, rectifiersEnergyLogLastWeeksIndex=rectifiersEnergyLogLastWeeksIndex, mainsGroupOutageLogMonthsIndex=mainsGroupOutageLogMonthsIndex, outputIoUnitOutputDescription=outputIoUnitOutputDescription, loadLVLDEntry=loadLVLDEntry, batteryGroup2CurrentMajorLowLevel=batteryGroup2CurrentMajorLowLevel, alarmLoadGroupTrap=alarmLoadGroupTrap, batteryCycleLogWeeksValue=batteryCycleLogWeeksValue, batteryGroup2BankSymmetryMinorAlarmLevel=batteryGroup2BankSymmetryMinorAlarmLevel, batteryGroup2BankSymmetryMajorAlarmLevel=batteryGroup2BankSymmetryMajorAlarmLevel, batteryVoltageAlarmEnable=batteryVoltageAlarmEnable, batteryBankSymmetryDeltaValue=batteryBankSymmetryDeltaValue, batteryGroup2VoltageMinorLowLevel=batteryGroup2VoltageMinorLowLevel, loadMonitorErrorDescription=loadMonitorErrorDescription, alarmGroupStatus=alarmGroupStatus, loadEnergyLogLastDaysValue=loadEnergyLogLastDaysValue, windChargerEntry=windChargerEntry, loadMonitorErrorMajorAlarmLevel=loadMonitorErrorMajorAlarmLevel, batteryGroup2EnergyLogLastHoursNumberOfEntries=batteryGroup2EnergyLogLastHoursNumberOfEntries, generatorEnergyLogLastHoursNumberOfEntries=generatorEnergyLogLastHoursNumberOfEntries, powerSystemCapacityScale=powerSystemCapacityScale, mainsGroupVoltageTable=mainsGroupVoltageTable, generatorRunHoursLogLastWeeksNumberOfEntries=generatorRunHoursLogLastWeeksNumberOfEntries, controlSystemIoUnitFanControl=controlSystemIoUnitFanControl, batteryGroup2TemperaturesDescription=batteryGroup2TemperaturesDescription, mainsOutageLogDaysEntry=mainsOutageLogDaysEntry, loadCurrentDescription=loadCurrentDescription, loadMonitorErrorTrapRepeatCounter=loadMonitorErrorTrapRepeatCounter, currentMonitorEnergyLogLastWeeksIndex=currentMonitorEnergyLogLastWeeksIndex, rectifierGroupCurrentMajorAlarmLevel=rectifierGroupCurrentMajorAlarmLevel, batteryBankNumberOfCurrents=batteryBankNumberOfCurrents, batteryBankTemperatureEntry=batteryBankTemperatureEntry, batteryRemainingCapacityTrapRepeatCounter=batteryRemainingCapacityTrapRepeatCounter, generatorTankEnable=generatorTankEnable, currentMonitorEnergyLogAccumulatedTable=currentMonitorEnergyLogAccumulatedTable, invertersErrorEnable=invertersErrorEnable, batteryGroup2BankSymmetryMeasureValue=batteryGroup2BankSymmetryMeasureValue, batteryEnergyLogLastHoursEntry=batteryEnergyLogLastHoursEntry, batteryGroup2TemperaturesMinorHighLevel=batteryGroup2TemperaturesMinorHighLevel, batteryTest=batteryTest, rectifierGroupCurrentAlarmEnable=rectifierGroupCurrentAlarmEnable, mainsMonitorEnergyLogAccumulated=mainsMonitorEnergyLogAccumulated, batteryGroup2BankFuseTable=batteryGroup2BankFuseTable, batteryEqualizeManualMaxDuration=batteryEqualizeManualMaxDuration, invertersErrorMinorAlarmLevel=invertersErrorMinorAlarmLevel, dcdcSwVersion=dcdcSwVersion, generator=generator, batteryQualityMinorAlarmLevel=batteryQualityMinorAlarmLevel, currentMonitorEnergyLogLastWeeksTable=currentMonitorEnergyLogLastWeeksTable, batteryGroup2TimeLeft=batteryGroup2TimeLeft, batteryBankNumberOfBanks=batteryBankNumberOfBanks, controlUnitHwPartNumber=controlUnitHwPartNumber, controlSystemIoUnits=controlSystemIoUnits, loadGroupTable=loadGroupTable, mainsMonitorCurrentEntry=mainsMonitorCurrentEntry, controlSystemIoUnitTemperatureMinorLowLevel=controlSystemIoUnitTemperatureMinorLowLevel, batteryGroup2CurrentDescription=batteryGroup2CurrentDescription, batteryGroup2TotalCapacityAlarmEnable=batteryGroup2TotalCapacityAlarmEnable, batteryGroup2EnergyLogLastWeeksIndex=batteryGroup2EnergyLogLastWeeksIndex, rectifierGroupEnergyLogTable=rectifierGroupEnergyLogTable, currentMonitorFuseEntry=currentMonitorFuseEntry, solarChargerHwPartNumber=solarChargerHwPartNumber, rectifiersCapacityDescription=rectifiersCapacityDescription, batteryCycleLogMonthsValue=batteryCycleLogMonthsValue, batteryTestVoltage=batteryTestVoltage, rectifiersEnergyLogLastDaysIndex=rectifiersEnergyLogLastDaysIndex, batteryCurrentsDescription=batteryCurrentsDescription, inputIoUnitsEntry=inputIoUnitsEntry, dcdcCurrentDescription=dcdcCurrentDescription, batteryFuseTrapRepeatCounter=batteryFuseTrapRepeatCounter, outputs=outputs, rectifierInputVoltageValue=rectifierInputVoltageValue, batteryCycleLogDaysIndex=batteryCycleLogDaysIndex, flexiMonitorType=flexiMonitorType, batteryGroup2Voltage=batteryGroup2Voltage, batteryTimeLeftTrapRepeatCounter=batteryTimeLeftTrapRepeatCounter, batteryEqualizeVoltage=batteryEqualizeVoltage, batteryMonitorErrorStatus=batteryMonitorErrorStatus, userSuspendedValue=userSuspendedValue, batteryGroup2Temperatures=batteryGroup2Temperatures, mainsGroupOutageLogMonthsValue=mainsGroupOutageLogMonthsValue, batteryGroup2RemainingCapacityAlarmEnable=batteryGroup2RemainingCapacityAlarmEnable, batteryBankTemperatureTable=batteryBankTemperatureTable, batteryMonitorCurrentStatus=batteryMonitorCurrentStatus, rectifierGroupCapacityValue=rectifierGroupCapacityValue, inputIoUnitsTable=inputIoUnitsTable, rectifierGroupTemperatureMinorHighLevel=rectifierGroupTemperatureMinorHighLevel, eltekTraps=eltekTraps, rectifiersCapacityValue=rectifiersCapacityValue, inverterGroupEnergyLogLastHoursEntry=inverterGroupEnergyLogLastHoursEntry, solarChargersErrorStatus=solarChargersErrorStatus, batteryRemainingCapacityDescription=batteryRemainingCapacityDescription, alarmSubsysStatusValue=alarmSubsysStatusValue, batteryTestCommand=batteryTestCommand, inverterGroupInverterTable=inverterGroupInverterTable, inverterGroupReactiveEnergyLogLastWeeksTable=inverterGroupReactiveEnergyLogLastWeeksTable, batteryGroup2FuseDescription=batteryGroup2FuseDescription, rectifiersCurrentAlarmEnable=rectifiersCurrentAlarmEnable, dcdcCurrentTable=dcdcCurrentTable, mainsOutageLog=mainsOutageLog, rectifiersEnergyLogLastDaysValue=rectifiersEnergyLogLastDaysValue, currentMonitorEnergyLogAccumulated=currentMonitorEnergyLogAccumulated, batteryEnergyLog=batteryEnergyLog, batteryGroup2Equalize=batteryGroup2Equalize, inverterGroupEnergyLogLastWeeksValue=inverterGroupEnergyLogLastWeeksValue, inverterGroupEnergyLogLastHoursIndex=inverterGroupEnergyLogLastHoursIndex, batteryGroup2TemperatureTrapRepeatCounter=batteryGroup2TemperatureTrapRepeatCounter, rectifiersEnergyLogLastWeeksEntry=rectifiersEnergyLogLastWeeksEntry, generatorMainsDelay=generatorMainsDelay, solarChargersErrorTrapRepeatCounter=solarChargersErrorTrapRepeatCounter, batteryGroup2TimeLeftValue=batteryGroup2TimeLeftValue, currentMonitorEnergyLogLastDaysNumberOfEntries=currentMonitorEnergyLogLastDaysNumberOfEntries, mainControlUnitEarthFaultValue=mainControlUnitEarthFaultValue, batteryFuseDescription=batteryFuseDescription, batteryCycleLogWeeksIndex=batteryCycleLogWeeksIndex, inverterGroupEnergyLogLastDaysValue=inverterGroupEnergyLogLastDaysValue, batteryFuseAlarmEnable=batteryFuseAlarmEnable, loadNumberOfVoltages=loadNumberOfVoltages, mainsMonitorErrorTrapRepeatCounter=mainsMonitorErrorTrapRepeatCounter, controlSystemIoUnitIndex=controlSystemIoUnitIndex, outputControlUnitIndex=outputControlUnitIndex, batteryGroup2Quality=batteryGroup2Quality, batteryTemperatureMinorLowLevel=batteryTemperatureMinorLowLevel, mainsGroupVoltageEntry=mainsGroupVoltageEntry, windChargersCurrentMajorAlarmLevel=windChargersCurrentMajorAlarmLevel, batteryGroup2BoostCurrentThreshold=batteryGroup2BoostCurrentThreshold, batteryTestResultEntry=batteryTestResultEntry, generatorTankTable=generatorTankTable, deltaTemperatureTrapRepeatCounter=deltaTemperatureTrapRepeatCounter, loadLVLDStatus=loadLVLDStatus, inputControlUnitInputTable=inputControlUnitInputTable, batteryGroup2BankTemperatureTable=batteryGroup2BankTemperatureTable, ioUnitErrorDescription=ioUnitErrorDescription, loadFuseDescription=loadFuseDescription, loadEnergyLogLastHoursEntry=loadEnergyLogLastHoursEntry, batteryFuseStatus=batteryFuseStatus, rectifierGroupEnergyLogLastHoursIndex=rectifierGroupEnergyLogLastHoursIndex, batteryGroup2BankSymmetryDescription=batteryGroup2BankSymmetryDescription, mainsGroupVoltageStatus=mainsGroupVoltageStatus, batteryGroup2LVBDStatus=batteryGroup2LVBDStatus, currentMonitorCurrentStatus=currentMonitorCurrentStatus, batteryFuseIndex=batteryFuseIndex, mainsVoltageIndex=mainsVoltageIndex, snmpInhibitTraps=snmpInhibitTraps, deltaTemperatureMinorHighLevel=deltaTemperatureMinorHighLevel, outputControlUnitOutputEntry=outputControlUnitOutputEntry, currentMonitorFuseAlarmEnable=currentMonitorFuseAlarmEnable, batteryEnergyLogLastHoursIndex=batteryEnergyLogLastHoursIndex, windChargersEnergyLogLastHoursTable=windChargersEnergyLogLastHoursTable, solarChargers=solarChargers, currentMonitorCurrentTable=currentMonitorCurrentTable, rectifiers=rectifiers, inverterGroupErrorTrapRepeatCounter=inverterGroupErrorTrapRepeatCounter, mainsMonitorEnergyLogLastWeeksIndex=mainsMonitorEnergyLogLastWeeksIndex, batteryGroup2EnergyLogLastWeeksEntry=batteryGroup2EnergyLogLastWeeksEntry, batteryAhChargedStatus=batteryAhChargedStatus, windChargerSwPartNumber=windChargerSwPartNumber, batteryGroup2=batteryGroup2, controlUnitSwVersion=controlUnitSwVersion, mainsMonitorEnergyLogLastHoursIndex=mainsMonitorEnergyLogLastHoursIndex, batteryTempCompEnable=batteryTempCompEnable, loadEnergyLogLastHoursValue=loadEnergyLogLastHoursValue, batteryCurrentsValue=batteryCurrentsValue, batteryEnergyLogLastDaysNumberOfEntries=batteryEnergyLogLastDaysNumberOfEntries, batteryEnergyLogLastDaysEntry=batteryEnergyLogLastDaysEntry, flexiMonitorIndex=flexiMonitorIndex, smartNodeErrorMajorAlarmLevel=smartNodeErrorMajorAlarmLevel, batteryMonitorSymmetryIndex=batteryMonitorSymmetryIndex, mainsMonitorNumberOfFrequencies=mainsMonitorNumberOfFrequencies, inverterGroupCapacityAlarmEnable=inverterGroupCapacityAlarmEnable, batteryTotalCapacityMajorLowLevel=batteryTotalCapacityMajorLowLevel, outputControlUnitOutputIndex=outputControlUnitOutputIndex, batteryRemainingCapacityAlarmEnable=batteryRemainingCapacityAlarmEnable, inverterGroupInverterOutputPowerValue=inverterGroupInverterOutputPowerValue, dcdcCapacityAlarmEnable=dcdcCapacityAlarmEnable, batteryGroup2TemperatureStatus=batteryGroup2TemperatureStatus, batteryGroup2LVBDValue=batteryGroup2LVBDValue, batteryQuality=batteryQuality, loadVoltageValue=loadVoltageValue, batteryCurrentAlarmEnable=batteryCurrentAlarmEnable, batteryEqualizeCurrentThreshold=batteryEqualizeCurrentThreshold, batteryMonitorCurrentMajorLowLevel=batteryMonitorCurrentMajorLowLevel, batteryAhChargedAlarmEnable=batteryAhChargedAlarmEnable, mainsMainsFailureMajorAlarmLevel=mainsMainsFailureMajorAlarmLevel, batteryEnergyLogLastWeeksNumberOfEntries=batteryEnergyLogLastWeeksNumberOfEntries, windChargersEnergyLogLastWeeksValue=windChargersEnergyLogLastWeeksValue, invertersCurrentMajorAlarmLevel=invertersCurrentMajorAlarmLevel, inverterOutputReactivePowerValue=inverterOutputReactivePowerValue, solarChargerSwVersion=solarChargerSwVersion, batteryTotalCapacityDescription=batteryTotalCapacityDescription, batteryTemperatures=batteryTemperatures, powerSystemTraps=powerSystemTraps, powerSystemLatitudeDecimal=powerSystemLatitudeDecimal, loadEnergyLogLastWeeksEntry=loadEnergyLogLastWeeksEntry, controlSystemIoUnitTemperatureIndex=controlSystemIoUnitTemperatureIndex, mainsOutageLogMonthsValue=mainsOutageLogMonthsValue, powerSystemNominalVoltage=powerSystemNominalVoltage, batteryTemperatureValue=batteryTemperatureValue, flexiMonitors=flexiMonitors, batteryCycleLogDaysNumberOfEntries=batteryCycleLogDaysNumberOfEntries, powerSystemElevation=powerSystemElevation, rectifierGroupTemperatureEntry=rectifierGroupTemperatureEntry, windChargerSwVersion=windChargerSwVersion, mainsMonitorCurrentValue=mainsMonitorCurrentValue, load=load, windChargerHwVersion=windChargerHwVersion, generatorMonthlyRunStartTime=generatorMonthlyRunStartTime, loadVoltageEntry=loadVoltageEntry, dcdcCapacityValue=dcdcCapacityValue, invertersCurrentValue=invertersCurrentValue, rectifierGroupEnergyLogLastWeeksValue=rectifierGroupEnergyLogLastWeeksValue, solarChargersCurrentTrapRepeatCounter=solarChargersCurrentTrapRepeatCounter, mainsGroupOutageLogDaysIndex=mainsGroupOutageLogDaysIndex, generatorEnergyLogLastHoursValue=generatorEnergyLogLastHoursValue, batteryGroup2TemperaturesValue=batteryGroup2TemperaturesValue, inverterTable=inverterTable, solarChargerEntry=solarChargerEntry, solarChargersEnergyLog=solarChargersEnergyLog, generatorDailyRunSetupTable=generatorDailyRunSetupTable, loadNumberOfLVLDs=loadNumberOfLVLDs, batteryRemainingCapacity=batteryRemainingCapacity, solarChargersErrorMajorAlarmLevel=solarChargersErrorMajorAlarmLevel, generatorTankIndex=generatorTankIndex, solarChargersErrorValue=solarChargersErrorValue, windChargersEnergyLogLastDaysNumberOfEntries=windChargersEnergyLogLastDaysNumberOfEntries, batteryEnergyLogLastHoursValue=batteryEnergyLogLastHoursValue, batteryBankStatus=batteryBankStatus, batteryGroup2TestResultDuration=batteryGroup2TestResultDuration, rectifierGroupTemperatureDescription=rectifierGroupTemperatureDescription, batteryGroup2TestResultIndex=batteryGroup2TestResultIndex, rectifiersCurrentDescription=rectifiersCurrentDescription, mainsOutageLogWeeksNumberOfEntries=mainsOutageLogWeeksNumberOfEntries, batteryVoltageMajorLowLevel=batteryVoltageMajorLowLevel, batteryMonitorSymmetryTable=batteryMonitorSymmetryTable, rectifiersEnergyLogLastHoursNumberOfEntries=rectifiersEnergyLogLastHoursNumberOfEntries, batteryMonitorSymmetryDescription=batteryMonitorSymmetryDescription, controlSystemIoUnitTemperatureMinorHighLevel=controlSystemIoUnitTemperatureMinorHighLevel, batteryGroup2TemperatureValue=batteryGroup2TemperatureValue, mainsMonitorEnergyLogAccumulatedTable=mainsMonitorEnergyLogAccumulatedTable)
mibBuilder.exportSymbols("SP2-MIB", windChargersCurrentValue=windChargersCurrentValue, batteryBankSymmetryEntry=batteryBankSymmetryEntry, solarChargersCurrentMajorAlarmLevel=solarChargersCurrentMajorAlarmLevel, inverterGroupInverterEntry=inverterGroupInverterEntry, batteryTemperatureStatus=batteryTemperatureStatus, batteryEnergyLogLastDaysTable=batteryEnergyLogLastDaysTable, mainsMonitorErrorStatus=mainsMonitorErrorStatus, controlSystemResetManualAlarms=controlSystemResetManualAlarms, inverterSwVersion=inverterSwVersion, inverterGroupErrorTable=inverterGroupErrorTable, batteryGroup2TestCommand=batteryGroup2TestCommand, generatorRunHoursLogLastDaysNumberOfEntries=generatorRunHoursLogLastDaysNumberOfEntries, generatorCurrentLimitControlledStopValue=generatorCurrentLimitControlledStopValue, inverterGroupEnergyLogLastWeeksNumberOfEntries=inverterGroupEnergyLogLastWeeksNumberOfEntries, batteryAhChargedTrapRepeatCounter=batteryAhChargedTrapRepeatCounter, generatorEnergyLogLastWeeksValue=generatorEnergyLogLastWeeksValue, inverterGroupCurrentTrapRepeatCounter=inverterGroupCurrentTrapRepeatCounter, rectifierGroupEnergyLogLastHoursTable=rectifierGroupEnergyLogLastHoursTable, invertersEnergyLogLastWeeksNumberOfEntries=invertersEnergyLogLastWeeksNumberOfEntries, alarmBatteryTrap=alarmBatteryTrap, currentMonitorsNumberOfUnits=currentMonitorsNumberOfUnits, loadVoltageIndex=loadVoltageIndex, controlSystemIoUnitTemperatureTable=controlSystemIoUnitTemperatureTable, mainsVoltageMajorLowLevel=mainsVoltageMajorLowLevel, batteryGroup2FusesStatus=batteryGroup2FusesStatus, controlSystemIoUnitTemperatureAlarmEnable=controlSystemIoUnitTemperatureAlarmEnable, loadEnergyLogLastWeeksValue=loadEnergyLogLastWeeksValue, ambientTemperatureAlarmEnable=ambientTemperatureAlarmEnable, batteryGroup2EnergyLogLastHoursValue=batteryGroup2EnergyLogLastHoursValue, rectifierGroupErrorTrapRepeatCounter=rectifierGroupErrorTrapRepeatCounter, batteryGroup2AhCharged=batteryGroup2AhCharged, loadMonitorErrorMinorAlarmLevel=loadMonitorErrorMinorAlarmLevel, rectifierGroupEnergyLogLastDaysIndex=rectifierGroupEnergyLogLastDaysIndex, batteryBankSymmetryAlarmEnable=batteryBankSymmetryAlarmEnable, rectifiersErrorMinorAlarmLevel=rectifiersErrorMinorAlarmLevel, rectifiersCapacityMajorAlarmLevel=rectifiersCapacityMajorAlarmLevel, batteryMonitorCurrentValue=batteryMonitorCurrentValue, mainsGroupVoltageDescription=mainsGroupVoltageDescription, mainControlUnitTemperatureMajorHighLevel=mainControlUnitTemperatureMajorHighLevel, mainsMainsFailureValue=mainsMainsFailureValue, rectifierSwVersion=rectifierSwVersion, generatorMonthlyRunStartDayinMonth2=generatorMonthlyRunStartDayinMonth2, batteryGroup2EnergyLogAccumulated=batteryGroup2EnergyLogAccumulated, invertersErrorStatus=invertersErrorStatus, inverterGroupCapacityValue=inverterGroupCapacityValue, invertersReactiveEnergyLogLastDaysValue=invertersReactiveEnergyLogLastDaysValue, mainsMonitorFrequencyMajorHighLevel=mainsMonitorFrequencyMajorHighLevel, dcdcOutputCurrentValue=dcdcOutputCurrentValue, ambientTemperatureMajorLowLevel=ambientTemperatureMajorLowLevel, dcdcCurrentMajorAlarmLevel=dcdcCurrentMajorAlarmLevel, batteryMonitorCurrentDescription=batteryMonitorCurrentDescription, inputControlUnitInputStatus=inputControlUnitInputStatus, invertersEnergyLogLastHoursEntry=invertersEnergyLogLastHoursEntry, batteryMonitorIndex=batteryMonitorIndex, inverterGroupEnergyLogLastDaysNumberOfEntries=inverterGroupEnergyLogLastDaysNumberOfEntries, windChargersCurrentTrapRepeatCounter=windChargersCurrentTrapRepeatCounter, outputControlUnitOutputDescription=outputControlUnitOutputDescription, inputControlUnitInputDescription=inputControlUnitInputDescription, mainsMonitorEnergyLogLastDaysTable=mainsMonitorEnergyLogLastDaysTable, currentMonitorEnergyLogAccumulatedEntry=currentMonitorEnergyLogAccumulatedEntry, batteryGroup2CycleLogDaysTable=batteryGroup2CycleLogDaysTable, solarChargersEnergyLogLastWeeksEntry=solarChargersEnergyLogLastWeeksEntry, ioUnitErrorMinorAlarmLevel=ioUnitErrorMinorAlarmLevel, mainControlUnitNumberOfTemperatures=mainControlUnitNumberOfTemperatures, windChargersEnergyLogLastHoursIndex=windChargersEnergyLogLastHoursIndex, generatorEnergyLogLastHoursEntry=generatorEnergyLogLastHoursEntry, batteryGroup2AhDischargedMinorHighLevel=batteryGroup2AhDischargedMinorHighLevel, rectifierGroupErrorDescription=rectifierGroupErrorDescription, alarmControlSystemTrap=alarmControlSystemTrap, rectifiersEnergyLogLastHoursIndex=rectifiersEnergyLogLastHoursIndex, batteryMonitorErrorMajorAlarmLevel=batteryMonitorErrorMajorAlarmLevel, batteryGroup2FuseValue=batteryGroup2FuseValue, batteryGroup2BankSymmetryStatus=batteryGroup2BankSymmetryStatus, outputControlUnitNumberOfOutputs=outputControlUnitNumberOfOutputs, batteryCycleLogWeeksEntry=batteryCycleLogWeeksEntry, solarChargersEnergyLogLastHoursValue=solarChargersEnergyLogLastHoursValue, mainsVoltageTrapRepeatCounter=mainsVoltageTrapRepeatCounter, inputControlUnitInputAlarmEnable=inputControlUnitInputAlarmEnable, invertersEnergyLogLastWeeksEntry=invertersEnergyLogLastWeeksEntry, mainsGroupOutageLogWeeksNumberOfEntries=mainsGroupOutageLogWeeksNumberOfEntries, windChargersEnergyLogLastWeeksNumberOfEntries=windChargersEnergyLogLastWeeksNumberOfEntries, inverterGroupReactiveEnergyLogLastDaysNoOfEntries=inverterGroupReactiveEnergyLogLastDaysNoOfEntries, generatorRunHoursLogLastWeeksEntry=generatorRunHoursLogLastWeeksEntry, mainsVoltageValue=mainsVoltageValue, batteryGroup2CurrentIndex=batteryGroup2CurrentIndex, mainControlUnitEarthFaultMajorAlarmLevel=mainControlUnitEarthFaultMajorAlarmLevel, batteryTestNumberOfResults=batteryTestNumberOfResults, batteryGroup2AhDischargedTrapRepeatCounter=batteryGroup2AhDischargedTrapRepeatCounter, mainControlUnits=mainControlUnits, batteryTemperaturesMajorHighLevel=batteryTemperaturesMajorHighLevel, currentMonitorCurrentEntry=currentMonitorCurrentEntry, inverterGroupReactiveEnergyLogLastHoursNoOfEntries=inverterGroupReactiveEnergyLogLastHoursNoOfEntries, batteryMonitors=batteryMonitors, batteryEnergyLogLastHoursTable=batteryEnergyLogLastHoursTable, inverterGroupInverterHwVersion=inverterGroupInverterHwVersion, rectifierEntry=rectifierEntry, powerSystemSite=powerSystemSite, batteryGroup2TemperatureMinorHighLevel=batteryGroup2TemperatureMinorHighLevel, batteryMonitorCurrentIndex=batteryMonitorCurrentIndex, windChargersEnergyLogLastWeeksTable=windChargersEnergyLogLastWeeksTable, rectifierGroupCapacityTrapRepeatCounter=rectifierGroupCapacityTrapRepeatCounter, mainsVoltageTable=mainsVoltageTable, batteryCycleLogWeeksNumberOfEntries=batteryCycleLogWeeksNumberOfEntries, controlSystemIoUnitFanTable=controlSystemIoUnitFanTable, inverterGroupErrorMinorAlarmLevel=inverterGroupErrorMinorAlarmLevel, batteryCycleLogDaysTable=batteryCycleLogDaysTable, dcdc=dcdc, rectifiersEnergyLogLastWeeksValue=rectifiersEnergyLogLastWeeksValue, mainsMonitorFrequencyTrapRepeatCounter=mainsMonitorFrequencyTrapRepeatCounter, inputIoUnitProgInputTable=inputIoUnitProgInputTable, batteryGroup2CycleLogMonthsTable=batteryGroup2CycleLogMonthsTable, windChargersEnergyLogAccumulated=windChargersEnergyLogAccumulated, solarChargersEnergyLogLastHoursNumberOfEntries=solarChargersEnergyLogLastHoursNumberOfEntries, batteryTimeLeftValue=batteryTimeLeftValue, batteryTemperaturesDescription=batteryTemperaturesDescription, currentMonitorCurrentDescription=currentMonitorCurrentDescription, dcdcCapacityTable=dcdcCapacityTable, generatorRunHoursLogLastWeeksIndex=generatorRunHoursLogLastWeeksIndex, batteryGroup2BankSymmetryIndex=batteryGroup2BankSymmetryIndex, inverterGroupReactiveEnergyLogTable=inverterGroupReactiveEnergyLogTable, batteryGroup2BankNumberOfFuses=batteryGroup2BankNumberOfFuses, rectifiersCapacityMinorAlarmLevel=rectifiersCapacityMinorAlarmLevel, batteryTemperatureDescription=batteryTemperatureDescription, batteryGroup2CycleLogWeeksTable=batteryGroup2CycleLogWeeksTable, solarChargersCurrentAlarmEnable=solarChargersCurrentAlarmEnable, flexiMonitorInputDescription=flexiMonitorInputDescription, flexiMonitorOutputTable=flexiMonitorOutputTable, inputIoUnitProgInputIndex=inputIoUnitProgInputIndex, rectifierSwPartNumber=rectifierSwPartNumber, batteryMonitorErrorMinorAlarmLevel=batteryMonitorErrorMinorAlarmLevel, inverterGroupCurrentMajorAlarmLevel=inverterGroupCurrentMajorAlarmLevel, rectifierGroupRectifierHwPartNumber=rectifierGroupRectifierHwPartNumber, solarChargersEnergyLogLastWeeksIndex=solarChargersEnergyLogLastWeeksIndex, deltaTemperatureAlarmEnable=deltaTemperatureAlarmEnable, flexiMonitorErrorDescription=flexiMonitorErrorDescription, mainsMainsFailureDescription=mainsMainsFailureDescription, rectifierTable=rectifierTable, rectifierGroupCapacityDescription=rectifierGroupCapacityDescription, solarChargersStatus=solarChargersStatus, solarChargersCurrentValue=solarChargersCurrentValue, batteryMonitorErrorDescription=batteryMonitorErrorDescription, deltaTemperatureMinorLowLevel=deltaTemperatureMinorLowLevel, loadFuseStatus=loadFuseStatus, inverterGroupInverterOutputCurrentValue=inverterGroupInverterOutputCurrentValue, batteryVoltageValue=batteryVoltageValue, inverterGroupEnergyLogLastWeeksEntry=inverterGroupEnergyLogLastWeeksEntry, ioUnitErrorStatus=ioUnitErrorStatus, mainsOutageLogMonthsTable=mainsOutageLogMonthsTable, mainsMonitorIndex=mainsMonitorIndex, rectifierGroupRectifierInputVoltageValue=rectifierGroupRectifierInputVoltageValue, inverterGroupIndex=inverterGroupIndex, powerSystemLatitude=powerSystemLatitude, batteryTimeLeftAlarmEnable=batteryTimeLeftAlarmEnable, flexiMonitorsTable=flexiMonitorsTable, windChargerHwPartNumber=windChargerHwPartNumber, controlSystemIoUnitTemperatureMajorLowLevel=controlSystemIoUnitTemperatureMajorLowLevel, mainsMonitorVoltageTrapRepeatCounter=mainsMonitorVoltageTrapRepeatCounter, batteryGroup2QualityValue=batteryGroup2QualityValue, rectifierGroupEnergyLogLastWeeksIndex=rectifierGroupEnergyLogLastWeeksIndex, batteryMonitorFuseStatus=batteryMonitorFuseStatus, solarChargersCurrentMinorAlarmLevel=solarChargersCurrentMinorAlarmLevel, mainControlUnitTemperatureTable=mainControlUnitTemperatureTable, rectifiersCurrentValue=rectifiersCurrentValue, inputIoUnitIndex=inputIoUnitIndex, alarmOutputsTrap=alarmOutputsTrap, dcdcGroupsEntry=dcdcGroupsEntry, loadLVLDConnectVoltage=loadLVLDConnectVoltage, mainsMonitorsNumberOfUnits=mainsMonitorsNumberOfUnits, deltaTemperatureMajorLowLevel=deltaTemperatureMajorLowLevel, windChargersError=windChargersError, mainsMonitorEnergyLogLastHoursEntry=mainsMonitorEnergyLogLastHoursEntry, batteryBank=batteryBank, rectifiersEnergyLogLastDaysTable=rectifiersEnergyLogLastDaysTable, batteryUsedCapacityStatus=batteryUsedCapacityStatus, alarmInverterTrap=alarmInverterTrap, inverterGroupReactiveEnergyLogLastDaysIndex=inverterGroupReactiveEnergyLogLastDaysIndex, rectifierGroupTemperatureValue=rectifierGroupTemperatureValue, generatorFuelConsumptionLogLastDaysValue=generatorFuelConsumptionLogLastDaysValue, generatorEnergyLogLastDaysEntry=generatorEnergyLogLastDaysEntry, batteryChargeCurrentLimit=batteryChargeCurrentLimit, mainsMonitorErrorDescription=mainsMonitorErrorDescription, alarmGroups=alarmGroups, generatorFuelConsumptionLogLastWeeksNoOfEntries=generatorFuelConsumptionLogLastWeeksNoOfEntries, dcdcCurrentValue=dcdcCurrentValue, rectifiersTemperatureAlarmEnable=rectifiersTemperatureAlarmEnable, batteryGroup2VoltageMinorHighLevel=batteryGroup2VoltageMinorHighLevel, controlSystemIoUnitTemperatureDescription=controlSystemIoUnitTemperatureDescription, batteryGroup2VoltageDescription=batteryGroup2VoltageDescription, batteryGroup2UsedCapacityStatus=batteryGroup2UsedCapacityStatus, rectifierGroupEnergyLogLastWeeksEntry=rectifierGroupEnergyLogLastWeeksEntry, ioUnitErrorAlarmEnable=ioUnitErrorAlarmEnable, invertersCurrentDescription=invertersCurrentDescription, dcdcCurrentTrapRepeatCounter=dcdcCurrentTrapRepeatCounter, generatorTankValue=generatorTankValue, generatorFuelConsumptionTotalUsedTable=generatorFuelConsumptionTotalUsedTable, dcdcErrorTable=dcdcErrorTable, mainControlUnitEarthFaultTable=mainControlUnitEarthFaultTable, batteryGroup2LVBDDescription=batteryGroup2LVBDDescription, invertersError=invertersError, batteryGroup2CycleLogWeeksNumberOfEntries=batteryGroup2CycleLogWeeksNumberOfEntries, batteryMonitorErrorAlarmEnable=batteryMonitorErrorAlarmEnable, generatorFuelConsumptionLogLastWeeksEntry=generatorFuelConsumptionLogLastWeeksEntry, mainControlUnitTemperatureEntry=mainControlUnitTemperatureEntry, loadLVLDIndex=loadLVLDIndex, batteryTimeLeftMajorAlarmLevel=batteryTimeLeftMajorAlarmLevel, mainsGroupOutageLogWeeksIndex=mainsGroupOutageLogWeeksIndex, mainsOutageLogMonthsIndex=mainsOutageLogMonthsIndex, smartNodeErrorMinorAlarmLevel=smartNodeErrorMinorAlarmLevel, batteryGroup2FuseIndex=batteryGroup2FuseIndex, batteryLVBDEnable=batteryLVBDEnable, batteryVoltageTrapRepeatCounter=batteryVoltageTrapRepeatCounter, alarmPowerSystemTrap=alarmPowerSystemTrap, batteryGroup2TotalCapacityMajorLowLevel=batteryGroup2TotalCapacityMajorLowLevel, mainsMonitorFrequencyValue=mainsMonitorFrequencyValue, flexiMonitorOutputStatus=flexiMonitorOutputStatus, batteryGroup2RemainingCapacityValue=batteryGroup2RemainingCapacityValue, loadEnergyLogLastDaysEntry=loadEnergyLogLastDaysEntry, batteryEnergyLogLastHoursNumberOfEntries=batteryEnergyLogLastHoursNumberOfEntries, batteryGroup2TotalCapacityStatus=batteryGroup2TotalCapacityStatus, batteryGroup2EnergyLogLastWeeksValue=batteryGroup2EnergyLogLastWeeksValue, batteryMonitorsEntry=batteryMonitorsEntry, rectifiersErrorDescription=rectifiersErrorDescription, inputControlUnitInputValue=inputControlUnitInputValue, mainsMonitorFrequencyMajorLowLevel=mainsMonitorFrequencyMajorLowLevel, batteryVoltageMinorLowLevel=batteryVoltageMinorLowLevel, controlUnitHwVersion=controlUnitHwVersion, batteryAhDischargedMajorHighLevel=batteryAhDischargedMajorHighLevel, controlSystemIoUnitsTable=controlSystemIoUnitsTable, generatorCapacityControlledStartStopEnable=generatorCapacityControlledStartStopEnable, rectifierGroupRectifierEntry=rectifierGroupRectifierEntry, batteryLVBD=batteryLVBD, mainsGroupOutageLogEntry=mainsGroupOutageLogEntry, rectifiersEnergyLogLastHoursValue=rectifiersEnergyLogLastHoursValue, windChargersErrorDescription=windChargersErrorDescription, currentMonitorFuseValue=currentMonitorFuseValue, windChargersErrorValue=windChargersErrorValue, generatorEnergyLogLastWeeksNumberOfEntries=generatorEnergyLogLastWeeksNumberOfEntries, batteryGroup2RemainingCapacityTrapRepeatCounter=batteryGroup2RemainingCapacityTrapRepeatCounter, mainsGroupOutageLogWeeksTable=mainsGroupOutageLogWeeksTable, solarChargersError=solarChargersError, invertersCapacityValue=invertersCapacityValue, batteryMonitorTemperatureMajorLowLevel=batteryMonitorTemperatureMajorLowLevel, batteryMonitorFuseTable=batteryMonitorFuseTable, generatorFuelConsumptionLogLastMonthsEntry=generatorFuelConsumptionLogLastMonthsEntry, batteryGroup2CycleLogMonthsEntry=batteryGroup2CycleLogMonthsEntry, batteryAhChargedValue=batteryAhChargedValue, rectifiersTemperatureDescription=rectifiersTemperatureDescription, batteryMonitorNumberOfCurrents=batteryMonitorNumberOfCurrents, generatorFuelConsumptionLogLastDaysNoOfEntries=generatorFuelConsumptionLogLastDaysNoOfEntries, mainsVoltageMinorHighLevel=mainsVoltageMinorHighLevel, batteryMonitorTemperatureValue=batteryMonitorTemperatureValue, batteryTimeLeftMinorAlarmLevel=batteryTimeLeftMinorAlarmLevel, generatorTankEntry=generatorTankEntry, generatorMonthlyRunStartDayinMonth1=generatorMonthlyRunStartDayinMonth1)
mibBuilder.exportSymbols("SP2-MIB", rectifierGroupNumberOfRectifiers=rectifierGroupNumberOfRectifiers, dcdcErrorDescription=dcdcErrorDescription, batteryMonitorCurrentMinorHighLevel=batteryMonitorCurrentMinorHighLevel, batteryAhChargedMajorHighLevel=batteryAhChargedMajorHighLevel, batteryRemainingCapacityStatus=batteryRemainingCapacityStatus, batteryMonitorFuseTrapRepeatCounter=batteryMonitorFuseTrapRepeatCounter, batteryEnergyLogLastDaysIndex=batteryEnergyLogLastDaysIndex, batteryTemperaturesMinorLowLevel=batteryTemperaturesMinorLowLevel, batteryGroup2EqualizeCurrentThreshold=batteryGroup2EqualizeCurrentThreshold, ambientTemperature=ambientTemperature, rectifierGroupTemperatureTable=rectifierGroupTemperatureTable, alarmGroupIndex=alarmGroupIndex, inputIoUnitProgInputEntry=inputIoUnitProgInputEntry, batteryBankFuseTable=batteryBankFuseTable, batteryFusesStatus=batteryFusesStatus, batteryGroup2QualityAlarmEnable=batteryGroup2QualityAlarmEnable, batteryGroup2CurrentsDescription=batteryGroup2CurrentsDescription, mainsMonitorFrequencyEntry=mainsMonitorFrequencyEntry, dcdcErrorValue=dcdcErrorValue, mainsMonitorCurrentDescription=mainsMonitorCurrentDescription, invertersReactiveEnergyLogLastWeeksIndex=invertersReactiveEnergyLogLastWeeksIndex, powerSystemMode=powerSystemMode, powerSystemInstallDate=powerSystemInstallDate, mainsMonitorVoltageMajorLowLevel=mainsMonitorVoltageMajorLowLevel, batteryGroup2QualityStatus=batteryGroup2QualityStatus, windChargersEnergyLogLastHoursNumberOfEntries=windChargersEnergyLogLastHoursNumberOfEntries, loadVoltageTrapRepeatCounter=loadVoltageTrapRepeatCounter, batteryGroup2Currents=batteryGroup2Currents, batteryGroup2CurrentsStatus=batteryGroup2CurrentsStatus, batteryCurrentMinorLowLevel=batteryCurrentMinorLowLevel, loadMonitorErrorValue=loadMonitorErrorValue, mainsMonitorEnergyLogLastDaysNumberOfEntries=mainsMonitorEnergyLogLastDaysNumberOfEntries, batteryGroup2TestResultTable=batteryGroup2TestResultTable, batteryGroup2CurrentsMinorHighLevel=batteryGroup2CurrentsMinorHighLevel, inputIoUnitProgInputConfiguration=inputIoUnitProgInputConfiguration, outputControlUnitTable=outputControlUnitTable, batteryBankSymmetryStatus=batteryBankSymmetryStatus, ambientTemperatureStatus=ambientTemperatureStatus, batteryGroup2CurrentMajorHighLevel=batteryGroup2CurrentMajorHighLevel, inverterGroupReactiveEnergyLogLastWeeksIndex=inverterGroupReactiveEnergyLogLastWeeksIndex, inverterGroupCurrentMinorAlarmLevel=inverterGroupCurrentMinorAlarmLevel, currentMonitorFuseIndex=currentMonitorFuseIndex, inverterGroupErrorValue=inverterGroupErrorValue, batteryGroup2QualityMajorAlarmLevel=batteryGroup2QualityMajorAlarmLevel, batteryBankFuseEntry=batteryBankFuseEntry, windChargersStatus=windChargersStatus, controlUnitStatus=controlUnitStatus, dcdcErrorMajorAlarmLevel=dcdcErrorMajorAlarmLevel, rectifiersStatus=rectifiersStatus, batteryTotalCapacityTrapRepeatCounter=batteryTotalCapacityTrapRepeatCounter, smartNodeErrorAlarmEnable=smartNodeErrorAlarmEnable, mainControlUnitsErrorMinorAlarmLevel=mainControlUnitsErrorMinorAlarmLevel, generatorEnergyLogLastDaysIndex=generatorEnergyLogLastDaysIndex, inverterGroupInverterSwPartNumber=inverterGroupInverterSwPartNumber, currentMonitorCurrentAlarmEnable=currentMonitorCurrentAlarmEnable, windChargersCurrentDescription=windChargersCurrentDescription, solarChargersEnergyLogLastWeeksValue=solarChargersEnergyLogLastWeeksValue, controlUnitSwPartNumber=controlUnitSwPartNumber, batteryGroup2Bank=batteryGroup2Bank, mainsOutageLogDaysIndex=mainsOutageLogDaysIndex, solarChargerStatus=solarChargerStatus, outputControlUnitEntry=outputControlUnitEntry, rectifierType=rectifierType, mainControlUnitEarthFaultStatus=mainControlUnitEarthFaultStatus, flexiMonitorInputIndex=flexiMonitorInputIndex, mainControlUnitTemperatureMajorLowLevel=mainControlUnitTemperatureMajorLowLevel, batteryGroup2AhChargedTrapRepeatCounter=batteryGroup2AhChargedTrapRepeatCounter, inverterGroupCapacityEntry=inverterGroupCapacityEntry, invertersEnergyLogAccumulated=invertersEnergyLogAccumulated, loadLVLDDescription=loadLVLDDescription, generatorRunHoursLogLastWeeksTable=generatorRunHoursLogLastWeeksTable, dcdcGroupIndex=dcdcGroupIndex, solarChargersEnergyLogAccumulated=solarChargersEnergyLogAccumulated, batteryGroup2AhChargedDescription=batteryGroup2AhChargedDescription, loadEnergyLogLastDaysTable=loadEnergyLogLastDaysTable, generatorRunHoursLogLastMonthsTable=generatorRunHoursLogLastMonthsTable, currentMonitorId=currentMonitorId, batteryGroup2RemainingCapacityStatus=batteryGroup2RemainingCapacityStatus, generatorTankMajorHighLevel=generatorTankMajorHighLevel, invertersReactiveEnergyLogLastDaysIndex=invertersReactiveEnergyLogLastDaysIndex, rectifierGroupEnergyLogLastWeeksTable=rectifierGroupEnergyLogLastWeeksTable, loadVoltageTable=loadVoltageTable, powerSystemLongitude=powerSystemLongitude, generatorDailyRunDayIndex=generatorDailyRunDayIndex, inverterGroupEnergyLogLastHoursTable=inverterGroupEnergyLogLastHoursTable, batteryQualityValue=batteryQualityValue, batteryMonitorTemperatureIndex=batteryMonitorTemperatureIndex, inverterGroupInverterIndex=inverterGroupInverterIndex, inverterSwPartNumber=inverterSwPartNumber, batteryAhDischargedValue=batteryAhDischargedValue, windChargersCurrentAlarmEnable=windChargersCurrentAlarmEnable, batteryGroup2LVBDConnectVoltage=batteryGroup2LVBDConnectVoltage, generatorFuelConsumptionLogLastWeeksValue=generatorFuelConsumptionLogLastWeeksValue, controlUnitSerialNumber=controlUnitSerialNumber, batteryGroup2TimeLeftStatus=batteryGroup2TimeLeftStatus, currentMonitorCurrentValue=currentMonitorCurrentValue, batteryTestResultDuration=batteryTestResultDuration, mainsOutageLogWeeksValue=mainsOutageLogWeeksValue, powerSystemCompany=powerSystemCompany, mainsMonitorError=mainsMonitorError, batteryBankSymmetryIndex=batteryBankSymmetryIndex, invertersEnergyLog=invertersEnergyLog, generatorRunHoursLog=generatorRunHoursLog, currentMonitorFuseTable=currentMonitorFuseTable, rectifierHwVersion=rectifierHwVersion, solarChargersEnergyLogLastDaysTable=solarChargersEnergyLogLastDaysTable, batteryCurrentsTrapRepeatCounter=batteryCurrentsTrapRepeatCounter, batteryTemperatureMajorLowLevel=batteryTemperatureMajorLowLevel, windChargers=windChargers, rectifierGroupEnergyLogLastDaysTable=rectifierGroupEnergyLogLastDaysTable, batteryGroup2CurrentsAlarmEnable=batteryGroup2CurrentsAlarmEnable, rectifierGroupCurrentMinorAlarmLevel=rectifierGroupCurrentMinorAlarmLevel, windChargersEnergyLogLastDaysValue=windChargersEnergyLogLastDaysValue, batteryQualityStatus=batteryQualityStatus, batteryGroup2AhDischargedDescription=batteryGroup2AhDischargedDescription, loadEnergyLogLastWeeksIndex=loadEnergyLogLastWeeksIndex, mainsGroupVoltageTrapRepeatCounter=mainsGroupVoltageTrapRepeatCounter, rectifierGroupEnergyLogLastDaysValue=rectifierGroupEnergyLogLastDaysValue, mainControlUnitTemperatureIndex=mainControlUnitTemperatureIndex, controlSystemIoUnitFanSpeedDeviation=controlSystemIoUnitFanSpeedDeviation, mainsGroupMainsFailureTrapRepeatCounter=mainsGroupMainsFailureTrapRepeatCounter, deltaTemperatureDescription=deltaTemperatureDescription, batteryGroup2CycleLogDaysIndex=batteryGroup2CycleLogDaysIndex, generatorEnergyLogAccumulated=generatorEnergyLogAccumulated, mainControlUnitsErrorAlarmEnable=mainControlUnitsErrorAlarmEnable, batteryTemperatureTrapRepeatCounter=batteryTemperatureTrapRepeatCounter, batteryMonitorSymmetryTrapRepeatCounter=batteryMonitorSymmetryTrapRepeatCounter, batteryLVBDStatus=batteryLVBDStatus, mainsVoltageStatus=mainsVoltageStatus, inverterGroupEnergyLogLastWeeksIndex=inverterGroupEnergyLogLastWeeksIndex, inputControlUnitIndex=inputControlUnitIndex, solarChargersEnergyLogLastDaysNumberOfEntries=solarChargersEnergyLogLastDaysNumberOfEntries, rectifierGroupCapacityAlarmEnable=rectifierGroupCapacityAlarmEnable, batteryEqualize=batteryEqualize, batteryAhDischarged=batteryAhDischarged, mainsGroupVoltageMajorHighLevel=mainsGroupVoltageMajorHighLevel, batteryBankSymmetryDescription=batteryBankSymmetryDescription, generatorRunHoursLogLastDaysIndex=generatorRunHoursLogLastDaysIndex, batteryTemperaturesMinorHighLevel=batteryTemperaturesMinorHighLevel, flexiMonitorId=flexiMonitorId, generatorFuelConsumptionLogLastMonthsTable=generatorFuelConsumptionLogLastMonthsTable, batteryTestResultIndex=batteryTestResultIndex, batteryGroup2CurrentAlarmEnable=batteryGroup2CurrentAlarmEnable, batteryGroup2CycleLogMonthsNumberOfEntries=batteryGroup2CycleLogMonthsNumberOfEntries, inverterGroupReactiveEnergyLogEntry=inverterGroupReactiveEnergyLogEntry, generatorVoltageControlStopAfter=generatorVoltageControlStopAfter, alarmSubsysStatusOid=alarmSubsysStatusOid, controlSystemClock=controlSystemClock, batteryBankNumberOfSymmetries=batteryBankNumberOfSymmetries, batteryMonitorsNumberOfUnits=batteryMonitorsNumberOfUnits, inputs=inputs, batteryGroup2TestResultDischarged=batteryGroup2TestResultDischarged, batteryGroup2RemainingCapacity=batteryGroup2RemainingCapacity, loadMonitorErrorAlarmEnable=loadMonitorErrorAlarmEnable, flexiMonitorErrorAlarmEnable=flexiMonitorErrorAlarmEnable, batteryGroup2TemperaturesStatus=batteryGroup2TemperaturesStatus, outputIoUnitOutputTable=outputIoUnitOutputTable, rectifiersTemperatureMajorLowLevel=rectifiersTemperatureMajorLowLevel, mainsMonitorVoltageTable=mainsMonitorVoltageTable, invertersStatus=invertersStatus, batteryGroup2TestVoltage=batteryGroup2TestVoltage, dcdcCapacityDescription=dcdcCapacityDescription, controlSystemIoUnitTemperatureValue=controlSystemIoUnitTemperatureValue, mainsNumberOfPhases=mainsNumberOfPhases, mainControlUnitTemperatureAlarmEnable=mainControlUnitTemperatureAlarmEnable, batteryCycleLogMonthsTable=batteryCycleLogMonthsTable, rectifierGroupEnergyLogLastHoursEntry=rectifierGroupEnergyLogLastHoursEntry, batteryTestResultDischarged=batteryTestResultDischarged, batteryBankCurrentEntry=batteryBankCurrentEntry, dcdcSwPartNumber=dcdcSwPartNumber, inverterGroupErrorStatus=inverterGroupErrorStatus, alarmTrapCounterVarValue=alarmTrapCounterVarValue, invertersCapacityAlarmEnable=invertersCapacityAlarmEnable, inverterGroupNumberOfInverters=inverterGroupNumberOfInverters, currentMonitorType=currentMonitorType, mainsVoltageMajorHighLevel=mainsVoltageMajorHighLevel, batteryAhDischargedAlarmEnable=batteryAhDischargedAlarmEnable, inputControlUnitsTable=inputControlUnitsTable, batteryTemperaturesStatus=batteryTemperaturesStatus, batteryTemperaturesMajorLowLevel=batteryTemperaturesMajorLowLevel, rectifierGroupErrorStatus=rectifierGroupErrorStatus, windChargersEnergyLogLastDaysEntry=windChargersEnergyLogLastDaysEntry, rectifiersTemperatureMinorHighLevel=rectifiersTemperatureMinorHighLevel, flexiMonitorOutputIndex=flexiMonitorOutputIndex, mainsGroupVoltageMinorLowLevel=mainsGroupVoltageMinorLowLevel, invertersEnergyLogLastHoursValue=invertersEnergyLogLastHoursValue, batteryMonitorFuseDescription=batteryMonitorFuseDescription, generatorDailyRunStopHour=generatorDailyRunStopHour, mainsOutageLogWeeksEntry=mainsOutageLogWeeksEntry, inverterGroupEnergyLogLastDaysIndex=inverterGroupEnergyLogLastDaysIndex, batteryMonitorTemperatureEntry=batteryMonitorTemperatureEntry, windChargersCurrentMinorAlarmLevel=windChargersCurrentMinorAlarmLevel, generatorEnergyLogLastDaysTable=generatorEnergyLogLastDaysTable, inverters=inverters, batteryEnergyLogLastWeeksIndex=batteryEnergyLogLastWeeksIndex, rectifiersErrorMajorAlarmLevel=rectifiersErrorMajorAlarmLevel, mainsMainsFailure=mainsMainsFailure, rectifierGroupErrorTable=rectifierGroupErrorTable, controlUnitIndex=controlUnitIndex, dcdcErrorMinorAlarmLevel=dcdcErrorMinorAlarmLevel, windChargersEnergyLogLastHoursValue=windChargersEnergyLogLastHoursValue, batteryAhDischargedDescription=batteryAhDischargedDescription, controlSystemIoUnitTemperatureEntry=controlSystemIoUnitTemperatureEntry, controlSystemIoUnitFanIndex=controlSystemIoUnitFanIndex, batteryBankNumberOfFuses=batteryBankNumberOfFuses, invertersReactiveEnergyLogAccumulated=invertersReactiveEnergyLogAccumulated, generatorDischargeValue=generatorDischargeValue, invertersReactiveEnergyLogLastHoursIndex=invertersReactiveEnergyLogLastHoursIndex, batteryMonitorsTable=batteryMonitorsTable, mainsGroupOutageLogMonthsTable=mainsGroupOutageLogMonthsTable, mainsMonitorFrequencyTable=mainsMonitorFrequencyTable, dcdcStatus=dcdcStatus, batteryMonitorError=batteryMonitorError, invertersEnergyLogLastDaysValue=invertersEnergyLogLastDaysValue, flexiMonitorsNumberOfUnits=flexiMonitorsNumberOfUnits, mainsMonitorCurrentTable=mainsMonitorCurrentTable, mainsOutageTotal=mainsOutageTotal, loadEnergyLogAccumulated=loadEnergyLogAccumulated, inputControlUnitInputEntry=inputControlUnitInputEntry, batteryUsedCapacityAlarmEnable=batteryUsedCapacityAlarmEnable, rectifiersTemperatureMajorHighLevel=rectifiersTemperatureMajorHighLevel, batteryTotalCapacityStatus=batteryTotalCapacityStatus, generatorCurrentLimitControlledStopEnable=generatorCurrentLimitControlledStopEnable, loadEnergyLogLastHoursIndex=loadEnergyLogLastHoursIndex, mainsMonitorNumberOfCurrents=mainsMonitorNumberOfCurrents, mainsMonitorErrorAlarmEnable=mainsMonitorErrorAlarmEnable, mainsMonitorFrequencyDescription=mainsMonitorFrequencyDescription, ambientTemperatureMajorHighLevel=ambientTemperatureMajorHighLevel, rectifierGroupTemperatureAlarmEnable=rectifierGroupTemperatureAlarmEnable, inverterGroupErrorEntry=inverterGroupErrorEntry, mainsMonitorVoltageMajorHighLevel=mainsMonitorVoltageMajorHighLevel, batteryAhChargedDescription=batteryAhChargedDescription, batteryMonitorSymmetryDeltaValue=batteryMonitorSymmetryDeltaValue, batteryUsedCapacityMajorAlarmLevel=batteryUsedCapacityMajorAlarmLevel, mainsMonitorFrequencyMinorLowLevel=mainsMonitorFrequencyMinorLowLevel, solarChargersErrorDescription=solarChargersErrorDescription, rectifierGroupCurrentTrapRepeatCounter=rectifierGroupCurrentTrapRepeatCounter, batteryCycleLogTotalCycles=batteryCycleLogTotalCycles, mainsGroupIndex=mainsGroupIndex, batteryCurrentsMinorLowLevel=batteryCurrentsMinorLowLevel, currentMonitorNumberOfCurrents=currentMonitorNumberOfCurrents, mainsMonitorVoltageEntry=mainsMonitorVoltageEntry, mainsMonitorEnergyLogLastWeeksValue=mainsMonitorEnergyLogLastWeeksValue, solarChargersErrorMinorAlarmLevel=solarChargersErrorMinorAlarmLevel, inverterGroupCurrentTable=inverterGroupCurrentTable, batteryBankTable=batteryBankTable, currentMonitorNumberOfFuses=currentMonitorNumberOfFuses, currentMonitorCurrentMajorAlarmLevel=currentMonitorCurrentMajorAlarmLevel, inputControlUnitInputConfiguration=inputControlUnitInputConfiguration, generatorFuelConsumptionLogLastDaysEntry=generatorFuelConsumptionLogLastDaysEntry, batteryTemperaturesAlarmEnable=batteryTemperaturesAlarmEnable, dcdcEntry=dcdcEntry, batteryGroup2CurrentsTrapRepeatCounter=batteryGroup2CurrentsTrapRepeatCounter, mainsGroupMainsFailureMinorAlarmLevel=mainsGroupMainsFailureMinorAlarmLevel)
mibBuilder.exportSymbols("SP2-MIB", batteryGroup2EnergyLogLastHoursIndex=batteryGroup2EnergyLogLastHoursIndex, mainsMonitorVoltageStatus=mainsMonitorVoltageStatus, invertersErrorTrapRepeatCounter=invertersErrorTrapRepeatCounter, generatorTankMinorLowLevel=generatorTankMinorLowLevel, batteryGroup2TemperaturesMajorHighLevel=batteryGroup2TemperaturesMajorHighLevel)
