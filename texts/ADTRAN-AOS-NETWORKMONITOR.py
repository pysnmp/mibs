#
# PySNMP MIB module ADTRAN-AOS-NETWORKMONITOR (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adtran/ADTRAN-AOS-NETWORKMONITOR
# Produced by pysmi-1.1.12 at Wed Jul  3 09:52:35 2024
# On host fv-az530-296 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
adGenAOSRouter, adGenAOSConformance = mibBuilder.importSymbols("ADTRAN-AOS", "adGenAOSRouter", "adGenAOSConformance")
adIdentity, = mibBuilder.importSymbols("ADTRAN-MIB", "adIdentity")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
ObjectIdentity, Counter64, Unsigned32, iso, Gauge32, IpAddress, NotificationType, Counter32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, MibIdentifier, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "Unsigned32", "iso", "Gauge32", "IpAddress", "NotificationType", "Counter32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "MibIdentifier", "TimeTicks")
RowStatus, TextualConvention, DisplayString, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue")
adGenAOSNetMonMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 664, 6, 10000, 53, 2, 2))
adGenAOSNetMonMib.setRevisions(('2010-10-27 00:00', '2009-01-20 00:00', '2008-09-30 00:00', '2008-08-12 00:00', '2008-06-25 00:00', '2007-08-23 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: adGenAOSNetMonMib.setRevisionsDescriptions(('Added adGenAOSnmTrackTraps and a limited RO adGenAOSnmTrackTable\n                to allow OID support for the adGenAOSnmTrackStateChgFail\n                and adGenAOSnmTrackStateChgPass trap additions.\n                Changes by Joe Sieja.', 'Added adGenAOSnmICMPTSPktSentCount to the\n                adGenAOSnmICMPTSHistoryTable and adGenAOSnmTwPktSentCount to\n                the adGenAOSnmTwampHistoryTable.\n                Changes by Reba Holland.', 'Added adGenAOSnmICMPTSResponderStatsTable and\n                 adGenAOSnmTWAMPResponderStatsTable. These tables will be used\n                 to retrieve the statistics available for enabled responders.\n                 Changes by Reba Holland.', 'Changed adGenAOSNetMon to use adGenAOSnmIndex in all\n                tables that were using adGenAOSnmName.  Added ICMP Timestamp\n                and TWAMP responders. Removed adGenAOSnmICMPTSHistoryIndex and\n                adGenAOSnmTwHistoryIndex from the adGenAOSnmICMPTSHistoryTable\n                and adGenAOSnmTwampHistoryTable. Using adGenAOSnmICMPTsSeqNum\n                and adGenAOSnmTwSeqNum as indices in these tables instead.\n                Added adGenAOSnmProbeTableNextIndex. Changed adGenAOSnmIndex\n                to have a maximum value of 1000.\n                Changes by Reba Holland.', 'Changed adGenAOSNetMon to be under the adGenAOSRouter tree\n                instead of the adGenAOSCommon tree.\n                Changes by Reba Holland.', 'First Draft of ADTRAN-AOS-NETWORKMONITOR MIB module.',))
if mibBuilder.loadTexts: adGenAOSNetMonMib.setLastUpdated('201010270000Z')
if mibBuilder.loadTexts: adGenAOSNetMonMib.setOrganization('ADTRAN, Inc.')
if mibBuilder.loadTexts: adGenAOSNetMonMib.setContactInfo('Technical Support Dept.\n                Postal: ADTRAN, Inc.\n                901 Explorer Blvd.\n                Huntsville, AL 35806\n\n                Tel: +1 800 726-8663\n                Fax: +1 256 963 6217\n                E-mail: support@adtran.com')
if mibBuilder.loadTexts: adGenAOSNetMonMib.setDescription('This MIB contains network monitoring information.')
adGenAOSNetMon = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2))
adGenAOSnmTrackTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 0))
adGenAOSnmProbeTableNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmProbeTableNextIndex.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeTableNextIndex.setDescription('This object contains an unused value for adGenAOSnmIndex in\n         the adGenAOSnmProbeTable, or a zero to indicate that none exist.')
adGenAOSnmProbeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2), )
if mibBuilder.loadTexts: adGenAOSnmProbeTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeTable.setDescription('Create a network monitor probe.')
adGenAOSnmProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmProbeEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeEntry.setDescription('The parameters for a particular network monitor probe.')
adGenAOSnmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmIndex.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmIndex.setDescription('Uniquely identifies a row in the adGenAOSnmProbeTable.\n                This is the index chosen by the management station for\n                row creation. If the adGenAOSnmIndex is already in use when\n                attempting to create a new row with a set operation, then an\n                error will be returned.')
adGenAOSnmName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSnmName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmName.setDescription('Unique string to identify probe.')
adGenAOSnmType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("icmpEcho", 1), ("tcpConnect", 2), ("httpRequest", 3), ("icmpTimeStamp", 4), ("twamp", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSnmType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmType.setDescription('Specifies the type of probe.')
adGenAOSnmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: adGenAOSnmRowStatus.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmRowStatus.setDescription("SNMP Version 2 Row Status Variable. The status of the conceptual\n            row. In order for this object to become active, the following\n            row objects MUST be defined: adGenAOSnmName and adGenAOSnmType.\n            The control row objects adGenAOSnmName and adGenAOSnmType cannot be\n            modified once this conceptual row has been created. The value\n            'notInService' and 'createAndWait' will not be supported. This\n            object can be set to 'destroy' from any value at any time.")
adGenAOSnmConfigProbeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3), )
if mibBuilder.loadTexts: adGenAOSnmConfigProbeTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmConfigProbeTable.setDescription('Configure a network monitor probe.')
adGenAOSnmConfigProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmConfigProbeEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmConfigProbeEntry.setDescription('The parameters used to configure a particular network monitor\n            probe.')
adGenAOSnmCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmCfgName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgName.setDescription('The name of the corresponding probe entry. The probe identified by\n            a particular value of this index is the same probe as identified\n            by the same value as a adGenAOSnmName object instance.')
adGenAOSnmAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmAdminStatus.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmAdminStatus.setDescription('Specifies ability to enable or disable the probe.')
adGenAOSnmPollPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmPollPeriod.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmPollPeriod.setDescription('Specifies the poll period, in seconds, of the probe.')
adGenAOSnmTimeoutPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTimeoutPeriod.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTimeoutPeriod.setDescription('Time to wait for a response after which a packet is considered\n            lost.')
adGenAOSnmToleranceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("rate", 2), ("consecutive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmToleranceMode.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmToleranceMode.setDescription('Specifies the tolerance mode of the probe.')
adGenAOSnmFailTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmFailTolerance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmFailTolerance.setDescription('Specifies how many probe operations must fail before the probe\n            state transitions to the fail state.')
adGenAOSnmPassTolerance = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmPassTolerance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmPassTolerance.setDescription('Specifies how many probe operations must fail before the probe\n            state transitions to the fail state.')
adGenAOSnmToleranceTestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmToleranceTestSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmToleranceTestSize.setDescription("Specifies test size for rate calculations when the tolerance mode\n             is set to 'rate'.")
adGenAOSnmClearCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmClearCounters.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmClearCounters.setDescription('Clear the counters and statistics history of a probe.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adGenAOSnmProbeStatusTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4), )
if mibBuilder.loadTexts: adGenAOSnmProbeStatusTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeStatusTable.setDescription('View the status of a network monitor probe.')
adGenAOSnmProbeStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmProbeStatusEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeStatusEntry.setDescription('The parameters used to view the status of a particular network\n            monitor probe.')
adGenAOSnmStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmStatusName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmStatusName.setDescription('The name of the corresponding probe entry. The probe identified by\n            a particular value of this index is the same probe as identified\n            by the same value as a adGenAOSnmName object instance.')
adGenAOSnmTestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fail", 1), ("pass", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTestStatus.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTestStatus.setDescription('Current test state of the probe.')
adGenAOSnmTestsRun = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTestsRun.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTestsRun.setDescription('Number of test run on the probe.')
adGenAOSnmTestsFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTestsFailed.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTestsFailed.setDescription('Number of test that failed.')
adGenAOSnmStatsToleranceTestSize = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmStatsToleranceTestSize.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmStatsToleranceTestSize.setDescription('Specifies the test size.')
adGenAOSnmStatsToleranceTestValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmStatsToleranceTestValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmStatsToleranceTestValue.setDescription("Specifies number of tests that passed or failed.\n            Check 'adGenAOSnmTestStatus' for test state.")
adGenAOSnmTimeSinceLastStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 4, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTimeSinceLastStatusChange.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTimeSinceLastStatusChange.setDescription('Time since last status change.')
adGenAOSnmCfgTwampProbeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5), )
if mibBuilder.loadTexts: adGenAOSnmCfgTwampProbeTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgTwampProbeTable.setDescription('Configure a network monitor TWAMP probe.')
adGenAOSnmCfgTwampProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmCfgTwampProbeEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgTwampProbeEntry.setDescription('The parameters used to configure a particular network monitor\n            TWAMP probe.')
adGenAOSnmCfgTwName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmCfgTwName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgTwName.setDescription('The name of the corresponding TWAMP probe entry. The probe\n            identified by a particular instance of this object is the same\n            probe as identified by the same value as a adGenAOSnmName\n            object instance.')
adGenAOSnmTwDestHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDestHostname.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDestHostname.setDescription('Specifies the destination hostname or IP address as a string in\n            dotted decimal format.')
adGenAOSnmTwDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDestPort.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDestPort.setDescription('Specifies the destination port. If zero then the actual destination\n            port will be dynamically negotiated with the responder.')
adGenAOSnmTwSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwSrcIP.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwSrcIP.setDescription('Specifies the source IPv4 address.')
adGenAOSnmTwSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwSrcPort.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwSrcPort.setDescription('Specifies the source port. If zero then the actual source port will\n            be dynamically assigned ever probe operation.')
adGenAOSnmTwDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDscp.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDscp.setDescription('Specifies the DiffServ Code Point value that will be used on\n            packets sent and will be negotiated with the responder.')
adGenAOSnmTwPaddingLen = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1462))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPaddingLen.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPaddingLen.setDescription('Size of TWAMP padding length.')
adGenAOSnmTwPaddingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPaddingFormat.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPaddingFormat.setDescription('Specifies the format of the padding pattern.')
adGenAOSnmTwPaddingPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPaddingPattern.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPaddingPattern.setDescription("Specifies data pattern to pad the packet. This can be an ascii\n            or hexadecimal pattern and must match the type set in\n            adGenAOSnmTwPktFormat. In addition, adGenAOSnmTwDataPadType must be\n            set to 'custom'. ")
adGenAOSnmTwDataPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("random", 2), ("custom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDataPadType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDataPadType.setDescription('Specifies how the TWAMP padding payload is filled.')
adGenAOSnmTwPktSendCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPktSendCnt.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPktSendCnt.setDescription('Specifies the number of packets to send and receive for one probe\n            operation.  More than one is required for inter-packet delay\n            variation measurements.')
adGenAOSnmTwSendScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("periodic", 1), ("poisson", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwSendScheduleType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwSendScheduleType.setDescription('Specifies in milliseconds the time between test packets during a\n            single probe operation.')
adGenAOSnmTwSendScheduleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwSendScheduleValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwSendScheduleValue.setDescription('Specifies in milliseconds the time between start of each packet\n            send operation.')
adGenAOSnmTwIpdvAbsInMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMinFail.setDescription('Specifies the minimum inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmTwIpdvAbsInAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInAvgFail.setDescription('Specifies the average inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmTwIpdvAbsInMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMaxFail.setDescription('Specifies the maximum inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmTwIpdvAbsInMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMinPass.setDescription('Specifies the threshold in milliseconds for minimum inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsInAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInAvgPass.setDescription('Specifies the threshold in milliseconds for average inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsInMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsInMaxPass.setDescription('Specifies the threshold in milliseconds for maximum inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsOutMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMinFail.setDescription('Specifies the minimum outbound absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsOutAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutAvgFail.setDescription('Specifies the average outbound absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsOutMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMaxFail.setDescription('Specifies the maximum outbound absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsOutMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMinPass.setDescription('Specifies the threshold in milliseconds for minimum outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsOutAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutAvgPass.setDescription('Specifies the threshold in milliseconds for average outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsOutMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsOutMaxPass.setDescription('Specifies the threshold in milliseconds for maximum outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsRtMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMinFail.setDescription('Specifies the minimum round-trip absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsRtAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtAvgFail.setDescription('Specifies the average round-trip absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsRtMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMaxFail.setDescription('Specifies the maximum round-trip absolute-value inter-packet\n            delay variation threshold in milliseconds that will cause the\n            probe operation to fail.')
adGenAOSnmTwIpdvAbsRtMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMinPass.setDescription('Specifies the threshold in milliseconds for minimum round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsRtAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 30), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtAvgPass.setDescription('Specifies the threshold in milliseconds for average round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwIpdvAbsRtMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpdvAbsRtMaxPass.setDescription('Specifies the threshold in milliseconds for maximum round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmTwDelayInMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMinFail.setDescription('Specifies the minimum inbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayInAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInAvgFail.setDescription('Specifies the average inbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayInMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMaxFail.setDescription('Specifies the maximum inbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayInMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMinPass.setDescription('Specifies the threshold in milliseconds for minimum inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayInAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInAvgPass.setDescription('Specifies the threshold in milliseconds for average inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayInMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMaxPass.setDescription('Specifies the threshold in milliseconds for maximum inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayOutMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMinFail.setDescription('Specifies the minimum outbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayOutAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutAvgFail.setDescription('Specifies the average outbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayOutMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMaxFail.setDescription('Specifies the maximum outbound delay threshold in milliseconds that\n            will cause the probe operation to fail.')
adGenAOSnmTwDelayOutMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMinPass.setDescription('Specifies the threshold in milliseconds for minimum outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayOutAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutAvgPass.setDescription('Specifies the threshold in milliseconds for average outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayOutMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMaxPass.setDescription('Specifies the threshold in milliseconds for maximum outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmTwDelayRtMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMinFail.setDescription('Specifies the minimum round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmTwDelayRtAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtAvgFail.setDescription('Specifies the average round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmTwDelayRtMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMaxFail.setDescription('Specifies the maximum round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmTwDelayRtMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMinPass.setDescription('Specifies the threshold in milliseconds for minimum round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmTwDelayRtAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtAvgPass.setDescription('Specifies the threshold in milliseconds for average round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmTwDelayRtMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 49), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMaxPass.setDescription('Specifies the threshold in milliseconds for maximum round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmTwPktRtLossFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPktRtLossFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPktRtLossFail.setDescription('Specifies the round-trip packet-loss threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmTwPktRtLossPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwPktRtLossPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPktRtLossPass.setDescription('Specifies the round-trip packet-loss threshold in milliseconds\n            that will allow the probe operation to change to the pass state.')
adGenAOSnmTwHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 5, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTwHistoryDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwHistoryDepth.setDescription('Specifies the number of probe operation statistic results to keep.')
adGenAOSnmTwampHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6), )
if mibBuilder.loadTexts: adGenAOSnmTwampHistoryTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampHistoryTable.setDescription('Operation history for a network monitor TWAMP probe.')
adGenAOSnmTwampHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"), (0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSeqNum"))
if mibBuilder.loadTexts: adGenAOSnmTwampHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampHistoryEntry.setDescription('The read-only history of a particular network monitor TWAMP probe.')
adGenAOSnmTwSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwSeqNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwSeqNum.setDescription("Along with adGenAOSnmTwHistoryName, uniquely identifies a\n                row in the adGenAOSTwampHistoryTable.  A sequence number of\n                '1' signifies the current history entry.")
adGenAOSnmTwHistoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwHistoryName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwHistoryName.setDescription('The name of the corresponding TWAMP probe entry. The probe\n            identified by a particular value of this object is the same probe as\n            identified by the same value as a adGenAOSnmName object instance.')
adGenAOSnmTwStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwStartTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwStartTime.setDescription('Date and time the probe operation started.')
adGenAOSnmTwEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwEndTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwEndTime.setDescription('Date and time the probe operation ended.')
adGenAOSnmTwLocalSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwLocalSyncState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwLocalSyncState.setDescription('If return value is true, local clock is in sync.')
adGenAOSnmTwLocalClkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwLocalClkErr.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwLocalClkErr.setDescription('Local clock error estimate in nanoseconds.')
adGenAOSnmTwRemoteSyncState = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwRemoteSyncState.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwRemoteSyncState.setDescription('If return value is true, remote clock is in sync.')
adGenAOSnmTwRemoteClkErr = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwRemoteClkErr.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwRemoteClkErr.setDescription('Remote clock error estimate in nanoseconds.')
adGenAOSnmTwDelayInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMin.setDescription('The inbound minimum delay in milliseconds.')
adGenAOSnmTwDelayInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInMax.setDescription('The inbound maximum delay in milliseconds.')
adGenAOSnmTwDelayOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMin.setDescription('The outbound minimum delay in milliseconds.')
adGenAOSnmTwDelayOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutMax.setDescription('The outbound maximum delay in milliseconds.')
adGenAOSnmTwDelayRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMin.setDescription('The round-trip minimum delay in milliseconds.')
adGenAOSnmTwDelayRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtMax.setDescription('The round-trip maximum delay in milliseconds.')
adGenAOSnmTwLossRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwLossRoundTrip.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwLossRoundTrip.setDescription('The round-trip packet loss.')
adGenAOSnmTwDelayOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutSum.setDescription('The sum of outbound delay in milliseconds.')
adGenAOSnmTwDelayOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutSum2.setDescription('The sum of the squares of outbound delay in milliseconds.')
adGenAOSnmTwDelayOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayOutNum.setDescription('The number of individual outbound delay samples.')
adGenAOSnmTwDelayInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInSum.setDescription('The sum of inbound delay in milliseconds.')
adGenAOSnmTwDelayInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInSum2.setDescription('The sum of the squares of inbound delay in milliseconds.')
adGenAOSnmTwDelayInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayInNum.setDescription('The number of individual inbound delay samples.')
adGenAOSnmTwDelayRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtSum.setDescription('The sum of round-trip delay in milliseconds.')
adGenAOSnmTwDelayRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtSum2.setDescription('The sum of the squares of round-trip delay in milliseconds.')
adGenAOSnmTwDelayRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwDelayRtNum.setDescription('The number of individual round-trip delay samples.')
adGenAOSnmTwIpvPosInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInMin.setDescription('The minimum value in the set of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInMax.setDescription('The maximum value in the set of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInSum.setDescription('The sum of positive inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvPosInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInSum2.setDescription('The sum of the squares of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosInNum.setDescription('The number of positive inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvPosOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutMin.setDescription('The minimum value in the set of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutMax.setDescription('The maximum value in the set of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutSum.setDescription('The sum of positive outbound inter-packet delay variation\n                 measurements.')
adGenAOSnmTwIpvPosOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutSum2.setDescription('The sum of the squares of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosOutNum.setDescription('The number of positive outbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvPosRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtMin.setDescription('The minimum value in the set of positive round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvPosRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtMax.setDescription('The maximum value in the set of positive round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvPosRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtSum.setDescription('The sum of positive round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvPosRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtSum2.setDescription('The sum of the squares of of positive round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvPosRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvPosRtNum.setDescription('The number of positive round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInMin.setDescription('The minimum value in the set of negative inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInMax.setDescription('The maximum value in the set of negative inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInSum.setDescription('The sum of negative inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInSum2.setDescription('The sum of the squares of negative inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegInNum.setDescription('The number of negative inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutMin.setDescription('The minimum value in the set of negative outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutMax.setDescription('The maximum value in the set of negative outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutSum.setDescription('The sum of negative outbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutSum2.setDescription('The sum of the squares of negative outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegOutNum.setDescription('The number of negative outbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtMin.setDescription('The minimum value in the set of negative round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvNegRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtMax.setDescription('The maximum value in the set of negative round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvNegRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtSum.setDescription('The sum of negative round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvNegRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtSum2.setDescription('The sum of the squares of negative round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvNegRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvNegRtNum.setDescription('The number of negative round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvAbsInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInMin.setDescription('The minimum value in the set of absolute inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInMax.setDescription('The maximum value in the set of absolute inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInSum.setDescription('The sum of absolute inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvAbsInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInSum2.setDescription('The sum of the squares of absolute inbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsInNum.setDescription('The number of absolute inbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvAbsOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutMin.setDescription('The minimum value in the set of absolute outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutMax.setDescription('The maximum value in the set of absolute outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutSum.setDescription('The sum of absolute outbound inter-packet delay variation\n                 measurements.')
adGenAOSnmTwIpvAbsOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutSum2.setDescription('The sum of the squares of absolute outbound inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsOutNum.setDescription('The number of absolute outbound inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvAbsRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtMin.setDescription('The minimum value in the set of absolute round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvAbsRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtMax.setDescription('The maximum value in the set of absolute round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmTwIpvAbsRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtSum.setDescription('The sum of absolute round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwIpvAbsRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtSum2.setDescription('The sum of the squares of absolute round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmTwIpvAbsRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwIpvAbsRtNum.setDescription('The number of absolute round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmTwPktSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 6, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwPktSentCount.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwPktSentCount.setDescription('The number of packets sent.')
adGenAOSnmCfgICMPTSProbeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7), )
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSProbeTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSProbeTable.setDescription('Configure a network monitor ICMP timestamp probe.')
adGenAOSnmCfgICMPTSProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSProbeEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSProbeEntry.setDescription('The parameters used to configure a particular network monitor ICMP\n            timestamp probe.')
adGenAOSnmCfgICMPTSName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSName.setDescription('The name of the corresponding ICMP timestamp probe entry.\n            The probe identified by a particular value of this object is the\n            same probe as identified by the same value as a\n            adGenAOSnmName object instance.')
adGenAOSnmICMPTSDestHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDestHostname.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDestHostname.setDescription('Specifies the destination hostname or IP address as a string in\n            dotted decimal format.')
adGenAOSnmICMPTSSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSSrcIP.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSSrcIP.setDescription('Specifies the source IPv4 address.')
adGenAOSnmICMPTSDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDscp.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDscp.setDescription('Specifies the DiffServ Code Point value that will be used on\n            packets sent and will be negotiated with the responder.')
adGenAOSnmICMPTSPaddingLen = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1462))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingLen.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingLen.setDescription('Size of ICMP padding length.')
adGenAOSnmICMPTSPaddingFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ascii", 1), ("hex", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingFormat.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingFormat.setDescription('Specifies the format of the padding pattern.')
adGenAOSnmICMPTSPaddingPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingPattern.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPaddingPattern.setDescription("Specifies data pattern to pad the packet. This can be an ascii or\n            hexadecimal pattern and must match the type set in\n            adGenAOSnmICMPTSPktFormat. In addition, adGenAOSnmICMPTSDataPadType\n            must be set to 'custom'. ")
adGenAOSnmICMPTSDataPadType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("zeroes", 1), ("random", 2), ("custom", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDataPadType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDataPadType.setDescription('Specifies how the ICMP padding paylod is filled.')
adGenAOSnmICMPTSPktSendCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktSendCnt.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktSendCnt.setDescription('Specifies the number of packets to send and receive for one probe\n            operation.  More than one is required for inter-packet delay\n            variation measurements.')
adGenAOSnmICMPTSSendScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("periodic", 1), ("poisson", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSSendScheduleType.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSSendScheduleType.setDescription('Specifies in milliseconds the time between test packets during a\n            single probe operation.')
adGenAOSnmICMPTSSendScheduleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 5000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSSendScheduleValue.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSSendScheduleValue.setDescription('Specifies in milliseconds the time between start of each packet\n            send operation.')
adGenAOSnmICMPTSIpdvAbsInMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMinFail.setDescription('Specifies the minimum inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsInAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 13), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInAvgFail.setDescription('Specifies the average inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n             operation to fail.')
adGenAOSnmICMPTSIpdvAbsInMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMaxFail.setDescription('Specifies the maximum inbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsInMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMinPass.setDescription('Specifies the threshold in milliseconds for minimum inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsInAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInAvgPass.setDescription('Specifies the threshold in milliseconds for average inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsInMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsInMaxPass.setDescription('Specifies the threshold in milliseconds for maximum inbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsOutMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMinFail.setDescription('Specifies the minimum outbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsOutAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutAvgFail.setDescription('Specifies the average outbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsOutMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMaxFail.setDescription('Specifies the maximum outbound absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsOutMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 21), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMinPass.setDescription('Specifies the threshold in milliseconds for minimum outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsOutAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 22), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutAvgPass.setDescription('Specifies the threshold in milliseconds for average outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsOutMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsOutMaxPass.setDescription('Specifies the threshold in milliseconds for maximum outbound\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsRtMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 24), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMinFail.setDescription('Specifies the minimum round-trip absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsRtAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtAvgFail.setDescription('Specifies the average round-trip absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsRtMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMaxFail.setDescription('Specifies the maximum round-trip absolute-value inter-packet delay\n            variation threshold in milliseconds that will cause the probe\n            operation to fail.')
adGenAOSnmICMPTSIpdvAbsRtMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMinPass.setDescription('Specifies the threshold in milliseconds for minimum round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsRtAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtAvgPass.setDescription('Specifies the threshold in milliseconds for average round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSIpdvAbsRtMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpdvAbsRtMaxPass.setDescription('Specifies the threshold in milliseconds for maximum round-trip\n            absolute-value inter-packet delay variation that will allow the\n            probe operation to pass.')
adGenAOSnmICMPTSDelayInMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMinFail.setDescription('Specifies the minimum inbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayInAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInAvgFail.setDescription('Specifies the average inbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayInMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMaxFail.setDescription('Specifies the maximum inbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayInMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 33), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMinPass.setDescription('Specifies the threshold in milliseconds for minimum inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayInAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 34), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInAvgPass.setDescription('Specifies the threshold in milliseconds for average inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayInMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMaxPass.setDescription('Specifies the threshold in milliseconds for maximum inbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayOutMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMinFail.setDescription('Specifies the minimum outbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayOutAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 37), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutAvgFail.setDescription('Specifies the average outbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayOutMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 38), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMaxFail.setDescription('Specifies the maximum outbound delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayOutMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 39), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMinPass.setDescription('Specifies the threshold in milliseconds for minimum outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayOutAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutAvgPass.setDescription('Specifies the threshold in milliseconds for average outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayOutMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMaxPass.setDescription('Specifies the threshold in milliseconds for maximum outbound delay\n            that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayRtMinFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 42), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMinFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMinFail.setDescription('Specifies the minimum round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayRtAvgFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 43), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtAvgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtAvgFail.setDescription('Specifies the average round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayRtMaxFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 44), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMaxFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMaxFail.setDescription('Specifies the maximum round-trip delay threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSDelayRtMinPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 45), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMinPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMinPass.setDescription('Specifies the threshold in milliseconds for minimum round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayRtAvgPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtAvgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtAvgPass.setDescription('Specifies the threshold in milliseconds for average round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmICMPTSDelayRtMaxPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 47), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMaxPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMaxPass.setDescription('Specifies the threshold in milliseconds for maximum round-trip\n            delay that will allow the probe operation to pass.')
adGenAOSnmICMPTSPktRtLossFail = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktRtLossFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktRtLossFail.setDescription('Specifies the round-trip packet-loss threshold in milliseconds\n            that will cause the probe operation to fail.')
adGenAOSnmICMPTSPktRtLossPass = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktRtLossPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktRtLossPass.setDescription('Specifies the round-trip packet-loss threshold in milliseconds\n            that will allow the probe operation to change to the pass state.')
adGenAOSnmICMPTSHistoryDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 7, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryDepth.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryDepth.setDescription('Specifies the number of probe operation statistic results to keep.')
adGenAOSnmICMPTSHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8), )
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryTable.setDescription('Operation history for a network monitor ICMP timestamp probe.')
adGenAOSnmICMPTSHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"), (0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSSeqNum"))
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryEntry.setDescription('The read-only history of a particular network monitor ICMP\n            timestamp probe.')
adGenAOSnmICMPTSSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSSeqNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSSeqNum.setDescription("Along with adGenAOSnmICMPTSHistoryName, uniquely identifies a\n                row in the adGenAOSnmICMPTSHistoryTable. A sequence number of\n                '1' signifies the current history entry.")
adGenAOSnmICMPTSHistoryName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryName.setDescription('The name of the corresponding ICMP timestamp probe entry.\n            The probe identified by a particular value of this object is the\n            same probe as identified by the same value as a\n            adGenAOSnmName object instance.')
adGenAOSnmICMPTSStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSStartTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSStartTime.setDescription('The date and time the probe operation started.')
adGenAOSnmICMPTSEndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSEndTime.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSEndTime.setDescription('The date and time the probe operation ended.')
adGenAOSnmICMPTSDelayInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMin.setDescription('The inbound minimum delay in milliseconds.')
adGenAOSnmICMPTSDelayInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInMax.setDescription('The inbound maximum delay in milliseconds.')
adGenAOSnmICMPTSDelayOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMin.setDescription('The outbound minimum delay in milliseconds.')
adGenAOSnmICMPTSDelayOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutMax.setDescription('The outbound maximum delay in milliseconds.')
adGenAOSnmICMPTSDelayRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMin.setDescription('The round-trip minimum delay in milliseconds.')
adGenAOSnmICMPTSDelayRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtMax.setDescription('The round-trip maximum delay in milliseconds.')
adGenAOSnmICMPTSLossRoundTrip = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSLossRoundTrip.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSLossRoundTrip.setDescription('The round-trip packet loss.')
adGenAOSnmICMPTSDelayOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutSum.setDescription('The sum of outbound delay in milliseconds.')
adGenAOSnmICMPTSDelayOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutSum2.setDescription('The sum of the squares of outbound delay in milliseconds.')
adGenAOSnmICMPTSDelayOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayOutNum.setDescription('The number of individual outbound delay samples.')
adGenAOSnmICMPTSDelayInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInSum.setDescription('The sum of inbound delay in milliseconds.')
adGenAOSnmICMPTSDelayInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInSum2.setDescription('The sum of the squares of inbound delay in milliseconds.')
adGenAOSnmICMPTSDelayInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayInNum.setDescription('The number of individual inbound delay samples.')
adGenAOSnmICMPTSDelayRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtSum.setDescription('The sum of round-trip delay in milliseconds.')
adGenAOSnmICMPTSDelayRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtSum2.setDescription('The sum of the squares of round-trip delay in milliseconds.')
adGenAOSnmICMPTSDelayRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSDelayRtNum.setDescription('The number of individual round-trip delay samples.')
adGenAOSnmICMPTSIpvPosInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInMin.setDescription('The minimum value in the set of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInMax.setDescription('The maximum value in the set of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInSum.setDescription('The sum of positive inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvPosInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInSum2.setDescription('The sum of the squares of positive inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosInNum.setDescription('The number of positive inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvPosOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutMin.setDescription('The minimum value in the set of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutMax.setDescription('The maximum value in the set of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutSum.setDescription('The sum of positive outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvPosOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutSum2.setDescription('The sum of the squares of positive outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosOutNum.setDescription('The number of positive outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvPosRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtMin.setDescription('The minimum value in the set of positive round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvPosRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtMax.setDescription('The maximum value in the set of positive round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvPosRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtSum.setDescription('The sum of positive round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvPosRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtSum2.setDescription('The sum of the squares of positive round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvPosRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvPosRtNum.setDescription('The number of positive round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInMin.setDescription('The minimum value in the set of negative inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvNegInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInMax.setDescription('The maximum value in the set of negative inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvNegInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInSum.setDescription('The sum of negative inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInSum2.setDescription('The sum of the squares of negative inbound inter-packet delay\n                variation measurements.')
adGenAOSnmICMPTSIpvNegInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegInNum.setDescription('The number of negative inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutMin.setDescription('The minimum value in the set of negative outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvNegOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutMax.setDescription('The maximum value in the set of negative outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvNegOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutSum.setDescription('The sum of negative outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutSum2.setDescription('The sum of the squares of negative outbound inter-packet delay\n                variation measurements.')
adGenAOSnmICMPTSIpvNegOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegOutNum.setDescription('The number of negative outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtMin.setDescription('The minimum value in the set of negative round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvNegRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtMax.setDescription('The maximum value in the set of negative round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvNegRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtSum.setDescription('The sum of negative round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvNegRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtSum2.setDescription('The sum of the squares of negative round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvNegRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvNegRtNum.setDescription('The number of negative round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsInMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInMin.setDescription('The minimum value in the set of absolute inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvAbsInMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInMax.setDescription('The maximum value in the set of absolute inbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvAbsInSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInSum.setDescription('The sum of absolute inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsInSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInSum2.setDescription('The sum of the squares of absolute inbound inter-packet delay\n                variation measurements.')
adGenAOSnmICMPTSIpvAbsInNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsInNum.setDescription('The number of absolute inbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsOutMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutMin.setDescription('The minimum value in the set of absolute outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvAbsOutMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutMax.setDescription('The maximum value in the set of absolute outbound inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvAbsOutSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutSum.setDescription('The sum of absolute outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsOutSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutSum2.setDescription('The sum of the squares of absolute outbound inter-packet delay\n                variation measurements.')
adGenAOSnmICMPTSIpvAbsOutNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsOutNum.setDescription('The number of absolute outbound inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsRtMin = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtMin.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtMin.setDescription('The minimum value in the set of absolute round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvAbsRtMax = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtMax.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtMax.setDescription('The maximum value in the set of absolute round-trip\n                inter-packet delay variation measurements.')
adGenAOSnmICMPTSIpvAbsRtSum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtSum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtSum.setDescription('The sum of absolute round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSIpvAbsRtSum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtSum2.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtSum2.setDescription('The sum of the squares of absolute round-trip inter-packet\n                delay variation measurements.')
adGenAOSnmICMPTSIpvAbsRtNum = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtNum.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSIpvAbsRtNum.setDescription('The number of absolute round-trip inter-packet delay variation\n                measurements.')
adGenAOSnmICMPTSPktSentCount = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 8, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktSentCount.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSPktSentCount.setDescription('The number of packets sent.')
adGenAOSnmICMPTSResponder = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponder.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponder.setDescription('Specifies ability to enable or disable the ICMP Timstamp\n            responder to respond to ICMP timestamp requests.')
adGenAOSnmTWAMPResponder = MibScalar((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmTWAMPResponder.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTWAMPResponder.setDescription('Specifies ability to enable or disable the TWAMP\n            responder to respond to ICMP timestamp requests.')
adGenAOSnmICMPTSResponderStatsTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11), )
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsTable.setDescription('Operation history for a network monitor ICMP timestamp probe.')
adGenAOSnmICMPTSResponderStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderStatsIndex"))
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsEntry.setDescription('The read-only statistics of the network monitor ICMP\n            timestamp responder.')
adGenAOSnmICMPTSResponderStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsIndex.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsIndex.setDescription('Uniquely identifies a row in the\n                adGenAOSnmICMPTSResponderStatsTable.')
adGenAOSnmICMPTSResponderPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderPacketsReceived.setDescription('Number of packets received by the responder.')
adGenAOSnmICMPTSResponderPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderPacketsSent.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderPacketsSent.setDescription('Number of packets sent by the responder.')
adGenAOSnmClearICMPTSResponderCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmClearICMPTSResponderCounters.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmClearICMPTSResponderCounters.setDescription('Clear the counters of the ICMP timestamp responder.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adGenAOSnmTwampResponderStatsTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12), )
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsTable.setDescription('Operation history for a network monitor TWAMP probe.')
adGenAOSnmTwampResponderStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderStatsIndex"))
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsEntry.setDescription('The read-only statistics of the network monitor TWAMP responder.')
adGenAOSnmTwampResponderStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsIndex.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsIndex.setDescription('Uniquely identifies a row in the\n                adGenAOSnmTwampResponderStatsTable.')
adGenAOSnmTwampResponderPacketsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderPacketsReceived.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderPacketsReceived.setDescription('Number of packets received by the responder.')
adGenAOSnmTwampResponderPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderPacketsSent.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderPacketsSent.setDescription('Number of packets sent by the responder.')
adGenAOSnmTwampResponderSessionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionClosed.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionClosed.setDescription('Number of responder sessions closed.')
adGenAOSnmTwampResponderSessionOpened = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionOpened.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionOpened.setDescription('Number of responder sessions opened.')
adGenAOSnmTwampResponderSessionRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionRejected.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderSessionRejected.setDescription('Number of responder sessions closed.')
adGenAOSnmClearTwampResponderCounters = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("clear", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmClearTwampResponderCounters.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmClearTwampResponderCounters.setDescription('Clear the counters of the TWAMP responder.\n            This is a write-only variable. A read will result in no action\n            being taken.')
adGenAOSnmCfgIEProbeTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13), )
if mibBuilder.loadTexts: adGenAOSnmCfgIEProbeTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgIEProbeTable.setDescription('Configure a network monitor ICMP echo probe.')
adGenAOSnmCfgIEProbeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"))
if mibBuilder.loadTexts: adGenAOSnmCfgIEProbeEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgIEProbeEntry.setDescription('The parameters used to configure a particular network monitor ICMP\n            echo probe.')
adGenAOSnmCfgIEName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmCfgIEName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgIEName.setDescription('The name of the corresponding ICMP echo probe entry.\n            The probe identified by a particular value of this object is the\n            same probe as identified by the same value as a\n            adGenAOSnmName object instance.')
adGenAOSnmIEDestHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmIEDestHostname.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmIEDestHostname.setDescription('Specifies the destination hostname or IP address as a string in\n            dotted decimal format.')
adGenAOSnmIESrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmIESrcIP.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmIESrcIP.setDescription('Specifies the source IPv4 address.')
adGenAOSnmIEPacketLength = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1462))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmIEPacketLength.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmIEPacketLength.setDescription('Length of the ICMP packet.')
adGenAOSnmIEPacketPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: adGenAOSnmIEPacketPattern.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmIEPacketPattern.setDescription('Specifies the hexadecimal pattern for the ICMP packet.')
adGenAOSnmTrackTable = MibTable((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 14), )
if mibBuilder.loadTexts: adGenAOSnmTrackTable.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackTable.setDescription('Network monitor Track.')
adGenAOSnmTrackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 14, 1), ).setIndexNames((0, "ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackIndex"))
if mibBuilder.loadTexts: adGenAOSnmTrackEntry.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackEntry.setDescription('Network monitor Track entry.')
adGenAOSnmTrackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTrackIndex.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackIndex.setDescription('Uniquely identifies a row in the adGenAOSnmTrackTable.')
adGenAOSnmTrackName = MibTableColumn((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 14, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: adGenAOSnmTrackName.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackName.setDescription('The name of the corresponding Track entry.')
adGenAOSnmConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7))
adGenAOSnmGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1))
adGenAOSnmCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 2))
adGenAOSnmFullCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 2, 1)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeTableNextIndexGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmConfigProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeStatusGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgTwampProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampHistoryGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgICMPTSProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSHistoryGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTWAMPResponderGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderStatsGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderStatsGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgIEProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmFullCompliance = adGenAOSnmFullCompliance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmFullCompliance.setDescription('The compliance statement for SNMP entities which implement\n        version 2 of the adGenAOSNetMon MIB. When this MIB is implemented\n        with support for read-create, then such an implementation can claim\n        full compliance. Network Monitor probes can then be both monitored\n        and configured with this MIB.  No more than 10 rows can be created\n        in the adGenAOSnmProbeTable at this time. Attempting to create more\n        than this value will return an error.')
adGenAOSnmReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 2, 2)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeTableNextIndexGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmConfigProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeStatusGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgTwampProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampHistoryGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgICMPTSProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSHistoryGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTWAMPResponderGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderStatsGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderStatsGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgIEProbeGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackGroup"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmReadOnlyCompliance = adGenAOSnmReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmReadOnlyCompliance.setDescription('The compliance statement for SNMP entities which implement\n            version 2 of the adGenAOSNetMon MIB. When this MIB is implemented\n            without support for read-create (i.e. in read-only mode),\n            then such an implementation can claim read-only compliance.\n            A network monitor probe can then be monitored but cannot\n            be configured with this MIB.')
adGenAOSnmProbeTableNextIndexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 1)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmProbeTableNextIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmProbeTableNextIndexGroup = adGenAOSnmProbeTableNextIndexGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeTableNextIndexGroup.setDescription('The object necessary to get the next index for creation of the\n            network monitor probe.')
adGenAOSnmProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 2)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmType"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmProbeGroup = adGenAOSnmProbeGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeGroup.setDescription('The objects necessary to create the network monitor probe.')
adGenAOSnmConfigProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 3)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmAdminStatus"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmPollPeriod"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTimeoutPeriod"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmToleranceMode"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmFailTolerance"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmPassTolerance"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmToleranceTestSize"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmClearCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmConfigProbeGroup = adGenAOSnmConfigProbeGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmConfigProbeGroup.setDescription('The objects necessary to configure the network monitor probe.')
adGenAOSnmProbeStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 4)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmStatusName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTestStatus"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTestsRun"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTestsFailed"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmStatsToleranceTestSize"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmStatsToleranceTestValue"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTimeSinceLastStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmProbeStatusGroup = adGenAOSnmProbeStatusGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmProbeStatusGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            probes.')
adGenAOSnmCfgTwampProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 5)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgTwName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDestHostname"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDestPort"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSrcIP"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSrcPort"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDscp"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPaddingLen"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPaddingFormat"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPaddingPattern"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDataPadType"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPktSendCnt"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSendScheduleType"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSendScheduleValue"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsInMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsOutMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpdvAbsRtMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPktRtLossFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPktRtLossPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwHistoryDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmCfgTwampProbeGroup = adGenAOSnmCfgTwampProbeGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgTwampProbeGroup.setDescription('The objects necessary to configure the network monitor TWAMP\n             probe.')
adGenAOSnmTwampHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 6)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwSeqNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwHistoryName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwStartTime"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwEndTime"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwLocalSyncState"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwLocalClkErr"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwRemoteSyncState"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwRemoteClkErr"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwLossRoundTrip"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwDelayRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvPosRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvNegRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwIpvAbsRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwPktSentCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmTwampHistoryGroup = adGenAOSnmTwampHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampHistoryGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            TWAMP probe.')
adGenAOSnmCfgICMPTSProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 7)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgICMPTSName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDestHostname"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSSrcIP"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDscp"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPaddingLen"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPaddingFormat"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPaddingPattern"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDataPadType"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPktSendCnt"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSSendScheduleType"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSSendScheduleValue"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsInMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsOutMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpdvAbsRtMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMinFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtAvgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMaxFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMinPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtAvgPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMaxPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPktRtLossFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPktRtLossPass"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSHistoryDepth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmCfgICMPTSProbeGroup = adGenAOSnmCfgICMPTSProbeGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgICMPTSProbeGroup.setDescription('The objects necessary to configure the network monitor ICMP\n            timestamp probe.')
adGenAOSnmICMPTSHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 8)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSSeqNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSHistoryName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSStartTime"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSEndTime"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSLossRoundTrip"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSDelayRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvPosRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvNegRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsInMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsInMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsInSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsInSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsInNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsOutMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsOutMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsOutSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsOutSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsOutNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsRtMin"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsRtMax"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsRtSum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsRtSum2"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSIpvAbsRtNum"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSPktSentCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmICMPTSHistoryGroup = adGenAOSnmICMPTSHistoryGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSHistoryGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            ICMP timestamp probe.')
adGenAOSnmICMPTSResponderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 9)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmICMPTSResponderGroup = adGenAOSnmICMPTSResponderGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderGroup.setDescription('Object designed to assist in changing the state of the ICMP\n            timestamp responder.')
adGenAOSnmTWAMPResponderGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 10)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTWAMPResponder"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmTWAMPResponderGroup = adGenAOSnmTWAMPResponderGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTWAMPResponderGroup.setDescription('Object designed to assist in changing the state of the TWAMP\n            responder.')
adGenAOSnmICMPTSResponderStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 11)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderStatsIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderPacketsReceived"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmICMPTSResponderPacketsSent"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmClearICMPTSResponderCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmICMPTSResponderStatsGroup = adGenAOSnmICMPTSResponderStatsGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmICMPTSResponderStatsGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            ICMP timestamp responder.')
adGenAOSnmTwampResponderStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 12)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderStatsIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderPacketsReceived"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderPacketsSent"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderSessionClosed"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderSessionOpened"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTwampResponderSessionRejected"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmClearTwampResponderCounters"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmTwampResponderStatsGroup = adGenAOSnmTwampResponderStatsGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTwampResponderStatsGroup.setDescription('Objects designed to assist in retrieving the statistics of the\n            TWAMP responder.')
adGenAOSnmCfgIEProbeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 13)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmCfgIEName"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIEDestHostname"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIESrcIP"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIEPacketLength"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmIEPacketPattern"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmCfgIEProbeGroup = adGenAOSnmCfgIEProbeGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmCfgIEProbeGroup.setDescription('Objects designed to assist in configuring the ICMP echo probe.')
adGenAOSnmTrackGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 14)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmTrackGroup = adGenAOSnmTrackGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackGroup.setDescription('Objects designed to assist in retrieving track information.')
adGenAOSnmNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 664, 5, 53, 99, 7, 1, 15)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackStateChgFail"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackStateChgPass"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    adGenAOSnmNotificationGroup = adGenAOSnmNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmNotificationGroup.setDescription('Traps which may be used to enhance event driven\n            management of Network Monitoring traps.')
adGenAOSnmTrackStateChgFail = NotificationType((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 0, 1)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackName"))
if mibBuilder.loadTexts: adGenAOSnmTrackStateChgFail.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackStateChgFail.setDescription('A stateChangeFail trap indicates that the specified track\n\t            has changed states from Pass to Fail.')
adGenAOSnmTrackStateChgPass = NotificationType((1, 3, 6, 1, 4, 1, 664, 5, 53, 2, 2, 0, 2)).setObjects(("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackIndex"), ("ADTRAN-AOS-NETWORKMONITOR", "adGenAOSnmTrackName"))
if mibBuilder.loadTexts: adGenAOSnmTrackStateChgPass.setStatus('current')
if mibBuilder.loadTexts: adGenAOSnmTrackStateChgPass.setDescription('A stateChangePass trap indicates that the specified track\n\t            has changed states from Fail to Pass.')
mibBuilder.exportSymbols("ADTRAN-AOS-NETWORKMONITOR", adGenAOSnmTwIpdvAbsOutMinPass=adGenAOSnmTwIpdvAbsOutMinPass, adGenAOSnmTwPaddingFormat=adGenAOSnmTwPaddingFormat, adGenAOSnmICMPTSPaddingLen=adGenAOSnmICMPTSPaddingLen, adGenAOSnmTwIpdvAbsInMinPass=adGenAOSnmTwIpdvAbsInMinPass, adGenAOSnmTwIpdvAbsRtAvgPass=adGenAOSnmTwIpdvAbsRtAvgPass, adGenAOSnmProbeTableNextIndexGroup=adGenAOSnmProbeTableNextIndexGroup, adGenAOSnmICMPTSIpdvAbsRtMaxFail=adGenAOSnmICMPTSIpdvAbsRtMaxFail, adGenAOSnmICMPTSResponderPacketsSent=adGenAOSnmICMPTSResponderPacketsSent, adGenAOSnmICMPTSPktRtLossPass=adGenAOSnmICMPTSPktRtLossPass, adGenAOSnmICMPTSDelayRtMaxFail=adGenAOSnmICMPTSDelayRtMaxFail, adGenAOSnmTWAMPResponder=adGenAOSnmTWAMPResponder, adGenAOSnmTwIpdvAbsOutMinFail=adGenAOSnmTwIpdvAbsOutMinFail, adGenAOSnmICMPTSIpvNegRtSum2=adGenAOSnmICMPTSIpvNegRtSum2, adGenAOSnmTwDelayOutNum=adGenAOSnmTwDelayOutNum, adGenAOSnmToleranceMode=adGenAOSnmToleranceMode, adGenAOSnmTwIpvAbsRtSum=adGenAOSnmTwIpvAbsRtSum, adGenAOSnmTwIpdvAbsInAvgPass=adGenAOSnmTwIpdvAbsInAvgPass, adGenAOSnmStatsToleranceTestValue=adGenAOSnmStatsToleranceTestValue, adGenAOSnmICMPTSIpvNegInNum=adGenAOSnmICMPTSIpvNegInNum, adGenAOSnmIEPacketPattern=adGenAOSnmIEPacketPattern, adGenAOSnmTwIpdvAbsOutMaxFail=adGenAOSnmTwIpdvAbsOutMaxFail, adGenAOSnmICMPTSIpvPosInMin=adGenAOSnmICMPTSIpvPosInMin, adGenAOSnmICMPTSIpdvAbsRtMinPass=adGenAOSnmICMPTSIpdvAbsRtMinPass, adGenAOSnmICMPTSIpvPosInSum2=adGenAOSnmICMPTSIpvPosInSum2, adGenAOSnmICMPTSHistoryGroup=adGenAOSnmICMPTSHistoryGroup, PYSNMP_MODULE_ID=adGenAOSNetMonMib, adGenAOSnmTwIpvPosOutSum2=adGenAOSnmTwIpvPosOutSum2, adGenAOSnmICMPTSIpvPosInSum=adGenAOSnmICMPTSIpvPosInSum, adGenAOSnmCfgTwampProbeEntry=adGenAOSnmCfgTwampProbeEntry, adGenAOSnmICMPTSDelayInAvgPass=adGenAOSnmICMPTSDelayInAvgPass, adGenAOSnmICMPTSIpvNegRtNum=adGenAOSnmICMPTSIpvNegRtNum, adGenAOSnmTwDelayInSum2=adGenAOSnmTwDelayInSum2, adGenAOSnmTwIpvNegRtMax=adGenAOSnmTwIpvNegRtMax, adGenAOSnmTwDelayRtAvgPass=adGenAOSnmTwDelayRtAvgPass, adGenAOSnmICMPTSPaddingPattern=adGenAOSnmICMPTSPaddingPattern, adGenAOSnmTwampResponderStatsIndex=adGenAOSnmTwampResponderStatsIndex, adGenAOSnmICMPTSIpvNegOutNum=adGenAOSnmICMPTSIpvNegOutNum, adGenAOSnmTwDelayInMinPass=adGenAOSnmTwDelayInMinPass, adGenAOSNetMonMib=adGenAOSNetMonMib, adGenAOSnmICMPTSIpvAbsInSum=adGenAOSnmICMPTSIpvAbsInSum, adGenAOSnmICMPTSIpdvAbsRtAvgFail=adGenAOSnmICMPTSIpdvAbsRtAvgFail, adGenAOSnmICMPTSDelayRtMin=adGenAOSnmICMPTSDelayRtMin, adGenAOSnmTwIpvPosInMin=adGenAOSnmTwIpvPosInMin, adGenAOSnmProbeStatusEntry=adGenAOSnmProbeStatusEntry, adGenAOSnmTwDelayRtMin=adGenAOSnmTwDelayRtMin, adGenAOSnmTwDelayInNum=adGenAOSnmTwDelayInNum, adGenAOSnmTrackEntry=adGenAOSnmTrackEntry, adGenAOSnmICMPTSIpvAbsInMin=adGenAOSnmICMPTSIpvAbsInMin, adGenAOSnmICMPTSDelayRtMaxPass=adGenAOSnmICMPTSDelayRtMaxPass, adGenAOSnmTwIpvNegOutSum2=adGenAOSnmTwIpvNegOutSum2, adGenAOSnmICMPTSIpvAbsOutMin=adGenAOSnmICMPTSIpvAbsOutMin, adGenAOSnmTwDelayOutMin=adGenAOSnmTwDelayOutMin, adGenAOSnmICMPTSDelayOutMinPass=adGenAOSnmICMPTSDelayOutMinPass, adGenAOSnmClearICMPTSResponderCounters=adGenAOSnmClearICMPTSResponderCounters, adGenAOSnmTrackName=adGenAOSnmTrackName, adGenAOSnmConfigProbeEntry=adGenAOSnmConfigProbeEntry, adGenAOSnmICMPTSHistoryTable=adGenAOSnmICMPTSHistoryTable, adGenAOSnmTwIpdvAbsOutAvgPass=adGenAOSnmTwIpdvAbsOutAvgPass, adGenAOSnmTwIpdvAbsOutAvgFail=adGenAOSnmTwIpdvAbsOutAvgFail, adGenAOSnmICMPTSIpvNegOutSum2=adGenAOSnmICMPTSIpvNegOutSum2, adGenAOSnmICMPTSIpvAbsRtSum2=adGenAOSnmICMPTSIpvAbsRtSum2, adGenAOSnmIndex=adGenAOSnmIndex, adGenAOSnmTwRemoteClkErr=adGenAOSnmTwRemoteClkErr, adGenAOSnmTrackStateChgFail=adGenAOSnmTrackStateChgFail, adGenAOSnmTestsRun=adGenAOSnmTestsRun, adGenAOSnmProbeStatusGroup=adGenAOSnmProbeStatusGroup, adGenAOSnmICMPTSDelayRtAvgFail=adGenAOSnmICMPTSDelayRtAvgFail, adGenAOSnmTwampResponderPacketsSent=adGenAOSnmTwampResponderPacketsSent, adGenAOSnmTwDelayOutMaxFail=adGenAOSnmTwDelayOutMaxFail, adGenAOSnmICMPTSDelayInMinFail=adGenAOSnmICMPTSDelayInMinFail, adGenAOSnmTwLossRoundTrip=adGenAOSnmTwLossRoundTrip, adGenAOSnmTwDscp=adGenAOSnmTwDscp, adGenAOSnmTwDelayOutMinPass=adGenAOSnmTwDelayOutMinPass, adGenAOSnmTwDelayRtSum2=adGenAOSnmTwDelayRtSum2, adGenAOSnmICMPTSIpvNegRtSum=adGenAOSnmICMPTSIpvNegRtSum, adGenAOSnmConfigProbeGroup=adGenAOSnmConfigProbeGroup, adGenAOSnmICMPTSDelayOutAvgFail=adGenAOSnmICMPTSDelayOutAvgFail, adGenAOSnmTwampResponderSessionOpened=adGenAOSnmTwampResponderSessionOpened, adGenAOSnmCfgIEProbeEntry=adGenAOSnmCfgIEProbeEntry, adGenAOSnmTwIpvPosRtMax=adGenAOSnmTwIpvPosRtMax, adGenAOSnmICMPTSDestHostname=adGenAOSnmICMPTSDestHostname, adGenAOSnmClearCounters=adGenAOSnmClearCounters, adGenAOSnmICMPTSDelayRtSum=adGenAOSnmICMPTSDelayRtSum, adGenAOSnmICMPTSDelayInSum=adGenAOSnmICMPTSDelayInSum, adGenAOSnmICMPTSResponderGroup=adGenAOSnmICMPTSResponderGroup, adGenAOSnmTwIpvNegInSum=adGenAOSnmTwIpvNegInSum, adGenAOSnmTwIpvAbsOutMax=adGenAOSnmTwIpvAbsOutMax, adGenAOSnmTwIpvPosRtMin=adGenAOSnmTwIpvPosRtMin, adGenAOSnmICMPTSIpvAbsOutMax=adGenAOSnmICMPTSIpvAbsOutMax, adGenAOSnmTwDelayOutSum2=adGenAOSnmTwDelayOutSum2, adGenAOSnmTwampResponderSessionRejected=adGenAOSnmTwampResponderSessionRejected, adGenAOSnmTwIpdvAbsInMinFail=adGenAOSnmTwIpdvAbsInMinFail, adGenAOSnmTwDelayRtMinFail=adGenAOSnmTwDelayRtMinFail, adGenAOSnmTwIpvPosInMax=adGenAOSnmTwIpvPosInMax, adGenAOSnmConfigProbeTable=adGenAOSnmConfigProbeTable, adGenAOSnmICMPTSIpvPosOutNum=adGenAOSnmICMPTSIpvPosOutNum, adGenAOSnmTwDelayInMaxFail=adGenAOSnmTwDelayInMaxFail, adGenAOSnmTwIpvAbsInSum2=adGenAOSnmTwIpvAbsInSum2, adGenAOSnmTwDelayOutAvgFail=adGenAOSnmTwDelayOutAvgFail, adGenAOSnmTwIpvNegInMin=adGenAOSnmTwIpvNegInMin, adGenAOSnmTwIpdvAbsInAvgFail=adGenAOSnmTwIpdvAbsInAvgFail, adGenAOSnmICMPTSIpdvAbsRtAvgPass=adGenAOSnmICMPTSIpdvAbsRtAvgPass, adGenAOSnmTWAMPResponderGroup=adGenAOSnmTWAMPResponderGroup, adGenAOSNetMon=adGenAOSNetMon, adGenAOSnmTrackTable=adGenAOSnmTrackTable, adGenAOSnmTwIpvNegRtSum2=adGenAOSnmTwIpvNegRtSum2, adGenAOSnmICMPTSIpdvAbsOutMinPass=adGenAOSnmICMPTSIpdvAbsOutMinPass, adGenAOSnmType=adGenAOSnmType, adGenAOSnmTimeoutPeriod=adGenAOSnmTimeoutPeriod, adGenAOSnmICMPTSDataPadType=adGenAOSnmICMPTSDataPadType, adGenAOSnmICMPTSDelayOutSum=adGenAOSnmICMPTSDelayOutSum, adGenAOSnmTwIpdvAbsInMaxFail=adGenAOSnmTwIpdvAbsInMaxFail, adGenAOSnmTwIpvPosInSum2=adGenAOSnmTwIpvPosInSum2, adGenAOSnmICMPTSIpvAbsInSum2=adGenAOSnmICMPTSIpvAbsInSum2, adGenAOSnmICMPTSDelayInMinPass=adGenAOSnmICMPTSDelayInMinPass, adGenAOSnmICMPTSIpdvAbsInMaxPass=adGenAOSnmICMPTSIpdvAbsInMaxPass, adGenAOSnmProbeStatusTable=adGenAOSnmProbeStatusTable, adGenAOSnmICMPTSIpdvAbsInAvgPass=adGenAOSnmICMPTSIpdvAbsInAvgPass, adGenAOSnmTwDestPort=adGenAOSnmTwDestPort, adGenAOSnmTimeSinceLastStatusChange=adGenAOSnmTimeSinceLastStatusChange, adGenAOSnmTwIpvAbsInMax=adGenAOSnmTwIpvAbsInMax, adGenAOSnmICMPTSIpvPosOutMax=adGenAOSnmICMPTSIpvPosOutMax, adGenAOSnmCfgICMPTSProbeGroup=adGenAOSnmCfgICMPTSProbeGroup, adGenAOSnmTwIpvPosInNum=adGenAOSnmTwIpvPosInNum, adGenAOSnmTwampResponderSessionClosed=adGenAOSnmTwampResponderSessionClosed, adGenAOSnmTwIpvPosRtSum2=adGenAOSnmTwIpvPosRtSum2, adGenAOSnmTwSendScheduleValue=adGenAOSnmTwSendScheduleValue, adGenAOSnmTwIpvAbsInNum=adGenAOSnmTwIpvAbsInNum, adGenAOSnmTwDelayRtMaxPass=adGenAOSnmTwDelayRtMaxPass, adGenAOSnmTwIpdvAbsRtMinPass=adGenAOSnmTwIpdvAbsRtMinPass, adGenAOSnmICMPTSIpdvAbsOutAvgPass=adGenAOSnmICMPTSIpdvAbsOutAvgPass, adGenAOSnmClearTwampResponderCounters=adGenAOSnmClearTwampResponderCounters, adGenAOSnmTwDelayRtAvgFail=adGenAOSnmTwDelayRtAvgFail, adGenAOSnmTwSeqNum=adGenAOSnmTwSeqNum, adGenAOSnmICMPTSDelayOutMax=adGenAOSnmICMPTSDelayOutMax, adGenAOSnmICMPTSDelayOutSum2=adGenAOSnmICMPTSDelayOutSum2, adGenAOSnmICMPTSDelayInMaxPass=adGenAOSnmICMPTSDelayInMaxPass, adGenAOSnmProbeGroup=adGenAOSnmProbeGroup, adGenAOSnmCfgICMPTSProbeEntry=adGenAOSnmCfgICMPTSProbeEntry, adGenAOSnmTwDelayRtMax=adGenAOSnmTwDelayRtMax, adGenAOSnmTwDelayInMin=adGenAOSnmTwDelayInMin, adGenAOSnmTwPktSendCnt=adGenAOSnmTwPktSendCnt, adGenAOSnmICMPTSResponderStatsEntry=adGenAOSnmICMPTSResponderStatsEntry, adGenAOSnmICMPTSResponderStatsIndex=adGenAOSnmICMPTSResponderStatsIndex, adGenAOSnmTwIpvAbsOutSum=adGenAOSnmTwIpvAbsOutSum, adGenAOSnmTwIpdvAbsOutMaxPass=adGenAOSnmTwIpdvAbsOutMaxPass, adGenAOSnmICMPTSIpvNegRtMax=adGenAOSnmICMPTSIpvNegRtMax, adGenAOSnmICMPTSDelayInMax=adGenAOSnmICMPTSDelayInMax, adGenAOSnmICMPTSIpvNegOutSum=adGenAOSnmICMPTSIpvNegOutSum, adGenAOSnmCfgIEName=adGenAOSnmCfgIEName, adGenAOSnmTwDataPadType=adGenAOSnmTwDataPadType, adGenAOSnmCfgTwName=adGenAOSnmCfgTwName, adGenAOSnmTwDelayOutMax=adGenAOSnmTwDelayOutMax, adGenAOSnmICMPTSDelayRtNum=adGenAOSnmICMPTSDelayRtNum, adGenAOSnmTwDelayInMax=adGenAOSnmTwDelayInMax, adGenAOSnmTwDelayOutAvgPass=adGenAOSnmTwDelayOutAvgPass, adGenAOSnmTwSrcPort=adGenAOSnmTwSrcPort, adGenAOSnmICMPTSDelayOutMinFail=adGenAOSnmICMPTSDelayOutMinFail, adGenAOSnmICMPTSPktSendCnt=adGenAOSnmICMPTSPktSendCnt, adGenAOSnmTrackStateChgPass=adGenAOSnmTrackStateChgPass, adGenAOSnmTwIpvPosRtNum=adGenAOSnmTwIpvPosRtNum, adGenAOSnmICMPTSDelayOutMaxPass=adGenAOSnmICMPTSDelayOutMaxPass, adGenAOSnmTwampResponderStatsTable=adGenAOSnmTwampResponderStatsTable, adGenAOSnmICMPTSIpdvAbsRtMinFail=adGenAOSnmICMPTSIpdvAbsRtMinFail, adGenAOSnmICMPTSDelayInNum=adGenAOSnmICMPTSDelayInNum, adGenAOSnmICMPTSIpvPosRtNum=adGenAOSnmICMPTSIpvPosRtNum, adGenAOSnmIEDestHostname=adGenAOSnmIEDestHostname, adGenAOSnmICMPTSIpvNegRtMin=adGenAOSnmICMPTSIpvNegRtMin, adGenAOSnmStatusName=adGenAOSnmStatusName, adGenAOSnmTwDelayInSum=adGenAOSnmTwDelayInSum, adGenAOSnmTwDelayRtNum=adGenAOSnmTwDelayRtNum, adGenAOSnmICMPTSSendScheduleType=adGenAOSnmICMPTSSendScheduleType, adGenAOSnmTwIpvAbsOutSum2=adGenAOSnmTwIpvAbsOutSum2, adGenAOSnmICMPTSIpvNegOutMax=adGenAOSnmICMPTSIpvNegOutMax, adGenAOSnmTwLocalSyncState=adGenAOSnmTwLocalSyncState, adGenAOSnmTwIpvNegInMax=adGenAOSnmTwIpvNegInMax, adGenAOSnmCfgICMPTSProbeTable=adGenAOSnmCfgICMPTSProbeTable, adGenAOSnmTwIpvPosOutSum=adGenAOSnmTwIpvPosOutSum, adGenAOSnmTwStartTime=adGenAOSnmTwStartTime, adGenAOSnmTwIpvNegOutNum=adGenAOSnmTwIpvNegOutNum, adGenAOSnmPassTolerance=adGenAOSnmPassTolerance, adGenAOSnmTrackIndex=adGenAOSnmTrackIndex, adGenAOSnmICMPTSHistoryName=adGenAOSnmICMPTSHistoryName, adGenAOSnmTwDelayRtMaxFail=adGenAOSnmTwDelayRtMaxFail, adGenAOSnmIEPacketLength=adGenAOSnmIEPacketLength, adGenAOSnmTwampHistoryTable=adGenAOSnmTwampHistoryTable, adGenAOSnmICMPTSDelayOutAvgPass=adGenAOSnmICMPTSDelayOutAvgPass, adGenAOSnmICMPTSDelayInAvgFail=adGenAOSnmICMPTSDelayInAvgFail, adGenAOSnmTwDelayRtMinPass=adGenAOSnmTwDelayRtMinPass, adGenAOSnmICMPTSIpdvAbsInMaxFail=adGenAOSnmICMPTSIpdvAbsInMaxFail, adGenAOSnmICMPTSIpdvAbsOutMaxFail=adGenAOSnmICMPTSIpdvAbsOutMaxFail, adGenAOSnmTwIpvAbsOutNum=adGenAOSnmTwIpvAbsOutNum, adGenAOSnmTwIpvNegOutSum=adGenAOSnmTwIpvNegOutSum, adGenAOSnmTwDelayInMinFail=adGenAOSnmTwDelayInMinFail, adGenAOSnmTwLocalClkErr=adGenAOSnmTwLocalClkErr, adGenAOSnmTwIpvPosOutNum=adGenAOSnmTwIpvPosOutNum, adGenAOSnmTwIpvAbsInSum=adGenAOSnmTwIpvAbsInSum, adGenAOSnmTwDelayInAvgFail=adGenAOSnmTwDelayInAvgFail, adGenAOSnmName=adGenAOSnmName, adGenAOSnmPollPeriod=adGenAOSnmPollPeriod, adGenAOSnmICMPTSDelayInMin=adGenAOSnmICMPTSDelayInMin, adGenAOSnmICMPTSIpvAbsOutSum=adGenAOSnmICMPTSIpvAbsOutSum, adGenAOSnmTwampResponderStatsGroup=adGenAOSnmTwampResponderStatsGroup, adGenAOSnmICMPTSIpvAbsInMax=adGenAOSnmICMPTSIpvAbsInMax, adGenAOSnmTwPktRtLossFail=adGenAOSnmTwPktRtLossFail, adGenAOSnmTwDelayInAvgPass=adGenAOSnmTwDelayInAvgPass, adGenAOSnmTwIpdvAbsRtMinFail=adGenAOSnmTwIpdvAbsRtMinFail, adGenAOSnmAdminStatus=adGenAOSnmAdminStatus, adGenAOSnmTwampHistoryGroup=adGenAOSnmTwampHistoryGroup, adGenAOSnmTwIpvPosOutMin=adGenAOSnmTwIpvPosOutMin, adGenAOSnmTwDestHostname=adGenAOSnmTwDestHostname, adGenAOSnmTwIpvAbsRtSum2=adGenAOSnmTwIpvAbsRtSum2, adGenAOSnmTwEndTime=adGenAOSnmTwEndTime, adGenAOSnmICMPTSDelayRtMinFail=adGenAOSnmICMPTSDelayRtMinFail, adGenAOSnmICMPTSIpvAbsRtMin=adGenAOSnmICMPTSIpvAbsRtMin, adGenAOSnmCfgIEProbeTable=adGenAOSnmCfgIEProbeTable, adGenAOSnmTwIpvNegOutMin=adGenAOSnmTwIpvNegOutMin, adGenAOSnmCfgName=adGenAOSnmCfgName, adGenAOSnmTwIpvAbsRtNum=adGenAOSnmTwIpvAbsRtNum, adGenAOSnmTwIpvNegRtNum=adGenAOSnmTwIpvNegRtNum, adGenAOSnmTwIpvNegInNum=adGenAOSnmTwIpvNegInNum, adGenAOSnmTwIpvPosRtSum=adGenAOSnmTwIpvPosRtSum, adGenAOSnmICMPTSPktSentCount=adGenAOSnmICMPTSPktSentCount, adGenAOSnmTestStatus=adGenAOSnmTestStatus, adGenAOSnmICMPTSIpvPosRtMin=adGenAOSnmICMPTSIpvPosRtMin, adGenAOSnmTwIpvNegInSum2=adGenAOSnmTwIpvNegInSum2, adGenAOSnmTwHistoryName=adGenAOSnmTwHistoryName, adGenAOSnmTwSendScheduleType=adGenAOSnmTwSendScheduleType, adGenAOSnmIESrcIP=adGenAOSnmIESrcIP, adGenAOSnmTwampHistoryEntry=adGenAOSnmTwampHistoryEntry, adGenAOSnmTwPktSentCount=adGenAOSnmTwPktSentCount, adGenAOSnmTrackGroup=adGenAOSnmTrackGroup, adGenAOSnmICMPTSSeqNum=adGenAOSnmICMPTSSeqNum, adGenAOSnmICMPTSIpvPosRtSum2=adGenAOSnmICMPTSIpvPosRtSum2, adGenAOSnmICMPTSIpvNegInMin=adGenAOSnmICMPTSIpvNegInMin, adGenAOSnmTwDelayInMaxPass=adGenAOSnmTwDelayInMaxPass, adGenAOSnmICMPTSIpdvAbsInAvgFail=adGenAOSnmICMPTSIpdvAbsInAvgFail, adGenAOSnmTrackTraps=adGenAOSnmTrackTraps, adGenAOSnmTwIpvNegRtSum=adGenAOSnmTwIpvNegRtSum, adGenAOSnmCfgICMPTSName=adGenAOSnmCfgICMPTSName, adGenAOSnmFullCompliance=adGenAOSnmFullCompliance, adGenAOSnmTestsFailed=adGenAOSnmTestsFailed, adGenAOSnmStatsToleranceTestSize=adGenAOSnmStatsToleranceTestSize, adGenAOSnmProbeTableNextIndex=adGenAOSnmProbeTableNextIndex, adGenAOSnmICMPTSIpvNegInSum2=adGenAOSnmICMPTSIpvNegInSum2, adGenAOSnmTwIpvNegRtMin=adGenAOSnmTwIpvNegRtMin, adGenAOSnmICMPTSDelayOutMin=adGenAOSnmICMPTSDelayOutMin, adGenAOSnmCfgTwampProbeGroup=adGenAOSnmCfgTwampProbeGroup, adGenAOSnmTwSrcIP=adGenAOSnmTwSrcIP, adGenAOSnmICMPTSIpvPosOutSum2=adGenAOSnmICMPTSIpvPosOutSum2, adGenAOSnmICMPTSPktRtLossFail=adGenAOSnmICMPTSPktRtLossFail, adGenAOSnmICMPTSDelayInMaxFail=adGenAOSnmICMPTSDelayInMaxFail, adGenAOSnmTwIpvNegOutMax=adGenAOSnmTwIpvNegOutMax, adGenAOSnmICMPTSIpdvAbsOutMaxPass=adGenAOSnmICMPTSIpdvAbsOutMaxPass)
mibBuilder.exportSymbols("ADTRAN-AOS-NETWORKMONITOR", adGenAOSnmCfgTwampProbeTable=adGenAOSnmCfgTwampProbeTable, adGenAOSnmICMPTSIpvPosOutMin=adGenAOSnmICMPTSIpvPosOutMin, adGenAOSnmConformance=adGenAOSnmConformance, adGenAOSnmFailTolerance=adGenAOSnmFailTolerance, adGenAOSnmTwDelayRtSum=adGenAOSnmTwDelayRtSum, adGenAOSnmICMPTSDscp=adGenAOSnmICMPTSDscp, adGenAOSnmToleranceTestSize=adGenAOSnmToleranceTestSize, adGenAOSnmICMPTSHistoryDepth=adGenAOSnmICMPTSHistoryDepth, adGenAOSnmICMPTSDelayRtSum2=adGenAOSnmICMPTSDelayRtSum2, adGenAOSnmCompliances=adGenAOSnmCompliances, adGenAOSnmICMPTSDelayRtMinPass=adGenAOSnmICMPTSDelayRtMinPass, adGenAOSnmICMPTSIpvAbsRtMax=adGenAOSnmICMPTSIpvAbsRtMax, adGenAOSnmTwampResponderPacketsReceived=adGenAOSnmTwampResponderPacketsReceived, adGenAOSnmTwIpvAbsRtMin=adGenAOSnmTwIpvAbsRtMin, adGenAOSnmICMPTSIpvPosRtMax=adGenAOSnmICMPTSIpvPosRtMax, adGenAOSnmTwDelayOutSum=adGenAOSnmTwDelayOutSum, adGenAOSnmTwPaddingLen=adGenAOSnmTwPaddingLen, adGenAOSnmICMPTSPaddingFormat=adGenAOSnmICMPTSPaddingFormat, adGenAOSnmTwIpvPosInSum=adGenAOSnmTwIpvPosInSum, adGenAOSnmICMPTSIpvPosOutSum=adGenAOSnmICMPTSIpvPosOutSum, adGenAOSnmTwIpvAbsInMin=adGenAOSnmTwIpvAbsInMin, adGenAOSnmICMPTSHistoryEntry=adGenAOSnmICMPTSHistoryEntry, adGenAOSnmICMPTSIpvAbsOutSum2=adGenAOSnmICMPTSIpvAbsOutSum2, adGenAOSnmICMPTSDelayRtAvgPass=adGenAOSnmICMPTSDelayRtAvgPass, adGenAOSnmICMPTSIpvAbsOutNum=adGenAOSnmICMPTSIpvAbsOutNum, adGenAOSnmTwampResponderStatsEntry=adGenAOSnmTwampResponderStatsEntry, adGenAOSnmICMPTSResponderStatsTable=adGenAOSnmICMPTSResponderStatsTable, adGenAOSnmICMPTSIpvAbsInNum=adGenAOSnmICMPTSIpvAbsInNum, adGenAOSnmICMPTSIpvAbsRtSum=adGenAOSnmICMPTSIpvAbsRtSum, adGenAOSnmICMPTSIpvPosRtSum=adGenAOSnmICMPTSIpvPosRtSum, adGenAOSnmICMPTSDelayInSum2=adGenAOSnmICMPTSDelayInSum2, adGenAOSnmTwPaddingPattern=adGenAOSnmTwPaddingPattern, adGenAOSnmProbeEntry=adGenAOSnmProbeEntry, adGenAOSnmICMPTSEndTime=adGenAOSnmICMPTSEndTime, adGenAOSnmCfgIEProbeGroup=adGenAOSnmCfgIEProbeGroup, adGenAOSnmTwPktRtLossPass=adGenAOSnmTwPktRtLossPass, adGenAOSnmTwDelayOutMaxPass=adGenAOSnmTwDelayOutMaxPass, adGenAOSnmTwIpvAbsRtMax=adGenAOSnmTwIpvAbsRtMax, adGenAOSnmICMPTSSendScheduleValue=adGenAOSnmICMPTSSendScheduleValue, adGenAOSnmTwDelayOutMinFail=adGenAOSnmTwDelayOutMinFail, adGenAOSnmICMPTSSrcIP=adGenAOSnmICMPTSSrcIP, adGenAOSnmICMPTSResponder=adGenAOSnmICMPTSResponder, adGenAOSnmICMPTSIpvNegInSum=adGenAOSnmICMPTSIpvNegInSum, adGenAOSnmICMPTSIpvAbsRtNum=adGenAOSnmICMPTSIpvAbsRtNum, adGenAOSnmTwRemoteSyncState=adGenAOSnmTwRemoteSyncState, adGenAOSnmProbeTable=adGenAOSnmProbeTable, adGenAOSnmICMPTSDelayRtMax=adGenAOSnmICMPTSDelayRtMax, adGenAOSnmICMPTSDelayOutNum=adGenAOSnmICMPTSDelayOutNum, adGenAOSnmReadOnlyCompliance=adGenAOSnmReadOnlyCompliance, adGenAOSnmGroups=adGenAOSnmGroups, adGenAOSnmTwIpdvAbsRtAvgFail=adGenAOSnmTwIpdvAbsRtAvgFail, adGenAOSnmTwHistoryDepth=adGenAOSnmTwHistoryDepth, adGenAOSnmNotificationGroup=adGenAOSnmNotificationGroup, adGenAOSnmICMPTSIpdvAbsInMinFail=adGenAOSnmICMPTSIpdvAbsInMinFail, adGenAOSnmICMPTSIpdvAbsOutAvgFail=adGenAOSnmICMPTSIpdvAbsOutAvgFail, adGenAOSnmICMPTSIpdvAbsRtMaxPass=adGenAOSnmICMPTSIpdvAbsRtMaxPass, adGenAOSnmICMPTSDelayOutMaxFail=adGenAOSnmICMPTSDelayOutMaxFail, adGenAOSnmICMPTSIpvNegOutMin=adGenAOSnmICMPTSIpvNegOutMin, adGenAOSnmTwIpdvAbsRtMaxPass=adGenAOSnmTwIpdvAbsRtMaxPass, adGenAOSnmICMPTSIpvNegInMax=adGenAOSnmICMPTSIpvNegInMax, adGenAOSnmICMPTSResponderStatsGroup=adGenAOSnmICMPTSResponderStatsGroup, adGenAOSnmICMPTSIpvPosInNum=adGenAOSnmICMPTSIpvPosInNum, adGenAOSnmRowStatus=adGenAOSnmRowStatus, adGenAOSnmICMPTSIpdvAbsInMinPass=adGenAOSnmICMPTSIpdvAbsInMinPass, adGenAOSnmICMPTSIpvPosInMax=adGenAOSnmICMPTSIpvPosInMax, adGenAOSnmICMPTSIpdvAbsOutMinFail=adGenAOSnmICMPTSIpdvAbsOutMinFail, adGenAOSnmICMPTSLossRoundTrip=adGenAOSnmICMPTSLossRoundTrip, adGenAOSnmTwIpdvAbsInMaxPass=adGenAOSnmTwIpdvAbsInMaxPass, adGenAOSnmTwIpvPosOutMax=adGenAOSnmTwIpvPosOutMax, adGenAOSnmICMPTSResponderPacketsReceived=adGenAOSnmICMPTSResponderPacketsReceived, adGenAOSnmTwIpdvAbsRtMaxFail=adGenAOSnmTwIpdvAbsRtMaxFail, adGenAOSnmTwIpvAbsOutMin=adGenAOSnmTwIpvAbsOutMin, adGenAOSnmICMPTSStartTime=adGenAOSnmICMPTSStartTime)
