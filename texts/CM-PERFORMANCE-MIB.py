#
# PySNMP MIB module CM-PERFORMANCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/CM-PERFORMANCE-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 09:08:07 2024
# On host fv-az2021-432 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
PerfCounter64, CmPmBinAction, CmPmIntervalType = mibBuilder.importSymbols("CM-COMMON-MIB", "PerfCounter64", "CmPmBinAction", "CmPmIntervalType")
shelfIndex, slotIndex, neIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "shelfIndex", "slotIndex", "neIndex")
cmQosPolicerV2Index, cmFlowEntry, cmFlowIndex, cmQosFlowPolicerTypeIndex, cmEthernetNetPortIndex, cmFlowPointIndex, cmOAMFlowPointIndex, cmQosShaperTypeIndex, f3FpQosShaperIndex, cmAccPortQosShaperIndex, cmEthernetTrafficPortIndex, cmQosShaperV2Index, ocnStmIndex, stsVcPathIndex, cmEthernetAccPortIndex, e3t3Index, f3FpQosPolicerIndex, vtVcPathIndex, e3t3ParentIfIndex, vtVcPathParentIfIndex, e1t1Index, cmTrafficPortQosShaperIndex, cmQosFlowPolicerIndex, e1t1ParentIfIndex, f3AclRuleIndex, cmQosShaperIndex, stsVcPathParentIfIndex, f3NetPortQosShaperIndex = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmQosPolicerV2Index", "cmFlowEntry", "cmFlowIndex", "cmQosFlowPolicerTypeIndex", "cmEthernetNetPortIndex", "cmFlowPointIndex", "cmOAMFlowPointIndex", "cmQosShaperTypeIndex", "f3FpQosShaperIndex", "cmAccPortQosShaperIndex", "cmEthernetTrafficPortIndex", "cmQosShaperV2Index", "ocnStmIndex", "stsVcPathIndex", "cmEthernetAccPortIndex", "e3t3Index", "f3FpQosPolicerIndex", "vtVcPathIndex", "e3t3ParentIfIndex", "vtVcPathParentIfIndex", "e1t1Index", "cmTrafficPortQosShaperIndex", "cmQosFlowPolicerIndex", "e1t1ParentIfIndex", "f3AclRuleIndex", "cmQosShaperIndex", "stsVcPathParentIfIndex", "f3NetPortQosShaperIndex")
f3LagIndex, = mibBuilder.importSymbols("F3-LAG-MIB", "f3LagIndex")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
dot3adAggIndex, = mibBuilder.importSymbols("IEEE8023-LAG-MIB", "dot3adAggIndex")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
iso, Bits, TimeTicks, IpAddress, MibIdentifier, Counter32, NotificationType, Unsigned32, ModuleIdentity, Counter64, ObjectIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Bits", "TimeTicks", "IpAddress", "MibIdentifier", "Counter32", "NotificationType", "Unsigned32", "ModuleIdentity", "Counter64", "ObjectIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32")
TruthValue, VariablePointer, DisplayString, DateAndTime, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "VariablePointer", "DisplayString", "DateAndTime", "TextualConvention")
cmPerformanceMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5))
cmPerformanceMIB.setRevisions(('2021-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cmPerformanceMIB.setRevisionsDescriptions(('\n            Notes from release 202005120000Z,\n              (1) Added cmEthernetTrafficPortStatsRLBC,\n                  cmEthernetTrafficPortStatsROPT,\n                  cmEthernetTrafficPortStatsROPR,\n                  cmEthernetTrafficPortStatsRTemp\n                  columns to cmEthernetTrafficPortStatsTable.\n\n              (2) Added cmEthernetTrafficPortHistoryRLBC,\n                  cmEthernetTrafficPortHistoryROPT,\n                  cmEthernetTrafficPortHistoryROPR,\n                  cmEthernetTrafficPortHistoryRTemp\n                  columns to cmEthernetTrafficPortHistoryTable.\n\n            Notes from release 201711300000Z,\n              (1)Added following objects\n                 cmFlowPointStatsAclDropNoMatch,\n                 cmFlowPointStatsAclRuleDrop,\n                 cmFlowPointHistoryAclDropNoMatch,\n                 cmFlowPointHistoryAclRuleDrop,\n            Notes from release 201711270000Z,\n              (1)Added following objects\n                 cmEthernetTrafficPortStatsDroppedFragmented,\n                 cmEthernetTrafficPortHistoryDroppedFragmented\n            Notes from release 201706120000Z,\n              (1)Added following objects\n                 cmFlowPointStatsEfFramesDiscarded,\n                 cmFlowPointStatsEfBytesDiscarded,\n                 cmFlowPointHistoryEfFramesDiscarded,\n                 cmFlowPointHistoryEfBytesDiscarded\n            Notes from release 201307220000Z,\n              (1)Added following objects\n                 cmEthernetAccPortStatsIBRMaxRx,\n                 cmEthernetAccPortStatsIBRMaxTx,\n                 cmEthernetAccPortStatsIBRMinRx,\n                 cmEthernetAccPortStatsIBRMinTx,\n                 cmEthernetAccPortStatsIBRRx,\n                 cmEthernetAccPortStatsIBRTx,\n                 cmEthernetAccPortHistoryIBRMaxRx,\n                 cmEthernetAccPortHistoryIBRMaxTx,\n                 cmEthernetAccPortHistoryIBRMinRx,\n                 cmEthernetAccPortHistoryIBRMinTx,\n                 cmEthernetAccPortHistoryIBRRx,\n                 cmEthernetAccPortHistoryIBRTx,\n                 cmEthernetNetPortStatsIBRMaxRx,\n                 cmEthernetNetPortStatsIBRMaxTx,\n                 cmEthernetNetPortStatsIBRMinRx,\n                 cmEthernetNetPortStatsIBRMinTx,\n                 cmEthernetNetPortStatsIBRRx,\n                 cmEthernetNetPortStatsIBRTx,\n                 cmEthernetNetPortHistoryIBRMaxRx,\n                 cmEthernetNetPortHistoryIBRMaxTx,\n                 cmEthernetNetPortHistoryIBRMinRx,\n                 cmEthernetNetPortHistoryIBRMinTx,\n                 cmEthernetNetPortHistoryIBRRx,\n                 cmEthernetNetPortHistoryIBRTx,\n                 cmFlowStatsIBRA2NMax,\n                 cmFlowStatsIBRRlA2NMax,\n                 cmFlowStatsIBRA2NMin,\n                 cmFlowStatsIBRRlA2NMin,\n                 cmFlowStatsIBRA2N,\n                 cmFlowStatsIBRRlA2N,\n                 cmFlowStatsIBRN2AMax,\n                 cmFlowStatsIBRRlN2AMax,\n                 cmFlowStatsIBRN2AMin,\n                 cmFlowStatsIBRRlN2AMin,\n                 cmFlowStatsIBRN2A,\n                 cmFlowStatsIBRRlN2A,\n                 cmFlowHistoryIBRA2NMax,\n                 cmFlowHistoryIBRRlA2NMax,\n                 cmFlowHistoryIBRA2NMin,\n                 cmFlowHistoryIBRRlA2NMin,\n                 cmFlowHistoryIBRA2N,\n                 cmFlowHistoryIBRRlA2N,\n                 cmFlowHistoryIBRN2AMax,\n                 cmFlowHistoryIBRRlN2AMax,\n                 cmFlowHistoryIBRN2AMin,\n                 cmFlowHistoryIBRRlN2AMin,\n                 cmFlowHistoryIBRN2A,\n                 cmFlowHistoryIBRRlN2A\n                 \n            Notes from release 201205180000Z,\n              (1)Added following L2PT objects \n                 cmEthernetAccPortStatsL2PTRxFramesEncap, cmEthernetAccPortStatsL2PTTxFramesDecap,\n                 cmEthernetAccPortHistoryL2PTRxFramesEncap,\n                 cmEthernetAccPortHistoryL2PTTxFramesDecap,\n                 cmEthernetNetPortStatsL2PTRxFramesEncap,\n                 cmEthernetNetPortStatsL2PTTxFramesDecap, \n                 cmEthernetNetPortHistoryL2PTRxFramesEncap,\n                 cmEthernetNetPortHistoryL2PTTxFramesDecap\n            Notes from release 201108010000Z,\n              (1)Post EG-X merge\n\n            Notes from release 201107080000Z,\n              (1)Moved CmPmIntervalType to fsp150cm-common.mib\n\n            Notes from release 201105270000Z,\n           -Formalized the OBJECT-GROUP definitions\n\n             Notes from release 201101240000Z,\n             (1)FMYD is now deprecated from Flow and Policer PM\n             (2)ESUP description indicates Undersize Packets\n             (3)Added the following MIB objects, \n                cmQosShaperStatsBREDD, cmQosShaperStatsFREDD,\n                cmQosShaperHistoryBREDD, cmQosShaperHistoryFREDD,\n                cmAccPortQosShaperStatsBREDD, cmAccPortQosShaperStatsFREDD,\n                cmAccPortQosShaperHistoryBREDD, cmAccPortQosShaperHistoryFREDD,\n\n             Notes from release 200803190000Z,\n             (1)MIB version ready for release FSP150CC GE101 and GE206,\n                (a)Following SNMP tables are new,\n                    cmQosFlowPolicerStatsTable, cmQosFlowPolicerHistoryTable,\n                    cmQosFlowPolicerThresholdTable, \n                    cmAccPortQosShaperStatsTable, cmAccPortQosShaperHistoryTable,\n                    cmAccPortQosShaperThresholdTable \n                    \n                (b)Following SNMP objects are added,\n                    cmEthernetAccPortStatsTemp, cmEthernetAccPortStatsUAS,\n                    cmEthernetAccPortHistoryTemp, cmEthernetAccPortHistoryUAS,\n\n                    cmEthernetNetPortStatsTemp, cmEthernetNetPortStatsUAS,\n                    cmEthernetNetPortHistoryTemp, cmEthernetNetPortHistoryUAS,\n\n                    cmFlowStatsUAS, cmFlowStatsES, cmFlowStatsSES,\n                    cmFlowStatsFMGA2N, cmFlowStatsFMYA2N, cmFlowStatsFMYDA2N,\n                    cmFlowStatsFMRDA2N, cmFlowStatsBytesInA2N,\n                    cmFlowStatsBytesOutA2N, cmFlowStatsFMGN2A,\n                    cmFlowStatsFMYN2A, cmFlowStatsFMYDN2A,\n                    cmFlowStatsFMRDN2A, cmFlowStatsBytesInN2A,\n                    cmFlowStatsBytesOutN2A, cmFlowStatsFTDA2N,\n\n                    cmFlowHistoryUAS, cmFlowHistoryES, cmFlowHistorySES,\n                    cmFlowHistoryFMGA2N, cmFlowHistoryFMYA2N, \n                    cmFlowHistoryFMYDA2N,\n                    cmFlowHistoryFMRDA2N, cmFlowHistoryBytesInA2N,\n                    cmFlowHistoryBytesOutA2N, cmFlowHistoryFMGN2A,\n                    cmFlowHistoryFMYN2A, cmFlowHistoryFMYDN2A,\n                    cmFlowHistoryFMRDN2A, cmFlowHistoryBytesInN2A,\n                    cmFlowHistoryBytesOutN2A, cmFlowHistoryFTDA2N,\n\n                 (c)Following notifications are added,\n                    cmQosFlowPolicerThresholdCrossingAlert,\n                    cmAccPortQosShaperThresholdCrossingAlert\n                 (d)Following notifications are added for CM5.1\n                    cmEthernetTrafficPortThresholdCrossingAlert\n                    cmFlowPointThresholdCrossingAlert\n                    cmQosPolicerV2ThresholdCrossingAlert\n                    cmQosShaperV2ThresholdCrossingAlert\n             Notes from release 200803030000Z,\n             (1)MIB version ready for release FSP150CM 3.1.',))
if mibBuilder.loadTexts: cmPerformanceMIB.setLastUpdated('202101270000Z')
if mibBuilder.loadTexts: cmPerformanceMIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: cmPerformanceMIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: cmPerformanceMIB.setDescription('This module defines the Performance Monitoring MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA.')
cmPerfObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1))
cmPerfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2))
cmPerfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3))
cmEthernetAccPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1), )
if mibBuilder.loadTexts: cmEthernetAccPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsTable.setDescription('A collection of Ethernet Access Port related statistics.  \n             These reflect the current data.')
cmEthernetAccPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsEntry.setDescription('A conceptual row in the cmEthernetAccPortStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmEthernetAccPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Access Port statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmEthernetAccPortStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmEthernetAccPortStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsValid.setDescription('Indicates the validity of the bin.')
cmEthernetAccPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetAccPortStatsESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBF.setDescription('Broadcast frames sent in N2A direction.')
cmEthernetAccPortStatsESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBP.setDescription('Broadcast frames received in A2N direction.')
cmEthernetAccPortStatsESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESBS.setDescription('Bytes sent in N2A direction.')
cmEthernetAccPortStatsESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESC.setDescription('Collisions detected in A2N direction.')
cmEthernetAccPortStatsESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESCAE.setDescription('CRC Aligned Errors detected in the A2N direction.')
cmEthernetAccPortStatsESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESDE.setDescription('Drop Events detected.')
cmEthernetAccPortStatsESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESF.setDescription('Fragments detected in the A2N direction.')
cmEthernetAccPortStatsESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESFS.setDescription('Frames sent in the N2A direction.')
cmEthernetAccPortStatsESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESJ.setDescription('Jabbers detected in the A2N direction.')
cmEthernetAccPortStatsESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESMF.setDescription('Multicast Frames sent in the N2A direction.')
cmEthernetAccPortStatsESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESMP.setDescription('Multicast Packets received in the A2N direction.')
cmEthernetAccPortStatsESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESO.setDescription('Octets received in the A2N direction.')
cmEthernetAccPortStatsESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESOF.setDescription('Oversize Frames detected and dropped in the A2N direction.')
cmEthernetAccPortStatsESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESOP.setDescription('Oversize Packets received in the A2N direction.')
cmEthernetAccPortStatsESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP.setDescription('Packets received in the A2N direction.')
cmEthernetAccPortStatsESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP64.setDescription('64 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP65.setDescription('65 to 127 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP128.setDescription('128 to 255 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP256.setDescription('256 to 511 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP512.setDescription('512 to 1023 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP1024.setDescription('1024 to 1518 Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESP1519.setDescription('1519 to Max MTU Octet Frames received in the A2N direction.')
cmEthernetAccPortStatsESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESUF.setDescription('Unicast Frames sent in the N2A direction.')
cmEthernetAccPortStatsESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsESUP.setDescription('Undersize Packets received in the A2N direction.')
cmEthernetAccPortStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in the A2N direction.')
cmEthernetAccPortStatsL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed in the A2N direction.')
cmEthernetAccPortStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortStatsLES.setDescription('Line Errored Seconds detected in the A2N direction.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetAccPortStatsLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortStatsOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortStatsOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortStatsAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD) in the A2N direction.')
cmEthernetAccPortStatsAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD) in the A2N direction.')
cmEthernetAccPortStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsABRRx.setDescription('The average bit rate in the A2N direction.')
cmEthernetAccPortStatsABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsABRTx.setDescription('The average bit rate in the N2A direction.')
cmEthernetAccPortStatsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetAccPortStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsUAS.setDescription('Number of Unavailable Seconds on the Port.')
cmEthernetAccPortStatsL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetAccPortStatsL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetAccPortStatsIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetAccPortStatsIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetAccPortStatsIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetAccPortStatsIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetAccPortStatsIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetAccPortStatsIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetAccPortStatsFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsFmcd.setDescription('The frame of multicast drop.')
cmEthernetAccPortStatsFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsFbcd.setDescription('The frame of broadcast drop.')
cmEthernetAccPortStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to no acl rule match.')
cmEthernetAccPortStatsAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetAccPortStatsDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetAccPortStatsLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 1, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortStatsLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortStatsLkupFails.setDescription('Membership lookup fail counts.')
cmEthernetAccPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2), )
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTable.setDescription('A collection of Ethernet Access Port related statistics.  \n             These reflect the history data.')
cmEthernetAccPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryEntry.setDescription('A conceptual row in the cmEthernetAccPortHistoryTable.\n             Entries exist in this table for each Ethernet Access port.')
cmEthernetAccPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Access Port statistics entry.')
cmEthernetAccPortHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTime.setDescription('Indicates the time of history bin creation.')
cmEthernetAccPortHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryValid.setDescription('Indicates the validity of the bin.')
cmEthernetAccPortHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetAccPortHistoryESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBF.setDescription('Broadcast frames sent in N2A direction.')
cmEthernetAccPortHistoryESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBP.setDescription('Broadcast frames received in A2N direction.')
cmEthernetAccPortHistoryESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESBS.setDescription('Bytes sent in N2A direction.')
cmEthernetAccPortHistoryESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESC.setDescription('Collisions detected in A2N direction.')
cmEthernetAccPortHistoryESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESCAE.setDescription('CRC Aligned Errors detected in the A2N direction.')
cmEthernetAccPortHistoryESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESDE.setDescription('Drop Events detected.')
cmEthernetAccPortHistoryESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESF.setDescription('Fragments detected in the A2N direction.')
cmEthernetAccPortHistoryESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESFS.setDescription('Frames sent in the N2A direction.')
cmEthernetAccPortHistoryESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESJ.setDescription('Jabbers detected in the A2N direction.')
cmEthernetAccPortHistoryESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESMF.setDescription('Multicast Frames sent in the N2A direction.')
cmEthernetAccPortHistoryESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESMP.setDescription('Multicast Packets received in the A2N direction.')
cmEthernetAccPortHistoryESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESO.setDescription('Octets received in the A2N direction.')
cmEthernetAccPortHistoryESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESOF.setDescription('Oversize Frames detected and dropped in the A2N direction.')
cmEthernetAccPortHistoryESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESOP.setDescription('Oversize Packets received in the A2N direction.')
cmEthernetAccPortHistoryESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP.setDescription('Packets received in the A2N direction.')
cmEthernetAccPortHistoryESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP64.setDescription('64 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP65.setDescription('65 to 127 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP128.setDescription('128 to 255 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP256.setDescription('256 to 511 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP512.setDescription('512 to 1023 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP1024.setDescription('1024 to 1518 Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESP1519.setDescription('1519 to Max MTU Octet Frames received in the A2N direction.')
cmEthernetAccPortHistoryESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESUF.setDescription('Unicast Frames sent in the N2A direction.')
cmEthernetAccPortHistoryESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryESUP.setDescription('Undersize Packets received in the A2N direction.')
cmEthernetAccPortHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in the A2N direction.')
cmEthernetAccPortHistoryL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed in the A2N direction.')
cmEthernetAccPortHistoryLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLES.setDescription('Line Errored Seconds detected in the A2N direction.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetAccPortHistoryLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortHistoryOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortHistoryOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Access Port is fiber.')
cmEthernetAccPortHistoryAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD) in the A2N direction.')
cmEthernetAccPortHistoryAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD) in the A2N direction.')
cmEthernetAccPortHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryABRRx.setDescription('The average bit rate in the A2N direction.')
cmEthernetAccPortHistoryABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryABRTx.setDescription('The average bit rate in the N2A direction.')
cmEthernetAccPortHistoryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetAccPortHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryUAS.setDescription('Number of Unavailable Seconds on the Port.')
cmEthernetAccPortHistoryL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetAccPortHistoryL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetAccPortHistoryIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetAccPortHistoryIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetAccPortHistoryIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetAccPortHistoryIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetAccPortHistoryIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetAccPortHistoryIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetAccPortHistoryFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryFmcd.setDescription('Frame of multicast drop')
cmEthernetAccPortHistoryFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryFbcd.setDescription('Frame of broadcast drop.')
cmEthernetAccPortHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to acl no match.')
cmEthernetAccPortHistoryAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetAccPortHistoryDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetAccPortHistoryLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 2, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortHistoryLkupFails.setDescription('Membership lookup fail counts.')
cmEthernetAccPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3), )
if mibBuilder.loadTexts: cmEthernetAccPortThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdTable.setDescription('A table of entries that allow manageability of Ethernet\n             Access Port Thresholds.')
cmEthernetAccPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdEntry.setDescription('A conceptual row in the cmEthernetAccPortThresholdTable.')
cmEthernetAccPortThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmEthernetAccPortThresholdTable.')
cmEthernetAccPortThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmEthernetAccPortThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmEthernetAccPortThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdValueLo.setDescription("Lower 32 bits of the threshold value.  \n         Please note that in case of \n         cmEthernetAccPortStatsOPR, cmEthernetAccPortStatsOPT and cmEthernetAccPortStatsTEMP, \n         the values are 2's complement, since these could have negative values.")
cmEthernetAccPortThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdValueHi.setDescription("Higher 32 bits of the threshold value.  Please note that in case of \n         cmEthernetAccPortStatsOPR, cmEthernetAccPortStatsOPT and cmEthernetAccPortStatsTEMP, \n         the values are 2's complement, since these could have negative values.")
cmEthernetAccPortThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdMonValue.setDescription("Monitored value corresponding to cmEthernetAccPortThresholdVariable.\n         Please note that in case of cmEthernetAccPortStatsOPR, cmEthernetAccPortStatsOPT \n         and cmEthernetAccPortStatsTEMP, the values are 2's complement, since these could be \n         negative values.")
cmEthernetAccPortThresholdVarTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 4), )
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarTable.setDescription('A table of entries that allow manageability of Ethernet\n             Access Port Threshold variances.')
cmEthernetAccPortThresholdVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarEntry.setDescription('A conceptual row in the cmEthernetAccPortThresholdTable.')
cmEthernetAccPortThresholdVarOprVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 4, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarOprVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarOprVariance.setDescription('Variance in the Optical Power Received (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmEthernetAccPortThresholdVarOptVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarOptVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdVarOptVariance.setDescription('Variance in the Optical Power Transmitted (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmEthernetNetPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5), )
if mibBuilder.loadTexts: cmEthernetNetPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsTable.setDescription('A collection of Ethernet Network Port related statistics.  \n             These reflect the current data.')
cmEthernetNetPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsEntry.setDescription('A conceptual row in the cmEthernetNetPortStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmEthernetNetPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Network Port statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmEthernetNetPortStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmEthernetNetPortStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsValid.setDescription('Indicates the validity of the bin.')
cmEthernetNetPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetNetPortStatsESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBF.setDescription('Broadcast frames sent in A2N direction.')
cmEthernetNetPortStatsESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBP.setDescription('Broadcast frames received in N2A direction.')
cmEthernetNetPortStatsESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESBS.setDescription('Bytes sent in A2N direction.')
cmEthernetNetPortStatsESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESC.setDescription('Collisions detected in N2A direction.')
cmEthernetNetPortStatsESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESCAE.setDescription('CRC Aligned Errors detected in the N2A direction.')
cmEthernetNetPortStatsESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESDE.setDescription('Drop Events detected.')
cmEthernetNetPortStatsESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESF.setDescription('Fragments detected in the N2A direction.')
cmEthernetNetPortStatsESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESFS.setDescription('Frames sent in the A2N direction.')
cmEthernetNetPortStatsESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESJ.setDescription('Jabbers detected in the N2A direction.')
cmEthernetNetPortStatsESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESMF.setDescription('Multicast Frames sent in the A2N direction.')
cmEthernetNetPortStatsESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESMP.setDescription('Multicast Packets received in the N2A direction.')
cmEthernetNetPortStatsESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESO.setDescription('Octets received in the N2A direction.')
cmEthernetNetPortStatsESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESOF.setDescription('Oversize Frames detected and dropped in the N2A direction.')
cmEthernetNetPortStatsESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESOP.setDescription('Oversize Packets received in the N2A direction.')
cmEthernetNetPortStatsESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP.setDescription('Packets received in the N2A direction.')
cmEthernetNetPortStatsESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP64.setDescription('64 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP65.setDescription('65 to 127 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP128.setDescription('128 to 255 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP256.setDescription('256 to 511 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP512.setDescription('512 to 1023 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP1024.setDescription('1024 to 1518 Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESP1519.setDescription('1519 to Max MTU Octet Frames received in the N2A direction.')
cmEthernetNetPortStatsESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESUF.setDescription('Unicast Frames sent in the A2N direction.')
cmEthernetNetPortStatsESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsESUP.setDescription('Undersize Packets received in the N2A direction.')
cmEthernetNetPortStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in the N2A direction.')
cmEthernetNetPortStatsL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed in the N2A direction.')
cmEthernetNetPortStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortStatsLES.setDescription('Line Errored Seconds detected in the N2A direction.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetNetPortStatsLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortStatsOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortStatsOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortStatsAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD) in the N2A direction. This counter is not applicable\n          for GE206.')
cmEthernetNetPortStatsAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD) in the N2A direction. This counter is not applicable\n          for GE206.')
cmEthernetNetPortStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsABRRx.setDescription('The average bit rate in the N2A direction.')
cmEthernetNetPortStatsABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsABRTx.setDescription('The average bit rate in the A2N direction.')
cmEthernetNetPortStatsPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsPSC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsPSC.setDescription('The Protection Switch Counts on the port .')
cmEthernetNetPortStatsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetNetPortStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsUAS.setDescription('Number of Unavailable Seconds on the Port.')
cmEthernetNetPortStatsL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetNetPortStatsL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetNetPortStatsIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetNetPortStatsIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetNetPortStatsIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetNetPortStatsIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetNetPortStatsIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetNetPortStatsIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetNetPortStatsFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsFmcd.setDescription('Frame of multicast drop.')
cmEthernetNetPortStatsFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsFbcd.setDescription('Frame of broadcast drop')
cmEthernetNetPortStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to acl no match.')
cmEthernetNetPortStatsAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetNetPortStatsDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetNetPortStatsLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 5, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsLkupFails.setDescription('Membership lookup fail counts.')
cmEthernetNetPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6), )
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTable.setDescription('A collection of Ethernet Network Port related statistics.  \n             These reflect the history data.')
cmEthernetNetPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryEntry.setDescription('A conceptual row in the cmEthernetNetPortHistoryTable.\n             Entries exist in this table for each Ethernet Network port.')
cmEthernetNetPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Network Port statistics entry.')
cmEthernetNetPortHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTime.setDescription('Indicates the time of history bin creation.')
cmEthernetNetPortHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryValid.setDescription('Indicates the validity of the bin.')
cmEthernetNetPortHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetNetPortHistoryESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBF.setDescription('Broadcast frames sent in A2N direction.')
cmEthernetNetPortHistoryESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBP.setDescription('Broadcast frames received in N2A direction.')
cmEthernetNetPortHistoryESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESBS.setDescription('Bytes sent in A2N direction.')
cmEthernetNetPortHistoryESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESC.setDescription('Collisions detected in N2A direction.')
cmEthernetNetPortHistoryESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESCAE.setDescription('CRC Aligned Errors detected in the N2A direction.')
cmEthernetNetPortHistoryESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESDE.setDescription('Drop Events detected.')
cmEthernetNetPortHistoryESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESF.setDescription('Fragments detected in the N2A direction.')
cmEthernetNetPortHistoryESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESFS.setDescription('Frames sent in the A2N direction.')
cmEthernetNetPortHistoryESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESJ.setDescription('Jabbers detected in the N2A direction.')
cmEthernetNetPortHistoryESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESMF.setDescription('Multicast Frames sent in the A2N direction.')
cmEthernetNetPortHistoryESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESMP.setDescription('Multicast Packets received in the N2A direction.')
cmEthernetNetPortHistoryESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESO.setDescription('Octets received in the N2A direction.')
cmEthernetNetPortHistoryESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESOF.setDescription('Oversize Frames detected and dropped in the N2A direction.')
cmEthernetNetPortHistoryESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESOP.setDescription('Oversize Packets received in the N2A direction.')
cmEthernetNetPortHistoryESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP.setDescription('Packets received in the N2A direction.')
cmEthernetNetPortHistoryESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP64.setDescription('64 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP65.setDescription('65 to 127 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP128.setDescription('128 to 255 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP256.setDescription('256 to 511 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP512.setDescription('512 to 1023 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP1024.setDescription('1024 to 1518 Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESP1519.setDescription('1519 to Max MTU Octet Frames received in the N2A direction.')
cmEthernetNetPortHistoryESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESUF.setDescription('Unicast Frames sent in the N2A direction.')
cmEthernetNetPortHistoryESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryESUP.setDescription('Undersize Packets received in the N2A direction.')
cmEthernetNetPortHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in the N2A direction.')
cmEthernetNetPortHistoryL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed in the N2A direction.')
cmEthernetNetPortHistoryLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLES.setDescription('Line Errored Seconds detected in the N2A direction.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetNetPortHistoryLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortHistoryOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortHistoryOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Network Port is fiber.')
cmEthernetNetPortHistoryAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD) in the N2A direction. This counter is not applicable\n          for GE206.')
cmEthernetNetPortHistoryAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD) in the N2A direction. This counter is not applicable\n          for GE206.')
cmEthernetNetPortHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryABRRx.setDescription('The average bit rate in the N2A direction.')
cmEthernetNetPortHistoryABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryABRTx.setDescription('The average bit rate in the A2N direction.')
cmEthernetNetPortHistoryPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryPSC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryPSC.setDescription('The Protection Switch Counts on the port .')
cmEthernetNetPortHistoryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetNetPortHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryUAS.setDescription('Number of Unavailable Seconds on the Port.')
cmEthernetNetPortHistoryL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetNetPortHistoryL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetNetPortHistoryIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetNetPortHistoryIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetNetPortHistoryIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetNetPortHistoryIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetNetPortHistoryIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetNetPortHistoryIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetNetPortHistoryFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryFmcd.setDescription('Frame of multicast drop.')
cmEthernetNetPortHistoryFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryFbcd.setDescription('Frame of broadcast drop.')
cmEthernetNetPortHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to acl no match.')
cmEthernetNetPortHistoryAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetNetPortHistoryDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetNetPortHistoryLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 6, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryLkupFails.setDescription('Membership lookup fail counts.')
cmEthernetNetPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7), )
if mibBuilder.loadTexts: cmEthernetNetPortThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdTable.setDescription('A table of entries that allow manageability of Ethernet\n             Network Port Thresholds.')
cmEthernetNetPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdEntry.setDescription('A conceptual row in the cmEthernetNetPortThresholdTable.')
cmEthernetNetPortThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmEthernetNetPortThresholdTable.')
cmEthernetNetPortThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmEthernetNetPortThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmEthernetNetPortThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdValueLo.setDescription("Lower 32 bits of the threshold value.  Please note that in case of \n         cmEthernetNetPortStatsOPR, cmEthernetNetPortStatsOPT and cmEthernetNetPortStatsTEMP, \n         the values are 2's complement, since these could have negative values.")
cmEthernetNetPortThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdValueHi.setDescription("Higher 32 bits of the threshold value.  Please note that in case of \n         cmEthernetNetPortStatsOPR, cmEthernetNetPortStatsOPT and cmEthernetNetPortStatsTEMP, \n         the values are 2's complement, since these could have negative values.")
cmEthernetNetPortThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 7, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdMonValue.setDescription("Monitored value corresponding to cmEthernetNetPortThresholdVariable. \n         Please note that in case of cmEthernetNetPortStatsOPR, cmEthernetNetPortStatsOPT \n         and cmEthernetNetPortStatsTEMP, the values are 2's complement, since these could be \n         negative values.")
cmEthernetNetPortThresholdVarTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 8), )
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarTable.setDescription('A table of entries that allow manageability of Ethernet\n             Network Port Threshold variances.')
cmEthernetNetPortThresholdVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarEntry.setDescription('A conceptual row in the cmEthernetNetPortThresholdTable.')
cmEthernetNetPortThresholdVarOprVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 8, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarOprVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarOprVariance.setDescription('Variance in the Optical Power Received (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmEthernetNetPortThresholdVarOptVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 8, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarOptVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdVarOptVariance.setDescription('Variance in the Optical Power Transmitted (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmFlowStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9), )
if mibBuilder.loadTexts: cmFlowStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsTable.setDescription('A collection of EVC statistics.  \n             These reflect the current data.')
cmFlowStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowStatsIndex"))
if mibBuilder.loadTexts: cmFlowStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsEntry.setDescription('A conceptual row in the cmFlowStatsTable.\n             Entries exist in this table for each EVC.')
cmFlowStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Flow statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmFlowStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmFlowStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsValid.setDescription('Indicates the validity of the bin.')
cmFlowStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsAction.setDescription('Allows the Manager to clear the bin.')
cmFlowStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in both A2N and N2A directions.')
cmFlowStatsABRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsABRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsABRA2N.setDescription('The average bit rate in the A2N direction.')
cmFlowStatsABRRLA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsABRRLA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsABRRLA2N.setDescription('The average bit rate, rate limited in the A2N direction.')
cmFlowStatsABRRLRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsABRRLRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsABRRLRA2N.setDescription('The average bit rate,rate limited (replicated) in the A2N direction.')
cmFlowStatsABRN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsABRN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsABRN2A.setDescription('The average bit rate in the N2A direction.')
cmFlowStatsABRRLN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsABRRLN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsABRRLN2A.setDescription('The average bit rate, rate limited in the N2A direction.')
cmFlowStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsUAS.setDescription('The number of Unavailable Seconds (UAS) on the flow.')
cmFlowStatsES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsES.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsES.setDescription('The number of Errored Seconds (ES) on the flow.')
cmFlowStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsSES.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsSES.setDescription('The number of Severely Errored Seconds (ES) on the flow.')
cmFlowStatsFMGA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMGA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMGA2N.setDescription('The number of Frames Marked Green in A2N direction on the flow.')
cmFlowStatsFMYA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMYA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMYA2N.setDescription('The number of Frames Marked Yellow in A2N direction on the flow.')
cmFlowStatsFMYDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMYDA2N.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowStatsFMYDA2N.setDescription('The number of Frames Marked Yellow and Discarded in A2N direction \n          on the flow.')
cmFlowStatsFMRDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMRDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMRDA2N.setDescription('The number of Frames Marked Red and Discarded in A2N direction \n          on the flow.')
cmFlowStatsBytesInA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsBytesInA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsBytesInA2N.setDescription('The number of Bytes received on the Flow in A2N direction.')
cmFlowStatsBytesOutA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsBytesOutA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsBytesOutA2N.setDescription('The number of Bytes transmitted on the Flow in A2N direction.')
cmFlowStatsFMGN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMGN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMGN2A.setDescription('The number of Frames Marked Green in N2A direction on the flow.')
cmFlowStatsFMYN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMYN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMYN2A.setDescription('The number of Frames Marked Yellow in N2A direction on the flow.')
cmFlowStatsFMYDN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMYDN2A.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowStatsFMYDN2A.setDescription('The number of Frames Marked Yellow and Discarded in N2A direction \n          on the flow.')
cmFlowStatsFMRDN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMRDN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMRDN2A.setDescription('The number of Frames Marked Red and Discarded in N2A direction \n          on the flow.')
cmFlowStatsBytesInN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsBytesInN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsBytesInN2A.setDescription('The number of Bytes received on the Flow in N2A direction.')
cmFlowStatsBytesOutN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsBytesOutN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsBytesOutN2A.setDescription('The number of Bytes transmitted on the Flow in N2A direction.')
cmFlowStatsFTDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFTDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFTDA2N.setDescription('The number of Bytes FTD in the A2N direction.')
cmFlowStatsIBRA2NMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRA2NMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRA2NMax.setDescription("Maximum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in any 1-sec within a PM interval.")
cmFlowStatsIBRRlA2NMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2NMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2NMax.setDescription("Maximum 'bits received' after rate limiting\n          (sum of 'Bytes Out' for all policers * 8) for the Flow on the \n          Access Port in any 1-sec within a PM interval.")
cmFlowStatsIBRA2NMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRA2NMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRA2NMin.setDescription("Minimum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in any 1-sec within a PM interval.")
cmFlowStatsIBRRlA2NMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2NMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2NMin.setDescription("Minimum 'bits received' after rate limiting\n          (sum of 'Bytes Out' for all policers * 8) for the Flow on the \n          Access Port in any 1-sec within a PM interval.")
cmFlowStatsIBRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRA2N.setDescription("'Bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in the most recent 1-sec.")
cmFlowStatsIBRRlA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlA2N.setDescription("'Bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Access Port in the most recent 1-sec.")
cmFlowStatsIBRN2AMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRN2AMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRN2AMax.setDescription("Maximum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowStatsIBRRlN2AMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2AMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2AMax.setDescription("Maximum 'bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowStatsIBRN2AMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRN2AMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRN2AMin.setDescription("Minimum 'bits received' (sum of 'Bytes In' for all policers * 8)\n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowStatsIBRRlN2AMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2AMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2AMin.setDescription("Minimum 'bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8) \n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowStatsIBRN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRN2A.setDescription("'Bits received' (sum of 'Bytes In' for all policers * 8)\n          for the Flow on the Network Port in the most recent 1-sec.")
cmFlowStatsIBRRlN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsIBRRlN2A.setDescription("'Bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Network Port in the most recent 1-sec.")
cmFlowStatsFMCDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFMCDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFMCDA2N.setDescription('Number of multicast frames dropped in A2N direction.')
cmFlowStatsFBCDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsFBCDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsFBCDA2N.setDescription('Number of broadcast frames dropped in A2N direction.')
cmFlowStatsACLN2ADrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsACLN2ADrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsACLN2ADrop.setDescription('The number of Frame droped due to n2a direction ACL rule.')
cmFlowStatsACLA2NDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 9, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowStatsACLA2NDrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowStatsACLA2NDrop.setDescription('The number of Frame droped due to a2n direction ACL rule.')
cmFlowHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10), )
if mibBuilder.loadTexts: cmFlowHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryTable.setDescription('A collection of EVC statistics.  These reflect the history data.')
cmFlowHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowHistoryIndex"))
if mibBuilder.loadTexts: cmFlowHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryEntry.setDescription('A conceptual row in the cmFlowHistoryTable.\n             Entries exist in this table for each EVC.')
cmFlowHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Flow statistics entry.')
cmFlowHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryTime.setDescription('Time of history interval.')
cmFlowHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryValid.setDescription('Indicates the validity of the bin.')
cmFlowHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmFlowHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded in both A2N and N2A directions.')
cmFlowHistoryABRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryABRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryABRA2N.setDescription('The average bit rate in the A2N direction.')
cmFlowHistoryABRRLA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryABRRLA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryABRRLA2N.setDescription('The average bit rate, rate limited in the A2N direction.')
cmFlowHistoryABRRLRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryABRRLRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryABRRLRA2N.setDescription('The average bit rate,rate limited (replicated) in the A2N direction.')
cmFlowHistoryABRN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryABRN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryABRN2A.setDescription('The average bit rate in the N2A direction.')
cmFlowHistoryABRRLN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryABRRLN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryABRRLN2A.setDescription('The average bit rate, rate limited in the N2A direction.')
cmFlowHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryUAS.setDescription('The number of Unavailable Seconds (UAS) on the flow.')
cmFlowHistoryES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryES.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryES.setDescription('The number of Errored Seconds (ES) on the flow.')
cmFlowHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistorySES.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistorySES.setDescription('The number of Severely Errored Seconds (ES) on the flow.')
cmFlowHistoryFMGA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMGA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMGA2N.setDescription('The number of Frames Marked Green in A2N direction on the flow.')
cmFlowHistoryFMYA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMYA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMYA2N.setDescription('The number of Frames Marked Yellow in A2N direction on the flow.')
cmFlowHistoryFMYDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMYDA2N.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowHistoryFMYDA2N.setDescription('The number of Frames Marked Yellow and Discarded in A2N direction \n          on the flow.')
cmFlowHistoryFMRDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMRDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMRDA2N.setDescription('The number of Frames Marked Red and Discarded in A2N direction \n          on the flow.')
cmFlowHistoryBytesInA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryBytesInA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryBytesInA2N.setDescription('The number of Bytes received on the Flow in A2N direction.')
cmFlowHistoryBytesOutA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryBytesOutA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryBytesOutA2N.setDescription('The number of Bytes transmitted on the Flow in A2N direction.')
cmFlowHistoryFMGN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMGN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMGN2A.setDescription('The number of Frames Marked Green in N2A direction on the flow.')
cmFlowHistoryFMYN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMYN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMYN2A.setDescription('The number of Frames Marked Yellow in N2A direction on the flow.')
cmFlowHistoryFMYDN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMYDN2A.setStatus('deprecated')
if mibBuilder.loadTexts: cmFlowHistoryFMYDN2A.setDescription('The number of Frames Marked Yellow and Discarded in N2A direction \n          on the flow.')
cmFlowHistoryFMRDN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMRDN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMRDN2A.setDescription('The number of Frames Marked Red and Discarded in N2A direction \n          on the flow.')
cmFlowHistoryBytesInN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryBytesInN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryBytesInN2A.setDescription('The number of Bytes received on the Flow in N2A direction.')
cmFlowHistoryBytesOutN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryBytesOutN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryBytesOutN2A.setDescription('The number of Bytes transmitted on the Flow in N2A direction.')
cmFlowHistoryFTDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFTDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFTDA2N.setDescription('The number of Bytes FTD in the A2N direction.')
cmFlowHistoryIBRA2NMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRA2NMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRA2NMax.setDescription("Maximum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRRlA2NMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2NMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2NMax.setDescription("Maximum 'bits received' after rate limiting\n          (sum of 'Bytes Out' for all policers * 8) for the Flow on the \n          Access Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRA2NMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRA2NMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRA2NMin.setDescription("Minimum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRRlA2NMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2NMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2NMin.setDescription("Minimum 'bits received' after rate limiting\n          (sum of 'Bytes Out' for all policers * 8) for the Flow on the \n          Access Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRA2N.setDescription("'Bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Access Port in the most recent 1-sec.")
cmFlowHistoryIBRRlA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlA2N.setDescription("'Bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Access Port in the most recent 1-sec.")
cmFlowHistoryIBRN2AMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRN2AMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRN2AMax.setDescription("Maximum 'bits received' (sum of 'Bytes In' for all policers * 8) \n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRRlN2AMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2AMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2AMax.setDescription("Maximum 'bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRN2AMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRN2AMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRN2AMin.setDescription("Minimum 'bits received' (sum of 'Bytes In' for all policers * 8)\n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRRlN2AMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2AMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2AMin.setDescription("Minimum 'bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8) \n          for the Flow on the Network Port in any 1-sec within a PM interval.")
cmFlowHistoryIBRN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRN2A.setDescription("'Bits received' (sum of 'Bytes In' for all policers * 8)\n          for the Flow on the Network Port in the most recent 1-sec.")
cmFlowHistoryIBRRlN2A = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2A.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryIBRRlN2A.setDescription("'Bits received' after rate limiting (sum of 'Bytes Out' for all policers * 8)\n          for the Flow on the Network Port in the most recent 1-sec.")
cmFlowHistoryFMCDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFMCDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFMCDA2N.setDescription('Number of multicast frames dropped in A2N direction.')
cmFlowHistoryFBCDA2N = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryFBCDA2N.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryFBCDA2N.setDescription('Number of broadcast frames dropped in A2N direction.')
cmFlowHistoryACLN2ADrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 41), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryACLN2ADrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryACLN2ADrop.setDescription('The number of Frame dropped due to n2a direction ACL rule.')
cmFlowHistoryACLA2NDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 10, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowHistoryACLA2NDrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowHistoryACLA2NDrop.setDescription('The number of Frame dropped due to a2n direction ACL rule.')
cmFlowThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11), )
if mibBuilder.loadTexts: cmFlowThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdTable.setDescription('A table of entries that allow manageability of Ethernet\n             Flow Thresholds.')
cmFlowThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowThresholdIndex"))
if mibBuilder.loadTexts: cmFlowThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdEntry.setDescription('A conceptual row in the cmFlowThresholdTable.')
cmFlowThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmFlowThresholdTable.')
cmFlowThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmFlowThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmFlowThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmFlowThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmFlowThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 11, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdMonValue.setDescription('Monitored value corresponding to cmFlowThresholdVariable.')
cmQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12), )
if mibBuilder.loadTexts: cmQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsTable.setDescription('A collection of QOS Shaper statistics.  \n             These reflect the current data.')
cmQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"))
if mibBuilder.loadTexts: cmQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsEntry.setDescription('A conceptual row in the cmQosShaperStatsTable.\n             Entries exist in this table for each EVC.')
cmQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
cmQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
cmQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsBT.setDescription('Bytes Transmitted.')
cmQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
cmQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsFD.setDescription('Frames Dequeued.')
cmQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
cmQosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsBR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsBR.setDescription('Bytes Replicated.')
cmQosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsFR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsFR.setDescription('Frames Replicated.')
cmQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmQosShaperStatsABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsABRRLR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
cmQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 12, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13), )
if mibBuilder.loadTexts: cmQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryTable.setDescription('A collection of QOS Shaper statistics.  \n             These reflect the history data.')
cmQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperHistoryIndex"))
if mibBuilder.loadTexts: cmQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryEntry.setDescription('A conceptual row in the cmQosShaperHistoryTable.\n             Entries exist in this table for each EVC.')
cmQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
cmQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
cmQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
cmQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryBT.setDescription('Bytes Transmitted.')
cmQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
cmQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryFD.setDescription('Frames Dequeued.')
cmQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
cmQosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryBR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryBR.setDescription('Bytes Replicated.')
cmQosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryFR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryFR.setDescription('Frames Replicated.')
cmQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmQosShaperHistoryABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryABRRLR.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
cmQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 13, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14), )
if mibBuilder.loadTexts: cmQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Shaper Thresholds.')
cmQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperThresholdIndex"))
if mibBuilder.loadTexts: cmQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdEntry.setDescription('A conceptual row in the cmQosShaperThresholdTable.')
cmQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmQosShaperThresholdTable.')
cmQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 14, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdMonValue.setDescription('Monitored value corresponding to cmQosShaperThresholdVariable.')
cmQosFlowPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15), )
if mibBuilder.loadTexts: cmQosFlowPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmQosFlowPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIndex"))
if mibBuilder.loadTexts: cmQosFlowPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsEntry.setDescription('A conceptual row in the cmQosFlowPolicerStatsTable.\n             Entries exist in this table for each EVC.')
cmQosFlowPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmQosFlowPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmQosFlowPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsValid.setDescription('Indicates the validity of the bin.')
cmQosFlowPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
cmQosFlowPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMG.setDescription('Frames Marked Green.')
cmQosFlowPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMY.setDescription('Frames Marked Yellow.')
cmQosFlowPolicerStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmQosFlowPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
cmQosFlowPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
cmQosFlowPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmQosFlowPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 15, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
cmQosFlowPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16), )
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmQosFlowPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryIndex"))
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryEntry.setDescription('A conceptual row in the cmQosFlowPolicerHistoryTable.\n             Entries exist in this table for each EVC.')
cmQosFlowPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
cmQosFlowPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
cmQosFlowPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
cmQosFlowPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmQosFlowPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMG.setDescription('Frames Marked Green.')
cmQosFlowPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
cmQosFlowPolicerHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmQosFlowPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
cmQosFlowPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
cmQosFlowPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmQosFlowPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 16, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
cmQosFlowPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17), )
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
cmQosFlowPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerTypeIndex"), (0, "CM-FACILITY-MIB", "cmQosFlowPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdIndex"))
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdEntry.setDescription('A conceptual row in the cmQosFlowPolicerThresholdTable.')
cmQosFlowPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmQosFlowPolicerThresholdTable.')
cmQosFlowPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmQosFlowPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmQosFlowPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmQosFlowPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmQosFlowPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 17, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdMonValue.setDescription('Monitored value corresponding to cmQosFlowPolicerThresholdVariable.')
cmAccPortQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18), )
if mibBuilder.loadTexts: cmAccPortQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsTable.setDescription('A collection of Access Port Level QOS Shaper statistics.  \n             These reflect the current data.')
cmAccPortQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIndex"))
if mibBuilder.loadTexts: cmAccPortQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsEntry.setDescription('A conceptual row in the cmAccPortQosShaperStatsTable.\n             Entries exist in this table for each QOS Shaper per Access Port.')
cmAccPortQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmAccPortQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmAccPortQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
cmAccPortQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
cmAccPortQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBT.setDescription('Bytes Transmitted.')
cmAccPortQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
cmAccPortQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFD.setDescription('Frames Dequeued.')
cmAccPortQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
cmAccPortQosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBR.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBR.setDescription('Bytes Replicated.')
cmAccPortQosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFR.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFR.setDescription('Frames Replicated.')
cmAccPortQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmAccPortQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmAccPortQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 18, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmAccPortQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19), )
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryTable.setDescription('A collection of Access Port Level QOS Shaper statistics.\n             These reflect the history data.')
cmAccPortQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryIndex"))
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryEntry.setDescription('A conceptual row in the cmAccPortQosShaperHistoryTable.\n             Entries exist in this table for each Shaper per Access Port.')
cmAccPortQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
cmAccPortQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
cmAccPortQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
cmAccPortQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmAccPortQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBT.setDescription('Bytes Transmitted.')
cmAccPortQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
cmAccPortQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFD.setDescription('Frames Dequeued.')
cmAccPortQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
cmAccPortQosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBR.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBR.setDescription('Bytes Replicated.')
cmAccPortQosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFR.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFR.setDescription('Frames Replicated.')
cmAccPortQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmAccPortQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmAccPortQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 19, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmAccPortQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20), )
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Shaper Thresholds.')
cmAccPortQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetAccPortIndex"), (0, "CM-FACILITY-MIB", "cmAccPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdIndex"))
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdEntry.setDescription('A conceptual row in the cmAccPortQosShaperThresholdTable.')
cmAccPortQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmAccPortQosShaperThresholdTable.')
cmAccPortQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmAccPortQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmAccPortQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmAccPortQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmAccPortQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 20, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdMonValue.setDescription('Monitored value corresponding to cmAccPortQosShaperThresholdVariable.')
cmEthernetTrafficPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21), )
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsTable.setDescription('A collection of Agg Ethernet Port related statistics.  \n             These reflect the current data.')
cmEthernetTrafficPortStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsEntry.setDescription('A conceptual row in the cmEthernetTrafficPortStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmEthernetTrafficPortStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Ethernet Port statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmEthernetTrafficPortStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmEthernetTrafficPortStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsValid.setDescription('Indicates the validity of the bin.')
cmEthernetTrafficPortStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetTrafficPortStatsESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBF.setDescription('Broadcast frames sent.')
cmEthernetTrafficPortStatsESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBP.setDescription('Broadcast frames received.')
cmEthernetTrafficPortStatsESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESBS.setDescription('Bytes sent.')
cmEthernetTrafficPortStatsESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESC.setDescription('Collisions detected.')
cmEthernetTrafficPortStatsESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESCAE.setDescription('CRC Aligned Errors detected.')
cmEthernetTrafficPortStatsESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESDE.setDescription('Drop Events detected.')
cmEthernetTrafficPortStatsESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESF.setDescription('Fragments detected.')
cmEthernetTrafficPortStatsESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESFS.setDescription('Frames sent.')
cmEthernetTrafficPortStatsESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESJ.setDescription('Jabbers detected.')
cmEthernetTrafficPortStatsESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESMF.setDescription('Multicast Frames sent.')
cmEthernetTrafficPortStatsESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESMP.setDescription('Multicast Packets received.')
cmEthernetTrafficPortStatsESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESO.setDescription('Octets received.')
cmEthernetTrafficPortStatsESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESOF.setDescription('Oversize Frames Dropped On Sending Direction.')
cmEthernetTrafficPortStatsESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESOP.setDescription('Oversize Packets Dropped On Receiving Direction.')
cmEthernetTrafficPortStatsESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP.setDescription('Packets received.')
cmEthernetTrafficPortStatsESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP64.setDescription('64 Octet Frames received.')
cmEthernetTrafficPortStatsESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP65.setDescription('65 to 127 Octet Frames received.')
cmEthernetTrafficPortStatsESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP128.setDescription('128 to 255 Octet Frames received.')
cmEthernetTrafficPortStatsESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP256.setDescription('256 to 511 Octet Frames received.')
cmEthernetTrafficPortStatsESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP512.setDescription('512 to 1023 Octet Frames received.')
cmEthernetTrafficPortStatsESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP1024.setDescription('1024 to 1518 Octet Frames received.')
cmEthernetTrafficPortStatsESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESP1519.setDescription('1519 to Max MTU Octet Frames received.')
cmEthernetTrafficPortStatsESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESUF.setDescription('Unicast Frames sent.')
cmEthernetTrafficPortStatsESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsESUP.setDescription('Unicast Packets received.')
cmEthernetTrafficPortStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmEthernetTrafficPortStatsL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed.')
cmEthernetTrafficPortStatsLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLES.setDescription('Line Errored Seconds detected.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetTrafficPortStatsLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD).')
cmEthernetTrafficPortStatsAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD).')
cmEthernetTrafficPortStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsABRRx.setDescription('The average bit rate.')
cmEthernetTrafficPortStatsABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsABRTx.setDescription('The average bit rate.')
cmEthernetTrafficPortStatsATFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsATFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsATFD.setDescription('The AFP tagged frames dropped.')
cmEthernetTrafficPortStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmEthernetTrafficPortStatsTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetTrafficPortStatsLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsLkupFails.setDescription('Packet Discarded due to Lookup Fail.')
cmEthernetTrafficPortStatsPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsPSC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsPSC.setDescription('Proctetion Switch Count.')
cmEthernetTrafficPortStatsL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetTrafficPortStatsL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetTrafficPortStatsIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetTrafficPortStatsIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetTrafficPortStatsIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetTrafficPortStatsIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetTrafficPortStatsIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetTrafficPortStatsIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetTrafficPortStatsFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsFmcd.setDescription('The frame of multicast drop.')
cmEthernetTrafficPortStatsFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsFbcd.setDescription('The frame of broadcast drop.')
cmEthernetTrafficPortStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to no acl rule match.')
cmEthernetTrafficPortStatsAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetTrafficPortStatsDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 56), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetTrafficPortStatsDroppedFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 57), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsDroppedFragmented.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsDroppedFragmented.setDescription('Counter of L3 control protocol frames dropped due to packet fragmentation.')
cmEthernetTrafficPortStatsRLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsRLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsRLBC.setDescription('Laser Bias Current (in mA) for the remote physical layer.  This is\n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsROPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsROPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsROPT.setDescription('Optical Power Transmitted (in dBm) for the remote physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsROPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsROPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsROPR.setDescription('Optical Power Received (in dBm) for the remote physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortStatsRTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 21, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsRTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortStatsRTemp.setDescription('The temperature of the remote physical layer when media type is fiber.')
cmEthernetTrafficPortHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22), )
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTable.setDescription('A collection of Agg Ethernet Port related statistics.  \n             These reflect the history data.')
cmEthernetTrafficPortHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryEntry.setDescription('A conceptual row in the cmEthernetTrafficPortHistoryTable.\n             Entries exist in this table for each Agg Ethernet port.')
cmEthernetTrafficPortHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Port statistics entry.')
cmEthernetTrafficPortHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTime.setDescription('Indicates the time of history bin creation.')
cmEthernetTrafficPortHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryValid.setDescription('Indicates the validity of the bin.')
cmEthernetTrafficPortHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmEthernetTrafficPortHistoryESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBF.setDescription('Broadcast frames sent.')
cmEthernetTrafficPortHistoryESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBP.setDescription('Broadcast frames received.')
cmEthernetTrafficPortHistoryESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESBS.setDescription('Bytes sent.')
cmEthernetTrafficPortHistoryESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESC.setDescription('Collisions detected.')
cmEthernetTrafficPortHistoryESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESCAE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESCAE.setDescription('CRC Aligned Errors detected.')
cmEthernetTrafficPortHistoryESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESDE.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESDE.setDescription('Drop Events detected.')
cmEthernetTrafficPortHistoryESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESF.setDescription('Fragments detected.')
cmEthernetTrafficPortHistoryESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESFS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESFS.setDescription('Frames sent.')
cmEthernetTrafficPortHistoryESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESJ.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESJ.setDescription('Jabbers detected.')
cmEthernetTrafficPortHistoryESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESMF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESMF.setDescription('Multicast Frames sent.')
cmEthernetTrafficPortHistoryESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESMP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESMP.setDescription('Multicast Packets received.')
cmEthernetTrafficPortHistoryESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESO.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESO.setDescription('Octets received.')
cmEthernetTrafficPortHistoryESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESOF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESOF.setDescription('Oversize Frames Dropped On Sending Direction.')
cmEthernetTrafficPortHistoryESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESOP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESOP.setDescription('Oversize Packets Dropped On Receiving Direction.')
cmEthernetTrafficPortHistoryESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP.setDescription('Packets received.')
cmEthernetTrafficPortHistoryESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP64.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP64.setDescription('64 Octet Frames received.')
cmEthernetTrafficPortHistoryESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP65.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP65.setDescription('65 to 127 Octet Frames received.')
cmEthernetTrafficPortHistoryESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP128.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP128.setDescription('128 to 255 Octet Frames received.')
cmEthernetTrafficPortHistoryESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP256.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP256.setDescription('256 to 511 Octet Frames received.')
cmEthernetTrafficPortHistoryESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP512.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP512.setDescription('512 to 1023 Octet Frames received.')
cmEthernetTrafficPortHistoryESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP1024.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP1024.setDescription('1024 to 1518 Octet Frames received.')
cmEthernetTrafficPortHistoryESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP1519.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESP1519.setDescription('1519 to Max MTU Octet Frames received.')
cmEthernetTrafficPortHistoryESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESUF.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESUF.setDescription('Unicast Frames sent.')
cmEthernetTrafficPortHistoryESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESUP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryESUP.setDescription('Unicast Packets received.')
cmEthernetTrafficPortHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmEthernetTrafficPortHistoryL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed.')
cmEthernetTrafficPortHistoryLES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLES.setStatus('deprecated')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLES.setDescription('Line Errored Seconds detected.  These are\n          incremented if a False Carrier or Errored Symbol event occurs\n          since the last 1-second poll.\n          This object is deprecated.')
cmEthernetTrafficPortHistoryLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLBC.setDescription('Laser Bias Current (in mA) for the physical layer.  This is\n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryOPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryOPT.setDescription('Optical Power Transmitted (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryOPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryOPR.setDescription('Optical Power Received (in dBm) for the physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAUFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD).')
cmEthernetTrafficPortHistoryAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAPFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD).')
cmEthernetTrafficPortHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryABRRx.setDescription('The average bit rate.')
cmEthernetTrafficPortHistoryABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryABRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryABRTx.setDescription('The average bit rate.')
cmEthernetTrafficPortHistoryATFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 39), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryATFD.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryATFD.setDescription('The AFP tagged frames dropped.')
cmEthernetTrafficPortHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 40), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmEthernetTrafficPortHistoryTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryTemp.setDescription('The temperature of the physical layer when media type is fiber.')
cmEthernetTrafficPortHistoryLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 42), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryLkupFails.setDescription('Packet Discarded due to Lookup Fail.')
cmEthernetTrafficPortHistoryPSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 43), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryPSC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryPSC.setDescription('Protection Switch Count.')
cmEthernetTrafficPortHistoryL2PTRxFramesEncap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 44), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2PTRxFramesEncap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2PTRxFramesEncap.setDescription('Number of Layer 2 Protocol Tunneling Recevied Frames Encapsulated.')
cmEthernetTrafficPortHistoryL2PTTxFramesDecap = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 45), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2PTTxFramesDecap.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryL2PTTxFramesDecap.setDescription('Number of Layer 2 Protocol Tunneling Transmitted Frames De-encapsulated.')
cmEthernetTrafficPortHistoryIBRMaxRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 46), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMaxRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMaxRx.setDescription('Maximum bits received on a port in any 1-sec with the PM interval.')
cmEthernetTrafficPortHistoryIBRMaxTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 47), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMaxTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMaxTx.setDescription('Maximum bits transmitted on a port in any 1-sec with the PM interval.')
cmEthernetTrafficPortHistoryIBRMinRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 48), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMinRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMinRx.setDescription('Minimum bits received on a port in any 1-sec with the PM interval')
cmEthernetTrafficPortHistoryIBRMinTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 49), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMinTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRMinTx.setDescription('Minimum bits transmitted on a port in any 1-sec with the PM interval')
cmEthernetTrafficPortHistoryIBRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 50), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRRx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRRx.setDescription('Bits received in the most recent 1-sec')
cmEthernetTrafficPortHistoryIBRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 51), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRTx.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryIBRTx.setDescription('Bits transmitted in the most recent 1-sec')
cmEthernetTrafficPortHistoryFmcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 52), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryFmcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryFmcd.setDescription('Frame of multicast drop')
cmEthernetTrafficPortHistoryFbcd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 53), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryFbcd.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryFbcd.setDescription('Frame of broadcast drop.')
cmEthernetTrafficPortHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 54), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAclDropNoMatch.setDescription('Counter of L3 control protocol frames dropped due to acl no match.')
cmEthernetTrafficPortHistoryAclFwd2Cpu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 55), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAclFwd2Cpu.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryAclFwd2Cpu.setDescription('Counter of L3 Control protocol frames foward to cpu.')
cmEthernetTrafficPortHistoryDhcpDropNoAssocIf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 56), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryDhcpDropNoAssocIf.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryDhcpDropNoAssocIf.setDescription('Counter of DHCP packets dropped by CPU due to no associated Traffic IP Interface found.')
cmEthernetTrafficPortHistoryDroppedFragmented = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 57), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryDroppedFragmented.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryDroppedFragmented.setDescription('Counter of L3 control protocol frames dropped due to packet fragmentation.')
cmEthernetTrafficPortHistoryRLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryRLBC.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryRLBC.setDescription('Laser Bias Current (in mA) for the remote physical layer.  This is\n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryROPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryROPT.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryROPT.setDescription('Optical Power Transmitted (in dBm) for the remote physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryROPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryROPR.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryROPR.setDescription('Optical Power Received (in dBm) for the remote physical layer.  This is \n          applicable only if the media type for the Port is fiber.')
cmEthernetTrafficPortHistoryRTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 22, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryRTemp.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortHistoryRTemp.setDescription('The temperature of the remote physical layer when media type is fiber.')
cmEthernetTrafficPortThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23), )
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdTable.setDescription('A table of entries that allow manageability of Agg Ethernet\n             Port Thresholds.')
cmEthernetTrafficPortThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdEntry.setDescription('A conceptual row in the cmEthernetTrafficPortThresholdTable.')
cmEthernetTrafficPortThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmEthernetTrafficPortThresholdTable.')
cmEthernetTrafficPortThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmEthernetTrafficPortThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmEthernetTrafficPortThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmEthernetTrafficPortThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmEthernetTrafficPortThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 23, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdMonValue.setDescription('Monitored value corresponding to cmEthernetTrafficPortThresholdVariable.')
cmEthernetTrafficPortThresholdVarTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 24), )
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarTable.setDescription('A table of entries that allow manageability of Agg Ethernet\n             Port Threshold variances.')
cmEthernetTrafficPortThresholdVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"))
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarEntry.setDescription('A conceptual row in the cmEthernetTrafficPortThresholdTable.')
cmEthernetTrafficPortThresholdVarOprVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 24, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarOprVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarOprVariance.setDescription('Variance in the Optical Power Received (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmEthernetTrafficPortThresholdVarOptVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 24, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarOptVariance.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdVarOptVariance.setDescription('Variance in the Optical Power Transmitted (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25), )
if mibBuilder.loadTexts: cmFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsTable.setDescription('A collection of flowPiont statistics.  \n             These reflect the current data.')
cmFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowPointStatsIndex"))
if mibBuilder.loadTexts: cmFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsEntry.setDescription('A conceptual row in the cmFlowPointStatsTable.\n             Entries exist in this table for each EVC.')
cmFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Ethernet Flow statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
cmFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
cmFlowPointStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmFlowPointStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsABRRx.setDescription('The average bit rate.')
cmFlowPointStatsABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsABRRLRx.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsABRRLRx.setDescription('The average bit rate, rate limited.')
cmFlowPointStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmFlowPointStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsSES.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsSES.setDescription('The number of Severely Errored Seconds (ES).')
cmFlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMG.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMG.setDescription('The number of Frames Marked Green.')
cmFlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMY.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMY.setDescription('The number of Frames Marked Yellow.')
cmFlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMRD.setDescription('The number of Frames Marked Red and Discarded.')
cmFlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFTD.setDescription('The number of Frames Tail Dropped.')
cmFlowPointStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsBytesIn.setDescription('The number of Bytes In in the ingress direction.')
cmFlowPointStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
cmFlowPointStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFREDD.setDescription('The number of Frames WRED Dropped in the ingress direction.')
cmFlowPointStatsFACLD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFACLD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFACLD.setDescription('The number of ACL Frames Discarded in the ingress directions.')
cmFlowPointStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMYD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMYD.setDescription('The number of Frames Marked Yellow and Dropped in the ingress direction.')
cmFlowPointStatsFMGD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMGD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMGD.setDescription('The number of Frames Marked Green and Dropped in the ingress direction.')
cmFlowPointStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFD.setDescription('The number of Frames Dequeued by the 8 queues of egress flow point.')
cmFlowPointStatsFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFMCD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFMCD.setDescription('The number of Frame with Destination MAC MultiCast dropped in ingress FP.')
cmFlowPointStatsFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFBCD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFBCD.setDescription('The number of Frame with Destination MAC BroadCast dropped in ingress FP.')
cmFlowPointStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsBT.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsBT.setDescription('The number of bytes dequeued(Transmitted) by the 8 queues in egress FP.')
cmFlowPointStatsFLD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFLD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFLD.setDescription('The number of frames dropped in STM1-4-ET or FE-36E card in egress direction.')
cmFlowPointStatsIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBRMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
cmFlowPointStatsIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
cmFlowPointStatsIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBRMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
cmFlowPointStatsIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
cmFlowPointStatsIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBR.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBR.setDescription('Instantaneous Bit Rate Minimum.')
cmFlowPointStatsIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsIBRRl.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
cmFlowPointStatsFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFdRxFb.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
cmFlowPointStatsFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFdTxFb.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
cmFlowPointStatsFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsFdicd.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
cmFlowPointStatsNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsNumLearnTableFlushes.setDescription('The number of learning table flushes.')
cmFlowPointStatsEfFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsEfFramesDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsEfFramesDiscarded.setDescription('This object indicates the frames discarded due to Elephant Flow\n          rate limiting.')
cmFlowPointStatsEfBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsEfBytesDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsEfBytesDiscarded.setDescription('This object indicates the bytes discarded due to Elephant Flow\n          rate limiting.')
cmFlowPointStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsAclDropNoMatch.setDescription('The number of dropped packets due to no match in ACL rule.')
cmFlowPointStatsAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 25, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointStatsAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointStatsAclRuleDrop.setDescription('The number of dropped packets in ACL rule.')
cmFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26), )
if mibBuilder.loadTexts: cmFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryTable.setDescription('A collection of flowPiont statistics.  \n             These reflect the history data.')
cmFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowPointStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowPointHistoryIndex"))
if mibBuilder.loadTexts: cmFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryEntry.setDescription('A conceptual row in the cmFlowPointHistoryTable.\n             Entries exist in this table for each FlowPoint.')
cmFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Ethernet FlowPoint History statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
cmFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
cmFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmFlowPointHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmFlowPointHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryABRRx.setDescription('The average bit rate.')
cmFlowPointHistoryABRRLRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryABRRLRx.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryABRRLRx.setDescription('The average bit rate, rate limited.')
cmFlowPointHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmFlowPointHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistorySES.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistorySES.setDescription('The number of Severely Errored Seconds (ES).')
cmFlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMG.setDescription('The number of Frames Marked Green.')
cmFlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMY.setDescription('The number of Frames Marked Yellow.')
cmFlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMRD.setDescription('The number of Frames Marked Red and Discarded.')
cmFlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFTD.setDescription('The number of Frames Tail Dropped.')
cmFlowPointHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryBytesIn.setDescription('The number of Bytes In in the ingress direction.')
cmFlowPointHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryBytesOut.setDescription('The number of Bytes Out in the ingress direction.')
cmFlowPointHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFREDD.setDescription('The number of Frames WRED Dropped in the ingress direction.')
cmFlowPointHistoryFACLD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFACLD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFACLD.setDescription('The number of ACL Frames Discarded in the ingress directions.')
cmFlowPointHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMYD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMYD.setDescription('The number of Frames Marked Yellow and Dropped in the ingress direction.')
cmFlowPointHistoryFMGD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMGD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMGD.setDescription('The number of Frames Marked Green and Dropped in the ingress direction.')
cmFlowPointHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFD.setDescription('The number of Frames Dequeued by the 8 queues of egress flow point.')
cmFlowPointHistoryFMCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFMCD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFMCD.setDescription('The number of Frame with Destination MAC MultiCast dropped in ingress FP.')
cmFlowPointHistoryFBCD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFBCD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFBCD.setDescription('The number of Frame with Destination MAC BroadCast dropped in ingress FP.')
cmFlowPointHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryBT.setDescription('The number of bytes dequeued(Transmitted) by the 8 queues in egress FP.')
cmFlowPointHistoryFLD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFLD.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFLD.setDescription('The number of frames dropped in STM1-4-ET or FE-36E card in egress direction.')
cmFlowPointHistoryIBRMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBRMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBRMax.setDescription('Instantaneous Bit Rate Maximum.')
cmFlowPointHistoryIBRRlMax = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRlMax.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRlMax.setDescription('Instantaneous Bit Rate Maximum - Rate Limited.')
cmFlowPointHistoryIBRMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBRMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBRMin.setDescription('Instantaneous Bit Rate Minimum.')
cmFlowPointHistoryIBRRlMin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRlMin.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRlMin.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
cmFlowPointHistoryIBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBR.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBR.setDescription('Instantaneous Bit Rate Minimum.')
cmFlowPointHistoryIBRRl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRl.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryIBRRl.setDescription('Instantaneous Bit Rate Minimum - Rate Limited.')
cmFlowPointHistoryFdRxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFdRxFb.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFdRxFb.setDescription('The number of Frames Dropped RX - Flowpoint Blocked.')
cmFlowPointHistoryFdTxFb = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFdTxFb.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFdTxFb.setDescription('The number of Frames Dropped TX - Flowpoint Blocked.')
cmFlowPointHistoryFdicd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryFdicd.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryFdicd.setDescription('The number of Frames Dropped - Ingress COS Disabled.')
cmFlowPointHistoryNumLearnTableFlushes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryNumLearnTableFlushes.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryNumLearnTableFlushes.setDescription('The number of learning table flushes.')
cmFlowPointHistoryEfFramesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryEfFramesDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryEfFramesDiscarded.setDescription('This object indicates the frames discarded due to Elephant Flow\n          rate limiting.')
cmFlowPointHistoryEfBytesDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryEfBytesDiscarded.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryEfBytesDiscarded.setDescription('This object indicates the bytes discarded due to Elephant Flow\n          rate limiting.')
cmFlowPointHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 37), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryAclDropNoMatch.setDescription('The number of dropped packets due to no match in ACL rule.')
cmFlowPointHistoryAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 26, 1, 38), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointHistoryAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointHistoryAclRuleDrop.setDescription('The number of dropped packets in ACL rule.')
cmFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27), )
if mibBuilder.loadTexts: cmFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Agg FlowPoint Thresholds.')
cmFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowPointStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmFlowPointThresholdIndex"))
if mibBuilder.loadTexts: cmFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdEntry.setDescription('A conceptual row in the cmFlowPointThresholdTable.')
cmFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmFlowPointThresholdTable.')
cmFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be sampled.')
cmFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdMonValue.setDescription('Monitored value corresponding to cmFlowPointThresholdVariable.')
cmOAMFlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28), )
if mibBuilder.loadTexts: cmOAMFlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsTable.setDescription('A collection of flowPiont statistics.  \n             These reflect the current data.')
cmOAMFlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmOAMFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsIndex"))
if mibBuilder.loadTexts: cmOAMFlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsEntry.setDescription('A conceptual row in the cmOAMFlowPointStatsTable.\n             Entries exist in this table for each EVC.')
cmOAMFlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Ethernet Flow statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmOAMFlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmOAMFlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsValid.setDescription('Indicates the validity of the bin.')
cmOAMFlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
cmOAMFlowPointStatsUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointStatsUAS.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmOAMFlowPointStatsSES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 28, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointStatsSES.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointStatsSES.setDescription('The number of Severely Errored Seconds (ES).')
cmOAMFlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29), )
if mibBuilder.loadTexts: cmOAMFlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryTable.setDescription('A collection of flowPiont statistics.  \n             These reflect the history data.')
cmOAMFlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmOAMFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryIndex"))
if mibBuilder.loadTexts: cmOAMFlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryEntry.setDescription('A conceptual row in the cmOAMFlowPointHistoryTable.\n             Entries exist in this table for each OAMFlowPoint.')
cmOAMFlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Ethernet OAMFlowPoint History statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmOAMFlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
cmOAMFlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
cmOAMFlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmOAMFlowPointHistoryUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointHistoryUAS.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistoryUAS.setDescription('The number of Unavailable Seconds (UAS).')
cmOAMFlowPointHistorySES = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 29, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointHistorySES.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointHistorySES.setDescription('The number of Severely Errored Seconds (ES).')
cmOAMFlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30), )
if mibBuilder.loadTexts: cmOAMFlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdTable.setDescription('A table of entries that allow manageability of Agg OAMFlowPoint Thresholds.')
cmOAMFlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmOAMFlowPointIndex"), (0, "CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdIndex"))
if mibBuilder.loadTexts: cmOAMFlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdEntry.setDescription('A conceptual row in the cmOAMFlowPointThresholdTable.')
cmOAMFlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmOAMFlowPointThresholdTable.')
cmOAMFlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmOAMFlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be sampled.')
cmOAMFlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmOAMFlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmOAMFlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmOAMFlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdMonValue.setDescription('Monitored value corresponding to cmOAMFlowPointThresholdVariable.')
cmQosPolicerV2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31), )
if mibBuilder.loadTexts: cmQosPolicerV2StatsTable.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmQosPolicerV2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosPolicerV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsIndex"))
if mibBuilder.loadTexts: cmQosPolicerV2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsEntry.setDescription('A conceptual row in the cmQosPolicerV2StatsTable.\n             Entries exist in this table.')
cmQosPolicerV2StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmQosPolicerV2StatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmQosPolicerV2StatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsValid.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsValid.setDescription('Indicates the validity of the bin.')
cmQosPolicerV2StatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2StatsAction.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsAction.setDescription('Allows the Manager to clear the bin.')
cmQosPolicerV2StatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMG.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMG.setDescription('Frames Marked Green.')
cmQosPolicerV2StatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMY.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMY.setDescription('Frames Marked Yellow.')
cmQosPolicerV2StatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMYD.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmQosPolicerV2StatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMRD.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsFMRD.setDescription('Frames Marked Red and Discarded.')
cmQosPolicerV2StatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsBytesIn.setDescription('Number of bytes received by the Policer.')
cmQosPolicerV2StatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmQosPolicerV2StatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 31, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2StatsABR.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2StatsABR.setDescription('Average Bit Rate  on the Policer.')
cmQosPolicerV2HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32), )
if mibBuilder.loadTexts: cmQosPolicerV2HistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmQosPolicerV2HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosPolicerV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryIndex"))
if mibBuilder.loadTexts: cmQosPolicerV2HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryEntry.setDescription('A conceptual row in the cmQosPolicerV2HistoryTable.\n             Entries exist in this table for each flowpoint.')
cmQosPolicerV2HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
cmQosPolicerV2HistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryTime.setDescription('Indicates the time of history bin creation.')
cmQosPolicerV2HistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryValid.setDescription('Indicates the validity of the bin.')
cmQosPolicerV2HistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryAction.setDescription('Allows the Manager to clear the bin.')
cmQosPolicerV2HistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMG.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMG.setDescription('Frames Marked Green.')
cmQosPolicerV2HistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMY.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMY.setDescription('Frames Marked Yellow.')
cmQosPolicerV2HistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMYD.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmQosPolicerV2HistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryFMRD.setDescription('Frames Marked Red and Discarded.')
cmQosPolicerV2HistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryBytesIn.setDescription('Number of bytes received by the Policer.')
cmQosPolicerV2HistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmQosPolicerV2HistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 32, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2HistoryABR.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2HistoryABR.setDescription('Average Bit Rate  on the Policer.')
cmQosPolicerV2ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33), )
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
cmQosPolicerV2ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosPolicerV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdIndex"))
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdEntry.setDescription('A conceptual row in the cmQosPolicerV2ThresholdTable.')
cmQosPolicerV2ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmQosPolicerV2ThresholdTable.')
cmQosPolicerV2ThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmQosPolicerV2ThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmQosPolicerV2ThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmQosPolicerV2ThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmQosPolicerV2ThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 33, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdMonValue.setDescription('Monitored value corresponding to cmQosPolicerV2ThresholdVariable.')
cmQosShaperV2StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34), )
if mibBuilder.loadTexts: cmQosShaperV2StatsTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsTable.setDescription('A collection of QOS ShaperV2 statistics.  \n             These reflect the current data.')
cmQosShaperV2StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperV2StatsIndex"))
if mibBuilder.loadTexts: cmQosShaperV2StatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsEntry.setDescription('A conceptual row in the cmQosShaperV2StatsTable.\n             Entries exist in this table.')
cmQosShaperV2StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS ShaperV2 statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmQosShaperV2StatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmQosShaperV2StatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsValid.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsValid.setDescription('Indicates the validity of the bin.')
cmQosShaperV2StatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2StatsAction.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsAction.setDescription('Allows the Manager to clear the bin.')
cmQosShaperV2StatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsBT.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsBT.setDescription('Bytes Transmitted.')
cmQosShaperV2StatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsBTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsBTD.setDescription('Bytes Tail Dropped.')
cmQosShaperV2StatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsFD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsFD.setDescription('Frames Dequeued.')
cmQosShaperV2StatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsFTD.setDescription('Frames Tail Dropped.')
cmQosShaperV2StatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsABRRL.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmQosShaperV2StatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsBREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsBREDD.setDescription('Bytes Red Frame Dropped.')
cmQosShaperV2StatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 34, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2StatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2StatsFREDD.setDescription('Frames WRED Dropped.')
cmQosShaperV2HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35), )
if mibBuilder.loadTexts: cmQosShaperV2HistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryTable.setDescription('A collection of QOS ShaperV2 statistics.  \n             These reflect the history data.')
cmQosShaperV2HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperV2StatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryIndex"))
if mibBuilder.loadTexts: cmQosShaperV2HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryEntry.setDescription('A conceptual row in the cmQosShaperV2HistoryTable.\n             Entries exist in this table for each flowpoint.')
cmQosShaperV2HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS ShaperV2 statistics entry.')
cmQosShaperV2HistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryTime.setDescription('Indicates the time of history bin creation.')
cmQosShaperV2HistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryValid.setDescription('Indicates the validity of the bin.')
cmQosShaperV2HistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2HistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryAction.setDescription('Allows the Manager to clear the bin.')
cmQosShaperV2HistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryBT.setDescription('Bytes Transmitted.')
cmQosShaperV2HistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryBTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryBTD.setDescription('Bytes Tail Dropped.')
cmQosShaperV2HistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryFD.setDescription('Frames Dequeued.')
cmQosShaperV2HistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryFTD.setDescription('Frames Tail Dropped.')
cmQosShaperV2HistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmQosShaperV2HistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryBREDD.setDescription('Bytes Red Frame Dropped.')
cmQosShaperV2HistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 35, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2HistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2HistoryFREDD.setDescription('Frames WRED Dropped.')
cmQosShaperV2ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36), )
if mibBuilder.loadTexts: cmQosShaperV2ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             ShaperV2 Thresholds.')
cmQosShaperV2ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "cmQosShaperV2Index"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperV2StatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdIndex"))
if mibBuilder.loadTexts: cmQosShaperV2ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdEntry.setDescription('A conceptual row in the cmQosShaperV2ThresholdTable.')
cmQosShaperV2ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmQosShaperV2ThresholdTable.')
cmQosShaperV2ThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmQosShaperV2ThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmQosShaperV2ThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmQosShaperV2ThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmQosShaperV2ThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 36, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmQosShaperV2ThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdMonValue.setDescription('Monitored value corresponding to cmQosShaperV2ThresholdVariable.')
cmLagStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37), )
if mibBuilder.loadTexts: cmLagStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsTable.setDescription('A collection of Agg Lag related statistics.  \n             These reflect the current data.')
cmLagStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "CM-PERFORMANCE-MIB", "cmLagStatsIndex"))
if mibBuilder.loadTexts: cmLagStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsEntry.setDescription('A conceptual row in the cmLagStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmLagStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Agg Lag statistics entry. \n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmLagStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmLagStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsValid.setDescription('Indicates the validity of the bin.')
cmLagStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLagStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsAction.setDescription('Allows the Manager to clear the bin.')
cmLagStatsESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESBF.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESBF.setDescription('Broadcast frames sent.')
cmLagStatsESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESBP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESBP.setDescription('Broadcast frames received.')
cmLagStatsESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESBS.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESBS.setDescription('Bytes sent.')
cmLagStatsESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESC.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESC.setDescription('Collisions detected.')
cmLagStatsESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESCAE.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESCAE.setDescription('CRC Aligned Errors detected.')
cmLagStatsESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESDE.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESDE.setDescription('Drop Events detected.')
cmLagStatsESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESF.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESF.setDescription('Fragments detected.')
cmLagStatsESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESFS.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESFS.setDescription('Frames sent.')
cmLagStatsESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESJ.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESJ.setDescription('Jabbers detected.')
cmLagStatsESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESMF.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESMF.setDescription('Multicast Frames sent.')
cmLagStatsESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESMP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESMP.setDescription('Multicast Packets received.')
cmLagStatsESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESO.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESO.setDescription('Octets received.')
cmLagStatsESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESOF.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESOF.setDescription('Oversize Frames Dropped On Sending Direction.')
cmLagStatsESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESOP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESOP.setDescription('Oversize Packets Dropped On Receiving Direction.')
cmLagStatsESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP.setDescription('Packets received.')
cmLagStatsESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP64.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP64.setDescription('64 Octet Frames received.')
cmLagStatsESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP65.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP65.setDescription('65 to 127 Octet Frames received.')
cmLagStatsESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP128.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP128.setDescription('128 to 255 Octet Frames received.')
cmLagStatsESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP256.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP256.setDescription('256 to 511 Octet Frames received.')
cmLagStatsESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP512.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP512.setDescription('512 to 1023 Octet Frames received.')
cmLagStatsESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP1024.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP1024.setDescription('1024 to 1518 Octet Frames received.')
cmLagStatsESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESP1519.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESP1519.setDescription('1519 to Max MTU Octet Frames received.')
cmLagStatsESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESUF.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESUF.setDescription('Unicast Frames sent.')
cmLagStatsESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsESUP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsESUP.setDescription('Unicast Packets received.')
cmLagStatsL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmLagStatsL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed.')
cmLagStatsAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsAUFD.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD).')
cmLagStatsAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsAPFD.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD).')
cmLagStatsABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsABRRx.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsABRRx.setDescription('The average bit rate.')
cmLagStatsABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsABRTx.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsABRTx.setDescription('The average bit rate.')
cmLagStatsATFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsATFD.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsATFD.setDescription('The AFP tagged frames dropped.')
cmLagStatsLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 37, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagStatsLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmLagStatsLkupFails.setDescription('Packet Discarded due to Lookup Fail.')
cmLagHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38), )
if mibBuilder.loadTexts: cmLagHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryTable.setDescription('A collection of Lag related statistics.  \n             These reflect the history data.')
cmLagHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "CM-PERFORMANCE-MIB", "cmLagStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmLagHistoryIndex"))
if mibBuilder.loadTexts: cmLagHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryEntry.setDescription('A conceptual row in the cmLagHistoryTable.\n             Entries exist in this table for each Lag.')
cmLagHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Ethernet Port statistics entry.')
cmLagHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryTime.setDescription('Indicates the time of history bin creation.')
cmLagHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryValid.setDescription('Indicates the validity of the bin.')
cmLagHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLagHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmLagHistoryESBF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESBF.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESBF.setDescription('Broadcast frames sent.')
cmLagHistoryESBP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESBP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESBP.setDescription('Broadcast frames received.')
cmLagHistoryESBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESBS.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESBS.setDescription('Bytes sent.')
cmLagHistoryESC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESC.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESC.setDescription('Collisions detected.')
cmLagHistoryESCAE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESCAE.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESCAE.setDescription('CRC Aligned Errors detected.')
cmLagHistoryESDE = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESDE.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESDE.setDescription('Drop Events detected.')
cmLagHistoryESF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESF.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESF.setDescription('Fragments detected.')
cmLagHistoryESFS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESFS.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESFS.setDescription('Frames sent.')
cmLagHistoryESJ = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESJ.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESJ.setDescription('Jabbers detected.')
cmLagHistoryESMF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESMF.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESMF.setDescription('Multicast Frames sent.')
cmLagHistoryESMP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESMP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESMP.setDescription('Multicast Packets received.')
cmLagHistoryESO = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESO.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESO.setDescription('Octets received.')
cmLagHistoryESOF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESOF.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESOF.setDescription('Oversize Frames Dropped On Sending Direction.')
cmLagHistoryESOP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESOP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESOP.setDescription('Oversize Packets Dropped On Receiving Direction.')
cmLagHistoryESP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP.setDescription('Packets received.')
cmLagHistoryESP64 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP64.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP64.setDescription('64 Octet Frames received.')
cmLagHistoryESP65 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP65.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP65.setDescription('65 to 127 Octet Frames received.')
cmLagHistoryESP128 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP128.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP128.setDescription('128 to 255 Octet Frames received.')
cmLagHistoryESP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP256.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP256.setDescription('256 to 511 Octet Frames received.')
cmLagHistoryESP512 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP512.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP512.setDescription('512 to 1023 Octet Frames received.')
cmLagHistoryESP1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 25), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP1024.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP1024.setDescription('1024 to 1518 Octet Frames received.')
cmLagHistoryESP1519 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 26), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESP1519.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESP1519.setDescription('1519 to Max MTU Octet Frames received.')
cmLagHistoryESUF = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 27), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESUF.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESUF.setDescription('Unicast Frames sent.')
cmLagHistoryESUP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 28), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryESUP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryESUP.setDescription('Unicast Packets received.')
cmLagHistoryL2CPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 29), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryL2CPFD.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryL2CPFD.setDescription('Layer 2 Control Protocol Frames Discarded.')
cmLagHistoryL2CPFP = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 30), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryL2CPFP.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryL2CPFP.setDescription('Layer 2 Control Protocol Frames Processed.')
cmLagHistoryAUFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 31), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryAUFD.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryAUFD.setDescription('The number of AFP (Acceptable Frame Policy) Untagged Frames\n          Discarded (AUFD).')
cmLagHistoryAPFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 32), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryAPFD.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryAPFD.setDescription('The number of AFP (Acceptable Frame Policy) Priority Tagged Frames\n          Discarded (APFD).')
cmLagHistoryABRRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 33), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryABRRx.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryABRRx.setDescription('The average bit rate.')
cmLagHistoryABRTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 34), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryABRTx.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryABRTx.setDescription('The average bit rate.')
cmLagHistoryATFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 35), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryATFD.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryATFD.setDescription('The AFP tagged frames dropped.')
cmLagHistoryLkupFails = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 38, 1, 36), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagHistoryLkupFails.setStatus('current')
if mibBuilder.loadTexts: cmLagHistoryLkupFails.setDescription('Packet Discarded due to Lookup Fail.')
cmLagThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39), )
if mibBuilder.loadTexts: cmLagThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdTable.setDescription('A table of entries that allow manageability of Agg Lag Thresholds.')
cmLagThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-LAG-MIB", "f3LagIndex"), (0, "CM-PERFORMANCE-MIB", "cmLagStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmLagThresholdIndex"))
if mibBuilder.loadTexts: cmLagThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdEntry.setDescription('A conceptual row in the cmLagThresholdTable.')
cmLagThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmLagThresholdTable.')
cmLagThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmLagThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmLagThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLagThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmLagThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmLagThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmLagThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 39, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmLagThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdMonValue.setDescription('Monitored value corresponding to cmLagThresholdVariable.')
cmTrafficPortQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40), )
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsTable.setDescription('A collection of LAG Shaper performance monitoring data. \n             These reflect the current data. (Now it is only relevant \n             for LAG ports and that the slotIndex value will \n             be 254 and cmEthernetTrafficPortIndex is the LAG index)')
cmTrafficPortQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsIndex"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsEntry.setDescription('A conceptual row in the cmTrafficPortQosShaperStatsTable.\n             Entries exist in this table.')
cmTrafficPortQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Traffic Port QOS Shaper statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
cmTrafficPortQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmTrafficPortQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
cmTrafficPortQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
cmTrafficPortQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBT.setDescription('Bytes Transmitted.')
cmTrafficPortQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
cmTrafficPortQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFD.setDescription('Frames Dequeued.')
cmTrafficPortQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
cmTrafficPortQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmTrafficPortQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsBREDD.setDescription('Bytes Red Frame Dropped.')
cmTrafficPortQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 40, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperStatsFREDD.setDescription('Frames WRED Dropped.')
cmTrafficPortQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41), )
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryTable.setDescription('A collection of Traffic Port QOS Shaper statistics.\n             These reflect the history data.(Now it is only relevant \n             for LAG ports and that the slotIndex value will \n             be 254 and cmEthernetTrafficPortIndex is the LAG index)')
cmTrafficPortQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryIndex"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryEntry.setDescription('A conceptual row in the cmTrafficPortQosShaperHistoryTable.\n             Entries exist in this table for each flowpoint.')
cmTrafficPortQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Traffic Port QOS Shaper statistics entry.')
cmTrafficPortQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
cmTrafficPortQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
cmTrafficPortQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmTrafficPortQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBT.setDescription('Bytes Transmitted.')
cmTrafficPortQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
cmTrafficPortQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFD.setDescription('Frames Dequeued.')
cmTrafficPortQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
cmTrafficPortQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmTrafficPortQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryBREDD.setDescription('Bytes Red Frame Dropped.')
cmTrafficPortQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 41, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperHistoryFREDD.setDescription('Frames WRED Dropped.')
cmTrafficPortQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42), )
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdTable.setDescription('A table of entries that allow manageability of Traffic Port QOS\n             Shaper Thresholds.(Now it is only relevant \n             for LAG ports and that the slotIndex value will \n             be 254 and cmEthernetTrafficPortIndex is the LAG index)')
cmTrafficPortQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmTrafficPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdIndex"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdEntry.setDescription('A conceptual row in the cmTrafficPortQosShaperThresholdTable.')
cmTrafficPortQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmTrafficPortQosShaperThresholdTable.')
cmTrafficPortQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmTrafficPortQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmTrafficPortQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmTrafficPortQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmTrafficPortQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 42, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdMonValue.setDescription('Monitored value corresponding to cmTrafficPortQosShaperThresholdVariable.')
f3NetPortQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43), )
if mibBuilder.loadTexts: f3NetPortQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsTable.setDescription('A collection of Network Port Level QOS Shaper statistics.  \n             These reflect the current data.')
f3NetPortQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIndex"))
if mibBuilder.loadTexts: f3NetPortQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsEntry.setDescription('A conceptual row in the cmNetPortQosShaperStatsTable.\n             Entries exist in this table for each QOS Shaper per Network Port.')
f3NetPortQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            Index 1 corresponds to 15minute, index 2 to 1 day and index\n            3 corresponds to rollover.')
f3NetPortQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3NetPortQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
f3NetPortQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
f3NetPortQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBT.setDescription('Bytes Transmitted.')
f3NetPortQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
f3NetPortQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFD.setDescription('Frames Dequeued.')
f3NetPortQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
f3NetPortQosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBR.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBR.setDescription('Bytes Replicated.')
f3NetPortQosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFR.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFR.setDescription('Frames Replicated.')
f3NetPortQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3NetPortQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3NetPortQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 43, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3NetPortQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44), )
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryTable.setDescription('A collection of Network Port Level QOS Shaper statistics.\n             These reflect the history data.')
f3NetPortQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryEntry.setDescription('A conceptual row in the cmNetPortQosShaperHistoryTable.\n             Entries exist in this table for each Shaper per Network Port.')
f3NetPortQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
f3NetPortQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
f3NetPortQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
f3NetPortQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3NetPortQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBT.setDescription('Bytes Transmitted.')
f3NetPortQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
f3NetPortQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFD.setDescription('Frames Dequeued.')
f3NetPortQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
f3NetPortQosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBR.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBR.setDescription('Bytes Replicated.')
f3NetPortQosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFR.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFR.setDescription('Frames Replicated.')
f3NetPortQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3NetPortQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3NetPortQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 44, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3NetPortQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45), )
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Shaper Thresholds.')
f3NetPortQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetNetPortIndex"), (0, "CM-FACILITY-MIB", "f3NetPortQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdEntry.setDescription('A conceptual row in the cmNetPortQosShaperThresholdTable.')
f3NetPortQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3NetPortQosShaperThresholdTable.')
f3NetPortQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3NetPortQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3NetPortQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3NetPortQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3NetPortQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 45, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdMonValue.setDescription('Monitored value corresponding to f3NetPortQosShaperThresholdVariable.')
ocnStmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46), )
if mibBuilder.loadTexts: ocnStmStatsTable.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsTable.setDescription('A collection of OCn/STM interface related statistics.\n            These provide the current data.')
ocnStmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmStatsIndex"))
if mibBuilder.loadTexts: ocnStmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsEntry.setDescription('A conceptual row in the ocnStmStatsTable. An entry exists\n             in this table for each OCn/STM interface.')
ocnStmStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ocnStmStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this OCn/STM interface statistics entry.')
ocnStmStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
ocnStmStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsValid.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsValid.setDescription('Indicates the validity of the bin.')
ocnStmStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmStatsAction.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsAction.setDescription('Allows the Manager to clear the bin.')
ocnStmStatsLineLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineLBC.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineLBC.setDescription('Laser Bias Current retrieved from the SFP.')
ocnStmStatsLineOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineOPT.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineOPT.setDescription('Transmit Optical Power retrieved from the SFP.')
ocnStmStatsLineOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineOPR.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineOPR.setDescription('Received Optical Power retrieved from the SFP.')
ocnStmStatsLineTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineTemp.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineTemp.setDescription('Temperature retrieved from the SFP.')
ocnStmStatsLinePSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLinePSC.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLinePSC.setDescription('Protection Switch Counts retrieved from the SFP.')
ocnStmStatsLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         Line in the current bin.')
ocnStmStatsLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH Line in the current bin.')
ocnStmStatsLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         Line in the current bin.')
ocnStmStatsLineUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by a SONET/SDH \n         Line in the current bin.')
ocnStmStatsLineFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineFCs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineFCs.setDescription('The counter associated with the number of \n         Failure Count encountered by a SONET/SDH \n         Line in the current bin.')
ocnStmStatsLineFarEndESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineFarEndESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineFarEndESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by a \n         SONET/SDH Section in the current bin.')
ocnStmStatsLineFarEndSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineFarEndSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineFarEndSESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by a SONET/SDH Line in the current bin.')
ocnStmStatsLineFarEndCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineFarEndCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineFarEndCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by a \n         SONET/SDH Line in the current bin.')
ocnStmStatsLineFarEndUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsLineFarEndUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsLineFarEndUASs.setDescription('The counter associated with the number of \n         Far End Unavailable Seconds encountered by \n         a SONET/SDH Line in the current bin.')
ocnStmStatsSectionESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsSectionESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsSectionESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         Section in the current bin.')
ocnStmStatsSectionSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsSectionSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsSectionSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH Section in the current bin.')
ocnStmStatsSectionCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsSectionCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsSectionCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         Section in the current bin.')
ocnStmStatsSectionSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsSectionSEFs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsSectionSEFs.setDescription('The counter associated with the number of \n         Serverely Errored Frames Seconds encountered \n         by a SONET/SDH Section in the current bin.')
ocnStmStatsSectionUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 46, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmStatsSectionUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmStatsSectionUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered \n         by a SONET/SDH Section in the current bin.')
ocnStmHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47), )
if mibBuilder.loadTexts: ocnStmHistoryTable.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryTable.setDescription('A collection of OCn/STM interface related statistics. \n            These reflect the history data.')
ocnStmHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmStatsIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmHistoryIndex"))
if mibBuilder.loadTexts: ocnStmHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryEntry.setDescription('A conceptual row in the ocnStmHistoryTable. An entry exists\n             in this table for each OCn/STM interface.')
ocnStmHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ocnStmHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this OCn/STM interface statistics entry.')
ocnStmHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryTime.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryTime.setDescription('Indicates the time of history bin creation.')
ocnStmHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryValid.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryValid.setDescription('Indicates the validity of the bin.')
ocnStmHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmHistoryAction.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryAction.setDescription('Allows the Manager to clear the bin.')
ocnStmHistoryLineLBC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineLBC.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineLBC.setDescription('Laser Bias Current retrieved from the SFP.')
ocnStmHistoryLineOPT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineOPT.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineOPT.setDescription('Transmit Optical Power retrieved from the SFP.')
ocnStmHistoryLineOPR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineOPR.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineOPR.setDescription('Received Optical Power retrieved from the SFP.')
ocnStmHistoryLineTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineTemp.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineTemp.setDescription('Temperature retrieved from the SFP.')
ocnStmHistoryLinePSC = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLinePSC.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLinePSC.setDescription('Protection Switch Counts retrieved from the SFP.')
ocnStmHistoryLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         Line in the history bin.')
ocnStmHistoryLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH Line in the history bin.')
ocnStmHistoryLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         Line in the history bin.')
ocnStmHistoryLineUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by a SONET/SDH \n         Line in the history bin.')
ocnStmHistoryLineFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineFCs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineFCs.setDescription('The counter associated with the number of \n         Failure Count encountered by a SONET/SDH \n         Line in the history bin.')
ocnStmHistoryLineFarEndESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by a \n         SONET/SDH Section in the history bin.')
ocnStmHistoryLineFarEndSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndSESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by a SONET/SDH Line in the history bin.')
ocnStmHistoryLineFarEndCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by a \n         SONET/SDH Line in the history bin.')
ocnStmHistoryLineFarEndUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistoryLineFarEndUASs.setDescription('The counter associated with the number of \n         Far End Unavailable Seconds encountered by \n         a SONET/SDH Line in the history bin.')
ocnStmHistorySectionESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistorySectionESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistorySectionESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         Section in the history bin.')
ocnStmHistorySectionSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistorySectionSESs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistorySectionSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH Section in the history bin.')
ocnStmHistorySectionCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistorySectionCVs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistorySectionCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         Section in the history bin.')
ocnStmHistorySectionSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistorySectionSEFs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistorySectionSEFs.setDescription('The counter associated with the number of \n         Serverely Errored Frames Seconds encountered \n         by a SONET/SDH Section in the history bin.')
ocnStmHistorySectionUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 47, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmHistorySectionUASs.setStatus('current')
if mibBuilder.loadTexts: ocnStmHistorySectionUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered \n         by a SONET/SDH Section in the history bin.')
ocnStmThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48), )
if mibBuilder.loadTexts: ocnStmThresholdTable.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdTable.setDescription('A table of entries that allow manageability of OCn/STM\n             Thresholds.')
ocnStmThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmStatsIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmThresholdIndex"))
if mibBuilder.loadTexts: ocnStmThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdEntry.setDescription('A conceptual row in the ocnStmThresholdTable.')
ocnStmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: ocnStmThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        ocnStmThresholdTable.')
ocnStmThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
ocnStmThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
ocnStmThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
ocnStmThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
ocnStmThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 48, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ocnStmThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdMonValue.setDescription('Monitored value corresponding to ocnStmThresholdVariable.')
stsVcPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49), )
if mibBuilder.loadTexts: stsVcPathStatsTable.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsTable.setDescription('The SONET/SDH STS/VC Path Current data.')
stsVcPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "stsVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "stsVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "stsVcPathStatsIndex"))
if mibBuilder.loadTexts: stsVcPathStatsEntry.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsEntry.setDescription('A conceptual row in the stsVcPathStatsTable.')
stsVcPathStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stsVcPathStatsIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsIndex.setDescription('An index of the SONET/SDH sts Path current bin.')
stsVcPathStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
stsVcPathStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsValid.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsValid.setDescription('Indicates the validity of the bin.')
stsVcPathStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathStatsAction.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsAction.setDescription('Allows the Manager to clear the bin.')
stsVcPathStatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsESs.setDescription('The counter associated with the number \n            of Errored Seconds encountered by the \n            SONET/SDH STS/VC Path in the current bin.')
stsVcPathStatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsSESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by the \n         SONET/SDH STS/VC Path in the current bin.')
stsVcPathStatsCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsCVs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by the SONET/SDH \n         STS/VC Path in the current bin.')
stsVcPathStatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathStatsUASs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathStatsUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by the SONET/SDH \n         STS/VC Path in the current bin.')
stsVcPathFarEndStatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndStatsESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndStatsESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by the \n         SONET/SDH STS/VC Path in the current bin.')
stsVcPathFarEndStatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndStatsSESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndStatsSESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by the SONET/SDH STS/VC Path in the current bin.')
stsVcPathFarEndStatsCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndStatsCVs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndStatsCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by the \n         SONET/SDH STS/VC Path in the current bin.')
stsVcPathFarEndStatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 49, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndStatsUASs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndStatsUASs.setDescription('The counter associated with the number of \n          Far End Unavailable Seconds encountered by \n          a SONET/SDH STS/VC Path in the current bin.')
stsVcPathHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50), )
if mibBuilder.loadTexts: stsVcPathHistoryTable.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryTable.setDescription('The SONET/SDH STS/VC Path History data.')
stsVcPathHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "stsVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "stsVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "stsVcPathStatsIndex"), (0, "CM-PERFORMANCE-MIB", "stsVcPathHistoryIndex"))
if mibBuilder.loadTexts: stsVcPathHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryEntry.setDescription('A conceptual row in the stsVcPathHistoryTable.')
stsVcPathHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stsVcPathHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryIndex.setDescription('An index of the SONET/SDH sts Path history bin.')
stsVcPathHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistoryTime.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryTime.setDescription('Indicates the time of history bin creation.')
stsVcPathHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistoryValid.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryValid.setDescription('Indicates the validity of the bin.')
stsVcPathHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathHistoryAction.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryAction.setDescription('Allows the Manager to clear the bin.')
stsVcPathHistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistoryESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryESs.setDescription('The counter associated with the number \n            of Errored Seconds encountered by the \n            SONET/SDH STS/VC Path in the history bin.')
stsVcPathHistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistorySESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistorySESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by the \n         SONET/SDH STS/VC Path in the history bin.')
stsVcPathHistoryCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistoryCVs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by the SONET/SDH \n         STS/VC Path in the history bin.')
stsVcPathHistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathHistoryUASs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathHistoryUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by the SONET/SDH \n         STS/VC Path in the history bin.')
stsVcPathFarEndHistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndHistoryESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndHistoryESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by the \n         SONET/SDH STS/VC Path in the history bin.')
stsVcPathFarEndHistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndHistorySESs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndHistorySESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by the SONET/SDH STS/VC Path in the history bin.')
stsVcPathFarEndHistoryCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndHistoryCVs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndHistoryCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by the \n         SONET/SDH STS/VC Path in the history bin.')
stsVcPathFarEndHistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 50, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathFarEndHistoryUASs.setStatus('current')
if mibBuilder.loadTexts: stsVcPathFarEndHistoryUASs.setDescription('The counter associated with the number of \n          Far End Unavailable Seconds encountered by \n          a SONET/SDH STS/VC Path in the history bin.')
stsVcPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51), )
if mibBuilder.loadTexts: stsVcPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdTable.setDescription('A table of entries that allow manageability of OCn\n             Path Thresholds.')
stsVcPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "stsVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "stsVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "stsVcPathStatsIndex"), (0, "CM-PERFORMANCE-MIB", "stsVcPathThresholdIndex"))
if mibBuilder.loadTexts: stsVcPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdEntry.setDescription('A conceptual row in the stsVcPathThresholdTable.')
stsVcPathThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: stsVcPathThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        stsVcPathThresholdTable.')
stsVcPathThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
stsVcPathThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
stsVcPathThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
stsVcPathThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stsVcPathThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
stsVcPathThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 51, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stsVcPathThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdMonValue.setDescription('Monitored value corresponding to stsVcPathThresholdVariable.')
vtVcPathStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52), )
if mibBuilder.loadTexts: vtVcPathStatsTable.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsTable.setDescription('The SONET/SDH vt Path current table.')
vtVcPathStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "vtVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "vtVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "vtVcPathStatsIndex"))
if mibBuilder.loadTexts: vtVcPathStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsEntry.setDescription('A conceptual row in the vtVcPathStatsTable.')
vtVcPathStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vtVcPathStatsIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsIndex.setDescription('An index of the SONET/SDH VT/VC Path current bin.')
vtVcPathStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
vtVcPathStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsValid.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsValid.setDescription('Indicates the validity of the bin.')
vtVcPathStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathStatsAction.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsAction.setDescription('Allows the Manager to clear the bin.')
vtVcPathStatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         vt Path in the current bin.')
vtVcPathStatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsSESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH vt Path in the current bin.')
vtVcPathStatsCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsCVs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         vt Path in the current bin.')
vtVcPathStatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathStatsUASs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathStatsUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by a SONET/SDH \n         vt Path in the current bin.')
vtVcPathFarEndStatsESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndStatsESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndStatsESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by a \n         SONET/SDH vt Path in the current bin.')
vtVcPathFarEndStatsSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndStatsSESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndStatsSESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by a SONET/SDH vt Path in the current bin.')
vtVcPathFarEndStatsCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndStatsCVs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndStatsCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by a \n         SONET/SDH vt Path in the current bin.')
vtVcPathFarEndStatsUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 52, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndStatsUASs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndStatsUASs.setDescription('The counter associated with the number of \n         Far End Unavailable Seconds encountered by \n         a SONET/SDH vt Path in the current bin.')
vtVcPathHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53), )
if mibBuilder.loadTexts: vtVcPathHistoryTable.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryTable.setDescription('The SONET/SDH vt Path history table.')
vtVcPathHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "vtVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "vtVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "vtVcPathStatsIndex"), (0, "CM-PERFORMANCE-MIB", "vtVcPathHistoryIndex"))
if mibBuilder.loadTexts: vtVcPathHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryEntry.setDescription('A conceptual row in the vtVcPathHistoryTable.')
vtVcPathHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: vtVcPathHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryIndex.setDescription('An index of the SONET/SDH vt Path history bin.')
vtVcPathHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistoryTime.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryTime.setDescription('Indicates the time of history bin creation.')
vtVcPathHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistoryValid.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryValid.setDescription('Indicates the validity of the bin.')
vtVcPathHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathHistoryAction.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryAction.setDescription('Allows the Manager to clear the bin.')
vtVcPathHistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistoryESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a SONET/SDH \n         vt Path in the history bin.')
vtVcPathHistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistorySESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistorySESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         SONET/SDH vt Path in the history bin.')
vtVcPathHistoryCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistoryCVs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a SONET/SDH \n         vt Path in the history bin.')
vtVcPathHistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathHistoryUASs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathHistoryUASs.setDescription('The counter associated with the number of \n         Unavailable Seconds encountered by a SONET/SDH \n         vt Path in the history bin.')
vtVcPathFarEndHistoryESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndHistoryESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndHistoryESs.setDescription('The counter associated with the number of \n         Far End Errored Seconds encountered by a \n         SONET/SDH vt Path in the history bin.')
vtVcPathFarEndHistorySESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndHistorySESs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndHistorySESs.setDescription('The counter associated with the number of \n         Far End Severely Errored Seconds encountered \n         by a SONET/SDH vt Path in the history bin.')
vtVcPathFarEndHistoryCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndHistoryCVs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndHistoryCVs.setDescription('The counter associated with the number of \n         Far End Coding Violations encountered by a \n         SONET/SDH vt Path in the history bin.')
vtVcPathFarEndHistoryUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 53, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathFarEndHistoryUASs.setStatus('current')
if mibBuilder.loadTexts: vtVcPathFarEndHistoryUASs.setDescription('The counter associated with the number of \n         Far End Unavailable Seconds encountered by \n         a SONET/SDH vt Path in the history bin.')
vtVcPathThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54), )
if mibBuilder.loadTexts: vtVcPathThresholdTable.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdTable.setDescription('A table of entries that allow manageability of \n             OCn VT1.5/VC12 Thresholds.')
vtVcPathThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-FACILITY-MIB", "vtVcPathParentIfIndex"), (0, "CM-FACILITY-MIB", "vtVcPathIndex"), (0, "CM-PERFORMANCE-MIB", "vtVcPathStatsIndex"), (0, "CM-PERFORMANCE-MIB", "vtVcPathThresholdIndex"))
if mibBuilder.loadTexts: vtVcPathThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdEntry.setDescription('A conceptual row in the vtVcPathThresholdTable.')
vtVcPathThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 1), Integer32())
if mibBuilder.loadTexts: vtVcPathThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        vtVcPathThresholdTable.')
vtVcPathThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
vtVcPathThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
vtVcPathThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
vtVcPathThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtVcPathThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
vtVcPathThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 54, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vtVcPathThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdMonValue.setDescription('Monitored value corresponding to vtVcPathThresholdVariable.')
e1t1StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55), )
if mibBuilder.loadTexts: e1t1StatsTable.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsTable.setDescription('The E1/T1 Path current table.')
e1t1StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e1t1ParentIfIndex"), (0, "CM-FACILITY-MIB", "e1t1Index"), (0, "CM-PERFORMANCE-MIB", "e1t1StatsIndex"))
if mibBuilder.loadTexts: e1t1StatsEntry.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsEntry.setDescription('A conceptual row in the e1t1StatsTable.')
e1t1StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e1t1StatsIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsIndex.setDescription('An index of the E1/T1 current bin.')
e1t1StatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
e1t1StatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsValid.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsValid.setDescription('Indicates the validity of the bin.')
e1t1StatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1StatsAction.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsAction.setDescription('Allows the Manager to clear the bin.')
e1t1StatsLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineCVs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a E1/T1 interface \n         in the current bin.')
e1t1StatsLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineESs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a E1/T1 interface \n         in the current bin.')
e1t1StatsLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineSESs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsLineESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineESsFarEnd.setDescription('The counter associated with the number of \n         Line Errored Seconds Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsLineUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineUASs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineUASs.setDescription('The counter associated with the number of \n         Line Unavailable Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsLineLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsLineLOSSs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsLineLOSSs.setDescription('The counter associated with the number of \n         Line Loss Of Signal Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathCVs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathCVs.setDescription('The counter associated with the number of \n         Path Coding Violations encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathESs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathESs.setDescription('The counter associated with the number of \n         Path Errored Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathSESs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathSESs.setDescription('The counter associated with the number of \n         Path Severely Errored Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathUASs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathUASs.setDescription('The counter associated with the number of \n         Path Unavailable Seconds Seconds encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathCVsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathCVsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathCVsFarEnd.setDescription('The counter associated with the number of \n         Path Coding Violations Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathESsFarEnd.setDescription('The counter associated with the number of \n         Path Errored Seconds Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathSESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathSESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathSESsFarEnd.setDescription('The counter associated with the number of \n         Path Severely Errored Seconds Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathSEFsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathSEFsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathSEFsFarEnd.setDescription('The counter associated with the number of \n         Path Severely Errored Framing Seconds Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathUASsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathUASsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathUASsFarEnd.setDescription('The counter associated with the number of \n         Path Unavailable Seconds Seconds Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathFCs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathFCs.setDescription('The counter associated with the number of \n         Path Failure Count encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathFCsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathFCsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathFCsFarEnd.setDescription('The counter associated with the number of \n         Path Failure Count Far End encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathAISs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathAISs.setDescription('The counter associated with the number of \n         Path AISs encountered by a \n         E1/T1 interface in the current bin.')
e1t1StatsPathSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 55, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1StatsPathSASs.setStatus('current')
if mibBuilder.loadTexts: e1t1StatsPathSASs.setDescription('The counter associated with path SASs \n         E1/T1 interface in the current bin.')
e1t1HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56), )
if mibBuilder.loadTexts: e1t1HistoryTable.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryTable.setDescription('The E1/T1 history table.')
e1t1HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e1t1ParentIfIndex"), (0, "CM-FACILITY-MIB", "e1t1Index"), (0, "CM-PERFORMANCE-MIB", "e1t1StatsIndex"), (0, "CM-PERFORMANCE-MIB", "e1t1HistoryIndex"))
if mibBuilder.loadTexts: e1t1HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryEntry.setDescription('A conceptual row in the e1t1HistoryTable.')
e1t1HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e1t1HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryIndex.setDescription('An index of the E1/T1 history bin.')
e1t1HistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryTime.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryTime.setDescription('Indicates the time of history bin creation.')
e1t1HistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryValid.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryValid.setDescription('Indicates the validity of the bin.')
e1t1HistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1HistoryAction.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryAction.setDescription('Allows the Manager to clear the bin.')
e1t1HistoryLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineCVs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a E1/T1 interface \n         in the history bin.')
e1t1HistoryLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineESs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a E1/T1 interface \n         in the history bin.')
e1t1HistoryLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineSESs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryLineESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineESsFarEnd.setDescription('The counter associated with the number of \n         Line Errored Seconds Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryLineUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineUASs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineUASs.setDescription('The counter associated with the number of \n         Line Unavailable Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryLineLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryLineLOSSs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryLineLOSSs.setDescription('The counter associated with the number of \n         Line Loss Of Signal Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathCVs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathCVs.setDescription('The counter associated with the number of \n         Path Coding Violations encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathESs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathESs.setDescription('The counter associated with the number of \n         Path Errored Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathSESs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathSESs.setDescription('The counter associated with the number of \n         Path Severely Errored Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathUASs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathUASs.setDescription('The counter associated with the number of \n         Path Unavailable Seconds Seconds encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathCVsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathCVsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathCVsFarEnd.setDescription('The counter associated with the number of \n         Path Coding Violations Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathESsFarEnd.setDescription('The counter associated with the number of \n         Path Errored Seconds Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathSESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathSESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathSESsFarEnd.setDescription('The counter associated with the number of \n         Path Severely Errored Seconds Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathSEFsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathSEFsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathSEFsFarEnd.setDescription('The counter associated with the number of \n         Path Severely Errored Framing Seconds Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathUASsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathUASsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathUASsFarEnd.setDescription('The counter associated with the number of \n         Path Unavailable Seconds Seconds Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathFCs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathFCs.setDescription('The counter associated with the number of \n         Path Failure Count encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathFCsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathFCsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathFCsFarEnd.setDescription('The counter associated with the number of \n         Path Failure Count Far End encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathAISs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathAISs.setDescription('The counter associated with the number of \n         Path AISs encountered by a \n         E1/T1 interface in the history bin.')
e1t1HistoryPathSASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 56, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1HistoryPathSASs.setStatus('current')
if mibBuilder.loadTexts: e1t1HistoryPathSASs.setDescription('The counter associated with path SASs \n         E1/T1 interface in the history bin.')
e1t1ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57), )
if mibBuilder.loadTexts: e1t1ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdTable.setDescription('A table of entries that allow manageability of \n             OCn E1/T1 Thresholds.')
e1t1ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e1t1ParentIfIndex"), (0, "CM-FACILITY-MIB", "e1t1Index"), (0, "CM-PERFORMANCE-MIB", "e1t1StatsIndex"), (0, "CM-PERFORMANCE-MIB", "e1t1ThresholdIndex"))
if mibBuilder.loadTexts: e1t1ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdEntry.setDescription('A conceptual row in the e1t1ThresholdTable.')
e1t1ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e1t1ThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        e1t1ThresholdTable.')
e1t1ThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1ThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
e1t1ThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1ThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
e1t1ThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
e1t1ThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e1t1ThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
e1t1ThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 57, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e1t1ThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdMonValue.setDescription('Monitored value corresponding to e1t1ThresholdVariable.')
e3t3StatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58), )
if mibBuilder.loadTexts: e3t3StatsTable.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsTable.setDescription('The E3/T3 Path current table.')
e3t3StatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e3t3ParentIfIndex"), (0, "CM-FACILITY-MIB", "e3t3Index"), (0, "CM-PERFORMANCE-MIB", "e3t3StatsIndex"))
if mibBuilder.loadTexts: e3t3StatsEntry.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsEntry.setDescription('A conceptual row in the e3t3StatsTable.')
e3t3StatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e3t3StatsIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsIndex.setDescription('An index of the E3/T3 current bin.')
e3t3StatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
e3t3StatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsValid.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsValid.setDescription('Indicates the validity of the bin.')
e3t3StatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3StatsAction.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsAction.setDescription('Allows the Manager to clear the bin.')
e3t3StatsLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsLineCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a E3/T3 interface \n         in the current bin.')
e3t3StatsLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsLineESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a E3/T3 interface \n         in the current bin.')
e3t3StatsLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsLineSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         E3/T3 interface in the current bin.')
e3t3StatsLineLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsLineLOSSs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsLineLOSSs.setDescription('The counter associated with the number of \n         Loss Of Signal Seconds encountered by a \n         E3/T3 interface in the current bin.')
e3t3StatsPathPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathPCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathPCVs.setDescription('The counter associated with the number of \n         Path P-bit parity check Coding Violations \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCCVs.setDescription('The counter associated with the number of \n         Path C-bit parity check Coding Violations \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathAISs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathAISs.setDescription('The counter associated with the number of \n         Path Alarm Indications Signal Seconds  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathPESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathPESs.setDescription('The counter associated with the number of \n         Path P-bit parity check Error Seconds  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCESs.setDescription('The counter associated with the number of \n         Path C-bit parity check Error Seconds  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathFCs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathFCs.setDescription('The counter associated with the number of \n         Path Failure Counts encountered by a E3/T3 \n         interface in the current bin.')
e3t3StatsPathSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathSEFs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathSEFs.setDescription('The counter associated with the number of \n         Path Serverely Errored Frames/AIS Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathPSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathPSESs.setDescription('The counter associated with the number of \n         Path P-bit parity check Severely Errored Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCSESs.setDescription('The counter associated with the number of \n         Path C-bit parity check Severely Errored Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathPUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathPUASs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathPUASs.setDescription('The counter associated with the number of \n         Path P-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCUASs.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCUASs.setDescription('The counter associated with the number of \n         Path C-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCCVsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCCVsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCCVsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Code Violations \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCESsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Errored Seconds  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCSESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCSESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCSESsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Severely Errored Seconds  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCFCsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCFCsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCFCsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Failure Counts  \n         encountered by a E3/T3 interface in the current bin.')
e3t3StatsPathCUASsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 58, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3StatsPathCUASsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3StatsPathCUASsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the current bin.')
e3t3HistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59), )
if mibBuilder.loadTexts: e3t3HistoryTable.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryTable.setDescription('The E3/T3 history table.')
e3t3HistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e3t3ParentIfIndex"), (0, "CM-FACILITY-MIB", "e3t3Index"), (0, "CM-PERFORMANCE-MIB", "e3t3StatsIndex"), (0, "CM-PERFORMANCE-MIB", "e3t3HistoryIndex"))
if mibBuilder.loadTexts: e3t3HistoryEntry.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryEntry.setDescription('A conceptual row in the e3t3HistoryTable.')
e3t3HistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e3t3HistoryIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryIndex.setDescription('An index of the E3/T3 history bin.')
e3t3HistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryTime.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryTime.setDescription('Indicates the time of history bin creation.')
e3t3HistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryValid.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryValid.setDescription('Indicates the validity of the bin.')
e3t3HistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3HistoryAction.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryAction.setDescription('Allows the Manager to clear the bin.')
e3t3HistoryLineCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryLineCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryLineCVs.setDescription('The counter associated with the number of \n         Coding Violations encountered by a E3/T3 interface \n         in the history bin.')
e3t3HistoryLineESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryLineESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryLineESs.setDescription('The counter associated with the number of \n         Errored Seconds encountered by a E3/T3 interface \n         in the history bin.')
e3t3HistoryLineSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryLineSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryLineSESs.setDescription('The counter associated with the number of \n         Severely Errored Seconds encountered by a \n         E3/T3 interface in the history bin.')
e3t3HistoryLineLOSSs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryLineLOSSs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryLineLOSSs.setDescription('The counter associated with the number of \n         Loss Of Signal Seconds encountered by a \n         E3/T3 interface in the history bin.')
e3t3HistoryPathPCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathPCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathPCVs.setDescription('The counter associated with the number of \n         Path P-bit parity check Coding Violations \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCCVs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCCVs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCCVs.setDescription('The counter associated with the number of \n         Path C-bit parity check Coding Violations \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathAISs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathAISs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathAISs.setDescription('The counter associated with the number of \n         Path Alarm Indications Signal Seconds  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathPESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathPESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathPESs.setDescription('The counter associated with the number of \n         Path P-bit parity check Error Seconds  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCESs.setDescription('The counter associated with the number of \n         Path C-bit parity check Error Seconds  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathFCs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathFCs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathFCs.setDescription('The counter associated with the number of \n         Path Failure Counts encountered by a E3/T3 \n         interface in the history bin.')
e3t3HistoryPathSEFs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathSEFs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathSEFs.setDescription('The counter associated with the number of \n         Path Serverely Errored Frames/AIS Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathPSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathPSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathPSESs.setDescription('The counter associated with the number of \n         Path P-bit parity check Severely Errored Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCSESs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCSESs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCSESs.setDescription('The counter associated with the number of \n         Path C-bit parity check Severely Errored Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathPUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathPUASs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathPUASs.setDescription('The counter associated with the number of \n         Path P-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCUASs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCUASs.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCUASs.setDescription('The counter associated with the number of \n         Path C-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCCVsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCCVsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCCVsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Code Violations \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCESsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Errored Seconds  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCSESsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCSESsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCSESsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Severely Errored Seconds  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCFCsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCFCsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCFCsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Failure Counts  \n         encountered by a E3/T3 interface in the history bin.')
e3t3HistoryPathCUASsFarEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 59, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3HistoryPathCUASsFarEnd.setStatus('current')
if mibBuilder.loadTexts: e3t3HistoryPathCUASsFarEnd.setDescription('The counter associated with the number of \n         Path FarEnd C-bit parity check Unavailable Seconds \n         encountered by a E3/T3 interface in the history bin.')
e3t3ThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60), )
if mibBuilder.loadTexts: e3t3ThresholdTable.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdTable.setDescription('A table of entries that allow manageability of \n             OCn E3/T3 Thresholds.')
e3t3ThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "e3t3ParentIfIndex"), (0, "CM-FACILITY-MIB", "e3t3Index"), (0, "CM-PERFORMANCE-MIB", "e3t3StatsIndex"), (0, "CM-PERFORMANCE-MIB", "e3t3ThresholdIndex"))
if mibBuilder.loadTexts: e3t3ThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdEntry.setDescription('A conceptual row in the e3t3ThresholdTable.')
e3t3ThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: e3t3ThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        e3t3ThresholdTable.')
e3t3ThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3ThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
e3t3ThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3ThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
e3t3ThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3ThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
e3t3ThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: e3t3ThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
e3t3ThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 60, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: e3t3ThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdMonValue.setDescription('Monitored value corresponding to e3t3ThresholdVariable.')
cmFlowBWExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61), )
if mibBuilder.loadTexts: cmFlowBWExtTable.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWExtTable.setDescription("This table extends cmFlowTable and  presents Flow's bandwidth configuration \n             paremeters in 64-bit values.")
cmFlowBWExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1), )
cmFlowEntry.registerAugmentions(("CM-PERFORMANCE-MIB", "cmFlowBWExtEntry"))
cmFlowBWExtEntry.setIndexNames(*cmFlowEntry.getIndexNames())
if mibBuilder.loadTexts: cmFlowBWExtEntry.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWExtEntry.setDescription('A conceptual row in the cmFlowBWExtTable.')
cmFlowBWA2NCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 1), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWA2NCIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWA2NCIR.setDescription('A2N CIR of a FLOW.')
cmFlowBWA2NEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 2), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWA2NEIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWA2NEIR.setDescription('A2N EIR of a FLOW.')
cmFlowBWN2ACIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 3), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWN2ACIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWN2ACIR.setDescription('N2A CIR of a FLOW.')
cmFlowBWN2AEIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 4), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWN2AEIR.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWN2AEIR.setDescription('N2A EIR of a FLOW.')
cmFlowBWA2NGFB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 5), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWA2NGFB.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWA2NGFB.setDescription('Guaranteed Flow Bandwidth of a FLOW.')
cmFlowBWA2NMFB = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 61, 1, 6), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmFlowBWA2NMFB.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWA2NMFB.setDescription('Maximum Flow Bandwidth of a FLOW.')
ocnStmThresholdVarTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 62), )
if mibBuilder.loadTexts: ocnStmThresholdVarTable.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVarTable.setDescription('A table of entries that allow manageability of ocn stm\n             Port Threshold variances.')
ocnStmThresholdVarEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 62, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "ocnStmIndex"), (0, "CM-PERFORMANCE-MIB", "ocnStmStatsIndex"))
if mibBuilder.loadTexts: ocnStmThresholdVarEntry.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVarEntry.setDescription('A conceptual row in the ocnStmThresholdTable.')
ocnStmThresholdVarOprVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 62, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmThresholdVarOprVariance.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVarOprVariance.setDescription('Variance in the Optical Power Received (in dbM), beyond which \n         threshold crossing alert will be generated.')
ocnStmThresholdVarOptVariance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 62, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ocnStmThresholdVarOptVariance.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVarOptVariance.setDescription('Variance in the Optical Power Transmitted (in dbM), beyond which \n         threshold crossing alert will be generated.')
cmPerfScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 63))
cmPerQueryGenControl = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 63, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmPerQueryGenControl.setStatus('current')
if mibBuilder.loadTexts: cmPerQueryGenControl.setDescription('This object describes whether report the cmPerQueryGenTrap. Its default value is enable.')
f3FpQosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64), )
if mibBuilder.loadTexts: f3FpQosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsTable.setDescription('A collection of  FlowPoint QOS Shaper statistics.  \n             These reflect the current data.')
f3FpQosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosShaperStatsIndex"))
if mibBuilder.loadTexts: f3FpQosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsEntry.setDescription('A conceptual row in the f3FpQosShaperStatsTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3FpQosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3FpQosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3FpQosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsValid.setDescription('Indicates the validity of the bin.')
f3FpQosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
f3FpQosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsBT.setDescription('Bytes Transmitted.')
f3FpQosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
f3FpQosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsFD.setDescription('Frames Dequeued.')
f3FpQosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsFTD.setDescription('Frames Tail Dropped.')
f3FpQosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3FpQosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3FpQosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 64, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3FpQosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65), )
if mibBuilder.loadTexts: f3FpQosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryTable.setDescription('A collection of  FlowPoint QOS Shaper statistics.  \n             These reflect the history data.')
f3FpQosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3FpQosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryEntry.setDescription('A conceptual row in the f3FpQosShaperHistoryTable.\n             Entries exist in this table for each FlowPoint QoS Shaper.')
f3FpQosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
f3FpQosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
f3FpQosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
f3FpQosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3FpQosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryBT.setDescription('Bytes Transmitted.')
f3FpQosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
f3FpQosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryFD.setDescription('Frames Dequeued.')
f3FpQosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
f3FpQosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3FpQosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3FpQosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 65, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3FpQosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66), )
if mibBuilder.loadTexts: f3FpQosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdTable.setDescription('A table of entries that allow manageability of  FlowPoint\n             QoS Shaper Thresholds.')
f3FpQosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosShaperIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosShaperStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3FpQosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdEntry.setDescription('A conceptual row in the f3FpQosShaperThresholdTable.')
f3FpQosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3FpQosShaperThresholdTable.')
f3FpQosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3FpQosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3FpQosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3FpQosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3FpQosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 66, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdMonValue.setDescription('Monitored value corresponding to f3FpQosShaperThresholdVariable.')
f3FpQosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67), )
if mibBuilder.loadTexts: f3FpQosPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsTable.setDescription('A collection of  FlowPoint QOS Policer statistics.  \n             These reflect the current data.')
f3FpQosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsIndex"))
if mibBuilder.loadTexts: f3FpQosPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsEntry.setDescription('A conceptual row in the f3FpQosPolicerStatsTable.\n             Entries exist in this table for each  FlowPoint QoS Policer.')
f3FpQosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3FpQosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3FpQosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsValid.setDescription('Indicates the validity of the bin.')
f3FpQosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
f3FpQosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMG.setDescription('Frames Marked Green.')
f3FpQosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMY.setDescription('Frames Marked Yellow.')
f3FpQosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
f3FpQosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
f3FpQosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3FpQosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 67, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
f3FpQosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68), )
if mibBuilder.loadTexts: f3FpQosPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryTable.setDescription('A collection of  FlowPoint QOS Policer statistics.  \n             These reflect the history data.')
f3FpQosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryIndex"))
if mibBuilder.loadTexts: f3FpQosPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryEntry.setDescription('A conceptual row in the f3FpQosPolicerHistoryTable.\n             Entries exist in this table for each  FlowPoint QoS Policer.')
f3FpQosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
f3FpQosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
f3FpQosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
f3FpQosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3FpQosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMG.setDescription('Frames Marked Green.')
f3FpQosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
f3FpQosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
f3FpQosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
f3FpQosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3FpQosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 68, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
f3FpQosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69), )
if mibBuilder.loadTexts: f3FpQosPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
f3FpQosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3FpQosPolicerIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdIndex"))
if mibBuilder.loadTexts: f3FpQosPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdEntry.setDescription('A conceptual row in the f3FpQosPolicerThresholdTable.')
f3FpQosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3FpQosPolicerThresholdTable.')
f3FpQosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3FpQosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3FpQosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3FpQosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3FpQosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 69, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3FpQosPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdMonValue.setDescription('Monitored value corresponding to f3FpQosPolicerThresholdVariable.')
f3AclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70), )
if mibBuilder.loadTexts: f3AclRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsTable.setDescription('A collection of L2 acl rule related statistics.  \n             These reflect the current data.')
f3AclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3AclRuleIndex"), (0, "CM-PERFORMANCE-MIB", "f3AclRuleStatsIndex"))
if mibBuilder.loadTexts: f3AclRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsEntry.setDescription('A conceptual row in the f3AclRuleStatsTable.\n             Entries exist in this table for each Acl rule.')
f3AclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3AclRuleStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L2 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3AclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3AclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsValid.setDescription('Indicates the validity of the bin.')
f3AclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsAction.setDescription('Allows the Manager to clear the bin.')
f3AclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 70, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleStatsRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleStatsRuleMatch.setDescription('The number of packets matching the ACL rule.')
f3AclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71), )
if mibBuilder.loadTexts: f3AclRuleHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryTable.setDescription('A collection of L2 acl rule related history statistics.  \n             These reflect the history data.')
f3AclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3AclRuleIndex"), (0, "CM-PERFORMANCE-MIB", "f3AclRuleStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3AclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3AclRuleHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryEntry.setDescription('A conceptual row in the f3AclRuleHistoryTable.\n             Entries exist in this table for each L2 acl rule.')
f3AclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3AclRuleHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L2 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3AclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryTime.setDescription('Indicates the time of history bin creation.')
f3AclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryValid.setDescription('Indicates the validity of the bin.')
f3AclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3AclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 71, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleHistoryRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleHistoryRuleMatch.setDescription('The number of packets matching acl rule.')
f3AclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72), )
if mibBuilder.loadTexts: f3AclRuleThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdTable.setDescription('A table of entries that allow manageability of L2 acl rule Thresholds.')
f3AclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-FACILITY-MIB", "cmEthernetTrafficPortIndex"), (0, "CM-FACILITY-MIB", "cmFlowPointIndex"), (0, "CM-FACILITY-MIB", "f3AclRuleIndex"), (0, "CM-PERFORMANCE-MIB", "f3AclRuleStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3AclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3AclRuleThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdEntry.setDescription('A conceptual row in the f3AclRuleThresholdTable.')
f3AclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3AclRuleThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3AclRuleThresholdTable.')
f3AclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3AclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3AclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3AclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3AclRuleThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3AclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 72, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3AclRuleThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdMonValue.setDescription('Monitored value corresponding to f3AclRuleThresholdVariable.')
cmEthernetNetPortXdslStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73), )
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatsTable.setDescription('A collection of Ethernet Access Port XDSL related statistics.  \n             These reflect the current data.')
cmEthernetNetPortXdslStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1), )
cmEthernetNetPortStatsEntry.registerAugmentions(("CM-PERFORMANCE-MIB", "cmEthernetNetPortXdslStatsEntry"))
cmEthernetNetPortXdslStatsEntry.setIndexNames(*cmEthernetNetPortStatsEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslStatsEntry.setDescription('A conceptual row in the cmEthernetNetPortXdslStatsTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmEthernetNetPortStatsXdslUsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsPkt.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsPkt.setDescription('xDSL Up stream packets.')
cmEthernetNetPortStatsXdslUsCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsCrcError.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsCrcError.setDescription('xDSL Up stream CRC error packets.')
cmEthernetNetPortStatsXdslDsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsPkt.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsPkt.setDescription('xDSL Down stream packets.')
cmEthernetNetPortStatsXdslUsFecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFecs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFecs.setDescription('xDSL Up stream FECS (FEC error seconds).')
cmEthernetNetPortStatsXdslDsFecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFecs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFecs.setDescription('xDSL Down stream FECS (FEC error seconds).')
cmEthernetNetPortStatsXdslUsEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsEs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsEs.setDescription('xDSL Up stream ES (Errored Seconds).')
cmEthernetNetPortStatsXdslDsEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsEs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsEs.setDescription('xDSL Down stream ES (Errored Seconds).')
cmEthernetNetPortStatsXdslUsSes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsSes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsSes.setDescription('xDSL Up stream SES (Severely Errored Seconds).')
cmEthernetNetPortStatsXdslDsSes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsSes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsSes.setDescription('xDSL Down stream SES (Severely Errored Seconds).')
cmEthernetNetPortStatsXdslUsLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsLoss.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsLoss.setDescription('xDSL Down stream LOSS (LOS Seconds).')
cmEthernetNetPortStatsXdslDsLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsLoss.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsLoss.setDescription('xDSL Down stream LOSS (LOS Seconds).')
cmEthernetNetPortStatsXdslDsUas = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsUas.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsUas.setDescription('xDSL Down stream UAS (Unavailable Seconds).')
cmEthernetNetPortStatsXdslUsCv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsCv.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsCv.setDescription('xDSL Up stream CV (CRC errors).')
cmEthernetNetPortStatsXdslDsCv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsCv.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsCv.setDescription('xDSL Down stream CV (CRC errors).')
cmEthernetNetPortStatsXdslUsFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFec.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFec.setDescription('xDSL Up stream FEC (FEC errors).')
cmEthernetNetPortStatsXdslDsFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFec.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFec.setDescription('xDSL Down stream FEC (FEC errors).')
cmEthernetNetPortStatsXdslDsFullInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFullInits.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslDsFullInits.setDescription('xDSL Down stream Full Inits.')
cmEthernetNetPortStatsXdslUsFullInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 73, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFullInits.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortStatsXdslUsFullInits.setDescription('xDSL Up stream Full Inits.')
cmEthernetNetPortXdslHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74), )
if mibBuilder.loadTexts: cmEthernetNetPortXdslHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslHistoryTable.setDescription('A collection of Ethernet Access Port XDSL related statistics.  \n             These reflect the current data.')
cmEthernetNetPortXdslHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1), )
cmEthernetNetPortHistoryEntry.registerAugmentions(("CM-PERFORMANCE-MIB", "cmEthernetNetPortXdslHistoryEntry"))
cmEthernetNetPortXdslHistoryEntry.setIndexNames(*cmEthernetNetPortHistoryEntry.getIndexNames())
if mibBuilder.loadTexts: cmEthernetNetPortXdslHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslHistoryEntry.setDescription('A conceptual row in the cmEthernetNetPortXdslHistoryTable.\n             Entries exist in this table for each Ethernet interface/port.')
cmEthernetNetPortHistoryXdslUsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 1), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsPkt.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsPkt.setDescription('xDSL Up stream packets.')
cmEthernetNetPortHistoryXdslUsCrcError = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 2), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsCrcError.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsCrcError.setDescription('xDSL Up stream CRC error packets.')
cmEthernetNetPortHistoryXdslDsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 3), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsPkt.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsPkt.setDescription('xDSL Down stream packets.')
cmEthernetNetPortHistoryXdslUsFecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 4), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFecs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFecs.setDescription('xDSL Up stream FECS (FEC error seconds).')
cmEthernetNetPortHistoryXdslDsFecs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFecs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFecs.setDescription('xDSL Down stream FECS (FEC error seconds).')
cmEthernetNetPortHistoryXdslUsEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsEs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsEs.setDescription('xDSL Up stream ES (Errored Seconds).')
cmEthernetNetPortHistoryXdslDsEs = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsEs.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsEs.setDescription('xDSL Down stream ES (Errored Seconds).')
cmEthernetNetPortHistoryXdslUsSes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsSes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsSes.setDescription('xDSL Up stream SES (Severely Errored Seconds).')
cmEthernetNetPortHistoryXdslDsSes = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsSes.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsSes.setDescription('xDSL Down stream SES (Severely Errored Seconds).')
cmEthernetNetPortHistoryXdslUsLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsLoss.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsLoss.setDescription('xDSL Down stream LOSS (LOS Seconds).')
cmEthernetNetPortHistoryXdslDsLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsLoss.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsLoss.setDescription('xDSL Down stream LOSS (LOS Seconds).')
cmEthernetNetPortHistoryXdslDsUas = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsUas.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsUas.setDescription('xDSL Down stream UAS (Unavailable Seconds).')
cmEthernetNetPortHistoryXdslUsCv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsCv.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsCv.setDescription('xDSL Up stream CV (CRC errors).')
cmEthernetNetPortHistoryXdslDsCv = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsCv.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsCv.setDescription('xDSL Down stream CV (CRC errors).')
cmEthernetNetPortHistoryXdslUsFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFec.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFec.setDescription('xDSL Up stream FEC (FEC errors).')
cmEthernetNetPortHistoryXdslDsFec = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFec.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFec.setDescription('xDSL Down stream FEC (FEC errors).')
cmEthernetNetPortHistoryXdslDsFullInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFullInits.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslDsFullInits.setDescription('xDSL Down stream Full Inits.')
cmEthernetNetPortHistoryXdslUsFullInits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 74, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFullInits.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortHistoryXdslUsFullInits.setDescription('xDSL Up stream Full Inits.')
f3CardStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75), )
if mibBuilder.loadTexts: f3CardStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsTable.setDescription('A collection of Card related statistics.  \n             These reflect the current data.')
f3CardStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-PERFORMANCE-MIB", "f3CardStatsIndex"))
if mibBuilder.loadTexts: f3CardStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsEntry.setDescription('A conceptual row in the f3CardStatsTable.\n             Entries exist in this table for each Card.')
f3CardStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: f3CardStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this Card statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3CardStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3CardStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsValid.setDescription('Indicates the validity of the bin.')
f3CardStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CardStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsAction.setDescription('Allows the Manager to clear the bin.')
f3CardStatsACU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsACU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsACU.setDescription('Average CPU usage.')
f3CardStatsMCU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsMCU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsMCU.setDescription('Maximum CPU usage.')
f3CardStatsICU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsICU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsICU.setDescription('Instant CPU usage.')
f3CardStatsAMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsAMU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsAMU.setDescription('Average memory usage.')
f3CardStatsMMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsMMU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsMMU.setDescription('Maximum memory usage.')
f3CardStatsIMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 75, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardStatsIMU.setStatus('current')
if mibBuilder.loadTexts: f3CardStatsIMU.setDescription('Instant memory usage.')
f3CardHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76), )
if mibBuilder.loadTexts: f3CardHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryTable.setDescription('A collection of Card related history statistics.  \n             These reflect the history data.')
f3CardHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-PERFORMANCE-MIB", "f3CardStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3CardHistoryIndex"))
if mibBuilder.loadTexts: f3CardHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryEntry.setDescription('A conceptual row in the f3CardHistoryTable.\n             Entries exist in this table for each card.')
f3CardHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: f3CardHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this card statistics entry.')
f3CardHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryTime.setDescription('Indicates the time of history bin creation.')
f3CardHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryValid.setDescription('Indicates the validity of the bin.')
f3CardHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CardHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3CardHistoryACU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryACU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryACU.setDescription('Average CPU usage.')
f3CardHistoryMCU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryMCU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryMCU.setDescription('Maximum CPU usage.')
f3CardHistoryICU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryICU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryICU.setDescription('Instant CPU usage.')
f3CardHistoryAMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryAMU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryAMU.setDescription('Average memory usage.')
f3CardHistoryMMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryMMU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryMMU.setDescription('Maximum memory usage.')
f3CardHistoryIMU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 76, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardHistoryIMU.setStatus('current')
if mibBuilder.loadTexts: f3CardHistoryIMU.setDescription('Instant memory usage.')
f3CardThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77), )
if mibBuilder.loadTexts: f3CardThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdTable.setDescription('A table of entries that allow manageability of Card Thresholds.')
f3CardThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "CM-PERFORMANCE-MIB", "f3CardStatsIndex"), (0, "CM-PERFORMANCE-MIB", "f3CardThresholdIndex"))
if mibBuilder.loadTexts: f3CardThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdEntry.setDescription('A conceptual row in the f3CardThresholdTable.')
f3CardThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: f3CardThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3CardThresholdTable.')
f3CardThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3CardThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3CardThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CardThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3CardThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3CardThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3CardThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 1, 77, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3CardThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdMonValue.setDescription('Monitored value corresponding to f3CardThresholdVariable.')
cmEthernetAccPortThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 1)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdMonValue"))
if mibBuilder.loadTexts: cmEthernetAccPortThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmEthernetAccPortThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Access Port is crossed.')
cmEthernetNetPortThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 2)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdMonValue"))
if mibBuilder.loadTexts: cmEthernetNetPortThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Network Port is crossed.')
cmFlowThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 3)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdMonValue"))
if mibBuilder.loadTexts: cmFlowThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmFlowThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Flow is crossed.')
cmQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 4)).setObjects(("CM-PERFORMANCE-MIB", "cmQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: cmQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an QOS Shaper is crossed.')
cmQosFlowPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 5)).setObjects(("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdMonValue"))
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmQosFlowPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an QOS Flow Policer is crossed.')
cmAccPortQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 6)).setObjects(("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmAccPortQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Access Port QOS Shaper is crossed.')
cmEthernetTrafficPortThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 7)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdMonValue"))
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg Ethernet Port is crossed.')
cmFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 8)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowPointThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: cmFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg FlowPoint is crossed.')
cmOAMFlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 9)).setObjects(("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdMonValue"))
if mibBuilder.loadTexts: cmOAMFlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmOAMFlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg FlowPoint is crossed.')
cmQosPolicerV2ThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 10)).setObjects(("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdMonValue"))
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmQosPolicerV2ThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg QosPolicer is crossed.')
cmQosShaperV2ThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 11)).setObjects(("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdMonValue"))
if mibBuilder.loadTexts: cmQosShaperV2ThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmQosShaperV2ThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg QosQueue is crossed.')
cmLagThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 12)).setObjects(("CM-PERFORMANCE-MIB", "cmLagThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmLagThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmLagThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmLagThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmLagThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmLagThresholdMonValue"))
if mibBuilder.loadTexts: cmLagThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmLagThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg Lag is crossed.')
cmTrafficPortQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 13)).setObjects(("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmTrafficPortQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Agg QosQueue is crossed.')
f3NetPortQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 14)).setObjects(("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3NetPortQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Network Port QOS Shaper is crossed.')
ocnStmThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 15)).setObjects(("CM-PERFORMANCE-MIB", "ocnStmThresholdIndex"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdInterval"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdVariable"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueLo"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueHi"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdMonValue"))
if mibBuilder.loadTexts: ocnStmThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an OCN/STM is crossed.')
stsVcPathThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 16)).setObjects(("CM-PERFORMANCE-MIB", "stsVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdMonValue"))
if mibBuilder.loadTexts: stsVcPathThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: stsVcPathThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an STS/VC Path is crossed.')
vtVcPathThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 17)).setObjects(("CM-PERFORMANCE-MIB", "vtVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdMonValue"))
if mibBuilder.loadTexts: vtVcPathThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: vtVcPathThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an VT/VC Path is crossed.')
e1t1ThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 18)).setObjects(("CM-PERFORMANCE-MIB", "e1t1ThresholdIndex"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdInterval"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdVariable"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdMonValue"))
if mibBuilder.loadTexts: e1t1ThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: e1t1ThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an E1/T1 is crossed.')
e3t3ThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 19)).setObjects(("CM-PERFORMANCE-MIB", "e3t3ThresholdIndex"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdInterval"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdVariable"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdMonValue"))
if mibBuilder.loadTexts: e3t3ThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: e3t3ThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an E3/T3 is crossed.')
cmPerQueryGenTrap = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 20))
if mibBuilder.loadTexts: cmPerQueryGenTrap.setStatus('current')
if mibBuilder.loadTexts: cmPerQueryGenTrap.setDescription('This trap is sent each time a pm period when the performance generation finished.\n            Note: only when cmPerQueryGenControl is enabled, this trap will be reported.')
f3FpQosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 21)).setObjects(("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3FpQosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Traffic Port Flowpoint QOS Shaper is crossed.')
f3FpQosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 22)).setObjects(("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: f3FpQosPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an Ethernet Traffic Port Flowpoint QOS Policer is crossed.')
f3AclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 23)).setObjects(("CM-PERFORMANCE-MIB", "f3AclRuleThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3AclRuleThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3AclRuleThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an ACL Rule is crossed.')
f3CardThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 2, 24)).setObjects(("CM-PERFORMANCE-MIB", "f3CardThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3CardThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3CardThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3CardThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3CardThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3CardThresholdMonValue"))
if mibBuilder.loadTexts: f3CardThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3CardThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on a card is crossed.')
cmPerfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 1))
cmPerfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2))
cmPerfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 1, 1)).setObjects(("CM-PERFORMANCE-MIB", "cmPerfObjectGroup"), ("CM-PERFORMANCE-MIB", "cmPerfNotifGroup"), ("CM-PERFORMANCE-MIB", "ethernetAccessPortPMGroup"), ("CM-PERFORMANCE-MIB", "ethernetNetworkPortPMGroup"), ("CM-PERFORMANCE-MIB", "trafficPMGroup"), ("CM-PERFORMANCE-MIB", "f3AclRulePerfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPerfCompliance = cmPerfCompliance.setStatus('current')
if mibBuilder.loadTexts: cmPerfCompliance.setDescription('Describes the requirements for conformance to the CM Perf\n             group.')
cmPerfObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 1))
for _cmPerfObjectGroup_obj in [[("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVarOptVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsPSC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryPSC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVarOptVariance"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIndex"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmFlowStatsValid"), ("CM-PERFORMANCE-MIB", "cmFlowStatsAction"), ("CM-PERFORMANCE-MIB", "cmFlowStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsUAS"), ("CM-PERFORMANCE-MIB", "cmFlowStatsES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsSES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFBCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryTime"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryValid"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryAction"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryES"), ("CM-PERFORMANCE-MIB", "cmFlowHistorySES")], [("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFBCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsValid"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsAction"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMG"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMY"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMYD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMRD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsABR"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMG"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMY"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMYD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMRD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryABR"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsATFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsFmcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsFbcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAclFwd2Cpu"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsDhcpDropNoAssocIf"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsDroppedFragmented"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsRLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsROPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsROPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsRTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryATFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryFmcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryFbcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAclFwd2Cpu"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryDhcpDropNoAssocIf"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryRLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryROPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryROPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryRTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdVarOptVariance"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIndex")], [("CM-PERFORMANCE-MIB", "cmFlowPointStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsValid"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsAction"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsABRRLRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsUAS"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsSES"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMG"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMY"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMRD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFTD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsBytesIn"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsBytesOut"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFACLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryTime"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryValid"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryAction"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryABRRLRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistorySES"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMG"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMY"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMRD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryBytesIn"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryBytesOut"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFACLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsIndex"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsValid"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsAction"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsUAS"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointStatsSES"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryTime"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryValid"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryAction"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointHistorySES"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsValid"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsAction"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsFMG"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsFMY"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsFMYD"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsFMRD"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2StatsABR"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryFMG"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryFMY"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryFMYD"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryFMRD"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2HistoryABR"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2StatsFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2HistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmLagStatsIndex"), ("CM-PERFORMANCE-MIB", "cmLagStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmLagStatsValid"), ("CM-PERFORMANCE-MIB", "cmLagStatsAction"), ("CM-PERFORMANCE-MIB", "cmLagStatsESBF"), ("CM-PERFORMANCE-MIB", "cmLagStatsESBP"), ("CM-PERFORMANCE-MIB", "cmLagStatsESBS"), ("CM-PERFORMANCE-MIB", "cmLagStatsESC"), ("CM-PERFORMANCE-MIB", "cmLagStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmLagStatsESDE"), ("CM-PERFORMANCE-MIB", "cmLagStatsESF"), ("CM-PERFORMANCE-MIB", "cmLagStatsESFS"), ("CM-PERFORMANCE-MIB", "cmLagStatsESJ"), ("CM-PERFORMANCE-MIB", "cmLagStatsESMF"), ("CM-PERFORMANCE-MIB", "cmLagStatsESMP"), ("CM-PERFORMANCE-MIB", "cmLagStatsESO"), ("CM-PERFORMANCE-MIB", "cmLagStatsESOF"), ("CM-PERFORMANCE-MIB", "cmLagStatsESOP"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP64"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP65"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP128"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP256"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP512"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmLagStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmLagStatsESUF"), ("CM-PERFORMANCE-MIB", "cmLagStatsESUP"), ("CM-PERFORMANCE-MIB", "cmLagStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmLagStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmLagStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmLagStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmLagStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmLagStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmLagStatsATFD"), ("CM-PERFORMANCE-MIB", "cmLagStatsLkupFails"), ("CM-PERFORMANCE-MIB", "cmLagHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmLagHistoryTime"), ("CM-PERFORMANCE-MIB", "cmLagHistoryValid"), ("CM-PERFORMANCE-MIB", "cmLagHistoryAction"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESC"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESF"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESO"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmLagHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmLagHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmLagHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmLagHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmLagHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmLagHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmLagHistoryATFD"), ("CM-PERFORMANCE-MIB", "cmLagHistoryLkupFails"), ("CM-PERFORMANCE-MIB", "cmLagThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmLagThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmLagThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmLagThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmLagThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmLagThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "ocnStmStatsIndex"), ("CM-PERFORMANCE-MIB", "ocnStmStatsIntervalType"), ("CM-PERFORMANCE-MIB", "ocnStmStatsValid"), ("CM-PERFORMANCE-MIB", "ocnStmStatsAction")], [("CM-PERFORMANCE-MIB", "ocnStmStatsLineLBC"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineOPT"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineOPR"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineTemp"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLinePSC"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineUASs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFCs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndUASs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionSEFs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryIndex"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryTime"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryValid"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryAction"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineLBC"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineOPT"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineOPR"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineTemp"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLinePSC"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFCs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionSEFs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionUASs"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdIndex"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdInterval"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdVariable"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueLo"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueHi"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdMonValue"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsIntervalType"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsValid"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsAction"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsESs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsSESs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsSESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryTime"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryValid"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryAction"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryESs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistorySESs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistorySESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdMonValue"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsIntervalType"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsValid"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsAction"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsESs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsSESs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsSESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryTime"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryValid"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryAction"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryESs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistorySESs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistorySESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdMonValue"), ("CM-PERFORMANCE-MIB", "e1t1StatsIndex"), ("CM-PERFORMANCE-MIB", "e1t1StatsIntervalType"), ("CM-PERFORMANCE-MIB", "e1t1StatsValid"), ("CM-PERFORMANCE-MIB", "e1t1StatsAction"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineCVs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineSESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineUASs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineLOSSs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathCVs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathUASs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSEFsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathFCs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathAISs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryIndex"), ("CM-PERFORMANCE-MIB", "e1t1HistoryTime"), ("CM-PERFORMANCE-MIB", "e1t1HistoryValid"), ("CM-PERFORMANCE-MIB", "e1t1HistoryAction"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineCVs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineSESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineUASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineLOSSs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathCVs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathUASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSEFsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathFCs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathAISs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSASs"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdIndex"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdInterval"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdVariable"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdMonValue"), ("CM-PERFORMANCE-MIB", "e3t3StatsIndex"), ("CM-PERFORMANCE-MIB", "e3t3StatsIntervalType"), ("CM-PERFORMANCE-MIB", "e3t3StatsValid"), ("CM-PERFORMANCE-MIB", "e3t3StatsAction"), ("CM-PERFORMANCE-MIB", "e3t3StatsLineCVs"), ("CM-PERFORMANCE-MIB", "e3t3StatsLineESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsLineSESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsLineLOSSs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathPCVs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCCVs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathAISs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathPESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathFCs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathSEFs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathPSESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCSESs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathPUASs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCUASs"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCESsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3StatsPathCUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3HistoryIndex"), ("CM-PERFORMANCE-MIB", "e3t3HistoryTime"), ("CM-PERFORMANCE-MIB", "e3t3HistoryValid"), ("CM-PERFORMANCE-MIB", "e3t3HistoryAction"), ("CM-PERFORMANCE-MIB", "e3t3HistoryLineCVs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryLineESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryLineSESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryLineLOSSs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathPCVs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCCVs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathAISs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathPESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathFCs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathSEFs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathPSESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCSESs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathPUASs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCUASs"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCESsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3HistoryPathCUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdIndex"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdInterval"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdVariable"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdMonValue")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        cmPerfObjectGroup = cmPerfObjectGroup.setObjects(*_cmPerfObjectGroup_obj)
    else:
        cmPerfObjectGroup = cmPerfObjectGroup.setObjects(*_cmPerfObjectGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPerfObjectGroup = cmPerfObjectGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cmPerfObjectGroup.setDescription('********************THIS GROUP IS NOW DEPRECATED*********************\n            A collection of objects used to manage the CM Perf\n             group.')
cmPerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 2)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "f3CardThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPerfNotifGroup = cmPerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmPerfNotifGroup.setDescription('A collection of notifications related to FSP150CM, FSP150CC\n             Threshold Crossing Alerts.')
ethernetAccessPortPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 3)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortStatsLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortHistoryLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdVarOptVariance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetAccessPortPMGroup = ethernetAccessPortPMGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetAccessPortPMGroup.setDescription('A collection of objects used to manage the F3 Ethernet Access\n             Port PM function.')
ethernetNetworkPortPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 4)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsPSC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryPSC"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdVarOptVariance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ethernetNetworkPortPMGroup = ethernetNetworkPortPMGroup.setStatus('current')
if mibBuilder.loadTexts: ethernetNetworkPortPMGroup.setDescription('A collection of objects used to manage the F3 Network Port PM\n             function.')
trafficPMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 5)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowStatsIndex"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmFlowStatsValid"), ("CM-PERFORMANCE-MIB", "cmFlowStatsAction"), ("CM-PERFORMANCE-MIB", "cmFlowStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsUAS"), ("CM-PERFORMANCE-MIB", "cmFlowStatsES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsSES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFBCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryTime"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryValid"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryAction"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryES"), ("CM-PERFORMANCE-MIB", "cmFlowHistorySES"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFBCDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsValid"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsAction"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMG"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMY"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMYD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsFMRD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerStatsABR"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMG"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMY"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMYD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryFMRD"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryBytesIn"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryBytesOut"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerHistoryABR"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosFlowPolicerThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmAccPortQosShaperThresholdMonValue"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3NetPortQosShaperThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficPMGroup = trafficPMGroup.setStatus('current')
if mibBuilder.loadTexts: trafficPMGroup.setDescription('A collection of objects used to manage the F3 Traffic PM  \n             function.')
cmEGXPerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 6)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmQosPolicerV2ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmQosShaperV2ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmLagThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmOAMFlowPointThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmTrafficPortQosShaperThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "e3t3ThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmPerQueryGenControl"), ("CM-PERFORMANCE-MIB", "cmPerQueryGenTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEGXPerfNotifGroup = cmEGXPerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmEGXPerfNotifGroup.setDescription('A collection of notifications related to EG-X Threshold Crossing \n             Alerts.')
trafficPMGroupCmHub = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 7)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowStatsIndex"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmFlowStatsValid"), ("CM-PERFORMANCE-MIB", "cmFlowStatsAction"), ("CM-PERFORMANCE-MIB", "cmFlowStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsUAS"), ("CM-PERFORMANCE-MIB", "cmFlowStatsES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsSES"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowStatsIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryTime"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryValid"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryAction"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryABRRLN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryES"), ("CM-PERFORMANCE-MIB", "cmFlowHistorySES"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMGN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMYDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFMRDN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesInN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryBytesOutN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryFTDA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2NMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlA2N"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMax"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2AMin"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRN2A"), ("CM-PERFORMANCE-MIB", "cmFlowHistoryIBRRlN2A"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdMonValue"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryABRRLR"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    trafficPMGroupCmHub = trafficPMGroupCmHub.setStatus('current')
if mibBuilder.loadTexts: trafficPMGroupCmHub.setDescription('A collection of objects used to manage the F3 Traffic PM  \n             function.')
cmPerfNotifGroupCmHub = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 8)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetAccPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmFlowThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmQosShaperThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmPerfNotifGroupCmHub = cmPerfNotifGroupCmHub.setStatus('current')
if mibBuilder.loadTexts: cmPerfNotifGroupCmHub.setDescription('A collection of notifications related to FSP150CM, FSP150CC\n             Threshold Crossing Alerts.')
ocnStmPortPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 9)).setObjects(("CM-PERFORMANCE-MIB", "ocnStmStatsIndex"), ("CM-PERFORMANCE-MIB", "ocnStmStatsIntervalType"), ("CM-PERFORMANCE-MIB", "ocnStmStatsValid"), ("CM-PERFORMANCE-MIB", "ocnStmStatsAction"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineLBC"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineOPT"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineOPR"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineTemp"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLinePSC"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineUASs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFCs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsLineFarEndUASs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionSESs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionCVs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionSEFs"), ("CM-PERFORMANCE-MIB", "ocnStmStatsSectionUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryIndex"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryTime"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryValid"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryAction"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineLBC"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineOPT"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineOPR"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineTemp"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLinePSC"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFCs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistoryLineFarEndUASs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionSESs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionCVs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionSEFs"), ("CM-PERFORMANCE-MIB", "ocnStmHistorySectionUASs"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdIndex"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdInterval"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdVariable"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueLo"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdValueHi"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ocnStmPortPerfGroup = ocnStmPortPerfGroup.setStatus('current')
if mibBuilder.loadTexts: ocnStmPortPerfGroup.setDescription('A collection of objects used to manage the F3 Ocn-Stm Port PM function.')
stsVcPathPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 10)).setObjects(("CM-PERFORMANCE-MIB", "stsVcPathStatsIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsIntervalType"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsValid"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsAction"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsESs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsSESs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathStatsUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsSESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndStatsUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryTime"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryValid"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryAction"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryESs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistorySESs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathHistoryUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistorySESs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryCVs"), ("CM-PERFORMANCE-MIB", "stsVcPathFarEndHistoryUASs"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "stsVcPathThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    stsVcPathPerfGroup = stsVcPathPerfGroup.setStatus('current')
if mibBuilder.loadTexts: stsVcPathPerfGroup.setDescription('A collection of objects used to manage the F3 High Order Path PM function.')
vtVcPathPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 11)).setObjects(("CM-PERFORMANCE-MIB", "vtVcPathStatsIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsIntervalType"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsValid"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsAction"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsESs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsSESs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathStatsUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsSESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndStatsUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryTime"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryValid"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryAction"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryESs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistorySESs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathHistoryUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistorySESs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryCVs"), ("CM-PERFORMANCE-MIB", "vtVcPathFarEndHistoryUASs"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdIndex"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdInterval"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdVariable"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueLo"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdValueHi"), ("CM-PERFORMANCE-MIB", "vtVcPathThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vtVcPathPerfGroup = vtVcPathPerfGroup.setStatus('current')
if mibBuilder.loadTexts: vtVcPathPerfGroup.setDescription('A collection of objects used to manage the F3 Low Order Path PM function.')
e1T1PerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 12)).setObjects(("CM-PERFORMANCE-MIB", "e1t1StatsIndex"), ("CM-PERFORMANCE-MIB", "e1t1StatsIntervalType"), ("CM-PERFORMANCE-MIB", "e1t1StatsValid"), ("CM-PERFORMANCE-MIB", "e1t1StatsAction"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineCVs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineSESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineUASs"), ("CM-PERFORMANCE-MIB", "e1t1StatsLineLOSSs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathCVs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSESs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathUASs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSEFsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathFCs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathAISs"), ("CM-PERFORMANCE-MIB", "e1t1StatsPathSASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryIndex"), ("CM-PERFORMANCE-MIB", "e1t1HistoryTime"), ("CM-PERFORMANCE-MIB", "e1t1HistoryValid"), ("CM-PERFORMANCE-MIB", "e1t1HistoryAction"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineCVs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineSESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineUASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryLineLOSSs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathCVs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSESs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathUASs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathCVsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSESsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSEFsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathUASsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathFCs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathFCsFarEnd"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathAISs"), ("CM-PERFORMANCE-MIB", "e1t1HistoryPathSASs"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdIndex"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdInterval"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdVariable"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueLo"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdValueHi"), ("CM-PERFORMANCE-MIB", "e1t1ThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    e1T1PerfGroup = e1T1PerfGroup.setStatus('current')
if mibBuilder.loadTexts: e1T1PerfGroup.setDescription('A collection of objects used to manage the F3 E1-T1 Ports\n         and Facility Ports PM function.')
flowPointPmGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 13)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowPointStatsIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsValid"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsAction"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsABRRLRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsUAS"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsSES"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMG"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMY"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMRD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFTD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsBytesIn"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsBytesOut"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFREDD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFACLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMYD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMGD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFMCD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFBCD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsBT"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBRMax"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBRRlMax"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBRMin"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBRRlMin"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBR"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsIBRRl"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFdRxFb"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFdTxFb"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsFdicd"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsNumLearnTableFlushes"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsEfFramesDiscarded"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsEfBytesDiscarded"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmFlowPointStatsAclRuleDrop"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryTime"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryValid"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryAction"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryABRRLRx"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistorySES"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMG"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMY"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMRD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFTD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryBytesIn"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryBytesOut"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFREDD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFACLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMYD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMGD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFMCD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFBCD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryBT"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFLD"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBRMax"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBRRlMax"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBRMin"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBRRlMin"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBR"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryIBRRl"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFdRxFb"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFdTxFb"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryFdicd"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryNumLearnTableFlushes"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryEfFramesDiscarded"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryEfBytesDiscarded"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmFlowPointHistoryAclRuleDrop"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    flowPointPmGroup = flowPointPmGroup.setStatus('current')
if mibBuilder.loadTexts: flowPointPmGroup.setDescription('A collection of objects used to manage the flow point pm.')
cmFlowBWPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 14)).setObjects(("CM-PERFORMANCE-MIB", "cmFlowBWA2NCIR"), ("CM-PERFORMANCE-MIB", "cmFlowBWA2NEIR"), ("CM-PERFORMANCE-MIB", "cmFlowBWN2ACIR"), ("CM-PERFORMANCE-MIB", "cmFlowBWN2AEIR"), ("CM-PERFORMANCE-MIB", "cmFlowBWA2NGFB"), ("CM-PERFORMANCE-MIB", "cmFlowBWA2NMFB"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmFlowBWPerfGroup = cmFlowBWPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cmFlowBWPerfGroup.setDescription('A collection of objects used to manage the Flow bandwidth statistics.\n         Non-mandatory group.')
ocnStmThresholdVarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 15)).setObjects(("CM-PERFORMANCE-MIB", "ocnStmThresholdVarOprVariance"), ("CM-PERFORMANCE-MIB", "ocnStmThresholdVarOptVariance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ocnStmThresholdVarGroup = ocnStmThresholdVarGroup.setStatus('current')
if mibBuilder.loadTexts: ocnStmThresholdVarGroup.setDescription('A collection of objects used to manage ocn stm threshold variable.')
f3FpQosShaperPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 16)).setObjects(("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsValid"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsAction"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsBT"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsBTD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsFD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsFTD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsABRRL"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsBREDD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperStatsFREDD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryTime"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryValid"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryAction"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryBT"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryBTD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryFD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryFTD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryABRRL"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryBREDD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperHistoryFREDD"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosShaperPerfGroup = f3FpQosShaperPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3FpQosShaperPerfGroup.setDescription('A collection of objects used to manage the flow point qos shaper pm.')
f3FpQosPolicerPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 17)).setObjects(("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsValid"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsAction"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsFMG"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsFMY"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsFMRD"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsBytesIn"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsBytesOut"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerStatsABR"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryTime"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryValid"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryAction"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryFMG"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryFMY"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryFMRD"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryBytesIn"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryBytesOut"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerHistoryABR"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3FpQosPolicerPerfGroup = f3FpQosPolicerPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3FpQosPolicerPerfGroup.setDescription('A collection of objects used to manage the flow point qos policer pm.')
cmEthernetTrafficPortPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 18)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIntervalType"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsValid"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAction"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESO"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLES"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsATFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsFmcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsFbcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsAclFwd2Cpu"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsDhcpDropNoAssocIf"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsDroppedFragmented"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsRLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsROPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsROPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortStatsRTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryTime"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryValid"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAction"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESBS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESCAE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESDE"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESFS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESJ"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESMF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESMP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESO"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESOF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESOP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP64"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP65"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP128"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP256"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP512"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP1024"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESP1519"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESUF"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryESUP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2CPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2CPFP"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLES"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryOPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryOPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAUFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAPFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryABRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryABRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryATFD"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryUAS"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryLkupFails"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2PTRxFramesEncap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryL2PTTxFramesDecap"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMaxRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMaxTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMinRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRMinTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRRx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryIBRTx"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryFmcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryFbcd"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAclDropNoMatch"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryAclFwd2Cpu"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryDhcpDropNoAssocIf"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryDroppedFragmented"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryRLBC"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryROPT"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryROPR"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortHistoryRTemp"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdIndex"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdInterval"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdVariable"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueLo"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdValueHi"), ("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetTrafficPortPerfGroup = cmEthernetTrafficPortPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cmEthernetTrafficPortPerfGroup.setDescription('A collection of objects used to manage the flow point qos policer pm.')
f3AclRulePerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 19)).setObjects(("CM-PERFORMANCE-MIB", "f3AclRuleStatsIndex"), ("CM-PERFORMANCE-MIB", "f3AclRuleStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3AclRuleStatsValid"), ("CM-PERFORMANCE-MIB", "f3AclRuleStatsAction"), ("CM-PERFORMANCE-MIB", "f3AclRuleStatsRuleMatch"), ("CM-PERFORMANCE-MIB", "f3AclRuleHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3AclRuleHistoryTime"), ("CM-PERFORMANCE-MIB", "f3AclRuleHistoryValid"), ("CM-PERFORMANCE-MIB", "f3AclRuleHistoryAction"), ("CM-PERFORMANCE-MIB", "f3AclRuleHistoryRuleMatch"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3AclRulePerfGroup = f3AclRulePerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3AclRulePerfGroup.setDescription('A collection of objects used to manage the ACL Rule pm.')
cmXgProPerfNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 20)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetTrafficPortThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "cmFlowPointThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "f3FpQosShaperThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "f3FpQosPolicerThresholdCrossingAlert"), ("CM-PERFORMANCE-MIB", "f3AclRuleThresholdCrossingAlert"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmXgProPerfNotifGroup = cmXgProPerfNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cmXgProPerfNotifGroup.setDescription('A collection of notifications related to FSP150CC XGPRO\n             Threshold Crossing Alerts.')
cmEthernetNetPortXdslPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 21)).setObjects(("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsPkt"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsCrcError"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsPkt"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsFecs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsFecs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsEs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsEs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsSes"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsSes"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsLoss"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsLoss"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsUas"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsCv"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsCv"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsFec"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsFec"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslDsFullInits"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortStatsXdslUsFullInits"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsPkt"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsCrcError"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsPkt"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsFecs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsFecs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsEs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsEs"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsSes"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsSes"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsLoss"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsLoss"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsUas"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsCv"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsCv"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsFec"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsFec"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslDsFullInits"), ("CM-PERFORMANCE-MIB", "cmEthernetNetPortHistoryXdslUsFullInits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmEthernetNetPortXdslPerfGroup = cmEthernetNetPortXdslPerfGroup.setStatus('current')
if mibBuilder.loadTexts: cmEthernetNetPortXdslPerfGroup.setDescription('A collection of objects used to manage the XDSL related pm of network port.')
f3CardPerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 5, 3, 2, 22)).setObjects(("CM-PERFORMANCE-MIB", "f3CardStatsIndex"), ("CM-PERFORMANCE-MIB", "f3CardStatsIntervalType"), ("CM-PERFORMANCE-MIB", "f3CardStatsValid"), ("CM-PERFORMANCE-MIB", "f3CardStatsAction"), ("CM-PERFORMANCE-MIB", "f3CardStatsACU"), ("CM-PERFORMANCE-MIB", "f3CardStatsMCU"), ("CM-PERFORMANCE-MIB", "f3CardStatsICU"), ("CM-PERFORMANCE-MIB", "f3CardStatsAMU"), ("CM-PERFORMANCE-MIB", "f3CardStatsMMU"), ("CM-PERFORMANCE-MIB", "f3CardStatsIMU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryIndex"), ("CM-PERFORMANCE-MIB", "f3CardHistoryTime"), ("CM-PERFORMANCE-MIB", "f3CardHistoryValid"), ("CM-PERFORMANCE-MIB", "f3CardHistoryAction"), ("CM-PERFORMANCE-MIB", "f3CardHistoryACU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryMCU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryICU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryAMU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryMMU"), ("CM-PERFORMANCE-MIB", "f3CardHistoryIMU"), ("CM-PERFORMANCE-MIB", "f3CardThresholdIndex"), ("CM-PERFORMANCE-MIB", "f3CardThresholdInterval"), ("CM-PERFORMANCE-MIB", "f3CardThresholdVariable"), ("CM-PERFORMANCE-MIB", "f3CardThresholdValueLo"), ("CM-PERFORMANCE-MIB", "f3CardThresholdValueHi"), ("CM-PERFORMANCE-MIB", "f3CardThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3CardPerfGroup = f3CardPerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3CardPerfGroup.setDescription('A collection of objects used to manage the card pm.')
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", PYSNMP_MODULE_ID=cmPerformanceMIB, cmFlowPointHistoryNumLearnTableFlushes=cmFlowPointHistoryNumLearnTableFlushes, cmAccPortQosShaperStatsTable=cmAccPortQosShaperStatsTable, f3CardStatsMCU=f3CardStatsMCU, cmQosShaperThresholdValueLo=cmQosShaperThresholdValueLo, cmFlowPointHistoryFMYD=cmFlowPointHistoryFMYD, cmFlowHistoryFMYDN2A=cmFlowHistoryFMYDN2A, f3NetPortQosShaperStatsBR=f3NetPortQosShaperStatsBR, cmOAMFlowPointThresholdEntry=cmOAMFlowPointThresholdEntry, cmQosShaperHistoryABRRL=cmQosShaperHistoryABRRL, cmLagStatsESMP=cmLagStatsESMP, cmEthernetAccPortThresholdValueHi=cmEthernetAccPortThresholdValueHi, cmEthernetTrafficPortHistoryDroppedFragmented=cmEthernetTrafficPortHistoryDroppedFragmented, stsVcPathFarEndHistorySESs=stsVcPathFarEndHistorySESs, f3FpQosPolicerStatsIndex=f3FpQosPolicerStatsIndex, cmEthernetTrafficPortStatsAPFD=cmEthernetTrafficPortStatsAPFD, cmEthernetAccPortStatsIntervalType=cmEthernetAccPortStatsIntervalType, cmFlowPointHistoryFTD=cmFlowPointHistoryFTD, cmQosPolicerV2StatsFMRD=cmQosPolicerV2StatsFMRD, cmQosShaperV2ThresholdValueHi=cmQosShaperV2ThresholdValueHi, cmEthernetNetPortXdslStatsEntry=cmEthernetNetPortXdslStatsEntry, ocnStmThresholdCrossingAlert=ocnStmThresholdCrossingAlert, cmOAMFlowPointHistoryEntry=cmOAMFlowPointHistoryEntry, cmLagHistoryESBF=cmLagHistoryESBF, stsVcPathHistorySESs=stsVcPathHistorySESs, cmEthernetAccPortThresholdVarOprVariance=cmEthernetAccPortThresholdVarOprVariance, cmEthernetTrafficPortHistoryESCAE=cmEthernetTrafficPortHistoryESCAE, e3t3StatsPathCCVs=e3t3StatsPathCCVs, cmEthernetNetPortHistoryEntry=cmEthernetNetPortHistoryEntry, cmEthernetNetPortHistoryXdslDsCv=cmEthernetNetPortHistoryXdslDsCv, f3FpQosShaperStatsBTD=f3FpQosShaperStatsBTD, cmLagHistoryESDE=cmLagHistoryESDE, cmTrafficPortQosShaperStatsFREDD=cmTrafficPortQosShaperStatsFREDD, ocnStmHistoryLineLBC=ocnStmHistoryLineLBC, f3NetPortQosShaperStatsTable=f3NetPortQosShaperStatsTable, cmEthernetAccPortThresholdIndex=cmEthernetAccPortThresholdIndex, cmEthernetNetPortStatsESP1519=cmEthernetNetPortStatsESP1519, f3NetPortQosShaperHistoryEntry=f3NetPortQosShaperHistoryEntry, cmEthernetTrafficPortStatsABRRx=cmEthernetTrafficPortStatsABRRx, stsVcPathThresholdMonValue=stsVcPathThresholdMonValue, ocnStmStatsSectionESs=ocnStmStatsSectionESs, vtVcPathStatsESs=vtVcPathStatsESs, cmEthernetAccPortHistoryESBP=cmEthernetAccPortHistoryESBP, cmFlowPointHistoryTable=cmFlowPointHistoryTable, cmEthernetNetPortStatsESDE=cmEthernetNetPortStatsESDE, cmEthernetNetPortStatsESF=cmEthernetNetPortStatsESF, cmFlowPointHistoryIBRMin=cmFlowPointHistoryIBRMin, cmEthernetAccPortHistoryESP64=cmEthernetAccPortHistoryESP64, cmFlowStatsIBRRlA2N=cmFlowStatsIBRRlA2N, cmTrafficPortQosShaperThresholdVariable=cmTrafficPortQosShaperThresholdVariable, ocnStmHistoryIndex=ocnStmHistoryIndex, cmQosFlowPolicerHistoryABR=cmQosFlowPolicerHistoryABR, cmAccPortQosShaperHistoryFR=cmAccPortQosShaperHistoryFR, f3AclRuleStatsRuleMatch=f3AclRuleStatsRuleMatch, cmQosShaperStatsBR=cmQosShaperStatsBR, cmTrafficPortQosShaperStatsBT=cmTrafficPortQosShaperStatsBT, cmLagHistoryAPFD=cmLagHistoryAPFD, stsVcPathStatsEntry=stsVcPathStatsEntry, e3t3ThresholdValueLo=e3t3ThresholdValueLo, cmFlowHistoryABRRLRA2N=cmFlowHistoryABRRLRA2N, cmOAMFlowPointStatsSES=cmOAMFlowPointStatsSES, cmTrafficPortQosShaperStatsABRRL=cmTrafficPortQosShaperStatsABRRL, f3FpQosPolicerStatsBytesOut=f3FpQosPolicerStatsBytesOut, cmFlowPointHistoryIBRRl=cmFlowPointHistoryIBRRl, cmEthernetTrafficPortThresholdMonValue=cmEthernetTrafficPortThresholdMonValue, cmEthernetAccPortHistoryABRRx=cmEthernetAccPortHistoryABRRx, cmQosShaperThresholdEntry=cmQosShaperThresholdEntry, e3t3HistoryTable=e3t3HistoryTable, cmQosPolicerV2HistoryABR=cmQosPolicerV2HistoryABR, ocnStmHistoryLineFarEndSESs=ocnStmHistoryLineFarEndSESs, cmLagStatsLkupFails=cmLagStatsLkupFails, f3FpQosShaperHistoryAction=f3FpQosShaperHistoryAction, cmFlowStatsBytesOutN2A=cmFlowStatsBytesOutN2A, cmEthernetNetPortStatsXdslUsPkt=cmEthernetNetPortStatsXdslUsPkt, cmFlowPointStatsIBRRl=cmFlowPointStatsIBRRl, e1t1StatsPathAISs=e1t1StatsPathAISs, cmEthernetNetPortHistoryTime=cmEthernetNetPortHistoryTime, cmEthernetAccPortStatsUAS=cmEthernetAccPortStatsUAS, f3NetPortQosShaperStatsBREDD=f3NetPortQosShaperStatsBREDD, cmFlowStatsUAS=cmFlowStatsUAS, e3t3StatsPathSEFs=e3t3StatsPathSEFs, cmEthernetTrafficPortStatsIBRMaxRx=cmEthernetTrafficPortStatsIBRMaxRx, cmOAMFlowPointThresholdTable=cmOAMFlowPointThresholdTable, e3t3HistoryPathCESsFarEnd=e3t3HistoryPathCESsFarEnd, ocnStmThresholdMonValue=ocnStmThresholdMonValue, cmEthernetTrafficPortHistoryEntry=cmEthernetTrafficPortHistoryEntry, cmEthernetNetPortThresholdValueHi=cmEthernetNetPortThresholdValueHi, cmEthernetNetPortStatsESBP=cmEthernetNetPortStatsESBP, cmEthernetAccPortStatsIBRRx=cmEthernetAccPortStatsIBRRx, cmEthernetAccPortHistoryAclDropNoMatch=cmEthernetAccPortHistoryAclDropNoMatch, cmAccPortQosShaperHistoryAction=cmAccPortQosShaperHistoryAction, e3t3HistoryPathPUASs=e3t3HistoryPathPUASs, cmQosShaperHistoryAction=cmQosShaperHistoryAction, f3FpQosPolicerThresholdMonValue=f3FpQosPolicerThresholdMonValue, f3CardHistoryValid=f3CardHistoryValid, cmQosPolicerV2HistoryTable=cmQosPolicerV2HistoryTable, stsVcPathStatsSESs=stsVcPathStatsSESs, cmAccPortQosShaperHistoryABRRL=cmAccPortQosShaperHistoryABRRL, cmEthernetNetPortStatsFmcd=cmEthernetNetPortStatsFmcd, cmEthernetNetPortHistoryXdslDsPkt=cmEthernetNetPortHistoryXdslDsPkt, stsVcPathStatsTable=stsVcPathStatsTable, ocnStmStatsLineFarEndUASs=ocnStmStatsLineFarEndUASs, cmEthernetAccPortHistoryLkupFails=cmEthernetAccPortHistoryLkupFails, cmEthernetAccPortHistoryESP256=cmEthernetAccPortHistoryESP256, cmEthernetTrafficPortStatsABRTx=cmEthernetTrafficPortStatsABRTx, vtVcPathThresholdVariable=vtVcPathThresholdVariable, cmQosShaperV2StatsFTD=cmQosShaperV2StatsFTD, stsVcPathThresholdIndex=stsVcPathThresholdIndex, cmEthernetTrafficPortStatsESP=cmEthernetTrafficPortStatsESP, cmFlowHistoryIBRRlN2A=cmFlowHistoryIBRRlN2A, cmEthernetTrafficPortStatsESOF=cmEthernetTrafficPortStatsESOF, cmEthernetNetPortStatsXdslDsFec=cmEthernetNetPortStatsXdslDsFec, vtVcPathHistoryValid=vtVcPathHistoryValid, ocnStmHistoryLineFarEndUASs=ocnStmHistoryLineFarEndUASs, e1t1ThresholdCrossingAlert=e1t1ThresholdCrossingAlert, cmEthernetNetPortStatsLBC=cmEthernetNetPortStatsLBC, cmQosShaperV2ThresholdIndex=cmQosShaperV2ThresholdIndex, cmAccPortQosShaperStatsBR=cmAccPortQosShaperStatsBR, cmTrafficPortQosShaperStatsEntry=cmTrafficPortQosShaperStatsEntry, f3FpQosShaperHistoryBREDD=f3FpQosShaperHistoryBREDD, cmEthernetTrafficPortStatsESF=cmEthernetTrafficPortStatsESF, cmTrafficPortQosShaperThresholdCrossingAlert=cmTrafficPortQosShaperThresholdCrossingAlert, cmFlowPointHistoryFD=cmFlowPointHistoryFD, cmLagHistoryESO=cmLagHistoryESO, cmEthernetNetPortThresholdVariable=cmEthernetNetPortThresholdVariable, cmLagThresholdTable=cmLagThresholdTable, cmFlowHistoryValid=cmFlowHistoryValid, cmQosPolicerV2HistoryBytesOut=cmQosPolicerV2HistoryBytesOut, cmEthernetAccPortHistoryAclFwd2Cpu=cmEthernetAccPortHistoryAclFwd2Cpu, cmEthernetAccPortHistoryL2CPFD=cmEthernetAccPortHistoryL2CPFD, f3AclRuleThresholdTable=f3AclRuleThresholdTable, f3CardHistoryACU=f3CardHistoryACU, cmEthernetAccPortHistoryFmcd=cmEthernetAccPortHistoryFmcd, cmEthernetTrafficPortHistoryESC=cmEthernetTrafficPortHistoryESC, cmEthernetNetPortXdslHistoryEntry=cmEthernetNetPortXdslHistoryEntry, cmFlowPointHistoryAction=cmFlowPointHistoryAction, cmEthernetTrafficPortStatsLBC=cmEthernetTrafficPortStatsLBC, cmEthernetAccPortStatsESJ=cmEthernetAccPortStatsESJ, stsVcPathHistoryIndex=stsVcPathHistoryIndex, cmFlowHistoryFMYA2N=cmFlowHistoryFMYA2N, f3NetPortQosShaperHistoryBT=f3NetPortQosShaperHistoryBT, cmEthernetNetPortHistoryIBRMinRx=cmEthernetNetPortHistoryIBRMinRx, cmEthernetAccPortStatsOPR=cmEthernetAccPortStatsOPR, cmLagHistoryESP=cmLagHistoryESP, cmEthernetNetPortHistoryL2PTRxFramesEncap=cmEthernetNetPortHistoryL2PTRxFramesEncap, e1t1StatsLineESsFarEnd=e1t1StatsLineESsFarEnd, e3t3StatsPathCESs=e3t3StatsPathCESs, cmLagHistoryABRRx=cmLagHistoryABRRx, e1t1StatsPathFCsFarEnd=e1t1StatsPathFCsFarEnd, stsVcPathStatsValid=stsVcPathStatsValid, cmLagStatsAction=cmLagStatsAction, cmEthernetNetPortHistoryESP64=cmEthernetNetPortHistoryESP64, cmFlowStatsIBRA2NMin=cmFlowStatsIBRA2NMin, cmOAMFlowPointHistoryValid=cmOAMFlowPointHistoryValid, cmEthernetNetPortHistoryLES=cmEthernetNetPortHistoryLES, cmQosShaperHistoryTime=cmQosShaperHistoryTime, cmEthernetNetPortStatsXdslDsUas=cmEthernetNetPortStatsXdslDsUas, cmFlowStatsFMGN2A=cmFlowStatsFMGN2A, vtVcPathThresholdTable=vtVcPathThresholdTable, f3FpQosPolicerStatsFMY=f3FpQosPolicerStatsFMY, cmLagStatsESP512=cmLagStatsESP512, cmEthernetNetPortStatsAUFD=cmEthernetNetPortStatsAUFD, cmAccPortQosShaperThresholdVariable=cmAccPortQosShaperThresholdVariable, cmEthernetNetPortStatsESP1024=cmEthernetNetPortStatsESP1024, cmEthernetTrafficPortThresholdEntry=cmEthernetTrafficPortThresholdEntry, ocnStmThresholdVarEntry=ocnStmThresholdVarEntry, cmPerfNotifGroup=cmPerfNotifGroup, vtVcPathHistorySESs=vtVcPathHistorySESs, f3FpQosShaperStatsValid=f3FpQosShaperStatsValid, ocnStmHistoryLineFCs=ocnStmHistoryLineFCs, cmFlowStatsBytesOutA2N=cmFlowStatsBytesOutA2N, ocnStmStatsSectionCVs=ocnStmStatsSectionCVs, f3NetPortQosShaperHistoryFD=f3NetPortQosShaperHistoryFD, e3t3StatsPathCESsFarEnd=e3t3StatsPathCESsFarEnd, f3FpQosShaperStatsFREDD=f3FpQosShaperStatsFREDD, ocnStmStatsSectionUASs=ocnStmStatsSectionUASs, f3FpQosShaperThresholdTable=f3FpQosShaperThresholdTable, cmTrafficPortQosShaperHistoryValid=cmTrafficPortQosShaperHistoryValid, e1t1ThresholdValueHi=e1t1ThresholdValueHi, cmEthernetNetPortStatsXdslUsFec=cmEthernetNetPortStatsXdslUsFec, cmQosShaperV2HistoryIndex=cmQosShaperV2HistoryIndex, cmEthernetTrafficPortStatsATFD=cmEthernetTrafficPortStatsATFD, e1t1StatsPathUASs=e1t1StatsPathUASs, cmQosShaperStatsValid=cmQosShaperStatsValid, cmFlowHistoryFMRDN2A=cmFlowHistoryFMRDN2A, cmEthernetAccPortHistoryESMF=cmEthernetAccPortHistoryESMF, vtVcPathStatsUASs=vtVcPathStatsUASs, f3FpQosShaperThresholdIndex=f3FpQosShaperThresholdIndex, cmEthernetAccPortHistoryUAS=cmEthernetAccPortHistoryUAS, cmFlowPointHistoryEfFramesDiscarded=cmFlowPointHistoryEfFramesDiscarded, cmEthernetTrafficPortHistoryL2PTTxFramesDecap=cmEthernetTrafficPortHistoryL2PTTxFramesDecap, cmFlowPointHistoryABRRLRx=cmFlowPointHistoryABRRLRx, cmFlowHistoryABRRLA2N=cmFlowHistoryABRRLA2N, e3t3StatsPathAISs=e3t3StatsPathAISs, f3FpQosPolicerStatsEntry=f3FpQosPolicerStatsEntry, cmEthernetNetPortStatsFbcd=cmEthernetNetPortStatsFbcd, cmEthernetTrafficPortHistoryIBRRx=cmEthernetTrafficPortHistoryIBRRx, cmAccPortQosShaperHistoryBTD=cmAccPortQosShaperHistoryBTD, vtVcPathHistoryESs=vtVcPathHistoryESs, cmQosShaperV2StatsBT=cmQosShaperV2StatsBT, cmEthernetNetPortStatsL2PTRxFramesEncap=cmEthernetNetPortStatsL2PTRxFramesEncap, cmLagHistoryESP1024=cmLagHistoryESP1024, cmQosShaperStatsAction=cmQosShaperStatsAction, stsVcPathThresholdInterval=stsVcPathThresholdInterval, ocnStmHistorySectionSEFs=ocnStmHistorySectionSEFs, ocnStmHistoryTable=ocnStmHistoryTable, e3t3HistoryLineCVs=e3t3HistoryLineCVs, cmFlowHistoryFMRDA2N=cmFlowHistoryFMRDA2N, cmEthernetAccPortStatsESUP=cmEthernetAccPortStatsESUP, cmEthernetAccPortThresholdVarTable=cmEthernetAccPortThresholdVarTable, cmEthernetNetPortStatsESP=cmEthernetNetPortStatsESP, cmFlowHistoryBytesOutA2N=cmFlowHistoryBytesOutA2N, cmQosFlowPolicerHistoryTime=cmQosFlowPolicerHistoryTime, cmQosPolicerV2StatsBytesIn=cmQosPolicerV2StatsBytesIn, cmFlowBWA2NCIR=cmFlowBWA2NCIR, cmQosShaperStatsIndex=cmQosShaperStatsIndex, e1t1HistoryLineESsFarEnd=e1t1HistoryLineESsFarEnd, cmFlowHistoryFMYN2A=cmFlowHistoryFMYN2A, f3FpQosShaperHistoryValid=f3FpQosShaperHistoryValid, cmFlowPointHistoryValid=cmFlowPointHistoryValid, cmEthernetTrafficPortHistoryUAS=cmEthernetTrafficPortHistoryUAS, cmEthernetTrafficPortStatsOPT=cmEthernetTrafficPortStatsOPT, f3FpQosShaperHistoryFD=f3FpQosShaperHistoryFD, cmEthernetNetPortStatsESP64=cmEthernetNetPortStatsESP64, f3CardHistoryIMU=f3CardHistoryIMU, cmFlowPointThresholdValueLo=cmFlowPointThresholdValueLo, cmEthernetTrafficPortHistoryESMP=cmEthernetTrafficPortHistoryESMP, e3t3HistoryPathCSESsFarEnd=e3t3HistoryPathCSESsFarEnd, cmAccPortQosShaperStatsEntry=cmAccPortQosShaperStatsEntry, cmQosPolicerV2ThresholdIndex=cmQosPolicerV2ThresholdIndex, cmEthernetNetPortHistoryOPT=cmEthernetNetPortHistoryOPT, cmEthernetNetPortThresholdValueLo=cmEthernetNetPortThresholdValueLo, cmFlowPointStatsEntry=cmFlowPointStatsEntry, f3NetPortQosShaperThresholdInterval=f3NetPortQosShaperThresholdInterval, cmQosFlowPolicerThresholdCrossingAlert=cmQosFlowPolicerThresholdCrossingAlert, cmEthernetNetPortHistoryABRRx=cmEthernetNetPortHistoryABRRx, f3AclRuleHistoryRuleMatch=f3AclRuleHistoryRuleMatch, cmQosShaperV2HistoryFTD=cmQosShaperV2HistoryFTD, cmLagStatsESUF=cmLagStatsESUF, cmFlowHistoryFMGN2A=cmFlowHistoryFMGN2A, cmEthernetTrafficPortHistoryROPT=cmEthernetTrafficPortHistoryROPT, e1t1HistoryPathUASsFarEnd=e1t1HistoryPathUASsFarEnd, cmFlowStatsIBRN2A=cmFlowStatsIBRN2A, cmEthernetNetPortHistoryL2CPFD=cmEthernetNetPortHistoryL2CPFD, cmFlowHistoryBytesInA2N=cmFlowHistoryBytesInA2N, cmFlowStatsIntervalType=cmFlowStatsIntervalType, cmEthernetTrafficPortThresholdInterval=cmEthernetTrafficPortThresholdInterval, cmEthernetTrafficPortStatsFbcd=cmEthernetTrafficPortStatsFbcd, cmEthernetAccPortStatsESBS=cmEthernetAccPortStatsESBS, cmEthernetTrafficPortHistoryESP=cmEthernetTrafficPortHistoryESP, cmEthernetNetPortStatsESP128=cmEthernetNetPortStatsESP128, cmPerfCompliances=cmPerfCompliances, cmOAMFlowPointThresholdValueLo=cmOAMFlowPointThresholdValueLo, cmLagStatsESUP=cmLagStatsESUP)
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", cmQosShaperV2StatsFD=cmQosShaperV2StatsFD, cmEthernetAccPortHistoryESJ=cmEthernetAccPortHistoryESJ, cmEthernetAccPortHistoryEntry=cmEthernetAccPortHistoryEntry, vtVcPathStatsCVs=vtVcPathStatsCVs, cmEthernetAccPortHistoryESP128=cmEthernetAccPortHistoryESP128, f3AclRuleStatsTable=f3AclRuleStatsTable, cmFlowThresholdValueLo=cmFlowThresholdValueLo, f3CardStatsAction=f3CardStatsAction, cmQosShaperThresholdIndex=cmQosShaperThresholdIndex, cmQosPolicerV2HistoryBytesIn=cmQosPolicerV2HistoryBytesIn, f3FpQosShaperStatsBT=f3FpQosShaperStatsBT, cmFlowHistoryBytesInN2A=cmFlowHistoryBytesInN2A, e3t3HistoryValid=e3t3HistoryValid, e3t3HistoryPathAISs=e3t3HistoryPathAISs, cmAccPortQosShaperHistoryBREDD=cmAccPortQosShaperHistoryBREDD, cmEthernetTrafficPortHistoryTemp=cmEthernetTrafficPortHistoryTemp, f3FpQosShaperStatsTable=f3FpQosShaperStatsTable, cmQosShaperV2HistoryBTD=cmQosShaperV2HistoryBTD, cmLagHistoryEntry=cmLagHistoryEntry, cmLagStatsESC=cmLagStatsESC, vtVcPathStatsAction=vtVcPathStatsAction, cmFlowThresholdValueHi=cmFlowThresholdValueHi, cmEthernetNetPortStatsL2CPFD=cmEthernetNetPortStatsL2CPFD, cmFlowHistoryFMCDA2N=cmFlowHistoryFMCDA2N, cmEthernetNetPortStatsTable=cmEthernetNetPortStatsTable, ocnStmHistoryLineOPT=ocnStmHistoryLineOPT, cmLagStatsEntry=cmLagStatsEntry, vtVcPathThresholdValueLo=vtVcPathThresholdValueLo, f3AclRuleHistoryValid=f3AclRuleHistoryValid, cmEthernetAccPortStatsESP64=cmEthernetAccPortStatsESP64, f3AclRuleThresholdMonValue=f3AclRuleThresholdMonValue, vtVcPathFarEndStatsSESs=vtVcPathFarEndStatsSESs, cmQosShaperThresholdInterval=cmQosShaperThresholdInterval, e3t3HistoryLineSESs=e3t3HistoryLineSESs, cmQosFlowPolicerThresholdEntry=cmQosFlowPolicerThresholdEntry, cmEthernetNetPortHistoryESF=cmEthernetNetPortHistoryESF, cmAccPortQosShaperHistoryBR=cmAccPortQosShaperHistoryBR, cmEthernetTrafficPortStatsESBP=cmEthernetTrafficPortStatsESBP, stsVcPathStatsAction=stsVcPathStatsAction, stsVcPathFarEndStatsSESs=stsVcPathFarEndStatsSESs, cmFlowHistoryBytesOutN2A=cmFlowHistoryBytesOutN2A, stsVcPathHistoryAction=stsVcPathHistoryAction, ocnStmStatsLineFCs=ocnStmStatsLineFCs, cmEthernetNetPortHistoryESP65=cmEthernetNetPortHistoryESP65, ocnStmThresholdEntry=ocnStmThresholdEntry, ocnStmHistoryTime=ocnStmHistoryTime, cmQosShaperV2HistoryAction=cmQosShaperV2HistoryAction, cmAccPortQosShaperThresholdIndex=cmAccPortQosShaperThresholdIndex, cmFlowHistoryAction=cmFlowHistoryAction, cmFlowStatsABRRLN2A=cmFlowStatsABRRLN2A, cmLagThresholdMonValue=cmLagThresholdMonValue, f3AclRuleHistoryTime=f3AclRuleHistoryTime, f3CardThresholdTable=f3CardThresholdTable, f3CardStatsEntry=f3CardStatsEntry, cmFlowPointStatsFMRD=cmFlowPointStatsFMRD, cmEthernetTrafficPortHistoryESF=cmEthernetTrafficPortHistoryESF, cmFlowPointStatsIntervalType=cmFlowPointStatsIntervalType, vtVcPathThresholdValueHi=vtVcPathThresholdValueHi, f3CardThresholdMonValue=f3CardThresholdMonValue, e3t3HistoryAction=e3t3HistoryAction, f3CardHistoryMMU=f3CardHistoryMMU, f3FpQosShaperStatsIntervalType=f3FpQosShaperStatsIntervalType, cmQosFlowPolicerHistoryFMYD=cmQosFlowPolicerHistoryFMYD, f3FpQosShaperStatsAction=f3FpQosShaperStatsAction, f3FpQosShaperHistoryEntry=f3FpQosShaperHistoryEntry, f3CardStatsIMU=f3CardStatsIMU, cmQosFlowPolicerThresholdTable=cmQosFlowPolicerThresholdTable, cmLagThresholdValueHi=cmLagThresholdValueHi, cmEthernetTrafficPortStatsESP1519=cmEthernetTrafficPortStatsESP1519, cmEthernetAccPortHistoryAPFD=cmEthernetAccPortHistoryAPFD, cmFlowPointHistoryABRRx=cmFlowPointHistoryABRRx, f3NetPortQosShaperHistoryIndex=f3NetPortQosShaperHistoryIndex, cmEthernetTrafficPortHistoryL2CPFD=cmEthernetTrafficPortHistoryL2CPFD, stsVcPathStatsIndex=stsVcPathStatsIndex, f3NetPortQosShaperThresholdEntry=f3NetPortQosShaperThresholdEntry, cmFlowThresholdInterval=cmFlowThresholdInterval, cmEthernetAccPortStatsL2CPFP=cmEthernetAccPortStatsL2CPFP, e1t1ThresholdMonValue=e1t1ThresholdMonValue, cmLagStatsABRTx=cmLagStatsABRTx, cmQosShaperThresholdTable=cmQosShaperThresholdTable, stsVcPathThresholdValueHi=stsVcPathThresholdValueHi, cmEthernetTrafficPortStatsL2PTRxFramesEncap=cmEthernetTrafficPortStatsL2PTRxFramesEncap, cmEthernetNetPortStatsIntervalType=cmEthernetNetPortStatsIntervalType, cmEthernetNetPortThresholdVarEntry=cmEthernetNetPortThresholdVarEntry, f3FpQosPolicerHistoryTime=f3FpQosPolicerHistoryTime, cmQosPolicerV2StatsAction=cmQosPolicerV2StatsAction, ocnStmThresholdVariable=ocnStmThresholdVariable, stsVcPathHistoryUASs=stsVcPathHistoryUASs, ocnStmHistoryLineOPR=ocnStmHistoryLineOPR, cmEthernetNetPortXdslPerfGroup=cmEthernetNetPortXdslPerfGroup, cmEthernetAccPortThresholdTable=cmEthernetAccPortThresholdTable, cmEthernetNetPortHistoryIBRRx=cmEthernetNetPortHistoryIBRRx, cmLagHistoryESMP=cmLagHistoryESMP, cmLagHistoryESP64=cmLagHistoryESP64, cmQosShaperV2ThresholdInterval=cmQosShaperV2ThresholdInterval, cmFlowPointThresholdEntry=cmFlowPointThresholdEntry, vtVcPathStatsSESs=vtVcPathStatsSESs, cmEthernetAccPortStatsESP1519=cmEthernetAccPortStatsESP1519, cmQosShaperV2StatsBTD=cmQosShaperV2StatsBTD, cmEthernetAccPortStatsESMP=cmEthernetAccPortStatsESMP, cmFlowThresholdMonValue=cmFlowThresholdMonValue, cmEthernetTrafficPortHistoryESFS=cmEthernetTrafficPortHistoryESFS, e1t1StatsPathESsFarEnd=e1t1StatsPathESsFarEnd, cmEthernetAccPortHistoryESP1519=cmEthernetAccPortHistoryESP1519, cmQosPolicerV2ThresholdValueLo=cmQosPolicerV2ThresholdValueLo, cmEthernetNetPortThresholdInterval=cmEthernetNetPortThresholdInterval, ocnStmHistoryLineFarEndCVs=ocnStmHistoryLineFarEndCVs, stsVcPathThresholdValueLo=stsVcPathThresholdValueLo, cmOAMFlowPointHistorySES=cmOAMFlowPointHistorySES, e3t3StatsPathCCVsFarEnd=e3t3StatsPathCCVsFarEnd, cmQosFlowPolicerStatsIndex=cmQosFlowPolicerStatsIndex, f3FpQosPolicerStatsFMRD=f3FpQosPolicerStatsFMRD, cmEthernetNetPortStatsTemp=cmEthernetNetPortStatsTemp, cmEthernetNetPortHistoryIndex=cmEthernetNetPortHistoryIndex, cmEthernetNetPortStatsESC=cmEthernetNetPortStatsESC, cmFlowHistoryIBRRlA2NMin=cmFlowHistoryIBRRlA2NMin, cmQosFlowPolicerThresholdValueLo=cmQosFlowPolicerThresholdValueLo, cmEthernetAccPortHistoryLES=cmEthernetAccPortHistoryLES, cmFlowPointStatsEfFramesDiscarded=cmFlowPointStatsEfFramesDiscarded, cmFlowPointThresholdInterval=cmFlowPointThresholdInterval, e1t1StatsLineCVs=e1t1StatsLineCVs, cmEthernetNetPortHistoryFmcd=cmEthernetNetPortHistoryFmcd, cmEthernetTrafficPortHistoryIndex=cmEthernetTrafficPortHistoryIndex, cmQosFlowPolicerHistoryValid=cmQosFlowPolicerHistoryValid, cmEthernetTrafficPortStatsUAS=cmEthernetTrafficPortStatsUAS, cmEthernetAccPortStatsESMF=cmEthernetAccPortStatsESMF, cmFlowStatsACLN2ADrop=cmFlowStatsACLN2ADrop, cmQosFlowPolicerThresholdIndex=cmQosFlowPolicerThresholdIndex, e1t1StatsValid=e1t1StatsValid, vtVcPathStatsValid=vtVcPathStatsValid, cmEthernetAccPortStatsLBC=cmEthernetAccPortStatsLBC, vtVcPathStatsEntry=vtVcPathStatsEntry, cmFlowPointHistoryAclDropNoMatch=cmFlowPointHistoryAclDropNoMatch, stsVcPathFarEndHistoryCVs=stsVcPathFarEndHistoryCVs, cmEthernetTrafficPortHistoryAction=cmEthernetTrafficPortHistoryAction, cmEthernetNetPortThresholdEntry=cmEthernetNetPortThresholdEntry, cmEthernetNetPortHistoryESBP=cmEthernetNetPortHistoryESBP, cmQosFlowPolicerStatsIntervalType=cmQosFlowPolicerStatsIntervalType, cmEthernetAccPortStatsESFS=cmEthernetAccPortStatsESFS, cmPerfObjectGroup=cmPerfObjectGroup, f3NetPortQosShaperHistoryTable=f3NetPortQosShaperHistoryTable, cmFlowPointThresholdVariable=cmFlowPointThresholdVariable, cmEthernetNetPortThresholdVarOptVariance=cmEthernetNetPortThresholdVarOptVariance, cmOAMFlowPointStatsTable=cmOAMFlowPointStatsTable, cmQosPolicerV2HistoryFMYD=cmQosPolicerV2HistoryFMYD, f3NetPortQosShaperStatsAction=f3NetPortQosShaperStatsAction, cmLagStatsESP1024=cmLagStatsESP1024, cmLagHistoryL2CPFP=cmLagHistoryL2CPFP, cmEthernetAccPortHistoryLBC=cmEthernetAccPortHistoryLBC, cmEthernetTrafficPortStatsL2CPFP=cmEthernetTrafficPortStatsL2CPFP, vtVcPathFarEndHistoryESs=vtVcPathFarEndHistoryESs, cmAccPortQosShaperThresholdMonValue=cmAccPortQosShaperThresholdMonValue, cmEthernetNetPortStatsXdslDsFecs=cmEthernetNetPortStatsXdslDsFecs, cmFlowPointHistorySES=cmFlowPointHistorySES, cmFlowStatsIndex=cmFlowStatsIndex, e3t3HistoryPathSEFs=e3t3HistoryPathSEFs, e1t1HistoryPathSASs=e1t1HistoryPathSASs, f3AclRuleThresholdVariable=f3AclRuleThresholdVariable, cmQosFlowPolicerThresholdValueHi=cmQosFlowPolicerThresholdValueHi, cmEthernetAccPortHistoryTime=cmEthernetAccPortHistoryTime, cmQosShaperStatsFTD=cmQosShaperStatsFTD, cmQosShaperStatsFREDD=cmQosShaperStatsFREDD, cmFlowHistoryTable=cmFlowHistoryTable, f3FpQosPolicerHistoryValid=f3FpQosPolicerHistoryValid, f3FpQosPolicerStatsAction=f3FpQosPolicerStatsAction, cmEthernetNetPortHistoryXdslUsCrcError=cmEthernetNetPortHistoryXdslUsCrcError, cmQosPolicerV2StatsTable=cmQosPolicerV2StatsTable, cmFlowHistoryL2CPFD=cmFlowHistoryL2CPFD, cmFlowPointStatsBT=cmFlowPointStatsBT, f3NetPortQosShaperThresholdValueHi=f3NetPortQosShaperThresholdValueHi, cmEthernetAccPortStatsIBRMaxRx=cmEthernetAccPortStatsIBRMaxRx, cmFlowPointHistoryIBR=cmFlowPointHistoryIBR, cmOAMFlowPointStatsEntry=cmOAMFlowPointStatsEntry, cmEthernetNetPortThresholdVarTable=cmEthernetNetPortThresholdVarTable, cmQosFlowPolicerStatsFMRD=cmQosFlowPolicerStatsFMRD, cmEthernetNetPortStatsXdslUsCrcError=cmEthernetNetPortStatsXdslUsCrcError, cmEthernetTrafficPortStatsIntervalType=cmEthernetTrafficPortStatsIntervalType, cmEthernetTrafficPortStatsDroppedFragmented=cmEthernetTrafficPortStatsDroppedFragmented, e3t3HistoryTime=e3t3HistoryTime, cmEthernetNetPortStatsIBRMinTx=cmEthernetNetPortStatsIBRMinTx, cmEthernetTrafficPortPerfGroup=cmEthernetTrafficPortPerfGroup, f3CardThresholdValueHi=f3CardThresholdValueHi, cmFlowPointThresholdMonValue=cmFlowPointThresholdMonValue, cmFlowStatsABRA2N=cmFlowStatsABRA2N, f3AclRulePerfGroup=f3AclRulePerfGroup, cmQosPolicerV2StatsEntry=cmQosPolicerV2StatsEntry, e3t3StatsValid=e3t3StatsValid, f3FpQosPolicerThresholdIndex=f3FpQosPolicerThresholdIndex, vtVcPathStatsIntervalType=vtVcPathStatsIntervalType, cmFlowStatsBytesInN2A=cmFlowStatsBytesInN2A, cmLagStatsIndex=cmLagStatsIndex, cmFlowStatsFMYN2A=cmFlowStatsFMYN2A, e1t1HistoryLineCVs=e1t1HistoryLineCVs, cmEthernetAccPortHistoryFbcd=cmEthernetAccPortHistoryFbcd, cmQosFlowPolicerHistoryAction=cmQosFlowPolicerHistoryAction, cmEthernetTrafficPortThresholdIndex=cmEthernetTrafficPortThresholdIndex, ocnStmHistorySectionCVs=ocnStmHistorySectionCVs, cmEthernetTrafficPortHistoryESO=cmEthernetTrafficPortHistoryESO, cmQosShaperThresholdCrossingAlert=cmQosShaperThresholdCrossingAlert, cmQosShaperStatsEntry=cmQosShaperStatsEntry, cmQosPolicerV2StatsABR=cmQosPolicerV2StatsABR, f3FpQosShaperStatsABRRL=f3FpQosShaperStatsABRRL, e3t3StatsPathCSESsFarEnd=e3t3StatsPathCSESsFarEnd, cmEthernetNetPortThresholdCrossingAlert=cmEthernetNetPortThresholdCrossingAlert, cmFlowStatsSES=cmFlowStatsSES, cmQosPolicerV2HistoryTime=cmQosPolicerV2HistoryTime, cmEthernetTrafficPortHistoryL2CPFP=cmEthernetTrafficPortHistoryL2CPFP, ocnStmHistoryLineFarEndESs=ocnStmHistoryLineFarEndESs, cmLagStatsESP64=cmLagStatsESP64, cmEthernetNetPortHistoryIBRMaxRx=cmEthernetNetPortHistoryIBRMaxRx, cmEthernetNetPortHistoryESMP=cmEthernetNetPortHistoryESMP, cmEthernetNetPortStatsESP256=cmEthernetNetPortStatsESP256, f3CardHistoryICU=f3CardHistoryICU, cmEthernetTrafficPortStatsESMF=cmEthernetTrafficPortStatsESMF, cmEthernetTrafficPortHistoryESP65=cmEthernetTrafficPortHistoryESP65, cmEthernetTrafficPortStatsESBS=cmEthernetTrafficPortStatsESBS, cmQosFlowPolicerStatsBytesOut=cmQosFlowPolicerStatsBytesOut, e1t1HistoryValid=e1t1HistoryValid, cmFlowHistoryIBRN2A=cmFlowHistoryIBRN2A, cmAccPortQosShaperStatsBTD=cmAccPortQosShaperStatsBTD, e1t1HistoryEntry=e1t1HistoryEntry, ocnStmHistoryLineSESs=ocnStmHistoryLineSESs, cmEthernetAccPortThresholdVariable=cmEthernetAccPortThresholdVariable, f3FpQosPolicerStatsFMG=f3FpQosPolicerStatsFMG, cmQosShaperV2HistoryBREDD=cmQosShaperV2HistoryBREDD, cmEthernetAccPortStatsESOP=cmEthernetAccPortStatsESOP, cmAccPortQosShaperThresholdValueLo=cmAccPortQosShaperThresholdValueLo, cmFlowPointStatsIndex=cmFlowPointStatsIndex, cmEthernetTrafficPortHistoryLBC=cmEthernetTrafficPortHistoryLBC, cmFlowPointHistoryFdicd=cmFlowPointHistoryFdicd, cmLagHistoryESOP=cmLagHistoryESOP, cmEthernetNetPortXdslStatsTable=cmEthernetNetPortXdslStatsTable, e1t1HistoryPathFCsFarEnd=e1t1HistoryPathFCsFarEnd, e3t3StatsIndex=e3t3StatsIndex, cmEthernetNetPortStatsLkupFails=cmEthernetNetPortStatsLkupFails, ocnStmThresholdValueHi=ocnStmThresholdValueHi, cmEthernetAccPortThresholdVarOptVariance=cmEthernetAccPortThresholdVarOptVariance, trafficPMGroup=trafficPMGroup, cmFlowHistoryFMYDA2N=cmFlowHistoryFMYDA2N, stsVcPathFarEndStatsESs=stsVcPathFarEndStatsESs, e1t1HistoryLineSESs=e1t1HistoryLineSESs, f3NetPortQosShaperHistoryBREDD=f3NetPortQosShaperHistoryBREDD, vtVcPathHistoryEntry=vtVcPathHistoryEntry, cmFlowPointThresholdCrossingAlert=cmFlowPointThresholdCrossingAlert, cmEthernetNetPortHistoryESMF=cmEthernetNetPortHistoryESMF, e1t1ThresholdIndex=e1t1ThresholdIndex, cmEthernetTrafficPortHistoryIBRMaxTx=cmEthernetTrafficPortHistoryIBRMaxTx, vtVcPathFarEndStatsUASs=vtVcPathFarEndStatsUASs, cmEthernetNetPortThresholdTable=cmEthernetNetPortThresholdTable, f3FpQosShaperStatsBREDD=f3FpQosShaperStatsBREDD, f3CardHistoryTable=f3CardHistoryTable, cmEthernetTrafficPortStatsESCAE=cmEthernetTrafficPortStatsESCAE, f3CardPerfGroup=f3CardPerfGroup, cmPerfConformance=cmPerfConformance)
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", cmEthernetTrafficPortStatsESC=cmEthernetTrafficPortStatsESC, f3AclRuleThresholdCrossingAlert=f3AclRuleThresholdCrossingAlert, cmEthernetAccPortStatsL2PTRxFramesEncap=cmEthernetAccPortStatsL2PTRxFramesEncap, f3FpQosShaperHistoryABRRL=f3FpQosShaperHistoryABRRL, cmEthernetNetPortHistoryESP256=cmEthernetNetPortHistoryESP256, ocnStmStatsSectionSESs=ocnStmStatsSectionSESs, cmQosPolicerV2StatsIntervalType=cmQosPolicerV2StatsIntervalType, cmEthernetTrafficPortHistoryOPR=cmEthernetTrafficPortHistoryOPR, cmQosPolicerV2ThresholdEntry=cmQosPolicerV2ThresholdEntry, cmFlowPointHistoryFMG=cmFlowPointHistoryFMG, e3t3StatsPathPCVs=e3t3StatsPathPCVs, cmQosShaperHistoryTable=cmQosShaperHistoryTable, cmEthernetTrafficPortStatsRLBC=cmEthernetTrafficPortStatsRLBC, f3FpQosPolicerHistoryBytesIn=f3FpQosPolicerHistoryBytesIn, cmAccPortQosShaperHistoryBT=cmAccPortQosShaperHistoryBT, cmEthernetTrafficPortHistoryTime=cmEthernetTrafficPortHistoryTime, cmEthernetTrafficPortHistoryESP128=cmEthernetTrafficPortHistoryESP128, ocnStmStatsAction=ocnStmStatsAction, vtVcPathHistoryAction=vtVcPathHistoryAction, cmEthernetAccPortStatsAUFD=cmEthernetAccPortStatsAUFD, cmFlowPointHistoryBytesOut=cmFlowPointHistoryBytesOut, cmEthernetAccPortHistoryL2PTTxFramesDecap=cmEthernetAccPortHistoryL2PTTxFramesDecap, cmLagStatsESOP=cmLagStatsESOP, cmEthernetTrafficPortHistoryIBRMinTx=cmEthernetTrafficPortHistoryIBRMinTx, cmAccPortQosShaperStatsIntervalType=cmAccPortQosShaperStatsIntervalType, cmOAMFlowPointStatsValid=cmOAMFlowPointStatsValid, vtVcPathThresholdEntry=vtVcPathThresholdEntry, cmFlowThresholdVariable=cmFlowThresholdVariable, cmQosPolicerV2StatsFMYD=cmQosPolicerV2StatsFMYD, cmEthernetNetPortStatsABRRx=cmEthernetNetPortStatsABRRx, cmLagHistoryAction=cmLagHistoryAction, cmEthernetNetPortHistoryAclFwd2Cpu=cmEthernetNetPortHistoryAclFwd2Cpu, cmEthernetNetPortThresholdVarOprVariance=cmEthernetNetPortThresholdVarOprVariance, stsVcPathStatsESs=stsVcPathStatsESs, cmEthernetAccPortHistoryIBRRx=cmEthernetAccPortHistoryIBRRx, cmEthernetAccPortStatsESDE=cmEthernetAccPortStatsESDE, cmFlowThresholdTable=cmFlowThresholdTable, cmFlowStatsFMYDA2N=cmFlowStatsFMYDA2N, e1t1StatsPathCVsFarEnd=e1t1StatsPathCVsFarEnd, cmEthernetAccPortStatsESC=cmEthernetAccPortStatsESC, cmQosPolicerV2ThresholdTable=cmQosPolicerV2ThresholdTable, cmTrafficPortQosShaperHistoryTable=cmTrafficPortQosShaperHistoryTable, e1t1HistoryPathSESsFarEnd=e1t1HistoryPathSESsFarEnd, f3AclRuleThresholdValueHi=f3AclRuleThresholdValueHi, cmLagStatsESFS=cmLagStatsESFS, cmFlowStatsIBRA2NMax=cmFlowStatsIBRA2NMax, cmEthernetTrafficPortHistoryL2PTRxFramesEncap=cmEthernetTrafficPortHistoryL2PTRxFramesEncap, cmEthernetTrafficPortHistoryRLBC=cmEthernetTrafficPortHistoryRLBC, trafficPMGroupCmHub=trafficPMGroupCmHub, cmPerfNotifications=cmPerfNotifications, cmEthernetAccPortHistoryESF=cmEthernetAccPortHistoryESF, cmTrafficPortQosShaperStatsFD=cmTrafficPortQosShaperStatsFD, e3t3HistoryEntry=e3t3HistoryEntry, cmQosFlowPolicerHistoryTable=cmQosFlowPolicerHistoryTable, f3FpQosShaperHistoryFTD=f3FpQosShaperHistoryFTD, f3FpQosPolicerHistoryIndex=f3FpQosPolicerHistoryIndex, ocnStmHistoryAction=ocnStmHistoryAction, e3t3HistoryIndex=e3t3HistoryIndex, vtVcPathFarEndStatsCVs=vtVcPathFarEndStatsCVs, cmFlowPointStatsBytesIn=cmFlowPointStatsBytesIn, ocnStmStatsLineCVs=ocnStmStatsLineCVs, stsVcPathStatsIntervalType=stsVcPathStatsIntervalType, ocnStmStatsLineOPT=ocnStmStatsLineOPT, cmEthernetAccPortStatsESO=cmEthernetAccPortStatsESO, cmLagStatsESDE=cmLagStatsESDE, f3NetPortQosShaperStatsFTD=f3NetPortQosShaperStatsFTD, cmEthernetNetPortHistoryXdslUsEs=cmEthernetNetPortHistoryXdslUsEs, cmEthernetTrafficPortStatsESDE=cmEthernetTrafficPortStatsESDE, cmFlowHistoryACLA2NDrop=cmFlowHistoryACLA2NDrop, cmFlowPointStatsAclRuleDrop=cmFlowPointStatsAclRuleDrop, cmPerfScalarObjects=cmPerfScalarObjects, cmQosShaperStatsABRRLR=cmQosShaperStatsABRRLR, cmEthernetNetPortStatsAPFD=cmEthernetNetPortStatsAPFD, cmQosFlowPolicerStatsValid=cmQosFlowPolicerStatsValid, cmQosShaperV2StatsABRRL=cmQosShaperV2StatsABRRL, cmTrafficPortQosShaperStatsFTD=cmTrafficPortQosShaperStatsFTD, ocnStmStatsLineESs=ocnStmStatsLineESs, f3AclRuleThresholdInterval=f3AclRuleThresholdInterval, cmLagHistoryAUFD=cmLagHistoryAUFD, f3NetPortQosShaperHistoryTime=f3NetPortQosShaperHistoryTime, cmQosFlowPolicerStatsBytesIn=cmQosFlowPolicerStatsBytesIn, cmEthernetTrafficPortStatsL2CPFD=cmEthernetTrafficPortStatsL2CPFD, e1t1ThresholdVariable=e1t1ThresholdVariable, cmFlowPointHistoryFdRxFb=cmFlowPointHistoryFdRxFb, e3t3HistoryPathPSESs=e3t3HistoryPathPSESs, cmTrafficPortQosShaperHistoryBT=cmTrafficPortQosShaperHistoryBT, cmQosPolicerV2HistoryValid=cmQosPolicerV2HistoryValid, e3t3StatsLineCVs=e3t3StatsLineCVs, cmTrafficPortQosShaperThresholdValueHi=cmTrafficPortQosShaperThresholdValueHi, cmEthernetTrafficPortHistoryESP64=cmEthernetTrafficPortHistoryESP64, cmEthernetNetPortHistoryXdslDsFecs=cmEthernetNetPortHistoryXdslDsFecs, cmEthernetTrafficPortHistoryESOF=cmEthernetTrafficPortHistoryESOF, ocnStmStatsIndex=ocnStmStatsIndex, f3NetPortQosShaperHistoryABRRL=f3NetPortQosShaperHistoryABRRL, cmFlowBWExtTable=cmFlowBWExtTable, cmXgProPerfNotifGroup=cmXgProPerfNotifGroup, cmEthernetAccPortHistoryTemp=cmEthernetAccPortHistoryTemp, cmEthernetAccPortStatsESP512=cmEthernetAccPortStatsESP512, ocnStmPortPerfGroup=ocnStmPortPerfGroup, cmEthernetAccPortHistoryESP1024=cmEthernetAccPortHistoryESP1024, vtVcPathHistoryTable=vtVcPathHistoryTable, cmQosPolicerV2StatsFMG=cmQosPolicerV2StatsFMG, cmQosPolicerV2ThresholdCrossingAlert=cmQosPolicerV2ThresholdCrossingAlert, vtVcPathThresholdCrossingAlert=vtVcPathThresholdCrossingAlert, e1t1StatsEntry=e1t1StatsEntry, vtVcPathFarEndHistorySESs=vtVcPathFarEndHistorySESs, e3t3ThresholdIndex=e3t3ThresholdIndex, cmFlowPointStatsFdTxFb=cmFlowPointStatsFdTxFb, e1t1StatsPathSASs=e1t1StatsPathSASs, f3CardThresholdVariable=f3CardThresholdVariable, vtVcPathThresholdInterval=vtVcPathThresholdInterval, cmFlowPointStatsFMG=cmFlowPointStatsFMG, cmFlowPointHistoryIndex=cmFlowPointHistoryIndex, cmQosShaperV2StatsIndex=cmQosShaperV2StatsIndex, cmEthernetTrafficPortThresholdValueLo=cmEthernetTrafficPortThresholdValueLo, cmEthernetTrafficPortThresholdVarOptVariance=cmEthernetTrafficPortThresholdVarOptVariance, cmEthernetNetPortHistoryXdslDsEs=cmEthernetNetPortHistoryXdslDsEs, cmFlowPointStatsAction=cmFlowPointStatsAction, stsVcPathHistoryEntry=stsVcPathHistoryEntry, cmFlowPointStatsIBRMin=cmFlowPointStatsIBRMin, e3t3HistoryPathCESs=e3t3HistoryPathCESs, cmEthernetTrafficPortHistoryESBP=cmEthernetTrafficPortHistoryESBP, cmEthernetNetPortHistoryXdslDsFullInits=cmEthernetNetPortHistoryXdslDsFullInits, cmEthernetAccPortHistoryDhcpDropNoAssocIf=cmEthernetAccPortHistoryDhcpDropNoAssocIf, cmQosShaperV2ThresholdEntry=cmQosShaperV2ThresholdEntry, cmEthernetNetPortHistoryTemp=cmEthernetNetPortHistoryTemp, e3t3StatsLineESs=e3t3StatsLineESs, cmTrafficPortQosShaperStatsValid=cmTrafficPortQosShaperStatsValid, e3t3ThresholdMonValue=e3t3ThresholdMonValue, cmEthernetAccPortStatsESCAE=cmEthernetAccPortStatsESCAE, cmEthernetTrafficPortHistoryValid=cmEthernetTrafficPortHistoryValid, cmEthernetAccPortHistoryESP=cmEthernetAccPortHistoryESP, cmFlowStatsFMRDN2A=cmFlowStatsFMRDN2A, cmEthernetNetPortStatsEntry=cmEthernetNetPortStatsEntry, ocnStmThresholdVarOprVariance=ocnStmThresholdVarOprVariance, cmEthernetNetPortHistoryDhcpDropNoAssocIf=cmEthernetNetPortHistoryDhcpDropNoAssocIf, cmEthernetAccPortHistoryESUP=cmEthernetAccPortHistoryESUP, cmEthernetNetPortStatsXdslUsCv=cmEthernetNetPortStatsXdslUsCv, ocnStmStatsTable=ocnStmStatsTable, cmEthernetNetPortHistoryAPFD=cmEthernetNetPortHistoryAPFD, stsVcPathStatsCVs=stsVcPathStatsCVs, e1t1HistoryAction=e1t1HistoryAction, e1t1ThresholdEntry=e1t1ThresholdEntry, cmEthernetNetPortStatsIBRMinRx=cmEthernetNetPortStatsIBRMinRx, cmEthernetNetPortHistoryXdslDsLoss=cmEthernetNetPortHistoryXdslDsLoss, cmEthernetTrafficPortHistoryAclFwd2Cpu=cmEthernetTrafficPortHistoryAclFwd2Cpu, cmEthernetAccPortStatsESP1024=cmEthernetAccPortStatsESP1024, cmQosShaperV2StatsValid=cmQosShaperV2StatsValid, cmEthernetNetPortStatsESP512=cmEthernetNetPortStatsESP512, f3NetPortQosShaperHistoryBTD=f3NetPortQosShaperHistoryBTD, e1t1StatsIntervalType=e1t1StatsIntervalType, cmQosShaperV2HistoryBT=cmQosShaperV2HistoryBT, e1T1PerfGroup=e1T1PerfGroup, cmEthernetAccPortHistoryTable=cmEthernetAccPortHistoryTable, f3CardThresholdInterval=f3CardThresholdInterval, cmEthernetNetPortStatsDhcpDropNoAssocIf=cmEthernetNetPortStatsDhcpDropNoAssocIf, cmQosShaperThresholdVariable=cmQosShaperThresholdVariable, cmEthernetAccPortStatsFmcd=cmEthernetAccPortStatsFmcd, cmEthernetNetPortHistoryXdslUsLoss=cmEthernetNetPortHistoryXdslUsLoss, cmFlowStatsIBRRlA2NMax=cmFlowStatsIBRRlA2NMax, e1t1StatsPathESs=e1t1StatsPathESs, cmEthernetNetPortStatsESOF=cmEthernetNetPortStatsESOF, cmEthernetTrafficPortStatsAction=cmEthernetTrafficPortStatsAction, cmEthernetTrafficPortStatsRTemp=cmEthernetTrafficPortStatsRTemp, cmFlowPointStatsIBR=cmFlowPointStatsIBR, stsVcPathThresholdTable=stsVcPathThresholdTable, ocnStmStatsSectionSEFs=ocnStmStatsSectionSEFs, ocnStmHistorySectionSESs=ocnStmHistorySectionSESs, stsVcPathFarEndHistoryESs=stsVcPathFarEndHistoryESs, cmEthernetNetPortStatsXdslDsLoss=cmEthernetNetPortStatsXdslDsLoss, cmEthernetAccPortThresholdVarEntry=cmEthernetAccPortThresholdVarEntry, cmFlowPointStatsABRRx=cmFlowPointStatsABRRx, cmEthernetNetPortHistoryValid=cmEthernetNetPortHistoryValid, cmTrafficPortQosShaperThresholdTable=cmTrafficPortQosShaperThresholdTable, cmFlowPointStatsIBRRlMax=cmFlowPointStatsIBRRlMax, cmLagHistoryABRTx=cmLagHistoryABRTx, cmFlowHistoryIBRA2NMin=cmFlowHistoryIBRA2NMin, vtVcPathStatsTable=vtVcPathStatsTable, cmEthernetTrafficPortStatsIndex=cmEthernetTrafficPortStatsIndex, cmEthernetTrafficPortHistoryDhcpDropNoAssocIf=cmEthernetTrafficPortHistoryDhcpDropNoAssocIf, cmFlowPointStatsFBCD=cmFlowPointStatsFBCD, cmQosFlowPolicerThresholdMonValue=cmQosFlowPolicerThresholdMonValue, cmEthernetAccPortStatsIBRMinRx=cmEthernetAccPortStatsIBRMinRx, cmEthernetAccPortStatsTable=cmEthernetAccPortStatsTable, cmFlowHistoryEntry=cmFlowHistoryEntry, f3AclRuleThresholdIndex=f3AclRuleThresholdIndex, cmLagStatsESP=cmLagStatsESP, cmLagHistoryESOF=cmLagHistoryESOF, cmEthernetTrafficPortStatsESP65=cmEthernetTrafficPortStatsESP65, cmEthernetAccPortHistoryESOP=cmEthernetAccPortHistoryESOP, cmEthernetAccPortHistoryESDE=cmEthernetAccPortHistoryESDE, e3t3HistoryPathFCs=e3t3HistoryPathFCs, cmFlowPointHistoryFdTxFb=cmFlowPointHistoryFdTxFb, cmFlowPointStatsIBRMax=cmFlowPointStatsIBRMax, cmEthernetNetPortStatsIBRMaxTx=cmEthernetNetPortStatsIBRMaxTx, cmFlowPointHistoryFMGD=cmFlowPointHistoryFMGD, cmEthernetTrafficPortHistoryATFD=cmEthernetTrafficPortHistoryATFD, cmQosPolicerV2ThresholdVariable=cmQosPolicerV2ThresholdVariable, stsVcPathHistoryValid=stsVcPathHistoryValid, cmLagHistoryESP128=cmLagHistoryESP128, cmQosFlowPolicerStatsAction=cmQosFlowPolicerStatsAction, cmEthernetNetPortHistoryFbcd=cmEthernetNetPortHistoryFbcd, ocnStmHistorySectionESs=ocnStmHistorySectionESs, cmTrafficPortQosShaperStatsBTD=cmTrafficPortQosShaperStatsBTD, cmEthernetTrafficPortStatsIBRRx=cmEthernetTrafficPortStatsIBRRx, cmEthernetNetPortHistoryESBS=cmEthernetNetPortHistoryESBS, cmQosFlowPolicerHistoryFMG=cmQosFlowPolicerHistoryFMG, ocnStmHistoryLineCVs=ocnStmHistoryLineCVs, cmQosShaperHistoryBT=cmQosShaperHistoryBT, cmFlowBWExtEntry=cmFlowBWExtEntry, f3NetPortQosShaperStatsFR=f3NetPortQosShaperStatsFR, cmQosShaperHistoryBREDD=cmQosShaperHistoryBREDD, cmQosPolicerV2ThresholdValueHi=cmQosPolicerV2ThresholdValueHi, cmFlowPointHistoryFMRD=cmFlowPointHistoryFMRD, cmEthernetTrafficPortStatsOPR=cmEthernetTrafficPortStatsOPR, cmEthernetNetPortStatsESMP=cmEthernetNetPortStatsESMP, cmFlowPointHistoryFMCD=cmFlowPointHistoryFMCD, cmQosFlowPolicerStatsFMY=cmQosFlowPolicerStatsFMY, cmFlowPointHistoryFLD=cmFlowPointHistoryFLD, cmEthernetNetPortStatsIBRRx=cmEthernetNetPortStatsIBRRx, e1t1StatsPathUASsFarEnd=e1t1StatsPathUASsFarEnd, f3NetPortQosShaperStatsIntervalType=f3NetPortQosShaperStatsIntervalType, cmQosFlowPolicerHistoryBytesOut=cmQosFlowPolicerHistoryBytesOut, cmEthernetAccPortHistoryIBRMinTx=cmEthernetAccPortHistoryIBRMinTx, e3t3HistoryPathCSESs=e3t3HistoryPathCSESs, cmEthernetNetPortHistoryESP1519=cmEthernetNetPortHistoryESP1519, f3FpQosShaperThresholdVariable=f3FpQosShaperThresholdVariable, stsVcPathFarEndStatsCVs=stsVcPathFarEndStatsCVs, cmFlowHistoryIBRN2AMin=cmFlowHistoryIBRN2AMin, cmQosShaperHistoryABRRLR=cmQosShaperHistoryABRRLR, ocnStmStatsLineTemp=ocnStmStatsLineTemp, cmEthernetNetPortHistoryIBRMinTx=cmEthernetNetPortHistoryIBRMinTx, cmOAMFlowPointStatsAction=cmOAMFlowPointStatsAction, cmPerfNotifGroupCmHub=cmPerfNotifGroupCmHub, cmFlowStatsFTDA2N=cmFlowStatsFTDA2N, cmAccPortQosShaperHistoryFTD=cmAccPortQosShaperHistoryFTD, cmQosShaperV2StatsFREDD=cmQosShaperV2StatsFREDD, cmEthernetTrafficPortHistoryOPT=cmEthernetTrafficPortHistoryOPT, cmEthernetNetPortHistoryOPR=cmEthernetNetPortHistoryOPR, f3FpQosPolicerThresholdInterval=f3FpQosPolicerThresholdInterval, cmEthernetTrafficPortHistoryLkupFails=cmEthernetTrafficPortHistoryLkupFails, e3t3StatsPathFCs=e3t3StatsPathFCs, cmAccPortQosShaperHistoryValid=cmAccPortQosShaperHistoryValid, cmTrafficPortQosShaperStatsTable=cmTrafficPortQosShaperStatsTable, cmEthernetNetPortStatsESBS=cmEthernetNetPortStatsESBS, cmEthernetNetPortStatsIBRTx=cmEthernetNetPortStatsIBRTx, cmEthernetNetPortHistoryESC=cmEthernetNetPortHistoryESC, cmLagStatsESJ=cmLagStatsESJ, cmQosShaperStatsBTD=cmQosShaperStatsBTD, f3NetPortQosShaperHistoryFTD=f3NetPortQosShaperHistoryFTD, cmOAMFlowPointThresholdInterval=cmOAMFlowPointThresholdInterval, cmTrafficPortQosShaperHistoryBREDD=cmTrafficPortQosShaperHistoryBREDD, cmFlowPointHistoryEntry=cmFlowPointHistoryEntry, cmQosShaperStatsFR=cmQosShaperStatsFR)
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", cmEthernetNetPortHistoryXdslUsPkt=cmEthernetNetPortHistoryXdslUsPkt, cmQosFlowPolicerHistoryFMY=cmQosFlowPolicerHistoryFMY, f3AclRuleHistoryTable=f3AclRuleHistoryTable, cmQosShaperV2HistoryFD=cmQosShaperV2HistoryFD, cmFlowStatsEntry=cmFlowStatsEntry, cmFlowBWA2NEIR=cmFlowBWA2NEIR, cmEthernetTrafficPortStatsESUP=cmEthernetTrafficPortStatsESUP, cmFlowBWA2NMFB=cmFlowBWA2NMFB, cmEthernetAccPortHistoryOPR=cmEthernetAccPortHistoryOPR, flowPointPmGroup=flowPointPmGroup, cmEthernetTrafficPortStatsESO=cmEthernetTrafficPortStatsESO, cmQosFlowPolicerStatsFMYD=cmQosFlowPolicerStatsFMYD, cmFlowStatsTable=cmFlowStatsTable, cmEthernetAccPortHistoryAction=cmEthernetAccPortHistoryAction, cmFlowStatsIBRA2N=cmFlowStatsIBRA2N, cmFlowPointThresholdTable=cmFlowPointThresholdTable, cmEthernetTrafficPortStatsROPR=cmEthernetTrafficPortStatsROPR, cmEthernetAccPortStatsAclFwd2Cpu=cmEthernetAccPortStatsAclFwd2Cpu, e3t3ThresholdTable=e3t3ThresholdTable, cmFlowPointStatsTable=cmFlowPointStatsTable, cmQosShaperHistoryIndex=cmQosShaperHistoryIndex, cmEthernetAccPortHistoryESCAE=cmEthernetAccPortHistoryESCAE, cmOAMFlowPointThresholdValueHi=cmOAMFlowPointThresholdValueHi, f3AclRuleHistoryEntry=f3AclRuleHistoryEntry, cmEthernetNetPortHistoryESP128=cmEthernetNetPortHistoryESP128, e1t1StatsTable=e1t1StatsTable, cmQosFlowPolicerThresholdVariable=cmQosFlowPolicerThresholdVariable, cmEthernetNetPortThresholdMonValue=cmEthernetNetPortThresholdMonValue, cmLagHistoryESUF=cmLagHistoryESUF, e3t3HistoryPathPCVs=e3t3HistoryPathPCVs, f3FpQosPolicerHistoryEntry=f3FpQosPolicerHistoryEntry, cmQosShaperV2HistoryTime=cmQosShaperV2HistoryTime, cmEthernetAccPortHistoryValid=cmEthernetAccPortHistoryValid, vtVcPathThresholdMonValue=vtVcPathThresholdMonValue, cmEthernetTrafficPortStatsIBRMaxTx=cmEthernetTrafficPortStatsIBRMaxTx, cmFlowPointStatsEfBytesDiscarded=cmFlowPointStatsEfBytesDiscarded, ocnStmHistoryLinePSC=ocnStmHistoryLinePSC, f3FpQosShaperThresholdValueLo=f3FpQosShaperThresholdValueLo, stsVcPathFarEndStatsUASs=stsVcPathFarEndStatsUASs, cmQosShaperStatsFD=cmQosShaperStatsFD, cmEthernetTrafficPortHistoryABRTx=cmEthernetTrafficPortHistoryABRTx, cmQosShaperV2ThresholdCrossingAlert=cmQosShaperV2ThresholdCrossingAlert, cmAccPortQosShaperHistoryEntry=cmAccPortQosShaperHistoryEntry, cmQosPolicerV2HistoryIndex=cmQosPolicerV2HistoryIndex, f3NetPortQosShaperHistoryFR=f3NetPortQosShaperHistoryFR, cmEthernetAccPortStatsAction=cmEthernetAccPortStatsAction, cmAccPortQosShaperStatsFR=cmAccPortQosShaperStatsFR, cmFlowPointHistoryFMY=cmFlowPointHistoryFMY, cmQosShaperV2StatsAction=cmQosShaperV2StatsAction, cmFlowThresholdIndex=cmFlowThresholdIndex, stsVcPathHistoryTime=stsVcPathHistoryTime, stsVcPathThresholdVariable=stsVcPathThresholdVariable, cmQosPolicerV2HistoryFMY=cmQosPolicerV2HistoryFMY, cmTrafficPortQosShaperHistoryBTD=cmTrafficPortQosShaperHistoryBTD, cmLagHistoryESP512=cmLagHistoryESP512, ocnStmThresholdIndex=ocnStmThresholdIndex, cmEthernetAccPortStatsESOF=cmEthernetAccPortStatsESOF, cmQosShaperV2StatsTable=cmQosShaperV2StatsTable, cmEthernetAccPortStatsL2CPFD=cmEthernetAccPortStatsL2CPFD, cmEthernetNetPortStatsESMF=cmEthernetNetPortStatsESMF, cmFlowStatsFBCDA2N=cmFlowStatsFBCDA2N, cmEthernetAccPortStatsIBRMinTx=cmEthernetAccPortStatsIBRMinTx, cmQosShaperHistoryBR=cmQosShaperHistoryBR, cmOAMFlowPointHistoryAction=cmOAMFlowPointHistoryAction, cmLagStatsESMF=cmLagStatsESMF, cmEthernetTrafficPortHistoryESMF=cmEthernetTrafficPortHistoryESMF, f3NetPortQosShaperThresholdValueLo=f3NetPortQosShaperThresholdValueLo, cmFlowPointHistoryAclRuleDrop=cmFlowPointHistoryAclRuleDrop, e1t1StatsAction=e1t1StatsAction, cmFlowPointStatsBytesOut=cmFlowPointStatsBytesOut, cmFlowPointHistoryFREDD=cmFlowPointHistoryFREDD, e1t1HistoryPathESs=e1t1HistoryPathESs, cmEthernetAccPortHistoryAUFD=cmEthernetAccPortHistoryAUFD, cmEthernetNetPortHistoryXdslUsFec=cmEthernetNetPortHistoryXdslUsFec, cmQosShaperStatsBT=cmQosShaperStatsBT, cmFlowHistoryUAS=cmFlowHistoryUAS, cmLagThresholdCrossingAlert=cmLagThresholdCrossingAlert, vtVcPathFarEndHistoryUASs=vtVcPathFarEndHistoryUASs, cmEthernetAccPortHistoryESO=cmEthernetAccPortHistoryESO, cmEthernetNetPortHistoryIBRMaxTx=cmEthernetNetPortHistoryIBRMaxTx, cmEthernetTrafficPortHistoryIBRMaxRx=cmEthernetTrafficPortHistoryIBRMaxRx, cmEthernetNetPortStatsESBF=cmEthernetNetPortStatsESBF, e1t1HistoryPathESsFarEnd=e1t1HistoryPathESsFarEnd, cmEthernetNetPortStatsESUP=cmEthernetNetPortStatsESUP, e3t3ThresholdValueHi=e3t3ThresholdValueHi, f3CardStatsValid=f3CardStatsValid, stsVcPathHistoryTable=stsVcPathHistoryTable, cmEthernetNetPortHistoryIBRTx=cmEthernetNetPortHistoryIBRTx, cmQosFlowPolicerStatsEntry=cmQosFlowPolicerStatsEntry, cmLagStatsAPFD=cmLagStatsAPFD, cmTrafficPortQosShaperHistoryTime=cmTrafficPortQosShaperHistoryTime, f3AclRuleStatsIndex=f3AclRuleStatsIndex, f3CardStatsTable=f3CardStatsTable, cmFlowHistoryIBRRlA2N=cmFlowHistoryIBRRlA2N, cmFlowStatsACLA2NDrop=cmFlowStatsACLA2NDrop, cmFlowStatsIBRRlN2AMin=cmFlowStatsIBRRlN2AMin, cmAccPortQosShaperStatsBREDD=cmAccPortQosShaperStatsBREDD, f3AclRuleHistoryIndex=f3AclRuleHistoryIndex, cmLagThresholdEntry=cmLagThresholdEntry, ocnStmStatsLineFarEndCVs=ocnStmStatsLineFarEndCVs, ocnStmStatsEntry=ocnStmStatsEntry, e3t3StatsPathCUASs=e3t3StatsPathCUASs, f3FpQosShaperHistoryTable=f3FpQosShaperHistoryTable, e3t3ThresholdCrossingAlert=e3t3ThresholdCrossingAlert, f3NetPortQosShaperHistoryBR=f3NetPortQosShaperHistoryBR, f3FpQosShaperStatsFTD=f3FpQosShaperStatsFTD, stsVcPathThresholdCrossingAlert=stsVcPathThresholdCrossingAlert, cmEthernetTrafficPortHistoryTable=cmEthernetTrafficPortHistoryTable, cmTrafficPortQosShaperStatsAction=cmTrafficPortQosShaperStatsAction, cmAccPortQosShaperHistoryIndex=cmAccPortQosShaperHistoryIndex, e1t1StatsPathCVs=e1t1StatsPathCVs, cmEthernetNetPortHistoryXdslDsSes=cmEthernetNetPortHistoryXdslDsSes, stsVcPathFarEndHistoryUASs=stsVcPathFarEndHistoryUASs, cmEthernetNetPortStatsXdslUsLoss=cmEthernetNetPortStatsXdslUsLoss, f3FpQosPolicerThresholdEntry=f3FpQosPolicerThresholdEntry, cmEthernetNetPortStatsABRTx=cmEthernetNetPortStatsABRTx, ocnStmHistoryLineTemp=ocnStmHistoryLineTemp, cmFlowThresholdCrossingAlert=cmFlowThresholdCrossingAlert, cmFlowPointHistoryTime=cmFlowPointHistoryTime, f3NetPortQosShaperThresholdIndex=f3NetPortQosShaperThresholdIndex, cmEthernetAccPortStatsAPFD=cmEthernetAccPortStatsAPFD, cmLagStatsESBP=cmLagStatsESBP, ocnStmHistoryValid=ocnStmHistoryValid, f3AclRuleStatsIntervalType=f3AclRuleStatsIntervalType, f3AclRuleHistoryAction=f3AclRuleHistoryAction, f3FpQosPolicerStatsABR=f3FpQosPolicerStatsABR, cmFlowHistoryIndex=cmFlowHistoryIndex, cmEthernetNetPortHistoryESDE=cmEthernetNetPortHistoryESDE, e3t3StatsLineSESs=e3t3StatsLineSESs, e1t1HistoryPathAISs=e1t1HistoryPathAISs, f3FpQosShaperStatsFD=f3FpQosShaperStatsFD, cmEthernetTrafficPortStatsESP256=cmEthernetTrafficPortStatsESP256, f3FpQosPolicerPerfGroup=f3FpQosPolicerPerfGroup, cmAccPortQosShaperThresholdValueHi=cmAccPortQosShaperThresholdValueHi, cmFlowStatsIBRN2AMin=cmFlowStatsIBRN2AMin, cmQosShaperStatsIntervalType=cmQosShaperStatsIntervalType, cmEthernetNetPortStatsXdslDsFullInits=cmEthernetNetPortStatsXdslDsFullInits, cmEthernetNetPortStatsUAS=cmEthernetNetPortStatsUAS, cmFlowPointStatsFLD=cmFlowPointStatsFLD, cmLagStatsESP1519=cmLagStatsESP1519, e3t3HistoryPathPESs=e3t3HistoryPathPESs, f3NetPortQosShaperStatsABRRL=f3NetPortQosShaperStatsABRRL, ocnStmStatsLineOPR=ocnStmStatsLineOPR, f3FpQosShaperThresholdCrossingAlert=f3FpQosShaperThresholdCrossingAlert, cmOAMFlowPointHistoryIndex=cmOAMFlowPointHistoryIndex, cmFlowStatsBytesInA2N=cmFlowStatsBytesInA2N, cmLagHistoryESBS=cmLagHistoryESBS, cmEthernetTrafficPortStatsESMP=cmEthernetTrafficPortStatsESMP, cmLagStatsATFD=cmLagStatsATFD, cmFlowStatsAction=cmFlowStatsAction, cmFlowPointHistoryUAS=cmFlowPointHistoryUAS, f3AclRuleStatsEntry=f3AclRuleStatsEntry, cmQosFlowPolicerHistoryBytesIn=cmQosFlowPolicerHistoryBytesIn, cmEthernetTrafficPortHistoryESUF=cmEthernetTrafficPortHistoryESUF, cmEthernetTrafficPortHistoryESJ=cmEthernetTrafficPortHistoryESJ, cmAccPortQosShaperThresholdEntry=cmAccPortQosShaperThresholdEntry, f3NetPortQosShaperThresholdVariable=f3NetPortQosShaperThresholdVariable, cmEthernetNetPortHistoryPSC=cmEthernetNetPortHistoryPSC, cmEthernetTrafficPortStatsIBRTx=cmEthernetTrafficPortStatsIBRTx, f3FpQosPolicerStatsBytesIn=f3FpQosPolicerStatsBytesIn, cmEthernetAccPortHistoryL2CPFP=cmEthernetAccPortHistoryL2CPFP, cmFlowStatsIBRRlN2A=cmFlowStatsIBRRlN2A, cmFlowStatsFMRDA2N=cmFlowStatsFMRDA2N, cmFlowHistorySES=cmFlowHistorySES, cmTrafficPortQosShaperThresholdValueLo=cmTrafficPortQosShaperThresholdValueLo, cmAccPortQosShaperStatsFD=cmAccPortQosShaperStatsFD, f3FpQosShaperPerfGroup=f3FpQosShaperPerfGroup, cmFlowBWPerfGroup=cmFlowBWPerfGroup, e1t1StatsPathFCs=e1t1StatsPathFCs, cmQosShaperV2HistoryFREDD=cmQosShaperV2HistoryFREDD, cmEthernetTrafficPortStatsFmcd=cmEthernetTrafficPortStatsFmcd, f3NetPortQosShaperHistoryValid=f3NetPortQosShaperHistoryValid, cmTrafficPortQosShaperStatsIntervalType=cmTrafficPortQosShaperStatsIntervalType, vtVcPathHistoryIndex=vtVcPathHistoryIndex, f3FpQosPolicerThresholdValueLo=f3FpQosPolicerThresholdValueLo, f3CardThresholdValueLo=f3CardThresholdValueLo, cmEthernetNetPortStatsLES=cmEthernetNetPortStatsLES, vtVcPathThresholdIndex=vtVcPathThresholdIndex, cmQosFlowPolicerThresholdInterval=cmQosFlowPolicerThresholdInterval, f3CardHistoryAction=f3CardHistoryAction, cmEthernetTrafficPortHistoryESBF=cmEthernetTrafficPortHistoryESBF, stsVcPathThresholdEntry=stsVcPathThresholdEntry, cmEthernetNetPortHistoryESP1024=cmEthernetNetPortHistoryESP1024, ocnStmStatsLineUASs=ocnStmStatsLineUASs, cmFlowPointStatsABRRLRx=cmFlowPointStatsABRRLRx, cmEthernetNetPortStatsXdslDsSes=cmEthernetNetPortStatsXdslDsSes, e1t1HistoryTime=e1t1HistoryTime, e1t1HistoryPathSEFsFarEnd=e1t1HistoryPathSEFsFarEnd, cmLagThresholdValueLo=cmLagThresholdValueLo, cmEthernetTrafficPortHistoryROPR=cmEthernetTrafficPortHistoryROPR, e3t3StatsAction=e3t3StatsAction, vtVcPathPerfGroup=vtVcPathPerfGroup, f3AclRuleThresholdValueLo=f3AclRuleThresholdValueLo, e3t3StatsTable=e3t3StatsTable, e3t3HistoryLineESs=e3t3HistoryLineESs, cmFlowStatsValid=cmFlowStatsValid, f3AclRuleStatsValid=f3AclRuleStatsValid, f3CardHistoryEntry=f3CardHistoryEntry, cmEthernetNetPortHistoryXdslUsSes=cmEthernetNetPortHistoryXdslUsSes, cmEthernetNetPortStatsL2CPFP=cmEthernetNetPortStatsL2CPFP, cmEthernetNetPortThresholdIndex=cmEthernetNetPortThresholdIndex, cmQosShaperV2HistoryEntry=cmQosShaperV2HistoryEntry, cmAccPortQosShaperStatsValid=cmAccPortQosShaperStatsValid, cmEthernetNetPortHistoryESFS=cmEthernetNetPortHistoryESFS, cmEthernetAccPortStatsOPT=cmEthernetAccPortStatsOPT, cmEthernetTrafficPortHistoryESP512=cmEthernetTrafficPortHistoryESP512, cmLagHistoryESJ=cmLagHistoryESJ, f3NetPortQosShaperHistoryFREDD=f3NetPortQosShaperHistoryFREDD, cmQosShaperHistoryFD=cmQosShaperHistoryFD, cmOAMFlowPointThresholdIndex=cmOAMFlowPointThresholdIndex, cmTrafficPortQosShaperThresholdInterval=cmTrafficPortQosShaperThresholdInterval, cmLagHistoryESC=cmLagHistoryESC, cmQosPolicerV2HistoryEntry=cmQosPolicerV2HistoryEntry, cmEthernetAccPortStatsLkupFails=cmEthernetAccPortStatsLkupFails, cmLagStatsAUFD=cmLagStatsAUFD, cmFlowHistoryABRN2A=cmFlowHistoryABRN2A, cmQosShaperHistoryFR=cmQosShaperHistoryFR, cmFlowStatsABRRLA2N=cmFlowStatsABRRLA2N, cmEthernetTrafficPortHistoryAUFD=cmEthernetTrafficPortHistoryAUFD, cmOAMFlowPointHistoryTime=cmOAMFlowPointHistoryTime, ocnStmThresholdTable=ocnStmThresholdTable, cmLagHistoryTime=cmLagHistoryTime, cmQosFlowPolicerStatsABR=cmQosFlowPolicerStatsABR, cmFlowBWN2AEIR=cmFlowBWN2AEIR, cmQosPolicerV2ThresholdMonValue=cmQosPolicerV2ThresholdMonValue, cmEthernetTrafficPortHistoryPSC=cmEthernetTrafficPortHistoryPSC, cmEthernetAccPortStatsValid=cmEthernetAccPortStatsValid, cmEthernetNetPortStatsAclDropNoMatch=cmEthernetNetPortStatsAclDropNoMatch, cmLagHistoryIndex=cmLagHistoryIndex, cmEthernetAccPortStatsIBRTx=cmEthernetAccPortStatsIBRTx, f3NetPortQosShaperStatsFD=f3NetPortQosShaperStatsFD, cmFlowPointStatsFMYD=cmFlowPointStatsFMYD, cmEthernetNetPortHistoryXdslUsCv=cmEthernetNetPortHistoryXdslUsCv, cmQosShaperV2ThresholdValueLo=cmQosShaperV2ThresholdValueLo, cmFlowStatsIBRN2AMax=cmFlowStatsIBRN2AMax, cmFlowHistoryACLN2ADrop=cmFlowHistoryACLN2ADrop, cmFlowStatsFMGA2N=cmFlowStatsFMGA2N, cmFlowStatsFMCDA2N=cmFlowStatsFMCDA2N, cmFlowHistoryIBRRlA2NMax=cmFlowHistoryIBRRlA2NMax, cmAccPortQosShaperHistoryFREDD=cmAccPortQosShaperHistoryFREDD, f3FpQosShaperStatsEntry=f3FpQosShaperStatsEntry, f3FpQosShaperThresholdValueHi=f3FpQosShaperThresholdValueHi, ocnStmHistoryLineESs=ocnStmHistoryLineESs, cmEthernetTrafficPortStatsValid=cmEthernetTrafficPortStatsValid, cmFlowHistoryIBRA2NMax=cmFlowHistoryIBRA2NMax, f3FpQosPolicerHistoryFMRD=f3FpQosPolicerHistoryFMRD, cmAccPortQosShaperHistoryTable=cmAccPortQosShaperHistoryTable, f3NetPortQosShaperStatsFREDD=f3NetPortQosShaperStatsFREDD, cmEthernetNetPortHistoryL2CPFP=cmEthernetNetPortHistoryL2CPFP, cmFlowBWA2NGFB=cmFlowBWA2NGFB, cmEthernetNetPortStatsPSC=cmEthernetNetPortStatsPSC, cmQosShaperThresholdMonValue=cmQosShaperThresholdMonValue, cmPerQueryGenControl=cmPerQueryGenControl, cmEthernetAccPortHistoryL2PTRxFramesEncap=cmEthernetAccPortHistoryL2PTRxFramesEncap)
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", e1t1HistoryPathSESs=e1t1HistoryPathSESs, cmLagStatsESOF=cmLagStatsESOF, f3AclRuleThresholdEntry=f3AclRuleThresholdEntry, cmTrafficPortQosShaperHistoryAction=cmTrafficPortQosShaperHistoryAction, cmLagHistoryATFD=cmLagHistoryATFD, cmEthernetAccPortHistoryESUF=cmEthernetAccPortHistoryESUF, cmFlowStatsIBRRlN2AMax=cmFlowStatsIBRRlN2AMax, f3FpQosShaperHistoryBT=f3FpQosShaperHistoryBT, cmFlowPointHistoryIBRMax=cmFlowPointHistoryIBRMax, cmLagStatsL2CPFP=cmLagStatsL2CPFP, f3FpQosPolicerStatsValid=f3FpQosPolicerStatsValid, cmLagStatsABRRx=cmLagStatsABRRx, cmEthernetAccPortHistoryESC=cmEthernetAccPortHistoryESC, cmQosPolicerV2StatsIndex=cmQosPolicerV2StatsIndex, cmEthernetTrafficPortHistoryESP1519=cmEthernetTrafficPortHistoryESP1519, e1t1HistoryIndex=e1t1HistoryIndex, f3NetPortQosShaperStatsBTD=f3NetPortQosShaperStatsBTD, cmFlowStatsES=cmFlowStatsES, e3t3StatsPathPSESs=e3t3StatsPathPSESs, e3t3StatsPathCUASsFarEnd=e3t3StatsPathCUASsFarEnd, cmEthernetAccPortStatsDhcpDropNoAssocIf=cmEthernetAccPortStatsDhcpDropNoAssocIf, cmFlowPointStatsValid=cmFlowPointStatsValid, f3FpQosPolicerThresholdCrossingAlert=f3FpQosPolicerThresholdCrossingAlert, cmQosShaperHistoryFTD=cmQosShaperHistoryFTD, cmFlowPointStatsIBRRlMin=cmFlowPointStatsIBRRlMin, cmOAMFlowPointStatsIntervalType=cmOAMFlowPointStatsIntervalType, ethernetNetworkPortPMGroup=ethernetNetworkPortPMGroup, cmEthernetAccPortHistoryESFS=cmEthernetAccPortHistoryESFS, e1t1HistoryPathCVsFarEnd=e1t1HistoryPathCVsFarEnd, cmEthernetAccPortHistoryIBRMinRx=cmEthernetAccPortHistoryIBRMinRx, cmOAMFlowPointThresholdVariable=cmOAMFlowPointThresholdVariable, cmPerfCompliance=cmPerfCompliance, f3CardStatsAMU=f3CardStatsAMU, cmFlowStatsFMYA2N=cmFlowStatsFMYA2N, cmEthernetNetPortHistoryESUF=cmEthernetNetPortHistoryESUF, cmFlowPointThresholdValueHi=cmFlowPointThresholdValueHi, cmFlowPointThresholdIndex=cmFlowPointThresholdIndex, cmAccPortQosShaperStatsFREDD=cmAccPortQosShaperStatsFREDD, cmEthernetTrafficPortHistoryABRRx=cmEthernetTrafficPortHistoryABRRx, cmTrafficPortQosShaperThresholdIndex=cmTrafficPortQosShaperThresholdIndex, cmQosShaperV2ThresholdVariable=cmQosShaperV2ThresholdVariable, cmEthernetTrafficPortStatsESBF=cmEthernetTrafficPortStatsESBF, cmEthernetNetPortStatsAclFwd2Cpu=cmEthernetNetPortStatsAclFwd2Cpu, cmPerformanceMIB=cmPerformanceMIB, cmTrafficPortQosShaperHistoryFD=cmTrafficPortQosShaperHistoryFD, cmQosShaperStatsABRRL=cmQosShaperStatsABRRL, cmQosShaperV2HistoryValid=cmQosShaperV2HistoryValid, cmEthernetTrafficPortStatsROPT=cmEthernetTrafficPortStatsROPT, cmTrafficPortQosShaperHistoryIndex=cmTrafficPortQosShaperHistoryIndex, cmEthernetAccPortThresholdInterval=cmEthernetAccPortThresholdInterval, cmLagStatsESP65=cmLagStatsESP65, f3NetPortQosShaperThresholdTable=f3NetPortQosShaperThresholdTable, e3t3StatsEntry=e3t3StatsEntry, vtVcPathFarEndStatsESs=vtVcPathFarEndStatsESs, f3CardStatsACU=f3CardStatsACU, cmLagHistoryESFS=cmLagHistoryESFS, cmEthernetTrafficPortHistoryRTemp=cmEthernetTrafficPortHistoryRTemp, cmQosFlowPolicerStatsTable=cmQosFlowPolicerStatsTable, cmQosFlowPolicerHistoryFMRD=cmQosFlowPolicerHistoryFMRD, e3t3StatsIntervalType=e3t3StatsIntervalType, cmEthernetTrafficPortStatsESP64=cmEthernetTrafficPortStatsESP64, cmFlowPointStatsNumLearnTableFlushes=cmFlowPointStatsNumLearnTableFlushes, cmQosPolicerV2StatsBytesOut=cmQosPolicerV2StatsBytesOut, ocnStmStatsLineLBC=ocnStmStatsLineLBC, cmLagHistoryESP1519=cmLagHistoryESP1519, ethernetAccessPortPMGroup=ethernetAccessPortPMGroup, cmFlowPointHistoryFBCD=cmFlowPointHistoryFBCD, vtVcPathFarEndHistoryCVs=vtVcPathFarEndHistoryCVs, cmEthernetTrafficPortThresholdVariable=cmEthernetTrafficPortThresholdVariable, cmLagHistoryLkupFails=cmLagHistoryLkupFails, cmOAMFlowPointHistoryTable=cmOAMFlowPointHistoryTable, cmEthernetNetPortStatsESUF=cmEthernetNetPortStatsESUF, cmEthernetNetPortHistoryAction=cmEthernetNetPortHistoryAction, vtVcPathHistoryCVs=vtVcPathHistoryCVs, cmEthernetTrafficPortStatsTable=cmEthernetTrafficPortStatsTable, cmLagStatsESBS=cmLagStatsESBS, cmEthernetNetPortStatsIBRMaxRx=cmEthernetNetPortStatsIBRMaxRx, cmAccPortQosShaperThresholdTable=cmAccPortQosShaperThresholdTable, cmOAMFlowPointStatsUAS=cmOAMFlowPointStatsUAS, cmQosPolicerV2StatsValid=cmQosPolicerV2StatsValid, e1t1ThresholdValueLo=e1t1ThresholdValueLo, cmEthernetNetPortStatsIndex=cmEthernetNetPortStatsIndex, cmQosPolicerV2ThresholdInterval=cmQosPolicerV2ThresholdInterval, cmEthernetNetPortHistoryESOP=cmEthernetNetPortHistoryESOP, cmLagStatsTable=cmLagStatsTable, stsVcPathHistoryESs=stsVcPathHistoryESs, e3t3StatsPathCSESs=e3t3StatsPathCSESs, cmFlowPointHistoryBT=cmFlowPointHistoryBT, cmQosShaperHistoryBTD=cmQosShaperHistoryBTD, cmEthernetNetPortXdslHistoryTable=cmEthernetNetPortXdslHistoryTable, cmEthernetTrafficPortStatsIBRMinRx=cmEthernetTrafficPortStatsIBRMinRx, cmEthernetTrafficPortHistoryFmcd=cmEthernetTrafficPortHistoryFmcd, e1t1StatsLineLOSSs=e1t1StatsLineLOSSs, f3CardHistoryTime=f3CardHistoryTime, e3t3ThresholdEntry=e3t3ThresholdEntry, cmEthernetAccPortHistoryESP512=cmEthernetAccPortHistoryESP512, cmFlowHistoryTime=cmFlowHistoryTime, cmLagStatsL2CPFD=cmLagStatsL2CPFD, cmEthernetNetPortHistoryABRTx=cmEthernetNetPortHistoryABRTx, ocnStmThresholdVarOptVariance=ocnStmThresholdVarOptVariance, cmPerfObjects=cmPerfObjects, stsVcPathStatsUASs=stsVcPathStatsUASs, cmLagHistoryESUP=cmLagHistoryESUP, cmEthernetTrafficPortStatsESOP=cmEthernetTrafficPortStatsESOP, e1t1HistoryPathFCs=e1t1HistoryPathFCs, cmEthernetAccPortStatsESP65=cmEthernetAccPortStatsESP65, f3NetPortQosShaperStatsBT=f3NetPortQosShaperStatsBT, cmFlowBWN2ACIR=cmFlowBWN2ACIR, cmEthernetNetPortHistoryAclDropNoMatch=cmEthernetNetPortHistoryAclDropNoMatch, e1t1StatsLineUASs=e1t1StatsLineUASs, cmLagStatsESP128=cmLagStatsESP128, f3CardThresholdIndex=f3CardThresholdIndex, cmLagStatsESF=cmLagStatsESF, cmEthernetNetPortStatsESO=cmEthernetNetPortStatsESO, f3FpQosPolicerStatsIntervalType=f3FpQosPolicerStatsIntervalType, cmFlowPointStatsUAS=cmFlowPointStatsUAS, cmOAMFlowPointHistoryUAS=cmOAMFlowPointHistoryUAS, cmFlowHistoryIBRRlN2AMax=cmFlowHistoryIBRRlN2AMax, stsVcPathPerfGroup=stsVcPathPerfGroup, cmQosShaperV2StatsEntry=cmQosShaperV2StatsEntry, e3t3ThresholdVariable=e3t3ThresholdVariable, cmQosShaperStatsBREDD=cmQosShaperStatsBREDD, cmEthernetAccPortStatsESP256=cmEthernetAccPortStatsESP256, f3FpQosPolicerHistoryTable=f3FpQosPolicerHistoryTable, e1t1StatsIndex=e1t1StatsIndex, f3CardHistoryAMU=f3CardHistoryAMU, f3FpQosPolicerHistoryABR=f3FpQosPolicerHistoryABR, cmEthernetTrafficPortStatsLES=cmEthernetTrafficPortStatsLES, cmTrafficPortQosShaperHistoryFREDD=cmTrafficPortQosShaperHistoryFREDD, cmQosShaperThresholdValueHi=cmQosShaperThresholdValueHi, cmEthernetNetPortHistoryESBF=cmEthernetNetPortHistoryESBF, cmEthernetNetPortStatsXdslUsSes=cmEthernetNetPortStatsXdslUsSes, f3FpQosPolicerHistoryAction=f3FpQosPolicerHistoryAction, cmEthernetNetPortHistoryXdslDsUas=cmEthernetNetPortHistoryXdslDsUas, cmEthernetTrafficPortStatsAclFwd2Cpu=cmEthernetTrafficPortStatsAclFwd2Cpu, cmQosShaperV2ThresholdTable=cmQosShaperV2ThresholdTable, cmPerfGroups=cmPerfGroups, ocnStmThresholdVarGroup=ocnStmThresholdVarGroup, f3CardHistoryMCU=f3CardHistoryMCU, cmEGXPerfNotifGroup=cmEGXPerfNotifGroup, cmFlowPointStatsFD=cmFlowPointStatsFD, f3NetPortQosShaperHistoryAction=f3NetPortQosShaperHistoryAction, f3FpQosPolicerStatsTable=f3FpQosPolicerStatsTable, cmAccPortQosShaperHistoryFD=cmAccPortQosShaperHistoryFD, cmFlowPointHistoryBytesIn=cmFlowPointHistoryBytesIn, cmEthernetAccPortStatsFbcd=cmEthernetAccPortStatsFbcd, vtVcPathStatsIndex=vtVcPathStatsIndex, cmQosShaperV2ThresholdMonValue=cmQosShaperV2ThresholdMonValue, f3FpQosShaperThresholdMonValue=f3FpQosShaperThresholdMonValue, cmAccPortQosShaperStatsAction=cmAccPortQosShaperStatsAction, cmEthernetNetPortStatsESOP=cmEthernetNetPortStatsESOP, cmLagHistoryL2CPFD=cmLagHistoryL2CPFD, cmFlowPointHistoryIBRRlMax=cmFlowPointHistoryIBRRlMax, cmEthernetAccPortHistoryIBRMaxRx=cmEthernetAccPortHistoryIBRMaxRx, cmEthernetTrafficPortHistoryAPFD=cmEthernetTrafficPortHistoryAPFD, cmFlowStatsABRN2A=cmFlowStatsABRN2A, cmEthernetAccPortStatsL2PTTxFramesDecap=cmEthernetAccPortStatsL2PTTxFramesDecap, f3NetPortQosShaperStatsValid=f3NetPortQosShaperStatsValid, cmTrafficPortQosShaperHistoryEntry=cmTrafficPortQosShaperHistoryEntry, cmQosShaperV2StatsIntervalType=cmQosShaperV2StatsIntervalType, f3FpQosPolicerThresholdVariable=f3FpQosPolicerThresholdVariable, cmFlowPointStatsFdRxFb=cmFlowPointStatsFdRxFb, cmEthernetTrafficPortHistoryESBS=cmEthernetTrafficPortHistoryESBS, cmLagHistoryTable=cmLagHistoryTable, ocnStmStatsLineFarEndESs=ocnStmStatsLineFarEndESs, cmEthernetTrafficPortStatsESJ=cmEthernetTrafficPortStatsESJ, cmEthernetNetPortStatsXdslDsEs=cmEthernetNetPortStatsXdslDsEs, cmLagStatsESP256=cmLagStatsESP256, cmLagHistoryValid=cmLagHistoryValid, cmEthernetAccPortHistoryOPT=cmEthernetAccPortHistoryOPT, f3FpQosShaperHistoryIndex=f3FpQosShaperHistoryIndex, cmFlowPointStatsSES=cmFlowPointStatsSES, cmEthernetNetPortHistoryTable=cmEthernetNetPortHistoryTable, cmFlowHistoryFTDA2N=cmFlowHistoryFTDA2N, ocnStmStatsLinePSC=ocnStmStatsLinePSC, ocnStmStatsLineSESs=ocnStmStatsLineSESs, cmEthernetNetPortStatsXdslUsEs=cmEthernetNetPortStatsXdslUsEs, cmLagThresholdVariable=cmLagThresholdVariable, e1t1StatsPathSESsFarEnd=e1t1StatsPathSESsFarEnd, cmEthernetNetPortHistoryL2PTTxFramesDecap=cmEthernetNetPortHistoryL2PTTxFramesDecap, cmEthernetTrafficPortStatsEntry=cmEthernetTrafficPortStatsEntry, cmOAMFlowPointThresholdCrossingAlert=cmOAMFlowPointThresholdCrossingAlert, e1t1HistoryPathCVs=e1t1HistoryPathCVs, cmEthernetTrafficPortThresholdTable=cmEthernetTrafficPortThresholdTable, cmEthernetTrafficPortStatsLkupFails=cmEthernetTrafficPortStatsLkupFails, ocnStmStatsValid=ocnStmStatsValid, cmFlowStatsABRRLRA2N=cmFlowStatsABRRLRA2N, cmEthernetNetPortHistoryLkupFails=cmEthernetNetPortHistoryLkupFails, e1t1StatsPathSEFsFarEnd=e1t1StatsPathSEFsFarEnd, e3t3HistoryPathCUASs=e3t3HistoryPathCUASs, stsVcPathHistoryCVs=stsVcPathHistoryCVs, cmTrafficPortQosShaperHistoryABRRL=cmTrafficPortQosShaperHistoryABRRL, vtVcPathHistoryTime=vtVcPathHistoryTime, cmQosPolicerV2HistoryAction=cmQosPolicerV2HistoryAction, e3t3HistoryLineLOSSs=e3t3HistoryLineLOSSs, f3FpQosShaperHistoryFREDD=f3FpQosShaperHistoryFREDD, cmAccPortQosShaperStatsABRRL=cmAccPortQosShaperStatsABRRL, ocnStmHistorySectionUASs=ocnStmHistorySectionUASs, cmEthernetNetPortHistoryUAS=cmEthernetNetPortHistoryUAS, cmEthernetTrafficPortStatsESP128=cmEthernetTrafficPortStatsESP128, cmEthernetAccPortStatsABRTx=cmEthernetAccPortStatsABRTx, cmFlowPointStatsFREDD=cmFlowPointStatsFREDD, cmEthernetAccPortHistoryESP65=cmEthernetAccPortHistoryESP65, e1t1StatsLineSESs=e1t1StatsLineSESs, cmFlowPointStatsFACLD=cmFlowPointStatsFACLD, f3NetPortQosShaperThresholdMonValue=f3NetPortQosShaperThresholdMonValue, cmEthernetTrafficPortThresholdVarEntry=cmEthernetTrafficPortThresholdVarEntry, f3CardThresholdEntry=f3CardThresholdEntry, cmTrafficPortQosShaperThresholdMonValue=cmTrafficPortQosShaperThresholdMonValue, cmLagStatsESO=cmLagStatsESO, cmEthernetTrafficPortThresholdVarTable=cmEthernetTrafficPortThresholdVarTable, cmFlowPointHistoryIBRRlMin=cmFlowPointHistoryIBRRlMin, e1t1ThresholdTable=e1t1ThresholdTable, f3NetPortQosShaperThresholdCrossingAlert=f3NetPortQosShaperThresholdCrossingAlert, e1t1StatsLineESs=e1t1StatsLineESs, cmQosPolicerV2HistoryFMG=cmQosPolicerV2HistoryFMG, cmLagHistoryESP256=cmLagHistoryESP256, cmEthernetTrafficPortStatsPSC=cmEthernetTrafficPortStatsPSC, f3CardHistoryIndex=f3CardHistoryIndex, f3FpQosPolicerThresholdTable=f3FpQosPolicerThresholdTable, cmEthernetTrafficPortHistoryIBRMinRx=cmEthernetTrafficPortHistoryIBRMinRx, cmEthernetTrafficPortStatsESUF=cmEthernetTrafficPortStatsESUF, ocnStmHistoryLineUASs=ocnStmHistoryLineUASs, cmEthernetAccPortStatsAclDropNoMatch=cmEthernetAccPortStatsAclDropNoMatch, cmFlowHistoryFBCDA2N=cmFlowHistoryFBCDA2N, cmLagStatsIntervalType=cmLagStatsIntervalType, cmEthernetTrafficPortThresholdCrossingAlert=cmEthernetTrafficPortThresholdCrossingAlert, cmFlowStatsIBRRlA2NMin=cmFlowStatsIBRRlA2NMin, cmEthernetNetPortHistoryXdslUsFecs=cmEthernetNetPortHistoryXdslUsFecs, cmEthernetNetPortHistoryESJ=cmEthernetNetPortHistoryESJ, f3AclRuleStatsAction=f3AclRuleStatsAction, e1t1ThresholdInterval=e1t1ThresholdInterval, cmEthernetAccPortStatsESUF=cmEthernetAccPortStatsESUF, cmFlowPointStatsFMCD=cmFlowPointStatsFMCD, cmFlowPointStatsFdicd=cmFlowPointStatsFdicd, e1t1HistoryLineLOSSs=e1t1HistoryLineLOSSs, cmLagHistoryESF=cmLagHistoryESF, cmEthernetAccPortThresholdEntry=cmEthernetAccPortThresholdEntry, ocnStmThresholdVarTable=ocnStmThresholdVarTable, cmOAMFlowPointThresholdMonValue=cmOAMFlowPointThresholdMonValue, cmEthernetTrafficPortStatsAclDropNoMatch=cmEthernetTrafficPortStatsAclDropNoMatch, ocnStmStatsLineFarEndSESs=ocnStmStatsLineFarEndSESs, cmEthernetNetPortStatsESP65=cmEthernetNetPortStatsESP65, e3t3StatsLineLOSSs=e3t3StatsLineLOSSs, cmLagStatsESCAE=cmLagStatsESCAE, cmAccPortQosShaperStatsFTD=cmAccPortQosShaperStatsFTD, cmEthernetAccPortStatsESBF=cmEthernetAccPortStatsESBF, cmFlowStatsFMYDN2A=cmFlowStatsFMYDN2A, f3CardStatsICU=f3CardStatsICU, f3FpQosShaperStatsIndex=f3FpQosShaperStatsIndex, cmQosShaperStatsTable=cmQosShaperStatsTable, cmAccPortQosShaperStatsBT=cmAccPortQosShaperStatsBT, cmEthernetTrafficPortHistoryFbcd=cmEthernetTrafficPortHistoryFbcd, cmEthernetNetPortHistoryESOF=cmEthernetNetPortHistoryESOF)
mibBuilder.exportSymbols("CM-PERFORMANCE-MIB", ocnStmHistoryEntry=ocnStmHistoryEntry, f3FpQosShaperThresholdInterval=f3FpQosShaperThresholdInterval, cmEthernetAccPortHistoryIndex=cmEthernetAccPortHistoryIndex, cmQosShaperHistoryValid=cmQosShaperHistoryValid, cmLagHistoryESMF=cmLagHistoryESMF, cmLagThresholdInterval=cmLagThresholdInterval, cmEthernetAccPortThresholdCrossingAlert=cmEthernetAccPortThresholdCrossingAlert, cmQosFlowPolicerHistoryEntry=cmQosFlowPolicerHistoryEntry, cmEthernetAccPortThresholdMonValue=cmEthernetAccPortThresholdMonValue, cmEthernetNetPortStatsESJ=cmEthernetNetPortStatsESJ, f3NetPortQosShaperStatsIndex=f3NetPortQosShaperStatsIndex, cmEthernetAccPortStatsABRRx=cmEthernetAccPortStatsABRRx, cmQosPolicerV2StatsFMY=cmQosPolicerV2StatsFMY, e1t1StatsPathSESs=e1t1StatsPathSESs, vtVcPathHistoryUASs=vtVcPathHistoryUASs, cmEthernetNetPortStatsValid=cmEthernetNetPortStatsValid, cmEthernetTrafficPortHistoryLES=cmEthernetTrafficPortHistoryLES, cmEthernetTrafficPortHistoryESUP=cmEthernetTrafficPortHistoryESUP, cmEthernetAccPortHistoryESOF=cmEthernetAccPortHistoryESOF, cmFlowHistoryABRA2N=cmFlowHistoryABRA2N, cmEthernetAccPortThresholdValueLo=cmEthernetAccPortThresholdValueLo, cmFlowPointStatsFMY=cmFlowPointStatsFMY, cmLagHistoryESCAE=cmLagHistoryESCAE, cmEthernetTrafficPortStatsESP1024=cmEthernetTrafficPortStatsESP1024, cmFlowHistoryIBRRlN2AMin=cmFlowHistoryIBRRlN2AMin, cmLagStatsESBF=cmLagStatsESBF, cmEthernetAccPortHistoryESMP=cmEthernetAccPortHistoryESMP, e1t1HistoryTable=e1t1HistoryTable, e3t3StatsPathPUASs=e3t3StatsPathPUASs, cmQosFlowPolicerHistoryIndex=cmQosFlowPolicerHistoryIndex, cmEthernetTrafficPortThresholdValueHi=cmEthernetTrafficPortThresholdValueHi, cmEthernetAccPortHistoryIBRMaxTx=cmEthernetAccPortHistoryIBRMaxTx, e1t1HistoryLineESs=e1t1HistoryLineESs, cmEthernetAccPortHistoryESBF=cmEthernetAccPortHistoryESBF, cmTrafficPortQosShaperStatsIndex=cmTrafficPortQosShaperStatsIndex, e3t3HistoryPathCCVsFarEnd=e3t3HistoryPathCCVsFarEnd, cmEthernetNetPortHistoryLBC=cmEthernetNetPortHistoryLBC, cmEthernetNetPortHistoryESO=cmEthernetNetPortHistoryESO, cmFlowHistoryABRRLN2A=cmFlowHistoryABRRLN2A, cmEthernetTrafficPortStatsL2PTTxFramesDecap=cmEthernetTrafficPortStatsL2PTTxFramesDecap, cmFlowStatsL2CPFD=cmFlowStatsL2CPFD, e3t3HistoryPathCUASsFarEnd=e3t3HistoryPathCUASsFarEnd, cmEthernetAccPortHistoryESBS=cmEthernetAccPortHistoryESBS, cmLagHistoryESBP=cmLagHistoryESBP, cmEthernetNetPortHistoryXdslUsFullInits=cmEthernetNetPortHistoryXdslUsFullInits, cmFlowThresholdEntry=cmFlowThresholdEntry, cmEthernetTrafficPortHistoryESP256=cmEthernetTrafficPortHistoryESP256, ocnStmStatsIntervalType=ocnStmStatsIntervalType, cmEthernetTrafficPortStatsESP512=cmEthernetTrafficPortStatsESP512, cmTrafficPortQosShaperThresholdEntry=cmTrafficPortQosShaperThresholdEntry, cmAccPortQosShaperStatsIndex=cmAccPortQosShaperStatsIndex, ocnStmThresholdValueLo=ocnStmThresholdValueLo, cmQosShaperV2HistoryABRRL=cmQosShaperV2HistoryABRRL, cmEthernetTrafficPortStatsTemp=cmEthernetTrafficPortStatsTemp, cmQosShaperV2StatsBREDD=cmQosShaperV2StatsBREDD, cmEthernetAccPortStatsEntry=cmEthernetAccPortStatsEntry, cmEthernetAccPortStatsTemp=cmEthernetAccPortStatsTemp, cmFlowPointHistoryFACLD=cmFlowPointHistoryFACLD, cmQosPolicerV2HistoryFMRD=cmQosPolicerV2HistoryFMRD, cmQosShaperHistoryFREDD=cmQosShaperHistoryFREDD, cmFlowPointStatsAclDropNoMatch=cmFlowPointStatsAclDropNoMatch, cmEthernetAccPortHistoryABRTx=cmEthernetAccPortHistoryABRTx, cmEthernetTrafficPortHistoryIBRTx=cmEthernetTrafficPortHistoryIBRTx, cmEthernetTrafficPortThresholdVarOprVariance=cmEthernetTrafficPortThresholdVarOprVariance, ocnStmThresholdInterval=ocnStmThresholdInterval, cmEthernetNetPortStatsXdslUsFullInits=cmEthernetNetPortStatsXdslUsFullInits, cmAccPortQosShaperHistoryTime=cmAccPortQosShaperHistoryTime, f3CardThresholdCrossingAlert=f3CardThresholdCrossingAlert, cmTrafficPortQosShaperHistoryFTD=cmTrafficPortQosShaperHistoryFTD, cmEthernetAccPortStatsESP128=cmEthernetAccPortStatsESP128, e1t1HistoryPathUASs=e1t1HistoryPathUASs, cmEthernetNetPortStatsL2PTTxFramesDecap=cmEthernetNetPortStatsL2PTTxFramesDecap, cmEthernetNetPortHistoryESCAE=cmEthernetNetPortHistoryESCAE, cmTrafficPortQosShaperStatsBREDD=cmTrafficPortQosShaperStatsBREDD, cmLagThresholdIndex=cmLagThresholdIndex, f3CardStatsIntervalType=f3CardStatsIntervalType, f3FpQosShaperHistoryTime=f3FpQosShaperHistoryTime, cmFlowPointHistoryEfBytesDiscarded=cmFlowPointHistoryEfBytesDiscarded, cmEthernetAccPortHistoryIBRTx=cmEthernetAccPortHistoryIBRTx, cmEthernetNetPortStatsXdslDsCv=cmEthernetNetPortStatsXdslDsCv, cmQosFlowPolicerStatsFMG=cmQosFlowPolicerStatsFMG, cmEthernetAccPortStatsESP=cmEthernetAccPortStatsESP, e3t3HistoryPathCFCsFarEnd=e3t3HistoryPathCFCsFarEnd, f3NetPortQosShaperStatsEntry=f3NetPortQosShaperStatsEntry, e1t1HistoryLineUASs=e1t1HistoryLineUASs, f3FpQosPolicerThresholdValueHi=f3FpQosPolicerThresholdValueHi, cmEthernetNetPortStatsXdslUsFecs=cmEthernetNetPortStatsXdslUsFecs, f3FpQosShaperThresholdEntry=f3FpQosShaperThresholdEntry, f3FpQosPolicerHistoryBytesOut=f3FpQosPolicerHistoryBytesOut, cmEthernetNetPortHistoryAUFD=cmEthernetNetPortHistoryAUFD, cmLagHistoryESP65=cmLagHistoryESP65, cmFlowHistoryFMGA2N=cmFlowHistoryFMGA2N, cmFlowHistoryIBRA2N=cmFlowHistoryIBRA2N, cmFlowPointStatsL2CPFD=cmFlowPointStatsL2CPFD, cmEthernetAccPortStatsESBP=cmEthernetAccPortStatsESBP, f3CardStatsMMU=f3CardStatsMMU, cmEthernetNetPortStatsAction=cmEthernetNetPortStatsAction, cmEthernetTrafficPortStatsAUFD=cmEthernetTrafficPortStatsAUFD, cmFlowPointStatsFMGD=cmFlowPointStatsFMGD, e3t3ThresholdInterval=e3t3ThresholdInterval, cmEthernetNetPortStatsXdslDsPkt=cmEthernetNetPortStatsXdslDsPkt, e3t3HistoryPathCCVs=e3t3HistoryPathCCVs, cmQosShaperHistoryEntry=cmQosShaperHistoryEntry, cmEthernetAccPortStatsESF=cmEthernetAccPortStatsESF, cmEthernetNetPortStatsESFS=cmEthernetNetPortStatsESFS, cmEthernetAccPortStatsIndex=cmEthernetAccPortStatsIndex, cmAccPortQosShaperThresholdInterval=cmAccPortQosShaperThresholdInterval, cmFlowPointHistoryL2CPFD=cmFlowPointHistoryL2CPFD, cmFlowHistoryIBRN2AMax=cmFlowHistoryIBRN2AMax, cmEthernetNetPortHistoryXdslDsFec=cmEthernetNetPortHistoryXdslDsFec, cmEthernetNetPortHistoryESP512=cmEthernetNetPortHistoryESP512, cmEthernetTrafficPortStatsDhcpDropNoAssocIf=cmEthernetTrafficPortStatsDhcpDropNoAssocIf, f3CardStatsIndex=f3CardStatsIndex, cmFlowPointStatsFTD=cmFlowPointStatsFTD, cmEthernetTrafficPortStatsESFS=cmEthernetTrafficPortStatsESFS, cmPerQueryGenTrap=cmPerQueryGenTrap, cmEthernetNetPortStatsESCAE=cmEthernetNetPortStatsESCAE, cmEthernetNetPortStatsOPT=cmEthernetNetPortStatsOPT, cmEthernetTrafficPortHistoryESDE=cmEthernetTrafficPortHistoryESDE, cmEthernetTrafficPortStatsIBRMinTx=cmEthernetTrafficPortStatsIBRMinTx, cmEthernetTrafficPortHistoryESOP=cmEthernetTrafficPortHistoryESOP, cmEthernetAccPortStatsLES=cmEthernetAccPortStatsLES, cmEthernetTrafficPortHistoryAclDropNoMatch=cmEthernetTrafficPortHistoryAclDropNoMatch, cmAccPortQosShaperThresholdCrossingAlert=cmAccPortQosShaperThresholdCrossingAlert, e3t3StatsPathCFCsFarEnd=e3t3StatsPathCFCsFarEnd, cmEthernetNetPortHistoryESP=cmEthernetNetPortHistoryESP, f3FpQosPolicerHistoryFMG=f3FpQosPolicerHistoryFMG, cmFlowHistoryES=cmFlowHistoryES, f3FpQosPolicerHistoryFMY=f3FpQosPolicerHistoryFMY, cmOAMFlowPointStatsIndex=cmOAMFlowPointStatsIndex, e3t3StatsPathPESs=e3t3StatsPathPESs, cmEthernetTrafficPortHistoryESP1024=cmEthernetTrafficPortHistoryESP1024, cmLagStatsValid=cmLagStatsValid, cmQosShaperV2HistoryTable=cmQosShaperV2HistoryTable, cmEthernetNetPortStatsOPR=cmEthernetNetPortStatsOPR, cmEthernetAccPortStatsIBRMaxTx=cmEthernetAccPortStatsIBRMaxTx, cmEthernetNetPortHistoryESUP=cmEthernetNetPortHistoryESUP, f3FpQosShaperHistoryBTD=f3FpQosShaperHistoryBTD)
