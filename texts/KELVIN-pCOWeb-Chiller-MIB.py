#
# PySNMP MIB module KELVIN-pCOWeb-Chiller-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/carel/KELVIN-pCOWeb-Chiller-MIB
# Produced by pysmi-1.1.12 at Mon Oct  7 02:50:46 2024
# On host fv-az775-99 platform Linux version 6.8.0-1014-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
sysLocation, sysName, sysContact = mibBuilder.importSymbols("SNMPv2-MIB", "sysLocation", "sysName", "sysContact")
Gauge32, IpAddress, enterprises, ObjectIdentity, Counter64, ModuleIdentity, NotificationType, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Bits, Counter32, Unsigned32, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "enterprises", "ObjectIdentity", "Counter64", "ModuleIdentity", "NotificationType", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Bits", "Counter32", "Unsigned32", "Integer32", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
kelvin_pCOWebMIB_Chiller = ModuleIdentity((1, 3, 6, 1, 4, 1, 9839, 2, 1)).setLabel("kelvin-pCOWebMIB-Chiller")
kelvin_pCOWebMIB_Chiller.setRevisions(('2013-09-13 16:02',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: kelvin_pCOWebMIB_Chiller.setRevisionsDescriptions(('New MIB Chiller',))
if mibBuilder.loadTexts: kelvin_pCOWebMIB_Chiller.setLastUpdated('201309131602Z')
if mibBuilder.loadTexts: kelvin_pCOWebMIB_Chiller.setOrganization('KELVIN srl / Rittal Gmbh')
if mibBuilder.loadTexts: kelvin_pCOWebMIB_Chiller.setContactInfo('\n                        KELVIN srl / Rittal Gmbh\n                        Via delgli Imprenditori, 15\n                        37067 Valeggio sul Mincio (VR) Italy\n                        Tel: +39 045 6372711\n                        E-mail: info@kelvinitaly.it\n                ')
if mibBuilder.loadTexts: kelvin_pCOWebMIB_Chiller.setDescription('This is the MIB module for the kelvin-pCOWeb-Chiller device.')
carel = MibIdentifier((1, 3, 6, 1, 4, 1, 9839))
systm = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 1))
agentRelease = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 1), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentRelease.setStatus('current')
if mibBuilder.loadTexts: agentRelease.setDescription('Release of the Agent.')
agentCode = MibScalar((1, 3, 6, 1, 4, 1, 9839, 1, 2), Integer32()).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: agentCode.setStatus('current')
if mibBuilder.loadTexts: agentCode.setDescription('Code of the Agent. 2=pCOWeb.')
instruments = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2))
pCOWebInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0))
pCOStatusgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10))
pCOId1_Status = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 10, 1), Integer32()).setLabel("pCOId1-Status").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_Status.setStatus('current')
if mibBuilder.loadTexts: pCOId1_Status.setDescription('Status of pCOId1. 0=Offline, 1=Init, 2=Online')
pCOErrorsNumbergroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11))
pCOId1_ErrorsNumber = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 0, 11, 1), Integer32()).setLabel("pCOId1-ErrorsNumber").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pCOId1_ErrorsNumber.setStatus('current')
if mibBuilder.loadTexts: pCOId1_ErrorsNumber.setDescription('Number of Communication Errors from pCOId1 to pCOWeb.')
digitalObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1))
analogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2))
integerObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3))
al_pa1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-pa1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_pa1.setStatus('current')
if mibBuilder.loadTexts: al_pa1.setDescription('High pressure switch 1 alarm')
al_pa2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-pa2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_pa2.setStatus('current')
if mibBuilder.loadTexts: al_pa2.setDescription('High pressure switch 2 alarm')
al_pb1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-pb1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_pb1.setStatus('current')
if mibBuilder.loadTexts: al_pb1.setDescription('Low pressure switch 1 alarm')
al_pb2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-pb2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_pb2.setStatus('current')
if mibBuilder.loadTexts: al_pb2.setDescription('Low pressure switch 2 alarm')
al_le = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-le").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_le.setStatus('current')
if mibBuilder.loadTexts: al_le.setDescription('Water level alarm')
al_idrofrigo_fl1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-fl1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_fl1.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_fl1.setDescription('Flow switch alarm')
static_press_alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("static-press-alarm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: static_press_alarm.setStatus('current')
if mibBuilder.loadTexts: static_press_alarm.setDescription('Water static pressure alarm')
w_static_press_alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("w-static-press-alarm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: w_static_press_alarm.setStatus('current')
if mibBuilder.loadTexts: w_static_press_alarm.setDescription('Water static pressure warning')
flow_value_alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("flow-value-alarm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: flow_value_alarm.setStatus('current')
if mibBuilder.loadTexts: flow_value_alarm.setDescription('Flow rate alarm')
al_q_comp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp1.setStatus('current')
if mibBuilder.loadTexts: al_q_comp1.setDescription('Overload compressor 1 circuit 1 alarm')
al_q_comp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp2.setStatus('current')
if mibBuilder.loadTexts: al_q_comp2.setDescription('Overload compressor 2 circuit 1 alarm')
al_q_comp3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp3.setStatus('current')
if mibBuilder.loadTexts: al_q_comp3.setDescription('Overload compressor 3 circuit 1 alarm')
al_q_comp4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp4.setStatus('current')
if mibBuilder.loadTexts: al_q_comp4.setDescription('Overload compressor 1 circuit 2 alarm')
al_q_comp5 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp5").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp5.setStatus('current')
if mibBuilder.loadTexts: al_q_comp5.setDescription('Overload compressor 2 circuit 2 alarm')
al_q_comp6 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-comp6").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_comp6.setStatus('current')
if mibBuilder.loadTexts: al_q_comp6.setDescription('Overload compressor 3 circuit 2 alarm')
al_q_fan_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan_1.setStatus('current')
if mibBuilder.loadTexts: al_q_fan_1.setDescription('Overload fans circuit 1')
al_q_fan_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan_2.setStatus('current')
if mibBuilder.loadTexts: al_q_fan_2.setDescription('Overload fans circuit 2')
al_q_fan11 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan11").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan11.setStatus('current')
if mibBuilder.loadTexts: al_q_fan11.setDescription('Overload fan 1 circuit 1 alarm')
al_q_fan12 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan12").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan12.setStatus('current')
if mibBuilder.loadTexts: al_q_fan12.setDescription('Overload fan 2 circuit 1 alarm')
al_q_fan13 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan13").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan13.setStatus('current')
if mibBuilder.loadTexts: al_q_fan13.setDescription('Overload fan 3 circuit 1 alarm')
al_q_fan14 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan14").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan14.setStatus('current')
if mibBuilder.loadTexts: al_q_fan14.setDescription('Overload fan 4 circuit 1 alarm')
al_q_fan21 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan21").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan21.setStatus('current')
if mibBuilder.loadTexts: al_q_fan21.setDescription('Overload fan 1 circuit 2 alarm')
al_q_fan22 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan22").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan22.setStatus('current')
if mibBuilder.loadTexts: al_q_fan22.setDescription('Overload fan 2 circuit 2 alarm')
al_q_fan_23 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan-23").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan_23.setStatus('current')
if mibBuilder.loadTexts: al_q_fan_23.setDescription('Overload fan 3 circuit 2 alarm')
al_q_fan24 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fan24").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fan24.setStatus('current')
if mibBuilder.loadTexts: al_q_fan24.setDescription('Overload fan 4 circuit 2 alarm')
al_idrofrigo_pump1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-pump1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_pump1.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_pump1.setDescription('Overload pump 1 alarm')
al_idrofrigo_pump2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-pump2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_pump2.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_pump2.setDescription('Overload pump 2 alarm')
al_phase_cont = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-phase-cont").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_phase_cont.setStatus('current')
if mibBuilder.loadTexts: al_phase_cont.setDescription('Wrong phase rotation alarm')
al_door_sw = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-door-sw").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_door_sw.setStatus('current')
if mibBuilder.loadTexts: al_door_sw.setDescription('Back Door open alarm')
compressor_FlowRate = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("compressor-FlowRate").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compressor_FlowRate.setStatus('current')
if mibBuilder.loadTexts: compressor_FlowRate.setDescription('Compressor FlowRate Management')
setpoint_inv_pumps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("setpoint-inv-pumps").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_inv_pumps.setStatus('current')
if mibBuilder.loadTexts: setpoint_inv_pumps.setDescription('Setpoint Type for Inverter pumps')
enable_pumps_redundance = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-pumps-redundance").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_pumps_redundance.setStatus('current')
if mibBuilder.loadTexts: enable_pumps_redundance.setDescription('Enable Pumps redundance')
enable_chiller_redundance = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-chiller-redundance").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_chiller_redundance.setStatus('current')
if mibBuilder.loadTexts: enable_chiller_redundance.setDescription('Enable Chiller redundance')
status_in_alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("status-in-alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: status_in_alarm.setStatus('current')
if mibBuilder.loadTexts: status_in_alarm.setDescription('Status in alarm')
compressor_recovery = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("compressor-recovery").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: compressor_recovery.setStatus('current')
if mibBuilder.loadTexts: compressor_recovery.setDescription('Compressor Recovery')
enable_thermal_redundance = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-thermal-redundance").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_thermal_redundance.setStatus('current')
if mibBuilder.loadTexts: enable_thermal_redundance.setDescription('Enable Thermal redundance')
enable_multi_pumps_function = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-multi-pumps-function").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_multi_pumps_function.setStatus('current')
if mibBuilder.loadTexts: enable_multi_pumps_function.setDescription('Enable multi-pumps function')
enable_pumps_offline = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-pumps-offline").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_pumps_offline.setStatus('current')
if mibBuilder.loadTexts: enable_pumps_offline.setDescription('Enable function pumps-Offline')
enable_3way_valve = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-3way-valve").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_3way_valve.setStatus('current')
if mibBuilder.loadTexts: enable_3way_valve.setDescription('Enable 3way valve')
enable_speed_up_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-speed-up-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_speed_up_FCM.setStatus('current')
if mibBuilder.loadTexts: enable_speed_up_FCM.setDescription('Enable speed-up FCM')
enable_soft_start_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-soft-start-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_soft_start_FCM.setStatus('current')
if mibBuilder.loadTexts: enable_soft_start_FCM.setDescription('Enable soft-start FCM')
enable_freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_freecooling.setStatus('current')
if mibBuilder.loadTexts: enable_freecooling.setDescription('Enable Freecooling')
enable_rot_FIFO_FC = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-rot-FIFO-FC").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_rot_FIFO_FC.setStatus('current')
if mibBuilder.loadTexts: enable_rot_FIFO_FC.setDescription('Enable rotation FIFO Freecooling')
enable_HT_function = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-HT-function").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_HT_function.setStatus('current')
if mibBuilder.loadTexts: enable_HT_function.setDescription('Enable HT-function')
enable_PID_Fc_valve = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-PID-Fc-valve").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_PID_Fc_valve.setStatus('current')
if mibBuilder.loadTexts: enable_PID_Fc_valve.setDescription('Enable PID-regulation for Freecooling valve')
enable_Fc_Thermal_Exclusion = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-Fc-Thermal-Exclusion").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_Fc_Thermal_Exclusion.setStatus('current')
if mibBuilder.loadTexts: enable_Fc_Thermal_Exclusion.setDescription('Enable Freecooling Thermal Exclusion')
manual_Reset_Ext_Drycooler_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("manual-Reset-Ext-Drycooler-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: manual_Reset_Ext_Drycooler_Alarm.setStatus('current')
if mibBuilder.loadTexts: manual_Reset_Ext_Drycooler_Alarm.setDescription('Manual Reset External Dry-cooler Alarm')
enable_static_press_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-static-press-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_static_press_Alarm.setStatus('current')
if mibBuilder.loadTexts: enable_static_press_Alarm.setDescription('Enable static pressure Alarm')
manual_reset_static_press_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("manual-reset-static-press-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: manual_reset_static_press_Alarm.setStatus('current')
if mibBuilder.loadTexts: manual_reset_static_press_Alarm.setDescription('Manual reset static pressure Alarm')
enable_static_press_Warning = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-static-press-Warning").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_static_press_Warning.setStatus('current')
if mibBuilder.loadTexts: enable_static_press_Warning.setDescription('Enable static pressure Warning')
manual_reset_static_press_Warning = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("manual-reset-static-press-Warning").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: manual_reset_static_press_Warning.setStatus('current')
if mibBuilder.loadTexts: manual_reset_static_press_Warning.setDescription('Manual reset static pressure Warning')
enable_diff_press_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-diff-press-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_diff_press_Alarm.setStatus('current')
if mibBuilder.loadTexts: enable_diff_press_Alarm.setDescription('Enable differential pressure Alarm')
manual_reset_diff_press_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("manual-reset-diff-press-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: manual_reset_diff_press_Alarm.setStatus('current')
if mibBuilder.loadTexts: manual_reset_diff_press_Alarm.setDescription('Manual reset differential pressure Alarm')
enable_pressure_recovery = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-pressure-recovery").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_pressure_recovery.setStatus('current')
if mibBuilder.loadTexts: enable_pressure_recovery.setDescription('Enable pressure recovery')
enable_Flow_Rate_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-Flow-Rate-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_Flow_Rate_Alarm.setStatus('current')
if mibBuilder.loadTexts: enable_Flow_Rate_Alarm.setDescription('Enable Flow-Rate Alarm')
manual_reset_Flow_Rate_Alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("manual-reset-Flow-Rate-Alarm").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: manual_reset_Flow_Rate_Alarm.setStatus('current')
if mibBuilder.loadTexts: manual_reset_Flow_Rate_Alarm.setDescription('Manual reset Flow-Rate Alarm')
enable_Flow_Rate_recovery = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-Flow-Rate-recovery").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_Flow_Rate_recovery.setStatus('current')
if mibBuilder.loadTexts: enable_Flow_Rate_recovery.setDescription('Enable Flow-Rate recovery')
enable_pCOWeb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("enable-pCOWeb").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: enable_pCOWeb.setStatus('current')
if mibBuilder.loadTexts: enable_pCOWeb.setDescription('Enable pCOWeb')
fc_single_chiller = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("fc-single-chiller").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: fc_single_chiller.setStatus('current')
if mibBuilder.loadTexts: fc_single_chiller.setDescription('Freecooling single chiller function')
al_idrofrigo_pump_c_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-pump-c-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_pump_c_1.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_pump_c_1.setDescription('Condensation pump 1 breaker switch alarm')
al_idrofrigo_pump_c_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-pump-c-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_pump_c_2.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_pump_c_2.setDescription('Condensation pump 2 breaker switch alarm')
al_idrofrigo_fl_C = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idrofrigo-fl-C").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idrofrigo_fl_C.setStatus('current')
if mibBuilder.loadTexts: al_idrofrigo_fl_C.setDescription('Condensation flow switch alarm')
c11_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c11-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c11_on.setStatus('current')
if mibBuilder.loadTexts: c11_on.setDescription('Compressor 1 circuit 1 ON')
c12_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c12-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c12_on.setStatus('current')
if mibBuilder.loadTexts: c12_on.setDescription('Compressor 2 circuit 1 ON')
c13_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c13-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c13_on.setStatus('current')
if mibBuilder.loadTexts: c13_on.setDescription('Compressor 3 circuit 1 ON')
c21_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 103), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c21-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c21_on.setStatus('current')
if mibBuilder.loadTexts: c21_on.setDescription('Compressor 1 circuit 2 ON')
c22_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 104), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c22-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c22_on.setStatus('current')
if mibBuilder.loadTexts: c22_on.setDescription('Compressor 2 circuit 2 ON')
c23_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 105), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("c23-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: c23_on.setStatus('current')
if mibBuilder.loadTexts: c23_on.setDescription('Compressor 3 circuit 2 ON')
pump1_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 106), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("pump1-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pump1_on.setStatus('current')
if mibBuilder.loadTexts: pump1_on.setDescription('Pump 1 ON')
pump2_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 107), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("pump2-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pump2_on.setStatus('current')
if mibBuilder.loadTexts: pump2_on.setDescription('Pump 2 ON')
on_fan_gr1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 108), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("on-fan-gr1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: on_fan_gr1.setStatus('current')
if mibBuilder.loadTexts: on_fan_gr1.setDescription('Fans group 1 ON')
on_fan_gr2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 109), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("on-fan-gr2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: on_fan_gr2.setStatus('current')
if mibBuilder.loadTexts: on_fan_gr2.setDescription('Fans group 2 ON')
fc_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 110), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("fc-on").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: fc_on.setStatus('current')
if mibBuilder.loadTexts: fc_on.setDescription('Freecooling or external dry-cooler 1 ON')
en_on_off_rem = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 130), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("en-on-off-rem").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: en_on_off_rem.setStatus('current')
if mibBuilder.loadTexts: en_on_off_rem.setDescription('Remote on-off')
unit_on = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 131), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("unit-on").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: unit_on.setStatus('current')
if mibBuilder.loadTexts: unit_on.setDescription('Chiller ON')
disch_alarm_scw_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 148), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("disch-alarm-scw-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: disch_alarm_scw_1.setStatus('current')
if mibBuilder.loadTexts: disch_alarm_scw_1.setDescription('Discharge screw compressor 1 alarm')
disch_alarm_scw_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 149), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("disch-alarm-scw-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: disch_alarm_scw_2.setStatus('current')
if mibBuilder.loadTexts: disch_alarm_scw_2.setDescription('Discharge screw compressor 2 alarm')
al_probe_inlet = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 150), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-inlet").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_inlet.setStatus('current')
if mibBuilder.loadTexts: al_probe_inlet.setDescription('Inlet probe alarm (broken or disconnected)')
al_probe_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 151), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_amb.setStatus('current')
if mibBuilder.loadTexts: al_probe_amb.setDescription('Ambient probe alarm (broken or disconnected)')
al_frigo_fl1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 152), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-frigo-fl1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_frigo_fl1.setStatus('current')
if mibBuilder.loadTexts: al_frigo_fl1.setDescription('Flow switch alarm (cooling alarm)')
al_idro_pump1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 153), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-pump1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_pump1.setStatus('current')
if mibBuilder.loadTexts: al_idro_pump1.setDescription('Pump 1 hydraulic alarm')
al_idro_pump2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 154), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-pump2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_pump2.setStatus('current')
if mibBuilder.loadTexts: al_idro_pump2.setDescription('Pump 2 hydraulic alarm')
al_idro_fl1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 155), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-fl1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_fl1.setStatus('current')
if mibBuilder.loadTexts: al_idro_fl1.setDescription('Flow switch alarm (hydraulic alarm)')
al_warning_fl1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 156), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-warning-fl1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_warning_fl1.setStatus('current')
if mibBuilder.loadTexts: al_warning_fl1.setDescription('Flow switch alarm (warning alarm)')
al_hi_water_temp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 157), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-hi-water-temp").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_hi_water_temp.setStatus('current')
if mibBuilder.loadTexts: al_hi_water_temp.setDescription('High Temperature alarm')
al_lo_water_temp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 158), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-lo-water-temp").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_lo_water_temp.setStatus('current')
if mibBuilder.loadTexts: al_lo_water_temp.setDescription('Low Temperature alarm')
al_ta_probe1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 159), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-ta-probe1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_ta_probe1.setStatus('current')
if mibBuilder.loadTexts: al_ta_probe1.setDescription('Antifreeze/evaporator probe 1 alarm')
al_hi_press = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 160), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-hi-press").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_hi_press.setStatus('current')
if mibBuilder.loadTexts: al_hi_press.setDescription('High condensation pressure alarm')
al_lo_press = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 161), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-lo-press").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_lo_press.setStatus('current')
if mibBuilder.loadTexts: al_lo_press.setDescription('Low condensation pressure alarm')
al_probe_evap_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 162), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-evap-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_evap_1.setStatus('current')
if mibBuilder.loadTexts: al_probe_evap_1.setDescription('Antifreeze/evaporator probe 1 alarm (broken or disconnected)')
al_probe_evap_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 163), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-evap-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_evap_2.setStatus('current')
if mibBuilder.loadTexts: al_probe_evap_2.setDescription('Antifreeze/evaporator probe 2 alarm (broken or disconnected)')
al_hi_press_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 164), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-hi-press-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_hi_press_1.setStatus('current')
if mibBuilder.loadTexts: al_hi_press_1.setDescription('High condensation pressure 1 alarm')
al_hi_press_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 165), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-hi-press-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_hi_press_2.setStatus('current')
if mibBuilder.loadTexts: al_hi_press_2.setDescription('High condensation pressure 2 alarm')
al_lo_press_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 166), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-lo-press-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_lo_press_1.setStatus('current')
if mibBuilder.loadTexts: al_lo_press_1.setDescription('Low condensation pressure 1 alarm')
al_lo_press_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 167), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-lo-press-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_lo_press_2.setStatus('current')
if mibBuilder.loadTexts: al_lo_press_2.setDescription('Low condensation pressure 2 alarm')
al_probe_tank = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 168), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-tank").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_tank.setStatus('current')
if mibBuilder.loadTexts: al_probe_tank.setDescription('Tank/Out probe alarm (broken or disconnected)')
off_line_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 169), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_1.setStatus('current')
if mibBuilder.loadTexts: off_line_1.setDescription('Chiller 1 offline')
off_line_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 170), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_2.setStatus('current')
if mibBuilder.loadTexts: off_line_2.setDescription('Chiller 2 offline')
off_line_3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 171), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_3.setStatus('current')
if mibBuilder.loadTexts: off_line_3.setDescription('Chiller 3 offline')
off_line_4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 172), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_4.setStatus('current')
if mibBuilder.loadTexts: off_line_4.setDescription('Chiller 4 offline')
off_line_5 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 173), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-5").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_5.setStatus('current')
if mibBuilder.loadTexts: off_line_5.setDescription('Chiller 5 offline')
off_line_6 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 174), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-6").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_6.setStatus('current')
if mibBuilder.loadTexts: off_line_6.setDescription('Chiller 6 offline')
off_line_7 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 175), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-7").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_7.setStatus('current')
if mibBuilder.loadTexts: off_line_7.setDescription('Chiller 7 offline')
off_line_8 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 176), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("off-line-8").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: off_line_8.setStatus('current')
if mibBuilder.loadTexts: off_line_8.setDescription('Chiller 8 offline')
al_ta_probe2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 177), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-ta-probe2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_ta_probe2.setStatus('current')
if mibBuilder.loadTexts: al_ta_probe2.setDescription('Antifreeze/evaporator probe 2 alarm')
al_sms = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 178), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-sms").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_sms.setStatus('current')
if mibBuilder.loadTexts: al_sms.setDescription('SMS alarm')
al_modem = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 179), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-modem").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_modem.setStatus('current')
if mibBuilder.loadTexts: al_modem.setDescription('Modem alarm')
sms_coda_alarm = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 180), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("sms-coda-alarm").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: sms_coda_alarm.setStatus('current')
if mibBuilder.loadTexts: sms_coda_alarm.setDescription('SMS coda alarm')
al_probe_fc = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 181), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-probe-fc").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_probe_fc.setStatus('current')
if mibBuilder.loadTexts: al_probe_fc.setDescription('Freecooling probe alarm (broken or disconnected)')
al_maint_pw1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 182), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-maint-pw1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_maint_pw1.setStatus('current')
if mibBuilder.loadTexts: al_maint_pw1.setDescription('Maintenance pump 1 alarm)')
al_maint_pw2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 183), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-maint-pw2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_maint_pw2.setStatus('current')
if mibBuilder.loadTexts: al_maint_pw2.setDescription('Maintenance pump 2 alarm)')
al_hi_temp_rid = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 184), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-hi-temp-rid").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_hi_temp_rid.setStatus('current')
if mibBuilder.loadTexts: al_hi_temp_rid.setDescription('High temperature alarm (redundance)')
al_q_fc_sep = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 185), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-q-fc-sep").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_q_fc_sep.setStatus('current')
if mibBuilder.loadTexts: al_q_fc_sep.setDescription('DryCooler breaker switch alarm')
al_p_wat2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 186), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-p-wat2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_p_wat2.setStatus('current')
if mibBuilder.loadTexts: al_p_wat2.setDescription('Water pressure 2 alarm')
al_p_wat1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 187), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-p-wat1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_p_wat1.setStatus('current')
if mibBuilder.loadTexts: al_p_wat1.setDescription('Water pressure 1 alarm')
al_foult_flow_p1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 188), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foult-flow-p1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foult_flow_p1.setStatus('current')
if mibBuilder.loadTexts: al_foult_flow_p1.setDescription('Pump 1 flow alarm')
al_foult_flow_p2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 189), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foult-flow-p2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foult_flow_p2.setStatus('current')
if mibBuilder.loadTexts: al_foult_flow_p2.setDescription('Pump 2 flow alarm')
al_foult_fl1_p1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 190), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foult-fl1-p1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foult_fl1_p1.setStatus('current')
if mibBuilder.loadTexts: al_foult_fl1_p1.setDescription('Pump 1 flow-switch alarm')
al_foult_fl1_p2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 191), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foult-fl1-p2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foult_fl1_p2.setStatus('current')
if mibBuilder.loadTexts: al_foult_fl1_p2.setDescription('Pump 2 flow-switch alarm')
al_warning_le = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 192), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-warning-le").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_warning_le.setStatus('current')
if mibBuilder.loadTexts: al_warning_le.setDescription('Water level warning')
al_frigo_fl_C = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 193), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-frigo-fl-C").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_frigo_fl_C.setStatus('current')
if mibBuilder.loadTexts: al_frigo_fl_C.setDescription('Flow switch condensation alarm (cooling alarm)')
al_idro_pump_c_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 194), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-pump-c-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_pump_c_1.setStatus('current')
if mibBuilder.loadTexts: al_idro_pump_c_1.setDescription('Pump 1 condensation hydraulic alarm')
al_idro_pump_c_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 195), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-pump-c-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_pump_c_2.setStatus('current')
if mibBuilder.loadTexts: al_idro_pump_c_2.setDescription('Pump 2 condensation hydraulic alarm')
al_idro_fl_C = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 196), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-idro-fl-C").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_idro_fl_C.setStatus('current')
if mibBuilder.loadTexts: al_idro_fl_C.setDescription('Flow switch condensation alarm (hydraulic alarm)')
al_warning_fl_C = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 197), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-warning-fl-C").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_warning_fl_C.setStatus('current')
if mibBuilder.loadTexts: al_warning_fl_C.setDescription('Flow switch condensation alarm (warning alarm)')
al_foul_fl_C_p1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 198), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foul-fl-C-p1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foul_fl_C_p1.setStatus('current')
if mibBuilder.loadTexts: al_foul_fl_C_p1.setDescription('Pump 1 condensation flow-switch alarm')
al_foul_fl_C_p2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 1, 199), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setLabel("al-foul-fl-C-p2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: al_foul_fl_C_p2.setStatus('current')
if mibBuilder.loadTexts: al_foul_fl_C_p2.setDescription('Pump 2 condensation flow-switch alarm')
setpoint_antifreeze1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-antifreeze1").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_antifreeze1.setStatus('current')
if mibBuilder.loadTexts: setpoint_antifreeze1.setDescription('Setpoint Antifreeze 1')
setpoint_antifreeze2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-antifreeze2").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_antifreeze2.setStatus('current')
if mibBuilder.loadTexts: setpoint_antifreeze2.setDescription('Setpoint Antifreeze 2')
setpoint_Compensation = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-Compensation").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_Compensation.setStatus('current')
if mibBuilder.loadTexts: setpoint_Compensation.setDescription('Setpoint Compensation')
hysteresis_Compensation = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Compensation").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Compensation.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Compensation.setDescription('Hysteresis Compensation')
max_Compensation = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Compensation").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Compensation.setStatus('current')
if mibBuilder.loadTexts: max_Compensation.setDescription('Max. Compensation')
setpoint_Differential = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-Differential").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_Differential.setStatus('current')
if mibBuilder.loadTexts: setpoint_Differential.setDescription('Setpoint Differential')
high_Limit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("high-Limit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: high_Limit.setStatus('current')
if mibBuilder.loadTexts: high_Limit.setDescription('High Limit')
low_Limit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("low-Limit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: low_Limit.setStatus('current')
if mibBuilder.loadTexts: low_Limit.setDescription('Low Limit')
max_Setpoint_Differential = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Setpoint-Differential").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Setpoint_Differential.setStatus('current')
if mibBuilder.loadTexts: max_Setpoint_Differential.setDescription('Max. Setpoint Differential')
min_Setpoint_Differential = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-Setpoint-Differential").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_Setpoint_Differential.setStatus('current')
if mibBuilder.loadTexts: min_Setpoint_Differential.setDescription('Min. Setpoint Differential')
setpoint_ASB_Inverter_pumps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-ASB-Inverter-pumps").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_ASB_Inverter_pumps.setStatus('current')
if mibBuilder.loadTexts: setpoint_ASB_Inverter_pumps.setDescription('Setpoint ASB Inverter pumps')
setpoint_DIFF_Inverter_pumps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-DIFF-Inverter-pumps").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_DIFF_Inverter_pumps.setStatus('current')
if mibBuilder.loadTexts: setpoint_DIFF_Inverter_pumps.setDescription('Setpoint DIFF Inverter pumps')
pressure_Out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("pressure-Out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pressure_Out.setStatus('current')
if mibBuilder.loadTexts: pressure_Out.setDescription('Pressure Out')
proportional_Band_Inverter_Pumps_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("proportional-Band-Inverter-Pumps-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: proportional_Band_Inverter_Pumps_PID.setStatus('current')
if mibBuilder.loadTexts: proportional_Band_Inverter_Pumps_PID.setDescription('Proportional Band Inverter Pumps PID')
integral_Time_Inverter_Pumps_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("integral-Time-Inverter-Pumps-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integral_Time_Inverter_Pumps_PID.setStatus('current')
if mibBuilder.loadTexts: integral_Time_Inverter_Pumps_PID.setDescription('Integral Time Inverter Pumps PID')
derivative_Time_Inverter_Pumps_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("derivative-Time-Inverter-Pumps-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: derivative_Time_Inverter_Pumps_PID.setStatus('current')
if mibBuilder.loadTexts: derivative_Time_Inverter_Pumps_PID.setDescription('Derivative Time Inverter Pumps PID')
hysteresis_Thermal_redundance = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Thermal-redundance").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Thermal_redundance.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Thermal_redundance.setDescription('Hysteresis Thermal redundance')
min_Opening_3Way_Valve_Hydraulic = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-Opening-3Way-Valve-Hydraulic").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_Opening_3Way_Valve_Hydraulic.setStatus('current')
if mibBuilder.loadTexts: min_Opening_3Way_Valve_Hydraulic.setDescription('Min. Opening 3Way Valve Hydraulic')
max_Opening_3Way_Valve_Hydraulic = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Opening-3Way-Valve-Hydraulic").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Opening_3Way_Valve_Hydraulic.setStatus('current')
if mibBuilder.loadTexts: max_Opening_3Way_Valve_Hydraulic.setDescription('Max. Opening 3Way Valve Hydraulic')
proportional_Band_3Way_Valve_Hydrauli_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("proportional-Band-3Way-Valve-Hydrauli-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: proportional_Band_3Way_Valve_Hydrauli_PID.setStatus('current')
if mibBuilder.loadTexts: proportional_Band_3Way_Valve_Hydrauli_PID.setDescription('Proportional Band 3Way Valve Hydraulic PID')
setpoint_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_FCM.setStatus('current')
if mibBuilder.loadTexts: setpoint_FCM.setDescription('Setpoint FCM')
hysteresis_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_FCM.setStatus('current')
if mibBuilder.loadTexts: hysteresis_FCM.setDescription('Hysteresis FCM')
max_Out_Speed_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Out-Speed-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Out_Speed_FCM.setStatus('current')
if mibBuilder.loadTexts: max_Out_Speed_FCM.setDescription('Max. Out Speed FCM')
min_Out_Speed_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-Out-Speed-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_Out_Speed_FCM.setStatus('current')
if mibBuilder.loadTexts: min_Out_Speed_FCM.setDescription('Min. Out Speed FCM')
hysteresis_Cut_off_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Cut-off-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Cut_off_FCM.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Cut_off_FCM.setDescription('Hysteresis Cut-off FCM')
max_Pressure_Alarm_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Pressure-Alarm-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Pressure_Alarm_FCM.setStatus('current')
if mibBuilder.loadTexts: max_Pressure_Alarm_FCM.setDescription('Max. Pressure Alarm FCM')
hysteresis_Max_Pressure_Alarm_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Max-Pressure-Alarm-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Max_Pressure_Alarm_FCM.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Max_Pressure_Alarm_FCM.setDescription('Hysteresis Max.Pressure Alarm FCM')
max_Out_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-Out-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_Out_FCM.setStatus('current')
if mibBuilder.loadTexts: max_Out_FCM.setDescription('Max. Out FCM')
min_Pressure_Alarm_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-Pressure-Alarm-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_Pressure_Alarm_FCM.setStatus('current')
if mibBuilder.loadTexts: min_Pressure_Alarm_FCM.setDescription('Min. Pressure Alarm FCM')
hysteresis_Min_Pressure_Alarm_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Min-Pressure-Alarm-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Min_Pressure_Alarm_FCM.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Min_Pressure_Alarm_FCM.setDescription('Hysteresis Min.Pressure Alarm FCM')
min_Out_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-Out-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_Out_FCM.setStatus('current')
if mibBuilder.loadTexts: min_Out_FCM.setDescription('Min. Out FCM')
delta_Freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("delta-Freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delta_Freecooling.setStatus('current')
if mibBuilder.loadTexts: delta_Freecooling.setDescription('Delta Freecooling')
hysteresis_Freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Freecooling.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Freecooling.setDescription('Hysteresis Freecooling')
proportional_Band_Freecooling_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("proportional-Band-Freecooling-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: proportional_Band_Freecooling_PID.setStatus('current')
if mibBuilder.loadTexts: proportional_Band_Freecooling_PID.setDescription('Proportional Band Freecooling PID')
offset_Freecooling_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("offset-Freecooling-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: offset_Freecooling_PID.setStatus('current')
if mibBuilder.loadTexts: offset_Freecooling_PID.setDescription('Offset Freecooling PID')
temperature_Overlap_Freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temperature-Overlap-Freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperature_Overlap_Freecooling.setStatus('current')
if mibBuilder.loadTexts: temperature_Overlap_Freecooling.setDescription('Temperature Overlap Freecooling')
min_out_freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-out-freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_out_freecooling.setStatus('current')
if mibBuilder.loadTexts: min_out_freecooling.setDescription('Min. out freecooling')
neutral_zone_K_costant = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("neutral-zone-K-costant").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutral_zone_K_costant.setStatus('current')
if mibBuilder.loadTexts: neutral_zone_K_costant.setDescription('Neutral zone K costant')
neutral_zone_V_variable = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("neutral-zone-V-variable").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: neutral_zone_V_variable.setStatus('current')
if mibBuilder.loadTexts: neutral_zone_V_variable.setDescription('Neutral zone V variable')
proportional_Band_freecooling_Valve_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("proportional-Band-freecooling-Valve-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: proportional_Band_freecooling_Valve_PID.setStatus('current')
if mibBuilder.loadTexts: proportional_Band_freecooling_Valve_PID.setDescription('Proportional Band freecooling Valve PID')
offset_Freecooling_Valve_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("offset-Freecooling-Valve-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: offset_Freecooling_Valve_PID.setStatus('current')
if mibBuilder.loadTexts: offset_Freecooling_Valve_PID.setDescription('Offset Freecooling Valve PID')
temperature_A_B = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temperature-A-B").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature_A_B.setStatus('current')
if mibBuilder.loadTexts: temperature_A_B.setDescription('Temperature A-B')
delta_Thermal_Excusion_Freecoling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("delta-Thermal-Excusion-Freecoling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delta_Thermal_Excusion_Freecoling.setStatus('current')
if mibBuilder.loadTexts: delta_Thermal_Excusion_Freecoling.setDescription('Delta Thermal Excusion Freecoling')
hysteresis_Thermal_Excusion_Freecoling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("hysteresis-Thermal-Excusion-Freecoling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hysteresis_Thermal_Excusion_Freecoling.setStatus('current')
if mibBuilder.loadTexts: hysteresis_Thermal_Excusion_Freecoling.setDescription('hysteresis Thermal Excusion Freecoling')
alarm_Setpoint_Static_Pressure_Hydraulic_circuit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("alarm-Setpoint-Static-Pressure-Hydraulic-circuit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm_Setpoint_Static_Pressure_Hydraulic_circuit.setStatus('current')
if mibBuilder.loadTexts: alarm_Setpoint_Static_Pressure_Hydraulic_circuit.setDescription('Alarm Setpoint Static Pressure Hydraulic circuit')
warnig_Setpoint_Static_Pressure_Hydraulic_circuit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("warnig-Setpoint-Static-Pressure-Hydraulic-circuit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: warnig_Setpoint_Static_Pressure_Hydraulic_circuit.setStatus('current')
if mibBuilder.loadTexts: warnig_Setpoint_Static_Pressure_Hydraulic_circuit.setDescription('Warnig Setpoint Static Pressure Hydraulic circuit')
alarm_Setpoint_Differential_Pressure_Hydraulic_circuit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("alarm-Setpoint-Differential-Pressure-Hydraulic-circuit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm_Setpoint_Differential_Pressure_Hydraulic_circuit.setStatus('current')
if mibBuilder.loadTexts: alarm_Setpoint_Differential_Pressure_Hydraulic_circuit.setDescription('Alarm Setpoint Differential Pressure Hydraulic circuit')
alarm_Setpoint_Flow_Rate_Hydraulic_circuit = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("alarm-Setpoint-Flow-Rate-Hydraulic-circuit").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarm_Setpoint_Flow_Rate_Hydraulic_circuit.setStatus('current')
if mibBuilder.loadTexts: alarm_Setpoint_Flow_Rate_Hydraulic_circuit.setDescription('Alarm Setpoint Flow-Rate Hydraulic circuit')
tempertaure_Cut_off_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("tempertaure-Cut-off-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: tempertaure_Cut_off_FCM.setStatus('current')
if mibBuilder.loadTexts: tempertaure_Cut_off_FCM.setDescription('Tempertaure Cut-off FCM')
set_effective = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("set-effective").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: set_effective.setStatus('current')
if mibBuilder.loadTexts: set_effective.setDescription('Set-effective')
set_fc = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("set-fc").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: set_fc.setStatus('current')
if mibBuilder.loadTexts: set_fc.setDescription('Freecooling or drycooler Set-point')
setpoint_a_us = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("setpoint-a-us").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: setpoint_a_us.setStatus('current')
if mibBuilder.loadTexts: setpoint_a_us.setDescription('Set-point MAIN')
max_setpoint = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-setpoint").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_setpoint.setStatus('current')
if mibBuilder.loadTexts: max_setpoint.setDescription('Max.setpoint')
min_setpoint = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-setpoint").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_setpoint.setStatus('current')
if mibBuilder.loadTexts: min_setpoint.setDescription('Min.setpoint')
diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: diff.setStatus('current')
if mibBuilder.loadTexts: diff.setDescription('differential')
max_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("max-diff").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: max_diff.setStatus('current')
if mibBuilder.loadTexts: max_diff.setDescription('Max. differential')
min_diff = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("min-diff").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: min_diff.setStatus('current')
if mibBuilder.loadTexts: min_diff.setDescription('Min.Differential')
fcs_out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000))).setLabel("fcs-out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: fcs_out.setStatus('current')
if mibBuilder.loadTexts: fcs_out.setDescription('Fans speed controller output %')
water_temp = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("water-temp").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: water_temp.setStatus('current')
if mibBuilder.loadTexts: water_temp.setDescription('Tank - Process water temperature')
temp_inlet = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 71), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temp-inlet").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_inlet.setStatus('current')
if mibBuilder.loadTexts: temp_inlet.setDescription('Water inlet temperature')
temp_outlet = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 72), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temp-outlet").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_outlet.setStatus('current')
if mibBuilder.loadTexts: temp_outlet.setDescription('Water outlet temperature')
flow_value = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 73), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9999, 9999))).setLabel("flow-value").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: flow_value.setStatus('current')
if mibBuilder.loadTexts: flow_value.setDescription('Flow rate value')
amp_value = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 74), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-9999, 9999))).setLabel("amp-value").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: amp_value.setStatus('current')
if mibBuilder.loadTexts: amp_value.setDescription('Current cunsumption')
ta_probe_temp_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 75), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("ta-probe-temp-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ta_probe_temp_1.setStatus('current')
if mibBuilder.loadTexts: ta_probe_temp_1.setDescription('Antifreeze 1 temperature monitoring ')
ta_probe_temp_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 76), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("ta-probe-temp-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ta_probe_temp_2.setStatus('current')
if mibBuilder.loadTexts: ta_probe_temp_2.setDescription('Antifreeze 2 temperature monitoring')
pressione1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 77), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pressione1.setStatus('current')
if mibBuilder.loadTexts: pressione1.setDescription('Condensation pressure circuit 1')
pressione2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 78), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pressione2.setStatus('current')
if mibBuilder.loadTexts: pressione2.setDescription('Condensation pressure circuit 2')
pump_sp_press = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 79), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("pump-sp-press").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pump_sp_press.setStatus('current')
if mibBuilder.loadTexts: pump_sp_press.setDescription('Pump discharge pressure ')
p_wat2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 80), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("p-wat2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: p_wat2.setStatus('current')
if mibBuilder.loadTexts: p_wat2.setDescription('Pump suction or static pressure')
temp_amb = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 81), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temp-amb").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_amb.setStatus('current')
if mibBuilder.loadTexts: temp_amb.setDescription('Ambient temperature')
temp_fc = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 82), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-999, 999))).setLabel("temp-fc").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: temp_fc.setStatus('current')
if mibBuilder.loadTexts: temp_fc.setDescription('Inlet - freecooling temperature')
pp1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 90), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp1.setStatus('current')
if mibBuilder.loadTexts: pp1.setDescription('Pump 1 speed')
pp2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 91), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: pp2.setStatus('current')
if mibBuilder.loadTexts: pp2.setDescription('Pump 2 speed')
cooling_capacity = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("cooling-capacity").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: cooling_capacity.setStatus('current')
if mibBuilder.loadTexts: cooling_capacity.setDescription('Cooling Capacity')
freecooling_capacity = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 101), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("freecooling-capacity").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: freecooling_capacity.setStatus('current')
if mibBuilder.loadTexts: freecooling_capacity.setDescription('FreeCooling Capacity')
total_capacity = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 2, 102), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("total-capacity").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: total_capacity.setStatus('current')
if mibBuilder.loadTexts: total_capacity.setDescription('TotalCooling Capacity')
ip_Address1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address1.setStatus('current')
if mibBuilder.loadTexts: ip_Address1.setDescription('IP Address 1 (XXX.xxx.xxx.xxx)')
ip_Address2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address2.setStatus('current')
if mibBuilder.loadTexts: ip_Address2.setDescription('IP Address 2 (xxx.XXX.xxx.xxx)')
ip_Address3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address3.setStatus('current')
if mibBuilder.loadTexts: ip_Address3.setDescription('IP Address 3 (xxx.xxx.XXX.xxx)')
ip_Address4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address4.setStatus('current')
if mibBuilder.loadTexts: ip_Address4.setDescription('IP Address 4 (xxx.xxx.xxx.XXX)')
netMask = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8, 32))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: netMask.setStatus('current')
if mibBuilder.loadTexts: netMask.setDescription('NetMask 8-16-24-32')
gateway1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway1.setStatus('current')
if mibBuilder.loadTexts: gateway1.setDescription('Gateway 1 (XXX.xxx.xxx.xxx)')
gateway2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway2.setStatus('current')
if mibBuilder.loadTexts: gateway2.setDescription('Gateway 2 (xxx.XXX.xxx.xxx)')
gateway3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway3.setStatus('current')
if mibBuilder.loadTexts: gateway3.setDescription('Gateway 3 (xxx.xxx.XXX.xxx)')
gateway4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: gateway4.setStatus('current')
if mibBuilder.loadTexts: gateway4.setDescription('Gateway 4 (xxx.xxx.xxx.XXX)')
dns1_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns1-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns1_1.setStatus('current')
if mibBuilder.loadTexts: dns1_1.setDescription('DNS (1) 1 (XXX.xxx.xxx.xxx)')
dns1_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns1-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns1_2.setStatus('current')
if mibBuilder.loadTexts: dns1_2.setDescription('DNS (1) 2 (xxx.XXX.xxx.xxx)')
dns1_3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns1-3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns1_3.setStatus('current')
if mibBuilder.loadTexts: dns1_3.setDescription('DNS (1) 3 (xxx.xxx.XXX.xxx)')
dns1_4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns1-4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns1_4.setStatus('current')
if mibBuilder.loadTexts: dns1_4.setDescription('DNS (1) 4 (xxx.xxx.xxx.XXX)')
dns2_1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns2-1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns2_1.setStatus('current')
if mibBuilder.loadTexts: dns2_1.setDescription('DNS (2) 1 (XXX.xxx.xxx.xxx)')
dns2_2 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns2-2").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns2_2.setStatus('current')
if mibBuilder.loadTexts: dns2_2.setDescription('DNS (2) 2 (xxx.XXX.xxx.xxx)')
dns2_3 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns2-3").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns2_3.setStatus('current')
if mibBuilder.loadTexts: dns2_3.setDescription('DNS (2) 3 (xxx.xxx.XXX.xxx)')
dns2_4 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("dns2-4").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: dns2_4.setStatus('current')
if mibBuilder.loadTexts: dns2_4.setDescription('DNS (2) 4 (xxx.xxx.xxx.XXX)')
ip_Address1_Out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address1-Out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address1_Out.setStatus('current')
if mibBuilder.loadTexts: ip_Address1_Out.setDescription('IP Address Out 1 (XXX.xxx.xxx.xxx)')
ip_Address2_Out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address2-Out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address2_Out.setStatus('current')
if mibBuilder.loadTexts: ip_Address2_Out.setDescription('IP Address Out 2 (xxx.XXX.xxx.xxx)')
ip_Address3_Out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address3-Out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address3_Out.setStatus('current')
if mibBuilder.loadTexts: ip_Address3_Out.setDescription('IP Address Out 3 (xxx.xxx.XXX.xxx)')
ip_Address4_Out = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setLabel("ip-Address4-Out").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: ip_Address4_Out.setStatus('current')
if mibBuilder.loadTexts: ip_Address4_Out.setDescription('IP Address Out 4 (xxx.xxx.xxx.XXX)')
starting_delay_Second_Pump = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("starting-delay-Second-Pump").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: starting_delay_Second_Pump.setStatus('current')
if mibBuilder.loadTexts: starting_delay_Second_Pump.setDescription('Starting delay Second Pump')
starting_delay_btw_Pump_Compressor = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("starting-delay-btw-Pump-Compressor").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: starting_delay_btw_Pump_Compressor.setStatus('current')
if mibBuilder.loadTexts: starting_delay_btw_Pump_Compressor.setDescription('Starting delay btw Pump - Compressor')
overlap_time_Pumps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("overlap-time-Pumps").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: overlap_time_Pumps.setStatus('current')
if mibBuilder.loadTexts: overlap_time_Pumps.setDescription('Overlap time Pumps')
working_time_Pumps = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setLabel("working-time-Pumps").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: working_time_Pumps.setStatus('current')
if mibBuilder.loadTexts: working_time_Pumps.setDescription('Working time Pumps')
running_time_Chillers = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("running-time-Chillers").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: running_time_Chillers.setStatus('current')
if mibBuilder.loadTexts: running_time_Chillers.setDescription('Running time Chillers')
overlap_time_Chillers = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("overlap-time-Chillers").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: overlap_time_Chillers.setStatus('current')
if mibBuilder.loadTexts: overlap_time_Chillers.setDescription('Overlap time Chillers')
n_chillers_Max = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setLabel("n-chillers-Max").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_chillers_Max.setStatus('current')
if mibBuilder.loadTexts: n_chillers_Max.setDescription('N chillers Max')
n_chillers_ON = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setLabel("n-chillers-ON").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_chillers_ON.setStatus('current')
if mibBuilder.loadTexts: n_chillers_ON.setDescription('N chillers ON')
n_pumps_ON = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setLabel("n-pumps-ON").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_pumps_ON.setStatus('current')
if mibBuilder.loadTexts: n_pumps_ON.setDescription('N pumps ON')
time_Enable_Pumps_Chiller_Offline = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("time-Enable-Pumps-Chiller-Offline").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Enable_Pumps_Chiller_Offline.setStatus('current')
if mibBuilder.loadTexts: time_Enable_Pumps_Chiller_Offline.setDescription('Time Enable Pumps - Chiller Offline')
time_Running_Pumps_Chiller_Offline = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("time-Running-Pumps-Chiller-Offline").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Running_Pumps_Chiller_Offline.setStatus('current')
if mibBuilder.loadTexts: time_Running_Pumps_Chiller_Offline.setDescription('Time Running Pumps - Chiller Offline')
integral_Time_3Way_Valve_Hydraulic_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("integral-Time-3Way-Valve-Hydraulic-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integral_Time_3Way_Valve_Hydraulic_PID.setStatus('current')
if mibBuilder.loadTexts: integral_Time_3Way_Valve_Hydraulic_PID.setDescription('Integral Time 3Way Valve Hydraulic (PID)')
derivative_Time_3Way_Valve_Hydraulic_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("derivative-Time-3Way-Valve-Hydraulic-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: derivative_Time_3Way_Valve_Hydraulic_PID.setStatus('current')
if mibBuilder.loadTexts: derivative_Time_3Way_Valve_Hydraulic_PID.setDescription('Derivative Time 3Way Valve Hydraulic (PID)')
output_Address_3Way_Valve_Hydraulic = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setLabel("output-Address-3Way-Valve-Hydraulic").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: output_Address_3Way_Valve_Hydraulic.setStatus('current')
if mibBuilder.loadTexts: output_Address_3Way_Valve_Hydraulic.setDescription('Output  Address 3Way Valve Hydraulic')
time_Speed_Up_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("time-Speed-Up-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Speed_Up_FCM.setStatus('current')
if mibBuilder.loadTexts: time_Speed_Up_FCM.setDescription('Time Speed-Up (FCM)')
time_Soft_Start_FCM = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setLabel("time-Soft-Start-FCM").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Soft_Start_FCM.setStatus('current')
if mibBuilder.loadTexts: time_Soft_Start_FCM.setDescription('Time Soft-Start (FCM)')
delay_Freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("delay-Freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_Freecooling.setStatus('current')
if mibBuilder.loadTexts: delay_Freecooling.setDescription('Delay Freecooling')
integral_Time_Freeccoling_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("integral-Time-Freeccoling-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integral_Time_Freeccoling_PID.setStatus('current')
if mibBuilder.loadTexts: integral_Time_Freeccoling_PID.setDescription('Integral Time Freeccoling (PID)')
derivative_Time_Freeccoling_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("derivative-Time-Freeccoling-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: derivative_Time_Freeccoling_PID.setStatus('current')
if mibBuilder.loadTexts: derivative_Time_Freeccoling_PID.setDescription('Derivative Time Freeccoling (PID)')
time_Min_On_Freecooling_Chiller_timing = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("time-Min-On-Freecooling-Chiller-timing").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Min_On_Freecooling_Chiller_timing.setStatus('current')
if mibBuilder.loadTexts: time_Min_On_Freecooling_Chiller_timing.setDescription('Time Min. On (Freecooling - Chiller timing)')
time_Min_Off_Freecooling_Chiller_timing = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("time-Min-Off-Freecooling-Chiller-timing").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Min_Off_Freecooling_Chiller_timing.setStatus('current')
if mibBuilder.loadTexts: time_Min_Off_Freecooling_Chiller_timing.setDescription('Time Min. Off (Freecooling - Chiller timing)')
time_Min_Different_Freecooling_Chiller_timing = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("time-Min-Different-Freecooling-Chiller-timing").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Min_Different_Freecooling_Chiller_timing.setStatus('current')
if mibBuilder.loadTexts: time_Min_Different_Freecooling_Chiller_timing.setDescription('Time Min. Different (Freecooling - Chiller timing)')
time_Min_Same_Freecooling_Chiller_timing = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setLabel("time-Min-Same-Freecooling-Chiller-timing").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: time_Min_Same_Freecooling_Chiller_timing.setStatus('current')
if mibBuilder.loadTexts: time_Min_Same_Freecooling_Chiller_timing.setDescription('Time Min. Same (Freecooling - Chiller timing)')
integral_Time_Freeccoling_Valve_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("integral-Time-Freeccoling-Valve-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: integral_Time_Freeccoling_Valve_PID.setStatus('current')
if mibBuilder.loadTexts: integral_Time_Freeccoling_Valve_PID.setDescription('Integral Time Freeccoling Valve (PID)')
derivative_Time_Freeccoling_Valve_PID = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("derivative-Time-Freeccoling-Valve-PID").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: derivative_Time_Freeccoling_Valve_PID.setStatus('current')
if mibBuilder.loadTexts: derivative_Time_Freeccoling_Valve_PID.setDescription('Derivative Time Freeccoling Valve (PID)')
output_Address_Valve_Freecooling = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setLabel("output-Address-Valve-Freecooling").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: output_Address_Valve_Freecooling.setStatus('current')
if mibBuilder.loadTexts: output_Address_Valve_Freecooling.setDescription('Output Address Valve Freecooling')
delay_Freecooling_Thermal_Exclusion = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("delay-Freecooling-Thermal-Exclusion").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_Freecooling_Thermal_Exclusion.setStatus('current')
if mibBuilder.loadTexts: delay_Freecooling_Thermal_Exclusion.setDescription('Delay Freecoolimg Thermal Exclusion')
n_of_alarm_External_Dry_Cooler = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setLabel("n-of-alarm-External-Dry-Cooler").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_of_alarm_External_Dry_Cooler.setStatus('current')
if mibBuilder.loadTexts: n_of_alarm_External_Dry_Cooler.setDescription('N of alarm (External Dry-Cooler)')
delay_Alarm_Static_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("delay-Alarm-Static-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_Alarm_Static_Pressure.setStatus('current')
if mibBuilder.loadTexts: delay_Alarm_Static_Pressure.setDescription('Delay Alarm (Static Pressure)')
n_of_Alarm_Static_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n-of-Alarm-Static-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_of_Alarm_Static_Pressure.setStatus('current')
if mibBuilder.loadTexts: n_of_Alarm_Static_Pressure.setDescription('N of Alarm (Static Pressure)')
delay_Warning_Static_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("delay-Warning-Static-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_Warning_Static_Pressure.setStatus('current')
if mibBuilder.loadTexts: delay_Warning_Static_Pressure.setDescription('Delay Warning (Static Pressure)')
n_of_Warning_Static_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n-of-Warning-Static-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_of_Warning_Static_Pressure.setStatus('current')
if mibBuilder.loadTexts: n_of_Warning_Static_Pressure.setDescription('N of Warning (Static Pressure)')
n_of_Alarm_Differential_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n-of-Alarm-Differential-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_of_Alarm_Differential_Pressure.setStatus('current')
if mibBuilder.loadTexts: n_of_Alarm_Differential_Pressure.setDescription('N of Alarm (Differential Pressure)')
priming_Time_Hydraulic_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("priming-Time-Hydraulic-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: priming_Time_Hydraulic_Pressure.setStatus('current')
if mibBuilder.loadTexts: priming_Time_Hydraulic_Pressure.setDescription('Priming Time (Hydraulic Pressure)')
delay_priming_Time_Hydraulic_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("delay-priming-Time-Hydraulic-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_priming_Time_Hydraulic_Pressure.setStatus('current')
if mibBuilder.loadTexts: delay_priming_Time_Hydraulic_Pressure.setDescription('Delay Priming Time (Hydraulic Pressure)')
output_Address_Alarm_Static_Pressure = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 18))).setLabel("output-Address-Alarm-Static-Pressure").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: output_Address_Alarm_Static_Pressure.setStatus('current')
if mibBuilder.loadTexts: output_Address_Alarm_Static_Pressure.setDescription('Output Address Alarm (Static Pressure)')
n_of_Alarm_Flow_Rate = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setLabel("n-of-Alarm-Flow-Rate").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: n_of_Alarm_Flow_Rate.setStatus('current')
if mibBuilder.loadTexts: n_of_Alarm_Flow_Rate.setDescription('N of Alarm (Flow Rate)')
priming_Time_Flow_Rate = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 68), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("priming-Time-Flow-Rate").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: priming_Time_Flow_Rate.setStatus('current')
if mibBuilder.loadTexts: priming_Time_Flow_Rate.setDescription('Priming Time (Flow Rate)')
delay_priming_Time_Flow_Rate = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("delay-priming-Time-Flow-Rate").setUnits('N/A').setMaxAccess("readwrite")
if mibBuilder.loadTexts: delay_priming_Time_Flow_Rate.setStatus('current')
if mibBuilder.loadTexts: delay_priming_Time_Flow_Rate.setDescription('Delay Priming Time (Flow Rate)')
bms_address_IDENT = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200))).setLabel("bms-address-IDENT").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: bms_address_IDENT.setStatus('current')
if mibBuilder.loadTexts: bms_address_IDENT.setDescription('BMS address (IDENT)')
chiller_name0 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setLabel("chiller-name0").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: chiller_name0.setStatus('current')
if mibBuilder.loadTexts: chiller_name0.setDescription('Chiller Model - Article Number - 0')
chiller_name1 = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 100), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 999))).setLabel("chiller-name1").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: chiller_name1.setStatus('current')
if mibBuilder.loadTexts: chiller_name1.setDescription('Chiller Model - Article Number - 1')
current_day = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 123), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setLabel("current-day").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: current_day.setStatus('current')
if mibBuilder.loadTexts: current_day.setDescription('Current Day')
current_month = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 124), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setLabel("current-month").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: current_month.setStatus('current')
if mibBuilder.loadTexts: current_month.setDescription('Current Month')
current_year = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 125), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setLabel("current-year").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: current_year.setStatus('current')
if mibBuilder.loadTexts: current_year.setDescription('Current Year')
current_hour = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 126), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setLabel("current-hour").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: current_hour.setStatus('current')
if mibBuilder.loadTexts: current_hour.setDescription('Current Hour')
current_minute = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 127), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setLabel("current-minute").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: current_minute.setStatus('current')
if mibBuilder.loadTexts: current_minute.setDescription('Current Minute')
chiller_mode_operation = MibScalar((1, 3, 6, 1, 4, 1, 9839, 2, 1, 3, 150), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setLabel("chiller-mode-operation").setUnits('N/A').setMaxAccess("readonly")
if mibBuilder.loadTexts: chiller_mode_operation.setStatus('current')
if mibBuilder.loadTexts: chiller_mode_operation.setDescription('Chiller mode operation')
trapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100))
high_pressure_switch_1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 1)).setLabel("high-pressure-switch-1-alarm")
if mibBuilder.loadTexts: high_pressure_switch_1_alarm.setStatus('current')
if mibBuilder.loadTexts: high_pressure_switch_1_alarm.setDescription('High pressure switch 1 alarm')
high_pressure_switch_2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 2)).setLabel("high-pressure-switch-2-alarm")
if mibBuilder.loadTexts: high_pressure_switch_2_alarm.setStatus('current')
if mibBuilder.loadTexts: high_pressure_switch_2_alarm.setDescription('High pressure switch 2 alarm')
low_pressure_switch_1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 3)).setLabel("low-pressure-switch-1-alarm")
if mibBuilder.loadTexts: low_pressure_switch_1_alarm.setStatus('current')
if mibBuilder.loadTexts: low_pressure_switch_1_alarm.setDescription('Low pressure switch 1 alarm')
low_pressure_switch_2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 4)).setLabel("low-pressure-switch-2-alarm")
if mibBuilder.loadTexts: low_pressure_switch_2_alarm.setStatus('current')
if mibBuilder.loadTexts: low_pressure_switch_2_alarm.setDescription('Low pressure switch 2 alarm')
water_level_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 6)).setLabel("water-level-alarm")
if mibBuilder.loadTexts: water_level_alarm.setStatus('current')
if mibBuilder.loadTexts: water_level_alarm.setDescription('Water level alarm')
flow_switch_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 8)).setLabel("flow-switch-alarm")
if mibBuilder.loadTexts: flow_switch_alarm.setStatus('current')
if mibBuilder.loadTexts: flow_switch_alarm.setDescription('Flow switch alarm')
water_static_pressure_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 9)).setLabel("water-static-pressure-alarm")
if mibBuilder.loadTexts: water_static_pressure_alarm.setStatus('current')
if mibBuilder.loadTexts: water_static_pressure_alarm.setDescription('Water static pressure alarm')
water_static_pressure_warning = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 10)).setLabel("water-static-pressure-warning")
if mibBuilder.loadTexts: water_static_pressure_warning.setStatus('current')
if mibBuilder.loadTexts: water_static_pressure_warning.setDescription('Water static pressure warning')
flow_rate_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 11)).setLabel("flow-rate-alarm")
if mibBuilder.loadTexts: flow_rate_alarm.setStatus('current')
if mibBuilder.loadTexts: flow_rate_alarm.setDescription('Flow rate alarm')
overload_compressor1_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 12)).setLabel("overload-compressor1-circuit1-alarm")
if mibBuilder.loadTexts: overload_compressor1_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor1_circuit1_alarm.setDescription('Overload compressor 1 circuit 1 alarm')
overload_compressor2_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 13)).setLabel("overload-compressor2-circuit1-alarm")
if mibBuilder.loadTexts: overload_compressor2_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor2_circuit1_alarm.setDescription('Overload compressor 2 circuit 1 alarm')
overload_compressor3_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 14)).setLabel("overload-compressor3-circuit1-alarm")
if mibBuilder.loadTexts: overload_compressor3_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor3_circuit1_alarm.setDescription('Overload compressor 3 circuit 1 alarm')
overload_compressor1_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 15)).setLabel("overload-compressor1-circuit2-alarm")
if mibBuilder.loadTexts: overload_compressor1_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor1_circuit2_alarm.setDescription('Overload compressor 1 circuit 2 alarm')
overload_compressor2_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 16)).setLabel("overload-compressor2-circuit2-alarm")
if mibBuilder.loadTexts: overload_compressor2_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor2_circuit2_alarm.setDescription('Overload compressor 2 circuit 2 alarm')
overload_compressor3_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 17)).setLabel("overload-compressor3-circuit2-alarm")
if mibBuilder.loadTexts: overload_compressor3_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_compressor3_circuit2_alarm.setDescription('Overload compressor 3 circuit 2 alarm')
overload_fans_circuit1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 18)).setLabel("overload-fans-circuit1")
if mibBuilder.loadTexts: overload_fans_circuit1.setStatus('current')
if mibBuilder.loadTexts: overload_fans_circuit1.setDescription('Overload fans circuit 1')
overload_fans_circuit2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 19)).setLabel("overload-fans-circuit2")
if mibBuilder.loadTexts: overload_fans_circuit2.setStatus('current')
if mibBuilder.loadTexts: overload_fans_circuit2.setDescription('Overload fans circuit 2')
overload_fan1_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 20)).setLabel("overload-fan1-circuit1-alarm")
if mibBuilder.loadTexts: overload_fan1_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan1_circuit1_alarm.setDescription('Overload fan 1 circuit 1 alarm')
overload_fan2_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 21)).setLabel("overload-fan2-circuit1-alarm")
if mibBuilder.loadTexts: overload_fan2_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan2_circuit1_alarm.setDescription('Overload fan 2 circuit 1 alarm')
overload_fan3_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 22)).setLabel("overload-fan3-circuit1-alarm")
if mibBuilder.loadTexts: overload_fan3_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan3_circuit1_alarm.setDescription('Overload fan 3 circuit 1 alarm')
overload_fan4_circuit1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 23)).setLabel("overload-fan4-circuit1-alarm")
if mibBuilder.loadTexts: overload_fan4_circuit1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan4_circuit1_alarm.setDescription('Overload fan 4 circuit 1 alarm')
overload_fan1_circuit_2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 24)).setLabel("overload-fan1-circuit-2-alarm")
if mibBuilder.loadTexts: overload_fan1_circuit_2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan1_circuit_2_alarm.setDescription('Overload fan 1 circuit 2 alarm')
overload_fan2_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 25)).setLabel("overload-fan2-circuit2-alarm")
if mibBuilder.loadTexts: overload_fan2_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan2_circuit2_alarm.setDescription('Overload fan 2 circuit 2 alarm')
overload_fan3_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 26)).setLabel("overload-fan3-circuit2-alarm")
if mibBuilder.loadTexts: overload_fan3_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan3_circuit2_alarm.setDescription('Overload fan 3 circuit 2 alarm')
overload_fan4_circuit2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 27)).setLabel("overload-fan4-circuit2-alarm")
if mibBuilder.loadTexts: overload_fan4_circuit2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_fan4_circuit2_alarm.setDescription('Overload fan 4 circuit 2 alarm')
overload_pump1_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 28)).setLabel("overload-pump1-alarm")
if mibBuilder.loadTexts: overload_pump1_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_pump1_alarm.setDescription('Overload pump 1 alarm')
overload_pump2_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 29)).setLabel("overload-pump2-alarm")
if mibBuilder.loadTexts: overload_pump2_alarm.setStatus('current')
if mibBuilder.loadTexts: overload_pump2_alarm.setDescription('Overload pump 2 alarm')
wrong_phase_rotation_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 30)).setLabel("wrong-phase-rotation-alarm")
if mibBuilder.loadTexts: wrong_phase_rotation_alarm.setStatus('current')
if mibBuilder.loadTexts: wrong_phase_rotation_alarm.setDescription('Wrong phase rotation alarm')
back_Door_open_alarm = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 31)).setLabel("back-Door-open-alarm")
if mibBuilder.loadTexts: back_Door_open_alarm.setStatus('current')
if mibBuilder.loadTexts: back_Door_open_alarm.setDescription('Back Door open alarm')
alarm_idrofrigo_pump_c_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 75)).setLabel("alarm-idrofrigo-pump-c-1")
if mibBuilder.loadTexts: alarm_idrofrigo_pump_c_1.setStatus('current')
if mibBuilder.loadTexts: alarm_idrofrigo_pump_c_1.setDescription('Condensation pump 1 breaker switch alarm')
alarm_idrofrigo_pump_c_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 76)).setLabel("alarm-idrofrigo-pump-c-2")
if mibBuilder.loadTexts: alarm_idrofrigo_pump_c_2.setStatus('current')
if mibBuilder.loadTexts: alarm_idrofrigo_pump_c_2.setDescription('Condensation pump 2 breaker switch alarm')
alarm_idrofrigo_fl_C = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 80)).setLabel("alarm-idrofrigo-fl-C")
if mibBuilder.loadTexts: alarm_idrofrigo_fl_C.setStatus('current')
if mibBuilder.loadTexts: alarm_idrofrigo_fl_C.setDescription('Condensation flow switch alarm')
remote_on_off = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 130)).setLabel("remote-on-off")
if mibBuilder.loadTexts: remote_on_off.setStatus('current')
if mibBuilder.loadTexts: remote_on_off.setDescription('Remote on-off')
chiller_ON_OFF = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 131)).setLabel("chiller-ON-OFF")
if mibBuilder.loadTexts: chiller_ON_OFF.setStatus('current')
if mibBuilder.loadTexts: chiller_ON_OFF.setDescription('Chiller ON/OFF')
alarm_disch_scw_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 148)).setLabel("alarm-disch-scw-1")
if mibBuilder.loadTexts: alarm_disch_scw_1.setStatus('current')
if mibBuilder.loadTexts: alarm_disch_scw_1.setDescription('Discharge screw compressor 1 alarm')
alarm_disch_scw_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 149)).setLabel("alarm-disch-scw-2")
if mibBuilder.loadTexts: alarm_disch_scw_2.setStatus('current')
if mibBuilder.loadTexts: alarm_disch_scw_2.setDescription('Discharge screw compressor 2 alarm')
alarm_probe_inlet = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 150)).setLabel("alarm-probe-inlet")
if mibBuilder.loadTexts: alarm_probe_inlet.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_inlet.setDescription('Inlet probe alarm (broken or disconnected)')
alarm_probe_amb = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 151)).setLabel("alarm-probe-amb")
if mibBuilder.loadTexts: alarm_probe_amb.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_amb.setDescription('Ambient probe alarm (broken or disconnected)')
alarm_frigo_fl1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 152)).setLabel("alarm-frigo-fl1")
if mibBuilder.loadTexts: alarm_frigo_fl1.setStatus('current')
if mibBuilder.loadTexts: alarm_frigo_fl1.setDescription('Flow switch alarm (cooling alarm)')
alarm_idro_pump1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 153)).setLabel("alarm-idro-pump1")
if mibBuilder.loadTexts: alarm_idro_pump1.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_pump1.setDescription('Pump 1 hydraulic alarm')
alarm_idro_pump2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 154)).setLabel("alarm-idro-pump2")
if mibBuilder.loadTexts: alarm_idro_pump2.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_pump2.setDescription('Pump 2 hydraulic alarm')
alarm_idro_fl1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 155)).setLabel("alarm-idro-fl1")
if mibBuilder.loadTexts: alarm_idro_fl1.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_fl1.setDescription('Flow switch alarm (hydraulic alarm)')
alarm_warning_fl1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 156)).setLabel("alarm-warning-fl1")
if mibBuilder.loadTexts: alarm_warning_fl1.setStatus('current')
if mibBuilder.loadTexts: alarm_warning_fl1.setDescription('Flow switch alarm (warning alarm)')
alarm_hi_water_temp = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 157)).setLabel("alarm-hi-water-temp")
if mibBuilder.loadTexts: alarm_hi_water_temp.setStatus('current')
if mibBuilder.loadTexts: alarm_hi_water_temp.setDescription('High Temperature alarm')
alarm_lo_water_temp = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 158)).setLabel("alarm-lo-water-temp")
if mibBuilder.loadTexts: alarm_lo_water_temp.setStatus('current')
if mibBuilder.loadTexts: alarm_lo_water_temp.setDescription('Low Temperature alarm')
alarm_ta_probe1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 159)).setLabel("alarm-ta-probe1")
if mibBuilder.loadTexts: alarm_ta_probe1.setStatus('current')
if mibBuilder.loadTexts: alarm_ta_probe1.setDescription('Antifreeze/evaporator probe 1 alarm')
alarm_hi_press = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 160)).setLabel("alarm-hi-press")
if mibBuilder.loadTexts: alarm_hi_press.setStatus('current')
if mibBuilder.loadTexts: alarm_hi_press.setDescription('High condensation pressure alarm')
alarm_lo_press = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 161)).setLabel("alarm-lo-press")
if mibBuilder.loadTexts: alarm_lo_press.setStatus('current')
if mibBuilder.loadTexts: alarm_lo_press.setDescription('Low condensation pressure alarm')
alarm_probe_evap_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 162)).setLabel("alarm-probe-evap-1")
if mibBuilder.loadTexts: alarm_probe_evap_1.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_evap_1.setDescription('Antifreeze/evaporator probe 1 alarm (broken or disconnected)')
alarm_probe_evap_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 163)).setLabel("alarm-probe-evap-2")
if mibBuilder.loadTexts: alarm_probe_evap_2.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_evap_2.setDescription('Antifreeze/evaporator probe 2 alarm (broken or disconnected)')
alarm_hi_press_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 164)).setLabel("alarm-hi-press-1")
if mibBuilder.loadTexts: alarm_hi_press_1.setStatus('current')
if mibBuilder.loadTexts: alarm_hi_press_1.setDescription('High condensation pressure 1 alarm')
alarm_hi_press_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 165)).setLabel("alarm-hi-press-2")
if mibBuilder.loadTexts: alarm_hi_press_2.setStatus('current')
if mibBuilder.loadTexts: alarm_hi_press_2.setDescription('High condensation pressure 2 alarm')
alarm_lo_press_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 166)).setLabel("alarm-lo-press-1")
if mibBuilder.loadTexts: alarm_lo_press_1.setStatus('current')
if mibBuilder.loadTexts: alarm_lo_press_1.setDescription('Low condensation pressure 1 alarm')
alarm_lo_press_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 167)).setLabel("alarm-lo-press-2")
if mibBuilder.loadTexts: alarm_lo_press_2.setStatus('current')
if mibBuilder.loadTexts: alarm_lo_press_2.setDescription('Low condensation pressure 2 alarm')
alarm_probe_tank = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 168)).setLabel("alarm-probe-tank")
if mibBuilder.loadTexts: alarm_probe_tank.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_tank.setDescription('Tank/Out probe alarm (broken or disconnected)')
alarm_off_line_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 169)).setLabel("alarm-off-line-1")
if mibBuilder.loadTexts: alarm_off_line_1.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_1.setDescription('Chiller 1 offline')
alarm_off_line_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 170)).setLabel("alarm-off-line-2")
if mibBuilder.loadTexts: alarm_off_line_2.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_2.setDescription('Chiller 2 offline')
alarm_off_line_3 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 171)).setLabel("alarm-off-line-3")
if mibBuilder.loadTexts: alarm_off_line_3.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_3.setDescription('Chiller 3 offline')
alarm_off_line_4 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 172)).setLabel("alarm-off-line-4")
if mibBuilder.loadTexts: alarm_off_line_4.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_4.setDescription('Chiller 4 offline')
alarm_off_line_5 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 173)).setLabel("alarm-off-line-5")
if mibBuilder.loadTexts: alarm_off_line_5.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_5.setDescription('Chiller 5 offline')
alarm_off_line_6 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 174)).setLabel("alarm-off-line-6")
if mibBuilder.loadTexts: alarm_off_line_6.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_6.setDescription('Chiller 6 offline')
alarm_off_line_7 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 175)).setLabel("alarm-off-line-7")
if mibBuilder.loadTexts: alarm_off_line_7.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_7.setDescription('Chiller 7 offline')
alarm_off_line_8 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 176)).setLabel("alarm-off-line-8")
if mibBuilder.loadTexts: alarm_off_line_8.setStatus('current')
if mibBuilder.loadTexts: alarm_off_line_8.setDescription('Chiller 8 offline')
alarm_ta_probe2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 177)).setLabel("alarm-ta-probe2")
if mibBuilder.loadTexts: alarm_ta_probe2.setStatus('current')
if mibBuilder.loadTexts: alarm_ta_probe2.setDescription('Antifreeze/evaporator probe 2 alarm')
alarm_sms = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 178)).setLabel("alarm-sms")
if mibBuilder.loadTexts: alarm_sms.setStatus('current')
if mibBuilder.loadTexts: alarm_sms.setDescription('SMS alarm')
alarm_modem = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 179)).setLabel("alarm-modem")
if mibBuilder.loadTexts: alarm_modem.setStatus('current')
if mibBuilder.loadTexts: alarm_modem.setDescription('Modem alarm')
alarm_sms_coda = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 180)).setLabel("alarm-sms-coda")
if mibBuilder.loadTexts: alarm_sms_coda.setStatus('current')
if mibBuilder.loadTexts: alarm_sms_coda.setDescription('SMS coda alarm')
alarm_probe_fc = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 181)).setLabel("alarm-probe-fc")
if mibBuilder.loadTexts: alarm_probe_fc.setStatus('current')
if mibBuilder.loadTexts: alarm_probe_fc.setDescription('Freecooling probe alarm (broken or disconnected)')
alarm_maint_pw1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 182)).setLabel("alarm-maint-pw1")
if mibBuilder.loadTexts: alarm_maint_pw1.setStatus('current')
if mibBuilder.loadTexts: alarm_maint_pw1.setDescription('Maintenance pump 1 alarm)')
alarm_maint_pw2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 183)).setLabel("alarm-maint-pw2")
if mibBuilder.loadTexts: alarm_maint_pw2.setStatus('current')
if mibBuilder.loadTexts: alarm_maint_pw2.setDescription('Maintenance pump 2 alarm)')
alarm_hi_temp_rid = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 184)).setLabel("alarm-hi-temp-rid")
if mibBuilder.loadTexts: alarm_hi_temp_rid.setStatus('current')
if mibBuilder.loadTexts: alarm_hi_temp_rid.setDescription('High temperature alarm (redundance)')
alarm_q_fc_sep = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 185)).setLabel("alarm-q-fc-sep")
if mibBuilder.loadTexts: alarm_q_fc_sep.setStatus('current')
if mibBuilder.loadTexts: alarm_q_fc_sep.setDescription('DryCooler breaker switch alarm')
alarm_p_wat2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 186)).setLabel("alarm-p-wat2")
if mibBuilder.loadTexts: alarm_p_wat2.setStatus('current')
if mibBuilder.loadTexts: alarm_p_wat2.setDescription('Water pressure 2 alarm')
alarm_p_wat1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 187)).setLabel("alarm-p-wat1")
if mibBuilder.loadTexts: alarm_p_wat1.setStatus('current')
if mibBuilder.loadTexts: alarm_p_wat1.setDescription('Water pressure 1 alarm')
alarm_foult_flow_p1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 188)).setLabel("alarm-foult-flow-p1")
if mibBuilder.loadTexts: alarm_foult_flow_p1.setStatus('current')
if mibBuilder.loadTexts: alarm_foult_flow_p1.setDescription('Pump 1 flow alarm')
alarm_foult_flow_p2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 189)).setLabel("alarm-foult-flow-p2")
if mibBuilder.loadTexts: alarm_foult_flow_p2.setStatus('current')
if mibBuilder.loadTexts: alarm_foult_flow_p2.setDescription('Pump 2 flow alarm')
alarm_foult_fl1_p1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 190)).setLabel("alarm-foult-fl1-p1")
if mibBuilder.loadTexts: alarm_foult_fl1_p1.setStatus('current')
if mibBuilder.loadTexts: alarm_foult_fl1_p1.setDescription('Pump 1 flow-switch alarm')
alarm_foult_fl1_p2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 191)).setLabel("alarm-foult-fl1-p2")
if mibBuilder.loadTexts: alarm_foult_fl1_p2.setStatus('current')
if mibBuilder.loadTexts: alarm_foult_fl1_p2.setDescription('Pump 2 flow-switch alarm')
alarm_warning_le = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 192)).setLabel("alarm-warning-le")
if mibBuilder.loadTexts: alarm_warning_le.setStatus('current')
if mibBuilder.loadTexts: alarm_warning_le.setDescription('Water level warning')
alarm_frigo_fl_C = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 193)).setLabel("alarm-frigo-fl-C")
if mibBuilder.loadTexts: alarm_frigo_fl_C.setStatus('current')
if mibBuilder.loadTexts: alarm_frigo_fl_C.setDescription('Flow switch condensation alarm (cooling alarm)')
alarm_idro_pump_c_1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 194)).setLabel("alarm-idro-pump-c-1")
if mibBuilder.loadTexts: alarm_idro_pump_c_1.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_pump_c_1.setDescription('Pump 1 condensation hydraulic alarm')
alarm_idro_pump_c_2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 195)).setLabel("alarm-idro-pump-c-2")
if mibBuilder.loadTexts: alarm_idro_pump_c_2.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_pump_c_2.setDescription('Pump 2 condensation hydraulic alarm')
alarm_idro_fl_C = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 196)).setLabel("alarm-idro-fl-C")
if mibBuilder.loadTexts: alarm_idro_fl_C.setStatus('current')
if mibBuilder.loadTexts: alarm_idro_fl_C.setDescription('Flow switch condensation alarm (hydraulic alarm)')
alarm_warning_fl_C = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 197)).setLabel("alarm-warning-fl-C")
if mibBuilder.loadTexts: alarm_warning_fl_C.setStatus('current')
if mibBuilder.loadTexts: alarm_warning_fl_C.setDescription('Flow switch condensation alarm (warning alarm)')
alarm_foul_fl_C_p1 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 198)).setLabel("alarm-foul-fl-C-p1")
if mibBuilder.loadTexts: alarm_foul_fl_C_p1.setStatus('current')
if mibBuilder.loadTexts: alarm_foul_fl_C_p1.setDescription('Pump 1 condensation flow-switch alarm')
alarm_foul_fl_C_p2 = NotificationType((1, 3, 6, 1, 4, 1, 9839, 2, 1, 100, 199)).setLabel("alarm-foul-fl-C-p2")
if mibBuilder.loadTexts: alarm_foul_fl_C_p2.setStatus('current')
if mibBuilder.loadTexts: alarm_foul_fl_C_p2.setDescription('Pump 2 condensation flow-switch alarm')
mibBuilder.exportSymbols("KELVIN-pCOWeb-Chiller-MIB", enable_freecooling=enable_freecooling, alarm_hi_press_2=alarm_hi_press_2, enable_static_press_Warning=enable_static_press_Warning, al_foult_flow_p1=al_foult_flow_p1, al_idro_fl1=al_idro_fl1, neutral_zone_V_variable=neutral_zone_V_variable, systm=systm, al_lo_press=al_lo_press, max_Compensation=max_Compensation, analogObjects=analogObjects, c12_on=c12_on, min_diff=min_diff, pCOId1_ErrorsNumber=pCOId1_ErrorsNumber, ip_Address3_Out=ip_Address3_Out, carel=carel, al_probe_fc=al_probe_fc, pressione2=pressione2, alarm_frigo_fl1=alarm_frigo_fl1, chiller_name1=chiller_name1, w_static_press_alarm=w_static_press_alarm, set_fc=set_fc, al_ta_probe1=al_ta_probe1, al_q_comp2=al_q_comp2, output_Address_Valve_Freecooling=output_Address_Valve_Freecooling, c21_on=c21_on, pump_sp_press=pump_sp_press, delay_Warning_Static_Pressure=delay_Warning_Static_Pressure, output_Address_3Way_Valve_Hydraulic=output_Address_3Way_Valve_Hydraulic, alarm_probe_inlet=alarm_probe_inlet, temp_outlet=temp_outlet, al_idrofrigo_pump_c_2=al_idrofrigo_pump_c_2, ta_probe_temp_2=ta_probe_temp_2, alarm_foul_fl_C_p2=alarm_foul_fl_C_p2, al_q_comp4=al_q_comp4, al_q_comp1=al_q_comp1, c13_on=c13_on, ip_Address4_Out=ip_Address4_Out, n_pumps_ON=n_pumps_ON, setpoint_FCM=setpoint_FCM, alarm_off_line_8=alarm_off_line_8, alarm_Setpoint_Differential_Pressure_Hydraulic_circuit=alarm_Setpoint_Differential_Pressure_Hydraulic_circuit, ip_Address1=ip_Address1, al_foul_fl_C_p1=al_foul_fl_C_p1, delta_Thermal_Excusion_Freecoling=delta_Thermal_Excusion_Freecoling, al_warning_le=al_warning_le, high_Limit=high_Limit, priming_Time_Hydraulic_Pressure=priming_Time_Hydraulic_Pressure, al_foult_fl1_p2=al_foult_fl1_p2, time_Speed_Up_FCM=time_Speed_Up_FCM, flow_rate_alarm=flow_rate_alarm, instruments=instruments, integral_Time_Freeccoling_Valve_PID=integral_Time_Freeccoling_Valve_PID, al_modem=al_modem, enable_multi_pumps_function=enable_multi_pumps_function, fcs_out=fcs_out, al_lo_water_temp=al_lo_water_temp, setpoint_a_us=setpoint_a_us, alarm_probe_fc=alarm_probe_fc, total_capacity=total_capacity, proportional_Band_Freecooling_PID=proportional_Band_Freecooling_PID, alarm_foult_fl1_p1=alarm_foult_fl1_p1, priming_Time_Flow_Rate=priming_Time_Flow_Rate, time_Min_Different_Freecooling_Chiller_timing=time_Min_Different_Freecooling_Chiller_timing, integerObjects=integerObjects, back_Door_open_alarm=back_Door_open_alarm, integral_Time_Inverter_Pumps_PID=integral_Time_Inverter_Pumps_PID, neutral_zone_K_costant=neutral_zone_K_costant, unit_on=unit_on, alarm_probe_evap_1=alarm_probe_evap_1, enable_pumps_redundance=enable_pumps_redundance, alarm_p_wat2=alarm_p_wat2, n_of_Alarm_Flow_Rate=n_of_Alarm_Flow_Rate, pressure_Out=pressure_Out, max_Out_Speed_FCM=max_Out_Speed_FCM, alarm_sms_coda=alarm_sms_coda, water_static_pressure_warning=water_static_pressure_warning, enable_diff_press_Alarm=enable_diff_press_Alarm, overload_pump1_alarm=overload_pump1_alarm, min_setpoint=min_setpoint, al_p_wat1=al_p_wat1, pp1=pp1, remote_on_off=remote_on_off, alarm_warning_fl_C=alarm_warning_fl_C, alarm_foult_flow_p1=alarm_foult_flow_p1, max_Out_FCM=max_Out_FCM, max_diff=max_diff, offset_Freecooling_Valve_PID=offset_Freecooling_Valve_PID, manual_reset_static_press_Warning=manual_reset_static_press_Warning, alarm_idrofrigo_fl_C=alarm_idrofrigo_fl_C, running_time_Chillers=running_time_Chillers, dns2_3=dns2_3, al_hi_temp_rid=al_hi_temp_rid, proportional_Band_Inverter_Pumps_PID=proportional_Band_Inverter_Pumps_PID, pCOId1_Status=pCOId1_Status, hysteresis_Max_Pressure_Alarm_FCM=hysteresis_Max_Pressure_Alarm_FCM, disch_alarm_scw_2=disch_alarm_scw_2, agentRelease=agentRelease, alarm_idrofrigo_pump_c_1=alarm_idrofrigo_pump_c_1, enable_PID_Fc_valve=enable_PID_Fc_valve, dns2_1=dns2_1, al_idro_pump_c_1=al_idro_pump_c_1, low_Limit=low_Limit, al_idrofrigo_pump2=al_idrofrigo_pump2, al_idrofrigo_fl_C=al_idrofrigo_fl_C, setpoint_inv_pumps=setpoint_inv_pumps, offset_Freecooling_PID=offset_Freecooling_PID, n_of_Alarm_Static_Pressure=n_of_Alarm_Static_Pressure, min_Out_FCM=min_Out_FCM, manual_reset_Flow_Rate_Alarm=manual_reset_Flow_Rate_Alarm, alarm_idro_pump1=alarm_idro_pump1, c23_on=c23_on, temp_amb=temp_amb, min_Out_Speed_FCM=min_Out_Speed_FCM, alarm_off_line_3=alarm_off_line_3, time_Min_Off_Freecooling_Chiller_timing=time_Min_Off_Freecooling_Chiller_timing, al_idrofrigo_pump1=al_idrofrigo_pump1, al_q_fan11=al_q_fan11, manual_Reset_Ext_Drycooler_Alarm=manual_Reset_Ext_Drycooler_Alarm, starting_delay_Second_Pump=starting_delay_Second_Pump, off_line_7=off_line_7, flow_value_alarm=flow_value_alarm, n_of_alarm_External_Dry_Cooler=n_of_alarm_External_Dry_Cooler, al_q_comp3=al_q_comp3, cooling_capacity=cooling_capacity, delay_Freecooling_Thermal_Exclusion=delay_Freecooling_Thermal_Exclusion, alarm_hi_temp_rid=alarm_hi_temp_rid, manual_reset_static_press_Alarm=manual_reset_static_press_Alarm, proportional_Band_freecooling_Valve_PID=proportional_Band_freecooling_Valve_PID, al_idro_pump2=al_idro_pump2, alarm_probe_evap_2=alarm_probe_evap_2, compressor_FlowRate=compressor_FlowRate, dns1_4=dns1_4, ip_Address1_Out=ip_Address1_Out, status_in_alarm=status_in_alarm, al_hi_water_temp=al_hi_water_temp, sms_coda_alarm=sms_coda_alarm, gateway4=gateway4, alarm_Setpoint_Flow_Rate_Hydraulic_circuit=alarm_Setpoint_Flow_Rate_Hydraulic_circuit, current_hour=current_hour, max_Setpoint_Differential=max_Setpoint_Differential, alarm_off_line_7=alarm_off_line_7, al_q_fan_2=al_q_fan_2, alarm_off_line_6=alarm_off_line_6, al_probe_tank=al_probe_tank, hysteresis_Compensation=hysteresis_Compensation, delay_Freecooling=delay_Freecooling, gateway1=gateway1, al_frigo_fl_C=al_frigo_fl_C, low_pressure_switch_2_alarm=low_pressure_switch_2_alarm, amp_value=amp_value, alarm_off_line_1=alarm_off_line_1, al_ta_probe2=al_ta_probe2, min_Setpoint_Differential=min_Setpoint_Differential, dns1_2=dns1_2, dns1_3=dns1_3, trapObjects=trapObjects, min_out_freecooling=min_out_freecooling, al_probe_evap_1=al_probe_evap_1, disch_alarm_scw_1=disch_alarm_scw_1, min_Pressure_Alarm_FCM=min_Pressure_Alarm_FCM, enable_rot_FIFO_FC=enable_rot_FIFO_FC, al_warning_fl1=al_warning_fl1, al_phase_cont=al_phase_cont, pCOStatusgroup=pCOStatusgroup, al_foult_fl1_p1=al_foult_fl1_p1, alarm_warning_le=alarm_warning_le, alarm_p_wat1=alarm_p_wat1, hysteresis_Thermal_Excusion_Freecoling=hysteresis_Thermal_Excusion_Freecoling, al_pa1=al_pa1, al_lo_press_2=al_lo_press_2, setpoint_Differential=setpoint_Differential, al_idro_pump1=al_idro_pump1, overload_compressor1_circuit1_alarm=overload_compressor1_circuit1_alarm, chiller_mode_operation=chiller_mode_operation, alarm_hi_press=alarm_hi_press, alarm_off_line_5=alarm_off_line_5, off_line_8=off_line_8, off_line_1=off_line_1, al_warning_fl_C=al_warning_fl_C, derivative_Time_Inverter_Pumps_PID=derivative_Time_Inverter_Pumps_PID, on_fan_gr2=on_fan_gr2, overload_compressor3_circuit2_alarm=overload_compressor3_circuit2_alarm, high_pressure_switch_2_alarm=high_pressure_switch_2_alarm, al_q_fan_1=al_q_fan_1, n_chillers_ON=n_chillers_ON, pressione1=pressione1, pump1_on=pump1_on, c22_on=c22_on, off_line_4=off_line_4, working_time_Pumps=working_time_Pumps, setpoint_antifreeze1=setpoint_antifreeze1, output_Address_Alarm_Static_Pressure=output_Address_Alarm_Static_Pressure, time_Running_Pumps_Chiller_Offline=time_Running_Pumps_Chiller_Offline, alarm_modem=alarm_modem, time_Enable_Pumps_Chiller_Offline=time_Enable_Pumps_Chiller_Offline, fc_single_chiller=fc_single_chiller, al_q_comp6=al_q_comp6, alarm_lo_press_1=alarm_lo_press_1, integral_Time_3Way_Valve_Hydraulic_PID=integral_Time_3Way_Valve_Hydraulic_PID, off_line_2=off_line_2, max_setpoint=max_setpoint, current_minute=current_minute, temp_fc=temp_fc, alarm_warning_fl1=alarm_warning_fl1, al_sms=al_sms, hysteresis_Thermal_redundance=hysteresis_Thermal_redundance, ta_probe_temp_1=ta_probe_temp_1, time_Min_On_Freecooling_Chiller_timing=time_Min_On_Freecooling_Chiller_timing, al_idrofrigo_pump_c_1=al_idrofrigo_pump_c_1, proportional_Band_3Way_Valve_Hydrauli_PID=proportional_Band_3Way_Valve_Hydrauli_PID, al_hi_press_2=al_hi_press_2, low_pressure_switch_1_alarm=low_pressure_switch_1_alarm, alarm_disch_scw_1=alarm_disch_scw_1, al_q_fan14=al_q_fan14, al_hi_press_1=al_hi_press_1, alarm_sms=alarm_sms, kelvin_pCOWebMIB_Chiller=kelvin_pCOWebMIB_Chiller, time_Soft_Start_FCM=time_Soft_Start_FCM, al_foult_flow_p2=al_foult_flow_p2, bms_address_IDENT=bms_address_IDENT, pp2=pp2, overload_fans_circuit2=overload_fans_circuit2, integral_Time_Freeccoling_PID=integral_Time_Freeccoling_PID, overload_fan3_circuit2_alarm=overload_fan3_circuit2_alarm, setpoint_ASB_Inverter_pumps=setpoint_ASB_Inverter_pumps, al_idro_fl_C=al_idro_fl_C, gateway3=gateway3, setpoint_Compensation=setpoint_Compensation, p_wat2=p_wat2, pump2_on=pump2_on, max_Pressure_Alarm_FCM=max_Pressure_Alarm_FCM, ip_Address4=ip_Address4, en_on_off_rem=en_on_off_rem, enable_speed_up_FCM=enable_speed_up_FCM, alarm_maint_pw2=alarm_maint_pw2, flow_switch_alarm=flow_switch_alarm, alarm_lo_water_temp=alarm_lo_water_temp, hysteresis_FCM=hysteresis_FCM, diff=diff, alarm_idro_fl_C=alarm_idro_fl_C, overload_fan4_circuit2_alarm=overload_fan4_circuit2_alarm, al_hi_press=al_hi_press, overload_fans_circuit1=overload_fans_circuit1, overload_fan3_circuit1_alarm=overload_fan3_circuit1_alarm, al_q_fan_23=al_q_fan_23, alarm_ta_probe2=alarm_ta_probe2, overload_fan4_circuit1_alarm=overload_fan4_circuit1_alarm, n_of_Warning_Static_Pressure=n_of_Warning_Static_Pressure, al_q_fan13=al_q_fan13, compressor_recovery=compressor_recovery, enable_Fc_Thermal_Exclusion=enable_Fc_Thermal_Exclusion, al_foul_fl_C_p2=al_foul_fl_C_p2, high_pressure_switch_1_alarm=high_pressure_switch_1_alarm, al_pa2=al_pa2)
mibBuilder.exportSymbols("KELVIN-pCOWeb-Chiller-MIB", enable_thermal_redundance=enable_thermal_redundance, al_maint_pw1=al_maint_pw1, hysteresis_Freecooling=hysteresis_Freecooling, derivative_Time_3Way_Valve_Hydraulic_PID=derivative_Time_3Way_Valve_Hydraulic_PID, warnig_Setpoint_Static_Pressure_Hydraulic_circuit=warnig_Setpoint_Static_Pressure_Hydraulic_circuit, n_of_Alarm_Differential_Pressure=n_of_Alarm_Differential_Pressure, enable_pumps_offline=enable_pumps_offline, enable_Flow_Rate_recovery=enable_Flow_Rate_recovery, starting_delay_btw_Pump_Compressor=starting_delay_btw_Pump_Compressor, hysteresis_Cut_off_FCM=hysteresis_Cut_off_FCM, off_line_5=off_line_5, min_Opening_3Way_Valve_Hydraulic=min_Opening_3Way_Valve_Hydraulic, dns2_2=dns2_2, alarm_hi_water_temp=alarm_hi_water_temp, delta_Freecooling=delta_Freecooling, alarm_lo_press_2=alarm_lo_press_2, alarm_hi_press_1=alarm_hi_press_1, setpoint_antifreeze2=setpoint_antifreeze2, alarm_foul_fl_C_p1=alarm_foul_fl_C_p1, overlap_time_Pumps=overlap_time_Pumps, enable_pCOWeb=enable_pCOWeb, alarm_probe_amb=alarm_probe_amb, manual_reset_diff_press_Alarm=manual_reset_diff_press_Alarm, al_pb2=al_pb2, off_line_6=off_line_6, max_Opening_3Way_Valve_Hydraulic=max_Opening_3Way_Valve_Hydraulic, al_probe_inlet=al_probe_inlet, alarm_idro_pump_c_1=alarm_idro_pump_c_1, c11_on=c11_on, hysteresis_Min_Pressure_Alarm_FCM=hysteresis_Min_Pressure_Alarm_FCM, gateway2=gateway2, dns1_1=dns1_1, alarm_idro_fl1=alarm_idro_fl1, overload_compressor2_circuit2_alarm=overload_compressor2_circuit2_alarm, fc_on=fc_on, al_q_fan12=al_q_fan12, current_month=current_month, off_line_3=off_line_3, ip_Address2_Out=ip_Address2_Out, alarm_disch_scw_2=alarm_disch_scw_2, enable_3way_valve=enable_3way_valve, derivative_Time_Freeccoling_Valve_PID=derivative_Time_Freeccoling_Valve_PID, digitalObjects=digitalObjects, current_year=current_year, alarm_frigo_fl_C=alarm_frigo_fl_C, ip_Address3=ip_Address3, al_q_fan22=al_q_fan22, alarm_foult_fl1_p2=alarm_foult_fl1_p2, ip_Address2=ip_Address2, alarm_idro_pump_c_2=alarm_idro_pump_c_2, time_Min_Same_Freecooling_Chiller_timing=time_Min_Same_Freecooling_Chiller_timing, enable_HT_function=enable_HT_function, dns2_4=dns2_4, al_q_comp5=al_q_comp5, water_level_alarm=water_level_alarm, temperature_Overlap_Freecooling=temperature_Overlap_Freecooling, PYSNMP_MODULE_ID=kelvin_pCOWebMIB_Chiller, pCOWebInfo=pCOWebInfo, al_q_fc_sep=al_q_fc_sep, freecooling_capacity=freecooling_capacity, static_press_alarm=static_press_alarm, overload_fan2_circuit2_alarm=overload_fan2_circuit2_alarm, wrong_phase_rotation_alarm=wrong_phase_rotation_alarm, delay_priming_Time_Hydraulic_Pressure=delay_priming_Time_Hydraulic_Pressure, al_idro_pump_c_2=al_idro_pump_c_2, enable_pressure_recovery=enable_pressure_recovery, al_door_sw=al_door_sw, water_static_pressure_alarm=water_static_pressure_alarm, enable_chiller_redundance=enable_chiller_redundance, netMask=netMask, temperature_A_B=temperature_A_B, al_q_fan24=al_q_fan24, alarm_probe_tank=alarm_probe_tank, overload_fan2_circuit1_alarm=overload_fan2_circuit1_alarm, derivative_Time_Freeccoling_PID=derivative_Time_Freeccoling_PID, alarm_foult_flow_p2=alarm_foult_flow_p2, water_temp=water_temp, al_le=al_le, al_probe_amb=al_probe_amb, overload_compressor3_circuit1_alarm=overload_compressor3_circuit1_alarm, alarm_q_fc_sep=alarm_q_fc_sep, temp_inlet=temp_inlet, overload_compressor2_circuit1_alarm=overload_compressor2_circuit1_alarm, on_fan_gr1=on_fan_gr1, al_idrofrigo_fl1=al_idrofrigo_fl1, overlap_time_Chillers=overlap_time_Chillers, enable_Flow_Rate_Alarm=enable_Flow_Rate_Alarm, flow_value=flow_value, current_day=current_day, pCOErrorsNumbergroup=pCOErrorsNumbergroup, tempertaure_Cut_off_FCM=tempertaure_Cut_off_FCM, al_pb1=al_pb1, overload_fan1_circuit1_alarm=overload_fan1_circuit1_alarm, alarm_Setpoint_Static_Pressure_Hydraulic_circuit=alarm_Setpoint_Static_Pressure_Hydraulic_circuit, overload_compressor1_circuit2_alarm=overload_compressor1_circuit2_alarm, alarm_idro_pump2=alarm_idro_pump2, alarm_lo_press=alarm_lo_press, al_probe_evap_2=al_probe_evap_2, delay_Alarm_Static_Pressure=delay_Alarm_Static_Pressure, alarm_off_line_2=alarm_off_line_2, al_q_fan21=al_q_fan21, al_maint_pw2=al_maint_pw2, agentCode=agentCode, enable_static_press_Alarm=enable_static_press_Alarm, al_lo_press_1=al_lo_press_1, alarm_maint_pw1=alarm_maint_pw1, chiller_ON_OFF=chiller_ON_OFF, chiller_name0=chiller_name0, delay_priming_Time_Flow_Rate=delay_priming_Time_Flow_Rate, al_p_wat2=al_p_wat2, alarm_idrofrigo_pump_c_2=alarm_idrofrigo_pump_c_2, enable_soft_start_FCM=enable_soft_start_FCM, al_frigo_fl1=al_frigo_fl1, alarm_ta_probe1=alarm_ta_probe1, setpoint_DIFF_Inverter_pumps=setpoint_DIFF_Inverter_pumps, alarm_off_line_4=alarm_off_line_4, n_chillers_Max=n_chillers_Max, overload_pump2_alarm=overload_pump2_alarm, set_effective=set_effective, overload_fan1_circuit_2_alarm=overload_fan1_circuit_2_alarm)
