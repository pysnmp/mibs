#
# PySNMP MIB module ACMEPACKET-ENVMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/ACMEPACKET-ENVMON-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:13:04 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApPhyPortType, ApRedundancyState, ApPresence, ApHardwareModuleFamily = mibBuilder.importSymbols("ACMEPACKET-TC", "ApPhyPortType", "ApRedundancyState", "ApPresence", "ApHardwareModuleFamily")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, NotificationType, ModuleIdentity, Bits, IpAddress, Counter64, TimeTicks, Integer32, iso, MibIdentifier, Counter32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "NotificationType", "ModuleIdentity", "Bits", "IpAddress", "Counter64", "TimeTicks", "Integer32", "iso", "MibIdentifier", "Counter32", "Gauge32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
apEnvMonModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 3))
apEnvMonModule.setRevisions(('2012-07-16 00:00', '2014-06-26 00:00', '2018-11-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apEnvMonModule.setRevisionsDescriptions(('Updated contact information.', 'Updated Organization and Contact info.', 'Updated SD6 apEnvMonTemperatureStatusType info.',))
if mibBuilder.loadTexts: apEnvMonModule.setLastUpdated('201811190000Z')
if mibBuilder.loadTexts: apEnvMonModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apEnvMonModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apEnvMonModule.setDescription('The MIB module to describe the status of the Environmental\n                Monitor on the devices.')
class ApEnvMonState(TextualConvention, Integer32):
    description = 'Represents the state of a device being monitored.\n                 Valid values are:\n                \n                initial (1):    the environment is at initial state.\n\n                normal (2) :    the environment is good, such as low\n                                temperature.\n\n                minor  (3) :    the environment is not good, such as:\n                                fan speed is more than minor alarm threshold,\n\t\t\t\tbut less than major alarm threshold.\n\n                major  (4) :    the environment is bad, such as:\n                                fan speed is more than major alarm threshold, \n\t\t\t\tbut less than critical alarm threshold.\n\n                critical(5):    the environment is very bad, such as\n                                Fan speed is more than critical threshold.\n\n                shutdown(6):    the environment is the worst, the system\n                                should be shutdown immediately.\n\n                notPresent(7):  the environmental monitor is not present,\n                                such as temperature sensors do not exist.\n\n                notFunctioning(8): the environmental monitor does not\n                                   function properly, such as\n                                   1. I2C fail\n                                   2. a temperature sensor generates a abnormal\n                                      data like 1000 C.\n\t\tunknown(9) :    can not get the information due to\n\t\t\t\tinternal error.\n                '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("initial", 1), ("normal", 2), ("minor", 3), ("major", 4), ("critical", 5), ("shutdown", 6), ("notPresent", 7), ("notFunctioning", 8), ("unknown", 9))

apEnvMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1))
apEnvMonI2CState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 1), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonI2CState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonI2CState.setDescription('the state of environment monitor located in the chassis.')
apEnvMonVoltageObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2))
apEnvMonVoltageStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1), )
if mibBuilder.loadTexts: apEnvMonVoltageStatusTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusTable.setDescription('The table of voltage status maintained by the environmental\n                monitor.')
apEnvMonVoltageStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageStatusIndex"))
if mibBuilder.loadTexts: apEnvMonVoltageStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusEntry.setDescription('An entry in the voltage status table, representing the status\n                of the associated testpoint maintained by the environmental\n                monitor.')
apEnvMonVoltageStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apEnvMonVoltageStatusIndex.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusIndex.setDescription('Unique index for the testpoint being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
apEnvMonVoltageStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 50, 51, 52, 53, 60, 61, 62, 70, 71, 72, 80, 81, 82, 83, 84, 85))).clone(namedValues=NamedValues(("unknown", 0), ("v2p5", 1), ("v3p3", 2), ("v5", 3), ("cpu", 4), ("v1", 5), ("v1p1", 6), ("v1p15", 7), ("v1p2", 8), ("v1p212", 9), ("v1p25", 10), ("v1p3", 11), ("v1p5", 12), ("v1p8", 13), ("v2p6", 14), ("v3p3aux", 15), ("sd5MainV0p9", 20), ("sd5MainV1p0", 21), ("sd5MainV1p2", 22), ("sd5MainV1p5", 23), ("sd5MainV1p8", 24), ("sd5MainV2p5", 25), ("sd5MainV3p3", 26), ("sd5MainV5p0", 27), ("sd5PhyV0p9", 30), ("sd5PhyV1p0", 31), ("sd5PhyV1p1", 32), ("sd5PhyV1p2", 33), ("sd5PhyV1p5", 34), ("sd5PhyV1p8", 35), ("sd5PhyV2p5", 36), ("sd5PhyV3p3", 37), ("sd5MgmtV1p0", 40), ("sd5MgmtV1p8", 41), ("sd5MgmtV3p3", 42), ("sd5MgmtV5p0", 43), ("sd5Cav0Pol0", 50), ("sd5Cav0Pol1", 51), ("sd5Cav1Pol0", 52), ("sd5Cav1Pol1", 53), ("sd5FlexV1p0", 60), ("sd5FlexV1p2", 61), ("sd5FlexV1p8", 62), ("sd5TighV1p2", 70), ("sd5TighV3p3", 71), ("sd5TighV1p05", 72), ("sd5TcmPol0", 80), ("sd5TcmPol1", 81), ("sd5TcmPol2", 82), ("sd5TcmPol3", 83), ("sd5TcmPol4", 84), ("sd5TcmPol5", 85)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageStatusType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusType.setDescription('The entity part type from which the voltage value is from\n\t\tv2p5- 2.5V sensor: L3 cache core voltage; micro-processor and \n\t\tco-processoor I/O voltage; FPGA memories I/O voltage.\n\t\tv3p3 - 3.3V sensor: general TTL supply rail; control logic;\n\t\tmicro-processor;  micro-processor and co-processor; SDRAM\n\t\tv5   - 5V sensor: Fans; micro-processor core voltage regulator.\n\t\tCPU  - CPU voltage micro-processor core voltage.')
apEnvMonVoltageStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageStatusDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusDescr.setDescription('Textual description of the voltage being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
apEnvMonVoltageStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 4), Integer32()).setUnits('millivolts').setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageStatusValue.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageStatusValue.setDescription('The current measurement of voltage if avaiable.\n\t\tThe value is expressed as the \n\t\tinteger in millivolts unit.')
apEnvMonVoltageState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 5), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageState.setDescription('The current state of the testpoint being instrumented.')
apEnvMonVoltageSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageSlotID.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageSlotID.setDescription('The slot this voltage is found on.')
apEnvMonVoltageSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 2, 1, 1, 7), ApHardwareModuleFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonVoltageSlotType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageSlotType.setDescription('The type of module found in this slot.')
apEnvMonTemperatureObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3))
apEnvMonTemperatureStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1), )
if mibBuilder.loadTexts: apEnvMonTemperatureStatusTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusTable.setDescription('The table of ambient temperature status maintained by the\n                environmental monitor.')
apEnvMonTemperatureStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureStatusIndex"))
if mibBuilder.loadTexts: apEnvMonTemperatureStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusEntry.setDescription('An entry in the ambient temperature status table, representing\n                the status of the associated testpoint maintained by the\n                environmental monitor.')
apEnvMonTemperatureStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apEnvMonTemperatureStatusIndex.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusIndex.setDescription('Unique index for the testpoint being instrumented.\n                This index is for SNMP purposes only, and has no\n                intrinsic meaning.')
apEnvMonTemperatureStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 30, 31, 32, 33, 34, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 71, 72, 73, 74, 75, 76, 77, 78))).clone(namedValues=NamedValues(("ds1624sMain", 1), ("ds1624sCPU", 2), ("lm84", 3), ("lm75", 4), ("lm75Main", 5), ("lm75Cpu", 6), ("lm75Phy", 7), ("sd5MainCpu", 10), ("sd5MainLI", 11), ("sd5MainRI", 12), ("sd5MainLE", 13), ("sd5MainRE", 14), ("sd5MainPlx", 15), ("sd5MainPcie", 16), ("sd5MainPsa", 17), ("sd5MainPsb", 18), ("sd5Tigh", 20), ("sd5Flex", 21), ("sd5Mgmt", 22), ("sd5PhyCav0", 30), ("sd5PhyCav1", 31), ("sd5PhyTemp0", 32), ("sd5PhyTemp1", 33), ("sd5PhyTemp2", 34), ("sd5PhyTemp3", 35), ("sd5PhyTemp4", 36), ("sd5PhyTemp5", 37), ("sd5PhyTcm0", 40), ("sd5PhyTcm1", 41), ("sd5PhyTcm2", 42), ("sd5PhyTcm3", 43), ("sd5PhyTcm4", 44), ("sd5PhyTcm5", 45), ("sd5PhyTcm6", 46), ("sd5PhyTcm7", 47), ("sd5PhyTcm8", 48), ("sd5PhyTcm9", 49), ("sd5PhyTcm10", 50), ("sd5PhyTcm11", 51), ("sd5PhyTcm12", 52), ("sd5PhyTcm13", 53), ("sd5PhyTcm14", 54), ("sd5PhyTcm15", 55), ("sd5PhyTcm16", 56), ("sd5PhyTcm17", 57), ("sd5PhyTcm18", 58), ("sd5PhyTcm19", 59), ("sd5PhyTcm20", 60), ("sd5PhyTcm21", 61), ("sd5PhyTcm22", 62), ("sd5PhyTcm23", 63), ("sd6MainBoard1", 71), ("sd6MainBoard2", 72), ("sd6MgmtI350", 73), ("sd6MediaI350", 74), ("sd6DSPI350", 75), ("sd6MainTCM0", 76), ("sd6MainTCM1", 77), ("sd6CPU", 78)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureStatusType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusType.setDescription('The entity part type from which the temperature value is from')
apEnvMonTemperatureStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureStatusDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusDescr.setDescription('Textual description of the temperature being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
apEnvMonTemperatureStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 4), Integer32()).setUnits('degrees Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureStatusValue.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureStatusValue.setDescription('The current measurement of the testpoint being instrumented.')
apEnvMonTemperatureState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 5), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureState.setDescription('The current state of the testpoint being instrumented.')
apEnvMonTemperatureSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureSlotID.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureSlotID.setDescription('The slot this temperature is found on.')
apEnvMonTemperatureSlotType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 3, 1, 1, 7), ApHardwareModuleFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonTemperatureSlotType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTemperatureSlotType.setDescription('The type of module found in this slot.')
apEnvMonFanObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4))
apEnvMonFanStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1), )
if mibBuilder.loadTexts: apEnvMonFanStatusTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusTable.setDescription('The table of fan status maintained by the environmental\n                monitor.')
apEnvMonFanStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonFanStatusIndex"))
if mibBuilder.loadTexts: apEnvMonFanStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusEntry.setDescription('An entry in the fan status table, representing the status of\n                the associated fan maintained by the environmental monitor.')
apEnvMonFanStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apEnvMonFanStatusIndex.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusIndex.setDescription('Unique index for the fan being instrumented.\n                This index is for SNMP purposes only.')
apEnvMonFanStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 11, 12, 13, 14, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35))).clone(namedValues=NamedValues(("left", 0), ("middle", 1), ("right", 2), ("slot", 3), ("fan1", 11), ("fan2", 12), ("fan3", 13), ("fan4", 14), ("mainFan1", 21), ("mainFan2", 22), ("mainFan3", 23), ("mainFan4", 24), ("mainFan5", 25), ("flx1Fan1", 26), ("flx1Fan2", 27), ("flx1Fan3", 28), ("flx1Fan4", 29), ("flx1Fan5", 30), ("flx2Fan1", 31), ("flx2Fan2", 32), ("flx2Fan3", 33), ("flx2Fan4", 34), ("flx2Fan5", 35)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonFanStatusType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusType.setDescription('The entity part type from which the fan value is from.\n\t\tThe left and right at the base when one faces the front\n\t\tof the SBC.\n\n\t\tNext-generation products contain replaceable fans contained\n\t\tin chassis slots.')
apEnvMonFanStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonFanStatusDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusDescr.setDescription('Textual description of the fan being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
apEnvMonFanStatusValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 4), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonFanStatusValue.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanStatusValue.setDescription('The current percentage measurement of the fan speed.')
apEnvMonFanState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 5), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonFanState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanState.setDescription('The current state of the fan being instrumented.')
apEnvMonFanSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonFanSlotID.setStatus('current')
if mibBuilder.loadTexts: apEnvMonFanSlotID.setDescription('The slot this van is found in.  zero is returned if\n\t\tthis fan is not of apEnvMonFanStatusType slot(3).')
apEnvMonPowerSupplyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5))
apEnvMonPowerSupplyStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1), )
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusTable.setDescription('The table of power supply status maintained by the\n                environmental monitor card.')
apEnvMonPowerSupplyStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonPowerSupplyStatusIndex"))
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusEntry.setDescription('An entry in the power supply status table, representing the\n                status of the associated power supply maintained by the\n                environmental monitor card.')
apEnvMonPowerSupplyStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusIndex.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusIndex.setDescription('Unique index for the power supply being instrumented.\n                This index is for SNMP purposes only.')
apEnvMonPowerSupplyStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("left", 0), ("right", 1), ("slot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusType.setDescription('The entity part type from which the power status is from. \n\t\t0=left:power supply A, 1=right:power supply B.\n\t\t3=slot: power supply is contained in the slot corresponding\n\t\tto apEnvMonPowerSowerSupplyStatusIndex')
apEnvMonPowerSupplyStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyStatusDescr.setDescription('Textual description of the power supply being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
apEnvMonPowerSupplyState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 5, 1, 1, 4), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPowerSupplyState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPowerSupplyState.setDescription('The current state of the power supply being instrumented:\n                     normal or notPresent')
apEnvMonPhyCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6))
apEnvMonPhyCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1), )
if mibBuilder.loadTexts: apEnvMonPhyCardStatusTable.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardStatusTable.setDescription("THIS TABLE IS BEING DEPRECATED IN FAVOR OF THE\n\t\tMORE GENERIC apEnvMonCardTable.\n\n\t\tPlease Note:  in the generic card table, a phy card\n\t\tis referred to as an 'niu' (network interfacing unit).\n\n                The table of phy card status maintained by the\n                environmental monitor.")
apEnvMonPhyCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonPhyCardStatusIndex"))
if mibBuilder.loadTexts: apEnvMonPhyCardStatusEntry.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardStatusEntry.setDescription('An entry in the phy status table, representing the\n                status of the associated phy maintained by the\n                environmental monitor.')
apEnvMonPhyCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apEnvMonPhyCardStatusIndex.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardStatusIndex.setDescription('Unique index for the phy being instrumented.\n                This index is for SNMP purposes only.')
apEnvMonPhyCardStatusType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("left", 0), ("right", 1), ("slot", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPhyCardStatusType.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardStatusType.setDescription('The entity part type from which the phy card is from. \n                0=left:card A, 1=right:card B, 3=only card.\n\t\t3=slot: phyCard is contained in the slot corresponding\n\t\tto apEnvMonPhyCardStatusIndex')
apEnvMonPhyCardStatusDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPhyCardStatusDescr.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardStatusDescr.setDescription('Textual description of the phy being instrumented.\n                This description is a short textual label, suitable as a\n                human-sensible identification for the rest of the\n                information in the entry.')
apEnvMonPhyCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 6, 1, 1, 4), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonPhyCardState.setStatus('deprecated')
if mibBuilder.loadTexts: apEnvMonPhyCardState.setDescription('The current state of the phy being instrumented:\n\t\t     normal or notPresent')
apEnvMonCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7))
apEnvMonCardTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1), )
if mibBuilder.loadTexts: apEnvMonCardTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardTable.setDescription('List of Cards in the chassis')
apEnvMonCardEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonCardSlot"))
if mibBuilder.loadTexts: apEnvMonCardEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardEntry.setDescription('A single card in the chassis')
apEnvMonCardSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardSlot.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardSlot.setDescription('Slot number of this card.  Please note that the\n\t\t slot number is zero-based, i.e. they are numbered 0-n.')
apEnvMonCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 2), ApHardwareModuleFamily()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardType.setDescription('The card type')
apEnvMonCardDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardDescr.setDescription('A text description of this card')
apEnvMonCardHealthScore = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardHealthScore.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardHealthScore.setDescription('The health score of this card')
apEnvMonCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 5), ApEnvMonState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardState.setDescription('the current state of this card')
apEnvMonCardRedundancy = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 1, 1, 6), ApRedundancyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCardRedundancy.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardRedundancy.setDescription('Redundancy state of the card')
apEnvMonCpuCoreTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2), )
if mibBuilder.loadTexts: apEnvMonCpuCoreTable.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreTable.setDescription('List of cores per CPU in the chassis')
apEnvMonCpuCoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1), ).setIndexNames((0, "ACMEPACKET-ENVMON-MIB", "apEnvMonCardSlot"), (0, "ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreIndex"))
if mibBuilder.loadTexts: apEnvMonCpuCoreEntry.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreEntry.setDescription('A single CPU core in the chassis')
apEnvMonCpuCoreIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreIndex.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreIndex.setDescription('the core index on the CPU')
apEnvMonCpuCoreDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreDescr.setDescription('the cpu core descriptor')
apEnvMonCpuCoreUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 3), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreUsage.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreUsage.setDescription('The current percentage of use for the CPU core.')
apEnvMonCpuCoreState = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 101, 102, 201, 202, 203, 204, 205, 206, 207, 208, 209, 401, 402, 403, 404, 405, 406))).clone(namedValues=NamedValues(("unknown", 0), ("present", 1), ("booting", 2), ("registered", 3), ("readywait", 4), ("ready", 5), ("bootTimeout", 6), ("registerTimeout", 7), ("manifestTimeout", 8), ("readyTimeout", 9), ("healthWait", 101), ("healthRcvd", 102), ("becomingActive", 201), ("becomingStandby", 202), ("becomingOOS", 203), ("active", 204), ("standby", 205), ("oos", 206), ("activeTimeout", 207), ("standbyTimeout", 208), ("oosTimeout", 209), ("resetting", 401), ("reset", 402), ("resetTimeout", 403), ("shuttingDown", 404), ("shutOff", 405), ("shutdownTimeout", 406)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreState.setDescription('The state of this CPU core.')
apEnvMonCpuCoreRamDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreRamDescr.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreRamDescr.setDescription('The cpu core RAM descriptor')
apEnvMonCpuCoreRamUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 3, 1, 7, 2, 1, 6), Gauge32()).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonCpuCoreRamUsage.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCpuCoreRamUsage.setDescription('The current percentage of use for the CPU core RAM.')
apEnvMonMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 2))
apEnvMonEnableStatChangeNotif = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 2, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apEnvMonEnableStatChangeNotif.setStatus('current')
if mibBuilder.loadTexts: apEnvMonEnableStatChangeNotif.setDescription('This variable indicates whether the system\n                produces any of the traps generated by this mib.\n                A false value will prevent them from being generated by\n                this system.')
apEnvMonNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3))
apEnvMonTrapInstance = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapInstance.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapInstance.setDescription("The object ID of the item which value is exceeds its monitoring\n        threshold. If the item is within a table, this OID is the instance \n\tof this item's index within its table.\n\tFor exmple, \n\n\t1. if the state of 2.5v voltage changes, the item is apEnvMonVoltageState.\n\tthe trap instance OID is apEnvMonVoltageState.1, \n\twhere the ending 1 is the instance index of 2.5v entry. \n\tThe numeric form is 1.3.6.1.4.1.9148.3.3.1.2.1.1.5.1\n\n\t2. if the state of mainboard temperature changes, the trap instance\n\tOID is apEnvMonTemperatureState.x, where x is the index\n\twhich makes apEnvMonTemperatureStatusType.x = lm75Main(5).\n\n\t3. if the state of left fan changes, the trap instance OID is \n\tapEnvMonFanState.y, where y is the index which \n\tmakes apEnvMonFanStatusType.y = left (0).\n\n\tIf the item is scalar, the OID is the instance OID of this item,\n\tFor example,\n\n\tIf the I2C state changes, the OID is apEnvMonI2CState.0\n\t")
apEnvMonTrapPreviousState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 2), ApEnvMonState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapPreviousState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapPreviousState.setDescription('The previous state of the object.')
apEnvMonTrapCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 3), ApEnvMonState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapCurrentState.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapCurrentState.setDescription('The current state of the object which causes the trap to occur.')
apEnvMonTrapSlotID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapSlotID.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapSlotID.setDescription('The slotID which causes the trap to occur.')
apEnvMonTrapSlotType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 5), ApHardwareModuleFamily()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapSlotType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapSlotType.setDescription('The slot type which causes the trap to occur.')
apEnvMonTrapPortType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 6), ApPhyPortType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapPortType.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapPortType.setDescription('The port type which causes the trap to occur.')
apEnvMonTrapPresence = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 7), ApPresence()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapPresence.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapPresence.setDescription('The state which causes the trap to occur.')
apEnvMonTrapPortID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 3, 3, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEnvMonTrapPortID.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTrapPortID.setDescription('The ID of the port which causes the trap to occur.')
apEnvMonMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4))
apEnvMonMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0))
apEnvMonI2CFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0, 1))
if mibBuilder.loadTexts: apEnvMonI2CFailNotification.setStatus('current')
if mibBuilder.loadTexts: apEnvMonI2CFailNotification.setDescription('A notification of I2C state turns from normal(1) to\n                     notFunctioning(7)')
apEnvMonStatusChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0, 2)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapInstance"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPreviousState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapCurrentState"))
if mibBuilder.loadTexts: apEnvMonStatusChangeNotification.setStatus('current')
if mibBuilder.loadTexts: apEnvMonStatusChangeNotification.setDescription('A apEnvStatusChangeNotification is sent if any entry of\n                above table change in the state of a device being monitored')
apEnvMonTempChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0, 3)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapSlotID"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapSlotType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPreviousState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapCurrentState"))
if mibBuilder.loadTexts: apEnvMonTempChangeNotification.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTempChangeNotification.setDescription('A notification is sent if any of the units cross a\n\t\ttemperature threshold')
apEnvMonVoltageChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0, 4)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapSlotID"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapSlotType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPreviousState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapCurrentState"))
if mibBuilder.loadTexts: apEnvMonVoltageChangeNotification.setStatus('current')
if mibBuilder.loadTexts: apEnvMonVoltageChangeNotification.setDescription('A notification is sent if any of the units cross a\n\t\tvoltage threshold')
apEnvMonPortChangeNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 3, 4, 0, 5)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPortType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPresence"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapSlotID"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTrapPortID"))
if mibBuilder.loadTexts: apEnvMonPortChangeNotification.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPortChangeNotification.setDescription(' The trap will be generated if a physical port is\n\t\tinserted/present or removed/not present. ')
apEnvMonMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5))
apEnvMonMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 1))
apEnvMonMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2))
apEnvMonGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 1)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonI2CState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageStatusType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageStatusDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageStatusValue"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureStatusType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureStatusDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureStatusValue"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonFanStatusType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonFanStatusDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonFanStatusValue"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonFanState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPowerSupplyStatusType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPowerSupplyStatusDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPowerSupplyState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPhyCardStatusType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPhyCardStatusDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonPhyCardState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonEnableStatChangeNotif"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonGroup = apEnvMonGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonGroup.setDescription('A collection of objects providing environmental\n                 monitoring capability to an Acme Packet chassis.')
apEnvMonNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 3)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonStatusChangeNotification"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonI2CFailNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonNotifyGroup = apEnvMonNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonNotifyGroup.setDescription('A collection of notifications providing the status\n                  change for environmental monitoring.')
apEnvMonExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 4)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageSlotID"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageSlotType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureSlotID"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonTemperatureSlotType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonFanSlotID"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonExtGroup = apEnvMonExtGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonExtGroup.setDescription('Additional objects providing environmental\n                 monitoring capability to an Acme Packet chassis.')
apEnvMonCardGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 5)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonCardSlot"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardHealthScore"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardRedundancy"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreIndex"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreUsage"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreRamDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCpuCoreRamUsage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonCardGroup = apEnvMonCardGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardGroup.setDescription('A collection of objects providing environmental\n                 monitoring capability to card-based Acme Packet products.')
apEnvMonExtNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 6)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTempChangeNotification"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonVoltageChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonExtNotifyGroup = apEnvMonExtNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonExtNotifyGroup.setDescription('Additional collection of notifications providing the status\n                  change for environmental monitoring.')
apEnvMonPortNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 7)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonPortChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonPortNotifyGroup = apEnvMonPortNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonPortNotifyGroup.setDescription('Notifications to indicate physical port changes.')
apEnvMonTempNotifyGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 8)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonTempChangeNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonTempNotifyGroup = apEnvMonTempNotifyGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonTempNotifyGroup.setDescription('Additional collection of notifications providing the status\n                  change for environmental monitoring.')
apEnvMonCardOnlyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 3, 5, 2, 9)).setObjects(("ACMEPACKET-ENVMON-MIB", "apEnvMonCardSlot"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardType"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardDescr"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardHealthScore"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardState"), ("ACMEPACKET-ENVMON-MIB", "apEnvMonCardRedundancy"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apEnvMonCardOnlyGroup = apEnvMonCardOnlyGroup.setStatus('current')
if mibBuilder.loadTexts: apEnvMonCardOnlyGroup.setDescription('A collection of objects providing environmental\n                 monitoring capability to card-based Acme Packet products.')
mibBuilder.exportSymbols("ACMEPACKET-ENVMON-MIB", apEnvMonNotificationObjects=apEnvMonNotificationObjects, apEnvMonFanStatusDescr=apEnvMonFanStatusDescr, apEnvMonVoltageState=apEnvMonVoltageState, apEnvMonCardType=apEnvMonCardType, apEnvMonTemperatureObjects=apEnvMonTemperatureObjects, apEnvMonModule=apEnvMonModule, apEnvMonEnableStatChangeNotif=apEnvMonEnableStatChangeNotif, apEnvMonVoltageStatusTable=apEnvMonVoltageStatusTable, apEnvMonPowerSupplyStatusTable=apEnvMonPowerSupplyStatusTable, apEnvMonCardHealthScore=apEnvMonCardHealthScore, ApEnvMonState=ApEnvMonState, apEnvMonNotifyGroup=apEnvMonNotifyGroup, apEnvMonFanStatusType=apEnvMonFanStatusType, apEnvMonPortChangeNotification=apEnvMonPortChangeNotification, apEnvMonTemperatureStatusType=apEnvMonTemperatureStatusType, apEnvMonTrapPresence=apEnvMonTrapPresence, apEnvMonTempChangeNotification=apEnvMonTempChangeNotification, apEnvMonVoltageSlotType=apEnvMonVoltageSlotType, apEnvMonCardEntry=apEnvMonCardEntry, apEnvMonCardState=apEnvMonCardState, apEnvMonPhyCardStatusEntry=apEnvMonPhyCardStatusEntry, apEnvMonCpuCoreDescr=apEnvMonCpuCoreDescr, apEnvMonObjects=apEnvMonObjects, apEnvMonFanSlotID=apEnvMonFanSlotID, apEnvMonCardSlot=apEnvMonCardSlot, apEnvMonPowerSupplyStatusEntry=apEnvMonPowerSupplyStatusEntry, apEnvMonExtGroup=apEnvMonExtGroup, apEnvMonTrapPortType=apEnvMonTrapPortType, apEnvMonMIBGroups=apEnvMonMIBGroups, apEnvMonPortNotifyGroup=apEnvMonPortNotifyGroup, apEnvMonTemperatureStatusIndex=apEnvMonTemperatureStatusIndex, apEnvMonTemperatureSlotType=apEnvMonTemperatureSlotType, apEnvMonPowerSupplyState=apEnvMonPowerSupplyState, apEnvMonCardTable=apEnvMonCardTable, apEnvMonCardObjects=apEnvMonCardObjects, apEnvMonMIBNotificationEnables=apEnvMonMIBNotificationEnables, apEnvMonMIBNotificationPrefix=apEnvMonMIBNotificationPrefix, apEnvMonMIBConformance=apEnvMonMIBConformance, apEnvMonPhyCardState=apEnvMonPhyCardState, apEnvMonCpuCoreState=apEnvMonCpuCoreState, apEnvMonI2CFailNotification=apEnvMonI2CFailNotification, apEnvMonCpuCoreIndex=apEnvMonCpuCoreIndex, apEnvMonPowerSupplyStatusIndex=apEnvMonPowerSupplyStatusIndex, apEnvMonVoltageObjects=apEnvMonVoltageObjects, apEnvMonTemperatureSlotID=apEnvMonTemperatureSlotID, apEnvMonPowerSupplyObjects=apEnvMonPowerSupplyObjects, apEnvMonTemperatureStatusDescr=apEnvMonTemperatureStatusDescr, apEnvMonCpuCoreRamUsage=apEnvMonCpuCoreRamUsage, apEnvMonTrapSlotType=apEnvMonTrapSlotType, apEnvMonPhyCardStatusIndex=apEnvMonPhyCardStatusIndex, apEnvMonStatusChangeNotification=apEnvMonStatusChangeNotification, apEnvMonTrapInstance=apEnvMonTrapInstance, apEnvMonCardGroup=apEnvMonCardGroup, apEnvMonTrapPortID=apEnvMonTrapPortID, apEnvMonTemperatureStatusEntry=apEnvMonTemperatureStatusEntry, apEnvMonFanObjects=apEnvMonFanObjects, apEnvMonFanState=apEnvMonFanState, apEnvMonFanStatusValue=apEnvMonFanStatusValue, apEnvMonTemperatureStatusTable=apEnvMonTemperatureStatusTable, apEnvMonTrapCurrentState=apEnvMonTrapCurrentState, apEnvMonFanStatusIndex=apEnvMonFanStatusIndex, apEnvMonPowerSupplyStatusDescr=apEnvMonPowerSupplyStatusDescr, apEnvMonCpuCoreEntry=apEnvMonCpuCoreEntry, PYSNMP_MODULE_ID=apEnvMonModule, apEnvMonCpuCoreUsage=apEnvMonCpuCoreUsage, apEnvMonCpuCoreRamDescr=apEnvMonCpuCoreRamDescr, apEnvMonCpuCoreTable=apEnvMonCpuCoreTable, apEnvMonVoltageStatusIndex=apEnvMonVoltageStatusIndex, apEnvMonPhyCardStatusTable=apEnvMonPhyCardStatusTable, apEnvMonVoltageChangeNotification=apEnvMonVoltageChangeNotification, apEnvMonVoltageStatusType=apEnvMonVoltageStatusType, apEnvMonCardOnlyGroup=apEnvMonCardOnlyGroup, apEnvMonPowerSupplyStatusType=apEnvMonPowerSupplyStatusType, apEnvMonTempNotifyGroup=apEnvMonTempNotifyGroup, apEnvMonI2CState=apEnvMonI2CState, apEnvMonExtNotifyGroup=apEnvMonExtNotifyGroup, apEnvMonFanStatusTable=apEnvMonFanStatusTable, apEnvMonMIBNotifications=apEnvMonMIBNotifications, apEnvMonGroup=apEnvMonGroup, apEnvMonVoltageStatusDescr=apEnvMonVoltageStatusDescr, apEnvMonFanStatusEntry=apEnvMonFanStatusEntry, apEnvMonTrapPreviousState=apEnvMonTrapPreviousState, apEnvMonTrapSlotID=apEnvMonTrapSlotID, apEnvMonVoltageSlotID=apEnvMonVoltageSlotID, apEnvMonCardDescr=apEnvMonCardDescr, apEnvMonMIBCompliances=apEnvMonMIBCompliances, apEnvMonTemperatureStatusValue=apEnvMonTemperatureStatusValue, apEnvMonPhyCardObjects=apEnvMonPhyCardObjects, apEnvMonVoltageStatusValue=apEnvMonVoltageStatusValue, apEnvMonCardRedundancy=apEnvMonCardRedundancy, apEnvMonPhyCardStatusType=apEnvMonPhyCardStatusType, apEnvMonPhyCardStatusDescr=apEnvMonPhyCardStatusDescr, apEnvMonVoltageStatusEntry=apEnvMonVoltageStatusEntry, apEnvMonTemperatureState=apEnvMonTemperatureState)
