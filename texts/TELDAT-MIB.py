#
# PySNMP MIB module TELDAT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/teldat/TELDAT-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 14:12:02 2024
# On host fv-az1456-954 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, enterprises, Opaque, IpAddress, Counter32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, NotificationType, MibIdentifier, Unsigned32, Gauge32, ModuleIdentity, Bits, TimeTicks, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "enterprises", "Opaque", "IpAddress", "Counter32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "NotificationType", "MibIdentifier", "Unsigned32", "Gauge32", "ModuleIdentity", "Bits", "TimeTicks", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
teldat = MibIdentifier((1, 3, 6, 1, 4, 1, 2007))
teladmin = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1))
telproto = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 3))
telproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 4))
telobjid = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1))
equipo_rexis_mru = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 15)).setLabel("equipo-rexis-mru")
equipo_mbbu = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 16)).setLabel("equipo-mbbu")
equipo_bir_u = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 20)).setLabel("equipo-bir-u")
equipo_ebano = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 21)).setLabel("equipo-ebano")
equipo_nucleox_plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 32)).setLabel("equipo-nucleox-plus")
equipo_cbra = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 33)).setLabel("equipo-cbra")
equipo_centrix_b = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 34)).setLabel("equipo-centrix-b")
equipo_centrix_p = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 35)).setLabel("equipo-centrix-p")
equipo_temis = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 36)).setLabel("equipo-temis")
equipo_novacom = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 37)).setLabel("equipo-novacom")
equipo_router_maestro = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 38)).setLabel("equipo-router-maestro")
equipo_cbra20 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 39)).setLabel("equipo-cbra20")
equipo_np20h = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 40)).setLabel("equipo-np20h")
equipo_icu_plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 41)).setLabel("equipo-icu-plus")
equipo_centrix_f = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 42)).setLabel("equipo-centrix-f")
equipo_cbra_tar = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 43)).setLabel("equipo-cbra-tar")
equipo_aura = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 44)).setLabel("equipo-aura")
equipo_kronos = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 45)).setLabel("equipo-kronos")
equipo_teldat_C2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 46)).setLabel("equipo-teldat-C2")
equipo_operador_remoto = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 47)).setLabel("equipo-operador-remoto")
equipo_visor = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 48)).setLabel("equipo-visor")
equipo_voxnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 49)).setLabel("equipo-voxnet")
equipo_dusac32 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 50)).setLabel("equipo-dusac32")
equipo_novacom_x25 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 51)).setLabel("equipo-novacom-x25")
equipo_enaplan = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 52)).setLabel("equipo-enaplan")
equipo_teldat_C3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 53)).setLabel("equipo-teldat-C3")
equipo_atlas_standard = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 56)).setLabel("equipo-atlas-standard")
equipo_teldat_C2B = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 57)).setLabel("equipo-teldat-C2B")
equipo_teldat_CSW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 58)).setLabel("equipo-teldat-CSW")
equipo_teldat_C3_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 59)).setLabel("equipo-teldat-C3-1")
equipo_teldat_C3B_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 60)).setLabel("equipo-teldat-C3B-1")
equipo_teldat_C2BM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 61)).setLabel("equipo-teldat-C2BM")
equipo_atlas_basico = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 62)).setLabel("equipo-atlas-basico")
equipo_teldat_C2i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 63)).setLabel("equipo-teldat-C2i")
equipo_teldat_C3i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 64)).setLabel("equipo-teldat-C3i")
equipo_teldat_C3B = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 65)).setLabel("equipo-teldat-C3B")
equipo_teldat_C3G = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 66)).setLabel("equipo-teldat-C3G")
equipo_teldat_C4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 67)).setLabel("equipo-teldat-C4")
equipo_teldat_C4i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 68)).setLabel("equipo-teldat-C4i")
equipo_teldat_C4B = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 69)).setLabel("equipo-teldat-C4B")
equipo_centrix_sec = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 70)).setLabel("equipo-centrix-sec")
equipo_centrix_d = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 71)).setLabel("equipo-centrix-d")
equipo_teldat_C2_UP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 72)).setLabel("equipo-teldat-C2-UP")
equipo_teldat_C6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 73)).setLabel("equipo-teldat-C6")
equipo_centrix_ng = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 74)).setLabel("equipo-centrix-ng")
equipo_atlas_voxnet = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 75)).setLabel("equipo-atlas-voxnet")
equipo_s2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 76)).setLabel("equipo-s2")
equipo_s4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 77)).setLabel("equipo-s4")
equipo_s2i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 78)).setLabel("equipo-s2i")
equipo_s4i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 79)).setLabel("equipo-s4i")
equipo_g2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 80)).setLabel("equipo-g2")
equipo_g3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 81)).setLabel("equipo-g3")
equipo_g4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 82)).setLabel("equipo-g4")
equipo_g2i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 83)).setLabel("equipo-g2i")
equipo_g3i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 84)).setLabel("equipo-g3i")
equipo_g4i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 85)).setLabel("equipo-g4i")
equipo_c1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 86)).setLabel("equipo-c1")
equipo_c1B = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 87)).setLabel("equipo-c1B")
equipo_c1i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 88)).setLabel("equipo-c1i")
equipo_s1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 89)).setLabel("equipo-s1")
equipo_s1i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 90)).setLabel("equipo-s1i")
equipo_g1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 91)).setLabel("equipo-g1")
equipo_g1i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 92)).setLabel("equipo-g1i")
equipo_g3_lite = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 93)).setLabel("equipo-g3-lite")
equipo_C3G_lite = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 94)).setLabel("equipo-C3G-lite")
equipo_atlas_100 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 96)).setLabel("equipo-atlas-100")
equipo_atlas_300V = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 97)).setLabel("equipo-atlas-300V")
equipo_c1G = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 98)).setLabel("equipo-c1G")
equipo_atlas_250 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 101)).setLabel("equipo-atlas-250")
equipo_c4G = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 102)).setLabel("equipo-c4G")
equipo_atlas_100B = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 103)).setLabel("equipo-atlas-100B")
equipo_atlas_150 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 104)).setLabel("equipo-atlas-150")
equipo_a2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 105)).setLabel("equipo-a2")
equipo_a3 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 106)).setLabel("equipo-a3")
equipo_a4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 107)).setLabel("equipo-a4")
equipo_a2i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 108)).setLabel("equipo-a2i")
equipo_a3i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 109)).setLabel("equipo-a3i")
equipo_a4i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 110)).setLabel("equipo-a4i")
equipo_a1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 111)).setLabel("equipo-a1")
equipo_a1i = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 112)).setLabel("equipo-a1i")
equipo_g4_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 114)).setLabel("equipo-g4-cdma")
equipo_g4i_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 115)).setLabel("equipo-g4i-cdma")
equipo_g3_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 116)).setLabel("equipo-g3-cdma")
equipo_g3i_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 117)).setLabel("equipo-g3i-cdma")
equipo_g1_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 118)).setLabel("equipo-g1-cdma")
equipo_g1i_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 119)).setLabel("equipo-g1i-cdma")
equipo_c1plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 122)).setLabel("equipo-c1plus")
equipo_c1iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 123)).setLabel("equipo-c1iplus")
equipo_atlas_50 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 126)).setLabel("equipo-atlas-50")
equipo_g4plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 127)).setLabel("equipo-g4plus")
equipo_g3plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 128)).setLabel("equipo-g3plus")
equipo_g1plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 129)).setLabel("equipo-g1plus")
equipo_g4iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 130)).setLabel("equipo-g4iplus")
equipo_g3iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 131)).setLabel("equipo-g3iplus")
equipo_g1iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 132)).setLabel("equipo-g1iplus")
equipo_atlas_250SW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 133)).setLabel("equipo-atlas-250SW")
equipo_atlas_150SW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 134)).setLabel("equipo-atlas-150SW")
equipo_atlas_50SW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 135)).setLabel("equipo-atlas-50SW")
equipo_vyda_1M = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 136)).setLabel("equipo-vyda-1M")
equipo_vyda_2M = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 137)).setLabel("equipo-vyda-2M")
equipo_vyda_3M = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 138)).setLabel("equipo-vyda-3M")
equipo_atlas_300 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 139)).setLabel("equipo-atlas-300")
equipo_atlas_152 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 140)).setLabel("equipo-atlas-152")
equipo_vyda_compact = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 141)).setLabel("equipo-vyda-compact")
equipo_C8plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 142)).setLabel("equipo-C8plus")
equipo_C8iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 143)).setLabel("equipo-C8iplus")
equipo_C9plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 144)).setLabel("equipo-C9plus")
equipo_C9iplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 145)).setLabel("equipo-C9iplus")
equipo_atlas_360 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 146)).setLabel("equipo-atlas-360")
equipo_c1plus_SW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 147)).setLabel("equipo-c1plus-SW")
equipo_c1a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 148)).setLabel("equipo-c1a")
equipo_s1a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 149)).setLabel("equipo-s1a")
equipo_g1a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 150)).setLabel("equipo-g1a")
equipo_g1a_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 151)).setLabel("equipo-g1a-cdma")
equipo_a1a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 152)).setLabel("equipo-a1a")
equipo_c2a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 155)).setLabel("equipo-c2a")
equipo_s2a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 156)).setLabel("equipo-s2a")
equipo_g2a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 157)).setLabel("equipo-g2a")
equipo_a2a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 158)).setLabel("equipo-a2a")
equipo_c4a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 159)).setLabel("equipo-c4a")
equipo_s4a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 160)).setLabel("equipo-s4a")
equipo_g4a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 161)).setLabel("equipo-g4a")
equipo_g4a_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 162)).setLabel("equipo-g4a-cdma")
equipo_a4a = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 163)).setLabel("equipo-a4a")
equipo_cirus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 165)).setLabel("equipo-cirus")
equipo_h1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 166)).setLabel("equipo-h1")
equipo_atlas_260 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 167)).setLabel("equipo-atlas-260")
equipo_atlas_160 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 168)).setLabel("equipo-atlas-160")
equipo_vyda_4M = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 169)).setLabel("equipo-vyda-4M")
equipo_t200g = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 170)).setLabel("equipo-t200g")
equipo_h1_auto = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 171)).setLabel("equipo-h1-auto")
equipo_g1n = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 172)).setLabel("equipo-g1n")
equipo_v1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 173)).setLabel("equipo-v1")
equipo_c1plusl = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 174)).setLabel("equipo-c1plusl")
equipo_h4 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 175)).setLabel("equipo-h4")
equipo_t200 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 176)).setLabel("equipo-t200")
equipo_h1plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 177)).setLabel("equipo-h1plus")
equipo_regesta_rp81 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 178)).setLabel("equipo-regesta-rp81")
equipo_regesta_rp82 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 179)).setLabel("equipo-regesta-rp82")
equipo_regesta_1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 180)).setLabel("equipo-regesta-1")
equipo_f1plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 181)).setLabel("equipo-f1plus")
equipo_l1plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 183)).setLabel("equipo-l1plus")
equipo_regesta_rp61er = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 184)).setLabel("equipo-regesta-rp61er")
equipo_regesta_rp62er = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 185)).setLabel("equipo-regesta-rp62er")
equipo_3geplus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 186)).setLabel("equipo-3geplus")
equipo_atlas_60 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 187)).setLabel("equipo-atlas-60")
equipo_3geplus_cdma = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 188)).setLabel("equipo-3geplus-cdma")
equipo_h1auto_plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 189)).setLabel("equipo-h1auto-plus")
equipo_k = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 190)).setLabel("equipo-k")
equipo_v = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 191)).setLabel("equipo-v")
equipo_connect_104 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 192)).setLabel("equipo-connect-104")
equipo_h1rail = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 193)).setLabel("equipo-h1rail")
equipo_kf = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 194)).setLabel("equipo-kf")
equipo_m1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 199)).setLabel("equipo-m1")
equipo_m1f = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 200)).setLabel("equipo-m1f")
equipo_4Ge = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 201)).setLabel("equipo-4Ge")
router_oa5710v = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 202)).setLabel("router-oa5710v")
router_oa5720 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 203)).setLabel("router-oa5720")
router_oa5840 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 204)).setLabel("router-oa5840")
router_oa5850 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 205)).setLabel("router-oa5850")
router_oa5725r61er = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 206)).setLabel("router-oa5725r61er")
router_oa5725r62er = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 207)).setLabel("router-oa5725r62er")
router_oa5725a3g = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 208)).setLabel("router-oa5725a3g")
router_oa5725alte = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 209)).setLabel("router-oa5725alte")
router_esrwwanenabler = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 210)).setLabel("router-esrwwanenabler")
equipo_connect_104_v = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 211)).setLabel("equipo-connect-104-v")
equipo_connect_104_kf = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 212)).setLabel("equipo-connect-104-kf")
equipo_connect_4ge = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 213)).setLabel("equipo-connect-4ge")
equipo_bintecrsc = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 214)).setLabel("equipo-bintecrsc")
equipo_regesta_lite = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 215)).setLabel("equipo-regesta-lite")
equipo_bintecrvc = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 216)).setLabel("equipo-bintecrvc")
equipo_H2auto = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 217)).setLabel("equipo-H2auto")
equipo_iM8 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 219)).setLabel("equipo-iM8")
equipo_iM8_Plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 220)).setLabel("equipo-iM8-Plus")
equipo_H2auto_Plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 221)).setLabel("equipo-H2auto-Plus")
equipo_regesta_plc = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 222)).setLabel("equipo-regesta-plc")
equipo_Atlas_i70 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 223)).setLabel("equipo-Atlas-i70")
equipo_Atlas_i70_Plus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 224)).setLabel("equipo-Atlas-i70-Plus")
equipo_h2rail_lite = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 225)).setLabel("equipo-h2rail-lite")
equipo_h2rail_lite2 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 226)).setLabel("equipo-h2rail-lite2")
equipo_h2rail = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 227)).setLabel("equipo-h2rail")
equipo_regesta_comp_plc = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 229)).setLabel("equipo-regesta-comp-plc")
teldatSreTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1))
sreTrapSubSist = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapSubSist.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapSubSist.setDescription('First variable inside the variable-bindings field of the SNMP\n            Trap-PDU: Events subsystem number.')
sreTrapEvento = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapEvento.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapEvento.setDescription('Second variable inside the variable-bindings field of the SNMP\n            Trap-PDU: Event number (inside the subsystem).')
sreTrapVar1 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 4), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar1.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar1.setDescription('Third variable inside the variable-bindings field of the SNMP\n            Trap-PDU: first variable of the event mask.')
sreTrapVar2 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 5), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar2.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar2.setDescription('Fourth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: second variable of the event mask.')
sreTrapVar3 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 6), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar3.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar3.setDescription('Fifth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: third variable of the event mask.')
sreTrapVar4 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 7), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar4.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar4.setDescription('Sixth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: fourth variable of the event mask.')
sreTrapVar5 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 8), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar5.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar5.setDescription('Seventh variable inside the variable-bindings field of the SNMP\n            Trap-PDU: fifth variable of the event mask.')
sreTrapVar6 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 9), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar6.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar6.setDescription('Eighth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: sixth variable of the event mask.')
sreTrapVar7 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 10), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar7.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar7.setDescription('Ninth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: seventh variable of the event mask.')
sreTrapVar8 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 11), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar8.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar8.setDescription('Tenth variable inside the variable-bindings field of the SNMP\n            Trap-PDU: eighth variable of the event mask.')
sreTrapVar9 = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 1, 12), Opaque()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreTrapVar9.setStatus('mandatory')
if mibBuilder.loadTexts: sreTrapVar9.setDescription('Eleventh variable inside the variable-bindings field of the SNMP\n            Trap-PDU: ninth variable of the event mask.')
teldatSreTrap_GW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 1)).setLabel("teldatSreTrap-GW")
teldatSreTrap_FLT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 2)).setLabel("teldatSreTrap-FLT")
teldatSreTrap_BRS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 3)).setLabel("teldatSreTrap-BRS")
teldatSreTrap_ARP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 5)).setLabel("teldatSreTrap-ARP")
teldatSreTrap_IP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 10)).setLabel("teldatSreTrap-IP")
teldatSreTrap_ICMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 11)).setLabel("teldatSreTrap-ICMP")
teldatSreTrap_TCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 12)).setLabel("teldatSreTrap-TCP")
teldatSreTrap_UDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 13)).setLabel("teldatSreTrap-UDP")
teldatSreTrap_ORIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 15)).setLabel("teldatSreTrap-ORIP")
teldatSreTrap_SPF = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 17)).setLabel("teldatSreTrap-SPF")
teldatSreTrap_TFTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 19)).setLabel("teldatSreTrap-TFTP")
teldatSreTrap_SNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 21)).setLabel("teldatSreTrap-SNMP")
teldatSreTrap_SRT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 72)).setLabel("teldatSreTrap-SRT")
teldatSreTrap_BR = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 74)).setLabel("teldatSreTrap-BR")
teldatSreTrap_FTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 80)).setLabel("teldatSreTrap-FTP")
teldatSreTrap_ETH = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 81)).setLabel("teldatSreTrap-ETH")
teldatSreTrap_SL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 83)).setLabel("teldatSreTrap-SL")
teldatSreTrap_TKR = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 84)).setLabel("teldatSreTrap-TKR")
teldatSreTrap_SDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 90)).setLabel("teldatSreTrap-SDLC")
teldatSreTrap_FR = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 92)).setLabel("teldatSreTrap-FR")
teldatSreTrap_PPP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 95)).setLabel("teldatSreTrap-PPP")
teldatSreTrap_X252 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 97)).setLabel("teldatSreTrap-X252")
teldatSreTrap_X253 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 98)).setLabel("teldatSreTrap-X253")
teldatSreTrap_RDSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 99)).setLabel("teldatSreTrap-RDSI")
teldatSreTrap_LLC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 103)).setLabel("teldatSreTrap-LLC")
teldatSreTrap_BAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 109)).setLabel("teldatSreTrap-BAN")
teldatSreTrap_NBS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 110)).setLabel("teldatSreTrap-NBS")
teldatSreTrap_CIF = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 111)).setLabel("teldatSreTrap-CIF")
teldatSreTrap_GSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 112)).setLabel("teldatSreTrap-GSTP")
teldatSreTrap_FRBK = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 114)).setLabel("teldatSreTrap-FRBK")
teldatSreTrap_PRI = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 115)).setLabel("teldatSreTrap-PRI")
teldatSreTrap_DLS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 116)).setLabel("teldatSreTrap-DLS")
teldatSreTrap_PCMC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 118)).setLabel("teldatSreTrap-PCMC")
teldatSreTrap_LAPD = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 119)).setLabel("teldatSreTrap-LAPD")
teldatSreTrap_TNIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 120)).setLabel("teldatSreTrap-TNIP")
teldatSreTrap_MBBU = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 123)).setLabel("teldatSreTrap-MBBU")
teldatSreTrap_BIR64 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 124)).setLabel("teldatSreTrap-BIR64")
teldatSreTrap_REXISMRU = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 125)).setLabel("teldatSreTrap-REXISMRU")
teldatSreTrap_REXISFT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 126)).setLabel("teldatSreTrap-REXISFT")
teldatSreTrap_ICUPLUS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 127)).setLabel("teldatSreTrap-ICUPLUS")
teldatSreTrap_Q933 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 128)).setLabel("teldatSreTrap-Q933")
teldatSreTrap_IPPN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 129)).setLabel("teldatSreTrap-IPPN")
teldatSreTrap_RAD = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 130)).setLabel("teldatSreTrap-RAD")
teldatSreTrap_H323 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 131)).setLabel("teldatSreTrap-H323")
teldatSreTrap_DHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 133)).setLabel("teldatSreTrap-DHCP")
teldatSreTrap_IP6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 134)).setLabel("teldatSreTrap-IP6")
teldatSreTrap_TVRP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 135)).setLabel("teldatSreTrap-TVRP")
teldatSreTrap_ATM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 136)).setLabel("teldatSreTrap-ATM")
teldatSreTrap_IPSEC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 138)).setLabel("teldatSreTrap-IPSEC")
teldatSreTrap_NTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 139)).setLabel("teldatSreTrap-NTP")
teldatSreTrap_ADSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 140)).setLabel("teldatSreTrap-ADSL")
teldatSreTrap_HTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 142)).setLabel("teldatSreTrap-HTTP")
teldatSreTrap_DEP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 144)).setLabel("teldatSreTrap-DEP")
teldatSreTrap_ASDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 145)).setLabel("teldatSreTrap-ASDP")
teldatSreTrap_LDAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 146)).setLabel("teldatSreTrap-LDAP")
teldatSreTrap_SCEP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 147)).setLabel("teldatSreTrap-SCEP")
teldatSreTrap_P3OE = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 148)).setLabel("teldatSreTrap-P3OE")
teldatSreTrap_AT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 149)).setLabel("teldatSreTrap-AT")
teldatSreTrap_ASYNC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 150)).setLabel("teldatSreTrap-ASYNC")
teldatSreTrap_SYNC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 151)).setLabel("teldatSreTrap-SYNC")
teldatSreTrap_DNS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 152)).setLabel("teldatSreTrap-DNS")
teldatSreTrap_VSN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 153)).setLabel("teldatSreTrap-VSN")
teldatSreTrap_NAPT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 154)).setLabel("teldatSreTrap-NAPT")
teldatSreTrap_VID = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 155)).setLabel("teldatSreTrap-VID")
teldatSreTrap_PRL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 156)).setLabel("teldatSreTrap-PRL")
teldatSreTrap_HDSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 157)).setLabel("teldatSreTrap-HDSL")
teldatSreTrap_PGMO = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 158)).setLabel("teldatSreTrap-PGMO")
teldatSreTrap_RTSP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 159)).setLabel("teldatSreTrap-RTSP")
teldatSreTrap_DNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 160)).setLabel("teldatSreTrap-DNAT")
teldatSreTrap_G703 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 161)).setLabel("teldatSreTrap-G703")
teldatSreTrap_POLR = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 162)).setLabel("teldatSreTrap-POLR")
teldatSreTrap_XN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 163)).setLabel("teldatSreTrap-XN")
teldatSreTrap_XNS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 164)).setLabel("teldatSreTrap-XNS")
teldatSreTrap_IPX = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 165)).setLabel("teldatSreTrap-IPX")
teldatSreTrap_IGMP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 166)).setLabel("teldatSreTrap-IGMP")
teldatSreTrap_AINST = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 167)).setLabel("teldatSreTrap-AINST")
teldatSreTrap_BGP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 169)).setLabel("teldatSreTrap-BGP")
teldatSreTrap_NSM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 170)).setLabel("teldatSreTrap-NSM")
teldatSreTrap_TLNT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 171)).setLabel("teldatSreTrap-TLNT")
teldatSreTrap_L2TP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 172)).setLabel("teldatSreTrap-L2TP")
teldatSreTrap_NSLA = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 173)).setLabel("teldatSreTrap-NSLA")
teldatSreTrap_VOIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 174)).setLabel("teldatSreTrap-VOIP")
teldatSreTrap_TTTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 175)).setLabel("teldatSreTrap-TTTP")
teldatSreTrap_IKE = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 176)).setLabel("teldatSreTrap-IKE")
teldatSreTrap_HSSI = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 177)).setLabel("teldatSreTrap-HSSI")
teldatSreTrap_SCADA = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 178)).setLabel("teldatSreTrap-SCADA")
teldatSreTrap_VRRP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 179)).setLabel("teldatSreTrap-VRRP")
teldatSreTrap_SIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 180)).setLabel("teldatSreTrap-SIP")
teldatSreTrap_IPHC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 181)).setLabel("teldatSreTrap-IPHC")
teldatSreTrap_DHCPC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 182)).setLabel("teldatSreTrap-DHCPC")
teldatSreTrap_CNSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 183)).setLabel("teldatSreTrap-CNSL")
teldatSreTrap_TLPHY = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 184)).setLabel("teldatSreTrap-TLPHY")
teldatSreTrap_NHRP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 185)).setLabel("teldatSreTrap-NHRP")
teldatSreTrap_SNAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 186)).setLabel("teldatSreTrap-SNAT")
teldatSreTrap_STUN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 187)).setLabel("teldatSreTrap-STUN")
teldatSreTrap_WLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 188)).setLabel("teldatSreTrap-WLAN")
teldatSreTrap_SCDFW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 189)).setLabel("teldatSreTrap-SCDFW")
teldatSreTrap_HDLC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 190)).setLabel("teldatSreTrap-HDLC")
teldatSreTrap_EAP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 191)).setLabel("teldatSreTrap-EAP")
teldatSreTrap_EIBZ = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 192)).setLabel("teldatSreTrap-EIBZ")
teldatSreTrap_PHYS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 193)).setLabel("teldatSreTrap-PHYS")
teldatSreTrap_SPOOF = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 194)).setLabel("teldatSreTrap-SPOOF")
teldatSreTrap_IRVOZ = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 195)).setLabel("teldatSreTrap-IRVOZ")
teldatSreTrap_RSTP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 196)).setLabel("teldatSreTrap-RSTP")
teldatSreTrap_TIDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 197)).setLabel("teldatSreTrap-TIDP")
teldatSreTrap_NOE = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 198)).setLabel("teldatSreTrap-NOE")
teldatSreTrap_AFS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 199)).setLabel("teldatSreTrap-AFS")
teldatSreTrap_X28 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 200)).setLabel("teldatSreTrap-X28")
teldatSreTrap_BFD = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 203)).setLabel("teldatSreTrap-BFD")
teldatSreTrap_DNSU = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 204)).setLabel("teldatSreTrap-DNSU")
teldatSreTrap_UDP6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 205)).setLabel("teldatSreTrap-UDP6")
teldatSreTrap_ICM6O = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 206)).setLabel("teldatSreTrap-ICM6O")
teldatSreTrap_CELL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 208)).setLabel("teldatSreTrap-CELL")
teldatSreTrap_SSL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 209)).setLabel("teldatSreTrap-SSL")
teldatSreTrap_SCCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 210)).setLabel("teldatSreTrap-SCCP")
teldatSreTrap_WWAN = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 211)).setLabel("teldatSreTrap-WWAN")
teldatSreTrap_ISTD = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 212)).setLabel("teldatSreTrap-ISTD")
teldatSreTrap_DOT1X = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 213)).setLabel("teldatSreTrap-DOT1X")
teldatSreTrap_EOAM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 214)).setLabel("teldatSreTrap-EOAM")
teldatSreTrap_SSH = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 215)).setLabel("teldatSreTrap-SSH")
teldatSreTrap_CDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 216)).setLabel("teldatSreTrap-CDP")
teldatSreTrap_PIO = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 217)).setLabel("teldatSreTrap-PIO")
teldatSreTrap_FLOW = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 218)).setLabel("teldatSreTrap-FLOW")
teldatSreTrap_RIP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 219)).setLabel("teldatSreTrap-RIP")
teldatSreTrap_MGCP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 220)).setLabel("teldatSreTrap-MGCP")
teldatSreTrap_TIPS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 221)).setLabel("teldatSreTrap-TIPS")
teldatSreTrap_SRVP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 222)).setLabel("teldatSreTrap-SRVP")
teldatSreTrap_SPI = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 223)).setLabel("teldatSreTrap-SPI")
teldatSreTrap_VLI = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 224)).setLabel("teldatSreTrap-VLI")
teldatSreTrap_ACAT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 225)).setLabel("teldatSreTrap-ACAT")
teldatSreTrap_AAA = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 226)).setLabel("teldatSreTrap-AAA")
teldatSreTrap_SDEV = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 227)).setLabel("teldatSreTrap-SDEV")
teldatSreTrap_G104 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 228)).setLabel("teldatSreTrap-G104")
teldatSreTrap_I101 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 229)).setLabel("teldatSreTrap-I101")
teldatSreTrap_IPSF = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 230)).setLabel("teldatSreTrap-IPSF")
teldatSreTrap_DH6C = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 231)).setLabel("teldatSreTrap-DH6C")
teldatSreTrap_NEIG = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 232)).setLabel("teldatSreTrap-NEIG")
teldatSreTrap_ND = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 233)).setLabel("teldatSreTrap-ND")
teldatSreTrap_ICM6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 234)).setLabel("teldatSreTrap-ICM6")
teldatSreTrap_LLDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 235)).setLabel("teldatSreTrap-LLDP")
teldatSreTrap_RIP6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 236)).setLabel("teldatSreTrap-RIP6")
teldatSreTrap_MLD6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 237)).setLabel("teldatSreTrap-MLD6")
teldatSreTrap_PIM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 238)).setLabel("teldatSreTrap-PIM")
teldatSreTrap_MRTE = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 239)).setLabel("teldatSreTrap-MRTE")
teldatSreTrap_ACL = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 240)).setLabel("teldatSreTrap-ACL")
teldatSreTrap_SPF6 = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 241)).setLabel("teldatSreTrap-SPF6")
teldatSreTrap_NIC = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 242)).setLabel("teldatSreTrap-NIC")
teldatSreTrap_MSDP = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 244)).setLabel("teldatSreTrap-MSDP")
teldatSreTrap_ACT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 245)).setLabel("teldatSreTrap-ACT")
teldatSreTrap_TDGS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 255)).setLabel("teldatSreTrap-TDGS")
teldatSreTrap_GPSF = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 256)).setLabel("teldatSreTrap-GPSF")
teldatSreTrap_WNMS = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 257)).setLabel("teldatSreTrap-WNMS")
teldatSreTrap_DH6S = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 259)).setLabel("teldatSreTrap-DH6S")
teldatSreTrap_CFM = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 264)).setLabel("teldatSreTrap-CFM")
teldatSreTrap_PRIME = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 265)).setLabel("teldatSreTrap-PRIME")
teldatSreTrap_SMGT = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 1, 1, 266)).setLabel("teldatSreTrap-SMGT")
telstatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 2))
telAdminStatusSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1))
telAdminStatusSystemCode = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 16, 20, 21, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 97, 98, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 114, 115, 116, 117, 118, 119, 122, 123, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 219, 220, 221, 222, 223, 224, 225, 226, 227, 229))).clone(namedValues=NamedValues(("rexis-mru", 15), ("mbbu", 16), ("bir-u", 20), ("ebano", 21), ("nucleox-plus", 32), ("cbra", 33), ("centrix-b", 34), ("centrix-p", 35), ("temis", 36), ("novacom", 37), ("master-router", 38), ("cbra2x", 39), ("np2xh", 40), ("icu-plus", 41), ("centrix-f", 42), ("cbra-tar", 43), ("aura", 44), ("kronos", 45), ("teldat-C", 46), ("remote-operator", 47), ("visor", 48), ("voxnet", 49), ("dusac32", 50), ("novacom-x25", 51), ("enaplan", 52), ("teldat-C3", 53), ("atlas", 56), ("c2B", 57), ("web-probe", 58), ("c3-1", 59), ("c3B-1", 60), ("c2BM", 61), ("basic-atlas", 62), ("c2i", 63), ("c3i", 64), ("c3B", 65), ("c3G", 66), ("c4", 67), ("c4i", 68), ("c4B", 69), ("centrix-sec", 70), ("centrix-d", 71), ("c2-UP", 72), ("c6", 73), ("centrix-ng", 74), ("atlas-voxnet", 75), ("s2", 76), ("s4", 77), ("s2i", 78), ("s4i", 79), ("g2", 80), ("g3", 81), ("g4", 82), ("g2i", 83), ("g3i", 84), ("g4i", 85), ("c1", 86), ("c1B", 87), ("c1i", 88), ("s1", 89), ("s1i", 90), ("g1", 91), ("g1i", 92), ("g3-lite", 93), ("c3G-lite", 94), ("atlas-100", 96), ("atlas-300V", 97), ("c1G", 98), ("atlas-250", 101), ("c4G", 102), ("atlas-100B", 103), ("atlas-150", 104), ("a2", 105), ("a3", 106), ("a4", 107), ("a2i", 108), ("a3i", 109), ("a4i", 110), ("a1", 111), ("a1i", 112), ("g4-cdma", 114), ("g4i-cdma", 115), ("g3-cdma", 116), ("g3i-cdma", 117), ("g1-cdma", 118), ("g1i-cdma", 119), ("c1plus", 122), ("c1iplus", 123), ("atlas-50", 126), ("g4plus", 127), ("g3plus", 128), ("g1plus", 129), ("g4iplus", 130), ("g3iplus", 131), ("g1iplus", 132), ("atlas-250-web-probe", 133), ("atlas-150-web-probe", 134), ("atlas-50-web-probe", 135), ("vyda-1M", 136), ("vyda-2M", 137), ("vyda-3M", 138), ("atlas-300", 139), ("atlas-152", 140), ("vyda-compact", 141), ("c8plus", 142), ("c8iplus", 143), ("c9plus", 144), ("c9iplus", 145), ("atlas-360", 146), ("c1plus-web-probe", 147), ("c1a", 148), ("s1a", 149), ("g1a", 150), ("g1a-cdma", 151), ("a1a", 152), ("c2a", 155), ("s2a", 156), ("g2a", 157), ("a2a", 158), ("c4a", 159), ("s4a", 160), ("g4a", 161), ("g4a-cdma", 162), ("a4a", 163), ("cirus", 165), ("h1", 166), ("atlas-260", 167), ("atlas-160", 168), ("vyda-4M", 169), ("teldat-t200g", 170), ("teldat-h1-auto", 171), ("teldat-g1n", 172), ("teldat-v1", 173), ("teldat-c1plusl", 174), ("teldat-h4", 175), ("teldat-t200", 176), ("teldat-h1plus", 177), ("regesta-rp81", 178), ("regesta-rp82", 179), ("regesta-1", 180), ("teldat-f1plus", 181), ("teldat-l1plus", 183), ("regesta-rp61er", 184), ("regesta-rp62er", 185), ("teldat-3geplus", 186), ("atlas-60", 187), ("teldat-3geplus-cdma", 188), ("teldat-h1auto-plus", 189), ("teldat-k", 190), ("teldat-v", 191), ("connect-104", 192), ("teldat-h1rail", 193), ("teldat-kf", 194), ("teldat-m1", 199), ("teldat-m1f", 200), ("teldat-4Ge", 201), ("oa5710v", 202), ("oa5720", 203), ("oa5840", 204), ("oa5850", 205), ("oa5725r61er", 206), ("oa5725r62er", 207), ("oa5725a3g", 208), ("oa5725alte", 209), ("esrwwanenabler", 210), ("connect-104v", 211), ("connect-104kf", 212), ("connect-4ge", 213), ("bintecrsc", 214), ("regesta-lite", 215), ("bintecrvc", 216), ("teldat-h2auto", 217), ("teldat-im8", 219), ("teldat-im8plus", 220), ("teldat-h2auto-plus", 221), ("regesta-plc", 222), ("atlasi70", 223), ("atlasi70plus", 224), ("teldat-h2rail-lite", 225), ("teldat-h2rail-lite2", 226), ("teldat-h2rail", 227), ("regesta-compact-plc", 229)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemCode.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemCode.setDescription('Product identifier determined by Teldat identifiers table.')
telAdminStatusSystemSwLicLev = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45))).clone(namedValues=NamedValues(("default", 0), ("teldatC", 1), ("atlas", 2), ("visornet", 3), ("teldatS", 4), ("teldatG", 5), ("atlas2G", 6), ("atlas150", 7), ("teldatA", 8), ("atlas50", 9), ("atlas300", 10), ("atlas152", 11), ("teldatc1plus", 12), ("teldatc8plus", 13), ("teldatc9plus", 14), ("atlas360", 15), ("teldatH1", 16), ("atlas260", 17), ("atlas160", 18), ("teldatt200g", 19), ("teldath1auto", 20), ("teldatg1n", 21), ("teldatc1pluslite", 22), ("teldatv1", 23), ("teldatH4-teldatl1plus", 24), ("teldatt200", 25), ("teldath1plus-teldatf1plus-teldat3Geplus", 26), ("regestaPro-ER", 27), ("atlas60", 28), ("teldath1autoplus", 29), ("teldatv", 30), ("teldatconnect104", 31), ("teldatk", 32), ("teldathrail", 33), ("teldatm1", 34), ("teldat4ge", 35), ("teldatconnect104v", 36), ("teldatconnect104kf", 37), ("teldatconnect4ge", 38), ("teldath2auto", 39), ("teldatim8", 40), ("teldatim8plus", 41), ("atlasi70", 42), ("atlasi70plus", 43), ("teldath2autoplus", 44), ("teldath2rail", 45)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemSwLicLev.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemSwLicLev.setDescription('Main level of software licence. This variable indicates the\n            specific family where the product is included. The value 0 is the\n            default value taken when the real value is not associated to any\n            licence recognized or supported. The possible values for this\n            variable and their meaning are:\n            (1)  Teldat C.\n            (2)  Atlas.\n            (3)  Visornet.\n            (4)  Teldat S.\n            (5)  Teldat G.\n            (6)  Atlas 2G.\n            (7)  Atlas 150.\n            (8)  Teldat A.\n            (9)  Atlas 50.\n            (10) Atlas 300.\n            (11) Atlas 152.\n            (12) Teldat C1+.\n            (13) Teldat C8+.\n            (14) Teldat C9+.\n            (15) Atlas 360.\n            (16) Teldat H.\n            (17) Atlas 260.\n            (18) Atlas 160.\n            (19) Teldat T200G.\n            (20) Teldat H1 Auto.\n            (21) Teldat G1N.\n            (22) Teldat C1+L.\n            (23) Teldat V1.\n            (24) Teldat H4 or L1+.\n            (25) Teldat T200.\n            (26) Teldat H1+, Teldat F1+ or Teldat 3Ge+.\n            (27) RegestaPro-ER.\n            (28) Atlas 60.\n            (29) Teldat H1 Auto.+\n            (30) Teldat V\n            (31) Teldat Connect 104\n            (32) Teldat K\n            (33) Teldat H Rail Family\n            (34) Teldat M1\n            (35) Teldat 4Ge\n            (36) Teldat Connect 104V\n            (37) Teldat Connect 104KF\n            (38) Teldat Connect 4Ge\n            (39) Teldat H2 Auto. \n            (40) Teldat H2 Auto Plus.\n            (41) Teldat H2 Rail.\n\n            If the value of this variable is teldatC (1), atlas (2),\n            visornet (3), teldatS (4), teldatG (5), atlas2g (5), atlas150 (7),\n            teldatA (8) or atlas50 (9) it will be necessary to consider also the\n            value of the next variable to completely determine the type of the\n            accessed product. In any other case, different products can take the\n            same value for this level of software licence and second level of\n            software licence will be always 0, so it will be not possible to\n            distinguish them through their licence.')
telAdminStatusSystemSwLicSub = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemSwLicSub.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemSwLicSub.setDescription('Second level of software licence. This variable is used to know the\n            family funcionality group inside the family indicated with the\n            previous value. The value 0 is the only value taken by this variable\n            in 360-based routers, and also the default value taken when the\n            real value is not associated to any licence recognized or supported.\n            It is necessary to consider also the value of the previous variable\n            to completely determine the type of the product accessed.')
telAdminStatusSystemNumSerie = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemNumSerie.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemNumSerie.setDescription('Series number of the node.')
telAdminStatusSystemPcbType = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemPcbType.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemPcbType.setDescription('Board type.')
telAdminStatusSystemAppVersion = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemAppVersion.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemAppVersion.setDescription('Version of the application running at the moment in the system.')
telAdminStatusSystemBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemBootVersion.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemBootVersion.setDescription('Version of the system eprom software.')
telAdminStatusSystemClock = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusSystemClock.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemClock.setDescription('Node time and date. 8 Bytes EBCDIC show respectively\n            seconds, minutes, padding, day, month, week day (monday, etc)\n            and year.')
telAdminStatusSystemBoardType = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8, 16, 24, 32, 40, 56, 48, 64, 72, 80, 88, 96, 112, 120, 128, 136, 144, 152, 160, 168, 184, 192, 176, 200, 208, 216, 224, 272, 288, 296, 304, 312, 320, 328, 336, 368, 376, 520, 528, 536, 544, 552, 560, 576, 584, 592, 600, 608, 616, 624, 632, 640, 648, 656, 664, 672, 680, 688, 696, 704, 712, 720, 728, 736, 744, 752, 760, 872, 880))).clone(namedValues=NamedValues(("adsl-860", 8), ("visornet-860", 16), ("h1-autoplus", 24), ("adsl-855", 32), ("h1-rail", 40), ("cbra-univ", 56), ("visornet-2C", 48), ("atlas", 64), ("cbra-dual", 72), ("tldt-new-C3", 80), ("univ-tjt", 88), ("tldt-m", 96), ("hermes", 112), ("univ-bas", 120), ("zeus", 128), ("nike", 136), ("minos", 144), ("pnlp", 152), ("hades", 160), ("tldt-m-a", 168), ("univ-tjt-a", 184), ("at-h1", 192), ("tldt-t200", 176), ("h1-auto", 200), ("at-h4", 208), ("tldt-t200-w", 216), ("h1-like-h2-rail", 224), ("ares", 272), ("at-160", 288), ("iropro", 296), ("tldt-k", 304), ("tldt-m1", 312), ("anteth4g", 320), ("tldt-im1", 328), ("tldt-im2", 336), ("tldt-h2-auto-plus", 368), ("tldt-h2-rail", 376), ("c1plusl", 520), ("v1", 528), ("h1plus", 536), ("c1plusl-b", 544), ("c1plusl-ur2", 552), ("c1plusl-annexm", 560), ("rp61er", 576), ("rp62er", 584), ("rp61er-ac", 592), ("rp62er-ac", 600), ("vdsl2", 608), ("rp62er-ur2", 616), ("rp61er-ur2", 624), ("rp62er-ac-ur2", 632), ("rp61er-ac-ur2", 640), ("rp62er-bj", 648), ("rp61er-bj", 656), ("rp62er-ac-bj", 664), ("rp61er-ac-bj", 672), ("rp62er-j", 680), ("rp61er-j", 688), ("rp62er-ac-j", 696), ("rp61er-ac-j", 704), ("rp62er-b", 712), ("rp61er-b", 720), ("rp62er-ac-b", 728), ("rp61er-ac-b", 736), ("rp21er", 744), ("rp22er", 752), ("v1-bj", 760), ("rp-plc", 872), ("rp-cmp-plc", 880)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemBoardType.setDescription('Board type.')
telAdminStatusSystemBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemBoardRevision.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemBoardRevision.setDescription('Board revision.')
telAdminStatusSystemSmartCard = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusSystemSmartCard.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSystemSmartCard.setDescription('This variable indicates whether Smart Card controler is installed.\n            Possible values: no(0), yes(1).')
telAdminStatusLedsTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 2), )
if mibBuilder.loadTexts: telAdminStatusLedsTable.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusLedsTable.setDescription('The table telAdminStatusLedsTable contains information about\n            leds.')
telAdminStatusLedsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 2, 1), ).setIndexNames((0, "TELDAT-MIB", "telAdminStatusLedNum"))
if mibBuilder.loadTexts: telAdminStatusLedsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusLedsEntry.setDescription('Each entry contains the number and state of each led.')
telAdminStatusLedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("led-1", 1), ("led-2", 2), ("led-3", 3), ("led-4", 4), ("led-5", 5), ("led-6", 6), ("led-7", 7), ("led-8", 8), ("led-9", 9), ("led-10", 10), ("led-11", 11), ("led-12", 12), ("led-13", 13), ("led-14", 14), ("led-15", 15), ("led-16", 16), ("led-17", 17), ("led-18", 18), ("led-19", 19), ("led-20", 20), ("led-21", 21), ("led-22", 22), ("led-23", 23), ("led-24", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusLedNum.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusLedNum.setDescription('Led identifier number.')
telAdminStatusLedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("off", 0), ("red", 1), ("green", 2), ("orange", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusLedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusLedStatus.setDescription('Led state.')
telAdminStatusBugsTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 3), )
if mibBuilder.loadTexts: telAdminStatusBugsTable.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusBugsTable.setDescription('The table named telAdminStatusBugsTable gives information about\n            the system bug messages.')
telAdminStatusBugsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 3, 1), ).setIndexNames((0, "TELDAT-MIB", "telAdminStatusBugNum"))
if mibBuilder.loadTexts: telAdminStatusBugsEntry.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusBugsEntry.setDescription('Each entry contains the message number (1 is the last) and the\n            string of the corresponding message.')
telAdminStatusBugNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusBugNum.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusBugNum.setDescription('Bug number.')
telAdminStatusBugMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusBugMsg.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusBugMsg.setDescription('Bug text.')
telAdminStatusBugsClear = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("not-delete-bugs", 0), ("delete-bugs", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusBugsClear.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusBugsClear.setDescription('In a writing operation, 1 resets the number of bugs stored\n            by the system, in a reading operation it is always 0.')
telAdminStatusReload = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("reset", 1), ("already-reset", 2), ("not-reset", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusReload.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusReload.setDescription('In a writing operation 1 resets the system (Reset Hard),\n            In a reading operation, 0 shows unknown output from the last\n            set operation, 2 shows the set operation succeded and 3 shows\n            the last set operation failed.')
telAdminStatusRestart = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("restart", 1), ("restarted", 2), ("not-restarted", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusRestart.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusRestart.setDescription('In a writing operation 1 resets the system (Reset Soft),\n            In a reading operation, 0 shows the unknown output from the last\n            set operation, 2 shows the set operation succeded and 3 shows\n            the last set operation failed.')
telAdminStatusSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("save-configuration", 1), ("saved-configuration", 2), ("not-saved-configuration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusSaveConfig.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSaveConfig.setDescription('In a writing operation 1 saves to RAM the current system\n            configuration. In a reading operation, 0 shows unknown output from\n            the last set operation, 2 shows the set operation succeded\n            and 3 shows the last set operation failed.')
telAdminStatusSram = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8))
telAdminStatusSramRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1), )
if mibBuilder.loadTexts: telAdminStatusSramRecordTable.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusSramRecordTable.setDescription('The table telAdminStatusSramRecordTable contains information about\n            non volatil or SRAM system memory. This memory consists of records\n            that are instances of concrete types and subtypes.')
telAdminStatusSramRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1, 1), ).setIndexNames((0, "TELDAT-MIB", "sramRecordType"), (0, "TELDAT-MIB", "sramRecordSubtype"), (0, "TELDAT-MIB", "sramRecordInstance"))
if mibBuilder.loadTexts: telAdminStatusSramRecordEntry.setStatus('obsolete')
if mibBuilder.loadTexts: telAdminStatusSramRecordEntry.setDescription('Each entry gives information about type, subtype, instance and\n            specific object in SRAM.')
sramRecordType = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sramRecordType.setStatus('obsolete')
if mibBuilder.loadTexts: sramRecordType.setDescription('SRAM register type.')
sramRecordSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sramRecordSubtype.setStatus('obsolete')
if mibBuilder.loadTexts: sramRecordSubtype.setDescription('SRAM register subtype.')
sramRecordInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sramRecordInstance.setStatus('obsolete')
if mibBuilder.loadTexts: sramRecordInstance.setDescription('Instance of the SRAM register.')
sramRecordItem = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 8, 1, 1, 4), Opaque()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sramRecordItem.setStatus('obsolete')
if mibBuilder.loadTexts: sramRecordItem.setDescription('Specific SRAM register. Since registers may have different sizes\n            depending on the data type of the object (type and subtype), the\n            writing operations only must be performed if the data type of each\n            object (type and subtype) is known. In case data types were not\n            similar, the final configuration could result erroneous.')
telAdminStatusSRE = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9))
telAdminStatusSRESubRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1), )
if mibBuilder.loadTexts: telAdminStatusSRESubRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSRESubRecordTable.setDescription('The table telAdminStatusSRESubRecordTable contains information\n            about the event subsystem.')
telAdminStatusSRESubRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1), ).setIndexNames((0, "TELDAT-MIB", "sreSubId"))
if mibBuilder.loadTexts: telAdminStatusSRESubRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSRESubRecordEntry.setDescription('Each entry contains information about identifier, short name,\n            long name, level, event number and if the concrete subsystem\n            is enabled or not for traces, syslog messages and/or SNMP traps.')
sreSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreSubId.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubId.setDescription('Subsystem identifier.')
sreSubShortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreSubShortName.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubShortName.setDescription('Subsystem short name.')
sreSubLongName = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreSubLongName.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubLongName.setDescription('Subsystem long name.')
sreSubNumEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreSubNumEvent.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubNumEvent.setDescription('Number of subsystem defined events.')
sreSubTraceLvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTraceLvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTraceLvlConf.setDescription('This mask defines the way the subsystem is enabled for traces. The\n            masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubSyslogLvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubSyslogLvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubSyslogLvlConf.setDescription('This mask defines the way the subsystem is enabled for syslog\n            messages.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubTrapLvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTrapLvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTrapLvlConf.setDescription('This mask defines the way the subsystem is enabled for SNMP traps.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubTrap1LvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTrap1LvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTrap1LvlConf.setDescription('This mask defines the way the subsystem is enabled for SNMP traps\n            group 1.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubTrap2LvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTrap2LvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTrap2LvlConf.setDescription('This mask defines the way the subsystem is enabled for SNMP traps\n            group 2.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubTrap3LvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTrap3LvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTrap3LvlConf.setDescription('This mask defines the way the subsystem is enabled for SNMP traps\n            group 3.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreSubTrap4LvlConf = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreSubTrap4LvlConf.setStatus('mandatory')
if mibBuilder.loadTexts: sreSubTrap4LvlConf.setDescription('This mask defines the way the subsystem is enabled for SNMP traps\n            group 4.\n            The masks meaning is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
telAdminStatusSREEventRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2), )
if mibBuilder.loadTexts: telAdminStatusSREEventRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSREEventRecordTable.setDescription('The table telAdminStatusSREEventRecordTable contains information\n            about the subsystem events.')
telAdminStatusSREEventRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1), ).setIndexNames((0, "TELDAT-MIB", "sreEvnSubId"), (0, "TELDAT-MIB", "sreEvnEvnId"))
if mibBuilder.loadTexts: telAdminStatusSREEventRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSREEventRecordEntry.setDescription('Each entry contains information about the subsystem identifier,\n            event identifier in the subsystem, mask of the event message,\n            event level, times the event occured, current enable mask and\n            configured enable mask.')
sreEvnSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreEvnSubId.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnSubId.setDescription('Identifier of the subsystem the event belongs to, it is similar\n            to the subsystem identifier that exists in the subsystem table.')
sreEvnEvnId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreEvnEvnId.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnEvnId.setDescription('Event identifier in the subsystem.')
sreEvnMsg = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreEvnMsg.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnMsg.setDescription('Event message mask.')
sreEvnLvl = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreEvnLvl.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnLvl.setDescription('Message level. It is a mask with the following meaning:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreEvnMeter = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreEvnMeter.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnMeter.setDescription('Times the event has ocurred since the last restart/reload.\n            The meaning of the mask is:\n            (UI-ERROR,0x0001); (CI-ERROR,0x0002); (UE-ERROR,0x0004);\n            (CE-ERROR,0x0008); (ERROR,0x000F); (U-INFO,0x0010); (C-INFO,0x0020);\n            (INFO,0x0030); (P-TRACE,0x0100); (U-TRACE,0x0200); (C-TRACE,0x0400)\n            (TRACE,0x0700); (STANDARD,0x001F); (ALWAYS,0x8000); (ALL,0xFFFF)')
sreEvnStatusAct = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreEvnStatusAct.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnStatusAct.setDescription('The mask defines the way the event is enabled at the moment.\n            The meaning of the mask is:\n            (for traces,0x01); (for syslog messages, 0x02);\n            (for SNMP traps, 0x04); (all, 0x07); (for specific traps with\n            correspondence with generic traps, 0x08); (disabled, 0x00)')
sreEvnStatusCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreEvnStatusCon.setStatus('mandatory')
if mibBuilder.loadTexts: sreEvnStatusCon.setDescription('The mask defines the way the event is enabled in configuration at\n            the moment. The meaning of the mask is:\n            (for traces,0x01); (for syslog messages, 0x02);\n            (for SNMP traps, 0x04); (all, 0x07);\n            (disabled, 0x00)')
telAdminStatusSREGroupRecordTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3), )
if mibBuilder.loadTexts: telAdminStatusSREGroupRecordTable.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSREGroupRecordTable.setDescription('The table telAdminStatusSREGroupRecordTable contains information\n            about defined sets of events.')
telAdminStatusSREGroupRecordEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1), ).setIndexNames((0, "TELDAT-MIB", "sreGrpId"))
if mibBuilder.loadTexts: telAdminStatusSREGroupRecordEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSREGroupRecordEntry.setDescription('Each entry contains information about the group identifier,\n            group name, enable mask, and the event and subsystem identifier\n            for each of the 20 possible events of the group.')
sreGrpId = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpId.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpId.setDescription('Group identifier.')
sreGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpName.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpName.setDescription('Group name.')
sreGrpStatusCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sreGrpStatusCon.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpStatusCon.setDescription('The mask defines the way the group is enabled at the moment.\n            The meaning of the mask is:\n            (for traces,0x01); (for syslog messages, 0x02);\n            (for SNMP traps, 0x04); (all, 0x07);\n            (disabled, 0x00)')
sreGrpGrpSub1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub1Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub1Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that apperars in the subsystems table.')
sreGrpGrpEvn1Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn1Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn1Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub2Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub2Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn2Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn2Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn2Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub3Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub3Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub3Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn3Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn3Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn3Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub4Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub4Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub4Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn4Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn4Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn4Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub5Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub5Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub5Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn5Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn5Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn5Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub6Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub6Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub6Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn6Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn6Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn6Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub7Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub7Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub7Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn7Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn7Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn7Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub8Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub8Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub8Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn8Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn8Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn8Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub9Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub9Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub9Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn9Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn9Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn9Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub10Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub10Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub10Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn10Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn10Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn10Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub11Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub11Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub11Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn11Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn11Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn11Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub12Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub12Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub12Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn12Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn12Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn12Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub13Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub13Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub13Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn13Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn13Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn13Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub14Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub14Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub14Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn14Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn14Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn14Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub15Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub15Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub15Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn15Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn15Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn15Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub16Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub16Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub16Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn16Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn16Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn16Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub17Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub17Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub17Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn17Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn17Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn17Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub18Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub18Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub18Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn18Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn18Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn18Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub19Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub19Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub19Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn19Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn19Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn19Id.setDescription('Event identifier in the subsystem.')
sreGrpGrpSub20Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpSub20Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpSub20Id.setDescription('Identifier of the subsystem the event belongs to, similar to the\n            subsystem identifier that appears in the subsystems table.')
sreGrpGrpEvn20Id = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 3, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sreGrpGrpEvn20Id.setStatus('mandatory')
if mibBuilder.loadTexts: sreGrpGrpEvn20Id.setDescription('Event identifier in the subsystem.')
telAdminStatusSREClearConf = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("with-configuration", 0), ("without-configuration", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusSREClearConf.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSREClearConf.setDescription('This variable deletes the events configuration of the router.\n            If a set operation is performed we can select without-configuration\n            (1) to delete the events configuration. The configuration\n            takes effect after reseting the router.')
telAdminStatusIfTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10), )
if mibBuilder.loadTexts: telAdminStatusIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfTable.setDescription('The table telAdminStatusifTable contains specific information about\n            Teldat interfaces.')
telAdminStatusIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10, 1), ).setIndexNames((0, "TELDAT-MIB", "telAdminStatusIfIndex"))
if mibBuilder.loadTexts: telAdminStatusIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfEntry.setDescription('Each entry gives information about the interface type, connector\n            type, and a description of the hardware type for each interface.')
telAdminStatusIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfIndex.setDescription('Interface index.')
telAdminStatusIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 61441, 61442, 61443, 61444, 61445, 61446))).clone(namedValues=NamedValues(("sr-MICRO-NODE-X25-NET", 1), ("sr-PCI-WAN-PQ2-SDLC", 2), ("sr-MICRO-NODE-ISAC-NET", 3), ("sr-MICRO-NODE-XOT-NET", 4), ("sr-MICRO-NODE-270-NET", 5), ("sr-COM4", 6), ("sr-PRO4", 7), ("sr-IBD", 8), ("sr-PCI-AMDETH", 9), ("sr-AMDETH", 10), ("sr-QUIC-SL-X28", 11), ("sr-QUIC-SL-ASTM", 12), ("sr-QUIC-SL-UDAFO", 13), ("sr-FASTETH", 14), ("sr-VCOM4", 15), ("sr-dummy-voip", 16), ("sr-PCI-CELLULAR-VOIP", 17), ("sr-ATC2", 18), ("sr-DIAL-G-HDLC", 19), ("sr-DIAL-G-FR", 20), ("sr-DIAL-G-PPP", 21), ("sr-DIAL-G-X25", 22), ("sr-SRLY-GWSL", 23), ("sr-SRLY-ATC2", 24), ("sr-SRLY-G1SL", 25), ("sr-FRGENSL", 26), ("sr-NSETH", 27), ("sr-TELDAT-BVI-SUBIFC", 28), ("sr-TELDAT-FR-SUBIFC", 29), ("sr-PPPGENSL", 30), ("sr-PPPATC2", 31), ("sr-PPPCOM2", 32), ("sr-QSL", 33), ("sr-PPPQSL", 34), ("sr-FRQSL", 35), ("sr-SRLY-QSL", 36), ("sr-XQSL", 37), ("sr-NULL-DEV", 38), ("sr-YDC-ISDN", 39), ("sr-DIAL-FR", 40), ("sr-DIAL-PPP", 41), ("sr-QUIC-PRI-SIG", 42), ("sr-SDLC-QSL", 43), ("sr-QSLCH", 44), ("sr-SDLC-QSLCH", 45), ("sr-PPP-QSLCH", 46), ("sr-FR-QSLCH", 47), ("sr-XQSLCH", 48), ("sr-SRLY-QSLCH", 49), ("sr-PCI-PRI-ACODES", 50), ("sr-PCI-BRI-ACODES", 51), ("sr-ISDN-VOIP", 52), ("sr-SL-HSSI", 53), ("sr-FR-HSSI", 54), ("sr-PPP-HSSI", 55), ("sr-QUIC-ETH", 56), ("sr-QUIC-TKR", 57), ("sr-QUIC-SL-PSL", 58), ("sr-QUIC-SL-PPP", 59), ("sr-QUIC-SL-X25", 60), ("sr-QUIC-SL-FR", 61), ("sr-QUIC-SL-SRLY", 62), ("sr-QUIC-SL-SDLC", 63), ("sr-QUIC-SL-V25B", 64), ("sr-QUIC-ISDNH", 65), ("sr-TEL-PRU", 66), ("sr-TEL-PRU-FAST", 67), ("sr-TEL-MOTOROLA", 68), ("sr-TELDAT-TKR", 69), ("sr-TELDAT-ETH", 70), ("sr-TELDAT-ISAC", 71), ("sr-TELDAT-XOT", 72), ("sr-TELDAT-270", 73), ("sr-TELDAT-TNIP", 74), ("sr-TELDAT-MPPP", 75), ("sr-FR-ISDN", 76), ("sr-TELDAT-ATM", 77), ("sr-TELDAT-ATM-SUBIFC", 78), ("sr-TELDAT-ASDP", 79), ("sr-QMC-BRI", 80), ("sr-TELDAT-SYNC-SL", 81), ("sr-TELDAT-ASYNC-SL", 82), ("sr-QUIC-SL-APTB", 83), ("sr-TELDAT-ATM-FS", 84), ("sr-TELDAT-LPBK", 85), ("sr-TELDAT-PCI-PRI-M32X", 86), ("sr-TELDAT-DIALROUT", 87), ("sr-PCI-WAN-PQ2-ASYNC", 88), ("sr-DSCC4-ATC2", 89), ("sr-PCI-WAN-PQ2-SYN", 90), ("sr-PCI-AMD-MICREL-ETH", 91), ("sr-MOT-MICREL-ETH", 92), ("sr-ALARM-RELY", 93), ("sr-PCI-MEMORY-CARD", 94), ("sr-TELDAT-ETH-SUBIFC", 95), ("sr-PCI-POTS-VOIP-CARD", 96), ("sr-PCI-BRI-VOIP-CARD", 97), ("sr-PCI-PRI-VOIP-CARD", 98), ("sr-PCI-E-M-VOIP-CARD", 99), ("sr-TELDAT-LOOPBACK", 100), ("sr-TELDAT-L2TP", 101), ("sr-FCC-ETH", 102), ("sr-PCMCIA-SERIAL", 103), ("sr-DSCC4-HSSI", 104), ("sr-TELDAT-BVI", 105), ("sr-QUIC-SL-SCADA", 106), ("sr-TELDAT-ATM-PQ2SAR", 107), ("sr-PCI-QMC-BRI", 108), ("sr-PCI-POTS-3S10VOIP-CARD", 109), ("sr-PCI-POTS-2S2OVOIP-CARD", 110), ("sr-PCI-INTEL-GIGABIT-ETH", 111), ("sr-ATHEROS-WLAN-BASE", 112), ("sr-FCC-MARVELL", 113), ("sr-TELDAT-SEPI", 114), ("sr-FCC-MICREL", 115), ("sr-ETSEC-ETH", 116), ("sr-EIB-ZENNIO", 117), ("sr-GPIO-12", 118), ("sr-QUIC-AUTO-INST-SL", 119), ("sr-PCI-PRI-PQ2", 120), ("sr-ETSEC-MARVELL-ETH", 121), ("sr-QUIC-SL-MODEMEMU", 122), ("sr-PCI-VALARM-SL-MDMEMU", 123), ("sr-PCI-VALARM-SL-SEPI", 124), ("sr-PCI-CELLULAR", 125), ("sr-REMOTE-CELLULAR", 126), ("sr-PCI-WAN-PQ2-SCADA", 127), ("sr-TELDAT-ETH-SOFTETH", 128), ("sr-TELDAT-ATM-SOFTSAR", 129), ("sr-PCI-PQII-FCC-MARVELL-ETH", 130), ("sr-TELDAT-ETH-SOFTPTM", 131), ("sr-TELDAT-SERIAL-SOFTUSB", 132), ("sr-PCI-PQII-WDMPON", 133), ("sr-TELDAT-SOFTWLAN-BASE", 134), ("sr-PCI-WAN-PQ2-ASTM", 135), ("sr-PCI-WAN-PQ2-X28", 136), ("sr-PCI-WAN-PQ2-ASDP", 137), ("sr-TELDAT-SOFTNIC", 138), ("sr-DIAL-G-DIP", 139), ("sr-TELDAT-USBNIC", 140), ("sr-ATHEROS-WLAN-VAP", 141), ("sr-TELDAT-SOFTWAN", 142), ("sr-TELDAT-SWETH", 143), ("sr-QUIC-SL-IEC101GW", 144), ("sr-PCI-WAN-PQ2-IEC101GW", 145), ("sr-TELDAT-SOFTUART", 146), ("sr-TELDAT-SOFTSCADA", 147), ("sr-TELDAT-SOFTIEC101GW", 148), ("sr-TELDAT-SOFTASDP", 149), ("sr-STANDALONE-GPS", 150), ("sr-SL-GPSDATA", 151), ("sr-SOFTWLAN-VAP", 152), ("sr-FSL-CELLULAR", 153), ("sr-SOFTETH-SWITCH", 154), ("sr-TELDAT-USBETH", 155), ("sr-TELDAT-SOFTUSBETH", 156), ("sr-TELDAT-ETH-FMAN", 157), ("sr-TELDAT-ETH-FMAN-SWITCH", 158), ("sr-TELDAT-SOFTPRIME", 159), ("sr-FSL-GPSUSB", 160), ("sr-TELDAT-ETH-FMAN-MII", 161), ("sr-XHCI-CELLULAR", 162), ("sr-MICRO-NODE-ROUTER", 61441), ("sr-MICRO-NODE-RDSI-B", 61442), ("sr-MICRO-NODE-ISAC", 61443), ("sr-MICRO-NODE-X25", 61444), ("sr-MICRO-NODE-XOT", 61445), ("sr-MICRO-NODE-270", 61446)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusIfType.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfType.setDescription('Teldat Specific Interface Type.')
telAdminStatusIfCon = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("no-conn", 0), ("lan-conn", 1), ("wan1-conn", 2), ("wan2-conn", 3), ("wan3-conn", 4), ("wan4-conn", 5), ("wan5-conn", 6), ("wan6-conn", 7), ("wan7-conn", 8), ("wan8-conn", 9), ("rdsi1-conn", 10), ("rdsi2-conn", 11), ("adsl1-conn", 12), ("adsl2-conn", 13), ("adsl3-conn", 14), ("adsl4-conn", 15), ("lan-conn-exp", 16), ("uart1-conn", 17), ("uart2-conn", 18), ("uart3-conn", 19), ("uart4-conn", 20), ("rs232-conn", 21), ("rs485-conn", 22), ("slot1-conn", 23), ("slot2-conn", 24), ("slot3-conn", 25), ("rf-conn", 26), ("lan1-conn", 27), ("lan2-conn", 28), ("lan3-conn", 29), ("lan4-conn", 30), ("pots-conn", 31), ("slot4-conn", 32), ("slot5-conn", 33), ("exp-switch1", 34), ("usb-conn", 35), ("ethwan-conn", 36), ("config-conn", 37), ("lan1-switch-conn", 38), ("irp-slot3-conn", 39), ("usb-uart-conn-1", 40), ("usb-uart-conn-2", 41), ("gps-conn", 42), ("rf-conn-1", 43), ("rf-conn-2", 44), ("usb-conn-1", 45), ("usb-conn-2", 46), ("irp-slot2-conn", 47), ("wifi1-conn", 48), ("wifi2-conn", 49), ("im-slot1-conn", 50), ("im-slot2-conn", 51), ("prime-pw-conn", 52), ("slot1-switch-0-conn", 53), ("slot1-switch-1-conn", 54)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusIfCon.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfCon.setDescription('Connector related to the interface.')
telAdminStatusIfHdw = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 1, 2, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusIfHdw.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusIfHdw.setDescription('Description of the hardware related to the interface.')
telAdminStatusEthTime = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminStatusEthTime.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusEthTime.setDescription('Date and time Ethernet statistics were updated for last time.')
telAdminConfActDev = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smartcard-flash", 1), ("smartcard", 2), ("flash", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminConfActDev.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminConfActDev.setDescription('Active Device. Device used to read and write configuration files.')
telAdminConfConfSavedDev = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("smartcard", 1), ("flash", 2), ("smartcard-flash", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telAdminConfConfSavedDev.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminConfConfSavedDev.setDescription('Device where the last configuration has been saved.')
telAdminStatusConfirmConfig = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("confirmed", 0), ("test-cnfg-inactive", 1), ("test-cnfg-active", 2), ("configuration-recovered", 3), ("undefined", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusConfirmConfig.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusConfirmConfig.setDescription('In a writing operation 1 confirms the current configuration.\n            In a writing operation 0 rejects the current test configuration\n            restarting the device with the previous configuration.\n            In a reading operation, 0 shows that the current configuration has\n            been confirmed, 1 shows that the current configuration has not been\n            confirmed yet (therefore it is a testing configuration) and it is\n            active the old ones, 2 shows that the current configuration\n            has not been confirmed yet (therefore it is a testing configuration)\n            and it is active the new ones, 3 shows that the old configuration\n            has been recovered and it is confirmed and active, 4 shows unknown\n            state')
telAdminStatusConfirmEnabled = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusConfirmEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusConfirmEnabled.setDescription('In a writing operation 1 enables the need to confirm the\n            saved configuration. In a writing operation 0 disables the\n            need to confirm the newly saved configurations.\n            In a reading operation, 0 shows that the need to confirm the saved\n            configurations is disabled. In a reading operation, 1 shows that\n            the need to confirm the saved configurations is enabled.')
telAdminStatusTimeoutConfirm = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 3024000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusTimeoutConfirm.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusTimeoutConfirm.setDescription('In a writing operation values between 60 to 3024000 configures\n            the new configuration test time which the device will wait before\n            restarting the previous configuration if confirmation is not carried out.\n            The minimum is one minute and the maximum is 5 weeks.\n            In a reading operation, values between 60 to 3024000 shows the test\n            time which the device will wait before restarting the previous\n            configuration if confirmation is not carried out.')
telAdminStatusSaveRunningConfig = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", 0), ("save-configuration", 1), ("saved-configuration", 2), ("not-saved-configuration", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telAdminStatusSaveRunningConfig.setStatus('mandatory')
if mibBuilder.loadTexts: telAdminStatusSaveRunningConfig.setDescription('In a writing operation 1 saves to flash the current running\n            configuration. In a reading operation, 0 shows unknown output from\n            the last set operation, 2 shows the set operation succeeded\n            and 3 shows the last set operation failed.')
telMciTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 3))
telTrapVarIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarIPAddr.setDescription('IP address of the circuit.')
telTrapVarVelCir = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarVelCir.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarVelCir.setDescription('Speed of the circuit.')
telTrapVarVelBckp = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarVelBckp.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarVelBckp.setDescription('Speed of the backup line.')
telTrapVarPrioBackp = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarPrioBackp.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarPrioBackp.setDescription('Backup priority.')
telTrapVarTipoBackp = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarTipoBackp.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarTipoBackp.setDescription('Backup type.')
telTrapVarTipoEquip = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarTipoEquip.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarTipoEquip.setDescription('Device model.')
telTrapVarCustomerName = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarCustomerName.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarCustomerName.setDescription('Customer Name.')
telTrapVarRouterName = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarRouterName.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarRouterName.setDescription('Router name. Format: ShortCustomerName+LocationName+ESP+aXXX.')
telTrapVarRouterPort = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarRouterPort.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarRouterPort.setDescription('Port or the router.')
telTrapVarCircuitID = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarCircuitID.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarCircuitID.setDescription('Circuit identifier.')
telTrapVarSequenceNum = MibScalar((1, 3, 6, 1, 4, 1, 2007, 1, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telTrapVarSequenceNum.setStatus('mandatory')
if mibBuilder.loadTexts: telTrapVarSequenceNum.setDescription('Number of the sequence.')
telTECircuitTrapUp = NotificationType((1, 3, 6, 1, 4, 1, 2007, 1, 3) + (0,1)).setObjects(("TELDAT-MIB", "telTrapVarIPAddr"), ("TELDAT-MIB", "telTrapVarVelCir"), ("TELDAT-MIB", "telTrapVarVelBckp"), ("TELDAT-MIB", "telTrapVarPrioBackp"), ("TELDAT-MIB", "telTrapVarTipoBackp"), ("TELDAT-MIB", "telTrapVarTipoEquip"), ("TELDAT-MIB", "telTrapVarCustomerName"), ("TELDAT-MIB", "telTrapVarRouterName"), ("TELDAT-MIB", "telTrapVarRouterPort"), ("TELDAT-MIB", "telTrapVarCircuitID"), ("TELDAT-MIB", "telTrapVarSequenceNum"))
if mibBuilder.loadTexts: telTECircuitTrapUp.setDescription('The TE-Circuit is UP.')
telTECircuitTrapBackup = NotificationType((1, 3, 6, 1, 4, 1, 2007, 1, 3) + (0,2)).setObjects(("TELDAT-MIB", "telTrapVarIPAddr"), ("TELDAT-MIB", "telTrapVarVelCir"), ("TELDAT-MIB", "telTrapVarVelBckp"), ("TELDAT-MIB", "telTrapVarPrioBackp"), ("TELDAT-MIB", "telTrapVarTipoBackp"), ("TELDAT-MIB", "telTrapVarTipoEquip"), ("TELDAT-MIB", "telTrapVarCustomerName"), ("TELDAT-MIB", "telTrapVarRouterName"), ("TELDAT-MIB", "telTrapVarRouterPort"), ("TELDAT-MIB", "telTrapVarCircuitID"), ("TELDAT-MIB", "telTrapVarSequenceNum"))
if mibBuilder.loadTexts: telTECircuitTrapBackup.setDescription('The TE-Circuit is BACKUP.')
telTECircuitTrapDown = NotificationType((1, 3, 6, 1, 4, 1, 2007, 1, 3) + (0,3)).setObjects(("TELDAT-MIB", "telTrapVarIPAddr"), ("TELDAT-MIB", "telTrapVarVelCir"), ("TELDAT-MIB", "telTrapVarVelBckp"), ("TELDAT-MIB", "telTrapVarPrioBackp"), ("TELDAT-MIB", "telTrapVarTipoBackp"), ("TELDAT-MIB", "telTrapVarTipoEquip"), ("TELDAT-MIB", "telTrapVarCustomerName"), ("TELDAT-MIB", "telTrapVarRouterName"), ("TELDAT-MIB", "telTrapVarRouterPort"), ("TELDAT-MIB", "telTrapVarCircuitID"), ("TELDAT-MIB", "telTrapVarSequenceNum"))
if mibBuilder.loadTexts: telTECircuitTrapDown.setDescription('The TE-Circuit is DOWN.')
telproip = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 3, 2))
teldefgw = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 3, 2, 1))
telProtoIpDefGwAddress = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProtoIpDefGwAddress.setStatus('optional')
if mibBuilder.loadTexts: telProtoIpDefGwAddress.setDescription('IP address of the default router of the system.')
telProtoIpDefGwCost = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProtoIpDefGwCost.setStatus('optional')
if mibBuilder.loadTexts: telProtoIpDefGwCost.setDescription('Cost of the default router of the system.')
telProtoIpDefGwAge = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telProtoIpDefGwAge.setStatus('optional')
if mibBuilder.loadTexts: telProtoIpDefGwAge.setDescription('Age of the default router of the system.')
telprofr = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 3, 3))
telfrLmiTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1), )
if mibBuilder.loadTexts: telfrLmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiTable.setDescription('The table telfrLmiTable contains LMI information about each\n            frame-relay interface of the system.')
telfrLmiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1), ).setIndexNames((0, "TELDAT-MIB", "telfrLmiifIndex"))
if mibBuilder.loadTexts: telfrLmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiEntry.setDescription('Each entry contains LMI information of the interface.')
telfrLmiifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telfrLmiifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiifIndex.setDescription('Frame-relay interface (ifIndex).')
telfrLmiBroadcas = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiBroadcas.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiBroadcas.setDescription('It points out if there is a broadcast service in the interface.')
telfrLmiMonitConges = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiMonitConges.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiMonitConges.setDescription('It points out if the interface performs congestion monitoring.')
telfrLmiMonitCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiMonitCIR.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiMonitCIR.setDescription('It points out if the interface performs CIR monitoring.')
telfrLmiOrphans = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiOrphans.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiOrphans.setDescription('It points out if orphan circuits exit.')
telfrLmiIRIncrement = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiIRIncrement.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiIRIncrement.setDescription('Percentage of IR increase.')
telfrLmiIRDecrement = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiIRDecrement.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiIRDecrement.setDescription('Percentage of IR decrease.')
telfrLmiMIRCIR = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrLmiMIRCIR.setStatus('mandatory')
if mibBuilder.loadTexts: telfrLmiMIRCIR.setDescription('MIR as CIR percentage.')
telfrCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2), )
if mibBuilder.loadTexts: telfrCircuitTable.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitTable.setDescription('The table telfrCircuitTable contains information about every\n            configured PVC circuit in the different frame-relay interfaces\n            of the system. This information does no appear in the frCircuitTable\n            table.')
telfrCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1), ).setIndexNames((0, "TELDAT-MIB", "telfrCircuitifIndex"), (0, "TELDAT-MIB", "telfrCircuitDlci"))
if mibBuilder.loadTexts: telfrCircuitEntry.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitEntry.setDescription('Each entry contains information about every PVC of the interface.')
telfrCircuitifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telfrCircuitifIndex.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitifIndex.setDescription('Frame-relay interface (ifIndex).')
telfrCircuitDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telfrCircuitDlci.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitDlci.setDescription('DLCI number of the PVC.')
telfrCircuitCifrar = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrCircuitCifrar.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitCifrar.setDescription('Coding or not data.')
telfrCircuitBack_Up_FR = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setLabel("telfrCircuitBack-Up-FR").setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrCircuitBack_Up_FR.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitBack_Up_FR.setDescription('Back Up circuit through frame-relay.')
telfrCircuitBack_Up_RDSI = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007))).setLabel("telfrCircuitBack-Up-RDSI").setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrCircuitBack_Up_RDSI.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitBack_Up_RDSI.setDescription('Back Up circuit through RDSI.')
telfrCircuitBack_Up_RDSI_siempre = MibScalar((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setLabel("telfrCircuitBack-Up-RDSI-siempre").setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrCircuitBack_Up_RDSI_siempre.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitBack_Up_RDSI_siempre.setDescription('Back Up to RDSI when this is possible through FR, regardless of the\n            reasons.')
telfrCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 3, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telfrCircuitName.setStatus('mandatory')
if mibBuilder.loadTexts: telfrCircuitName.setDescription('Circuit name assigned.')
telproisdn = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 3, 4))
telproisdncallTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1), )
if mibBuilder.loadTexts: telproisdncallTable.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallTable.setDescription('The table telproisdncallTable contains information about the rdsi\n            active calls of the system.')
telproisdncallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1), ).setIndexNames((0, "TELDAT-MIB", "telproisdncallid"))
if mibBuilder.loadTexts: telproisdncallEntry.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallEntry.setDescription('Each entry contains information about a rdsi line.')
telproisdncallstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("inactive", 0), ("active", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallstatus.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallstatus.setDescription('Call state. It shows if there is really an active call\n            in this line.')
telproisdncalltype = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("incoming", 0), ("outgoing", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncalltype.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncalltype.setDescription('Call type.')
telproisdncallref = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallref.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallref.setDescription('Call reference.')
telproisdncallchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallchannel.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallchannel.setDescription('Channel B used to perform the call.')
telproisdncallid = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallid.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallid.setDescription('RDSI line used to perform the call.')
telproisdncallcallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallcallednum.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallcallednum.setDescription('Called number.')
telproisdncallcallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallcallingnum.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallcallingnum.setDescription('Calling number.')
telproisdncallchargedunits = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallchargedunits.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallchargedunits.setDescription('Cost of the call.')
telproisdncallinittime = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallinittime.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallinittime.setDescription('Byte string that shows hours, minutes and seconds since\n            the call was initiated.')
telproisdncallinitdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 1, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallinitdate.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallinitdate.setDescription('Byte string that shows the date the call was initiated.')
telproisdncallhistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2), )
if mibBuilder.loadTexts: telproisdncallhistoryTable.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryTable.setDescription('The table telproisdncallhistoryTable contains information about\n            the rdsi calls released of the system.')
telproisdncallhistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1), ).setIndexNames((0, "TELDAT-MIB", "telproisdncallhistoryindex"))
if mibBuilder.loadTexts: telproisdncallhistoryEntry.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryEntry.setDescription('Each entry contains information about a released rdsi call.')
telproisdncallhistoryindex = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryindex.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryindex.setDescription('The index identifies each table entry. The smallest indexes fit\n            the calls released more time ago.')
telproisdncallhistorytype = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("incoming", 0), ("outgoing", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorytype.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorytype.setDescription('Call type.')
telproisdncallhistoryref = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryref.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryref.setDescription('Call reference.')
telproisdncallhistorychannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorychannel.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorychannel.setDescription('Channel B used to perform the call.')
telproisdncallhistoryid = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryid.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryid.setDescription('RDSI line used to perform the call.')
telproisdncallhistorycallednum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorycallednum.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorycallednum.setDescription('Called number.')
telproisdncallhistorycallingnum = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorycallingnum.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorycallingnum.setDescription('Calling number.')
telproisdncallhistorychargedunits = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorychargedunits.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorychargedunits.setDescription('Cost of the call.')
telproisdncallhistorycause = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 6, 16, 17, 18, 19, 21, 22, 27, 28, 31, 34, 38, 41, 42, 44, 47, 49, 57, 58, 63, 65, 66, 79, 81, 82, 88, 95, 96, 97, 98, 99, 100, 101, 102, 111, 127))).clone(namedValues=NamedValues(("non-attributed-number", 1), ("no-route-to-destination", 3), ("unacceptable-channel", 6), ("normal-call-release", 16), ("user-busy", 17), ("user-do-not-answer", 18), ("notified-user-no-answer-from-user", 19), ("rejected-call", 21), ("changed-number", 22), ("destination-out-of-service", 27), ("non-valid-number-format", 28), ("normal", 31), ("no-circuit-or-available-channel", 34), ("network-out-of-service", 38), ("temporal-failure", 41), ("congestion-in-switching-node", 42), ("demanded-circuit-or-non-available-channel", 44), ("non-available-resources", 47), ("non-available-quality-of-service", 49), ("not-authorized-carrier-capacity", 57), ("not-authorized-carrier-capacity-at-the-moment", 58), ("service-class-or-non-available-option", 63), ("not-performed-carrier-capacity", 65), ("not-performed-channel-type", 66), ("not-performed-option-or-service", 79), ("non-valid-call-reference-value", 81), ("non-existent-identified-channel", 82), ("incompatible-destination", 88), ("non-valid-message", 95), ("mandatory-information-element-absent", 96), ("message-type-non-existent-or-non-performed", 97), ("message-non-existent-or-non-performed", 98), ("information-element-non-existent-or-non-performed", 99), ("information-element-content-non-valid", 100), ("incompatible-message-with-call-status", 101), ("recovering-at-timer-expiration", 102), ("protocol-error", 111), ("interworking", 127)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorycause.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorycause.setDescription('Release reasons.')
telproisdncallhistorydiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistorydiagnostic.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistorydiagnostic.setDescription('Release diagnostic.')
telproisdncallhistoryinittime = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryinittime.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryinittime.setDescription('String of bytes that shows the hours, minutes and seconds since\n            the call was initiated.')
telproisdncallhistoryendtime = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryendtime.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryendtime.setDescription('String of bytes that shows the hours, minutes and seconds since\n            the call was finished.')
telproisdncallhistoryinitdate = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 13), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryinitdate.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryinitdate.setDescription('Byte string that shows the date the call was initiated.')
telproisdncallhistoryenddate = MibTableColumn((1, 3, 6, 1, 4, 1, 2007, 3, 4, 2, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: telproisdncallhistoryenddate.setStatus('obsolete')
if mibBuilder.loadTexts: telproisdncallhistoryenddate.setDescription('Byte string that shows the date the call was finished.')
telSistemaEventos = NotificationType((1, 3, 6, 1, 4, 1, 2007) + (0,1)).setObjects(("TELDAT-MIB", "sreTrapSubSist"), ("TELDAT-MIB", "sreTrapEvento"), ("TELDAT-MIB", "sreTrapVar1"), ("TELDAT-MIB", "sreTrapVar2"), ("TELDAT-MIB", "sreTrapVar3"), ("TELDAT-MIB", "sreTrapVar4"), ("TELDAT-MIB", "sreTrapVar5"), ("TELDAT-MIB", "sreTrapVar6"), ("TELDAT-MIB", "sreTrapVar7"), ("TELDAT-MIB", "sreTrapVar8"), ("TELDAT-MIB", "sreTrapVar9"))
if mibBuilder.loadTexts: telSistemaEventos.setDescription('This trap shows the event happened in the system. In order to\n             identify the event, the trap has the mask of the event and\n             its parameters, moreover, the subsystem and the event number\n             in the subsystem. Furthermore it has the sequence number of\n             the traps of the same type.')
telEventTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2007, 1, 4))
mibBuilder.exportSymbols("TELDAT-MIB", equipo_Atlas_i70_Plus=equipo_Atlas_i70_Plus, teldatSreTrap_RIP=teldatSreTrap_RIP, equipo_s2a=equipo_s2a, sreGrpId=sreGrpId, telAdminStatusSystemBoardType=telAdminStatusSystemBoardType, telTrapVarPrioBackp=telTrapVarPrioBackp, equipo_g2a=equipo_g2a, teldatSreTrap_VRRP=teldatSreTrap_VRRP, equipo_C3G_lite=equipo_C3G_lite, telTrapVarCustomerName=telTrapVarCustomerName, teldatSreTrap_ATM=teldatSreTrap_ATM, equipo_atlas_standard=equipo_atlas_standard, sreGrpGrpEvn9Id=sreGrpGrpEvn9Id, equipo_teldat_C2_UP=equipo_teldat_C2_UP, equipo_a3=equipo_a3, sreGrpName=sreGrpName, telfrLmiIRDecrement=telfrLmiIRDecrement, teldatSreTrap_BR=teldatSreTrap_BR, teldatSreTrap_UDP6=teldatSreTrap_UDP6, equipo_cbra_tar=equipo_cbra_tar, sreSubLongName=sreSubLongName, equipo_g1i_cdma=equipo_g1i_cdma, equipo_s4a=equipo_s4a, teldatSreTrap_IP6=teldatSreTrap_IP6, sreGrpGrpSub16Id=sreGrpGrpSub16Id, teldatSreTrap_VLI=teldatSreTrap_VLI, equipo_g3plus=equipo_g3plus, equipo_g3i=equipo_g3i, telAdminStatusSystemAppVersion=telAdminStatusSystemAppVersion, telfrCircuitBack_Up_RDSI=telfrCircuitBack_Up_RDSI, teldatSreTrap_PIM=teldatSreTrap_PIM, equipo_l1plus=equipo_l1plus, equipo_bir_u=equipo_bir_u, teldatSreTrap_TDGS=teldatSreTrap_TDGS, router_oa5840=router_oa5840, equipo_c1plusl=equipo_c1plusl, equipo_s1i=equipo_s1i, equipo_3geplus=equipo_3geplus, teldatSreTrap_SCADA=teldatSreTrap_SCADA, teldatSreTrap_LLDP=teldatSreTrap_LLDP, equipo_c1i=equipo_c1i, sreGrpGrpSub12Id=sreGrpGrpSub12Id, equipo_novacom=equipo_novacom, sreSubSyslogLvlConf=sreSubSyslogLvlConf, telproisdncallhistorychannel=telproisdncallhistorychannel, teldatSreTrap_DHCP=teldatSreTrap_DHCP, teldatSreTrap_TKR=teldatSreTrap_TKR, teldatSreTrap_FLT=teldatSreTrap_FLT, equipo_teldat_C4i=equipo_teldat_C4i, teldatSreTrap_SNAT=teldatSreTrap_SNAT, teldatSreTrap_ORIP=teldatSreTrap_ORIP, telproisdncallhistorychargedunits=telproisdncallhistorychargedunits, equipo_atlas_300V=equipo_atlas_300V, teldatSreTrap_UDP=teldatSreTrap_UDP, teldatSreTrap_PRI=teldatSreTrap_PRI, teldatSreTrap_FLOW=teldatSreTrap_FLOW, teldatSreTrap_RIP6=teldatSreTrap_RIP6, sreSubId=sreSubId, telproisdncallhistoryenddate=telproisdncallhistoryenddate, telAdminStatusLedsEntry=telAdminStatusLedsEntry, sreGrpGrpEvn14Id=sreGrpGrpEvn14Id, telAdminStatusSRESubRecordEntry=telAdminStatusSRESubRecordEntry, sreEvnSubId=sreEvnSubId, equipo_regesta_rp81=equipo_regesta_rp81, telAdminStatusBugNum=telAdminStatusBugNum, sreGrpGrpSub20Id=sreGrpGrpSub20Id, telProtoIpDefGwAddress=telProtoIpDefGwAddress, teldatSreTrap_LAPD=teldatSreTrap_LAPD, telfrLmiMonitConges=telfrLmiMonitConges, teldatSreTrap_DEP=teldatSreTrap_DEP, equipo_connect_104_kf=equipo_connect_104_kf, teldatSreTrap_FTP=teldatSreTrap_FTP, telobjid=telobjid, teldatSreTrap_DLS=teldatSreTrap_DLS, teldatSreTrap_IP=teldatSreTrap_IP, equipo_a2i=equipo_a2i, telAdminStatusSystemSwLicSub=telAdminStatusSystemSwLicSub, sreGrpGrpEvn19Id=sreGrpGrpEvn19Id, equipo_icu_plus=equipo_icu_plus, sreGrpGrpEvn3Id=sreGrpGrpEvn3Id, teldatSreTrap_IPX=teldatSreTrap_IPX, equipo_regesta_rp62er=equipo_regesta_rp62er, equipo_c4a=equipo_c4a, teldatSreTrap_LDAP=teldatSreTrap_LDAP, equipo_h1=equipo_h1, equipo_4Ge=equipo_4Ge, equipo_connect_4ge=equipo_connect_4ge, equipo_teldat_C2B=equipo_teldat_C2B, equipo_c2a=equipo_c2a, teldatSreTrap_SYNC=teldatSreTrap_SYNC, sreGrpGrpEvn20Id=sreGrpGrpEvn20Id, teldatSreTrap_AFS=teldatSreTrap_AFS, teldatSreTrap_P3OE=teldatSreTrap_P3OE, sreGrpGrpEvn12Id=sreGrpGrpEvn12Id, telAdminStatusSram=telAdminStatusSram, teldatSreTrap_X28=teldatSreTrap_X28, telAdminStatusIfType=telAdminStatusIfType, telAdminStatusBugMsg=telAdminStatusBugMsg, equipo_centrix_d=equipo_centrix_d, teldatSreTrap_NOE=teldatSreTrap_NOE, equipo_regesta_lite=equipo_regesta_lite, sreTrapVar2=sreTrapVar2, equipo_g1n=equipo_g1n, teldatSreTrap_VOIP=teldatSreTrap_VOIP, telproisdncallinitdate=telproisdncallinitdate, equipo_atlas_250SW=equipo_atlas_250SW, equipo_ebano=equipo_ebano, sreGrpGrpEvn8Id=sreGrpGrpEvn8Id, router_oa5725a3g=router_oa5725a3g, telAdminStatusSREEventRecordEntry=telAdminStatusSREEventRecordEntry, teldatSreTrap_IRVOZ=teldatSreTrap_IRVOZ, telproisdncallcallednum=telproisdncallcallednum, teldatSreTrap_IPSEC=teldatSreTrap_IPSEC, telAdminStatusEthTime=telAdminStatusEthTime, teldatSreTrap_BRS=teldatSreTrap_BRS, telprofr=telprofr, teldatSreTrap_BGP=teldatSreTrap_BGP, telproisdncallhistoryinittime=telproisdncallhistoryinittime, equipo_a4=equipo_a4, equipo_cirus=equipo_cirus, teldatSreTrap_SPF=teldatSreTrap_SPF, equipo_g3_lite=equipo_g3_lite, equipo_vyda_4M=equipo_vyda_4M, equipo_teldat_C3B_1=equipo_teldat_C3B_1, telproisdncallEntry=telproisdncallEntry, teldatSreTrap_SNMP=teldatSreTrap_SNMP, teldatSreTrap_POLR=teldatSreTrap_POLR, telAdminStatusConfirmConfig=telAdminStatusConfirmConfig, equipo_s2=equipo_s2, sreGrpGrpEvn5Id=sreGrpGrpEvn5Id, teldatSreTrap_NTP=teldatSreTrap_NTP, telfrLmiMIRCIR=telfrLmiMIRCIR, telAdminStatusIfEntry=telAdminStatusIfEntry, telproisdncallinittime=telproisdncallinittime, teldatSreTrap_IPPN=teldatSreTrap_IPPN, equipo_g2i=equipo_g2i, equipo_centrix_p=equipo_centrix_p, teldatSreTrap_STUN=teldatSreTrap_STUN, sreGrpGrpEvn16Id=sreGrpGrpEvn16Id, teldatSreTrap_WLAN=teldatSreTrap_WLAN, telAdminStatusSystemNumSerie=telAdminStatusSystemNumSerie, teldatSreTrap_DH6S=teldatSreTrap_DH6S, equipo_teldat_C3_1=equipo_teldat_C3_1, teldatSreTrap_VID=teldatSreTrap_VID, equipo_atlas_260=equipo_atlas_260, teldatSreTrap_ETH=teldatSreTrap_ETH, telproisdncallhistoryid=telproisdncallhistoryid, teldatSreTrap_NHRP=teldatSreTrap_NHRP, teldatSreTrap_FR=teldatSreTrap_FR, equipo_s1=equipo_s1, sreTrapVar8=sreTrapVar8, sreGrpGrpEvn18Id=sreGrpGrpEvn18Id, equipo_f1plus=equipo_f1plus, telAdminStatusSRE=telAdminStatusSRE, equipo_h2rail=equipo_h2rail, teldatSreTrap_TLPHY=teldatSreTrap_TLPHY, sreSubTrap3LvlConf=sreSubTrap3LvlConf, teldatSreTrap_SDLC=teldatSreTrap_SDLC, teldatSreTrap_ICM6=teldatSreTrap_ICM6, equipo_connect_104_v=equipo_connect_104_v, teldatSreTrap_MRTE=teldatSreTrap_MRTE, equipo_teldat_C2=equipo_teldat_C2, teldatSreTrap_EIBZ=teldatSreTrap_EIBZ, equipo_c4G=equipo_c4G, teldatSreTrap_EOAM=teldatSreTrap_EOAM, equipo_vyda_2M=equipo_vyda_2M, equipo_aura=equipo_aura, sreGrpGrpEvn17Id=sreGrpGrpEvn17Id, teldatSreTrap_G703=teldatSreTrap_G703, equipo_bintecrsc=equipo_bintecrsc, telAdminConfActDev=telAdminConfActDev, equipo_v1=equipo_v1, sreEvnMsg=sreEvnMsg, teldatSreTrap_ASYNC=teldatSreTrap_ASYNC, sreSubTrapLvlConf=sreSubTrapLvlConf, equipo_visor=equipo_visor, equipo_atlas_basico=equipo_atlas_basico, equipo_teldat_C3=equipo_teldat_C3, equipo_regesta_1=equipo_regesta_1, equipo_g3_cdma=equipo_g3_cdma, teldatSreTrap_RAD=teldatSreTrap_RAD, teldatSreTrap_XNS=teldatSreTrap_XNS, equipo_k=equipo_k, sreGrpGrpSub15Id=sreGrpGrpSub15Id, teldatSreTrap_SCEP=teldatSreTrap_SCEP, teldatSreTrap_LLC=teldatSreTrap_LLC, equipo_c1B=equipo_c1B, teldatSreTrap_PGMO=teldatSreTrap_PGMO, telAdminStatusSystemPcbType=telAdminStatusSystemPcbType, sreSubShortName=sreSubShortName, teldatSreTrap_DH6C=teldatSreTrap_DH6C, telproisdncallhistorycallingnum=telproisdncallhistorycallingnum, telfrLmiBroadcas=telfrLmiBroadcas, equipo_bintecrvc=equipo_bintecrvc, telAdminStatusRestart=telAdminStatusRestart, equipo_Atlas_i70=equipo_Atlas_i70, telAdminStatusSystemBootVersion=telAdminStatusSystemBootVersion, sreTrapVar5=sreTrapVar5, equipo_teldat_C3B=equipo_teldat_C3B, telproisdncallhistorycallednum=telproisdncallhistorycallednum, sreGrpGrpSub6Id=sreGrpGrpSub6Id, sreSubTrap2LvlConf=sreSubTrap2LvlConf, equipo_h1_auto=equipo_h1_auto, sreSubTrap1LvlConf=sreSubTrap1LvlConf, telAdminConfConfSavedDev=telAdminConfConfSavedDev, telfrLmiifIndex=telfrLmiifIndex, sreEvnStatusAct=sreEvnStatusAct, teldefgw=teldefgw, telTrapVarVelBckp=telTrapVarVelBckp, telproisdncallcallingnum=telproisdncallcallingnum, sramRecordInstance=sramRecordInstance, equipo_g4i=equipo_g4i, equipo_vyda_compact=equipo_vyda_compact, equipo_h1plus=equipo_h1plus, sramRecordType=sramRecordType, teldatSreTrap_ISTD=teldatSreTrap_ISTD, telproisdncallhistoryindex=telproisdncallhistoryindex, teldatSreTrap_NAPT=teldatSreTrap_NAPT, teldatSreTrap_MLD6=teldatSreTrap_MLD6, equipo_dusac32=equipo_dusac32, equipo_a2a=equipo_a2a, sramRecordSubtype=sramRecordSubtype, teldatSreTrap_VSN=teldatSreTrap_VSN, telAdminStatusBugsClear=telAdminStatusBugsClear, teldatSreTrap_TVRP=teldatSreTrap_TVRP, teldatSreTrap_HDLC=teldatSreTrap_HDLC, equipo_H2auto_Plus=equipo_H2auto_Plus, sramRecordItem=sramRecordItem, sreEvnMeter=sreEvnMeter, telTrapVarTipoEquip=telTrapVarTipoEquip, teldatSreTrap_X253=teldatSreTrap_X253, telAdminStatusSystemClock=telAdminStatusSystemClock, telfrCircuitCifrar=telfrCircuitCifrar, equipo_g1a_cdma=equipo_g1a_cdma, telAdminStatusSREGroupRecordEntry=telAdminStatusSREGroupRecordEntry, telproip=telproip, teldatSreTrap_AAA=teldatSreTrap_AAA, sreGrpGrpSub3Id=sreGrpGrpSub3Id, teldatSreTrap_SL=teldatSreTrap_SL, equipo_s4=equipo_s4, teldatSreTrap_ICM6O=teldatSreTrap_ICM6O, telSistemaEventos=telSistemaEventos, telfrCircuitifIndex=telfrCircuitifIndex, telproisdncallhistorycause=telproisdncallhistorycause, telproisdncallhistoryinitdate=telproisdncallhistoryinitdate, telproisdncallTable=telproisdncallTable, router_oa5710v=router_oa5710v, router_oa5720=router_oa5720, equipo_teldat_CSW=equipo_teldat_CSW, equipo_atlas_100B=equipo_atlas_100B, equipo_s1a=equipo_s1a, teldatSreTrap_ASDP=teldatSreTrap_ASDP, equipo_voxnet=equipo_voxnet, telproisdncallhistoryref=telproisdncallhistoryref)
mibBuilder.exportSymbols("TELDAT-MIB", telTrapVarVelCir=telTrapVarVelCir, router_oa5725r61er=router_oa5725r61er, telfrLmiOrphans=telfrLmiOrphans, teldatSreTrap_NSLA=teldatSreTrap_NSLA, equipo_iM8=equipo_iM8, telAdminStatusSystemSmartCard=telAdminStatusSystemSmartCard, telAdminStatusSREGroupRecordTable=telAdminStatusSREGroupRecordTable, teldatSreTrap_ICMP=teldatSreTrap_ICMP, teldatSreTrap_HSSI=teldatSreTrap_HSSI, teldatSreTrap_SPF6=teldatSreTrap_SPF6, sreGrpGrpSub19Id=sreGrpGrpSub19Id, telTrapVarTipoBackp=telTrapVarTipoBackp, equipo_m1f=equipo_m1f, telproisdncallhistoryEntry=telproisdncallhistoryEntry, sreGrpGrpSub11Id=sreGrpGrpSub11Id, teldatSreTrap_AINST=teldatSreTrap_AINST, teldatSreTrap_BAN=teldatSreTrap_BAN, equipo_g3=equipo_g3, telTECircuitTrapBackup=telTECircuitTrapBackup, teldatSreTrap_GW=teldatSreTrap_GW, teldatSreTrap_TTTP=teldatSreTrap_TTTP, equipo_g4iplus=equipo_g4iplus, teldatSreTrap_BIR64=teldatSreTrap_BIR64, equipo_teldat_C2BM=equipo_teldat_C2BM, telAdminStatusSystemCode=telAdminStatusSystemCode, teldatSreTrap_MSDP=teldatSreTrap_MSDP, sreGrpGrpEvn6Id=sreGrpGrpEvn6Id, router_oa5725alte=router_oa5725alte, teldatSreTrap_SCCP=teldatSreTrap_SCCP, teldatSreTrap_L2TP=teldatSreTrap_L2TP, teldatSreTrap_NIC=teldatSreTrap_NIC, equipo_a4a=equipo_a4a, equipo_atlas_voxnet=equipo_atlas_voxnet, equipo_g1_cdma=equipo_g1_cdma, telfrCircuitEntry=telfrCircuitEntry, equipo_novacom_x25=equipo_novacom_x25, telAdminStatusSystemBoardRevision=telAdminStatusSystemBoardRevision, telAdminStatusSaveConfig=telAdminStatusSaveConfig, sreGrpGrpSub13Id=sreGrpGrpSub13Id, equipo_C8iplus=equipo_C8iplus, equipo_atlas_100=equipo_atlas_100, teldatSreTrap_H323=teldatSreTrap_H323, telproisdncallstatus=telproisdncallstatus, equipo_h4=equipo_h4, equipo_a4i=equipo_a4i, sreGrpGrpEvn4Id=sreGrpGrpEvn4Id, telTECircuitTrapDown=telTECircuitTrapDown, equipo_temis=equipo_temis, telAdminStatusSREEventRecordTable=telAdminStatusSREEventRecordTable, telproisdncallhistoryendtime=telproisdncallhistoryendtime, equipo_vyda_3M=equipo_vyda_3M, teldatSreTrap_SSH=teldatSreTrap_SSH, teldatSreTrap_GPSF=teldatSreTrap_GPSF, telproisdncallref=telproisdncallref, telAdminStatusSystem=telAdminStatusSystem, equipo_np20h=equipo_np20h, teldatSreTrap_SIP=teldatSreTrap_SIP, router_oa5725r62er=router_oa5725r62er, equipo_g1a=equipo_g1a, telAdminStatusBugsTable=telAdminStatusBugsTable, telproisdncallhistoryTable=telproisdncallhistoryTable, equipo_mbbu=equipo_mbbu, equipo_teldat_C4=equipo_teldat_C4, equipo_h2rail_lite2=equipo_h2rail_lite2, telAdminStatusReload=telAdminStatusReload, equipo_v=equipo_v, telAdminStatusLedStatus=telAdminStatusLedStatus, telproisdn=telproisdn, sreSubTrap4LvlConf=sreSubTrap4LvlConf, teldatSreTrap_SCDFW=teldatSreTrap_SCDFW, equipo_operador_remoto=equipo_operador_remoto, equipo_atlas_300=equipo_atlas_300, telfrCircuitDlci=telfrCircuitDlci, equipo_h1auto_plus=equipo_h1auto_plus, equipo_nucleox_plus=equipo_nucleox_plus, teldatSreTrap_G104=teldatSreTrap_G104, telproisdncalltype=telproisdncalltype, equipo_t200=equipo_t200, equipo_atlas_150SW=equipo_atlas_150SW, teldatSreTrap_PIO=teldatSreTrap_PIO, equipo_atlas_150=equipo_atlas_150, sreTrapVar9=sreTrapVar9, teldatSreTrap_SRVP=teldatSreTrap_SRVP, sreGrpGrpEvn2Id=sreGrpGrpEvn2Id, telAdminStatusSramRecordEntry=telAdminStatusSramRecordEntry, telproisdncallchannel=telproisdncallchannel, telAdminStatusIfTable=telAdminStatusIfTable, equipo_teldat_C3G=equipo_teldat_C3G, equipo_centrix_sec=equipo_centrix_sec, teldatSreTrap_FRBK=teldatSreTrap_FRBK, equipo_h2rail_lite=equipo_h2rail_lite, teldatSreTrap_CDP=teldatSreTrap_CDP, teldatSreTrap_PCMC=teldatSreTrap_PCMC, teldatSreTrap_HDSL=teldatSreTrap_HDSL, sreGrpGrpSub8Id=sreGrpGrpSub8Id, telAdminStatusLedsTable=telAdminStatusLedsTable, equipo_s4i=equipo_s4i, teldatSreTrap_WWAN=teldatSreTrap_WWAN, sreGrpGrpSub14Id=sreGrpGrpSub14Id, equipo_c1plus=equipo_c1plus, sreGrpGrpEvn1Id=sreGrpGrpEvn1Id, telAdminStatusTimeoutConfirm=telAdminStatusTimeoutConfirm, sreGrpGrpEvn10Id=sreGrpGrpEvn10Id, telfrCircuitName=telfrCircuitName, equipo_atlas_60=equipo_atlas_60, sreSubTraceLvlConf=sreSubTraceLvlConf, teldatSreTrap_ICUPLUS=teldatSreTrap_ICUPLUS, teldatSreTrap_TIPS=teldatSreTrap_TIPS, sreGrpGrpSub9Id=sreGrpGrpSub9Id, telproto=telproto, sreTrapVar6=sreTrapVar6, equipo_H2auto=equipo_H2auto, equipo_g1i=equipo_g1i, teldatSreTrap_X252=teldatSreTrap_X252, equipo_C8plus=equipo_C8plus, router_esrwwanenabler=router_esrwwanenabler, telfrLmiIRIncrement=telfrLmiIRIncrement, equipo_g1iplus=equipo_g1iplus, teldatSreTrap_RSTP=teldatSreTrap_RSTP, equipo_g4_cdma=equipo_g4_cdma, equipo_g1plus=equipo_g1plus, telproisdncallchargedunits=telproisdncallchargedunits, sreGrpGrpEvn15Id=sreGrpGrpEvn15Id, telTECircuitTrapUp=telTECircuitTrapUp, teldatSreTrap_TCP=teldatSreTrap_TCP, teldatSreTrap_SMGT=teldatSreTrap_SMGT, equipo_centrix_f=equipo_centrix_f, equipo_g3i_cdma=equipo_g3i_cdma, telAdminStatusSRESubRecordTable=telAdminStatusSRESubRecordTable, telTrapVarRouterPort=telTrapVarRouterPort, teldatSreTrap_CNSL=teldatSreTrap_CNSL, equipo_g4a=equipo_g4a, teldatSreTrap_PRL=teldatSreTrap_PRL, sreTrapVar1=sreTrapVar1, equipo_rexis_mru=equipo_rexis_mru, equipo_C9plus=equipo_C9plus, equipo_g4i_cdma=equipo_g4i_cdma, equipo_regesta_rp82=equipo_regesta_rp82, sreEvnStatusCon=sreEvnStatusCon, telAdminStatusConfirmEnabled=telAdminStatusConfirmEnabled, equipo_a2=equipo_a2, sreTrapVar3=sreTrapVar3, equipo_atlas_152=equipo_atlas_152, teldatSreTrap_TIDP=teldatSreTrap_TIDP, teldatSreTrap_XN=teldatSreTrap_XN, teldatSreTrap_DNS=teldatSreTrap_DNS, sreGrpGrpSub17Id=sreGrpGrpSub17Id, teldatSreTrap_TFTP=teldatSreTrap_TFTP, sreGrpGrpSub1Id=sreGrpGrpSub1Id, sreGrpStatusCon=sreGrpStatusCon, telAdminStatusIfCon=telAdminStatusIfCon, equipo_atlas_50SW=equipo_atlas_50SW, teladmin=teladmin, telTrapVarRouterName=telTrapVarRouterName, equipo_teldat_C6=equipo_teldat_C6, teldatSreTrap_AT=teldatSreTrap_AT, telTrapVarCircuitID=telTrapVarCircuitID, telstatus=telstatus, router_oa5850=router_oa5850, equipo_enaplan=equipo_enaplan, teldatSreTrap_IKE=teldatSreTrap_IKE, sreGrpGrpSub10Id=sreGrpGrpSub10Id, equipo_kf=equipo_kf, teldatSreTrap_ACT=teldatSreTrap_ACT, sreGrpGrpEvn11Id=sreGrpGrpEvn11Id, telTrapVarSequenceNum=telTrapVarSequenceNum, equipo_regesta_comp_plc=equipo_regesta_comp_plc, equipo_c1a=equipo_c1a, equipo_connect_104=equipo_connect_104, teldatSreTrap_WNMS=teldatSreTrap_WNMS, teldatSreTrap_RDSI=teldatSreTrap_RDSI, teldatSreTrap_IPHC=teldatSreTrap_IPHC, telAdminStatusSaveRunningConfig=telAdminStatusSaveRunningConfig, equipo_atlas_160=equipo_atlas_160, equipo_a1i=equipo_a1i, teldatSreTrap_REXISFT=teldatSreTrap_REXISFT, equipo_3geplus_cdma=equipo_3geplus_cdma, teldatSreTrap_ACL=teldatSreTrap_ACL, sreGrpGrpSub5Id=sreGrpGrpSub5Id, telfrLmiEntry=telfrLmiEntry, telproisdncallhistorytype=telproisdncallhistorytype, equipo_teldat_C4B=equipo_teldat_C4B, equipo_router_maestro=equipo_router_maestro, teldatSreTrap_CFM=teldatSreTrap_CFM, telproducts=telproducts, equipo_centrix_b=equipo_centrix_b, telAdminStatusIfIndex=telAdminStatusIfIndex, teldatSreTrap_SDEV=teldatSreTrap_SDEV, equipo_cbra20=equipo_cbra20, teldatSreTrap_ND=teldatSreTrap_ND, sreGrpGrpSub2Id=sreGrpGrpSub2Id, sreTrapVar4=sreTrapVar4, teldatSreTrap_SPI=teldatSreTrap_SPI, teldatSreTrap_MBBU=teldatSreTrap_MBBU, telProtoIpDefGwCost=telProtoIpDefGwCost, sreGrpGrpEvn7Id=sreGrpGrpEvn7Id, equipo_regesta_rp61er=equipo_regesta_rp61er, teldatSreTrap_IPSF=teldatSreTrap_IPSF, teldatSreTrap_MGCP=teldatSreTrap_MGCP, equipo_a1a=equipo_a1a, sreTrapEvento=sreTrapEvento, equipo_c1plus_SW=equipo_c1plus_SW, teldatSreTrap_NEIG=teldatSreTrap_NEIG, equipo_teldat_C3i=equipo_teldat_C3i, teldatSreTrap_NBS=teldatSreTrap_NBS, equipo_t200g=equipo_t200g, teldatSreTrap_REXISMRU=teldatSreTrap_REXISMRU, equipo_g4plus=equipo_g4plus, equipo_m1=equipo_m1, teldatSreTrap_HTTP=teldatSreTrap_HTTP, telMciTraps=telMciTraps, sreGrpGrpSub7Id=sreGrpGrpSub7Id, telAdminStatusSREClearConf=telAdminStatusSREClearConf, telAdminStatusBugsEntry=telAdminStatusBugsEntry, teldatSreTrap_SSL=teldatSreTrap_SSL, sreGrpGrpSub18Id=sreGrpGrpSub18Id, equipo_atlas_360=equipo_atlas_360, telfrCircuitTable=telfrCircuitTable, teldatSreTrap_EAP=teldatSreTrap_EAP, teldatSreTrap_DOT1X=teldatSreTrap_DOT1X, equipo_g3iplus=equipo_g3iplus, equipo_teldat_C2i=equipo_teldat_C2i, equipo_g4a_cdma=equipo_g4a_cdma, teldatSreTrap_ACAT=teldatSreTrap_ACAT, teldatSreTrap_TNIP=teldatSreTrap_TNIP, teldatSreTrap_DNAT=teldatSreTrap_DNAT, teldatSreTrap_DHCPC=teldatSreTrap_DHCPC, teldatSreTrap_GSTP=teldatSreTrap_GSTP, teldatSreTrap_IGMP=teldatSreTrap_IGMP, teldatSreTrap_PHYS=teldatSreTrap_PHYS, teldatSreTrap_SPOOF=teldatSreTrap_SPOOF, teldatSreTrap_CELL=teldatSreTrap_CELL, equipo_c1=equipo_c1, telProtoIpDefGwAge=telProtoIpDefGwAge, equipo_atlas_250=equipo_atlas_250, equipo_cbra=equipo_cbra, teldatSreTrap_SRT=teldatSreTrap_SRT, teldatSreTrap_PPP=teldatSreTrap_PPP, equipo_g2=equipo_g2, equipo_h1rail=equipo_h1rail, equipo_s2i=equipo_s2i, teldatSreTrap_ARP=teldatSreTrap_ARP, telproisdncallhistorydiagnostic=telproisdncallhistorydiagnostic, telproisdncallid=telproisdncallid, equipo_centrix_ng=equipo_centrix_ng, telEventTraps=telEventTraps, teldatSreTrap_ADSL=teldatSreTrap_ADSL, telAdminStatusLedNum=telAdminStatusLedNum, teldatSreTrap_NSM=teldatSreTrap_NSM, equipo_c1iplus=equipo_c1iplus, equipo_regesta_plc=equipo_regesta_plc, equipo_c1G=equipo_c1G, sreGrpGrpEvn13Id=sreGrpGrpEvn13Id, telAdminStatusSramRecordTable=telAdminStatusSramRecordTable)
mibBuilder.exportSymbols("TELDAT-MIB", teldatSreTrap_RTSP=teldatSreTrap_RTSP, telfrCircuitBack_Up_FR=telfrCircuitBack_Up_FR, sreTrapSubSist=sreTrapSubSist, sreGrpGrpSub4Id=sreGrpGrpSub4Id, equipo_a1=equipo_a1, teldatSreTrap_TLNT=teldatSreTrap_TLNT, telfrCircuitBack_Up_RDSI_siempre=telfrCircuitBack_Up_RDSI_siempre, equipo_vyda_1M=equipo_vyda_1M, equipo_C9iplus=equipo_C9iplus, equipo_a3i=equipo_a3i, sreEvnEvnId=sreEvnEvnId, teldatSreTrap_CIF=teldatSreTrap_CIF, teldat=teldat, teldatSreTrap_PRIME=teldatSreTrap_PRIME, telAdminStatusIfHdw=telAdminStatusIfHdw, teldatSreTrap_BFD=teldatSreTrap_BFD, equipo_atlas_50=equipo_atlas_50, telTrapVarIPAddr=telTrapVarIPAddr, sreEvnLvl=sreEvnLvl, sreSubNumEvent=sreSubNumEvent, sreTrapVar7=sreTrapVar7, equipo_g1=equipo_g1, teldatSreTrap_DNSU=teldatSreTrap_DNSU, teldatSreTrap=teldatSreTrap, equipo_iM8_Plus=equipo_iM8_Plus, teldatSreTrap_I101=teldatSreTrap_I101, equipo_g4=equipo_g4, telAdminStatusSystemSwLicLev=telAdminStatusSystemSwLicLev, teldatSreTrap_Q933=teldatSreTrap_Q933, telfrLmiMonitCIR=telfrLmiMonitCIR, equipo_kronos=equipo_kronos, telfrLmiTable=telfrLmiTable)
