#
# PySNMP MIB module IEEE8021-PB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iee/IEEE8021-PB-MIB
# Produced by pysmi-1.1.12 at Mon Jul  1 10:50:10 2024
# On host fv-az665-510 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
ieee8021BridgeBasePortComponentId, ieee8021BridgeBasePort = mibBuilder.importSymbols("IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId", "ieee8021BridgeBasePort")
IEEE8021PriorityValue, IEEE8021PbbComponentIdentifierOrZero, IEEE8021PortAcceptableFrameTypes, IEEE8021BridgePortNumberOrZero, IEEE8021BridgePortType, ieee802dot1mibs = mibBuilder.importSymbols("IEEE8021-TC-MIB", "IEEE8021PriorityValue", "IEEE8021PbbComponentIdentifierOrZero", "IEEE8021PortAcceptableFrameTypes", "IEEE8021BridgePortNumberOrZero", "IEEE8021BridgePortType", "ieee802dot1mibs")
VlanIdOrNone, VlanId = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIdOrNone", "VlanId")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, Unsigned32, Counter64, IpAddress, ModuleIdentity, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, TimeTicks, MibIdentifier, NotificationType, Counter32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "Counter64", "IpAddress", "ModuleIdentity", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "TimeTicks", "MibIdentifier", "NotificationType", "Counter32", "Bits", "ObjectIdentity")
TextualConvention, TruthValue, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString", "RowStatus")
ieee8021PbMib = ModuleIdentity((1, 3, 111, 2, 802, 1, 1, 5))
ieee8021PbMib.setRevisions(('2018-06-28 00:00', '2014-12-15 00:00', '2012-02-10 00:00', '2011-04-06 00:00', '2011-02-27 00:00', '2010-08-26 00:00', '2008-10-15 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ieee8021PbMib.setRevisionsDescriptions(('Published as part of IEEE Std 802.1Q-2018.\n            Cross references updated and corrected.', 'Published as part of IEEE Std 802.1Q 2014 revision.\n            Cross references updated and corrected.\n            Bug fixes to conformance section.', 'Deprecated ieee8021PbVidTranslationTable\n          moved the new object to the Q Bridge as part\n          of VID translation for IEEE Std 802.1aq.', 'Additions to support Remote Customer Service Interfaces.', 'Change to ieee8021PbEdgePortAcceptableFrameTypes\n          permissible values, addition of \n          IEEE8021BridgePortNumberOrZero to IMPORTS,\n          as part of 2011 revision of IEEE Std 802.1Q.', 'Minor edits to contact information etc. as part of \n          revision of Std 802.1Q.', 'Initial version.',))
if mibBuilder.loadTexts: ieee8021PbMib.setLastUpdated('201806280000Z')
if mibBuilder.loadTexts: ieee8021PbMib.setOrganization('IEEE 802.1 Working Group')
if mibBuilder.loadTexts: ieee8021PbMib.setContactInfo('  WG-URL: http://www.ieee802.org/1/\n         WG-EMail: stds-802-1-L@ieee.org\n\n          Contact: IEEE 802.1 Working Group Chair\n           Postal: C/O IEEE 802.1 Working Group\n                   IEEE Standards Association\n                   445 Hoes Lane\n                   Piscataway\n                   NJ 08854\n                   USA\n           E-mail: STDS-802-1-L@IEEE.ORG')
if mibBuilder.loadTexts: ieee8021PbMib.setDescription('Provider Bridge MIB module.\n\n         Unless otherwise indicated, the references in this MIB\n         module are to IEEE Std 802.1Q.\n\n         Copyright (C) IEEE (2018).\n         This version of this MIB module is part of IEEE Std 802.1Q;\n         see the draft itself for full legal notices.')
ieee8021PbNotifications = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 5, 0))
ieee8021PbObjects = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 5, 1))
ieee8021PbConformance = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 5, 2))
ieee8021PbVidTranslationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 1), )
if mibBuilder.loadTexts: ieee8021PbVidTranslationTable.setReference('12.10.1.8')
if mibBuilder.loadTexts: ieee8021PbVidTranslationTable.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationTable.setDescription('This table is used to configure the VID Translation Table\n        defined in 12.10.1.8.  The VID\n        Translation Table is used to implement a bidirectional\n        mapping between a local S-VID, used in data and protocol\n        frames transmitted and received through a CNP or PNP,\n        and a relay S-VID, used by the filtering and forwarding\n        process.  Each row in this table is indexed by component,\n        port, and local S-VID value and indicates the relay S-VID\n        value to be used for the specified S-VID.  If no entry for\n        a component, port, and local-svid is present in this table\n        is present then the relay S-VID used for a frame received\n        on that port with the local S-VID value will be the S-VID\n        that has the same numeric value as the local S-VID of the\n        received frame.\n\n        Entries in this table must be persistent over power up\n        restart/reboot.')
ieee8021PbVidTranslationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 1, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PB-MIB", "ieee8021PbVidTranslationLocalVid"))
if mibBuilder.loadTexts: ieee8021PbVidTranslationEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationEntry.setDescription('An entry for the S-VID translation table which includes \n        both the Local and Relay S-VIDs between which the PNP or CNP\n        translates.\n\n        Note that the component ID of entries in this table must refer\n        to the S-VLAN Component of a Provider Bridge.')
ieee8021PbVidTranslationLocalVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 1, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021PbVidTranslationLocalVid.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationLocalVid.setDescription('The S-VID on received(transmitted) at the ISS of a CNP or PNP.')
ieee8021PbVidTranslationRelayVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 1, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbVidTranslationRelayVid.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationRelayVid.setDescription('The translated S-VID delivered(received) over the EISS from a\n        CNP or PNP.  The default value of this object on creation will\n        be the value of the corresponding instance of\n        ieee8021PbVidTranslationLocalVid.')
ieee8021PbVidTranslationRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbVidTranslationRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationRowStatus.setDescription('This indicates the status of an entry in this table, and is\n        used to create/delete entries.\n\n        It is an implementation specific decision as to whether any\n        column in this table may be set while the corresponding\n        instance of this object is valid(1).')
ieee8021PbCVidRegistrationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 2), )
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationTable.setReference('12.13.2.1, 12.13.2.2')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationTable.setDescription('A table used in a CEP to create the mapping between a C-VID\n        and a service represented by an S-VID.\n\n        Note that the component ID of entries in this table must refer\n        to the S-VLAN component of a Provider Edge Bridge and the Port\n        Number must refer to the port number of the Customer Edge Port\n        associated with that Provider Edge Bridge.\n\n        Entries in this table must be persistent over power up\n        restart/reboot.')
ieee8021PbCVidRegistrationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationCVid"))
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationEntry.setDescription('An element of the C-VID registration table accessed by PB\n        C-VLAN component, Customer Edge Port Bridge Port number, and\n        C-VID.  Each element contains the mapping between a C-VID and\n        the S-VID which carries the service and booleans for handling\n        untagged frames at the PEP and CEP.')
ieee8021PbCVidRegistrationCVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationCVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationCVid.setDescription('C-VID of this C-VID registration entry.')
ieee8021PbCVidRegistrationSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationSVid.setDescription('S-VID for this C-VID registration entry.')
ieee8021PbCVidRegistrationUntaggedPep = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1, 3), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationUntaggedPep.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationUntaggedPep.setDescription('A flag indicating if this C-VID should be carried untagged\n        at the PEP.  A value of true(1) means untagged.')
ieee8021PbCVidRegistrationUntaggedCep = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1, 4), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationUntaggedCep.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationUntaggedCep.setDescription('A flag indicating if this C-VID should be carried untagged\n        at the CEP.  A value of true(1) means untagged.')
ieee8021PbCVidRegistrationRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationRowStatus.setDescription('This indicates the status of an entry in this table, and is\n        used to create/delete entries.\n\n        The value of ieee8021PbCVidRegistrationSVid must be set before\n        an entry in this table can be made valid.\n\n        It is an implementation specific decision as to whether any\n        column in this table may be set while the corresponding\n        instance of this object is valid(1).')
ieee8021PbEdgePortTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 3), )
if mibBuilder.loadTexts: ieee8021PbEdgePortTable.setReference('12.13.2.3, 12.13.2.4')
if mibBuilder.loadTexts: ieee8021PbEdgePortTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortTable.setDescription('A Provider Edge Port (PEP) table which indicate the subset of\n        parameters needed for each PEP.')
ieee8021PbEdgePortEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PB-MIB", "ieee8021PbEdgePortSVid"))
if mibBuilder.loadTexts: ieee8021PbEdgePortEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortEntry.setDescription("An entry in the PEP table indexed by ComponentID and S-VID and\n        containing parameters used to configure ingress filtering on\n        the PEP, thus affecting traffic transiting from the provider\n        network to the customer edge port.  The columns allow the\n        default C-VID value and default priority to be specified\n        and PEP's ingress filtering operation to be controlled.\n\n        Note that the component ID of entries in this table must refer\n        to an S-VLAN component of a provider edge Bridge and the Bridge\n        Port number must refer to the port number of a Customer Edge\n        Port associated with that Provider Edge Bridge.")
ieee8021PbEdgePortSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021PbEdgePortSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortSVid.setDescription('The 12 bit S-VID associated with the PEP.')
ieee8021PbEdgePortPVID = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbEdgePortPVID.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortPVID.setDescription('A 12-bit C-VID to be used for untagged frames received at\n        the Provider Edge Port.')
ieee8021PbEdgePortDefaultUserPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbEdgePortDefaultUserPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortDefaultUserPriority.setDescription('An integer range 0-7 to be used for untagged frames received\n        at the Provider Edge Port.')
ieee8021PbEdgePortAcceptableFrameTypes = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1, 4), IEEE8021PortAcceptableFrameTypes().clone('admitAll')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbEdgePortAcceptableFrameTypes.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortAcceptableFrameTypes.setDescription('the Acceptable Frame Types for frames received at the PEP.\n        The permissible values for the parameter are:\n            1) Admit all frames;\n            2) Admit only untagged and Priority-tagged frames;\n            3) Admit only VLAN-tagged frames.')
ieee8021PbEdgePortEnableIngressFiltering = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 3, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbEdgePortEnableIngressFiltering.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortEnableIngressFiltering.setDescription('Filtering parameter for frames received at the PEP.\n        The permissible values for the parameter are:\n            true(1)  Enabled;\n            false(2) Disabled.')
ieee8021PbServicePriorityRegenerationTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 4), )
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationTable.setReference('12.13.2.5, 12.13.2.6')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationTable.setDescription('The priority regeneration table for this PEP.')
ieee8021PbServicePriorityRegenerationEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 4, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PB-MIB", "ieee8021PbServicePriorityRegenerationSVid"), (0, "IEEE8021-PB-MIB", "ieee8021PbServicePriorityRegenerationReceivedPriority"))
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationEntry.setDescription('An element of the PEP priority regeneration table indexed\n        by Component ID, Bridge Port number, S-VID, and received\n        priority.  Each element contains the regenerated priority.\n\n        Note that the component ID of entries in this table must refer\n        to the S-VLAN component of a Provider Edge Bridge and the Port\n        Number must refer to the port number of the Customer Edge Port\n        associated with that S-VLAN component.')
ieee8021PbServicePriorityRegenerationSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 4, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationSVid.setDescription('S-VID for this regeneration table entry.')
ieee8021PbServicePriorityRegenerationReceivedPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 4, 1, 2), IEEE8021PriorityValue())
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationReceivedPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationReceivedPriority.setDescription('Received priority for this regeneration table entry.')
ieee8021PbServicePriorityRegenerationRegeneratedPriority = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 4, 1, 3), IEEE8021PriorityValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationRegeneratedPriority.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationRegeneratedPriority.setDescription('The regenerated priority contained in this regeneration table\n        entry.')
ieee8021PbCnpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 5), )
if mibBuilder.loadTexts: ieee8021PbCnpTable.setReference('12.13.2')
if mibBuilder.loadTexts: ieee8021PbCnpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCnpTable.setDescription('This table is used for dynamic creation and deletion of\n        Customer Network Ports on S-VLAN components or I-components.\n        Creation of an entry in this table will implicitly also\n        create a corresponding entry in the ieee8021BridgeBasePortTable.\n\n        Entries in this table must be persistent across reinitializations\n        of the management system.')
ieee8021PbCnpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 5, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbCnpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCnpEntry.setDescription('Represents a dynamically created Customer Network Port.')
ieee8021PbCnpCComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 5, 1, 1), IEEE8021PbbComponentIdentifierOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCnpCComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCnpCComponentId.setDescription('The component ID of the C-Vlan component if this is an\n        internal customer network port.  The value must be 0 for\n        an external customer network port.\n\n        This value must be consistent with the value of the\n        corresponding instance of ieee8021PbCnpSVid.\n        Both must be non-zero, or both must be zero.')
ieee8021PbCnpSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 5, 1, 2), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCnpSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCnpSVid.setDescription('The S-VID for service for an internal customer network port.\n        For an external port, this value must be 0.\n\n        This value must be consistent with the value of the\n        corresponding instance of ieee8021PbCnpCComponentId.\n        Both must be non-zero, or both must be zero.')
ieee8021PbCnpRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCnpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCnpRowStatus.setDescription('This object is used for creation/deletion of entries in\n        this table.\n\n        All columns in this table must have valid values before\n        this object can be set to active(1).\n\n        While the value of this object is active(1), the values\n        of other columns in the same entry may not be modified.')
ieee8021PbPnpTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 6), )
if mibBuilder.loadTexts: ieee8021PbPnpTable.setReference('12.13.1')
if mibBuilder.loadTexts: ieee8021PbPnpTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbPnpTable.setDescription('This table is used for dynamic creation and deletion of\n        Provider Network Ports on S-VLAN components or B-components.\n        Creation of an entry in this table will implicitly also\n        create a corresponding entry in the ieee8021BridgeBasePortTable.\n\n        Entries in this table must be persistent across reinitializations\n        of the management system.')
ieee8021PbPnpEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 6, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbPnpEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbPnpEntry.setDescription('Represents a dynamically created Provider Network Port.')
ieee8021PbPnpRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 6, 1, 1), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbPnpRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbPnpRowStatus.setDescription('This object is used for creation/deletion of entries in\n        this table.')
ieee8021PbCepTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 7), )
if mibBuilder.loadTexts: ieee8021PbCepTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCepTable.setDescription("This table is used to create Customer Edge Ports, CEPs, on a\n        provider edge Bridge.  It is indexed by the ComponentId of the\n        PEB's S-VLAN component and by the port number for the CEP.  Note that\n        the CEP's port number belongs to the set of port numbers\n        associated with the PEB's S-VLAN component.\n\n        Entries in this table must be persistent across reinitializations\n        of the management system.  However, note that some column values,\n        as noted below, may change across system reinitializations.")
ieee8021PbCepEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 7, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbCepEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCepEntry.setDescription('The entry of the ieee8021PbCepTable.  Note that the component\n         index must refer to the S-VLAN component of a PEB, and that the port\n         number for the CEP is allocated from the port number space of\n         that S-VLAN component.')
ieee8021PbCepCComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 7, 1, 1), IEEE8021PbbComponentIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbCepCComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCepCComponentId.setDescription('This column is an implementation specific column that may be\n         used to map the C component associated with this CEP to other\n         tables within the system, such as the Entity MIB.  This\n         column may not be created or modified by management station\n         action.  A value of 0 is always legal, and non-zero values\n         will be interpreted in an implementation specific manner.\n         The value of this column may or may not persist across system\n         restarts.')
ieee8021PbCepCepPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 7, 1, 2), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbCepCepPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCepCepPortNumber.setDescription('This column is an implementation specific column that may be\n         used to map the CEP to other tables within the system, for\n         example the Entity MIB.  This column may not be created or\n         modified by management station action.  A value of 0 is\n         always legal, and non-zero values will be interpreted in an\n         implementation specific manner.  The value of this column\n         may or may not persist across system restarts.')
ieee8021PbCepRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 7, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbCepRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCepRowStatus.setDescription('This indicates the status of the entry, and is used to create\n        and delete entries in this table.')
ieee8021PbRcapTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 8), )
if mibBuilder.loadTexts: ieee8021PbRcapTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbRcapTable.setDescription("This table is used to create Remote Customer Access Ports, on a\n        provider edge Bridge.  It is indexed by the ComponentId of the\n        PEB's S-VLAN component and by the port number for the RCAP.  Note that\n        the index port number belongs to the set of port numbers\n        associated with the PEB's primary S-VLAN component.\n\n        Entries in this table must be persistent across reinitializations\n        of the management agent.  However, note that some column values,\n        as noted below, may change across system reinitializations.")
ieee8021PbRcapEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 8, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"))
if mibBuilder.loadTexts: ieee8021PbRcapEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbRcapEntry.setDescription('The entry of the ieee8021PbRcapTable.  Note that the component\n         index must refer to the primary S-VLAN component of a PEB, and that\n         the port number index for the RCAP is allocated from the port\n         number space of that S-VLAN component.')
ieee8021PbRcapSComponentId = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 8, 1, 1), IEEE8021PbbComponentIdentifierOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbRcapSComponentId.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbRcapSComponentId.setDescription('This column is an implmentation specific column that may be\n         used to map the Port-mapping S-VLAN component associated with\n         this RCAP to other tables within the system, such as the\n         Entity MIB.  This column may not be created or modified\n         by management station action.  A value of 0 is always legal,\n         and non-zero values will be interpreted in an implementation\n         specific manner. The value of this column may or may not\n         persist across system restarts.')
ieee8021PbRcapRcapPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 8, 1, 2), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbRcapRcapPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbRcapRcapPortNumber.setDescription('This column is an implementation specific column that may be\n         used to map the RCAP to other tables within the system, for\n         example the Entity MIB.  This column may not be created or\n         modified by management station action.  A value of 0 is\n         always legal, and non-zero values will be interpreted in an\n         implementation specific manner.  The value of this column\n         may or may not persist across system restarts.')
ieee8021PbRcapRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbRcapRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbRcapRowStatus.setDescription('This indicates the status of the entry, and is used to create\n        and delete entries in this table.')
ieee8021PbInternalInterfaceTable = MibTable((1, 3, 111, 2, 802, 1, 1, 5, 1, 9), )
if mibBuilder.loadTexts: ieee8021PbInternalInterfaceTable.setReference('12.13.3.1, 12.13.3.2')
if mibBuilder.loadTexts: ieee8021PbInternalInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbInternalInterfaceTable.setDescription('A table used in a Port-mapping S-VLAN component associated with\n        a Remote Customer Access Port to manage the mapping between\n        external S-VIDs and internal interfaces/S-VIDs.\n\n        Note that the component ID of entries in this table must refer\n        to the primary S-VLAN component of a Provider Edge Bridge and\n        the Port Number must refer to the port number of a Remote\n        Customer Access Port associated with that S-VLAN component.\n\n        Entries in this table must be persistent over power up\n        restart/reboot.')
ieee8021PbIiEntry = MibTableRow((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1), ).setIndexNames((0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePortComponentId"), (0, "IEEE8021-BRIDGE-MIB", "ieee8021BridgeBasePort"), (0, "IEEE8021-PB-MIB", "ieee8021PbIiExternalSVid"))
if mibBuilder.loadTexts: ieee8021PbIiEntry.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiEntry.setDescription('An element of the internal interface table accessed by PB\n        S-VLAN component ID, Remnote Customer Access Port Bridge Port\n        number, and external S-VID.  Each element contains the mapping\n        between an external S-VID and the internal port it selects and,\n        except in the case of a C-tagged service interface the\n        internal S-VID which carries the service .')
ieee8021PbIiExternalSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1, 1), VlanId())
if mibBuilder.loadTexts: ieee8021PbIiExternalSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiExternalSVid.setDescription('External S-VID for this internal interface table entry.')
ieee8021PbIiInternalPortNumber = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1, 2), IEEE8021BridgePortNumberOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ieee8021PbIiInternalPortNumber.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiInternalPortNumber.setDescription('The port number for the internal port on the primary\n        S-VLAN component.  This port number is used in FDB entries\n        that reference an RCSI.\n\n        The port number of the Remote Customer Access Port can\n        be used to identify a PNP on the primary S-VLAN component\n        connected to a PNP on the Port-mapping S-VLAN component.')
ieee8021PbIiInternalPortType = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1, 3), IEEE8021BridgePortType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbIiInternalPortType.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiInternalPortType.setDescription('The port type of the internal port on the primary\n        S-VLAN component. This indicates the type of RCSI as follows:\n        \n             providerNetworkPort(3) - Indicates a PNP (not an RCSI)\n             customerNetworkPort(4) - Indicates a Port-based RCSI\n             customerEdgePort(5) - Indicates a C-tagged RCSI\n\n        Other port type values are not valid for this field.')
ieee8021PbIiInternalSVid = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1, 4), VlanIdOrNone()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbIiInternalSVid.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiInternalSVid.setDescription('Internal S-VID for this external S-VID entry.')
ieee8021PbIiRowStatus = MibTableColumn((1, 3, 111, 2, 802, 1, 1, 5, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ieee8021PbIiRowStatus.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbIiRowStatus.setDescription('This indicates the status of an entry in this table, and is\n        used to create/delete entries.\n\n        The value of ieee8021PbIiExternalSVid must be set before\n        an entry in this table can be made valid.deprecated\n\n        It is an implementation specific decision as to whether any\n        column in this table may be set while the corresponding\n        instance of this object is valid(1).')
ieee8021PbGroups = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 5, 2, 1))
ieee8021PbCompliances = MibIdentifier((1, 3, 111, 2, 802, 1, 1, 5, 2, 2))
ieee8021PbVidTranslationGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 1)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbVidTranslationRelayVid"), ("IEEE8021-PB-MIB", "ieee8021PbVidTranslationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbVidTranslationGroup = ieee8021PbVidTranslationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbVidTranslationGroup.setDescription('The collection of objects used to represent a PB\n        C-VID/S-VID translation.')
ieee8021PbCVidRegistrationGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 2)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationSVid"), ("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationUntaggedPep"), ("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationUntaggedCep"), ("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbCVidRegistrationGroup = ieee8021PbCVidRegistrationGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbCVidRegistrationGroup.setDescription('The collection of objects used to represent a CEP translation.')
ieee8021PbEdgePortGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 3)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbEdgePortPVID"), ("IEEE8021-PB-MIB", "ieee8021PbEdgePortDefaultUserPriority"), ("IEEE8021-PB-MIB", "ieee8021PbEdgePortAcceptableFrameTypes"), ("IEEE8021-PB-MIB", "ieee8021PbEdgePortEnableIngressFiltering"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbEdgePortGroup = ieee8021PbEdgePortGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbEdgePortGroup.setDescription('The collection of objects user to represent a PEP.')
ieee8021PbServicePriorityRegenerationGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 4)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbServicePriorityRegenerationRegeneratedPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbServicePriorityRegenerationGroup = ieee8021PbServicePriorityRegenerationGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbServicePriorityRegenerationGroup.setDescription('A regenerated priority value for a PEP.')
ieee8021PbDynamicCnpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 5)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbCnpCComponentId"), ("IEEE8021-PB-MIB", "ieee8021PbCnpSVid"), ("IEEE8021-PB-MIB", "ieee8021PbCnpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbDynamicCnpGroup = ieee8021PbDynamicCnpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbDynamicCnpGroup.setDescription('A set of objects used for dynamic creation and deletion\n        of customer network ports.')
ieee8021PbDynamicPnpGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 6)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbPnpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbDynamicPnpGroup = ieee8021PbDynamicPnpGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbDynamicPnpGroup.setDescription('A set of objects used for dynamic creation and deletion\n        of provider network ports.')
ieee8021PbDynamicCepGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 7)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbCepCComponentId"), ("IEEE8021-PB-MIB", "ieee8021PbCepCepPortNumber"), ("IEEE8021-PB-MIB", "ieee8021PbCepRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbDynamicCepGroup = ieee8021PbDynamicCepGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbDynamicCepGroup.setDescription('A set of objects used for dynamic creation and deletion\n        of customer edge ports.')
ieee8021PbDynamicRcapGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 8)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbRcapSComponentId"), ("IEEE8021-PB-MIB", "ieee8021PbRcapRcapPortNumber"), ("IEEE8021-PB-MIB", "ieee8021PbCepRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbDynamicRcapGroup = ieee8021PbDynamicRcapGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbDynamicRcapGroup.setDescription('A set of objects used for dynamic creation and deletion\n        of remote customer access ports.')
ieee8021PbInternalInterfaceGroup = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 9)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbIiInternalPortNumber"), ("IEEE8021-PB-MIB", "ieee8021PbIiInternalPortType"), ("IEEE8021-PB-MIB", "ieee8021PbIiInternalSVid"), ("IEEE8021-PB-MIB", "ieee8021PbIiRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbInternalInterfaceGroup = ieee8021PbInternalInterfaceGroup.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbInternalInterfaceGroup.setDescription('A set of objects used for dynamic creation and deletion\n        of internal interfaces on a Port-mapping S-VLAN component.')
ieee8021PbDynamicRcapV2Group = ObjectGroup((1, 3, 111, 2, 802, 1, 1, 5, 2, 1, 10)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbRcapSComponentId"), ("IEEE8021-PB-MIB", "ieee8021PbRcapRcapPortNumber"), ("IEEE8021-PB-MIB", "ieee8021PbRcapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbDynamicRcapV2Group = ieee8021PbDynamicRcapV2Group.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbDynamicRcapV2Group.setDescription('A set of objects used for dynamic creation and deletion\n        of remote customer access ports.')
ieee8021PbCompliance = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 5, 2, 2, 1)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbVidTranslationGroup"), ("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationGroup"), ("IEEE8021-PB-MIB", "ieee8021PbEdgePortGroup"), ("IEEE8021-PB-MIB", "ieee8021PbServicePriorityRegenerationGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicCnpGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicPnpGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicCepGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicRcapGroup"), ("IEEE8021-PB-MIB", "ieee8021PbInternalInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbCompliance = ieee8021PbCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ieee8021PbCompliance.setDescription('The compliance statement for device support of Provider\n         Bridge services.')
ieee8021PbComplianceV2 = ModuleCompliance((1, 3, 111, 2, 802, 1, 1, 5, 2, 2, 2)).setObjects(("IEEE8021-PB-MIB", "ieee8021PbCVidRegistrationGroup"), ("IEEE8021-PB-MIB", "ieee8021PbEdgePortGroup"), ("IEEE8021-PB-MIB", "ieee8021PbServicePriorityRegenerationGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicCnpGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicPnpGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicCepGroup"), ("IEEE8021-PB-MIB", "ieee8021PbDynamicRcapV2Group"), ("IEEE8021-PB-MIB", "ieee8021PbInternalInterfaceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ieee8021PbComplianceV2 = ieee8021PbComplianceV2.setStatus('current')
if mibBuilder.loadTexts: ieee8021PbComplianceV2.setDescription('The compliance statement for device support of Provider\n         Bridge services.')
mibBuilder.exportSymbols("IEEE8021-PB-MIB", ieee8021PbEdgePortGroup=ieee8021PbEdgePortGroup, ieee8021PbCnpCComponentId=ieee8021PbCnpCComponentId, ieee8021PbCepEntry=ieee8021PbCepEntry, ieee8021PbCnpRowStatus=ieee8021PbCnpRowStatus, ieee8021PbCepCComponentId=ieee8021PbCepCComponentId, ieee8021PbIiInternalPortType=ieee8021PbIiInternalPortType, ieee8021PbCepTable=ieee8021PbCepTable, ieee8021PbCepCepPortNumber=ieee8021PbCepCepPortNumber, ieee8021PbEdgePortEnableIngressFiltering=ieee8021PbEdgePortEnableIngressFiltering, PYSNMP_MODULE_ID=ieee8021PbMib, ieee8021PbEdgePortTable=ieee8021PbEdgePortTable, ieee8021PbRcapEntry=ieee8021PbRcapEntry, ieee8021PbIiInternalSVid=ieee8021PbIiInternalSVid, ieee8021PbDynamicRcapV2Group=ieee8021PbDynamicRcapV2Group, ieee8021PbGroups=ieee8021PbGroups, ieee8021PbCVidRegistrationRowStatus=ieee8021PbCVidRegistrationRowStatus, ieee8021PbServicePriorityRegenerationGroup=ieee8021PbServicePriorityRegenerationGroup, ieee8021PbVidTranslationLocalVid=ieee8021PbVidTranslationLocalVid, ieee8021PbVidTranslationRelayVid=ieee8021PbVidTranslationRelayVid, ieee8021PbEdgePortSVid=ieee8021PbEdgePortSVid, ieee8021PbConformance=ieee8021PbConformance, ieee8021PbEdgePortPVID=ieee8021PbEdgePortPVID, ieee8021PbCnpTable=ieee8021PbCnpTable, ieee8021PbRcapRowStatus=ieee8021PbRcapRowStatus, ieee8021PbIiEntry=ieee8021PbIiEntry, ieee8021PbEdgePortEntry=ieee8021PbEdgePortEntry, ieee8021PbVidTranslationGroup=ieee8021PbVidTranslationGroup, ieee8021PbVidTranslationTable=ieee8021PbVidTranslationTable, ieee8021PbCVidRegistrationTable=ieee8021PbCVidRegistrationTable, ieee8021PbRcapTable=ieee8021PbRcapTable, ieee8021PbRcapSComponentId=ieee8021PbRcapSComponentId, ieee8021PbServicePriorityRegenerationReceivedPriority=ieee8021PbServicePriorityRegenerationReceivedPriority, ieee8021PbCVidRegistrationCVid=ieee8021PbCVidRegistrationCVid, ieee8021PbCepRowStatus=ieee8021PbCepRowStatus, ieee8021PbIiRowStatus=ieee8021PbIiRowStatus, ieee8021PbCVidRegistrationUntaggedPep=ieee8021PbCVidRegistrationUntaggedPep, ieee8021PbCompliances=ieee8021PbCompliances, ieee8021PbEdgePortAcceptableFrameTypes=ieee8021PbEdgePortAcceptableFrameTypes, ieee8021PbDynamicCepGroup=ieee8021PbDynamicCepGroup, ieee8021PbComplianceV2=ieee8021PbComplianceV2, ieee8021PbCnpEntry=ieee8021PbCnpEntry, ieee8021PbNotifications=ieee8021PbNotifications, ieee8021PbServicePriorityRegenerationSVid=ieee8021PbServicePriorityRegenerationSVid, ieee8021PbServicePriorityRegenerationEntry=ieee8021PbServicePriorityRegenerationEntry, ieee8021PbCVidRegistrationGroup=ieee8021PbCVidRegistrationGroup, ieee8021PbDynamicCnpGroup=ieee8021PbDynamicCnpGroup, ieee8021PbDynamicRcapGroup=ieee8021PbDynamicRcapGroup, ieee8021PbCVidRegistrationEntry=ieee8021PbCVidRegistrationEntry, ieee8021PbEdgePortDefaultUserPriority=ieee8021PbEdgePortDefaultUserPriority, ieee8021PbServicePriorityRegenerationTable=ieee8021PbServicePriorityRegenerationTable, ieee8021PbObjects=ieee8021PbObjects, ieee8021PbCompliance=ieee8021PbCompliance, ieee8021PbCVidRegistrationUntaggedCep=ieee8021PbCVidRegistrationUntaggedCep, ieee8021PbPnpRowStatus=ieee8021PbPnpRowStatus, ieee8021PbVidTranslationEntry=ieee8021PbVidTranslationEntry, ieee8021PbInternalInterfaceTable=ieee8021PbInternalInterfaceTable, ieee8021PbInternalInterfaceGroup=ieee8021PbInternalInterfaceGroup, ieee8021PbMib=ieee8021PbMib, ieee8021PbVidTranslationRowStatus=ieee8021PbVidTranslationRowStatus, ieee8021PbPnpEntry=ieee8021PbPnpEntry, ieee8021PbIiExternalSVid=ieee8021PbIiExternalSVid, ieee8021PbDynamicPnpGroup=ieee8021PbDynamicPnpGroup, ieee8021PbRcapRcapPortNumber=ieee8021PbRcapRcapPortNumber, ieee8021PbServicePriorityRegenerationRegeneratedPriority=ieee8021PbServicePriorityRegenerationRegeneratedPriority, ieee8021PbCnpSVid=ieee8021PbCnpSVid, ieee8021PbCVidRegistrationSVid=ieee8021PbCVidRegistrationSVid, ieee8021PbPnpTable=ieee8021PbPnpTable, ieee8021PbIiInternalPortNumber=ieee8021PbIiInternalPortNumber)
