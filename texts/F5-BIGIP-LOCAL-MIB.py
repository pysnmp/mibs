#
# PySNMP MIB module F5-BIGIP-LOCAL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/f5/F5-BIGIP-LOCAL-MIB
# Produced by pysmi-1.1.12 at Mon Jun  3 10:57:00 2024
# On host fv-az1986-135 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
bigipTrafficMgmt, bigipGroups, bigipCompliances, LongDisplayString = mibBuilder.importSymbols("F5-BIGIP-COMMON-MIB", "bigipTrafficMgmt", "bigipGroups", "bigipCompliances", "LongDisplayString")
InetAddress, InetAddressType, InetPortNumber = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetPortNumber")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, iso, Integer32, enterprises, ModuleIdentity, Counter64, Counter32, Unsigned32, NotificationType, Opaque, Gauge32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Integer32", "enterprises", "ModuleIdentity", "Counter64", "Counter32", "Unsigned32", "NotificationType", "Opaque", "Gauge32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "TimeTicks")
DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "TextualConvention")
bigipLocalTM = ModuleIdentity((1, 3, 6, 1, 4, 1, 3375, 2, 2))
if mibBuilder.loadTexts: bigipLocalTM.setLastUpdated('202012212250Z')
if mibBuilder.loadTexts: bigipLocalTM.setOrganization('F5 Networks, Inc.')
if mibBuilder.loadTexts: bigipLocalTM.setContactInfo('postal: F5 Networks, Inc. \n\t \t  801 Fifth Avenue\n                  Seattle, WA 98104\n          phone:  (206) 272-6500\n          email:  support@f5.com')
if mibBuilder.loadTexts: bigipLocalTM.setDescription('Top-level infrastructure of the F5 enterprise MIB tree.')
ltmGlobals = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1))
ltmMirrors = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2))
ltmNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3))
ltmNodes = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4))
ltmPools = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5))
ltmProfiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6))
ltmRateFilters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7))
ltmRules = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8))
ltmSNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9))
ltmVirtualServers = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10))
ltmRst = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11))
ltmDNS = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12))
ltmBWC = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13))
ltmLSNs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14))
ltmRouteDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15))
ltmPolicies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16))
ltmOCSPStapling = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17))
ltmFwNATs = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18))
ltmGlobalAttr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1))
ltmDosAttackDataStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2))
ltmFwAdminIpRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3))
ltmFwIpintGlobalStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4))
ltmFwRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5))
ltmFwContextStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6))
ltmMirrorPort = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1))
ltmMirrorPortMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2))
ltmNat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1))
ltmNatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2))
ltmNatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3))
ltmNodeAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1))
ltmNodeAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2))
ltmNodeAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3))
ltmPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1))
ltmPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2))
ltmPoolMember = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3))
ltmPoolMemberStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4))
ltmPoolStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5))
ltmPoolMemberStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6))
ltmAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1))
ltmClientSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2))
ltmServerSsl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3))
ltmConnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4))
ltmFastL4 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5))
ltmFtp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6))
ltmHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7))
ltmPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8))
ltmStream = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9))
ltmTcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10))
ltmUdp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11))
ltmFastHttp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12))
ltmXml = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13))
ltmDns = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14))
ltmHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15))
ltmIiop = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16))
ltmRtsp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17))
ltmSctp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18))
ltmUserStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19))
ltmSip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20))
ltmIsession = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21))
ltmHttpCompression = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22))
ltmWebAcceleration = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23))
ltmDos = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24))
ltmSpdy = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25))
ltmV6rd = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26))
ltmPptp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27))
ltmPcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28))
ltmAlgLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29))
ltmLsnLog = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30))
ltmTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31))
ltmHttp2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32))
ltmWebsocket = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33))
ltmTcpanalytics = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34))
ltmIpsecalg = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35))
ltmSplitsessionclient = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36))
ltmSplitsessionserver = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37))
ltmHttpProxyConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38))
ltmDiametersession = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39))
ltmDiameterrouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40))
ltmMrPmbrDiameter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41))
ltmSipsession = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42))
ltmSiprouter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43))
ltmMrPmbrSip = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44))
ltmAuthProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1))
ltmAuthProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2))
ltmClientSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1))
ltmClientSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2))
ltmClientSslCertKeyChain = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3))
ltmServerSslProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1))
ltmServerSslProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2))
ltmServerSslProfileC3dCertExtensionCustomOids = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3))
ltmConnPoolProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1))
ltmConnPoolProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2))
ltmFastL4Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1))
ltmFastL4ProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2))
ltmFtpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1))
ltmFtpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2))
ltmHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1))
ltmHttpProfileCompUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2))
ltmHttpProfileCompUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3))
ltmHttpProfileCompContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4))
ltmHttpProfileCompContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5))
ltmHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6))
ltmHttpProfileRamUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7))
ltmHttpProfileRamUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8))
ltmHttpProfileRamUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9))
ltmHttpProfileFallbackStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10))
ltmHttpProfileRespHeadersPerm = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11))
ltmHttpProfileEncCookies = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12))
ltmHttpProfileKnownMethods = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13))
ltmPersistProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1))
ltmStreamProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1))
ltmStreamProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2))
ltmTcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1))
ltmTcpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2))
ltmUdpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1))
ltmUdpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2))
ltmFastHttpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1))
ltmFastHttpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2))
ltmXmlProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1))
ltmXmlProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2))
ltmXmlProfileXpathQueries = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3))
ltmXmlProfileNamespaceMappings = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4))
ltmHttpClassProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1))
ltmHttpClassProfileHost = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2))
ltmHttpClassProfileUri = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3))
ltmHttpClassProfileHead = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4))
ltmHttpClassProfileCook = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5))
ltmHttpClassProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6))
ltmIiopProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1))
ltmIiopProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2))
ltmRtspProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1))
ltmRtspProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2))
ltmSctpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1))
ltmSctpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2))
ltmUserStatProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1))
ltmUserStatProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2))
ltmSipProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1))
ltmSipProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2))
ltmIsessionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1))
ltmIsessionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2))
ltmHttpCompressionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1))
ltmHttpCompressionProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2))
ltmHttpCompressionProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3))
ltmHttpCompressionProfileContTypeIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4))
ltmHttpCompressionProfileContTypeExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5))
ltmHttpCompressionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6))
ltmWebAccelerationProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1))
ltmWebAccelerationProfileUriExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2))
ltmWebAccelerationProfileUriIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3))
ltmWebAccelerationProfileUriPin = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4))
ltmWebAccelerationProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5))
ltmWebAccelerationProfileUriOver = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6))
ltmDnsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1))
ltmDnsProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2))
ltmDosProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1))
ltmDosApplication = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2))
ltmDosWhiteIp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3))
ltmDosApplicationHeavyUrlIncl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4))
ltmDosApplicationHeavyUrlExcl = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5))
ltmRateFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1))
ltmRateFilterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2))
ltmRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1))
ltmRuleEvent = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2))
ltmRuleEventStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3))
ltmSnat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1))
ltmSnatStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2))
ltmSnatVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3))
ltmSnatOrigAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4))
ltmTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5))
ltmTransAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6))
ltmSnatPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7))
ltmSnatPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8))
ltmSnatpoolTransAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9))
ltmVirtualServ = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1))
ltmVirtualServStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2))
ltmVirtualServAuth = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3))
ltmVirtualServPersist = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4))
ltmVirtualServProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5))
ltmVirtualServPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6))
ltmVirtualServClonePool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7))
ltmVirtualServRule = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8))
ltmVirtualServVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9))
ltmVirtualAddr = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10))
ltmVirtualAddrStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11))
ltmVirtualServHttpClass = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12))
ltmVirtualServStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13))
ltmVirtualAddrStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14))
ltmVirtualModuleScore = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15))
ltmNetworkAttackDataStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16))
ltmFwIpintVirtualStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17))
ltmRstCauseStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1))
ltmDnsCache = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1))
ltmDnsCacheStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2))
ltmDnsSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3))
ltmDnsSecurityStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4))
ltmDnsQueryFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5))
ltmDnsHeaderFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6))
ltmDnsExpressStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7))
ltmDnsServerStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8))
ltmDnsCacheForwardZone = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9))
ltmDnsCacheForwardZoneNameServer = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10))
ltmBwcPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1))
ltmLsnPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1))
ltmLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2))
ltmLsnPrefixLsnPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3))
ltmLsnPrefixLsnPoolBackup = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4))
ltmLsnPoolVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5))
ltmLsnPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6))
ltmLsnPoolFailureStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7))
ltmFwNatDynamicPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1))
ltmFwNatDynamicPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2))
ltmFwNatDynamicPoolFailureStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3))
ltmFwNatStaticSourceTranslationPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4))
ltmFwNatStaticSourceTranslationPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5))
ltmFwNatStaticDestinationTranslationPool = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6))
ltmFwNatStaticDestinationTranslationPoolStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7))
ltmSpdyProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1))
ltmSpdyProfileProtocolVersions = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2))
ltmSpdyProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3))
ltmV6rdProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1))
ltmPptpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1))
ltmPptpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2))
ltmPcpPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1))
ltmPcpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2))
ltmPcpPrefixProfilePcp = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3))
ltmPcpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4))
ltmFwIpintRouteDomainStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1))
ltmRouteDomainStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2))
ltmFlowEvictionPolicyStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1))
ltmFwPolicyRuleStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2))
ltmAlgLogProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1))
ltmAlgLogProfileStartControlElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2))
ltmAlgLogProfileEndControlElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3))
ltmAlgLogProfileStartDataElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4))
ltmAlgLogProfileEndDataElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5))
ltmLsnLogProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1))
ltmLsnLogProfileStartOutboundElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2))
ltmLsnLogProfileEndOutboundElements = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3))
ltmOcspStaplingParameters = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1))
ltmTftpProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1))
ltmTftpProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2))
ltmIpsecalgProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1))
ltmIpsecalgProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2))
ltmHttp2Profile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1))
ltmHttp2ProfileActivationModes = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2))
ltmHttp2ProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3))
ltmWebsocketProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1))
ltmWebsocketProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2))
ltmTcpanalyticsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1))
ltmSplitsessionclientProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1))
ltmSplitsessionclientProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2))
ltmSplitsessionserverProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1))
ltmSplitsessionserverProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2))
ltmHttpProxyConnectProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1))
ltmHttpProxyConnectProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2))
ltmDiametersessionProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1))
ltmDiametersessionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2))
ltmDiameterrouterProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1))
ltmDiameterrouterProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2))
ltmMrPmbrDiameterSessionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1))
ltmMrPmbrDiameterRouterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2))
ltmSipsessionProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1))
ltmSiprouterProfileStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1))
ltmMrPmbrSipSessionStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1))
ltmMrPmbrSipRouterStat = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2))
ltmAttrLbmodeFastestMaxIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrLbmodeFastestMaxIdleTime.setStatus('deprecated')
if mibBuilder.loadTexts: ltmAttrLbmodeFastestMaxIdleTime.setDescription('Deprecated! \n\t\tvariable LBMode.FastertMaxIdleTime is purged')
ltmAttrMirrorState = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorState.setStatus('current')
if mibBuilder.loadTexts: ltmAttrMirrorState.setDescription('The state of mirroring in redundant systems.')
ltmAttrPersistDestAddrLimitMode = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("timeout", 0), ("maxcount", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrLimitMode.setStatus('current')
if mibBuilder.loadTexts: ltmAttrPersistDestAddrLimitMode.setDescription('The method of limiting destination address entries.')
ltmAttrPersistDestAddrMaxCount = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrPersistDestAddrMaxCount.setStatus('current')
if mibBuilder.loadTexts: ltmAttrPersistDestAddrMaxCount.setDescription('The maximum number of entries allowed for the destination address entries.')
ltmAttrSnatAnyIpProtocol = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrSnatAnyIpProtocol.setStatus('current')
if mibBuilder.loadTexts: ltmAttrSnatAnyIpProtocol.setDescription('The status of the feature that allows any IP traffic \n\t\t through SNATs.')
ltmAttrMirrorPeerIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAttrMirrorPeerIpAddr.setStatus('current')
if mibBuilder.loadTexts: ltmAttrMirrorPeerIpAddr.setDescription('The IP address of the mirroring peer in redundant systems')
ltmRateFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterNumber.setDescription('The number of ltmRateFilter entries in the table.')
ltmRateFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2), )
if mibBuilder.loadTexts: ltmRateFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterTable.setDescription('A table containing information of rate filters for shaping.')
ltmRateFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"))
if mibBuilder.loadTexts: ltmRateFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterEntry.setDescription('Columns in the ltmRateFilter Table')
ltmRateFilterCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterCname.setDescription('The rate class name specified by the user according to the  \n\t\t same syntax allowed for rules or pool names')
ltmRateFilterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterRate.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterRate.setDescription('The base rate. It is a number which may be postfixed with a \n\t\t metric of either bps, Kbps or Mbps, to indicate bits per \n\t\t second, Kilobits per second, or Megabits per second, \n\t\t respectively. \n\t\t Note: these numbers are powers of 10, not powers of 2. \n\t\t If no postfix is specified, the number is interpreted as bps. \n\t\t The rate specifies the maximum throughput to allot to traffic \n\t\t handled by the Rate Class. Packets in excess of the posted \n\t\t rate will be dropped.')
ltmRateFilterCeil = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterCeil.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterCeil.setDescription('The ceiling rate. It is defined like the base rate, but specifies \n\t\t how far beyond the base rate the traffic is allowed to flow \n\t\t when bursting (details on bursting below). The ceiling rate is \n\t\t an absolute limit - it is impossible for traffic to flow at a \n\t\t higher rate than the ceiling rate, even when bursting. If the \n\t\t ceiling rate is omitted or is equal to the base rate, the \n\t\t traffic may not exceed the base rate. It is illegal for the \n\t\t ceiling rate to be less than the base rate.')
ltmRateFilterBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterBurst.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterBurst.setDescription('The burst size. It specifies the maximum number of bytes the \n\t\t traffic is allowed to burst when exceeding the base rate. The \n\t\t burst size is measured in bytes. If omitted, a default burst \n\t\tsize is 0.')
ltmRateFilterPname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterPname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterPname.setDescription('The parent rate class name. It indicates that the rate class \n\t\t is a child of the named parent. Any child rate class has the \n\t\t ability to borrow bandwidth from its parent. (Borrowing is a \n\t\t feature which allows a child to burst even beyond the burst \n\t\t size by borrowing from the burst size of a parent.) If omitted, \n\t\t the rate class is not a child, but may be a parent if another \n\t\t rate class refers to it as such.')
ltmRateFilterQtype = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("sfq", 1), ("pfifo", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterQtype.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterQtype.setDescription('The queue discipline type.\n\t\t none  - invalid state;\n\t\t sfq   - stochastic fair queue;\n\t\t pfifo - priority FIFO.')
ltmRateFilterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("any", 0), ("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterDirection.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterDirection.setDescription('The state of the direction which the filter shapes traffic to.\n\t\tany    - shape to the client and server;\n\t\tclient - only shape traffic to the client;\n\t\tserver - only shape traffic to the server.')
ltmRateFilterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRateFilterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatResetStats.setDescription('The action to reset resettable statistics data in ltmRateFilterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmRateFilterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatNumber.setDescription('The number of ltmRateFilterStat entries in the table.')
ltmRateFilterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3), )
if mibBuilder.loadTexts: ltmRateFilterStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatTable.setDescription('A table containing statistic information of rate filters for shaping.')
ltmRateFilterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"))
if mibBuilder.loadTexts: ltmRateFilterStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatEntry.setDescription('Columns in the ltmRateFilterStat Table')
ltmRateFilterStatCname = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatCname.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatCname.setDescription('The rate class name specified by the user according to the  \n\t\t same syntax allowed for rules or pool names')
ltmRateFilterStatRateBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatRateBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatRateBytes.setDescription('The number of bytes at or below base rate - increments by 1 for \n\t\t every byte of every packet handled at or below the base rate.')
ltmRateFilterStatBurstBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBurstBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBurstBytes.setDescription('The number of bytes bursted (above base rate) - increments by \n\t\t 1 for every byte of every packet handled above the base rate \n\t\t (i.e. bursted traffic)')
ltmRateFilterStatDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDroppedBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRateFilterStatDroppedBytes.setDescription('Deprecated!  \n\t\t Replaced by ltmRateFilterStatDropTotBytes: \n\t\t the number of bytes dropped - increments by 1 for every byte  \n\t\t of every packet dropped by the rate class.')
ltmRateFilterStatBytesQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesQueued.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBytesQueued.setDescription('The number of bytes queued.')
ltmRateFilterStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatBytesPerSec.setDescription('The average bytes/sec over last 4 sec.')
ltmRateFilterStatDropTailPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTailPkts.setDescription('The number of packets dropped - increments by 1 for\n\t         every packet dropped by the rate class as queue overflow.')
ltmRateFilterStatDropTailBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTailBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTailBytes.setDescription('The number of bytes dropped - increments by 1 for every byte\n\t         of every packet dropped by the rate class as queue overflow.')
ltmRateFilterStatDropRandPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropRandPkts.setDescription('The number of packets dropped - increments by 1 for\n\t         every packet dropped by the rate class as RED or FRED policy.')
ltmRateFilterStatDropRandBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropRandBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropRandBytes.setDescription('The  number of bytes dropped - increments by 1 for every byte\n\t         of every packet dropped by the rate class as RED or FRED policy.')
ltmRateFilterStatDropTotPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotPkts.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTotPkts.setDescription('The total number of packets dropped - increments by 1 for\n\t         every packet dropped by the rate class.')
ltmRateFilterStatDropTotBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 7, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRateFilterStatDropTotBytes.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatDropTotBytes.setDescription('The total number of bytes dropped - increments by 1 for every byte\n\t         of every packet dropped by the rate class.')
ltmMirrorPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortNumber.setDescription('The number of ltmMirrorPort entries in the table.')
ltmMirrorPortTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2), )
if mibBuilder.loadTexts: ltmMirrorPortTable.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortTable.setDescription('A table containing information of mirrored ports.')
ltmMirrorPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"))
if mibBuilder.loadTexts: ltmMirrorPortEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortEntry.setDescription('Columns in the ltmMirrorPort Table')
ltmMirrorPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortName.setDescription('The name of a port to which is mirrored.')
ltmMirrorPortMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberNumber.setDescription('The number of ltmMirrorPortMember entries in the table.')
ltmMirrorPortMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2), )
if mibBuilder.loadTexts: ltmMirrorPortMemberTable.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberTable.setDescription('A table containing information of mirrored port members.')
ltmMirrorPortMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"))
if mibBuilder.loadTexts: ltmMirrorPortMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberEntry.setDescription('Columns in the ltmMirrorPortMember Table')
ltmMirrorPortMemberToName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberToName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberToName.setDescription('The name of a port which it is mirrored to.')
ltmMirrorPortMemberName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberName.setDescription('The name of a mirrored port.')
ltmMirrorPortMemberConduitName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 2, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMirrorPortMemberConduitName.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberConduitName.setDescription('This attribute is used to represent a local edge port \n\t\twhen a conduit between switch devices is necessary.')
ltmNatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatNumber.setDescription('The number of ltmNat entries in the table.')
ltmNatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2), )
if mibBuilder.loadTexts: ltmNatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatTable.setDescription('A table containing information of NAT.')
ltmNatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatName"))
if mibBuilder.loadTexts: ltmNatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatEntry.setDescription('Columns in the ltmNat Table')
ltmNatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNatTransAddrType.setDescription('The IP address type of ltmNatTransAddr')
ltmNatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNatTransAddr.setDescription('The NAT translation address. It is \n\t\tinterpreted within the context of a ltmNatTransAddrType value.')
ltmNatOrigAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNatOrigAddrType.setDescription('The IP address type of ltmNatOrigAddr.')
ltmNatOrigAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatOrigAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNatOrigAddr.setDescription('The NAT original address associated with the specified NAT translation address. \n\t\tIt is interpreted within the context of a ltmNatOrigAddrType value.')
ltmNatEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmNatEnabled.setDescription('The state indicating whether the specified NAT address is enabled or not.')
ltmNatArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmNatArpEnabled.setDescription('The ARP state for the specified NAT, whether it is enabled or not.')
ltmNatUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmNatUnitId.setDescription('The unit number associated with the specified NAT translation address.')
ltmNatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmNatListedEnabledVlans.setDescription('The state indicating whether associated VLANs are NAT enabled or not.\n\t\tThe associated VLANs are listed in ltmNatVlanTable.')
ltmNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatName.setDescription('Name of the nat')
ltmNatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNatStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatResetStats.setDescription('The action to reset resettable statistics data in ltmNatStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmNatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatNumber.setDescription('The number of ltmNatStat entries in the table.')
ltmNatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3), )
if mibBuilder.loadTexts: ltmNatStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatTable.setDescription('A table containing statistic information of NAT.')
ltmNatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatStatName"))
if mibBuilder.loadTexts: ltmNatStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatEntry.setDescription('Columns in the ltmNatStat Table')
ltmNatStatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatStatTransAddrType.setDescription('Deprecated!  \n\t\t The IP address type of ltmNatStatTransAddr')
ltmNatStatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatTransAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatStatTransAddr.setDescription('Deprecated!  \n\t\tThe NAT translation address. It is \n\t\tinterpreted within the context of a ltmNatStatTransAddrType value.')
ltmNatStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmNatStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmNatStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmNatStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmNatStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmNatStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerTotConns.setDescription('The total connections from server-side.')
ltmNatStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatServerCurConns.setDescription('The current connections from server-side.')
ltmNatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 2, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatStatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatName.setDescription('Name of the nat')
ltmNatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanNumber.setDescription('The number of ltmNatVlan entries in the table.')
ltmNatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2), )
if mibBuilder.loadTexts: ltmNatVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanTable.setDescription('A table containing VLAN information associated with NAT.')
ltmNatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"))
if mibBuilder.loadTexts: ltmNatVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanEntry.setDescription('Columns in the ltmNatVlan Table')
ltmNatVlanTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatVlanTransAddrType.setDescription('Deprecated! Use nat_name to associate vlan to NAT.\n\t\t The IP address type of ltmNatVlanTransAddr')
ltmNatVlanTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanTransAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNatVlanTransAddr.setDescription('Deprecated! Use nat_name to associate vlan to NAT.\n\t\tThe NAT translation address. It is interpreted within \n\t\tthe context of a ltmNatVlanTransAddrType value.')
ltmNatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanVlanName.setDescription('The name of a VLAN associated with the specified NAT.\n\t\tOnly when ltmNatListedEnabledVlans is set to enable, \n\t\tNAT is enabled on the VLAN. ')
ltmNatVlanNatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 3, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNatVlanNatName.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanNatName.setDescription('Name of the nat')
ltmNodeAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrNumber.setDescription('The number of ltmNodeAddr entries in the table.')
ltmNodeAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2), )
if mibBuilder.loadTexts: ltmNodeAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrTable.setDescription('A table containing information of node addresses.')
ltmNodeAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"))
if mibBuilder.loadTexts: ltmNodeAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrEntry.setDescription('Columns in the ltmNodeAddr Table')
ltmNodeAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrAddrType.setDescription('The IP address type of ltmNodeAddrAddr.')
ltmNodeAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrAddr.setDescription('The IP address of a node. It is interpreted within \n\t\t the context of a ltmNodeAddrAddrType value.')
ltmNodeAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrConnLimit.setDescription('The maximum number of connections the specified node address is \n\t\t allowed to have open at one time.')
ltmNodeAddrRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrRatio.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrRatio.setDescription('The ratio of the specified node address, used in load balance algorithm.')
ltmNodeAddrDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDynamicRatio.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrDynamicRatio.setDescription('The dynamic ratio of the specified node address, used in load balance algorithm.')
ltmNodeAddrMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 19, 20, 22, 23, 24, 25, 26, 27, 28, 29))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forcedUp", 3), ("up", 4), ("down", 19), ("forcedDown", 20), ("iruleDown", 22), ("inbandDown", 23), ("downManualResume", 24), ("disabled", 25), ("fqdnChecking", 26), ("fqdnDown", 27), ("fqdnUp", 28), ("fqdnUpNoAddress", 29)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrMonitorState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorState.setDescription('The internal tmm monitor state for the specified node address.')
ltmNodeAddrMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 18, 19, 20, 21, 22, 23, 24, 26, 27, 28, 29))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forcedUp", 3), ("up", 4), ("addrDown", 18), ("down", 19), ("forcedDown", 20), ("maint", 21), ("iruleDown", 22), ("inbandDown", 23), ("downManualResume", 24), ("fqdnChecking", 26), ("fqdnDown", 27), ("fqdnUp", 28), ("fqdnUpNoAddress", 29)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorStatus.setDescription('The hierarchical load balance state for the specified node address, including parent status. \n\t\t unchecked - enabled node that is not monitored;\n\t\t checking  - initial state until monitor reports;\n\t\t inband    - the tmm has marked the node up;\n\t\t forcedUp - forced up manually;\n\t\t up        - enabled node when its monitors succeed;\n\t\t addrDown   - node address monitor fails or forced down;\n\t\t down        - enabled node when its monitors fail;\n\t\t forcedDown  - node forced down manually;\n\t\t maint       - in maintenance mode;\n\t\t iruleDown   - an iRule has marked the node down;\n\t\t inbandDown  - the tmm has marked the node down;\n\t\t downManualResume - the node is down and must be manually enabled;\n\t\t fqdnChecking - initial fqdn node state until monitor reports;\n\t\t fqdnDown    - enabled fqdn node when its monitors fail;\n\t\t fqdnUp      - enabled fqdn node when its monitors succeed;\n\t\t fqdnUpNoAddress - no dns records returned for fqdn node;\n\t\t ')
ltmNodeAddrMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrMonitorRule.setDescription('The monitor rule used for load balance the specified node address.')
ltmNodeAddrNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("userDisabled", 1), ("userEnabled", 2), ("monitorEnabled", 3), ("monitorDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrNewSessionEnable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrNewSessionEnable.setDescription('Deprecated!  \n\t\t The state indicating whether a new session can be enabled or not for the specified node address.')
ltmNodeAddrSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrSessionStatus.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrSessionStatus.setDescription('The hierarchical status of the session, including parent status, for \n\t\tthe specified node address.\n\t\tenabled       - new sessions enabled;\n\t\taddrdisabled - new sessions disabled on node address;\n\t\tservdisabled - new sessions disabled on node server;\n\t\tdisabled      - new sessions disabled;\n\t\tforceddisabled - new sessions forced to be disabled.')
ltmNodeAddrPoolMemberRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrPoolMemberRefCount.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrPoolMemberRefCount.setDescription('Deprecated!\n\t        Node Address tracking method changed. The node address member reference count is no longer used.')
ltmNodeAddrScreenName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrScreenName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrScreenName.setDescription('Deprecated! This field is removed.\n\t\tThe screen names for the specified node address.')
ltmNodeAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrAvailabilityState.setDescription('Deprecated!  \n\t\tReplaced by ltmNodeAddrStatusAvailState under ltmNodeAddrStatus.\n\t\tThe state of the specified node address availability indicated in color.')
ltmNodeAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrEnabledState.setDescription('Deprecated! \n\t\tReplaced by ltmNodeAddrStatusEnabledState under ltmNodeAddrStatus.\n\t\tThe state of the specified node address activity status, as specified \n\t\tby the user.')
ltmNodeAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrDisabledParentType.setDescription('Deprecated! \n\t\tReplaced by ltmNodeAddrStatusParentType under ltmNodeAddrStatus.\n\t\tThe type of parent object which disabled the specified node address.')
ltmNodeAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatusReason.setDescription("Deprecated! \n\t\tReplaced by ltmNodeAddrStatusDetailReason under ltmNodeAddrStatus.\n\t\tThe detail description of the node's status of parent object \n\t\twhich disabled the specified node address.")
ltmNodeAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrName.setDescription('node name.')
ltmNodeAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNodeAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatResetStats.setDescription('The action to reset resettable statistics data in ltmNodeAddrStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmNodeAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatNumber.setDescription('The number of ltmNodeAddrStat entries in the table.')
ltmNodeAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3), )
if mibBuilder.loadTexts: ltmNodeAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTable.setDescription('A table containing statistic information of node addresses.')
ltmNodeAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"))
if mibBuilder.loadTexts: ltmNodeAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatEntry.setDescription('Columns in the ltmNodeAddrStat Table')
ltmNodeAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatAddrType.setDescription('Deprecated! use node_name instead, \n\t    The IP address type of ltmNodeAddrStatAddr')
ltmNodeAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatAddr.setDescription('Deprecated! use node_name instead, \n\t\t The IP address of a node. It is interpreted within \n\t\t the context of an ltmNodeAddrStatAddrType value.')
ltmNodeAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsIn.setDescription('The number of packets received by the specified node address from server-side.')
ltmNodeAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesIn.setDescription('The number of bytes received by the specified node address from server-side.')
ltmNodeAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified node address.')
ltmNodeAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified node address.')
ltmNodeAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerMaxConns.setDescription('The maximum connections from server-side to the specified node address.')
ltmNodeAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerTotConns.setDescription('The total connections from server-side to the specified node address.')
ltmNodeAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatServerCurConns.setDescription('The current connections from server-side to the specified node address.')
ltmNodeAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified node address.')
ltmNodeAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified node address.')
ltmNodeAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified node address.')
ltmNodeAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified node address.')
ltmNodeAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified node address.')
ltmNodeAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified node address.')
ltmNodeAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified node address.')
ltmNodeAddrStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTotRequests.setDescription('The total number of requests going through the specified node address.')
ltmNodeAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatTotPvaAssistConn.setDescription('The total number of connections to the specified node address, \n\t\twhich are partially hardware accelerated.')
ltmNodeAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurrPvaAssistConn.setDescription('The current number of connections to the specified node address,\n\t\t which are partially hardware accelerated.')
ltmNodeAddrStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatNodeName.setDescription('node name')
ltmNodeAddrStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurSessions.setDescription('The number of current sessions going through the specified node address.')
ltmNodeAddrStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatCurrentConnsPerSec.setDescription('The last recorded value for the number of connections to the node address when connections hit a rate limit; this calculation is only maintained if rate limiting is configured for the node.')
ltmNodeAddrStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 2, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatDurationRateExceeded.setDescription('Duration of time in seconds the specified node address has exceeded the \n\t\tconfigured connection rate limit.')
ltmPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolNumber.setDescription('The number of ltmPool entries in the table.')
ltmPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2), )
if mibBuilder.loadTexts: ltmPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolTable.setDescription('A table containing information of pools.')
ltmPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolName"))
if mibBuilder.loadTexts: ltmPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolEntry.setDescription('Columns in the ltmPool Table')
ltmPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolName.setDescription('The name of a pool.')
ltmPoolLbMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17))).clone(namedValues=NamedValues(("roundRobin", 0), ("ratioMember", 1), ("leastConnMember", 2), ("observedMember", 3), ("predictiveMember", 4), ("ratioNodeAddress", 5), ("leastConnNodeAddress", 6), ("fastestNodeAddress", 7), ("observedNodeAddress", 8), ("predictiveNodeAddress", 9), ("dynamicRatio", 10), ("fastestAppResponse", 11), ("leastSessions", 12), ("dynamicRatioMember", 13), ("l3Addr", 14), ("weightedLeastConnMember", 15), ("weightedLeastConnNodeAddr", 16), ("ratioSession", 17)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLbMode.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLbMode.setDescription('The load balance method for this pool')
ltmPoolActionOnServiceDown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("reset", 1), ("drop", 2), ("reselect", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActionOnServiceDown.setStatus('current')
if mibBuilder.loadTexts: ltmPoolActionOnServiceDown.setDescription('The action to be taken if the service for the specified pool is down.')
ltmPoolMinUpMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembers.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMembers.setDescription('The minimum number of UP members required for the specified pool \n\t\tbefore a high availability action to be taken. \n\t\tThis is used when ltmPoolMinUpMembersEnable is true.')
ltmPoolMinUpMembersEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMembersEnable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMembersEnable.setDescription('The state indicating whether or not an action will be taken when the \n\t\tminimum number of UP members requirement is not met for the specified pool.')
ltmPoolMinUpMemberAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("unusedhaaction", 0), ("reboot", 1), ("restart", 2), ("failover", 3), ("goactive", 4), ("noaction", 5), ("restartall", 6), ("failoveraborttm", 7), ("gooffline", 8), ("goofflinerestart", 9), ("goofflineaborttm", 10), ("goofflinedownlinks", 11), ("goofflinedownlinksrestart", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinUpMemberAction.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinUpMemberAction.setDescription('The action to be taken if the minimum number of UP members requirement \n\t\tis not met for the specified pool. This is used when \n\t\tltmPoolMinUpMembersEnable is true.')
ltmPoolMinActiveMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMinActiveMembers.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMinActiveMembers.setDescription('The minimum number of active members required for traffic to be sent to \n\t\tthe specified pool. This feature is used for priority pools. The minimum \n\t\tactive members take into account both the status of the pool member (up/down) \n\t\tas well as the number of connections present on the pool member.  \n\t\tIf the number of active members falls below this given threshold, \n\t\ttraffic is sent to the next priority pool.')
ltmPoolActiveMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolActiveMemberCnt.setStatus('current')
if mibBuilder.loadTexts: ltmPoolActiveMemberCnt.setDescription('The number of the current active members in the specified pool.')
ltmPoolDisallowSnat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("disallowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowSnat.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDisallowSnat.setDescription('The state whether SNAT is disallowed or not for the specified pool.')
ltmPoolDisallowNat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("allowed", 0), ("disallowed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisallowNat.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDisallowNat.setDescription('The state whether NAT is disallowed or not for the specified pool.')
ltmPoolSimpleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSimpleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmPoolSimpleTimeout.setDescription('The timeout (in seconds) in simple persistence for the specified pool.')
ltmPoolIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmPoolIpTosToClient.setDescription('The IP ToS value for client traffic for the specified pool.')
ltmPoolIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolIpTosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmPoolIpTosToServer.setDescription('The IP ToS value for server traffic for the specified pool.')
ltmPoolLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLinkQosToClient.setDescription('The link QoS value for client traffic for the specified pool.')
ltmPoolLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolLinkQosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmPoolLinkQosToServer.setDescription('The link QoS value for server traffic for the specified pool.')
ltmPoolDynamicRatioSum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDynamicRatioSum.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDynamicRatioSum.setDescription('The sum of the dynamic ratio from all the members of the specified pool.')
ltmPoolMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMonitorRule.setDescription('The name of monitor rule used by the specified pool.')
ltmPoolAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolAvailabilityState.setDescription('Deprecated!  \n\t\tReplaced by ltmPooltatusAvailState under ltmPoolStatus.\n\t\tThe state of the specified pool availability indicated in color.')
ltmPoolEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolEnabledState.setDescription('Deprecated!  \n\t\tReplaced by ltmPoolStatusEnabledState under ltmPoolStatus.\n\t\tThe state of the specified pool activity status, as specified by the user.')
ltmPoolDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolDisabledParentType.setDescription('Deprecated!  \n\t\tReplaced by ltmPoolStatusParentType under ltmPoolStatus.\n\t\tThe type of parent object which disabled the specified pool.')
ltmPoolStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolStatusReason.setDescription("Deprecated!  \n\t\tReplaced by ltmPoolStatusDetailReason under ltmPoolStatus.\n\t\tThe detail description of the pool's status of parent object \n\t\twhich disabled the specified pool.")
ltmPoolSlowRampTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolSlowRampTime.setStatus('current')
if mibBuilder.loadTexts: ltmPoolSlowRampTime.setDescription('The ramp-up time (in seconds) to gradually ramp up the load \n\t\ton newly added or freshly detected UP pool members.')
ltmPoolMemberCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberCnt.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberCnt.setDescription('The total number of members in the specified pool.')
ltmPoolQueueOnConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueOnConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueOnConnectionLimit.setDescription('Enable or disable queuing based on pool member connection limits.')
ltmPoolQueueDepthLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueDepthLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueDepthLimit.setDescription('Maximum number of connections in queue for pool and all members.\n\t\tNo limit if unspecified or 0.')
ltmPoolQueueTimeLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolQueueTimeLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolQueueTimeLimit.setDescription('Maximum number of milliseconds a connection may stay queued.\n\t\tNo limit if unspecified or 0.')
ltmPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 1, 2, 1, 27), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolDescription.setStatus('current')
if mibBuilder.loadTexts: ltmPoolDescription.setDescription('The description of the pool.')
ltmPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatNumber.setDescription('The number of ltmPoolStat entries in the table.')
ltmPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3), )
if mibBuilder.loadTexts: ltmPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTable.setDescription('A table containing statistic information of pools.')
ltmPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"))
if mibBuilder.loadTexts: ltmPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatEntry.setDescription('Columns in the ltmPoolStat Table')
ltmPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatName.setDescription('The name of this pool.')
ltmPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerPktsIn.setDescription('The number of packets received by the specified pool from server-side.')
ltmPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerBytesIn.setDescription('The number of bytes received by the specified pool from server-side.')
ltmPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified pool.')
ltmPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified pool.')
ltmPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerMaxConns.setDescription('The maximum connections from server-side to the specified pool.')
ltmPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerTotConns.setDescription('The total connections from server-side to the specified pool.')
ltmPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatServerCurConns.setDescription('The current connections from server-side to the specified pool.')
ltmPoolStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaPktsIn.setDescription('The number of hardware accelerated packets received by the specified pool.')
ltmPoolStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaBytesIn.setDescription('The number of hardware accelerated bytes received by the specified pool.')
ltmPoolStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaPktsOut.setDescription('The number of hardware accelerated packets sent out from the specified pool.')
ltmPoolStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified pool.')
ltmPoolStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified pool.')
ltmPoolStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified pool.')
ltmPoolStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified pool.')
ltmPoolStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTotPvaAssistConn.setDescription('The total number of connections to the specified pool, \n\t\twhich are partially hardware accelerated.')
ltmPoolStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatCurrPvaAssistConn.setDescription('The current number of connections to the specified pool, \n\t\twhich are partially hardware accelerated.')
ltmPoolStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqDepth.setDescription('Number of connections currently in queue, sum.')
ltmPoolStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeHead.setDescription('Age in milliseconds of the oldest queue entry, max.')
ltmPoolStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeMax.setDescription('Maximum queue entry age in milliseconds, max.')
ltmPoolStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEma.setDescription('Exponential moving average queue entry age in milliseconds, max.')
ltmPoolStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds, max.')
ltmPoolStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqServiced.setDescription('Number of entries that have been removed from the queue, sum.')
ltmPoolStatConnqAllDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllDepth.setDescription('Number of connections currently in queue of this pool and all \n\t\tits members, sum.')
ltmPoolStatConnqAllAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeHead.setDescription('Age in milliseconds of the oldest queue entry of this pool and all\n\t\tits members, max.')
ltmPoolStatConnqAllAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeMax.setDescription('Maximum queue entry age in milliseconds of this pool and all \n\t\tits members, max.')
ltmPoolStatConnqAllAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEma.setDescription('Exponential moving average queue entry age in milliseconds of this \n\t\tpool and all its members, max.')
ltmPoolStatConnqAllAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds of \n\t\tthis pool and all its members, max.')
ltmPoolStatConnqAllServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatConnqAllServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatConnqAllServiced.setDescription('Number of entries that have been removed from the queue of this \n\t\tpool and all its members, sum.')
ltmPoolStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatTotRequests.setDescription('The total number of requests to the specified pool.')
ltmPoolStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatCurSessions.setDescription('The current number of sessions to the specified pool.')
ltmPoolStatMsgMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatMsgMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatMsgMrIn.setDescription('The number of incoming routed messages to the specified pool. ')
ltmPoolStatMsgMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatMsgMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatMsgMrOut.setDescription('The number of outgoing routed messages to the specified pool.')
ltmPoolStatReqMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatReqMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatReqMrIn.setDescription('The number of routed message incoming requests to the specified pool.')
ltmPoolStatReqMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatReqMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatReqMrOut.setDescription('The number of routed message outgoing requests to the specified pool.')
ltmPoolStatRespMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatRespMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatRespMrIn.setDescription('The number of routed message incoming responses to the specified pool.')
ltmPoolStatRespMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatRespMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatRespMrOut.setDescription('The number of routed message outgoing responses to the specified pool.')
ltmPoolMemberNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberNumber.setDescription('The number of ltmPoolMember entries in the table.')
ltmPoolMemberTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2), )
if mibBuilder.loadTexts: ltmPoolMemberTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberTable.setDescription('A table containing information of pool members.')
ltmPoolMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"))
if mibBuilder.loadTexts: ltmPoolMemberEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberEntry.setDescription('Columns in the ltmPoolMember Table')
ltmPoolMemberPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPoolName.setDescription('The name of a pool.')
ltmPoolMemberAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberAddrType.setDescription('The IP address type of ltmPoolMemberAddr.')
ltmPoolMemberAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberAddr.setDescription('The IP address of a pool member in the specified pool.  \n\t\tIt is interpreted within the context of an ltmPoolMemberAddrType value.')
ltmPoolMemberPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPort.setDescription('The port number of the specified pool member.')
ltmPoolMemberConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberConnLimit.setDescription('The maximum connections allowed to the specified pool member.')
ltmPoolMemberRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberRatio.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberRatio.setDescription('The load balancing ratio of the specified pool member, \n\t\tused in pool member ratio load balancing mode.')
ltmPoolMemberWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberWeight.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberWeight.setDescription('The weight of the specified pool member, used in dynamic load balancing mode.')
ltmPoolMemberPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberPriority.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberPriority.setDescription('The priority level of the specified pool member, \n\t\tused in priority pool member load balancing mode.')
ltmPoolMemberDynamicRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDynamicRatio.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberDynamicRatio.setDescription('The dynamic ratio for the specified pool member, used in load balance \n\t\t algorithm.')
ltmPoolMemberMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 19, 20, 22, 23, 24, 25))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forcedUp", 3), ("up", 4), ("down", 19), ("forcedDown", 20), ("iruleDown", 22), ("inbandDown", 23), ("downManualResume", 24), ("disabled", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberMonitorState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorState.setDescription('The internal tmm monitor state for the specified node address.')
ltmPoolMemberMonitorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("unchecked", 0), ("checking", 1), ("inband", 2), ("forcedUp", 3), ("up", 4), ("addrDown", 18), ("down", 19), ("forcedDown", 20), ("maint", 21), ("iruleDown", 22), ("inbandDown", 23), ("downManualResume", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorStatus.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorStatus.setDescription('The hierarchical load balance state for the specified node address, including parent status. \n\t\t unchecked - enabled node that is not monitored;\n\t\t checking  - initial state until monitor reports;\n\t         inband    - the tmm has marked the node up;\n\t     forcedUp - forced up manually;\n\t\t up        - enabled node when its monitors succeed;\n\t\t addrDown    - node address monitor fails or forced down;\n\t\t down        - enabled node when its monitors fail;\n\t\t forcedDown  - node forced down manually;\n\t\t maint       - in maintenance mode;\n\t         iruleDown   - an iRule has marked the node down;\n\t         inbandDown  - the tmm has marked the node down;\n\t         downManualResume - the node is down and must be manually enabled; \n\t\t ')
ltmPoolMemberNewSessionEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("userDisabled", 1), ("userEnabled", 2), ("monitorEnabled", 3), ("monitorDisabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNewSessionEnable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberNewSessionEnable.setDescription('Deprecated!\n\t\t Whether a new session can be enabled or not for the specified pool member.')
ltmPoolMemberSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("enabled", 1), ("addrdisabled", 2), ("servdisabled", 3), ("disabled", 4), ("forceddisabled", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberSessionStatus.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberSessionStatus.setDescription('The hierarchical status of the session, including parent status,\n\t\tfor the specified pool member.\n\t\tenabled        - new sessions enabled;\n\t\taddrdisabled   - new sessions disabled on node address;\n\t\tservdisabled   - new sessions disabled on node server;\n\t\tdisabled       - new sessions disabled;\n\t\tforceddisabled - new sessions forced to be disabled.')
ltmPoolMemberMonitorRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberMonitorRule.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberMonitorRule.setDescription('The monitor rule used by the specified pool member. \n\t\tIf this value is empty, ltmPoolMonitorRule will be used.')
ltmPoolMemberAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberAvailabilityState.setDescription('Deprecated!  \n\t\tReplaced by ltmPoolMbrStatusAvailState under ltmPoolMemberStatus.\n\t\tThe state of the specified pool member availability indicated in color.')
ltmPoolMemberEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberEnabledState.setDescription('Deprecated!  \n\t\tReplaced by ltmPoolMbrStatusEnabledState under ltmPoolMemberStatus.\n\t\tThe state of the specified pool member activity status, as specified \n\t\tby the user.')
ltmPoolMemberDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberDisabledParentType.setDescription('Deprecated!  \n\t\tReplaced by ltmPoolMbrStatusParentType under ltmPoolMemberStatus.\n\t\tThe type of parent object which disabled the specified pool member.')
ltmPoolMemberStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatusReason.setDescription("Deprecated!  \n\t\tReplaced by ltmPoolMbrStatusDetailReason under ltmPoolMemberStatus.\n\t\tThe detail description of the pool member's status of parent object \n\t\twhich disabled the specified pool member.")
ltmPoolMemberNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 3, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberNodeName.setDescription('Name of associated name.')
ltmPoolMemberStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPoolMemberStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatResetStats.setDescription('The action to reset resettable statistics data in ltmPoolMemberStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmPoolMemberStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatNumber.setDescription('The number of ltmPoolMemberStat entries in the table.')
ltmPoolMemberStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3), )
if mibBuilder.loadTexts: ltmPoolMemberStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTable.setDescription('A table containing statistic information of pool members.')
ltmPoolMemberStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"))
if mibBuilder.loadTexts: ltmPoolMemberStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatEntry.setDescription('Columns in the ltmPoolMemberStat Table')
ltmPoolMemberStatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPoolName.setDescription('The name of a pool.')
ltmPoolMemberStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatAddrType.setDescription('Deprecated! use node_name instead, \n\t\tThe IP address type of ltmPoolMemberStatAddr.')
ltmPoolMemberStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMemberStatAddr.setDescription('Deprecated! use node_name instead, \n\t\tThe IP address of a pool member in the specified pool.  \n\t\tIt is interpreted within the context of an ltmPoolMemberStatAddrType value.')
ltmPoolMemberStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPort.setDescription('The port number of the specified pool member.')
ltmPoolMemberStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsIn.setDescription('The number of packets received by the specified pool member from server-side.')
ltmPoolMemberStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesIn.setDescription('The number of bytes received by the specified pool member from server-side.')
ltmPoolMemberStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerPktsOut.setDescription('The number of packets sent to server-side from the specified pool member.')
ltmPoolMemberStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerBytesOut.setDescription('The number of bytes sent to server-side from the specified pool member.')
ltmPoolMemberStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerMaxConns.setDescription('The maximum connections from server-side to the specified pool member.')
ltmPoolMemberStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerTotConns.setDescription('The total connections from server-side to the specified pool member.')
ltmPoolMemberStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatServerCurConns.setDescription('The current connections from server-side to the pool member.')
ltmPoolMemberStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified pool member.')
ltmPoolMemberStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified pool member.')
ltmPoolMemberStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified pool member.')
ltmPoolMemberStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaBytesOut.setDescription('The total number of hardware accelerated bytes sent out from the specified pool member.')
ltmPoolMemberStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified pool member.')
ltmPoolMemberStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTotRequests.setDescription('The total number of requests going through the specified pool member.')
ltmPoolMemberStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatTotPvaAssistConn.setDescription('The total number of connections to the specified pool member, \n\t\twhich are partially hardware accelerated.')
ltmPoolMemberStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurrPvaAssistConn.setDescription('The current number of connections to the specified pool member, \n\t\twhich are partially hardware accelerated.')
ltmPoolMemberStatConnqDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqDepth.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqDepth.setDescription('Number of connections currently in queue, sum.')
ltmPoolMemberStatConnqAgeHead = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeHead.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeHead.setDescription('Age in milliseconds of the oldest queue entry, max.')
ltmPoolMemberStatConnqAgeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeMax.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeMax.setDescription('Maximum queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqAgeEma = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEma.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEma.setDescription('Exponential moving average queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqAgeEdm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEdm.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqAgeEdm.setDescription('Exponential decaying maximum queue entry age in milliseconds, max.')
ltmPoolMemberStatConnqServiced = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatConnqServiced.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatConnqServiced.setDescription('Number of entries that have been removed from the queue, sum.')
ltmPoolMemberStatNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 28), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatNodeName.setDescription('node name.')
ltmPoolMemberStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurSessions.setDescription('The number of current sessions going through the specified pool member.')
ltmPoolMemberStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatCurrentConnsPerSec.setDescription('The last recorded value for the number of connections to the pool member when connections hit a rate limit; this calculation is only maintained if rate limiting is configured for the pool member node.')
ltmPoolMemberStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatDurationRateExceeded.setDescription('Duration of time in seconds the specified pool member has exceeded the\n\t\tconfigured connection rate limit.')
ltmPoolMemberStatMsgMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatMsgMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatMsgMrIn.setDescription('The number of incoming routed messages to the specified pool member.')
ltmPoolMemberStatMsgMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatMsgMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatMsgMrOut.setDescription('The number of outgoing routed messages to the specified pool member.')
ltmPoolMemberStatReqMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatReqMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatReqMrIn.setDescription('The number of routed message incoming requests to the specified pool member.')
ltmPoolMemberStatReqMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatReqMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatReqMrOut.setDescription('The number of routed message outgoing requests to the specified pool member.')
ltmPoolMemberStatRespMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatRespMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatRespMrIn.setDescription('The number of routed message incoming responses to the specified pool member.')
ltmPoolMemberStatRespMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 4, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMemberStatRespMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatRespMrOut.setDescription('The number of routed message outgoing responses to the specified pool member.')
ltmAuthProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileNumber.setDescription('The number of ltmAuthProfile entries in the table.')
ltmAuthProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2), )
if mibBuilder.loadTexts: ltmAuthProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileTable.setDescription('A table containing information of BIGIP authentication profiles.')
ltmAuthProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"))
if mibBuilder.loadTexts: ltmAuthProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileEntry.setDescription('Columns in the ltmAuthProfile Table')
ltmAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileName.setDescription('The name of an authentication profile.')
ltmAuthProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmAuthProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmAuthProfileConfigName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileConfigName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileConfigName.setDescription('The name of the authentication configuration that the specified \n\t\tprofile will be using.')
ltmAuthProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ldap", 0), ("radius", 1), ("sslccldap", 2), ("sslocsp", 3), ("tacacs", 4), ("generic", 5), ("sslcrldp", 6), ("krbdelegate", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileType.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileType.setDescription('The authentication type that the specified profile will be using.')
ltmAuthProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileMode.setDescription('The mode for the specified auth profile.')
ltmAuthProfileCredentialSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("httpbasicauth", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileCredentialSource.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileCredentialSource.setDescription('The source of the credentials that the specified profile will be using.')
ltmAuthProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileRuleName.setDescription('The name of the rule that the specified profile will be using.')
ltmAuthProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileIdleTimeout.setDescription('The idle timeout in seconds for the authentication session.')
ltmAuthProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmAuthProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmAuthProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmAuthProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatNumber.setDescription('The number of ltmAuthProfileStat entries in the table.')
ltmAuthProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3), )
if mibBuilder.loadTexts: ltmAuthProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatTable.setDescription('A table containing statistic information of BIGIP authentication profiles.')
ltmAuthProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"))
if mibBuilder.loadTexts: ltmAuthProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatEntry.setDescription('Columns in the ltmAuthProfileStat Table')
ltmAuthProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatName.setDescription('The name of an authentication profile.')
ltmAuthProfileStatTotSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatTotSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatTotSessions.setDescription('The total number of concurrent auth sessions for the specified profile.')
ltmAuthProfileStatCurSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatCurSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatCurSessions.setDescription('The current number of concurrent auth sessions for the specified profile.')
ltmAuthProfileStatMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatMaxSessions.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatMaxSessions.setDescription('The maximum number of concurrent auth sessions for the specified profile')
ltmAuthProfileStatSuccessResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatSuccessResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatSuccessResults.setDescription('The total number of auth success results (That is when a \n\t\tsuccessful authorization has completed all of the required \n\t\tauth services.) for the specified profile.')
ltmAuthProfileStatFailureResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatFailureResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatFailureResults.setDescription('The total number of auth failure results (That is when an \n\t\tunsuccessful authorization operation has completed.) for the associated \n\t\tvirtual server for the specified profile.')
ltmAuthProfileStatWantcredentialResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatWantcredentialResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatWantcredentialResults.setDescription('The total number of auth wantcredential results (That is when \n\t\tan authorization operation needs an additional credential.) \n\t\tfor the specified profile.')
ltmAuthProfileStatErrorResults = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAuthProfileStatErrorResults.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatErrorResults.setDescription('The total number of auth error results (That is when an error \n\t\toccurred during authorization has occurred.) for the specified profile.')
ltmClientSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslNumber.setDescription('The number of ltmClientSslProfile entries in the table.')
ltmClientSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2), )
if mibBuilder.loadTexts: ltmClientSslTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslTable.setDescription('A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)')
ltmClientSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslName"))
if mibBuilder.loadTexts: ltmClientSslEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslEntry.setDescription('Columns in the ltmClientSsl Table')
ltmClientSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslName.setDescription('The name of a client-side SSL profile.')
ltmClientSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmClientSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmClientSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMode.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMode.setDescription('The mode of this profile.')
ltmClientSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslKey.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslKey.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain.\n\t\tThe key file name.')
ltmClientSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCert.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslCert.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain.\n\t\tThe certificate file name.')
ltmClientSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslChain.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslChain.setDescription('Deprecated! Please refer ltmClientSslCertKeyChain.\n\t\tThe certificate chain file name.')
ltmClientSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCafile.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCafile.setDescription('The CA certificate file name.')
ltmClientSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCrlfile.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCrlfile.setDescription('The CRL file name.')
ltmClientSslClientcertca = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslClientcertca.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslClientcertca.setDescription('The CA certificate file name.')
ltmClientSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCiphers.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCiphers.setDescription('The set of ciphers available for client-side SSL negotiation.')
ltmClientSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslPassphrase.setDescription('Deprecated! No longer supported.\n\t\tThe key passphrase (if any).')
ltmClientSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslOptions.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslOptions.setDescription('The SSL options. \n\t\tSSLOPT_DONT_INSERT_EMPTY_FRAGMENTS        = 2048\n\t\tSSLOPT_PASSIVE_CLOSE                      = 4096\n\t\tSSLOPT_NO_SSL                             = 8192\n\t\tSSLOPT_NO_DTLS                            = 16384\n\t\tSSLOPT_NO_TLSv1_3                         = 32768\n\t\tSSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536\n\t\tSSLOPT_NO_TLSv1_1                         = 131072\n\t\tSSLOPT_NO_TLSv1_2                         = 262144\n\t\tSSLOPT_NO_TLS                             = 524288\n\t\tSSLOPT_SINGLE_DH_USE                      = 1048576\n\t\tSSLOPT_ENABLE_GMSSLv1_1                   = 2097152\n\t\tSSLOPT_NO_DTLSv1_2                        = 4194304\n\t\tSSLOPT_TLS_ROLLBACK_BUG                   = 8388608\n\t\tSSLOPT_NO_DTLSv1                          = 16777216\n\t\tSSLOPT_NO_SSLv3                           = 33554432\n\t\tSSLOPT_NO_TLSv1                           = 67108864')
ltmClientSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslModsslmethods.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslModsslmethods.setDescription('The ModSSL method emulation.')
ltmClientSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCacheSize.setDescription('The SSL session cache size.')
ltmClientSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCacheTimeout.setDescription('The SSL session cache timeout.')
ltmClientSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiatePeriod.setDescription('Time-based trigger.')
ltmClientSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateSize.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiateSize.setDescription('Throughput-based trigger MB.')
ltmClientSslRenegotiateMaxRecordDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslRenegotiateMaxRecordDelay.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslRenegotiateMaxRecordDelay.setDescription('The timeout of renegotiation.')
ltmClientSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslHandshakeTimeout.setDescription('The handshake timeout in seconds.')
ltmClientSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAlertTimeout.setDescription('The alert timeout in seconds.')
ltmClientSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ignore", 0), ("require", 1), ("request", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPeerCertMode.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslPeerCertMode.setDescription('The mode of peer certification.')
ltmClientSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateOnce.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAuthenticateOnce.setDescription('The feature to request client cert once or with each SSL\n\t\tsession renegotiation.')
ltmClientSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAuthenticateDepth.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAuthenticateDepth.setDescription('The maximum traversal depth for client certificate chain.')
ltmClientSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslUncleanShutdown.setDescription('The state of shutdown for this SSL, whether it is unclean \n\t\t shutdown (not sending a close notification alert when closing \n\t\t connection.).')
ltmClientSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStrictResume.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStrictResume.setDescription('Whether to enforce strict SSL session resumption \n\t\t per RFC2246')
ltmClientSslAllowNonssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAllowNonssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAllowNonssl.setDescription('Whether to allow non-SSL connections to pass through as \n\t\tcleartext.')
ltmClientSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionTicket.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSessionTicket.setDescription('Whether to enforce session ticket per RFC5077.')
ltmClientSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpEnabled.setDescription('Whether to enable SSL Forward Proxy.')
ltmClientSslFwdpCaKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 30), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaKey.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCaKey.setDescription('The CA key object name for Forward Proxy.')
ltmClientSslFwdpCaCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaCert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCaCert.setDescription('The CA certificate object name for Forward Proxy.')
ltmClientSslFwdpCaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCaPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslFwdpCaPassphrase.setDescription('Deprecated! No longer supported.\n\t         The CA key passphrase for Forward Proxy (if any).')
ltmClientSslFwdpCertLifespan = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertLifespan.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCertLifespan.setDescription('The lifespan of the generated certificates for Forward Proxy.')
ltmClientSslFwdpCertExtensionIncludes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpCertExtensionIncludes.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpCertExtensionIncludes.setDescription('The certificate extensions to include in generated certificates for\n\t        Forward Proxy.\n\t        SSL_FWDP_CERT_EXT_BASIC_CONSTRAINTS             = 2\n\t        SSL_FWDP_CERT_EXT_EXTENDED_KEY_USAGE            = 16\n\t        SSL_FWDP_CERT_EXT_KEY_USAGE                     = 128\n\t        SSL_FWDP_CERT_EXT_SUBJECT_ALTERNATIVE_NAME      = 256\n\t        SSL_FWDP_CERT_EXT_SUBJECT_DIRECTORY_ATTRIBUTES  = 512')
ltmClientSslFwdpLookupByIpaddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpLookupByIpaddrPort.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpLookupByIpaddrPort.setDescription('Whether to enable SSL Forward Proxy certificate caching by IPAddr-Port.')
ltmClientSslGenericAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslGenericAlert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslGenericAlert.setDescription('Whether to use generic alert number in Alert message.')
ltmClientSslSslSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("sha1", 1), ("sha256", 2), ("sha384", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSslSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSslSignHash.setDescription('The ssl sign hash algorithm.')
ltmClientSslFwdpBypassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassEnabled.setDescription('Whether to enable SSL Forward Proxy Bypass.')
ltmClientSslFwdpBypassDipBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 39), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipBList.setDescription('The Forward Proxy Bypass Destination IP Blacklist (if any).')
ltmClientSslFwdpBypassDipWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 40), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassDipWList.setDescription('The Forward Proxy Bypass Destination IP Whitelist (if any).')
ltmClientSslFwdpBypassSipBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 41), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipBList.setDescription('The Forward Proxy Bypass Source IP Blacklist (if any).')
ltmClientSslFwdpBypassSipWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassSipWList.setDescription('The Forward Proxy Bypass Source IP Whitelist (if any).')
ltmClientSslFwdpBypassHnBList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 43), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnBList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnBList.setDescription('The Forward Proxy Bypass Hostname Blacklist (if any).')
ltmClientSslFwdpBypassHnWList = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 44), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnWList.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslFwdpBypassHnWList.setDescription('The Forward Proxy Bypass Hostname Whitelist (if any).')
ltmClientSslProxySsl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslProxySsl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslProxySsl.setDescription('Whether to enable Proxy SSL.')
ltmClientSslProxySslPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslProxySslPassthrough.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslProxySslPassthrough.setDescription('Whether to enable Proxy SSL passthrough.')
ltmClientSslPeerNoRenegotiateTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslPeerNoRenegotiateTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslPeerNoRenegotiateTimeout.setDescription('The peer no-renegotiate timeout in seconds.')
ltmClientSslMaxRenegotiationsPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMaxRenegotiationsPerMin.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMaxRenegotiationsPerMin.setDescription('Maximum SSL renegotiations per minute.')
ltmClientSslSessionMirroring = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionMirroring.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSessionMirroring.setDescription('Whether to mirror ssl sessions to HA peer.')
ltmClientSslMaxAggregateRenegotiationsPerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMaxAggregateRenegotiationsPerMin.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMaxAggregateRenegotiationsPerMin.setDescription('Maximum SSL aggregate renegotiations per minute.')
ltmClientSslSessionTicketTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslSessionTicketTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslSessionTicketTimeout.setDescription('The session ticket timeout.')
ltmClientSslAllowExpiredCrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAllowExpiredCrl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAllowExpiredCrl.setDescription('Whether to ignore a CRLs expiration.')
ltmClientSslMaxActiveHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMaxActiveHandshake.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMaxActiveHandshake.setDescription('Maximum number of allowed SSL active handshakes.')
ltmClientSslAllowDynamicRecordSizing = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslAllowDynamicRecordSizing.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslAllowDynamicRecordSizing.setDescription('Allow dynamic record sizing.')
ltmClientSslMaximumRecordSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslMaximumRecordSize.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslMaximumRecordSize.setDescription('Maximum SSL application record size.')
ltmClientSslBypassHsAlertEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslBypassHsAlertEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslBypassHsAlertEnabled.setDescription('Whether to enable forward-proxy bypass on handshake alert')
ltmClientSslBypassClientCertFailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslBypassClientCertFailEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslBypassClientCertFailEnabled.setDescription('Whether to enable forward-proxy bypass on failed client cert')
ltmClientSslOcspStapling = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslOcspStapling.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslOcspStapling.setDescription('Whether to enable OCSP stapling.')
ltmClientSslNotifyCertStatusToVs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslNotifyCertStatusToVs.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslNotifyCertStatusToVs.setDescription('Whether to propagate certificate status to virtual server status.')
ltmClientSslC3dEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslC3dEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslC3dEnabled.setDescription('Whether to enable SSL Client Certificate Constrained Delegation.')
ltmClientSslCentityOcspObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 61), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCentityOcspObjName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCentityOcspObjName.setDescription('OCSP object name that the BIGIP SSL should use to connect\n\t         to the OCSP responder and check the client certificate status.')
ltmClientSslDropUnknownOcspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslDropUnknownOcspStatus.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslDropUnknownOcspStatus.setDescription('BIGIP action when the OCSP returns unknown status.\n\t         The default value is drop, which causes the connection to be dropped.\n\t         Conversely, you can specify ignore to cuase the connection to ignore\n\t         the unknown status and continue.')
ltmClientSslData0rttMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 1, 2, 1, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabledWithAntiReplay", 1), ("enabledNoAntiReplay", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslData0rttMode.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslData0rttMode.setDescription('Specifies if TLSv1.3 should accept 0-RTT with early data, with or without\n\t         anti-replay. To protect against packet replay, F5 recommends that you\n\t         enable anti-replay. If disabled, TLSv1.3 will discard any early data.')
ltmClientSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmClientSslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatResetStats.setDescription('The action to reset resettable statistics data in ltmClientSslProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmClientSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNumber.setDescription('The number of ltmClientSslProfileStat entries in the table.')
ltmClientSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3), )
if mibBuilder.loadTexts: ltmClientSslStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTable.setDescription('A table containing information of the client-side SSL profiles.(BIG-IP acts as an SSL server)')
ltmClientSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"))
if mibBuilder.loadTexts: ltmClientSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEntry.setDescription('Columns in the ltmClientSslStat Table')
ltmClientSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatName.setDescription('The name of a client-side SSL  profile.')
ltmClientSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurConns.setDescription('The current number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxConns.setDescription('The maximum number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurNativeConns.setDescription('The current number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotNativeConns.setDescription('The total number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurCompatConns.setDescription('The current number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotCompatConns.setDescription('The total number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmClientSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
ltmClientSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
ltmClientSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
ltmClientSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
ltmClientSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordsIn.setDescription('The total records received.')
ltmClientSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordsOut.setDescription('The total records sent.')
ltmClientSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium \n\t\t Nitrox or similar hardware accelerator such that all \n\t\t significant cryptographic operations are offloaded, \n\t\t including but not limited to the SSL handshake (at least \n\t\t the RSA/DSA/DH operations) and record processing (at least \n\t\t the bulk cipher plus MAC).')
ltmClientSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the \n\t\t RSA decryptions are offloaded.')
ltmClientSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no \n\t\t steady-state hardware acceleration is available (either \n\t\t because no hardware accelerators are available or because \n\t\t the necessary cryptographic operations are unsupported).  \n\t\t Because the extent of hardware acceleration may not be known \n\t\t until a connection has closed (mid-stream SSL handshakes \n\t\t might renegotiate an SSL session not supported by hardware \n\t\t acceleration), this statistic will not be updated for a  \n\t\t given connection until it has closed.')
ltmClientSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session \n\t\t establishment: the total number of connections that were \n\t\t prematurely closed before an SSL session was established, \n\t\t not including connections in passthrough mode.')
ltmClientSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including \n\t\t initial SSL session establishment.')
ltmClientSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
ltmClientSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheHits.setDescription('The total number of the cache hits.')
ltmClientSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
ltmClientSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
ltmClientSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
ltmClientSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertValid.setDescription('The total number of the valid certificates.')
ltmClientSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
ltmClientSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatPeercertNone.setDescription('The total number of connections without certificates.')
ltmClientSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatHandshakeFailures.setDescription('The total number of handshake failures.')
ltmClientSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatBadRecords.setDescription('The total number of the bad records.')
ltmClientSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
ltmClientSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSslv2.setDescription('The total connections for SSL protocol version 2.')
ltmClientSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSslv3.setDescription('The total connections for SSL protocol version 3.')
ltmClientSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv1.setDescription('The total connections for SSL TLS protocol version 1.')
ltmClientSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
ltmClientSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe diffie-Hellman w/ DSS certificate.')
ltmClientSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
ltmClientSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe DSS certificate.')
ltmClientSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmClientSslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe ephemeral Diffie-Hellman w/ DSS cert.')
ltmClientSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeyxchg.setDescription('The RSA certificate.')
ltmClientSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNullBulk.setDescription('No encryption.')
ltmClientSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
ltmClientSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
ltmClientSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
ltmClientSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
ltmClientSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
ltmClientSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNullDigest.setDescription('No message authentication.')
ltmClientSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMd5Digest.setDescription('Message Digest 5.')
ltmClientSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatShaDigest.setDescription('Secure Hash Algorithm.')
ltmClientSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatNotssl.setDescription('The total number of the bad client greetings.')
ltmClientSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
ltmClientSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t         performed with peers supporting SSL secure renegotiation.')
ltmClientSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t         performed with peers not supporting SSL secure renegotiation.')
ltmClientSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers\n\t         not supporting SSL secure renegotiation.')
ltmClientSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers\n\t         not supporting SSL secure renegotiation.')
ltmClientSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSniRejects.setDescription('The number of rejected handshake attempts by peers\n\t         not supporting SSL SNI extension or having mismatched\n\t         server names.')
ltmClientSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv11.setDescription('The total connections for SSL TLS protocol version 1.1.')
ltmClientSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv12.setDescription('The total connections for SSL TLS protocol version 1.2.')
ltmClientSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDtlsv1.setDescription('The total connections for SSL DTLS protocol version 1.0.')
ltmClientSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReused.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatReused.setDescription('The total reused session ticket sessions.')
ltmClientSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatReuseFailed.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatReuseFailed.setDescription('The total failed reused session ticket sessions.')
ltmClientSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
ltmClientSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConns.setDescription('The total connections using SSL FWDP feature.')
ltmClientSslStatCachedCerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCachedCerts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCachedCerts.setDescription('The total cached SSL FWDP certificates.')
ltmClientSslStatEcdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
ltmClientSslStatEcdheEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
ltmClientSslStatEcdhEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
ltmClientSslStatDheDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
ltmClientSslStatAesGcmBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
ltmClientSslStatDestinationIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDestinationIpBypasses.setDescription('The total destination IP bypasses using SSL FWDP bypass feature.')
ltmClientSslStatSourceIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSourceIpBypasses.setDescription('The total source IP bypasses using SSL FWDP bypass feature.')
ltmClientSslStatHostnameBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatHostnameBypasses.setDescription('The total hostname bypasses using SSL FWDP bypass feature.')
ltmClientSslStatRenegotiationsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRenegotiationsRejected.setDescription('The total number of renegotiations rejected.')
ltmClientSslStatOcspStaplingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingConns.setDescription('The total connections sending the status-request extension in the client hello.')
ltmClientSslStatOcspStaplingResponseStatusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseStatusErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseStatusErrors.setDescription('The total OCSP response errors.')
ltmClientSslStatOcspStaplingResponseValidationErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseValidationErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingResponseValidationErrors.setDescription('The total OCSP response validation errors.')
ltmClientSslStatOcspStaplingCertStatusErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingCertStatusErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingCertStatusErrors.setDescription('The total certificate status errors (revoked, unknown).')
ltmClientSslStatOcspStaplingOcspConnHttpErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnHttpErrors.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnHttpErrors.setDescription('The total HTTP errors on the connection made to fetch the OCSP response.')
ltmClientSslStatOcspStaplingOcspConnTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnTimeouts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnTimeouts.setDescription('The total timeouts on the connection made to fetch the OCSP response.')
ltmClientSslStatOcspStaplingOcspConnFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnFailures.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspStaplingOcspConnFailures.setDescription('The total connection failures when fetching OCSP response.')
ltmClientSslStatAggregateRenegotiationsRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAggregateRenegotiationsRejected.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAggregateRenegotiationsRejected.setDescription('The total number of aggregate renegotiations rejected.')
ltmClientSslStatSessionMirrorSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessionMirrorSuccess.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessionMirrorSuccess.setDescription('The total SSL sessions mirrored successfully.')
ltmClientSslStatSessionMirrorFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSessionMirrorFailure.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSessionMirrorFailure.setDescription('The total SSL session mirror failures.')
ltmClientSslStatConnectionMirrorPeerReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorPeerReady.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorPeerReady.setDescription('The total SSL HA peer ready messages.')
ltmClientSslStatConnectionMirrorHaCtxSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaCtxSent.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaCtxSent.setDescription('The total SSL HA context sent messages.')
ltmClientSslStatConnectionMirrorHaCtxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaCtxRecv.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaCtxRecv.setDescription('The total SSL HA context received messages.')
ltmClientSslStatConnectionMirrorHaHsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaHsSuccess.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaHsSuccess.setDescription('The total SSL HA handshake succesful.')
ltmClientSslStatConnectionMirrorHaFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaFailure.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaFailure.setDescription('The total SSL HA failures.')
ltmClientSslStatConnectionMirrorHaTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatConnectionMirrorHaTimeout.setDescription('The total SSL HA timeouts.')
ltmClientSslStatDtlsTxPushbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDtlsTxPushbacks.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDtlsTxPushbacks.setDescription('The total number of the Datagram Transport Layer Security transmitted packets which are pushed back.')
ltmClientSslStatCamelliaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCamelliaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCamelliaBulk.setDescription('Camellia Cipher (CBC).')
ltmClientSslStatActiveHandshakeRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatActiveHandshakeRejected.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatActiveHandshakeRejected.setDescription('The total number of active handshakes rejected.')
ltmClientSslStatCurrentActiveHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCurrentActiveHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCurrentActiveHandshakes.setDescription('The total number of current active handshakes.')
ltmClientSslStatLicensedTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatLicensedTps.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatLicensedTps.setDescription('The licensed transactions per second (TPS) value.')
ltmClientSslStatRecordSize1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize1k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize1k.setDescription('The number of records sized 0 to 1K sent.')
ltmClientSslStatRecordSize2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize2k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize2k.setDescription('The number of records sized 1K to 2K sent.')
ltmClientSslStatRecordSize3k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize3k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize3k.setDescription('The number of records sized 2K to 3K sent.')
ltmClientSslStatRecordSize4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize4k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize4k.setDescription('The number of records sized 3K to 4K sent.')
ltmClientSslStatRecordSize5k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize5k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize5k.setDescription('The number of records sized 4K to 5K sent.')
ltmClientSslStatRecordSize6k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize6k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize6k.setDescription('The number of records sized 5K to 6K sent.')
ltmClientSslStatRecordSize7k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize7k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize7k.setDescription('The number of records sized 6K to 7K sent.')
ltmClientSslStatRecordSize8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize8k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize8k.setDescription('The number of records sized 7K to 8K sent.')
ltmClientSslStatRecordSize9k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize9k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize9k.setDescription('The number of records sized 8K to 9K sent.')
ltmClientSslStatRecordSize10k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize10k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize10k.setDescription('The number of records sized 9K to 10K sent.')
ltmClientSslStatRecordSize11k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize11k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize11k.setDescription('The number of records sized 10K to 11K sent.')
ltmClientSslStatRecordSize12k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize12k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize12k.setDescription('The number of records sized 11K to 12K sent.')
ltmClientSslStatRecordSize13k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize13k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize13k.setDescription('The number of records sized 12K to 13K sent.')
ltmClientSslStatRecordSize14k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize14k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize14k.setDescription('The number of records sized 13K to 14K sent.')
ltmClientSslStatRecordSize15k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize15k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize15k.setDescription('The number of records sized 14K to 15K sent.')
ltmClientSslStatRecordSize16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRecordSize16k.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRecordSize16k.setDescription('The number of records sized 15K to 16K sent.')
ltmClientSslStatExtendedMasterSecrets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatExtendedMasterSecrets.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatExtendedMasterSecrets.setDescription('The total number of extended master secret handshakes.')
ltmClientSslStatBypassesHandshakeAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatBypassesHandshakeAlert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatBypassesHandshakeAlert.setDescription('The total ssl bypasses by receiving handshake alert.')
ltmClientSslStatBypassClientCertificateRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatBypassClientCertificateRequest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatBypassClientCertificateRequest.setDescription('The total ssl bypasses by failed client certificate request.')
ltmClientSslStatOcspFwdpClientsslCachedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslCachedResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslCachedResp.setDescription('The total SSL OCSP FWDP certificate status responses cached.')
ltmClientSslStatOcspFwdpClientsslCertStatusReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslCertStatusReq.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslCertStatusReq.setDescription('The number of connections that requested OCSP certificate status.')
ltmClientSslStatOcspFwdpClientsslStapledResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslStapledResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslStapledResp.setDescription('The number of connections for which OCSP certificate status was stapled.')
ltmClientSslStatOcspFwdpClientsslRespstatusErrResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslRespstatusErrResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslRespstatusErrResp.setDescription('The number of connections for which stapled response did not indicate success.')
ltmClientSslStatOcspFwdpClientsslInvalidCertResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslInvalidCertResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslInvalidCertResp.setDescription('The number of connections for which invalid certificate was returned to indicate revoked response.')
ltmClientSslStatOcspFwdpClientsslRevokedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslRevokedResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslRevokedResp.setDescription('The number of connections for which stapled response indicated revoked certificate status.')
ltmClientSslStatOcspFwdpClientsslUnknownResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslUnknownResp.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatOcspFwdpClientsslUnknownResp.setDescription('The number of connections for which stapled response indicated unknown certificate status.')
ltmClientSslStatC3dConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatC3dConns.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatC3dConns.setDescription('The total connections using SSL C3D feature.')
ltmClientSslStatTlsv13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTlsv13.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTlsv13.setDescription('The total connections for SSL TLS protocol version 1.3.')
ltmClientSslStatChacha20Poly1305Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatChacha20Poly1305Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatChacha20Poly1305Bulk.setDescription('ChaCha20-Poly1305.')
ltmClientSslStatData0rttAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatData0rttAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatData0rttAccepts.setDescription('The total number of TLSv1.3 0-RTT connections with early data accepted.')
ltmClientSslStatData0rttRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatData0rttRejects.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatData0rttRejects.setDescription('The total number of TLSv1.3 0-RTT connections rejected.')
ltmClientSslStatAesBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 126), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesBulkOffload.setDescription('Advanced Encryption Standard (CBC) offload.')
ltmClientSslStatAesGcmBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 127), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatAesGcmBulkOffload.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM) offload.')
ltmClientSslStatChacha20Poly1305BulkOffld = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 128), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatChacha20Poly1305BulkOffld.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatChacha20Poly1305BulkOffld.setDescription('ChaCha20-Poly1305 offload.')
ltmClientSslStatDesBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 129), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDesBulkOffload.setDescription('Digital Encryption Standard (CBC) offload.')
ltmClientSslStatRc4BulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 130), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRc4BulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRc4BulkOffload.setDescription('Rivest Cipher 4 (CBC) offload.')
ltmClientSslStatCamelliaBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 131), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatCamelliaBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatCamelliaBulkOffload.setDescription('Camellia Cipher (CBC) offload.')
ltmClientSslStatMd5DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 132), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatMd5DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatMd5DigestOffload.setDescription('Message Digest 5 offload.')
ltmClientSslStatShaDigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 133), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatShaDigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatShaDigestOffload.setDescription('Secure Hash Algorithm offload.')
ltmClientSslStatSha224Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 134), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha224Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha224Digest.setDescription('Secure Hash Algorithm 224.')
ltmClientSslStatSha224DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 135), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha224DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha224DigestOffload.setDescription('Secure Hash Algorithm 224 offload.')
ltmClientSslStatSha256Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 136), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha256Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha256Digest.setDescription('Secure Hash Algorithm 256.')
ltmClientSslStatSha256DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 137), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha256DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha256DigestOffload.setDescription('Secure Hash Algorithm 256 offload.')
ltmClientSslStatSha384Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 138), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha384Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha384Digest.setDescription('Secure Hash Algorithm 384.')
ltmClientSslStatSha384DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 139), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha384DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha384DigestOffload.setDescription('Secure Hash Algorithm 384 offload.')
ltmClientSslStatSha512Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 140), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha512Digest.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha512Digest.setDescription('Secure Hash Algorithm 512.')
ltmClientSslStatSha512DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 141), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatSha512DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatSha512DigestOffload.setDescription('Secure Hash Algorithm 512 offload.')
ltmClientSslStatDhGroupP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 142), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP256.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP256.setDescription('DH Group P256.')
ltmClientSslStatDhGroupP256Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 143), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP256Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP256Offload.setDescription('DH Group P256 offload.')
ltmClientSslStatDhGroupP384 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 144), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP384.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP384.setDescription('DH Group P384.')
ltmClientSslStatDhGroupP384Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 145), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP384Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupP384Offload.setDescription('DH Group P384 offload.')
ltmClientSslStatDhGroupX25519 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 146), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupX25519.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupX25519.setDescription('DH Group X25519.')
ltmClientSslStatDhGroupX25519Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 147), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDhGroupX25519Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDhGroupX25519Offload.setDescription('DH Group X25519 offload.')
ltmClientSslStatRsaKeySize1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 148), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize1024.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize1024.setDescription('RSA key size 1024.')
ltmClientSslStatRsaKeySize1024Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 149), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize1024Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize1024Offload.setDescription('RSA key size 1024 offload.')
ltmClientSslStatRsaKeySize2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 150), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize2048.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize2048.setDescription('RSA key size 2048.')
ltmClientSslStatRsaKeySize2048Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 151), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize2048Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize2048Offload.setDescription('RSA key size 2048_offload.')
ltmClientSslStatRsaKeySize4096 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 152), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize4096.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize4096.setDescription('RSA key size 4096.')
ltmClientSslStatRsaKeySize4096Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 153), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize4096Offload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatRsaKeySize4096Offload.setDescription('RSA key size 4096 offload.')
ltmClientSslStatTotalHandshakesSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 154), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotalHandshakesSoftware.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotalHandshakesSoftware.setDescription('Handshake records processed in software.')
ltmClientSslStatTotalHandshakesOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 155), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatTotalHandshakesOffload.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatTotalHandshakesOffload.setDescription('Handshake records offloaded.')
ltmClientSslStatDtlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 2, 3, 1, 156), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslStatDtlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatDtlsv12.setDescription('The total connections for SSL DTLS protocol version 1.2.')
ltmServerSslNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslNumber.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslNumber.setDescription('The number of ltmServerSslProfile entries in the table.')
ltmServerSslTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2), )
if mibBuilder.loadTexts: ltmServerSslTable.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslTable.setDescription('A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)')
ltmServerSslEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslName"))
if mibBuilder.loadTexts: ltmServerSslEntry.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslEntry.setDescription('Columns in the ltmServerSsl Table')
ltmServerSslName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslName.setDescription('The name of a server-side SSL  profile.')
ltmServerSslConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmServerSslDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmServerSslMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslMode.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslMode.setDescription('The status of this profile.')
ltmServerSslKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslKey.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslKey.setDescription('The key file name.')
ltmServerSslCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCert.setDescription('The certificate file name.')
ltmServerSslChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslChain.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslChain.setDescription('The certificate chain file name.')
ltmServerSslCafile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCafile.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCafile.setDescription('The CA certificate file name.')
ltmServerSslCrlfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCrlfile.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCrlfile.setDescription('The CRL file name.')
ltmServerSslCiphers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCiphers.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCiphers.setDescription('The set of ciphers available for server-side SSL negotiation.')
ltmServerSslPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslPassphrase.setDescription('Deprecated! No longer supported.\n\t        The key passphrase (if any).')
ltmServerSslOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslOptions.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslOptions.setDescription('The SSL options. \n\t\tSSLOPT_DONT_INSERT_EMPTY_FRAGMENTS        = 2048\n\t\tSSLOPT_PASSIVE_CLOSE                      = 4096\n\t\tSSLOPT_NO_SSL                             = 8192\n\t\tSSLOPT_NO_DTLS                            = 16384\n\t\tSSLOPT_NO_TLSv1_3                         = 32768\n\t\tSSLOPT_NO_SESSION_RESUMPTION_ON_RENEGOTIATION = 65536\n\t\tSSLOPT_NO_TLSv1_1                         = 131072\n\t\tSSLOPT_NO_TLSv1_2                         = 262144\n\t\tSSLOPT_NO_TLS                             = 524288\n\t\tSSLOPT_SINGLE_DH_USE                      = 1048576\n\t\tSSLOPT_ENABLE_GMSSLv1_1                   = 2097152\n\t\tSSLOPT_NO_DTLSv1_2                        = 4194304\n\t\tSSLOPT_TLS_ROLLBACK_BUG                   = 8388608\n\t\tSSLOPT_NO_NO_DTLSv1                       = 16777216\n\t\tSSLOPT_NO_SSLv3                           = 33554432\n\t\tSSLOPT_NO_TLSv1                           = 67108864')
ltmServerSslModsslmethods = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslModsslmethods.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslModsslmethods.setDescription('The status of using ModSSL method emulation.')
ltmServerSslRenegotiatePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiatePeriod.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslRenegotiatePeriod.setDescription('Time-based trigger.')
ltmServerSslRenegotiateSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslRenegotiateSize.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslRenegotiateSize.setDescription('Throughput-based trigger MB.')
ltmServerSslPeerCertMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ignore", 0), ("require", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslPeerCertMode.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslPeerCertMode.setDescription('The mode of peer certification.')
ltmServerSslAuthenticateOnce = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateOnce.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateOnce.setDescription('The feature to request server cert with each SSL session \n\t\trenegotiation.')
ltmServerSslAuthenticateDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateDepth.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateDepth.setDescription('The max traversal depth for client certificate chain.')
ltmServerSslAuthenticateName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAuthenticateName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAuthenticateName.setDescription('The expected server certificate DN(Domain Name).')
ltmServerSslUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslUncleanShutdown.setDescription('The state of shutdown for this SSL, whether it is unclean \n\t\t shutdown (not sending a close notification alert when closing \n\t\t connection.).')
ltmServerSslStrictResume = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStrictResume.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStrictResume.setDescription('The feature whether to enforce strict SSL session resumption \n\t\t per RFC2246')
ltmServerSslHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslHandshakeTimeout.setDescription('The handshake timeout in seconds.')
ltmServerSslAlertTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAlertTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAlertTimeout.setDescription('The alert timeout in seconds.')
ltmServerSslCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCacheSize.setDescription('The SSL session cache size.')
ltmServerSslCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCacheTimeout.setDescription('The SSL session cache timeout.')
ltmServerSslSessionTicket = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSessionTicket.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSessionTicket.setDescription('Whether to enforce session ticket per RFC5077.')
ltmServerSslFwdpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslFwdpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslFwdpEnabled.setDescription('Whether to enable SSL Forward Proxy.')
ltmServerSslDropExpCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("drop", 1), ("mask", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropExpCert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropExpCert.setDescription('Whether to drop or ignore or mask connection when server certificate is expired.')
ltmServerSslDropUntrustCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("drop", 1), ("mask", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropUntrustCa.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropUntrustCa.setDescription('Whether to drop or ignore or mask connection when server certificate has invalid CA.')
ltmServerSslGenericAlert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslGenericAlert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslGenericAlert.setDescription('Whether to use generic alert number in Alert message.')
ltmServerSslSslSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("any", 0), ("sha1", 1), ("sha256", 2), ("sha384", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSslSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSslSignHash.setDescription('The ssl sign hash algorithm.')
ltmServerSslFwdpBypassEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslFwdpBypassEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslFwdpBypassEnabled.setDescription('Whether to enable SSL Forward Proxy Bypass.')
ltmServerSslProxySsl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProxySsl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProxySsl.setDescription('Whether to enable Proxy SSL.')
ltmServerSslProxySslPassthrough = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProxySslPassthrough.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProxySslPassthrough.setDescription('Whether to enable Proxy SSL passthrough.')
ltmServerSslSessionMirroring = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslSessionMirroring.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslSessionMirroring.setDescription('Whether to mirror ssl sessions to HA peer.')
ltmServerSslAllowExpiredCrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslAllowExpiredCrl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslAllowExpiredCrl.setDescription('Whether to ignore a CRLs expiration.')
ltmServerSslMaxActiveHandshake = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslMaxActiveHandshake.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslMaxActiveHandshake.setDescription('Maximum number of allowed SSL active handshakes.')
ltmServerSslBypassHsAlertEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslBypassHsAlertEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslBypassHsAlertEnabled.setDescription('Whether to enable forward-proxy bypass on handshake alert')
ltmServerSslBypassClientCertFailEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslBypassClientCertFailEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslBypassClientCertFailEnabled.setDescription('Whether to enable forward-proxy bypass on failed client cert')
ltmServerSslCentityOcspObjName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 40), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslCentityOcspObjName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslCentityOcspObjName.setDescription('The name of OCSP profile used to enable OCSP stapling and validation of server certificate status.')
ltmServerSslC3dEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslC3dEnabled.setDescription('Whether to enable SSL Client Certificate Constrained Delegation.')
ltmServerSslC3dCaKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 42), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dCaKey.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslC3dCaKey.setDescription('The CA key object name for Client Certificate Constrained Delegation.')
ltmServerSslC3dCaCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 43), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dCaCert.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslC3dCaCert.setDescription('The CA certificate object name for Client Certificate Constrained Delegation.')
ltmServerSslC3dCaPassphrase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 44), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dCaPassphrase.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslC3dCaPassphrase.setDescription('Deprecated! No longer supported.\n\t        The CA key passphrase for Client Certificate Constrained Delegation (if any).')
ltmServerSslC3dCertLifespan = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dCertLifespan.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslC3dCertLifespan.setDescription('The lifespan of the generated certificates for Client Certificate Constrained Delegation.')
ltmServerSslC3dCertExtensionIncludes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslC3dCertExtensionIncludes.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslC3dCertExtensionIncludes.setDescription('The certificate extensions to include in generated certificates for\n\t        Client Certificate Constrained Delegation.\n\t        SSL_C3D_CERT_EXT_BASIC_CONSTRAINTS             = 2\n\t        SSL_C3D_CERT_EXT_EXTENDED_KEY_USAGE            = 16\n\t        SSL_C3D_CERT_EXT_KEY_USAGE                     = 128\n\t        SSL_C3D_CERT_EXT_SUBJECT_ALTERNATIVE_NAME      = 256')
ltmServerSslData0rttMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslData0rttMode.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslData0rttMode.setDescription('Specifies if TLSv1.3 should send 0-RTT early data when available.')
ltmServerSslDropRevokedCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("drop", 1), ("mask", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropRevokedCertStatus.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropRevokedCertStatus.setDescription('Whether to drop or ignore or mask connection when server certificate status is revoked.')
ltmServerSslDropUnknownCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ignore", 0), ("drop", 1), ("mask", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslDropUnknownCertStatus.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslDropUnknownCertStatus.setDescription('Whether to drop or ignore or mask connection when server certificate status is unknown.')
ltmServerSslStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmServerSslStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatResetStats.setDescription('The action to reset resettable statistics data in ltmServerSslProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmServerSslStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNumber.setDescription('The number of ltmServerSslProfileStat entries in the table.')
ltmServerSslStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3), )
if mibBuilder.loadTexts: ltmServerSslStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTable.setDescription('A table containing statistic information of the server-side SSL profiles.(BIG-IP acts as an SSL client)')
ltmServerSslStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"))
if mibBuilder.loadTexts: ltmServerSslStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEntry.setDescription('Columns in the ltmServerSslStat Table')
ltmServerSslStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatName.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatName.setDescription('The name of a server-side SSL profile.')
ltmServerSslStatCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurConns.setDescription('The current number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxConns.setDescription('The maximum number of concurrent connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatCurNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurNativeConns.setDescription('The current number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxNativeConns.setDescription('The maximum number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatTotNativeConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotNativeConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotNativeConns.setDescription('The total number of concurrent native connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatCurCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurCompatConns.setDescription('The current number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatMaxCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMaxCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMaxCompatConns.setDescription('The maximum number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatTotCompatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotCompatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotCompatConns.setDescription('The total number of concurrent compat connections with \n\t\t established SSL sessions being maintained by the filter.')
ltmServerSslStatEncryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesIn.setDescription('The total encrypted bytes received.')
ltmServerSslStatEncryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEncryptedBytesOut.setDescription('The total encrypted bytes sent.')
ltmServerSslStatDecryptedBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesIn.setDescription('The total decrypted bytes received.')
ltmServerSslStatDecryptedBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDecryptedBytesOut.setDescription('The total decrypted bytes sent.')
ltmServerSslStatRecordsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsIn.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRecordsIn.setDescription('The total records received.')
ltmServerSslStatRecordsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRecordsOut.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRecordsOut.setDescription('The total records sent.')
ltmServerSslStatFullyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFullyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatFullyHwAcceleratedConns.setDescription('Fully hardware-accelerated implies usage of the Cavium \n\t\t Nitrox or similar hardware accelerator such that all \n\t\t significant cryptographic operations are offloaded, \n\t\t including but not limited to the SSL handshake (at least \n\t\t the RSA/DSA/DH operations) and record processing (at least \n\t\t the bulk cipher plus MAC).')
ltmServerSslStatPartiallyHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPartiallyHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPartiallyHwAcceleratedConns.setDescription('Partially hardware-accelerated indicates that at least the \n\t\t RSA decryptions are offloaded.')
ltmServerSslStatNonHwAcceleratedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNonHwAcceleratedConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNonHwAcceleratedConns.setDescription('Non-accelerated connections are those for which no \n\t\t steady-state hardware acceleration is available (either \n\t\t because no hardware accelerators are available or because \n\t\t the necessary cryptographic operations are unsupported).  \n\t\t Because the extent of hardware acceleration may not be known \n\t\t until a connection has closed (mid-stream SSL handshakes \n\t\t might renegotiate an SSL session not supported by hardware \n\t\t acceleration), this statistic will not be updated for a  \n\t\t given connection until it has closed.')
ltmServerSslStatPrematureDisconnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPrematureDisconnects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPrematureDisconnects.setDescription('The number of connections disconnected before SSL session \n\t\t establishment: the total number of connections that were \n\t\t prematurely closed before an SSL session was established, \n\t\t not including connections in pass-through mode.')
ltmServerSslStatMidstreamRenegotiations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMidstreamRenegotiations.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMidstreamRenegotiations.setDescription('The number of mid-stream SSL re-negotiations, not including \n\t\t initial SSL session establishment.')
ltmServerSslStatSessCacheCurEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheCurEntries.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheCurEntries.setDescription('The number of the current entries in this cache.')
ltmServerSslStatSessCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheHits.setDescription('The total number of the cache hits.')
ltmServerSslStatSessCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheLookups.setDescription('The total number of the cache lookups.')
ltmServerSslStatSessCacheOverflows = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheOverflows.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheOverflows.setDescription('The total number of the cache overflows.')
ltmServerSslStatSessCacheInvalidations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessCacheInvalidations.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessCacheInvalidations.setDescription('The total number of the session invalidations.')
ltmServerSslStatPeercertValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertValid.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertValid.setDescription('The total number of the valid certificates.')
ltmServerSslStatPeercertInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertInvalid.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertInvalid.setDescription('The total number of the invalid certificates.')
ltmServerSslStatPeercertNone = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatPeercertNone.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatPeercertNone.setDescription('The total number of connections without certificates.')
ltmServerSslStatHandshakeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatHandshakeFailures.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatHandshakeFailures.setDescription('The total number of handshake failures.')
ltmServerSslStatBadRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatBadRecords.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatBadRecords.setDescription('The total number of the bad records.')
ltmServerSslStatFatalAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatFatalAlerts.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatFatalAlerts.setDescription('The total number of the fatal alerts.')
ltmServerSslStatSslv2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv2.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSslv2.setDescription('The total connections for SSL protocol version 2.')
ltmServerSslStatSslv3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSslv3.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSslv3.setDescription('The total connections for SSL protocol version 3.')
ltmServerSslStatTlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv1.setDescription('The total connections for SSL TLS protocol version 1.')
ltmServerSslStatAdhKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAdhKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAdhKeyxchg.setDescription('The anonymous Diffie-Hellman.')
ltmServerSslStatDhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatDhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe diffie-Hellman w/ DSS certificate.')
ltmServerSslStatDhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhRsaKeyxchg.setDescription('The diffie-Hellman w/ RSA certificate.')
ltmServerSslStatDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe DSS certificate.')
ltmServerSslStatEdhDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhDssKeyxchg.setStatus('deprecated')
if mibBuilder.loadTexts: ltmServerSslStatEdhDssKeyxchg.setDescription('Deprecated! DSS certificate is obsolete in BIGIP.\n\t\tThe ephemeral Diffie-Hellman w/ DSS cert.')
ltmServerSslStatRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeyxchg.setDescription('The RSA certificate.')
ltmServerSslStatNullBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNullBulk.setDescription('No encryption.')
ltmServerSslStatAesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesBulk.setDescription('Advanced Encryption Standard (CBC).')
ltmServerSslStatDesBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDesBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDesBulk.setDescription('Digital Encryption Standard (CBC).')
ltmServerSslStatIdeaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatIdeaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatIdeaBulk.setDescription('IDEA (old SSLv2 cipher).')
ltmServerSslStatRc2Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc2Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRc2Bulk.setDescription('Rivest Cipher 2 (CBC).')
ltmServerSslStatRc4Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc4Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRc4Bulk.setDescription('Rivest Cipher 4 (CBC).')
ltmServerSslStatNullDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNullDigest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNullDigest.setDescription('No message authentication.')
ltmServerSslStatMd5Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMd5Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMd5Digest.setDescription('Message Digest 5.')
ltmServerSslStatShaDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatShaDigest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatShaDigest.setDescription('Secure Hash Algorithm.')
ltmServerSslStatNotssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatNotssl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatNotssl.setDescription('The total number of the bad client greetings.')
ltmServerSslStatEdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEdhRsaKeyxchg.setDescription('Ephemeral Diffie-Hellman w/ RSA cert.')
ltmServerSslStatSecureHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSecureHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSecureHandshakes.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t         performed with peers supporting SSL secure renegotiation.')
ltmServerSslStatInsecureHandshakeAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeAccepts.setDescription('The number of handshakes, including mid-stream re-negotiations,\n\t         performed with peers not supporting SSL secure renegotiation.')
ltmServerSslStatInsecureHandshakeRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureHandshakeRejects.setDescription('The number of rejected initial handshakes with peers\n\t         not supporting SSL secure renegotiation.')
ltmServerSslStatInsecureRenegotiationRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatInsecureRenegotiationRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatInsecureRenegotiationRejects.setDescription('The number of rejected renegotiation attempts by peers\n\t         not supporting SSL secure renegotiation.')
ltmServerSslStatSniRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSniRejects.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSniRejects.setDescription('The number of rejected handshake attempts by peers\n\t         not supporting SSL SNI extension or having mismatched\n\t         server names.')
ltmServerSslStatTlsv11 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv11.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv11.setDescription('The total connections for SSL TLS protocol version 1.1.')
ltmServerSslStatTlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv12.setDescription('The total connections for SSL TLS protocol version 1.2.')
ltmServerSslStatDtlsv1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDtlsv1.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDtlsv1.setDescription('The total connections for SSL DTLS protocol version 1.')
ltmServerSslStatReused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReused.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatReused.setDescription('The total reused session ticket sessions.')
ltmServerSslStatReuseFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatReuseFailed.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatReuseFailed.setDescription('The total failed reused session ticket sessions.')
ltmServerSslStatEcdheRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdheRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdheRsaKeyxchg.setDescription('Ephemeral ECDH w/ RSA cert.')
ltmServerSslStatConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConns.setDescription('The total connections using SSL FWDP feature.')
ltmServerSslStatEcdhRsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdhRsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdhRsaKeyxchg.setDescription('Fixed ECDH with RSA signed cert.')
ltmServerSslStatEcdheEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdheEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdheEcdsaKeyxchg.setDescription('Ephemeral ECDH with ECDSA cert.')
ltmServerSslStatEcdhEcdsaKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatEcdhEcdsaKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatEcdhEcdsaKeyxchg.setDescription('Fixed ECDH with ECDSA cert.')
ltmServerSslStatDheDssKeyxchg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDheDssKeyxchg.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDheDssKeyxchg.setDescription('Ephemeral DH with DSS cert.')
ltmServerSslStatAesGcmBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulk.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM).')
ltmServerSslStatDestinationIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDestinationIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDestinationIpBypasses.setDescription('The total destination IP bypasses using SSL FWDP bypass feature.')
ltmServerSslStatSourceIpBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSourceIpBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSourceIpBypasses.setDescription('The total source IP bypasses using SSL FWDP bypass feature.')
ltmServerSslStatHostnameBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatHostnameBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatHostnameBypasses.setDescription('The total hostname bypasses using SSL FWDP bypass feature.')
ltmServerSslStatSessionMirrorSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessionMirrorSuccess.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessionMirrorSuccess.setDescription('The total SSL sessions mirrored successfully.')
ltmServerSslStatSessionMirrorFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSessionMirrorFailure.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSessionMirrorFailure.setDescription('The total SSL session mirror failures.')
ltmServerSslStatConnectionMirrorPeerReady = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorPeerReady.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorPeerReady.setDescription('The total SSL HA peer ready messages.')
ltmServerSslStatConnectionMirrorHaCtxSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaCtxSent.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaCtxSent.setDescription('The total SSL HA context sent messages.')
ltmServerSslStatConnectionMirrorHaCtxRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaCtxRecv.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaCtxRecv.setDescription('The total SSL HA context received messages.')
ltmServerSslStatConnectionMirrorHaHsSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaHsSuccess.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaHsSuccess.setDescription('The total SSL HA handshake succesful.')
ltmServerSslStatConnectionMirrorHaFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaFailure.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaFailure.setDescription('The total SSL HA failures.')
ltmServerSslStatConnectionMirrorHaTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatConnectionMirrorHaTimeout.setDescription('The total SSL HA timeouts.')
ltmServerSslStatDtlsTxPushbacks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDtlsTxPushbacks.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDtlsTxPushbacks.setDescription('The total number of the Datagram Transport Layer Security transmitted packets which are pushed back.')
ltmServerSslStatCamelliaBulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCamelliaBulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCamelliaBulk.setDescription('Camellia Cipher (CBC).')
ltmServerSslStatActiveHandshakeRejected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatActiveHandshakeRejected.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatActiveHandshakeRejected.setDescription('The total number of active handshakes rejected.')
ltmServerSslStatCurrentActiveHandshakes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCurrentActiveHandshakes.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCurrentActiveHandshakes.setDescription('The total number of current active handshakes.')
ltmServerSslStatLicensedTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatLicensedTps.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatLicensedTps.setDescription('The licensed transactions per second (TPS) value.')
ltmServerSslStatExtendedMasterSecrets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatExtendedMasterSecrets.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatExtendedMasterSecrets.setDescription('The total number of extended master secret handshakes.')
ltmServerSslStatOcspServersslCachedResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCachedResp.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCachedResp.setDescription('Total number of server connections for which OCSP response was obtained from the cache.')
ltmServerSslStatOcspServersslStapledResp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslStapledResp.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslStapledResp.setDescription('Total number of server connections that had stapled a valid OCSP response.')
ltmServerSslStatOcspServersslResponderQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslResponderQueries.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslResponderQueries.setDescription('Total number of server connections that required communicating with OCSP responder.')
ltmServerSslStatOcspServersslResponseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslResponseErrors.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslResponseErrors.setDescription('Total number of server connections for which OCSP responder query failed for any reason.')
ltmServerSslStatOcspServersslCertStatusUnknown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCertStatusUnknown.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCertStatusUnknown.setDescription('Total number of server connections for which certificate status was indicated as unknown.')
ltmServerSslStatOcspServersslCertStatusRevoked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCertStatusRevoked.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatOcspServersslCertStatusRevoked.setDescription('Total number of server connections for which certificate status was indicated as revoked.')
ltmServerSslStatC3dConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatC3dConns.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatC3dConns.setDescription('The total connections using SSL C3D feature.')
ltmServerSslStatTlsv13 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTlsv13.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTlsv13.setDescription('The total connections for SSL TLS protocol version 1.3.')
ltmServerSslStatChacha20Poly1305Bulk = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatChacha20Poly1305Bulk.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatChacha20Poly1305Bulk.setDescription('ChaCha20-Poly1305.')
ltmServerSslStatAesBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesBulkOffload.setDescription('Advanced Encryption Standard (CBC) offload.')
ltmServerSslStatAesGcmBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatAesGcmBulkOffload.setDescription('Advanced Encryption Standard Galois Counter Mode (AES-GCM) offload.')
ltmServerSslStatChacha20Poly1305BulkOffld = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatChacha20Poly1305BulkOffld.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatChacha20Poly1305BulkOffld.setDescription('ChaCha20-Poly1305 offload.')
ltmServerSslStatDesBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDesBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDesBulkOffload.setDescription('Digital Encryption Standard (CBC) offload.')
ltmServerSslStatRc4BulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRc4BulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRc4BulkOffload.setDescription('Rivest Cipher 4 (CBC) offload.')
ltmServerSslStatCamelliaBulkOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatCamelliaBulkOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatCamelliaBulkOffload.setDescription('Camellia Cipher (CBC) offload.')
ltmServerSslStatMd5DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatMd5DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatMd5DigestOffload.setDescription('Message Digest 5 offload.')
ltmServerSslStatShaDigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatShaDigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatShaDigestOffload.setDescription('Secure Hash Algorithm offload.')
ltmServerSslStatSha224Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha224Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha224Digest.setDescription('Secure Hash Algorithm 224.')
ltmServerSslStatSha224DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha224DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha224DigestOffload.setDescription('Secure Hash Algorithm 224 offload.')
ltmServerSslStatSha256Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha256Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha256Digest.setDescription('Secure Hash Algorithm 256.')
ltmServerSslStatSha256DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha256DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha256DigestOffload.setDescription('Secure Hash Algorithm 256 offload.')
ltmServerSslStatSha384Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha384Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha384Digest.setDescription('Secure Hash Algorithm 384.')
ltmServerSslStatSha384DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha384DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha384DigestOffload.setDescription('Secure Hash Algorithm 384 offload.')
ltmServerSslStatSha512Digest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha512Digest.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha512Digest.setDescription('Secure Hash Algorithm 512.')
ltmServerSslStatSha512DigestOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatSha512DigestOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatSha512DigestOffload.setDescription('Secure Hash Algorithm 512 offload.')
ltmServerSslStatDhGroupP256 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP256.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP256.setDescription('DH Group P256.')
ltmServerSslStatDhGroupP256Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 112), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP256Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP256Offload.setDescription('DH Group P256 offload.')
ltmServerSslStatDhGroupP384 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 113), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP384.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP384.setDescription('DH Group P384.')
ltmServerSslStatDhGroupP384Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 114), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP384Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupP384Offload.setDescription('DH Group P384 offload.')
ltmServerSslStatDhGroupX25519 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 115), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupX25519.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupX25519.setDescription('DH Group X25519.')
ltmServerSslStatDhGroupX25519Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 116), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDhGroupX25519Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDhGroupX25519Offload.setDescription('DH Group X25519 offload.')
ltmServerSslStatRsaKeySize1024 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 117), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize1024.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize1024.setDescription('RSA key size 1024.')
ltmServerSslStatRsaKeySize1024Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 118), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize1024Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize1024Offload.setDescription('RSA key size 1024 offload.')
ltmServerSslStatRsaKeySize2048 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 119), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize2048.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize2048.setDescription('RSA key size 2048.')
ltmServerSslStatRsaKeySize2048Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 120), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize2048Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize2048Offload.setDescription('RSA key size 2048_offload.')
ltmServerSslStatRsaKeySize4096 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 121), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize4096.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize4096.setDescription('RSA key size 4096.')
ltmServerSslStatRsaKeySize4096Offload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 122), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize4096Offload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatRsaKeySize4096Offload.setDescription('RSA key size 4096 offload.')
ltmServerSslStatTotalHandshakesSoftware = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 123), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotalHandshakesSoftware.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotalHandshakesSoftware.setDescription('Handshake records processed in software.')
ltmServerSslStatTotalHandshakesOffload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 124), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatTotalHandshakesOffload.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatTotalHandshakesOffload.setDescription('Handshake records offloaded.')
ltmServerSslStatDtlsv12 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 2, 3, 1, 125), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslStatDtlsv12.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatDtlsv12.setDescription('The total connections for SSL DTLS protocol version 1.2.')
ltmConnPoolProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileNumber.setDescription('The number of ltmConnPoolProfile entries in the table.')
ltmConnPoolProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2), )
if mibBuilder.loadTexts: ltmConnPoolProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileTable.setDescription('A table containing information of connection pool profiles.')
ltmConnPoolProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"))
if mibBuilder.loadTexts: ltmConnPoolProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileEntry.setDescription('Columns in the ltmConnPoolProfile Table')
ltmConnPoolProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileName.setDescription('The name of a connection pool profile.')
ltmConnPoolProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmConnPoolProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmConnPoolProfileSrcMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMaskType.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMaskType.setDescription('The IP address type of ltmConnPoolSrcMask')
ltmConnPoolProfileSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMask.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileSrcMask.setDescription('The mask applied to source address to determine eligibility \n\t\tfor reuse. It is interpreted within the context of an \n\t\tltmConnPoolSrcMaskType value.')
ltmConnPoolProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxSize.setDescription('The maximum number of connections in pool.')
ltmConnPoolProfileMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxAge.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxAge.setDescription("The maximum time in seconds to reuse of connections. \n\t\tDon't reuse connections older than max_age seconds.")
ltmConnPoolProfileMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileMaxReuse.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileMaxReuse.setDescription("The maximum times to reuse of connections. \n\t\tDon't reuse connections older than max_reuse times.")
ltmConnPoolProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileIdleTimeout.setDescription('The idle timeout for connections in the pool.')
ltmConnPoolProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmConnPoolProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmConnPoolProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmConnPoolProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatNumber.setDescription('The number of ltmConnPoolProfileStat entries in the table.')
ltmConnPoolProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3), )
if mibBuilder.loadTexts: ltmConnPoolProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatTable.setDescription('A table containing statistic information of connection pool profiles.')
ltmConnPoolProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"))
if mibBuilder.loadTexts: ltmConnPoolProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatEntry.setDescription('Columns in the ltmConnPoolProfileStat Table')
ltmConnPoolProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatName.setDescription('The name of a connection pool profile.')
ltmConnPoolProfileStatCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatCurSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatCurSize.setDescription('The number of currently idle connections in the pool.')
ltmConnPoolProfileStatMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatMaxSize.setDescription('The number of idle connections in the pool.')
ltmConnPoolProfileStatReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatReuses.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatReuses.setDescription('The number of times a connection was reused from the pool.')
ltmConnPoolProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 4, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmConnPoolProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatConnects.setDescription('The number of times a new connection was initiated.')
ltmFastL4ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileNumber.setDescription('The number of ltmFastL4Profile entries in the table.')
ltmFastL4ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2), )
if mibBuilder.loadTexts: ltmFastL4ProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTable.setDescription('A table containing information of fast L4  profiles.')
ltmFastL4ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"))
if mibBuilder.loadTexts: ltmFastL4ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileEntry.setDescription('Columns in the ltmFastL4Profile Table')
ltmFastL4ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileName.setDescription('The name of a fast L4 profile.')
ltmFastL4ProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmFastL4ProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmFastL4ProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileResetOnTimeout.setDescription('The feature of reset for idle timeout.\n\t\tIf true and a TCP connection exceeds its idle_timeout, send a reset \n\t\tin addition to deleting the connection.')
ltmFastL4ProfileIpFragReass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpFragReass.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpFragReass.setDescription('The feature for reassembling IP fragments. If true, reassemble IP fragments.')
ltmFastL4ProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is eligible \n\t\tfor deletion.')
ltmFastL4ProfileTcpHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpHandshakeTimeout.setDescription('The number of seconds without traffic before a connection in the SYN \n\t\treceived state is eligible for deletion. \n\t\tIf set to 0, ltmFastL4ProfileIdleTimeout will be used.')
ltmFastL4ProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileMssOverride.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileMssOverride.setDescription('If non-zero and less than the 1460 default, this value overrides \n\t\tthe maximum segment size')
ltmFastL4ProfilePvaAccelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfilePvaAccelMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfilePvaAccelMode.setDescription('The preferred Packet Velocity ASIC (PVA) acceleration mode.')
ltmFastL4ProfileTcpTimestampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpTimestampMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpTimestampMode.setDescription('The option to preserver, strip or rewrite TCP timestamps.')
ltmFastL4ProfileTcpWscaleMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("preserve", 0), ("strip", 1), ("rewrite", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpWscaleMode.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpWscaleMode.setDescription('The option to preserver or strip window scale option.')
ltmFastL4ProfileTcpGenerateIsn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpGenerateIsn.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpGenerateIsn.setDescription('The option to generate own sequence numbers on all SYNs conformant\n\t\twith RFC1948, and hence allowing timestamp recycling.')
ltmFastL4ProfileTcpStripSack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpStripSack.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpStripSack.setDescription('The option to block TCP SackOK option from passing to server \n\t\ton an initiating SYN.')
ltmFastL4ProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToClient.setDescription('The IP type of service set in packets sent to the client-side.')
ltmFastL4ProfileIpTosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileIpTosToServer.setDescription('The IP type of service set in packets sent to the server-side.')
ltmFastL4ProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to the client-side.')
ltmFastL4ProfileLinkQosToServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLinkQosToServer.setDescription('The link quality of service set in packets sent to the server-side.')
ltmFastL4ProfileRttFromClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromClient.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromClient.setDescription('The option to use TCP timestamp options to measure the round trip \n\t\ttime to the client.')
ltmFastL4ProfileRttFromServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromServer.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileRttFromServer.setDescription('The option to use TCP timestamp options to measure the round trip \n\t\ttime to the server.')
ltmFastL4ProfileTcpCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTcpCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTcpCloseTimeout.setDescription('The number of seconds without traffic before a connection in the FIN \n\t\treceived state is eligible for deletion. \n\t\tThis is only used when ltmFastL4ProfileLooseInitiation or \n\t\tltmFastL4ProfileLooseClose is enabled.')
ltmFastL4ProfileLooseInitiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseInitiation.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLooseInitiation.setDescription('The option to allow any TCP packet to initiate a connection (rather\n\t\tthan requiring a SYN.')
ltmFastL4ProfileLooseClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLooseClose.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLooseClose.setDescription('The option to aggressively close out a connection by allowing TMM to switch\n\t\tthe ltmFastL4ProfileIdleTimeout to ltmFastL4ProfileTcpCloseTimeout\n\t\tonce the first FIN packet has been seen.')
ltmFastL4ProfileHardSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileHardSyncookie.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileHardSyncookie.setDescription('The option to enable hardware SYN cookie protection using Packet Velocity ASIC (PVA).')
ltmFastL4ProfileSoftSyncookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileSoftSyncookie.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileSoftSyncookie.setDescription('The state indicating whether or not software SYN cookie protection is enable.')
ltmFastL4ProfileLateBinding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileLateBinding.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileLateBinding.setDescription('The state indicating whether or not Late Binding is enabled.')
ltmFastL4ProfileExplicitFlowMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileExplicitFlowMigration.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileExplicitFlowMigration.setDescription('The state indicating whether connections are automatically migrated\n\t        into the hardware (false) or whether they must be explicitly migrated\n\t        to hardware by the iRule command BIGTCP::release_flow (true).')
ltmFastL4ProfileClientTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileClientTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileClientTimeout.setDescription('The number of seconds allowed for a client to transmit enough data to select\n\t        a server when late binding is enabled.')
ltmFastL4ProfileTimeoutRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disconnect", 0), ("fallback", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileTimeoutRecovery.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileTimeoutRecovery.setDescription('The action to take when late binding timeout occurs on a connection.')
ltmFtpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileNumber.setDescription('The number of ltmFtpProfile entries in the table.')
ltmFtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2), )
if mibBuilder.loadTexts: ltmFtpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileTable.setDescription('A table containing information of FTP profiles.')
ltmFtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"))
if mibBuilder.loadTexts: ltmFtpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileEntry.setDescription('Columns in the ltmFtpProfile Table')
ltmFtpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileName.setDescription('The name of a FTP profile.')
ltmFtpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmFtpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmFtpProfileTranslateExtended = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileTranslateExtended.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileTranslateExtended.setDescription('Whether or not automatically translated RFC2428 extended requests\n\t\tEPSV and EPRT to PASV and PORT when talking to IPv4 servers.')
ltmFtpProfileDataPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileDataPort.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileDataPort.setDescription('The data channel port used for this FTP profile. By default, \n\t\tthis is 20, but may need to be changed for non-default port FTP.')
ltmFtpProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmFtpProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileNumber.setDescription('The number of ltmHttpProfile entries in the table.')
ltmHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2), )
if mibBuilder.loadTexts: ltmHttpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileTable.setDescription('A table containing information of HTTP profiles.')
ltmHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"))
if mibBuilder.loadTexts: ltmHttpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileEntry.setDescription('Columns in the ltmHttpProfile Table')
ltmHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileName.setDescription('The name of a HTTP profile.')
ltmHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmHttpProfileBasicAuthRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileBasicAuthRealm.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileBasicAuthRealm.setDescription('The basic authentication realm of the specified HTTP profile.')
ltmHttpProfileOneConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileOneConnect.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileOneConnect.setDescription('The state that specifies whether OneConnect HTTP header \n\t\ttransformation is used for the specified HTTP profile.')
ltmHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderInsert.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHeaderInsert.setDescription('The header to be inserted into the HTTP header for \n\t\tthe specified HTTP profile.')
ltmHttpProfileHeaderErase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHeaderErase.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHeaderErase.setDescription('The header to be erased into the HTTP header for \n\t\tthe specified HTTP profile.')
ltmHttpProfileFallbackHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileFallbackHost.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileFallbackHost.setDescription('The fallback host name used in HTTP redirect for \n\t\tthe specified HTTP profile.')
ltmHttpProfileCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("selective", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMode.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressMode.setDescription('Deprecated!  The state that specifies whether compression is enabled.')
ltmHttpProfileCompressMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressMinSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressMinSize.setDescription('Deprecated!  The value that specifies the minimum length of the server \n\t\tresponses (in bytes) to be considered acceptable for compression.')
ltmHttpProfileCompressBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBufferSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressBufferSize.setDescription("Deprecated!  The value that specifies the maximum number of uncompressed bytes \n\t\tthat the compression proxy will buffer before it decides whether or \n\t\tnot to compress the server's response, in case the server's response \n\t\theaders don't specify the content length of the response.")
ltmHttpProfileCompressVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressVaryHeader.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressVaryHeader.setDescription("Deprecated!  The state that specifies whether to insert the header \n\t\t'Vary: Accept-Encoding' in the server response for responses that \n\t\thave been compressed. If the 'Vary:' header already exists in the \n\t\tserver response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpProfileCompressAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressAllowHttp10.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressAllowHttp10.setDescription('Deprecated!  The state that specifies whether to allow compression on responses \n\t\tto HTTP 1.0 requests.')
ltmHttpProfileCompressGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipMemlevel.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipMemlevel.setDescription('Deprecated!  The amount of memory that the proxy will use when doing compression. \n\t\tIt must be an integer no less than 1 and no greater than 9. Higher \n\t\tvalues produce faster compression at the expense of more memory usage. \n\t\tThe default memory level will be 8.')
ltmHttpProfileCompressGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipWindowsize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipWindowsize.setDescription('Deprecated!  The number of bits in the window size that the compression proxy \n\t\twill use when compressing the server response. It should be an integer \n\t\tno less than 8 and no greater than 15. Higher values produce better \n\t\tcompression ratios at the expense of more memory usage. \n\t\tThe default window size will be 15.')
ltmHttpProfileCompressGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipLevel.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressGzipLevel.setDescription('Deprecated!  The speed of compression that is applied to the response. Minimum\n\t\tvalue is 1, maximum is 9. The lower numbers give faster compression \n\t\twith lower ratios, and higher numbers give slower compression with \n\t\thigher ratios.')
ltmHttpProfileCompressKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressKeepAcceptEncoding.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressKeepAcceptEncoding.setDescription('Deprecated!  The state of the option to keep client-encoding header.')
ltmHttpProfileCompressBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressBrowserWorkarounds.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressBrowserWorkarounds.setDescription("Deprecated!  The option to control whether or not to disable compression for \n\t\tknown browsers that cannot handle certain types of compressed \n\t\tresponses properly. If it's true, compression for known browsers \n\t\twill be disabled.")
ltmHttpProfileRequestChunking = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4))).clone(namedValues=NamedValues(("preserve", 0), ("selective", 1), ("rechunk", 3), ("sustain", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRequestChunking.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileRequestChunking.setDescription('The HTTP chunk mode for the requests.')
ltmHttpProfileResponseChunking = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("preserve", 0), ("selective", 1), ("unchunk", 2), ("rechunk", 3), ("sustain", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileResponseChunking.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileResponseChunking.setDescription('The HTTP chunk mode for the responses.')
ltmHttpProfileLwsMaxColumn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsMaxColumn.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileLwsMaxColumn.setDescription('The linear white space maximum column sizes used to support \n\t\tmulti-line header insertion.')
ltmHttpProfileLwsSeparator = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileLwsSeparator.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileLwsSeparator.setDescription('The linear white space separator strings for the specified HTTP profile.')
ltmHttpProfileRedirectRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("all", 1), ("matching", 2), ("nodes", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRedirectRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileRedirectRewrite.setDescription('The HTTP redirect/rewrite mode for the responses.')
ltmHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileMaxHeaderSize.setDescription('The maximum size of the headers.')
ltmHttpProfilePipelining = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePipelining.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfilePipelining.setDescription('Deprecated!  The state indicating whether pipelining is enabled for this profile.')
ltmHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileInsertXforwardedFor.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileInsertXforwardedFor.setDescription('The state indicating whether inserting X-Forwarded-For\n\t\tis enabled for this profile.')
ltmHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileMaxRequests.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileMaxRequests.setDescription('The maximum connection requests allowed. The connection will be\n\t\tforced closed when this limit is reached.')
ltmHttpProfileCompressCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaver.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaver.setDescription('Deprecated!  The state indicating whether CPU saving mode is enable or not\n\t\twhen doing compression.')
ltmHttpProfileCompressCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverHigh.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverHigh.setDescription('Deprecated!  The CPU saver high threshold. When CPU utilization exceeds this value,\n\t\tcompression is switched to NULL compression.')
ltmHttpProfileCompressCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverLow.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressCpusaverLow.setDescription('Deprecated!  The CPU saver low threshold. When CPU utilization drops below\n\t\tthis value, compression is switched to full throttle.')
ltmHttpProfileRamcache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcache.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcache.setDescription('Deprecated!  The state the whether RAM cache is enabled or not.')
ltmHttpProfileRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheSize.setDescription("Deprecated!  The maximum cache size in MB's.")
ltmHttpProfileRamcacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxEntries.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxEntries.setDescription('Deprecated!  The maximum cache entries.')
ltmHttpProfileRamcacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxAge.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheMaxAge.setDescription('Deprecated!  The maximum age of cached object.')
ltmHttpProfileRamcacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMinSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMinSize.setDescription('Deprecated!  The minimum size requirement for cached object in bytes.')
ltmHttpProfileRamcacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMaxSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheObjectMaxSize.setDescription('Deprecated!  The maximum size limitation for cached object in bytes.')
ltmHttpProfileRamcacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheIgnoreClient.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheIgnoreClient.setDescription('Deprecated!  The state that Ram cache ignores client cache.')
ltmHttpProfileRamcacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheAgingRate.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheAgingRate.setDescription('Deprecated!  The aging rate for the RAM cache.')
ltmHttpProfileRamcacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileRamcacheInsertAgeHeader.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileRamcacheInsertAgeHeader.setDescription('Deprecated!  The mode that indicates whether to insert the Age headers for RAM cache.')
ltmHttpProfileCompressPreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deflate", 0), ("gzip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileCompressPreferredMethod.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileCompressPreferredMethod.setDescription('Deprecated!  The option for preferred compression method.')
ltmHttpProfileServerAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 41), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileServerAgentName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileServerAgentName.setDescription('The server header sent in responses that the BIG-IP itself\n\t\t generates. The default value is BigIP. If is no string is set\n\t         as the value, then no server header will be added to such responses.')
ltmHttpProfilePassthroughPipeline = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reject", 0), ("allow", 1), ("passthrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughPipeline.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughPipeline.setDescription('The state indicating behavior on seeing pipelined data in this profile.')
ltmHttpProfileTruncatedRedirects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileTruncatedRedirects.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileTruncatedRedirects.setDescription('The state indicating behavior on seeing a truncated redirect in this profile.')
ltmHttpProfilePassthroughOversizeClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeClientHeaders.setDescription('The state indicating passthrough behavior on seeing oversize client headers in this profile.')
ltmHttpProfilePassthroughOversizeServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughOversizeServerHeaders.setDescription('The state indicating passthrough behavior on seeing oversize server headers in this profile.')
ltmHttpProfilePassthroughExcessClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessClientHeaders.setDescription('The state indicating passthrough behavior on seeing excess client headers in this profile.')
ltmHttpProfilePassthroughExcessServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughExcessServerHeaders.setDescription('The state indicating passthrough behavior on seeing excess server headers in this profile.')
ltmHttpProfilePassthroughUnknownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("reject", 0), ("allow", 1), ("passthrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfilePassthroughUnknownMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfilePassthroughUnknownMethod.setDescription('The state indicating behavior on seeing an unknown method in this profile.')
ltmHttpProfileHstsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHstsMode.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHstsMode.setDescription('The state indicating whether the hsts header is included in the HTTP response.')
ltmHttpProfileHstsMaximumAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHstsMaximumAge.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHstsMaximumAge.setDescription('The maximum age to present in the hsts header.')
ltmHttpProfileHstsIncludeSubdomains = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHstsIncludeSubdomains.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHstsIncludeSubdomains.setDescription('The state indicating the presence or absence of the includeSubdomains\n\t        directive in the HTTP header.')
ltmHttpProfileHstsPreload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileHstsPreload.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileHstsPreload.setDescription('The state indicating the presence or absence of the preload\n\t        directive in the HSTS header.')
ltmHttpProfileOneConnectStatusReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 1, 2, 1, 53), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileOneConnectStatusReuse.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileOneConnectStatusReuse.setDescription('The 2xx and 4xx HTTP status codes that allow OneConnect server-side reuse.')
ltmCompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileCompUriIncl entries in the table.')
ltmCompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2), )
if mibBuilder.loadTexts: ltmCompUriInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe request URI part of the client requests during compression. \n\t\tA match must be found in at least one of the 'include' fields.")
ltmCompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"))
if mibBuilder.loadTexts: ltmCompUriInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclEntry.setDescription('Columns in the ltmCompUriIncl Table')
ltmCompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclName.setDescription('The name of a HTTP profile.')
ltmCompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclIndex.setDescription("The index of the regular expression used to match the request \n\t\tURI part of the client requests during compression in \n\t\t'include' fields for the specified HTTP profile.")
ltmCompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriInclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriInclUri.setDescription("The regular expression used to match the request URI part \n\t\tof the client requests during compression in 'include' fields \n\t\tfor the specified HTTP profile.")
ltmCompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileCompUriExcl entries in the table.')
ltmCompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2), )
if mibBuilder.loadTexts: ltmCompUriExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe request URI part of the client requests during compression. \n\t\tA match must be found in at least one of the 'exclude' fields.")
ltmCompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"))
if mibBuilder.loadTexts: ltmCompUriExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclEntry.setDescription('Columns in the ltmCompUriExcl Table')
ltmCompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclName.setDescription('The name of a HTTP profile.')
ltmCompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclIndex.setDescription("The index of the regular expression used to match the request \n\t\tURI part of the client requests during compression in \n\t\t'exclude' fields for the specified HTTP profile.")
ltmCompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompUriExclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompUriExclUri.setDescription("The regular expression used to match the request URI part \n\t\tof the client requests during compression in 'exclude' fields \n\t\tfor the specified HTTP profile.")
ltmCompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileCompContTypeIncl entries in the table.')
ltmCompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2), )
if mibBuilder.loadTexts: ltmCompContTypeInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe MIME types in the server response's 'Content-Type:' headers. \n\t\tA match must be found in at least one of the 'include' fields.")
ltmCompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclEntry.setDescription('Columns in the ltmCompContTypeIncl Table')
ltmCompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclName.setDescription('The name of a HTTP profile.')
ltmCompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the \n\t        server response's 'Content-Type:' headers in 'include' fields for \n\t\tthe specified HTTP profile.")
ltmCompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeInclContentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server \n\t\tresponse's 'Content-Type:' headers in 'include' fields for the\n\t\tspecified HTTP profile.")
ltmCompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileCompContTypeExcl entries in the table.')
ltmCompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2), )
if mibBuilder.loadTexts: ltmCompContTypeExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe MIME types in the server response's 'Content-Type:' headers. \n\t\tA match must be found in at least one of the 'exclude' fields.")
ltmCompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmCompContTypeExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclEntry.setDescription('Columns in the ltmCompContTypeExcl Table')
ltmCompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclName.setDescription('The name of a HTTP profile.')
ltmCompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the \n\t        server response's 'Content-Type:' headers in 'exclude' fields for \n\t\tthe specified HTTP profile.")
ltmCompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmCompContTypeExclContentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmCompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server \n\t\tresponse's 'Content-Type:' headers in 'exclude' fields for the\n\t\tspecified HTTP profile.")
ltmHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmHttpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatNumber.setDescription('The number of ltmHttpProfileStat entries in the table.')
ltmHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3), )
if mibBuilder.loadTexts: ltmHttpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatTable.setDescription('A table containing statistic information of HTTP profiles.')
ltmHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"))
if mibBuilder.loadTexts: ltmHttpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatEntry.setDescription('Columns in the ltmHttpProfileStat Table')
ltmHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatName.setDescription('The name of a HTTP profile.')
ltmHttpProfileStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCookiePersistInserts.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatCookiePersistInserts.setDescription('The number of successful attempts to insert HTTP headers \n\t\t for cookie persistence (set-cookie header insertions).')
ltmHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp2xxCnt.setDescription('The number of server-side responses in range of 200 to 206 \n\t\t (successful responses)')
ltmHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp3xxCnt.setDescription('The number of server-side responses in range of 300 to 307 \n\t\t (redirection responses).')
ltmHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp4xxCnt.setDescription('The number of server-side responses in range of 400 to 417  \n\t\t (client errors).')
ltmHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatResp5xxCnt.setDescription('The number of server-side responses in range of 500 to 505 \n\t\t (server errors).')
ltmHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatNumberReqs.setDescription('The total number of HTTP requests.')
ltmHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatGetReqs.setDescription('The total number of HTTP get requests.')
ltmHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPostReqs.setDescription('The total number of HTTP post requests.')
ltmHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV9Reqs.setDescription('The total number of version 9 requests.')
ltmHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV10Reqs.setDescription('The total number of version 10 requests.')
ltmHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV11Reqs.setDescription('The total number of version 11 requests.')
ltmHttpProfileStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV9Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV9Resp.setDescription('The total number of version 9 responses.')
ltmHttpProfileStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV10Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV10Resp.setDescription('The total number of version 10 responses.')
ltmHttpProfileStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV11Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV11Resp.setDescription('The total number of version 11 responses.')
ltmHttpProfileStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatMaxKeepaliveReq.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatMaxKeepaliveReq.setDescription('The maximum number of requests made in a connection.')
ltmHttpProfileStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket1k.setDescription('The number of responses under 1k.')
ltmHttpProfileStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket4k.setDescription('The number of responses under 1 - 4k.')
ltmHttpProfileStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket16k.setDescription('The number of responses under 4 - 16k.')
ltmHttpProfileStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket32k.setDescription('The number of responses under 16 - 32k.')
ltmHttpProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPrecompressBytes.setDescription('Deprecated!  The number of response bytes before compression has taken place.')
ltmHttpProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPostcompressBytes.setDescription('Deprecated!  The number of response bytes after compression has taken place.')
ltmHttpProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatNullCompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatNullCompressBytes.setDescription('Deprecated!  The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatHtmlPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatCssPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatCssPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatCssPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatJsPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatJsPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatJsPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatXmlPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatSgmlPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatPlainPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOctetPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatImagePrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatImagePostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatImagePostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatVideoPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatAudioPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPrecompressBytes.setDescription('Deprecated!  The number of pre-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmHttpProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatOtherPostcompressBytes.setDescription('Deprecated!  The number of post-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmHttpProfileStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHits.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHits.setDescription('Deprecated!  The number of RAM cache hits.')
ltmHttpProfileStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMisses.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMisses.setDescription('Deprecated!  The number of RAM cache misses, excluding un-cacheable data.')
ltmHttpProfileStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissesAll.setDescription('Deprecated!  The total number of RAM cache misses.')
ltmHttpProfileStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHitBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheHitBytes.setDescription('Deprecated!  The number of RAM cache hits in bytes.')
ltmHttpProfileStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytes.setDescription('Deprecated!  The number of RAM cache misses in bytes, excluding un-cacheable data.')
ltmHttpProfileStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheMissBytesAll.setDescription('Deprecated!  The total number of RAM cache misses in bytes.')
ltmHttpProfileStatRamcacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheSize.setDescription('Deprecated!  The Ram cache current size.')
ltmHttpProfileStatRamcacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheCount.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheCount.setDescription('Deprecated!  The number of items stored in Ram cache.')
ltmHttpProfileStatRamcacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheEvictions.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRamcacheEvictions.setDescription('Deprecated!  The number of Ram cache evictions.')
ltmHttpProfileStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket64k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpProfileStatRespBucket64k.setDescription('Deprecated! Please see the new larger bucket sizes')
ltmHttpProfileStatPassthroughIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughIrule.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughIrule.setDescription("The number of HTTP::disable's leading to pass through mode.")
ltmHttpProfileStatPassthroughConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughConnect.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughConnect.setDescription('The number of CONNECT methods leading to pass through mode.')
ltmHttpProfileStatPassthroughWebSockets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughWebSockets.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughWebSockets.setDescription('The number of 100 Switching Protocols leading to pass through mode.')
ltmHttpProfileStatPassthroughOversizeClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeClientHeaders.setDescription('The number of too-large client headers requests causing pass through mode.')
ltmHttpProfileStatPassthroughOversizeServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughOversizeServerHeaders.setDescription('The number of too-large server headers responses causing pass through mode.')
ltmHttpProfileStatPassthroughExcessClientHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessClientHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessClientHeaders.setDescription('The number of too many client headers requests causing pass through mode.')
ltmHttpProfileStatPassthroughExcessServerHeaders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessServerHeaders.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughExcessServerHeaders.setDescription('The number of too many server headers responses causing pass through mode.')
ltmHttpProfileStatPassthroughUnknownMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughUnknownMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughUnknownMethod.setDescription('The number of unknown methods leading to pass through mode.')
ltmHttpProfileStatPassthroughPipeline = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughPipeline.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatPassthroughPipeline.setDescription('The number of pipelined requests leading to pass through mode.')
ltmHttpProfileStatV20Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV20Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV20Reqs.setDescription('The total number of version 20 requests.')
ltmHttpProfileStatV30Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV30Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV30Reqs.setDescription('The total number of version 30 requests.')
ltmHttpProfileStatV20Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV20Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV20Resp.setDescription('The total number of version 20 responses.')
ltmHttpProfileStatV30Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 6, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProfileStatV30Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatV30Resp.setDescription('The total number of version 30 responses.')
ltmPersistProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileNumber.setDescription('The number of ltmPersistProfile entries in the table.')
ltmPersistProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2), )
if mibBuilder.loadTexts: ltmPersistProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileTable.setDescription('A table containing information of persistent profile.')
ltmPersistProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"))
if mibBuilder.loadTexts: ltmPersistProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileEntry.setDescription('Columns in the ltmPersistProfile Table')
ltmPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileName.setDescription('The name of a persist profile.')
ltmPersistProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmPersistProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmPersistProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("none", 0), ("srcaddr", 1), ("dstaddr", 2), ("cookie", 3), ("msrdp", 4), ("sslsid", 5), ("sip", 6), ("uie", 7), ("hash", 8), ("host", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMode.setDescription('The type of persistence.')
ltmPersistProfileMirror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMirror.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMirror.setDescription('The state of mirror persistence records.')
ltmPersistProfileTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileTimeout.setDescription('The value (in seconds) to timeout persist entry.')
ltmPersistProfileMaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMaskType.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMaskType.setDescription('The IP address type of ltmPersistMask')
ltmPersistProfileMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMask.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMask.setDescription('The source/destination address mask. It is interpreted \n\t\twithin the context of a ltmPersistMaskType value.')
ltmPersistProfileCookieMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unspecified", 0), ("insert", 1), ("rewrite", 2), ("passive", 3), ("hash", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieMethod.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieMethod.setDescription('The type of cookie persistence.')
ltmPersistProfileCookieName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieName.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieName.setDescription('The name of cookie.')
ltmPersistProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieExpiration.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieExpiration.setDescription('The cookie expiration in seconds.')
ltmPersistProfileCookieHashOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashOffset.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieHashOffset.setDescription('The offset of cookie for hash mode.')
ltmPersistProfileCookieHashLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHashLength.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieHashLength.setDescription('The length of cookie for hash mode.')
ltmPersistProfileMsrdpNoSessionDir = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMsrdpNoSessionDir.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMsrdpNoSessionDir.setDescription('This object indicates MS terminal services has been configured\n\t\twithout a session directory and causes the initial MSRDP\n\t\tconnection to be load-balanced.')
ltmPersistProfileMapProxies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileMapProxies.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileMapProxies.setDescription('This object indicates whether we should map known proxies when\n\t\tthe persistence mode is src_addr.')
ltmPersistProfileAcrossServices = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossServices.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossServices.setDescription('This object indicates whether the persistence entries added under\n\t\tthis profile are available across services.')
ltmPersistProfileAcrossVirtuals = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossVirtuals.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossVirtuals.setDescription('This object indicates whether the persistence entries added under\n\t\tthis profile are available across virtuals.')
ltmPersistProfileAcrossPools = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileAcrossPools.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileAcrossPools.setDescription('This object indicates whether the persistence entries added under\n\t\tthis profile are available across pools.')
ltmPersistProfileUieRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileUieRule.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileUieRule.setDescription('The rule name for UIE mode.')
ltmPersistProfileSipInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileSipInfo.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileSipInfo.setDescription('The SIP header name for persisting in the specified profile.')
ltmPersistProfileCookieHttpOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieHttpOnly.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieHttpOnly.setDescription('The state of cookie HTTP Only attribute.')
ltmPersistProfileCookieSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 8, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPersistProfileCookieSecure.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileCookieSecure.setDescription('The state of cookie Secure attribute.')
ltmStreamProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileNumber.setDescription('The number of ltmStreamProfile entries in the table.')
ltmStreamProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2), )
if mibBuilder.loadTexts: ltmStreamProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileTable.setDescription('A table containing information of stream profile.')
ltmStreamProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"))
if mibBuilder.loadTexts: ltmStreamProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileEntry.setDescription('Columns in the ltmStreamProfile Table')
ltmStreamProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileName.setDescription('The name of a stream profile.')
ltmStreamProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmStreamProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmStreamProfileSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileSource.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileSource.setDescription('The source string to search for.')
ltmStreamProfileTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileTarget.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileTarget.setDescription('The target string to replace.')
ltmStreamProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmStreamProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmStreamProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmStreamProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatNumber.setDescription('The number of ltmStreamProfileStat entries in the table.')
ltmStreamProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3), )
if mibBuilder.loadTexts: ltmStreamProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatTable.setDescription('A table containing statistic information of stream profile.')
ltmStreamProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"))
if mibBuilder.loadTexts: ltmStreamProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatEntry.setDescription('Columns in the ltmStreamProfileStat Table')
ltmStreamProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatName.setDescription('The name of a stream profile.')
ltmStreamProfileStatReplaces = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmStreamProfileStatReplaces.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatReplaces.setDescription('The number of replace operations completed.')
ltmTcpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileNumber.setDescription('The number of ltmTcpProfile entries in the table.')
ltmTcpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2), )
if mibBuilder.loadTexts: ltmTcpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTable.setDescription('A table containing information of TCP profile.')
ltmTcpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"))
if mibBuilder.loadTexts: ltmTcpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEntry.setDescription('Columns in the ltmTcpProfile Table')
ltmTcpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileName.setDescription('The name of a TCP profile.')
ltmTcpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmTcpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmTcpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileResetOnTimeout.setDescription('The feature of reset for idle timeout.\n\t\tIf true and a TCP connection exceeds its idle_timeout, send a reset \n\t\tin addition to deleting the connection.')
ltmTcpProfileTimeWaitRecycle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitRecycle.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitRecycle.setDescription('Recycle connection when SYN is received in TIME-WAIT state.')
ltmTcpProfileDelayedAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayedAcks.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDelayedAcks.setDescription('If true, Enable delayed ACK to allow coalescing of multiple ACK responses.')
ltmTcpProfileProxyMss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyMss.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyMss.setDescription('Whether or not to proxy maximum segment size. \n\t\tIf true, advertise the same mss to the server as was \n\t\tnegotiated with the client.')
ltmTcpProfileProxyOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyOptions.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyOptions.setDescription('Whether or not to proxy an option.\n\t\tIf true, advertise an option (e.g. time-stamps) to \n\t\tthe server only if it was negotiated with the client.')
ltmTcpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferLow.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferLow.setDescription('The proxy buffer level at which the receive window is opened.')
ltmTcpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferHigh.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileProxyBufferHigh.setDescription('The proxy buffer level at which the receive window is closed.')
ltmTcpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is \n\t\teligible for deletion.')
ltmTcpProfileTimeWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimeWaitTimeout.setDescription('The milliseconds in TIME-WAIT before entering CLOSED state.')
ltmTcpProfileFinWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFinWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileFinWaitTimeout.setDescription('The number of seconds to remain in FIN-WAIT-1 or CLOSING state\n\t\tbefore giving up. Zero is forever (or until maxrtx of FIN).')
ltmTcpProfileCloseWaitTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCloseWaitTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCloseWaitTimeout.setDescription('The number of seconds to remain in LAST-ACK state before\n\t\tgiving up. Zero is forever (or until maxrtx of FIN).')
ltmTcpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSndbuf.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSndbuf.setDescription('Send buffer size in bytes.')
ltmTcpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRcvwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRcvwnd.setDescription('Receive window size in bytes.')
ltmTcpProfileKeepAliveInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileKeepAliveInterval.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileKeepAliveInterval.setDescription('Keep alive probe interval in milliseconds.')
ltmTcpProfileSynMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSynMaxrtx.setDescription('The maximum number of retransmissions of SYN segments.')
ltmTcpProfileMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMaxrtx.setDescription('The maximum number of retransmissions of data segments.')
ltmTcpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileIpTosToClient.setDescription('The IP type of service set in packets sent to client. Default:None.')
ltmTcpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to client. Default:None.')
ltmTcpProfileDeferredAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDeferredAccept.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDeferredAccept.setDescription('The state that if true, defers allocation of connection chain context\n\t\tuntil payload from client has been seen.')
ltmTcpProfileSelectiveAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSelectiveAcks.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSelectiveAcks.setDescription('The state that if true, enable RFC2018 Selective Acknowledgements.')
ltmTcpProfileEcn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEcn.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEcn.setDescription('The state that if true, enable RFC3168 Extended Congestion Notification (ECN).')
ltmTcpProfileLimitedTransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileLimitedTransmit.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileLimitedTransmit.setDescription('The state that if true, enables support for RFC3042 Limited Transmit Recovery')
ltmTcpProfileHighPerfTcpExt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileHighPerfTcpExt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTcpProfileHighPerfTcpExt.setDescription('Deprecated! Replaced by ltmTcpProfileTimestamps.\n\t\tThe state that if true, enables support for RFC1323 timestamps \n\t\tand window scaling (high bandwidth TCP extensions).')
ltmTcpProfileSlowStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSlowStart.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSlowStart.setDescription('The state if true, enable TCP slow-start by default. We use RFC3390 to\n\t\tslow-start rather than traditional congestion avoidance mechanisms.')
ltmTcpProfileBandwidthDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileBandwidthDelay.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTcpProfileBandwidthDelay.setDescription("Deprecated! The state if true, attempt to calculate the optimal bandwidth\n\t        to use to the peer based on throughput and round-trip time,\n\t        and don't exceed it.")
ltmTcpProfileNagle = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileNagle.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileNagle.setDescription("The state if true, delay sending data < MSS in size unless\n\t    all prior data has been ACKed. This leads to less in-flight small-data,\n\t    and less chance for drops, but can harm interactivity. When state is false,\n\t    sending data < MSS in size is not delayed. When state is auto, the use of\n\t    Nagle's algorithm is decided based on network conditions. Named after\n\t    Nagle's algorithm.")
ltmTcpProfileAckOnPush = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAckOnPush.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAckOnPush.setDescription('The state if true, data-bearing in-order TCP segments will elicit \n\t\timmediate ACKs from us if they have the PUSH flag set, regardless of \n\t\tthe setting of the delayed-ack profile option.')
ltmTcpProfileMd5Sig = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5Sig.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMd5Sig.setDescription('The state if true, use RFC2385 TCP-MD5 signatures to protect \n\t\tTCP traffic against intermediate tampering.')
ltmTcpProfileMd5SigPass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMd5SigPass.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTcpProfileMd5SigPass.setDescription('Deprecated! No longer supported.\n\t        This is a plaintext passphrase which may be between 1 and 80 \n\t        characters in length, and is used in a shared-secret scheme \n\t        to implement the spoof-prevention parts of RFC2385.')
ltmTcpProfileAbc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAbc.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAbc.setDescription('The state that if it is true, count the number of bytes ACKed \n\t\trather than the number of returning ACKs from the peer when \n\t\tin the linear congestion-window expansion phase of a TCP\n\t\tconnection. This algorithm and its benefits are described \n\t\tin RFC3465 (Appropriate Byte Counting).')
ltmTcpProfileCongestionCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("reno", 0), ("newreno", 1), ("scalable", 2), ("highspeed", 3), ("none", 4), ("vegas", 5), ("illinois", 6), ("woodside", 7), ("chd", 8), ("cdg", 9), ("cubic", 10), ("westwood", 11), ("bbr", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCongestionCtrl.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCongestionCtrl.setDescription('The TCP congestion control mode, guiding cwnd growth.\n\t\treno - RENO congestion control mode;\n\t\tnewreno - new RENO congestion control mode;\n\t\tscalable - scalable congestion control mode. It will do MIMD\n\t   \t           on cwnd besides NewReno retransmission;\n\t\thighspeed - high-speed congestion control mode, per RFC3649;\n\t\tnone - no congestion control;\n\t\tvegas - vegas congestion control, delay-based;\n\t\tillinois - illinois congestion control, hybrid loss and delay;\n\t\twoodside - woodside congestion control, hybrid loss and delay;\n\t\tchd - chd congestion control, queue-delay based;\n\t\tcdg - cdg congestion control, RTT based;\n\t\tcubic - cubic congestion control, optimized for high latency,\n\t\t        high bandwidth connections;\n\t\twestwood - westwood+ congestion control, bandwidth estimation;\n\t\tbbr - bbr congestion control, bandwidth and RTT based.')
ltmTcpProfileDsack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDsack.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDsack.setDescription('The state that if true, enable support for RFC2883 D-SACK (Duplicate Selective Acknowledgment).')
ltmTcpProfileCmetricsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCache.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCache.setDescription('The state that if true, use the routing table metrics cache to\n\t\tretrieve the last-known tcp congestion parameters.\n\t\t(Congestion window, round-trip-times, and slow-start threshold.)')
ltmTcpProfileVerifiedAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileVerifiedAccept.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileVerifiedAccept.setDescription('The state that if true, the device must not respond to the clients \n\t         SYN with a SYN-ACK until it receives a SYN-ACK from \n\t         the server, indicating that the port is open.')
ltmTcpProfilePktLossIgnoreRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreRate.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreRate.setDescription('Specifies the threshold of packets lost per million at which the system should perform congestion control.\n\t         Measured in packets per million. Valid values are from 0 to 1000000.')
ltmTcpProfilePktLossIgnoreBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreBurst.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfilePktLossIgnoreBurst.setDescription('Specifies the likelihood of performing congestion control when multiple packets in a row are lost even \n\t         if the loss threshold has not been exceeded. Valid values are from 0 to 32. Higher values decrease the \n\t         likelihood of performing congestion control.')
ltmTcpProfileZeroWindowTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileZeroWindowTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileZeroWindowTimeout.setDescription('Specifies the timeout in milliseconds for terminating a connection with an effective zero length TCP\n\t\t transmit window. The timeout starts when the peer advertises a zero length TCP window or when enough\n\t\t data has been sent to fill the previously advertised window. The timer is canceled when a non-zero\n\t\t length window is received. The default is 20000 milliseconds.')
ltmTcpProfileInitCwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitCwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileInitCwnd.setDescription('Initial congestion window size for connections to this destination. Actual window size is this value\n\t         multiplied by the MSS (Maximal Segment Size) for same connection. The default is zero, meaning to\n\t         use the values specified in RFC2414. Allowed values are in the range of 0 to 64.')
ltmTcpProfileInitRwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileInitRwnd.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileInitRwnd.setDescription('Initial receive window size for connections to this destination. The actual window size is this value\n\t         multiplied by the MSS (Maximal Segment Size) of the connection. The default value is zero, meaning\n\t         to use Slow Start value. Allowed values are in the range of 0 to 64.')
ltmTcpProfileDelayWindowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileDelayWindowControl.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileDelayWindowControl.setDescription('If enabled, uses an estimate of queuing delay as a measure of congestion to control, in addition to\n\t         the normal loss based control, the amount of data sent.')
ltmTcpProfileSynRtoBase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileSynRtoBase.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileSynRtoBase.setDescription('Initial RTO (Retransmission TimeOut) base multiplier for SYN retransmission, specified in milliseconds.\n\t         This value is modified by the exponential backoff table to select the interval for subsequent\n\t         retransmissions.')
ltmTcpProfileTimestamps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTimestamps.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTimestamps.setDescription('The state that if true, enables support for RFC1323 timestamps (high bandwidth TCP extension).')
ltmTcpProfileMinRto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMinRto.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMinRto.setDescription('Specifies the minimum TCP retransmission timeout in milliseconds. The timeout starts when the sender sends\n\t         a packet containing data. The timer is canceled when all outstanding data has been acknowledged. The timer\n\t         restarts when an ACK is received to acknowledge new data. The default is 0 milliseconds; which means using\n\t         the TCP stack default. Maximum value is 5000 milliseconds.')
ltmTcpProfileMptcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("passthrough", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcp.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcp.setDescription('The state that, if enabled, all incoming flows handle by the MPTCP stack allowing for support of multipath\n\t     enabled connections. When passthrough, MPTCP flows are not terminated by this virtual.')
ltmTcpProfileRatePace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRatePace.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRatePace.setDescription('The state that, when true, enables pacing of data transmission.')
ltmTcpProfileMptcpCsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsum.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsum.setDescription('The state that, when true, enabled checksums support by this MPTCP enabled device.')
ltmTcpProfileMptcpCsumVerify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsumVerify.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpCsumVerify.setDescription('The state that, when true, enables verifying incoming checksums, and checksum failure causes\n\t                    connection abort.')
ltmTcpProfileMptcpDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpDebug.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpDebug.setDescription('The state that, when true, enables debug logging and statistics for MPTCP.')
ltmTcpProfileMptcpFallback = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("reset", 0), ("retransmit", 1), ("activeaccept", 2), ("accept", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpFallback.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpFallback.setDescription('The MPTCP fallback control mode,\n\t    reboot - reboot control mode;\n\t    retransmit - retransmit control mode;\n\t    activeaccept - activeaccept control mode;\n\t    accept - accept control mode.')
ltmTcpProfileMptcpJoinmax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpJoinmax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpJoinmax.setDescription('Specifies the maximum number of simultaneous join attempts on a given flow. Default value is 5. Maximum value is 20.')
ltmTcpProfileMptcpNojoindssack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpNojoindssack.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpNojoindssack.setDescription('The state that, when true, the no DSS option is sent on the JOIN ACK.')
ltmTcpProfileMptcpRtomax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpRtomax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpRtomax.setDescription('Specifies the the number of RTOs before declaring subflow dead. Default value is 5. Maximum value is 12. Minimum value is 3.')
ltmTcpProfileMptcpRxmitmin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpRxmitmin.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpRxmitmin.setDescription('Specifies the minimum value (in milliseconds) of retransmission timer for these MPTCP flows. Default value is 1000. Maximum value is 5000. Minimum value is 200.')
ltmTcpProfileMptcpSubflowmax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 57), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpSubflowmax.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpSubflowmax.setDescription('Specifies the maximum number of MPTCP subflows for a single flow. Default value is 6. Maximum value is 10.')
ltmTcpProfileMptcpMakeafterbreak = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpMakeafterbreak.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpMakeafterbreak.setDescription('The state that, when true, causes after break functionality allowing for Long-Lived MPTCP sessions.')
ltmTcpProfileMptcpTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpTimeout.setDescription('Specifies the timeout value to discard long-lived sessions that do not have an active flow. Default value is 3600 sec. Maximum value is 36000 sec.')
ltmTcpProfileMptcpFastjoin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileMptcpFastjoin.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileMptcpFastjoin.setDescription('The state that, when true, enables FAST join, allowing data to be sent on the MP_JOIN SYN, which can allow a server response to occur in parallel with the JOIN')
ltmTcpProfileEarlyRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEarlyRetransmit.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEarlyRetransmit.setDescription('The state that if true, enables support for RFC5827 Early Retransmit')
ltmTcpProfileTailLossProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileTailLossProbe.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileTailLossProbe.setDescription('The state that if true, enables support for Tail Loss Probe')
ltmTcpProfileCmetricsCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 63), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileCmetricsCacheTimeout.setDescription('Specifies the time, in seconds, for which entries in the congestion\n\t        metrics cache are valid. The default value is 0, which defers to\n\t        the sys db variable route.metrics.timeout. Valid values are from 0 to\n\t        1000000.')
ltmTcpProfileRatePaceMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 64), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRatePaceMaxRate.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRatePaceMaxRate.setDescription('Specifies the maximum rate, in bytes per second, at which the rate\n\t        pacing feature may transmit data.  The default value is 0, which\n\t        means no maximum rate is enforced.')
ltmTcpProfileFastOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFastOpen.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileFastOpen.setDescription('The state that if true, enables support for Fast Open.')
ltmTcpProfileFastOpenCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFastOpenCookieExpiration.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileFastOpenCookieExpiration.setDescription('Specifies the number of seconds a Fast Open Cookie provided by a BIG-IP is valid for incoming SYN packets from that client. The default value is 21600 (6 hours). The range is from 0 (meaning use the default) to 1000000.')
ltmTcpProfileFinWait2Timeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileFinWait2Timeout.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileFinWait2Timeout.setDescription('The number of seconds to remain in FIN-WAIT-2 state before giving up.\n\t\tZero is forever (or until maxrtx of FIN).')
ltmTcpProfileRexmtThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileRexmtThresh.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileRexmtThresh.setDescription('Specifies the number of duplicate ACKs received (retransmit threshold) before starting fast recovery. Default value is 3. The range is from 3 to 255.')
ltmTcpProfileAutoSendBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 69), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAutoSendBuffer.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAutoSendBuffer.setDescription('The state that if true, enables support for send buffer auto-tuning.')
ltmTcpProfileAutoReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 70), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAutoReceiveWindow.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAutoReceiveWindow.setDescription('The state that if true, enables support for receive window auto-tuning.')
ltmTcpProfileAutoProxyBuffer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileAutoProxyBuffer.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileAutoProxyBuffer.setDescription('The state that if true, enables support for proxy buffer auto-tuning.')
ltmTcpProfileEnhancedLossRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileEnhancedLossRecovery.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileEnhancedLossRecovery.setDescription('The state that if true, enables support for Enhanced Loss Recovery')
ltmTcpProfilePushFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 1, 2, 1, 73), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("default", 0), ("none", 1), ("one", 2), ("auto", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfilePushFlag.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfilePushFlag.setDescription('The TCP PUSH flag control mode, guiding sending PUSH segments.\n\t\tdefault - Default behavior mode;\n\t\tnone - Do not send any PUSH flags mode;\n\t\tone - Send a PUSH flag with FIN segments mode;\n\t\tauto - Auto (send PUSH segments based on app/network conditions) mode')
ltmTcpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTcpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmTcpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmTcpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatNumber.setDescription('The number of ltmTcpProfileStat entries in the table.')
ltmTcpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3), )
if mibBuilder.loadTexts: ltmTcpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTable.setDescription('A table containing statistic information of TCP profile.')
ltmTcpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"))
if mibBuilder.loadTexts: ltmTcpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatEntry.setDescription('Columns in the ltmTcpProfileStat Table')
ltmTcpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatName.setDescription('The name of a TCP profile.')
ltmTcpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatOpen.setDescription('The number of current open connections.')
ltmTcpProfileStatCloseWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatCloseWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatCloseWait.setDescription('The number of current connections in CLOSE-WAIT/LAST-ACK.')
ltmTcpProfileStatFinWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait.setDescription('The number of current connections in FIN-WAIT-1/CLOSING.')
ltmTcpProfileStatTimeWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTimeWait.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTimeWait.setDescription('The number of current connections in TIME-WAIT.')
ltmTcpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAccepts.setDescription('The number of connections accepted.')
ltmTcpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAcceptfails.setDescription('The number of connections not accepted.')
ltmTcpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatConnects.setDescription('The number of connections established.')
ltmTcpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatConnfails.setDescription('The number of connections failures.')
ltmTcpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatExpires.setDescription('The number of connections expired due to idle timeout.')
ltmTcpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatAbandons.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatAbandons.setDescription('The number of connections abandoned connections due to \n\t\tretries/keep-alives.')
ltmTcpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxrst.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxrst.setDescription('The number of received RST.')
ltmTcpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadsum.setDescription('The number of bad checksum.')
ltmTcpProfileStatRxbadseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadseg.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadseg.setDescription('The number of malformed segments.')
ltmTcpProfileStatRxooseg = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxooseg.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxooseg.setDescription('The number of out of order segments.')
ltmTcpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxcookie.setDescription('The number of received SYN-cookies.')
ltmTcpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatRxbadcookie.setDescription('The number of bad SYN-cookies.')
ltmTcpProfileStatSyncacheover = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatSyncacheover.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatSyncacheover.setDescription('The number of SYN-cache overflow.')
ltmTcpProfileStatTxrexmits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatTxrexmits.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatTxrexmits.setDescription('The number of retransmitted segments.')
ltmTcpProfileStatFinWait2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 10, 2, 3, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait2.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatFinWait2.setDescription('The number of current connections in FIN-WAIT-2.')
ltmUdpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileNumber.setDescription('The number of ltmUdpProfile entries in the table.')
ltmUdpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2), )
if mibBuilder.loadTexts: ltmUdpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileTable.setDescription('A table containing information of UDP profile.')
ltmUdpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"))
if mibBuilder.loadTexts: ltmUdpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileEntry.setDescription('Columns in the ltmUdpProfile Table')
ltmUdpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileName.setDescription('The name of a UDP profile.')
ltmUdpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmUdpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmUdpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileIdleTimeout.setDescription('The umber of seconds without traffic before a flow is \n\t\teligible for deletion.')
ltmUdpProfileIpTosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileIpTosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileIpTosToClient.setDescription('The IP type of service set in packets sent to client. Default:None.')
ltmUdpProfileLinkQosToClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileLinkQosToClient.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileLinkQosToClient.setDescription('The link quality of service set in packets sent to client. Default:None.')
ltmUdpProfileDatagramLb = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileDatagramLb.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileDatagramLb.setDescription('The state indicating whether or not to load balance each UDP datagram separately.')
ltmUdpProfileAllowNoPayload = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileAllowNoPayload.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileAllowNoPayload.setDescription('The state indicating whether to not allow the passage of datagrams with no payload.')
ltmUdpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileSndbuf.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileSndbuf.setDescription('The send buffer size in bytes.')
ltmUdpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUdpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmUdpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmUdpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatNumber.setDescription('The number of ltmUdpProfileStat entries in the table.')
ltmUdpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3), )
if mibBuilder.loadTexts: ltmUdpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatTable.setDescription('A table containing information of UDP profile.')
ltmUdpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"))
if mibBuilder.loadTexts: ltmUdpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatEntry.setDescription('Columns in the ltmUdpProfileStat Table')
ltmUdpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatName.setDescription('The name of a UDP profile.')
ltmUdpProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatOpen.setDescription('The number of current open connections.')
ltmUdpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatAccepts.setDescription('The number of connections accepted.')
ltmUdpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatAcceptfails.setDescription('The number of connections not accepted.')
ltmUdpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatConnects.setDescription('The number of connections established.')
ltmUdpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatConnfails.setDescription('The number of connections failures.')
ltmUdpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatExpires.setDescription('The number of connections expired due to idle timeout.')
ltmUdpProfileStatRxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxdgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxdgram.setDescription('The number of received datagrams.')
ltmUdpProfileStatRxbaddgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbaddgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxbaddgram.setDescription('The number of malformed datagrams.')
ltmUdpProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxunreach.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxunreach.setDescription('The number of received ICMP un-reached.')
ltmUdpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxbadsum.setDescription('The number of bad checksum.')
ltmUdpProfileStatRxnosum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatRxnosum.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatRxnosum.setDescription('The number of no checksum.')
ltmUdpProfileStatTxdgram = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 11, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUdpProfileStatTxdgram.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatTxdgram.setDescription('The number of transmitted datagrams.')
ltmRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleNumber.setDescription('The number of ltmRule entries in the table.')
ltmRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2), )
if mibBuilder.loadTexts: ltmRuleTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleTable.setDescription('A table containing information of rules.')
ltmRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleName"))
if mibBuilder.loadTexts: ltmRuleEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEntry.setDescription('Columns in the ltmRule Table')
ltmRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleName.setDescription('The name of a rule.')
ltmRuleDefinition = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleDefinition.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRuleDefinition.setDescription('Deprecated!\n\t\tThe definition of the specified rule.')
ltmRuleConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmRuleConfigSource.setDescription('The type of rule that the specified rule is associating with.\n\t\tIt is either a base/pre-configured rule or user defined rule.')
ltmRuleEventNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventNumber.setDescription('The number of ltmRuleEvent entries in the table.')
ltmRuleEventTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2), )
if mibBuilder.loadTexts: ltmRuleEventTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventTable.setDescription('A table containing information of rule events.')
ltmRuleEventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"))
if mibBuilder.loadTexts: ltmRuleEventEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventEntry.setDescription('Columns in the ltmRuleEvent Table')
ltmRuleEventName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventName.setDescription('The name of a rule.')
ltmRuleEventEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventEventType.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventEventType.setDescription('The event type which the rule is used for.')
ltmRuleEventPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventPriority.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventPriority.setDescription('The execution priority of this rule event.')
ltmRuleEventScript = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventScript.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRuleEventScript.setDescription('Deprecated!.\n\t        The TCL script for this rule event.')
ltmRuleEventStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRuleEventStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatResetStats.setDescription('The action to reset resettable statistics data in ltmRuleEventStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmRuleEventStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatNumber.setDescription('The number of ltmRuleEventStat entries in the table.')
ltmRuleEventStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3), )
if mibBuilder.loadTexts: ltmRuleEventStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatTable.setDescription('A table containing statistic information of rules.')
ltmRuleEventStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"))
if mibBuilder.loadTexts: ltmRuleEventStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatEntry.setDescription('Columns in the ltmRuleEventStat Table')
ltmRuleEventStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatName.setDescription('The name of a rule.')
ltmRuleEventStatEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatEventType.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatEventType.setDescription('The type of the event associated with the specified rule.')
ltmRuleEventStatPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatPriority.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatPriority.setDescription('The rule execution priority.')
ltmRuleEventStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatFailures.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatFailures.setDescription('The number of failures for executing the specified rule.')
ltmRuleEventStatAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAborts.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatAborts.setDescription('The number of aborts when executing the specified rule.')
ltmRuleEventStatTotalExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatTotalExecutions.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatTotalExecutions.setDescription('The total number of event executions for the specified rule.')
ltmRuleEventStatAvgCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatAvgCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatAvgCycles.setDescription('The average of cycles spent during an execution of the specified rule event.')
ltmRuleEventStatMaxCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMaxCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatMaxCycles.setDescription('The maximum of cycles spent during an execution of the specified rule event.')
ltmRuleEventStatMinCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 8, 3, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRuleEventStatMinCycles.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatMinCycles.setDescription('The minimum of cycles spent during an execution of the specified rule event.')
ltmSnatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatNumber.setDescription('The number of ltmSnat entries in the table.')
ltmSnatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2), )
if mibBuilder.loadTexts: ltmSnatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTable.setDescription('A table containing information of SNAT.')
ltmSnatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatName"))
if mibBuilder.loadTexts: ltmSnatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatEntry.setDescription('Columns in the ltmSnat Table')
ltmSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatName.setDescription('The name of a SNAT. It is a named object in the definition of \n\t\ta standard or a selective SNAT. Standard SNATs translate to \n\t\ta single address, while selective SNATs translate to a pool of \n\t\ttranslation addresses.')
ltmSnatSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSfFlags.setStatus('current')
if mibBuilder.loadTexts: ltmSnatSfFlags.setDescription('The state indicating whether connection mirroring is \n\t\tenabled or not for the specified SNAT.')
ltmSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatType.setDescription('The translation type of the specified SNAT.\n\t\tnone - No SNAT (invalid default);\n\t\ttransaddr - The SNAT uses a single translation address;\n\t\tsnatpool - The SNAT uses a SNAT pool of translation addresses;\n\t\tautomap - The SNAT uses self IP addresses.')
ltmSnatTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddrType.setDescription('The IP address type of ltmSnatTransAddr')
ltmSnatTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddr.setDescription('The translation address used by the specified SNAT \n\t\tif the SNAT translates to a translation address. \n\t\tIt is interpreted within the context of a ltmSnatTransAddrType value.')
ltmSnatSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatSnatpoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatSnatpoolName.setDescription('The name of a SNAT pool, which is a pool of SNAT translation addresses.\n\t\tIt is used by the specified SNAT if the SNAT translates to a pool.')
ltmSnatListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmSnatListedEnabledVlans.setDescription('The state indicating whether associated VLANs are SNAT enabled or not.\n\t\tThe associated VLANs are listed in ltmSnatVlanTable.')
ltmSnatTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatTransAddrName.setDescription('Translation Name')
ltmSnatStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatResetStats.setDescription('The action to reset resettable statistics data in ltmSnatStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSnatStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatNumber.setDescription('The number of ltmSnatStat entries in the table.')
ltmSnatStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3), )
if mibBuilder.loadTexts: ltmSnatStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatTable.setDescription('A table containing statistic information of SNAT.')
ltmSnatStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"))
if mibBuilder.loadTexts: ltmSnatStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatEntry.setDescription('Columns in the ltmSnatStat Table')
ltmSnatStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatName.setDescription('The name of a SNAT.')
ltmSnatStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientPktsIn.setDescription('The number of packets received from client-side.')
ltmSnatStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientBytesIn.setDescription('The number of bytes received from client-side.')
ltmSnatStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientPktsOut.setDescription('The number of packets sent to client-side.')
ltmSnatStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientBytesOut.setDescription('The number of bytes sent to client-side.')
ltmSnatStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientMaxConns.setDescription('The maximum connections from client-side.')
ltmSnatStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientTotConns.setDescription('The total connections from client-side.')
ltmSnatStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 2, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatClientCurConns.setDescription('The current connections from client-side.')
ltmSnatVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanNumber.setDescription('The number of ltmSnatVlan entries in the table.')
ltmSnatVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2), )
if mibBuilder.loadTexts: ltmSnatVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanTable.setDescription('A table containing VLAN information associated with SNAT.')
ltmSnatVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"))
if mibBuilder.loadTexts: ltmSnatVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanEntry.setDescription('Columns in the ltmSnatVlan Table')
ltmSnatVlanSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanSnatName.setDescription('The name of a SNAT.')
ltmSnatVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanVlanName.setDescription('The name of a VLAN associated with the specified SNAT.\n\t\tOnly when ltmSnatListedEnabledVlans is set to enable, \n\t\tSNAT is enabled on the VLAN. ')
ltmSnatOrigAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrNumber.setDescription('The number of ltmSnatOrigAddr entries in the table.')
ltmSnatOrigAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2), )
if mibBuilder.loadTexts: ltmSnatOrigAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrTable.setDescription('A table containing information of SNAT original addresses.')
ltmSnatOrigAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"))
if mibBuilder.loadTexts: ltmSnatOrigAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrEntry.setDescription('Columns in the ltmSnatOrigAddr Table')
ltmSnatOrigAddrSnatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrSnatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrSnatName.setDescription('The name of a SNAT.')
ltmSnatOrigAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrAddrType.setDescription('The IP address type of ltmSnatOrigAddrAddr')
ltmSnatOrigAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrAddr.setDescription('The original client address associated with the specified SNAT. \n\t\tIt is interpreted within the context of a ltmSnatOrigAddrAddrType value.')
ltmSnatOrigAddrWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmaskType.setDescription('The IP address type of ltmSnatOrigWidemask')
ltmSnatOrigAddrWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 4, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmask.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrWildmask.setDescription('The wildcard netmask associated with the specified SNAT original address. \n\t\tIt is interpreted within the context of a ltmSnatOrigAddrWidemaskType value.')
ltmTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrNumber.setDescription('The number of ltmTransAddr entries in the table.')
ltmTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2), )
if mibBuilder.loadTexts: ltmTransAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrTable.setDescription('A table containing information of SNAT translated addresses.')
ltmTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"))
if mibBuilder.loadTexts: ltmTransAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrEntry.setDescription('Columns in the ltmTransAddr Table')
ltmTransAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrAddrType.setDescription('The IP address type of ltmTransAddrAddr')
ltmTransAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrAddr.setDescription('The SNAT translation address for use as a server-side client address.\n\t\ton the server-side. It is interpreted within the context of \n\t\tan ltmTransAddrAddrType value.')
ltmTransAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrEnabled.setDescription('The state indicating whether the specified SNAT translation address is enabled or not.')
ltmTransAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrConnLimit.setDescription('The maximum number of connections the specified SNAT translation address is \n\t\t allowed to have open at one time.')
ltmTransAddrTcpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrTcpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrTcpIdleTimeout.setDescription('The TCP idle timeout (in seconds) of the SNAT specified translation address.')
ltmTransAddrUdpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUdpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrUdpIdleTimeout.setDescription('The UDP idle timeout (in seconds) of the specified SNAT translation address.')
ltmTransAddrIpIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrIpIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrIpIdleTimeout.setDescription('The IP idle timeout (in seconds) of the specified SNAT translation address.')
ltmTransAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrArpEnabled.setDescription('The state indicating whether ARP is enabled or not for the specified SNAT translation address.')
ltmTransAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrUnitId.setDescription('The unit number associated with the specified SNAT translation address.')
ltmTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrName.setDescription('name of trans addr')
ltmTransAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTransAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatResetStats.setDescription('The action to reset resettable statistics data in ltmTransAddrStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmTransAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatNumber.setDescription('The number of ltmTransAddrStat entries in the table.')
ltmTransAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3), )
if mibBuilder.loadTexts: ltmTransAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatTable.setDescription('A table containing statistic information of SNAT translated addresses.')
ltmTransAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"))
if mibBuilder.loadTexts: ltmTransAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatEntry.setDescription('Columns in the ltmTransAddrStat Table')
ltmTransAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTransAddrStatAddrType.setDescription('Deprecated!  Use name as index\n\t    The IP address type of ltmTransAddrStatAddr')
ltmTransAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmTransAddrStatAddr.setDescription('Deprecated!  Use name as index\n\t\tThe SNAT translation address for use as a server-side client address.\n\t\ton the server-side. It is interpreted within the context of \n\t\tan ltmTransAddrStatAddrType value.')
ltmTransAddrStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmTransAddrStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmTransAddrStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmTransAddrStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmTransAddrStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmTransAddrStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerTotConns.setDescription('The total connections from server-side.')
ltmTransAddrStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatServerCurConns.setDescription('The current connections from server-side.')
ltmTransAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 6, 3, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTransAddrStatName.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatName.setDescription('name of trans addr stat')
ltmSnatPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolNumber.setDescription('The number of ltmSnatPool entries in the table.')
ltmSnatPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2), )
if mibBuilder.loadTexts: ltmSnatPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolTable.setDescription('A table containing information of SNAT pools.')
ltmSnatPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"))
if mibBuilder.loadTexts: ltmSnatPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolEntry.setDescription('Columns in the ltmSnatPool Table')
ltmSnatPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolName.setDescription('The name of a SNAT pool, which is a pool of SNAT translation addresses.')
ltmSnatPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSnatPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmSnatPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSnatPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatNumber.setDescription('The number of ltmSnatPoolStat entries in the table.')
ltmSnatPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3), )
if mibBuilder.loadTexts: ltmSnatPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatTable.setDescription('A table containing statistic information of SNAT pools.')
ltmSnatPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"))
if mibBuilder.loadTexts: ltmSnatPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatEntry.setDescription('Columns in the ltmSnatPoolStat Table')
ltmSnatPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatName.setDescription('The name of the SNAT pool.')
ltmSnatPoolStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsIn.setDescription('The number of packets received from server-side.')
ltmSnatPoolStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesIn.setDescription('The number of bytes received from server-side.')
ltmSnatPoolStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerPktsOut.setDescription('The number of packets sent to server-side.')
ltmSnatPoolStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerBytesOut.setDescription('The number of bytes sent to server-side.')
ltmSnatPoolStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerMaxConns.setDescription('The maximum connections from server-side.')
ltmSnatPoolStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerTotConns.setDescription('The total connections from server-side.')
ltmSnatPoolStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 8, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatPoolStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatServerCurConns.setDescription('The current connections from server-side.')
ltmSnatpoolTransAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrNumber.setDescription('The number of ltmSnatpoolTransAddr entries in the table.')
ltmSnatpoolTransAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2), )
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTable.setDescription('A table containing information of joining SnatPool to TransAddr.')
ltmSnatpoolTransAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"))
if mibBuilder.loadTexts: ltmSnatpoolTransAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrEntry.setDescription('Columns in the ltmSnatpoolTransAddr Table')
ltmSnatpoolTransAddrSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrSnatpoolName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrSnatpoolName.setDescription('The name of a SNAT pool.')
ltmSnatpoolTransAddrTransAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrType.setDescription('The IP address type of ltmTransAddrAddr')
ltmSnatpoolTransAddrTransAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddr.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddr.setDescription('The SNAT translation address associated with the specified SNAT pool.,\n\t\tIt is interpreted within the context of an ltmSnatpoolTransAddrTransAddrType value.')
ltmSnatpoolTransAddrTransAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 9, 9, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrTransAddrName.setDescription('The name of a trans_addr.')
ltmVirtualServNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServNumber.setDescription('The number of ltmVirtualServ entries in the table.')
ltmVirtualServTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2), )
if mibBuilder.loadTexts: ltmVirtualServTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTable.setDescription('A table containing information of virtual servers.')
ltmVirtualServEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"))
if mibBuilder.loadTexts: ltmVirtualServEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServEntry.setDescription('Columns in the ltmVirtualServ Table')
ltmVirtualServName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServName.setDescription('The name of a virtual server.')
ltmVirtualServAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAddrType.setDescription('The IP address type of ltmVirtualServAddr.')
ltmVirtualServAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAddr.setDescription('The IP address of the specified virtual server. It is interpreted \n\t\t within the context of an ltmVitualServAddrType value.')
ltmVirtualServWildmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServWildmaskType.setDescription('The IP address type of ltmVirtualServWildmask.')
ltmVirtualServWildmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServWildmask.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServWildmask.setDescription('The wildcard netmask of the specified virtual server. It is interpreted \n\t\t within the context of an ltmVitualServWildmaskType value.')
ltmVirtualServPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 6), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPort.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPort.setDescription('The port number of the specified virtual server.')
ltmVirtualServIpProto = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServIpProto.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServIpProto.setDescription('The IP protocol (see RFC 1340) used by the specified virtual server.')
ltmVirtualServListedEnabledVlans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServListedEnabledVlans.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServListedEnabledVlans.setDescription('The state indicating whether the specified virtual server is listed \n\t\tas enabled or not on associated VLANs. The associated VLANs are \n\t\tdefined in ltmVirtualServVlanTable.')
ltmVirtualServEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServEnabled.setDescription('The state indicating whether the specified virtual server is enabled or not.')
ltmVirtualServConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServConnLimit.setDescription('The maximum number of connections the specified virtual server is allowed \n\t\t to have open at one time.')
ltmVirtualServRclass = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRclass.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRclass.setDescription('The rate class that will be used to rate limit the traffic in \n\t\tthe specified virtual server.')
ltmVirtualServSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSfFlags.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSfFlags.setDescription('The flag to indicate whether connection mirroring is \n\t\tenabled or not for the specified virtual server.')
ltmVirtualServTranslateAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslateAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTranslateAddr.setDescription('The state indicating whether the address of the specified virtual server \n\t\tshould be translated.')
ltmVirtualServTranslatePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServTranslatePort.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServTranslatePort.setDescription('The state indicating whether the port of the specified virtual server \n\t\tshould be translated.')
ltmVirtualServType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("poolbased", 0), ("ipforward", 1), ("l2forward", 2), ("reject", 3), ("fastl4", 4), ("fasthttp", 5), ("stateless", 6), ("dhcpRelay", 7), ("internal", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServType.setDescription('The type supported by the specified virtual server.\n\t\tpoolbased - The virtual server is based on a pool;\n\t\tipforward - The virtual server only supports IP forwarding. \n\t\t            There is no load balancing on this type of virtual server;\n\t\tl2forward - The virtual server only supports L2 forwarding. \n\t\t            There is no load balancing on this type of virtual server;\n\t\treject - All connections going to this virtual server will be rejected, and resets will be sent;\n\t\tfastl4 - The virtual server is associated with a Fast L4 profile;\n\t\tfasthttp - The virtual server is associated with a Fast HTTP profile;\n\t\tstateless - The virtual server accepts traffic matching the virtual server\n\t\t            address and load balances the packet to the pool members without\n\t\t            attempting to match the packet to a pre-existing connection on the connection\n\t\t            table;\n\t\tdhcpRelay - The virtual server relays DHCP client requests for an IP address to\n\t\t            one or more DHCP servers and provides DHCP server responses with \n\t\t            an available IP address for the client;\n\t\tinternal - The virtual server supports modification of HTTP requests and responses.')
ltmVirtualServSnatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("transaddr", 1), ("snatpool", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServSnatType.setDescription('Deprecated! Replaced by Source Address Translation type associated with the specified virtual server.\n\t       The type of SNAT associated with the specified virtual server.\n\t\tnone - No SNAT used by the virtual server;\n\t\ttransaddr - The SNAT uses a single translation address (invalid type);\n\t\tsnatpool - The SNAT uses a SNAT pool of translation addresses;\n\t\tautomap - The SNAT uses self IP addresses.')
ltmVirtualServLasthopPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServLasthopPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServLasthopPoolName.setDescription('The last hop pool for the specified virtual server if traffic is \n\t\t transparent.')
ltmVirtualServSnatpoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSnatpoolName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServSnatpoolName.setDescription('Deprecated! No longer a direct attribute of the virtual server.\n\t       The name of a SNAT pool used by the specified virtual server.')
ltmVirtualServDefaultPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDefaultPool.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServDefaultPool.setDescription('The name of a default pool used by the specified virtual server.')
ltmVirtualServFallbackPersist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 20), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServFallbackPersist.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServFallbackPersist.setDescription('The persist profile name to use for fallback by the specified virtual server.')
ltmVirtualServActualPvaAccel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("full", 0), ("partial", 1), ("none", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServActualPvaAccel.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServActualPvaAccel.setDescription('The actual hardware acceleration mode for the specified virtual server.')
ltmVirtualServAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServAvailabilityState.setDescription('Deprecated!  \n\t\tReplaced by ltmVsServStatusAvailState under ltmVirtualServStatus.\n\t\tThe state of the specified virtual server availability indicated in color.')
ltmVirtualServEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServEnabledState.setDescription('Deprecated!  \n\t\tReplaced by ltmVsServStatusEnabledState under ltmVirtualServStatus.\n\t\tThe state of the specified virtual server activity status, as specified \n\t\tby the user.')
ltmVirtualServDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServDisabledParentType.setDescription('Deprecated!  \n\t\tReplaced by ltmVsServStatusParentType under ltmVirtualServStatus.\n\t\tThe type of parent object which disabled the specified virtual server.')
ltmVirtualServStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualServStatusReason.setDescription("Deprecated!  \n\t\tReplaced by ltmVsServStatusDetailReason under ltmVirtualServStatus.\n\t\tThe detail description of the node's status of parent object \n\t\twhich disabled the specified virtual server.")
ltmVirtualServGtmScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServGtmScore.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServGtmScore.setDescription('A user-defined value that specifies the ranking of the virtual server \n\t\twhen compared to other virtual servers within the same pool')
ltmVirtualServCmpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServCmpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServCmpEnabled.setDescription('The state indicating whether CMP (Cluster Multiple Processor) is enabled or not for the specified virtual server.')
ltmVirtualServSrcport = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("srcportreserve", 0), ("srcportreservestrict", 1), ("srcportchange", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSrcport.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSrcport.setDescription('The srcport type.\n\t        srcportreserve       - The srcport reserved;\n\t        srcportreservestrict - The srcport reserved strict; \n\t        srcportchange        - The srcport changed;')
ltmVirtualServVaName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 29), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVaName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVaName.setDescription('virtual address name.')
ltmVirtualServSourceAddressTranslationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("snat", 1), ("lsn", 2), ("automap", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationType.setDescription('The type of Source Address Translation associated with the specified virtual server.\n\t\tnone - No Source Address Translation used by the virtual server;\n\t\tsnat - The Source Address Translation uses a SNAT pool of translation addresses;\n\t\tlsn - The Source Address Translation uses an LSN pool of translation addresses;\n\t\tautomap - The Source Address Translation uses self IP addresses.')
ltmVirtualServSourceAddressTranslationPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 31), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationPool.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServSourceAddressTranslationPool.setDescription('The name of a LSN Source Address Translation pool used by the specified virtual server.')
ltmVirtualServServiceDownImmediateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("reset", 1), ("drop", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServServiceDownImmediateAction.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServServiceDownImmediateAction.setDescription("Specifies the immediate action to take upon the receipt of the initial client's\n\t\tSYN packet if the availability status of the virtual server is Offline or Unavailable.\n\t\tThis is supported for the virtual server of Standard type and TCP protocol.\n\t\tnone - BIG-IP system takes no immediate action;\n\t\treset - BIG-IP system immediately resets the newly arriving connections destined for the\n\t\t        virtual server IP address and sends a TCP reset (RST) message;\n\t\tdrop - BIG-IP system immediately drops the newly arriving connections destined for the\n\t\t        virtual server IP address.")
ltmVirtualServServersslUseSni = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 1, 2, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServServersslUseSni.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServServersslUseSni.setDescription('The state indicating whether the server-ssl profile is selected based on the SNI in the ClientHello.')
ltmVirtualServStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualServStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatResetStats.setDescription('The action to reset resettable statistics data in ltmVirtualServStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmVirtualServStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatNumber.setDescription('The number of ltmVirtualServStat entries in the table.')
ltmVirtualServStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3), )
if mibBuilder.loadTexts: ltmVirtualServStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTable.setDescription('A table containing statistic information of virtual servers.')
ltmVirtualServStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"))
if mibBuilder.loadTexts: ltmVirtualServStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEntry.setDescription('Columns in the ltmVirtualServStat Table')
ltmVirtualServStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatName.setDescription('The name of a virtual server.')
ltmVirtualServStatCsMinConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMinConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMinConnDur.setDescription('The minimum connection duration in milliseconds among all connections \n\t\tthrough the specified virtual server.')
ltmVirtualServStatCsMaxConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMaxConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMaxConnDur.setDescription('The maximum connection duration in milliseconds among all connections \n\t\tthrough the specified virtual server.')
ltmVirtualServStatCsMeanConnDur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCsMeanConnDur.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCsMeanConnDur.setDescription('The average connection duration in milliseconds for all connections \n\t\tthrough the specified virtual server.')
ltmVirtualServStatNoNodesErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatNoNodesErrors.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatNoNodesErrors.setDescription('The number of no-node errors. If active server node is zero, \n\t         this counter is incremented.')
ltmVirtualServStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsIn.setDescription('The number of packets received by the specified virtual server from client-side.')
ltmVirtualServStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesIn.setDescription('The number of bytes received by the specified virtual server from client-side.')
ltmVirtualServStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientPktsOut.setDescription('The number of packets sent to client-side from the specified virtual server.')
ltmVirtualServStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientBytesOut.setDescription('The number of bytes sent to client-side from the specified virtual server.')
ltmVirtualServStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientMaxConns.setDescription('The maximum connections from client-side to the specified virtual server.')
ltmVirtualServStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientTotConns.setDescription('The total connections from client-side to the specified virtual server.')
ltmVirtualServStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientCurConns.setDescription('The current connections from client-side to the specified virtual server.')
ltmVirtualServStatEphemeralPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsIn.setDescription('The number of packets received ephemeral by the specified virtual server.')
ltmVirtualServStatEphemeralBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesIn.setDescription('The number of bytes received ephemeral by the specified virtual server.')
ltmVirtualServStatEphemeralPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralPktsOut.setDescription('The number of packets transmitted ephemeral from the specified virtual server.')
ltmVirtualServStatEphemeralBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralBytesOut.setDescription('The number of bytes transmitted ephemeral from the specified virtual server.')
ltmVirtualServStatEphemeralMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralMaxConns.setDescription('The maximum ephemeral connections to the specified virtual server.')
ltmVirtualServStatEphemeralTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralTotConns.setDescription('The total ephemeral connections to the specified virtual server.')
ltmVirtualServStatEphemeralCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatEphemeralCurConns.setDescription('The current ephemeral connections to the specified virtual server.')
ltmVirtualServStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsIn.setDescription('The total number of hardware accelerated packets received by the specified virtual server.')
ltmVirtualServStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesIn.setDescription('The total number of hardware accelerated bytes received by the specified virtual server.')
ltmVirtualServStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaPktsOut.setDescription('The total number of hardware accelerated packets sent out from the specified virtual server.')
ltmVirtualServStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaBytesOut.setDescription('The total number of hardware accelerated bytes sent out from the specified virtual server.')
ltmVirtualServStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified virtual server.')
ltmVirtualServStatTotRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotRequests.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTotRequests.setDescription('The total number of requests going through the specified virtual server.')
ltmVirtualServStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatTotPvaAssistConn.setDescription('The total number of connections to the specified virtual server, which \n\t\tare partially hardware accelerated.')
ltmVirtualServStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCurrPvaAssistConn.setDescription('The current number of connections to the specified virtual server, which\n\t\tare partially hardware accelerated.')
ltmVirtualServStatCycleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCycleCount.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCycleCount.setDescription('CPU cycle count since last system restart.')
ltmVirtualServStatVsUsageRatio5s = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5s.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5s.setDescription('The percentage of time Virtual Server was busy over the last 5 seconds.')
ltmVirtualServStatVsUsageRatio1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio1m.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio1m.setDescription('The percentage of time Virtual Server was busy over the last 1 minute.')
ltmVirtualServStatVsUsageRatio5m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5m.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatVsUsageRatio5m.setDescription('The percentage of time Virtual Server was busy over the last 5 minutes.')
ltmVirtualServStatCurrentConnsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatCurrentConnsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatCurrentConnsPerSec.setDescription('The last recorded value for the number of connections to the virtual server when connections hit a rate limit; this calculation is only maintained if rate limiting is configured for the service.')
ltmVirtualServStatDurationRateExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatDurationRateExceeded.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatDurationRateExceeded.setDescription('Duration of time in seconds the specified virtual server has exceeded the\n\t\tconfigured connection rate limit.')
ltmVirtualServStatSwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookies.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookies.setDescription('The number of syn cookies received.')
ltmVirtualServStatSwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatSwSyncookieAccepts.setDescription('The number of syn cookies received that were accepted.')
ltmVirtualServStatHwSyncookies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookies.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookies.setDescription('The number of hardware syn cookies received.')
ltmVirtualServStatHwSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatHwSyncookieAccepts.setDescription('The number of hardware syn cookies received that were accepted.')
ltmVirtualServStatClientEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientEvictedConns.setDescription('The number of client-side connections that have been evicted on the specified virtual server.')
ltmVirtualServStatClientSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatClientSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatClientSlowKilled.setDescription('The number of slow client-side connections that have been killed on the specified virtual server.')
ltmVirtualServStatWlSyncookieHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieHits.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieHits.setDescription('The number of whitelist syn cookie hits.')
ltmVirtualServStatWlSyncookieAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieAccepts.setDescription('The number of whitelist syn cookies received that were accepted.')
ltmVirtualServStatWlSyncookieRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieRejects.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatWlSyncookieRejects.setDescription('The number of whitelist syn cookies received that were rejected.')
ltmVirtualServStatMsgMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatMsgMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatMsgMrIn.setDescription('The number of incoming routed messages for specified virtual server.')
ltmVirtualServStatMsgMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatMsgMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatMsgMrOut.setDescription('The number of outgoing routed messages for specified virtual server.')
ltmVirtualServStatReqMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatReqMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatReqMrIn.setDescription('The number of incoming requests routed messages for specified virtual server.')
ltmVirtualServStatReqMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatReqMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatReqMrOut.setDescription('The number of outgoing requests routed messages for specified virtual server.')
ltmVirtualServStatRespMrIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatRespMrIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatRespMrIn.setDescription('The number of incoming responces routed messages for specified virtual server.')
ltmVirtualServStatRespMrOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServStatRespMrOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatRespMrOut.setDescription('The number of incoming responces routed messages for specified virtual server.')
ltmVirtualServAuthNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthNumber.setDescription('The number of ltmVirtualServAuth entries in the table.')
ltmVirtualServAuthTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2), )
if mibBuilder.loadTexts: ltmVirtualServAuthTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthTable.setDescription('A table containing information of virtual server auth profiles.')
ltmVirtualServAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"))
if mibBuilder.loadTexts: ltmVirtualServAuthEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthEntry.setDescription('Columns in the ltmVirtualServAuth Table')
ltmVirtualServAuthVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthVsName.setDescription('The name of a virtual server.')
ltmVirtualServAuthProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServAuthProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthProfileName.setDescription('The name of an auth profile associated with the specified virtual server.')
ltmVirtualServPersistNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistNumber.setDescription('The number of ltmVirtualServPersist entries in the table.')
ltmVirtualServPersistTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2), )
if mibBuilder.loadTexts: ltmVirtualServPersistTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistTable.setDescription('A table containing information of virtual server persistence profiles.')
ltmVirtualServPersistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"))
if mibBuilder.loadTexts: ltmVirtualServPersistEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistEntry.setDescription('Columns in the ltmVirtualServPersist Table')
ltmVirtualServPersistVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistVsName.setDescription('The name of a virtual server.')
ltmVirtualServPersistProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistProfileName.setDescription('The name of a persist profile associated with the specified virtual server.')
ltmVirtualServPersistUseDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPersistUseDefault.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistUseDefault.setDescription('The persist profile is to be used if a rule does not \n\t\tselect a persist type.')
ltmVirtualServProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileNumber.setDescription('The number of ltmVirtualServProfile entries in the table.')
ltmVirtualServProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2), )
if mibBuilder.loadTexts: ltmVirtualServProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileTable.setDescription('A table containing information of virtual server profiles.')
ltmVirtualServProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"))
if mibBuilder.loadTexts: ltmVirtualServProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileEntry.setDescription('Columns in the ltmVirtualServProfile Table')
ltmVirtualServProfileVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileVsName.setDescription('The name of a virtual server.')
ltmVirtualServProfileProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileProfileName.setDescription('The name of a profile associated with the specified virtual server.')
ltmVirtualServProfileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 62))).clone(namedValues=NamedValues(("auth", 0), ("http", 1), ("serverssl", 2), ("clientssl", 3), ("fastl4", 4), ("tcp", 5), ("udp", 6), ("ftp", 7), ("persist", 8), ("connpool", 9), ("stream", 10), ("xml", 11), ("fasthttp", 12), ("iiop", 13), ("rtsp", 14), ("user", 15), ("httpclass", 16), ("dns", 17), ("sctp", 18), ("instance", 19), ("sipp", 20), ("dos", 21), ("pptp", 62)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileType.setDescription('The type of the profile used by the specified virtual server.')
ltmVirtualServProfileContext = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("all", 0), ("client", 1), ("server", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServProfileContext.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileContext.setDescription("This is used to determine which side of the proxy a protocol\n\t\ttype profile (specifically  TCP/UDP) is applied to.\t\n\t\tnone   - for profiles that don't need any context;\n\t\tall    - profile applies to both client and server;\n\t\tclient - profile applies to the client-side;\n\t\tserver - profile applies to the server-side.")
ltmVirtualServPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolNumber.setDescription('The number of ltmVirtualServPool entries in the table.')
ltmVirtualServPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2), )
if mibBuilder.loadTexts: ltmVirtualServPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolTable.setDescription('A table containing information of non-default pools related to virtual servers.')
ltmVirtualServPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"))
if mibBuilder.loadTexts: ltmVirtualServPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolEntry.setDescription('Columns in the ltmVirtualServPool Table')
ltmVirtualServPoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServPoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolPoolName.setDescription('The name of a non-default pool that the specified virtual server is referencing.')
ltmVirtualServPoolRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServPoolRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolRuleName.setDescription('The name of a rule that the specified virtual server is referencing.\n\t\tThis is for future use and has not been supported in current version.')
ltmVirtualServClonePoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolNumber.setDescription('The number of ltmVirtualServClonePool entries in the table.')
ltmVirtualServClonePoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2), )
if mibBuilder.loadTexts: ltmVirtualServClonePoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolTable.setDescription('A table containing information of pools related to virtual servers.')
ltmVirtualServClonePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"))
if mibBuilder.loadTexts: ltmVirtualServClonePoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolEntry.setDescription('Columns in the ltmVirtualServClonePool Table')
ltmVirtualServClonePoolVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServClonePoolPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolPoolName.setDescription('The name of a clone pool associated with the specified virtual server.')
ltmVirtualServClonePoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unspec", 0), ("clientside", 1), ("serverside", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServClonePoolType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolType.setDescription('The type of the clone pool associated with the specified virtual server.')
ltmVirtualServRuleNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleNumber.setDescription('The number of ltmVirtualServRule entries in the table.')
ltmVirtualServRuleTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2), )
if mibBuilder.loadTexts: ltmVirtualServRuleTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleTable.setDescription('A table containing information of rules related to virtual servers.')
ltmVirtualServRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"))
if mibBuilder.loadTexts: ltmVirtualServRuleEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleEntry.setDescription('Columns in the ltmVirtualServRule Table')
ltmVirtualServRuleVirtualServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleVirtualServerName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleVirtualServerName.setDescription('The name of a virtual server.')
ltmVirtualServRuleRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRuleRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleRuleName.setDescription('The name of a rule associated with the specified virtual server.')
ltmVirtualServRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServRulePriority.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRulePriority.setDescription('The priority of the rule among rules used by the specified virtual server.')
ltmVirtualServVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanNumber.setDescription('The number of ltmVirtualServVlan entries in the table.')
ltmVirtualServVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2), )
if mibBuilder.loadTexts: ltmVirtualServVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanTable.setDescription('A table containing VLAN information associated with virtual server.')
ltmVirtualServVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"))
if mibBuilder.loadTexts: ltmVirtualServVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanEntry.setDescription('Columns in the ltmVirtualServVlan Table')
ltmVirtualServVlanVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanVsName.setDescription('The name of a virtual server.')
ltmVirtualServVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualServVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanVlanName.setDescription('The name of a VLAN which the specified virtual server associated with.')
ltmVirtualAddrNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrNumber.setDescription('The number of ltmVirtualAddr entries in the table.')
ltmVirtualAddrTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2), )
if mibBuilder.loadTexts: ltmVirtualAddrTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrTable.setDescription('A table containing information of virtual server addresses.')
ltmVirtualAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"))
if mibBuilder.loadTexts: ltmVirtualAddrEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrEntry.setDescription('Columns in the ltmVirtualAddr Table')
ltmVirtualAddrAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrAddrType.setDescription('The IP address type of ltmVirtualAddrAddr')
ltmVirtualAddrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrAddr.setDescription('The IP address of a virtual address. \n\t\tIt is interpreted within the context of an ltmVitualAddrAddrType value.')
ltmVirtualAddrEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrEnabled.setDescription('The state indicating whether the specified virtual address is enabled or not.')
ltmVirtualAddrConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrConnLimit.setDescription('The maximum number of connections the specified virtual address is \n\t\t allowed to have open at one time.')
ltmVirtualAddrArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrArpEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrArpEnabled.setDescription('The state indicating whether ARP for the specified virtual address \n\t\tis enabled or not.')
ltmVirtualAddrSfFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrSfFlags.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrSfFlags.setDescription('Deprecated! This feature has been eliminated.\n\t\tThe flag to indicate whether connection mirroring is \n\t\tenabled for the specified virtual address.')
ltmVirtualAddrUnitId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrUnitId.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrUnitId.setDescription('The unit number associated with the specified virtual address.')
ltmVirtualAddrRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("false", 0), ("true", 1), ("selective", 2), ("always", 3), ("any", 4), ("all", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrRouteAdvertisement.setDescription('The state to determine if the specified virtual address should be\n\t\t\treadvertised by the ZebOS routing daemons or not.\n\t\ttrue/selective: route is advertised when virtual-address is available.\n\t\talways: route-advertisement is enabled regradless of the availability status.\n\t\tany: route is advertised when any of the contributing virtual server is available.\n\t\tall: route is advertised when all of the contributing virtual server is available.')
ltmVirtualAddrAvailabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrAvailabilityState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrAvailabilityState.setDescription('Deprecated!  \n\t\tReplaced by ltmVsAddrStatusAvailState under ltmVirtualAddrStatus.\n\t\tThe state of the specified virtual address availability indicated in color.')
ltmVirtualAddrEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrEnabledState.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrEnabledState.setDescription('Deprecated!  \n\t\tReplaced by ltmVsAddrStatusEnabledState under ltmVirtualAddrStatus.\n\t\tThe state of the specified virtual address activity status, \n\t\tas specified by the user.')
ltmVirtualAddrDisabledParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrDisabledParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrDisabledParentType.setDescription('Deprecated!  \n\t\tReplaced by ltmVsAddrStatusParentType under ltmVirtualAddrStatus.\n\t\tThe type of parent object which disabled the specified virtual address.')
ltmVirtualAddrStatusReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatusReason.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatusReason.setDescription("Deprecated!  \n\t\tReplaced by ltmVsAddrStatusDetailReason under ltmVirtualAddrStatus.\n\t\tThe detail description of the virtual address's status of parent object \n\t\twhich disabled the specified virtual address.")
ltmVirtualAddrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("any", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrServer.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrServer.setDescription('That state to control how status of virtual address is depending on \n\t\tstatus of virtual server.\n\t\tnone: virtual address is always green regardless of virtual server status.\n\t\tany: any virtual server is green, virtual address is green.\n\t\tall: all virtual servers must be green before virtual address is declared as green.')
ltmVirtualAddrIsFloat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrIsFloat.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrIsFloat.setDescription('The state indicating whether the virtual address should be shared \n\t\tbetween the redundant pair. This is typically used in one-armed \n\t\tCombo pair, where GTM is only licensed on one of the boxes.')
ltmVirtualAddrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrName.setDescription('Virtual Address name')
ltmVirtualAddrIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 10, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("always", 1), ("selective", 2), ("any", 3), ("all", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrIcmpEcho.setDescription('The state determine whether the specified virtual address should reply to ICMP echo requests.\n\t\talways: ICMP echo reply will be sent in response to ICMP echo requests.\n\t\tselective: ICMP echo reply will sent be in response to ICMP echo requests, when availability status is true.\n\t\tany: ICMP echo reply will be sent in response to ICMP echo requests, when any of the contributing virtual server is available.\n\t\tall: ICMP echo reply will be sent in response to ICMP echo requests when all of the contributing virtual server is available.')
ltmVirtualAddrStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmVirtualAddrStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatResetStats.setDescription('The action to reset resettable statistics data in ltmVirtualAddrStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmVirtualAddrStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatNumber.setDescription('The number of ltmVirtualAddrStat entries in the table.')
ltmVirtualAddrStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3), )
if mibBuilder.loadTexts: ltmVirtualAddrStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatTable.setDescription('A table containing statistic information of virtual server addresses.')
ltmVirtualAddrStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"))
if mibBuilder.loadTexts: ltmVirtualAddrStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatEntry.setDescription('Columns in the ltmVirtualAddrStat Table')
ltmVirtualAddrStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddrType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatAddrType.setDescription('Deprecated! use name instead, \n\t\tThe IP address type of ltmVirtualAddrStatAddr')
ltmVirtualAddrStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatAddr.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVirtualAddrStatAddr.setDescription('Deprecated! use name instead, \n\t     The IP address of a virtual address. It is interpreted \n\t\t within the context of a ltmVitualAddrStatAddrType value.')
ltmVirtualAddrStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsIn.setDescription('The number of packets received by the specified virtual address\n\t\tfrom client-side.')
ltmVirtualAddrStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesIn.setDescription('The number of bytes received by the specified virtual address \n\t\tfrom client-side.')
ltmVirtualAddrStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientPktsOut.setDescription('The number of packets sent to client-side from the specified virtual address.')
ltmVirtualAddrStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientBytesOut.setDescription('The number of bytes sent to client-side from the specified virtual address.')
ltmVirtualAddrStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientMaxConns.setDescription('The maximum connections to the specified virtual address from client-side.')
ltmVirtualAddrStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientTotConns.setDescription('The total connections to the specified virtual address from client-side.')
ltmVirtualAddrStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatClientCurConns.setDescription('The current connections to the specified virtual address from client-side.')
ltmVirtualAddrStatPvaPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsIn.setDescription('The number of hardware accelerated packets received by the specified virtual address.')
ltmVirtualAddrStatPvaBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesIn.setDescription('The number of hardware accelerated bytes received by the specified virtual address.')
ltmVirtualAddrStatPvaPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaPktsOut.setDescription('The number of hardware accelerated packets sent out from  the specified virtual address.')
ltmVirtualAddrStatPvaBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaBytesOut.setDescription('The number of hardware accelerated bytes sent out from the specified virtual address.')
ltmVirtualAddrStatPvaMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaMaxConns.setDescription('The maximum hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatPvaTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaTotConns.setDescription('The total hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatPvaCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatPvaCurConns.setDescription('The current hardware accelerated connections to the specified virtual address.')
ltmVirtualAddrStatTotPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatTotPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatTotPvaAssistConn.setDescription('The total number of connections to the specified virtual address,\n\t\twhich are partially hardware accelerated.')
ltmVirtualAddrStatCurrPvaAssistConn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatCurrPvaAssistConn.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatCurrPvaAssistConn.setDescription('The current number of connections to the specified virtual address,\n\t\twhich are partially hardware accelerated.')
ltmVirtualAddrStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 11, 3, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualAddrStatName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatName.setDescription('Virtual Address name')
ltmFastHttpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileNumber.setDescription('The number of ltmFastHttpProfile entries in the table.')
ltmFastHttpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2), )
if mibBuilder.loadTexts: ltmFastHttpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileTable.setDescription('A table containing information of Fast HTTP profile.')
ltmFastHttpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"))
if mibBuilder.loadTexts: ltmFastHttpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileEntry.setDescription('Columns in the ltmFastHttpProfile Table')
ltmFastHttpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileName.setDescription('The name of a fast HTTP profile.')
ltmFastHttpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmFastHttpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmFastHttpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileResetOnTimeout.setDescription('If true and a TCP connection exceeds its idle_timeout,\n\t\tsend a reset in addition to deleting the connection.')
ltmFastHttpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileIdleTimeout.setDescription('Number of seconds without traffic before a connection \n\t\tis eligible for deletion.')
ltmFastHttpProfileMssOverride = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMssOverride.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMssOverride.setDescription('If non-zero and less than the 1460 default, this value \n\t\toverrides the maximum segment size for server-side flows.')
ltmFastHttpProfileClientCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileClientCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileClientCloseTimeout.setDescription('Idle timeout override when waiting for the client to close. \n\t\tThis occurs after a client FIN is received or after a FIN \n\t\tis sent. 0 is immediate, -1 is indefinite.')
ltmFastHttpProfileServerCloseTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileServerCloseTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileServerCloseTimeout.setDescription('Idle timeout override when waiting for the server to close. \n\t\tThis occurs if the server flow is not suitable for reuse or \n\t\tafter a FIN is received on an unspliced server connection. \n\t\t0 is immediate, -1 is indefinite.')
ltmFastHttpProfileConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxSize.setDescription('Maximum number of connections to any given LB pool.\n\t\t0 for unlimited.')
ltmFastHttpProfileConnpoolMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMinSize.setDescription('Minimum number of connections to any given LB pool.\n\t\t0 is an acceptable value.')
ltmFastHttpProfileConnpoolStep = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolStep.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolStep.setDescription('Connection ramp-up increment. Must be greater than 0.')
ltmFastHttpProfileConnpoolMaxReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxReuse.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolMaxReuse.setDescription('Maximum number of times a server-side flow will be reused. \n\t\t0 for unlimited.')
ltmFastHttpProfileConnpoolIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolIdleTimeout.setDescription('Idle timeout override for unspliced server-side flows in the \n\t\treuse pool. 0 is disabled, i.e. use the default idle timeout.')
ltmFastHttpProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMaxHeaderSize.setDescription('Maximum amount of data that will be buffered in order to \n\t\tmake a content-switching decision.')
ltmFastHttpProfileMaxRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileMaxRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileMaxRequests.setDescription('Maximum number of requests on a client-side flow before \n\t\tthe flow is shutdown. 0 for unlimited.')
ltmFastHttpProfileInsertXforwardedFor = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileInsertXforwardedFor.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileInsertXforwardedFor.setDescription('The state whether to insert or replace X-Forwarded-For header \n\t\twith client IP.')
ltmFastHttpProfileHttp11CloseWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHttp11CloseWorkarounds.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileHttp11CloseWorkarounds.setDescription('The state to workaround problems with certain brands of benchmarking\n\t\tsoftware that cannot handle FIN-PUSH on HTTP/1.1 responses.')
ltmFastHttpProfileHeaderInsert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 18), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileHeaderInsert.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileHeaderInsert.setDescription('Insert the given string as a header. If the header already \n\t\texists, it is not replaced. Unlike HTTP, this string does not \n\t\tsupport rule command expansion.')
ltmFastHttpProfileUncleanShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1), ("fast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileUncleanShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileUncleanShutdown.setDescription('The mode to indicate whether to do unclean shutdown for client connections.')
ltmFastHttpProfileForceHttp10Response = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileForceHttp10Response.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileForceHttp10Response.setDescription("The state to indicate whether to rewrite server's HTTP version to 1.0 in status\n\t\tline in order to dissuade the client from pipelining or chunking.")
ltmFastHttpProfileLayer7 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileLayer7.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileLayer7.setDescription("The state that if false, we don't parse HTTP requests. This is useful for \n\t\tproviding SYN-proxy protection for L4 connections through a SNAT where the \n\t\tclient sends data to the server before the server responds.")
ltmFastHttpProfileConnpoolReplenish = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolReplenish.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileConnpoolReplenish.setDescription('The state that specifies whether the connpool should be replenished \n\t\tto its prior number of connections when a connection is closed \n\t\tby the server. If this is disabled, then we  will only replenish \n\t\ta closed server side connection residing in the connpool if there are \n\t\tless than ltmFastHttpProfileMinSize (see above) connections \n\t\tin the pool.')
ltmFastHttpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmFastHttpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFastHttpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumber.setDescription('The number of ltmFastHttpProfileStat entries in the table.')
ltmFastHttpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3), )
if mibBuilder.loadTexts: ltmFastHttpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatTable.setDescription('A table containing statistic information of Fast HTTP profile.')
ltmFastHttpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"))
if mibBuilder.loadTexts: ltmFastHttpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatEntry.setDescription('Columns in the ltmFastHttpProfileStat Table')
ltmFastHttpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatName.setDescription('The name of a fast HTTP profile.')
ltmFastHttpProfileStatClientSyns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientSyns.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientSyns.setDescription('The total number of client SYN cookies generated.')
ltmFastHttpProfileStatClientAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientAccepts.setDescription('The total number of client TCP accepts.')
ltmFastHttpProfileStatServerConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerConnects.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerConnects.setDescription('The total number of server TCP connects.')
ltmFastHttpProfileStatConnpoolCurSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolCurSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolCurSize.setDescription('Number of available server-side flows in the reuse pool.')
ltmFastHttpProfileStatConnpoolMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolMaxSize.setDescription('Max number of available server-side flows in the reuse pool.')
ltmFastHttpProfileStatConnpoolReuses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolReuses.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolReuses.setDescription('Number of times a server-side flow was reused from the pool.')
ltmFastHttpProfileStatConnpoolExhausted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolExhausted.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatConnpoolExhausted.setDescription('Number of times the reuse pool was exhausted.')
ltmFastHttpProfileStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumberReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatNumberReqs.setDescription('The total number of http requests.')
ltmFastHttpProfileStatUnbufferedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatUnbufferedReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatUnbufferedReqs.setDescription('The total number of unbuffered requests.')
ltmFastHttpProfileStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatGetReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatGetReqs.setDescription('The total number of get requests.')
ltmFastHttpProfileStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPostReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatPostReqs.setDescription('The total number of post requests.')
ltmFastHttpProfileStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV9Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV9Reqs.setDescription('The total number of version 9 requests.')
ltmFastHttpProfileStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV10Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV10Reqs.setDescription('The total number of version 10 requests.')
ltmFastHttpProfileStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatV11Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatV11Reqs.setDescription('The total number of version 11 requests.')
ltmFastHttpProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp2xxCnt.setDescription('Number of server-side responses in range of 200 to 206 \n\t\t(successful responses).')
ltmFastHttpProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp3xxCnt.setDescription('Number of server-side responses in range of 300 to 307 \n\t\t(redirection responses).')
ltmFastHttpProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp4xxCnt.setDescription('Number of server-side responses in range of 400 to 417 (client errors). ')
ltmFastHttpProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatResp5xxCnt.setDescription('Number of server-side responses in range of 500 to 505 (server errors).')
ltmFastHttpProfileStatReqParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatReqParseErrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatReqParseErrors.setDescription('Number of request parse errors.')
ltmFastHttpProfileStatRespParseErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatRespParseErrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatRespParseErrors.setDescription('Number of response parse errors.')
ltmFastHttpProfileStatClientRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientRxBad.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatClientRxBad.setDescription('Number of bad TCP segments dropped from client-side.')
ltmFastHttpProfileStatServerRxBad = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerRxBad.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatServerRxBad.setDescription('Number of bad TCP segments dropped from server-side.')
ltmFastHttpProfileStatPipelinedReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastHttpProfileStatPipelinedReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatPipelinedReqs.setDescription('Number of pipelined HTTP requests detected.')
ltmXmlProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNumber.setDescription('The number of ltmXmlProfile entries in the table.')
ltmXmlProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2), )
if mibBuilder.loadTexts: ltmXmlProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileTable.setDescription('A table containing information of XML profile.')
ltmXmlProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"))
if mibBuilder.loadTexts: ltmXmlProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileEntry.setDescription('Columns in the ltmXmlProfile Table')
ltmXmlProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileName.setDescription('The name of a XML profile.')
ltmXmlProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmXmlProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmXmlProfileAbortOnError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileAbortOnError.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileAbortOnError.setDescription('Deprecated! The state that if true, abort the connection on errors.')
ltmXmlProfileMaxBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMaxBufferSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileMaxBufferSize.setDescription('Deprecated! The value that specifies the maximum buffer size for the specified profile.')
ltmXmlProfileMultipleQueryMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileMultipleQueryMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileMultipleQueryMatches.setDescription('The state that if true, multiple matches for a single XPath query are enabled.')
ltmXmlProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmXmlProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmXmlProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmXmlProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumber.setDescription('The number of ltmXmlProfileStat entries in the table.')
ltmXmlProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3), )
if mibBuilder.loadTexts: ltmXmlProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatTable.setDescription('A table containing statistic information of XML profile.')
ltmXmlProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"))
if mibBuilder.loadTexts: ltmXmlProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatEntry.setDescription('Columns in the ltmXmlProfileStat Table')
ltmXmlProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatName.setDescription('The name of a XML profile.')
ltmXmlProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ltmXmlProfileStatNumErrors.setDescription('Deprecated! The total number of XML parsing errors.')
ltmXmlProfileStatNumInspectedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumInspectedDocuments.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumInspectedDocuments.setDescription('The total number of inspected XML documents.')
ltmXmlProfileStatNumDocumentsWithOneMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithOneMatch.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithOneMatch.setDescription('The total number of XML documents in which one XPath query match was found.')
ltmXmlProfileStatNumDocumentsWithTwoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithTwoMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithTwoMatches.setDescription('The total number of XML documents in which two XPath query matches were found.')
ltmXmlProfileStatNumDocumentsWithThreeMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithThreeMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithThreeMatches.setDescription('The total number of XML documents in which three XPath query matches were found.')
ltmXmlProfileStatNumDocumentsWithNoMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithNoMatches.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumDocumentsWithNoMatches.setDescription('The total number of XML documents in which no XPath query matches were found.')
ltmXmlProfileStatNumMalformedDocuments = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileStatNumMalformedDocuments.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatNumMalformedDocuments.setDescription('The total number of malformed XML documents.')
ltmRamUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileRamUriExcl entries in the table.')
ltmRamUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2), )
if mibBuilder.loadTexts: ltmRamUriExclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclTable.setDescription("A table containing information of RAM cached excludes URI's  \n\t\tin HTTP profiles.")
ltmRamUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"))
if mibBuilder.loadTexts: ltmRamUriExclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclEntry.setDescription('Columns in the ltmRamUriExcl Table')
ltmRamUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclName.setDescription('The name of a HTTP profile.')
ltmRamUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclIndex.setDescription('The index of RAM cached excludes URI for the specified HTTP profile.')
ltmRamUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 7, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriExclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriExclUri.setDescription('The RAM cached excludes URI for the specified profile.')
ltmRamUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileRamUriIncl entries in the table.')
ltmRamUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2), )
if mibBuilder.loadTexts: ltmRamUriInclTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclTable.setDescription("A table containing information of RAM cached includes URI's  \n\t\tin HTTP profiles.")
ltmRamUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"))
if mibBuilder.loadTexts: ltmRamUriInclEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclEntry.setDescription('Columns in the ltmRamUriIncl Table')
ltmRamUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclName.setDescription('The name of a HTTP profile.')
ltmRamUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclIndex.setDescription('The index of RAM cached includes URI for the specified HTTP profile.')
ltmRamUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 8, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriInclUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriInclUri.setDescription('The RAM cached includes URI for the specified profile.')
ltmRamUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpProfileRamUriPin entries in the table.')
ltmRamUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2), )
if mibBuilder.loadTexts: ltmRamUriPinTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinTable.setDescription("A table containing information of RAM cached URI's pinned\n\t\tin HTTP profiles.")
ltmRamUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"))
if mibBuilder.loadTexts: ltmRamUriPinEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinEntry.setDescription('Columns in the ltmRamUriPin Table')
ltmRamUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinName.setDescription('The name of a HTTP profile.')
ltmRamUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinIndex.setDescription('The index of RAM cached URI pinned for the specified HTTP profile.')
ltmRamUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 9, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRamUriPinUri.setStatus('deprecated')
if mibBuilder.loadTexts: ltmRamUriPinUri.setDescription('The RAM cached URI pinned for the specified profile.')
ltmDnsProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileNumber.setDescription('The number of ltmDnsProfile entries in the table.')
ltmDnsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2), )
if mibBuilder.loadTexts: ltmDnsProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileTable.setDescription('A table containing information for DNS profiles.')
ltmDnsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"))
if mibBuilder.loadTexts: ltmDnsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileEntry.setDescription('Columns in the ltmDnsProfile Table')
ltmDnsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileName.setDescription('The name of a DNS profile.')
ltmDnsProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmDnsProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmDnsProfileGtmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileGtmEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileGtmEnabled.setDescription('The state indicating whether or not to allow GTMD (Global Traffic Management\n\t\tDaemon) to handle DNS resolution for DNS queries and responses that contain\n\t\tWide IP names.')
ltmDnsProfileDns64Mode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("secondary", 1), ("immediate", 2), ("v4only", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Mode.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64Mode.setDescription('The mode which specifies whether to perform DNS64 translation, and how\n\t\tto perform it.\n\t\tdisable - no DNS64 translation is performed;\n\t\tsecondary - send AAAA first, if no result send another A;\n\t\timmediate - send both AAAA and A together;\n\t\tv4only - send only A request.')
ltmDnsProfileDns64PrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64PrefixType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64PrefixType.setDescription('The IP address type of DNS64 prefix.')
ltmDnsProfileDns64Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64Prefix.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64Prefix.setDescription('The prefix for DNS64 mapping for the specified DNS profile.')
ltmDnsProfileDns64AdditionalRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("disable", 0), ("v6only", 1), ("v4only", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDns64AdditionalRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDns64AdditionalRewrite.setDescription('Controls system behavior when a DNS response contains AAAA or A record(s)\n\t\tin the additional section. When DNS64 is enabled, this option selects how\n\t\tto rewrite (or not rewrite) these entries.\n\t\tdisable - do not rewrite records in the additional section;\n\t\tv6only - the system deletes any A records in the additional section;\n\t\tv4only - the system deletes any AAAA records in the additional section,\n\t\tand rewrites A records into AAAA by prepending the IPv6 prefix;\n\t\tany - the system allows any AAAA records in the additional section, and\n\t\trewrites A records into AAAA by prepending the IPv6 prefix.')
ltmDnsProfileDnsLastAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("allow", 0), ("drop", 1), ("reject", 2), ("hint", 3), ("noerror", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsLastAction.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsLastAction.setDescription('Last action that will be taken if there is no matching zone name, i.e.\n\t\ta DNS query does not match a GTM Wide IP name, is not a DNSSEC query type\n\t\t(e.g. DNSKEY, etc.), does not match a DNS-Express Zone name, and DNS\n\t\tcache is not configured/enabled.\n\t\tallow - last action is to pass the DNS query to either a pool member\n\t\tor on-box BIND. This is pre-11.x behavior;\n\t\tdrop - last action is to drop the DNS query;\n\t\treject - last action is to send a DNS response with a REFUSED rcode\n\t\tset in the header;\n\t\thint - last action is to send a DNS response with a list of root\n\t\tname servers;\n\t\tnoerror - last action is to send a DNS response with a NOERROR rcode\n\t\tset in the header.')
ltmDnsProfileUseLocalBind = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileUseLocalBind.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileUseLocalBind.setDescription('The state indicating whether or not local BIND is used as a DNS resource.')
ltmDnsProfileDnsExpressEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsExpressEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsExpressEnabled.setDescription('The state indicating whether or not DNS Express is enabled for the \n\t\tspecified profile.')
ltmDnsProfileDnssecEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnssecEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnssecEnabled.setDescription('The state indicating whether or not DNSSEC is enabled for the specified \n\t\tprofile.')
ltmDnsProfileCacheEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileCacheEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileCacheEnabled.setDescription('The state indicating whether or not DNS cache is enabled for the specified \n\t\tprofile.')
ltmDnsProfileDnsCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileDnsCache.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileDnsCache.setDescription('The name of the DNS cache used for the specified profile.')
ltmDnsProfileProcessRd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileProcessRd.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileProcessRd.setDescription('The state indicating whether or not the further processing of clientside\n\t\tDNS packets with the RD (recursion desired) bit set in the header is\n\t\tallowed. If set to false, packet is subject to last action processing.\n\t\tThis is for DDOS mitigation.')
ltmDnsProfileAvrDnsStatSampleRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileAvrDnsStatSampleRate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileAvrDnsStatSampleRate.setDescription('The AVR DNS statistics sample rate for the specified profile. When\n\t        the value is 0, no DNS queries will be stored in analytics database.\n\t        When the value is 1, all DNS queries will be stored. When the value\n\t        is an integer N (N>1), only one DNS query for every N DNS queries will be stored.')
ltmDnsProfileSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurity.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileSecurity.setDescription('The name of the DNS security used for the specified profile.')
ltmDnsProfileSecurityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileSecurityEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileSecurityEnabled.setDescription('The state indicating whether or not DNS firewall is enabled for the specified \n\t\tprofile.')
ltmDnsProfileLoggingProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 19), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingProfile.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileLoggingProfile.setDescription('The name of DNS logging profile that is being used.')
ltmDnsProfileLoggingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileLoggingEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileLoggingEnabled.setDescription('The state indicating whether or not DNS packet logging is enabled \n\t        for the specified profile.')
ltmDnsProfileFastDnsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileFastDnsEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileFastDnsEnabled.setDescription('The state indicating whether or not to allow DNS Rapid Response to handle DNS\n\t        resolution for DNS queries that contain GTM Wide IP names or part of a DNS-Express\n\t        Zone.')
ltmDnsProfileHwValidation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileHwValidation.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileHwValidation.setDescription('The state indicating whether or not to perform DNS query validation\n\t        in hardware.')
ltmDnsProfileHwCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 1, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileHwCache.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileHwCache.setDescription('The state indicating whether or not to perform DNS response caching\n\t        in hardware and to generate responses for valid, matching DNS\n\t        queries.')
ltmHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfile entries in the table.')
ltmHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2), )
if mibBuilder.loadTexts: ltmHttpClassTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassTable.setDescription('Deprecated! A table containing information of HTTP class profile.')
ltmHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"))
if mibBuilder.loadTexts: ltmHttpClassEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassEntry.setDescription('Columns in the ltmHttpClass Table')
ltmHttpClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassConfigSource.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassConfigSource.setDescription('Deprecated! The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmHttpClassDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassDefaultName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassDefaultName.setDescription('Deprecated! The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmHttpClassPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassPoolName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassPoolName.setDescription('Deprecated! The pool name which will be used when the specified class matches.')
ltmHttpClassAsmEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassAsmEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassAsmEnabled.setDescription('Deprecated! The state indicating whether this is an Application Security Module class or not.')
ltmHttpClassWaEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassWaEnabled.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassWaEnabled.setDescription('Deprecated! The state indicating whether this is a Web Accelerator class or not.')
ltmHttpClassRedirectLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassRedirectLocation.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassRedirectLocation.setDescription('Deprecated! The string (which may include a TCL expression) to indicate where to \n\t\tredirect the original HTTP request once a match occurs.')
ltmHttpClassUrlRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUrlRewrite.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUrlRewrite.setDescription('Deprecated! The string (which may include a TCL expression) with which to rewrite \n\t\tthe URLs.')
ltmHttpClassHostNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfileHost entries in the table.')
ltmHttpClassHostTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2), )
if mibBuilder.loadTexts: ltmHttpClassHostTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostTable.setDescription('Deprecated! A table containing information of host match patterns in HTTP class profiles.')
ltmHttpClassHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"))
if mibBuilder.loadTexts: ltmHttpClassHostEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostEntry.setDescription('Columns in the ltmHttpClassHost Table')
ltmHttpClassHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostIndex.setDescription('Deprecated! The index of host match patterns for the specified HTTP class profile.')
ltmHttpClassHostString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHostString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHostString.setDescription('Deprecated! The host match pattern for the specified profile.')
ltmHttpClassUriNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfileUri entries in the table.')
ltmHttpClassUriTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2), )
if mibBuilder.loadTexts: ltmHttpClassUriTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriTable.setDescription('Deprecated! A table containing information of URI match patterns in HTTP class profiles.')
ltmHttpClassUriEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"))
if mibBuilder.loadTexts: ltmHttpClassUriEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriEntry.setDescription('Columns in the ltmHttpClassUri Table')
ltmHttpClassUriName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassUriIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriIndex.setDescription('Deprecated! The index of URI match patterns for the specified HTTP class profile.')
ltmHttpClassUriString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassUriString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassUriString.setDescription('Deprecated! The URI match pattern for the specified profile.')
ltmHttpClassHeadNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfileHead entries in the table.')
ltmHttpClassHeadTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2), )
if mibBuilder.loadTexts: ltmHttpClassHeadTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadTable.setDescription('Deprecated! A table containing information of HTTP request header match patterns in HTTP class profiles.')
ltmHttpClassHeadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"))
if mibBuilder.loadTexts: ltmHttpClassHeadEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadEntry.setDescription('Columns in the ltmHttpClassHead Table')
ltmHttpClassHeadName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassHeadIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadIndex.setDescription('Deprecated! The index of HTTP request header match patterns for the specified HTTP class profile.')
ltmHttpClassHeadString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassHeadString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassHeadString.setDescription('Deprecated! The HTTP request header match pattern for the specified profile.')
ltmHttpClassCookNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfileCook entries in the table.')
ltmHttpClassCookTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2), )
if mibBuilder.loadTexts: ltmHttpClassCookTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookTable.setDescription('Deprecated! A table containing information of HTTP cookie match patterns in HTTP class profiles.')
ltmHttpClassCookEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"))
if mibBuilder.loadTexts: ltmHttpClassCookEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookEntry.setDescription('Columns in the ltmHttpClassCook Table')
ltmHttpClassCookName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassCookIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookIndex.setDescription('Deprecated! The index of HTTP cookie match patterns for the specified HTTP class profile.')
ltmHttpClassCookString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassCookString.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassCookString.setDescription('Deprecated! The HTTP cookie match pattern for the specified profile.')
ltmHttpClassStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpClassStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in ltmHttpClassProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpClassStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNumber.setDescription('Deprecated!.\n\t\tThe number of ltmHttpClassProfileStat entries in the table.')
ltmHttpClassStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3), )
if mibBuilder.loadTexts: ltmHttpClassStatTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatTable.setDescription('Deprecated! A table containing statistics information of HTTP class profile.')
ltmHttpClassStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"))
if mibBuilder.loadTexts: ltmHttpClassStatEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatEntry.setDescription('Columns in the ltmHttpClassStat Table')
ltmHttpClassStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatName.setDescription('Deprecated! The name of a HTTP class profile.')
ltmHttpClassStatCookiePersistInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCookiePersistInserts.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCookiePersistInserts.setDescription('Deprecated! The number of successful attempts to insert HTTP headers \n\t\t for cookie persistence (set-cookie header insertions).')
ltmHttpClassStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp2xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp2xxCnt.setDescription('Deprecated! The number of server-side responses in range of 200 to 206 \n\t\t (successful responses)')
ltmHttpClassStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp3xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp3xxCnt.setDescription('Deprecated! The number of server-side responses in range of 300 to 307 \n\t\t (redirection responses).')
ltmHttpClassStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp4xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp4xxCnt.setDescription('Deprecated! The number of server-side responses in range of 400 to 417  \n\t\t (client errors).')
ltmHttpClassStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatResp5xxCnt.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatResp5xxCnt.setDescription('Deprecated! The number of server-side responses in range of 500 to 505 \n\t\t (server errors).')
ltmHttpClassStatNumberReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNumberReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNumberReqs.setDescription('Deprecated! The total number of HTTP requests.')
ltmHttpClassStatGetReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatGetReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatGetReqs.setDescription('Deprecated! The total number of HTTP get requests.')
ltmHttpClassStatPostReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostReqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPostReqs.setDescription('Deprecated! The total number of HTTP post requests.')
ltmHttpClassStatV9Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV9Reqs.setDescription('Deprecated! The total number of version 9 requests.')
ltmHttpClassStatV10Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV10Reqs.setDescription('Deprecated! The total number of version 10 requests.')
ltmHttpClassStatV11Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Reqs.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV11Reqs.setDescription('Deprecated! The total number of version 11 requests.')
ltmHttpClassStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV9Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV9Resp.setDescription('Deprecated! The total number of version 9 responses.')
ltmHttpClassStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV10Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV10Resp.setDescription('Deprecated! The total number of version 10 responses.')
ltmHttpClassStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatV11Resp.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatV11Resp.setDescription('Deprecated! The total number of version 11 responses.')
ltmHttpClassStatMaxKeepaliveReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatMaxKeepaliveReq.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatMaxKeepaliveReq.setDescription('Deprecated! The maximum number of requests made in a connection.')
ltmHttpClassStatRespBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket1k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket1k.setDescription('Deprecated! The number of responses under 1k.')
ltmHttpClassStatRespBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket4k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket4k.setDescription('Deprecated! The number of responses between 1 - 4k.')
ltmHttpClassStatRespBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket16k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket16k.setDescription('Deprecated! The number of responses between 4 - 16k.')
ltmHttpClassStatRespBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket32k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket32k.setDescription('Deprecated! The number of responses between 16 - 32k.')
ltmHttpClassStatRespBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket64k.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRespBucket64k.setDescription('Deprecated! Please use larger buckets')
ltmHttpClassStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPrecompressBytes.setDescription('Deprecated! The number of response bytes before compression has taken place.')
ltmHttpClassStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPostcompressBytes.setDescription('Deprecated! The number of response bytes after compression has taken place.')
ltmHttpClassStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatNullCompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatNullCompressBytes.setDescription('Deprecated! The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpClassStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpClassStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatHtmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpClassStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCssPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpClassStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatCssPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatCssPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpClassStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatJsPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpClassStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatJsPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatJsPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpClassStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatXmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpClassStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatXmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatXmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpClassStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpClassStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatSgmlPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpClassStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPlainPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpClassStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatPlainPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatPlainPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpClassStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOctetPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpClassStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOctetPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOctetPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpClassStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatImagePrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpClassStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatImagePostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatImagePostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpClassStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatVideoPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpClassStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatVideoPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatVideoPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpClassStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatAudioPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpClassStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatAudioPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatAudioPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpClassStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPrecompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOtherPrecompressBytes.setDescription('Deprecated! The number of pre-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmHttpClassStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatOtherPostcompressBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatOtherPostcompressBytes.setDescription('Deprecated! The number of post-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmHttpClassStatRamcacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHits.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHits.setDescription('Deprecated! The number of RAM cache hits.')
ltmHttpClassStatRamcacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMisses.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMisses.setDescription('Deprecated! The number of RAM cache misses, excluding un-cacheable data.')
ltmHttpClassStatRamcacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissesAll.setDescription('Deprecated! The total number of RAM cache misses.')
ltmHttpClassStatRamcacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHitBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheHitBytes.setDescription('Deprecated! The number of RAM cache hits in bytes.')
ltmHttpClassStatRamcacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytes.setDescription('Deprecated! The number of RAM cache misses in bytes, excluding un-cacheable data.')
ltmHttpClassStatRamcacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 15, 6, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytesAll.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpClassStatRamcacheMissBytesAll.setDescription('Deprecated! The total number of RAM cache misses in bytes.')
ltmIiopProfileName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileName.setDescription('Deprecated!.\n\t\tThe name of a IIOP profile.')
ltmIiopProfileConfigSource = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileConfigSource.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileConfigSource.setDescription('Deprecated!.\n\t\tThe state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmIiopProfileDefaultName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileDefaultName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileDefaultName.setDescription('Deprecated!.\n\t\tThe name of the profile from which the specified profile derives\n\t        its attribute default values.')
ltmIiopProfilePersistRequestId = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistRequestId.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfilePersistRequestId.setDescription('Deprecated!.\n\t\tThe state that if true, persist the request ID.')
ltmIiopProfilePersistObjectKey = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfilePersistObjectKey.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfilePersistObjectKey.setDescription('Deprecated!.\n\t\tThe state that if true, persist the object key.')
ltmIiopProfileAbortOnTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileAbortOnTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileAbortOnTimeout.setDescription('Deprecated!.\n\t\tThe state that if true, abort the connection when response is\n\t        timed out.')
ltmIiopProfileTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileTimeout.setDescription('Deprecated!.\n\t\tThe response timeout for the specified IIOP profile.')
ltmIiopProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIiopProfileStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in ltmIiopProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmIiopProfileStatName = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatName.setDescription('Deprecated!.\n\t\tThe name of a IIOP profile.')
ltmIiopProfileStatNumRequests = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumRequests.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatNumRequests.setDescription('Deprecated!.\n\t\tThe total number of IIOP requests.')
ltmIiopProfileStatNumResponses = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumResponses.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatNumResponses.setDescription('Deprecated!.\n\t\tThe total number of IIOP responses.')
ltmIiopProfileStatNumCancels = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumCancels.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatNumCancels.setDescription('Deprecated!.\n\t\tThe total number of IIOP cancel messages.')
ltmIiopProfileStatNumErrors = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumErrors.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatNumErrors.setDescription('Deprecated!.\n\t\tThe total number of IIOP error messages.')
ltmIiopProfileStatNumFragments = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 16, 2, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIiopProfileStatNumFragments.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIiopProfileStatNumFragments.setDescription('Deprecated!.\n\t\tThe total number of IIOP fragments.')
ltmRtspProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileNumber.setDescription('The number of ltmRtspProfile entries in the table.')
ltmRtspProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2), )
if mibBuilder.loadTexts: ltmRtspProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileTable.setDescription('A table containing information of RTSP profile.')
ltmRtspProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"))
if mibBuilder.loadTexts: ltmRtspProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileEntry.setDescription('Columns in the ltmRtspProfile Table')
ltmRtspProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileName.setDescription('The name of a RTSP profile.')
ltmRtspProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmRtspProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t        its attribute default values.')
ltmRtspProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileIdleTimeout.setDescription('The idle timeout (in seconds) for the specified RTSP profile.')
ltmRtspProfileMaxHeaderSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxHeaderSize.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMaxHeaderSize.setDescription('The maximum header size in bytes for the specified RTSP profile.')
ltmRtspProfileMaxQueuedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMaxQueuedData.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMaxQueuedData.setDescription('The maximum queued data in bytes for the specified RTSP profile.')
ltmRtspProfileUnicastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileUnicastRedirect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileUnicastRedirect.setDescription('The state indicating whether unicast redirect is enable or not\n\t\tfor the specified RTSP profile.')
ltmRtspProfileMulticastRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileMulticastRedirect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileMulticastRedirect.setDescription('The state indicating whether multicast redirect is enable or not\n\t\tfor the specified RTSP profile.')
ltmRtspProfileSessionReconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileSessionReconnect.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileSessionReconnect.setDescription('The state indicating whether session reconnecting is enable or not\n\t\tfor the specified RTSP profile.')
ltmRtspProfileRealHttpPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRealHttpPersistence.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRealHttpPersistence.setDescription('The state indicating whether real HTTP persistence is enable or not\n\t\tfor the specified RTSP profile.')
ltmRtspProfileProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("external", 1), ("internal", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxy.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileProxy.setDescription('The proxy state for the specified RTSP profile.')
ltmRtspProfileProxyHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileProxyHeader.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileProxyHeader.setDescription('The proxy header for the specified RTSP profile.')
ltmRtspProfileRtpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 13), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtpPort.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRtpPort.setDescription('The RTP port for the specified RTSP profile.')
ltmRtspProfileRtcpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 14), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileRtcpPort.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileRtcpPort.setDescription('The RTCP port for the specified RTSP profile.')
ltmRtspProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmRtspProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmRtspProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRtspProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmRtspProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmRtspProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumber.setDescription('The number of ltmRtspProfileStat entries in the table.')
ltmRtspProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3), )
if mibBuilder.loadTexts: ltmRtspProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatTable.setDescription('A table containing statistic information of RTSP profile.')
ltmRtspProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"))
if mibBuilder.loadTexts: ltmRtspProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatEntry.setDescription('Columns in the ltmRtspProfileStat Table')
ltmRtspProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatName.setDescription('The name of a RTSP profile.')
ltmRtspProfileStatNumRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumRequests.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumRequests.setDescription('The total number of RTSP requests for the specified RTSP profile.')
ltmRtspProfileStatNumResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumResponses.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumResponses.setDescription('The total number of RTSP responses for the specified RTSP profile.')
ltmRtspProfileStatNumErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumErrors.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumErrors.setDescription('The total number of RTSP errors for the specified RTSP profile.')
ltmRtspProfileStatNumInterleaved = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 17, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRtspProfileStatNumInterleaved.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatNumInterleaved.setDescription('The total number of interleaved RTSP data packets for the specified RTSP profile.')
ltmSctpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileNumber.setDescription('The number of ltmSctpProfile entries in the table.')
ltmSctpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2), )
if mibBuilder.loadTexts: ltmSctpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTable.setDescription('A table containing information of SCTP profile.')
ltmSctpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"))
if mibBuilder.loadTexts: ltmSctpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileEntry.setDescription('Columns in the ltmSctpProfile Table')
ltmSctpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileName.setDescription('The name of a SCTP profile.')
ltmSctpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmSctpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t        its attribute default values.')
ltmSctpProfileRcvOrdered = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvOrdered.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRcvOrdered.setDescription('The state indicating whether or not to in-order deliver messages to upper layer \n\t\tfor the specified profile.')
ltmSctpProfileSndPartial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndPartial.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSndPartial.setDescription('The state indicating whether or not to accept partial of application data\n\t\tfor the specified profile.')
ltmSctpProfileTcpShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTcpShutdown.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTcpShutdown.setDescription('The state indicating whether or not to emulate TCP closing\n\t\tfor the specified profile.')
ltmSctpProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileResetOnTimeout.setDescription('The state indicating whether or not reset connection when timeout\n\t\tfor the specified profile.')
ltmSctpProfileOutStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileOutStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileOutStreams.setDescription('The total number of out-bound streams for the specified profile.')
ltmSctpProfileInStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileInStreams.setDescription('The total number of in-bound streams for the specified profile.')
ltmSctpProfileSndbuf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSndbuf.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSndbuf.setDescription('The send buffer size in bytes for the specified profile.')
ltmSctpProfileRcvwnd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRcvwnd.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRcvwnd.setDescription('The received window size, should be prorated to ltmSctpProfileRxChuncks \n\t\tfor the specified profile.')
ltmSctpProfileTxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileTxChunks.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileTxChunks.setDescription('The number of sending chunk buffer for the specified profile.')
ltmSctpProfileRxChunks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRxChunks.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRxChunks.setDescription('The number of receiving chunk buffer for the specified profile.')
ltmSctpProfileCookieExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileCookieExpiration.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileCookieExpiration.setDescription('The valid duration of cookie for the specified profile.')
ltmSctpProfileInitMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileInitMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileInitMaxrtx.setDescription('The maximum number of retries to establish a connection for the specified profile.')
ltmSctpProfileAssocMaxrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileAssocMaxrtx.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileAssocMaxrtx.setDescription('The maximum number of retries to send data for the specified profile.')
ltmSctpProfileProxyBufferLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferLow.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferLow.setDescription('The proxy buffer level at which the receive window is opened \n\t\tfor the specified profile.')
ltmSctpProfileProxyBufferHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferHigh.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileProxyBufferHigh.setDescription('The proxy buffer level at which the receive window is closed \n\t\tfor the specified profile.')
ltmSctpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileIdleTimeout.setDescription('The number of seconds without traffic before a connection is eligible \n\t\tfor deletion for the specified profile.')
ltmSctpProfileHeartbeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatInterval.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatInterval.setDescription('The number of seconds to send heartbeat for the specified profile.')
ltmSctpProfileIpTosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileIpTosToPeer.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileIpTosToPeer.setDescription('The IP type of service set in packets sent to peer for the specified profile.')
ltmSctpProfileLinkQosToPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileLinkQosToPeer.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileLinkQosToPeer.setDescription('The link quality of service set in packets sent to peer for the specified profile.')
ltmSctpProfileSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSecret.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSctpProfileSecret.setDescription('Deprecated! The internal secret string used to HMAC cookie for the specified profile.')
ltmSctpProfileMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileMaxBurst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileMaxBurst.setDescription('The maximum number of data packets sent in a burst')
ltmSctpProfileHeartbeatMaxBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatMaxBurst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileHeartbeatMaxBurst.setDescription('The maximum number of heartbeat packets sent in a burst')
ltmSctpProfileMaxCommunicationPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileMaxCommunicationPaths.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileMaxCommunicationPaths.setDescription('Maximum number of communication\n\t   paths.')
ltmSctpProfileMaxPathRetransmitLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileMaxPathRetransmitLimit.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileMaxPathRetransmitLimit.setDescription('Limit of retransmission path.')
ltmSctpProfileServerSideMultihoming = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileServerSideMultihoming.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileServerSideMultihoming.setDescription('Enables server\n\t   side multihoming.')
ltmSctpProfileClientSideMultihoming = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileClientSideMultihoming.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileClientSideMultihoming.setDescription('Enables client\n\t   side multihoming.')
ltmSctpProfileRtoInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRtoInitial.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRtoInitial.setDescription('This is the net.sctp.rto_initial configurable\n\t   parameter. It is the initial value of RTO(retransmission timeout)\n\t   that is used in RTO calculations. Unit of measurement is\n\t   milliseconds.')
ltmSctpProfileRtoMin = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRtoMin.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRtoMin.setDescription('This is the net.sctp.rto_min configurable\n\t   parameter. It is the minimum value of RTO(retransmission timeout)\n\t   that is used in RTO calculation. Unit of measurement is\n\t   milliseconds.')
ltmSctpProfileRtoMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 32), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileRtoMax.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileRtoMax.setDescription('This is the net.sctp.rto_max configurable\n\t   parameter. It is the maximum value of RTO(retransmission timeout)\n\t   that is used in RTO calculations. Unit of measurement is\n\t   milliseconds.')
ltmSctpProfileSackTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileSackTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileSackTimeout.setDescription('Delayed SACK timeout is configurable. Unit of\n\t   measurement is milliseconds.')
ltmSctpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSctpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSctpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSctpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatNumber.setDescription('The number of ltmSctpProfileStat entries in the table.')
ltmSctpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3), )
if mibBuilder.loadTexts: ltmSctpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatTable.setDescription('A table containing statistic information of SCTP profile.')
ltmSctpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"))
if mibBuilder.loadTexts: ltmSctpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatEntry.setDescription('Columns in the ltmSctpProfileStat Table')
ltmSctpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatName.setDescription('The name of a SCTP profile.')
ltmSctpProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAccepts.setDescription('The total number of accepted connections for the specified profile.')
ltmSctpProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAcceptfails.setDescription('The total number of not accepted responses for the specified profile.')
ltmSctpProfileStatConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnects.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatConnects.setDescription('The total number of established connections for the specified profile.')
ltmSctpProfileStatConnfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConnfails.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatConnfails.setDescription('The total number of connections failures for the specified profile.')
ltmSctpProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatExpires.setDescription('The total number of expired connections due to idle timeout for the specified profile.')
ltmSctpProfileStatAbandons = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAbandons.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAbandons.setDescription('The total number of abandoned connections due to retries/keep-alives for the specified profile.')
ltmSctpProfileStatRxrst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxrst.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxrst.setDescription('The total number of received Abort chunks for the specified profile.')
ltmSctpProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadsum.setDescription('The total number of bad checksum in received packets for the specified profile.')
ltmSctpProfileStatRxcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxcookie.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxcookie.setDescription('The total number of received SCTP cookies (including bad and good ones) for the specified profile.')
ltmSctpProfileStatRxbadcookie = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadcookie.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatRxbadcookie.setDescription('The total number of received bad SCTP cookies for the specified profile.')
ltmSctpProfileStatAssociations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatAssociations.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatAssociations.setDescription('The current number of active SCTP associations for the specified profile.')
ltmSctpProfileStatClosing = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatClosing.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatClosing.setDescription('The current number of closing SCTP associations for the specified profile.')
ltmSctpProfileStatConfirmedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatConfirmedAddresses.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatConfirmedAddresses.setDescription('The current number of confirmed remote transport addresses for the specified profile.')
ltmSctpProfileStatUnconfirmedAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatUnconfirmedAddresses.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatUnconfirmedAddresses.setDescription('The current number of unconfirmed remote transport addresses for the specified profile.')
ltmSctpProfileStatActivePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatActivePaths.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatActivePaths.setDescription('The current number of active transport paths for the specified profile.')
ltmSctpProfileStatInactivePaths = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 18, 2, 3, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSctpProfileStatInactivePaths.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatInactivePaths.setDescription('The current number of inactive transport paths for the specified profile.')
ltmUserStatProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileNumber.setDescription('The number of ltmUserStatProfile entries in the table.')
ltmUserStatProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2), )
if mibBuilder.loadTexts: ltmUserStatProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileTable.setDescription('A table containing basic information of user-defined statistics profiles., \n\t\tThe user can define up to 32 statistic fields in each profile. \n\t\tSee ltmUserStatProfileStatTable for user-defined fields for each profile.')
ltmUserStatProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"))
if mibBuilder.loadTexts: ltmUserStatProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileEntry.setDescription('Columns in the ltmUserStatProfile Table')
ltmUserStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileName.setDescription('The name of an user-defined statistics profile.')
ltmUserStatProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmUserStatProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmUserStatProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmUserStatProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmUserStatProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmUserStatProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatNumber.setDescription('The number of ltmUserStatProfileStat entries in the table.')
ltmUserStatProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3), )
if mibBuilder.loadTexts: ltmUserStatProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatTable.setDescription('A table containing user-defined statistics information for related profiles.\n\t\tThe maximum for user-defined statistic fields is 32 for each profile.')
ltmUserStatProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"))
if mibBuilder.loadTexts: ltmUserStatProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatEntry.setDescription('Columns in the ltmUserStatProfileStat Table')
ltmUserStatProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatName.setDescription('The name of an user-defined statistics profile.')
ltmUserStatProfileStatFieldId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldId.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldId.setDescription('The index of the user-defined statistics field.')
ltmUserStatProfileStatFieldName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldName.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldName.setDescription('The name of the related user-defined statistic field.')
ltmUserStatProfileStatFieldValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 19, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldValue.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatFieldValue.setDescription('The value of the related user-defined statistic field.')
ltmVsHttpClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassNumber.setDescription('Deprecated!.\n\t\tThe number of ltmVirtualServHttpClass entries in the table.')
ltmVsHttpClassTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2), )
if mibBuilder.loadTexts: ltmVsHttpClassTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassTable.setDescription('Deprecated! A table containing information of HTTP class profiles with which the specified virtual servers associate.')
ltmVsHttpClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"))
if mibBuilder.loadTexts: ltmVsHttpClassEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassEntry.setDescription('Columns in the ltmVsHttpClass Table')
ltmVsHttpClassVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassVsName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassVsName.setDescription('Deprecated! The name of a virtual server.')
ltmVsHttpClassProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassProfileName.setDescription('Deprecated! The name of HTTP class profile with which the specified virtual server associate.')
ltmVsHttpClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 12, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsHttpClassPriority.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsHttpClassPriority.setDescription('Deprecated! The priority of the profile among profiles used by the specified virtual server.')
ltmNodeAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusNumber.setDescription('The number of ltmNodeAddrStatus entries in the table.')
ltmNodeAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2), )
if mibBuilder.loadTexts: ltmNodeAddrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusTable.setDescription('A table containing status information of node addresses.')
ltmNodeAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"))
if mibBuilder.loadTexts: ltmNodeAddrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusEntry.setDescription('Columns in the ltmNodeAddrStatus Table')
ltmNodeAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAddrType.setDescription('The IP address type of ltmNodeAddrStatusAddr.')
ltmNodeAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAddr.setDescription('The IP address of a node. It is interpreted within \n\t\t the context of a ltmNodeAddrStatusAddrType value.')
ltmNodeAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusAvailState.setDescription('The availability of the specified node address indicated in color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
ltmNodeAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusEnabledState.setDescription('The activity status of the specified node address, as specified \n\t\tby the user.')
ltmNodeAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmNodeAddrStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified node address.')
ltmNodeAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusDetailReason.setDescription("The detail description of the specified node's status.")
ltmNodeAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 4, 3, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNodeAddrStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusName.setDescription('node name.')
ltmPoolStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusNumber.setDescription('The number of ltmPoolStatus entries in the table.')
ltmPoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2), )
if mibBuilder.loadTexts: ltmPoolStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusTable.setDescription('A table containing status information of pools.')
ltmPoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"))
if mibBuilder.loadTexts: ltmPoolStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusEntry.setDescription('Columns in the ltmPoolStatus Table')
ltmPoolStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusName.setDescription('The name of a pool.')
ltmPoolStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("grey", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusAvailState.setDescription('The availability of the specified pool indicated in color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed')
ltmPoolStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusEnabledState.setDescription('The activity status of the specified pool, as specified \n\t\tby the user.')
ltmPoolStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified pool.')
ltmPoolStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 5, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusDetailReason.setDescription("The detail description of the specified pool's status.")
ltmPoolMbrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusNumber.setDescription('The number of ltmPoolMemberStatus entries in the table.')
ltmPoolMbrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2), )
if mibBuilder.loadTexts: ltmPoolMbrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusTable.setDescription('A table containing status information of pool members.')
ltmPoolMbrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"))
if mibBuilder.loadTexts: ltmPoolMbrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusEntry.setDescription('Columns in the ltmPoolMbrStatus Table')
ltmPoolMbrStatusPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusPoolName.setDescription('The name of a pool.')
ltmPoolMbrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAddrType.setDescription('The IP address type of ltmPoolMbrStatusAddr.')
ltmPoolMbrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAddr.setDescription('The IP address of a pool member in the specified pool.  \n\t\tIt is interpreted within the context of an ltmPoolMbrStatusAddrType value.')
ltmPoolMbrStatusPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusPort.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusPort.setDescription('The port number of the specified pool member.')
ltmPoolMbrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusAvailState.setDescription('The availability of the specified pool member indicated in color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
ltmPoolMbrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusEnabledState.setDescription('The activity status of the specified pool member, as specified \n\t\tby the user.')
ltmPoolMbrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmPoolMbrStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified pool member.')
ltmPoolMbrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusDetailReason.setDescription("The detail description of the specified pool member's status.")
ltmPoolMbrStatusNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 5, 6, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPoolMbrStatusNodeName.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusNodeName.setDescription('Name of associated name.')
ltmVsStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusNumber.setDescription('The number of ltmVirtualServStatus entries in the table.')
ltmVsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2), )
if mibBuilder.loadTexts: ltmVsStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusTable.setDescription('A table containing status information of virtual servers.')
ltmVsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"))
if mibBuilder.loadTexts: ltmVsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusEntry.setDescription('Columns in the ltmVsStatus Table')
ltmVsStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusName.setDescription('The name of a virtual server.')
ltmVsStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusAvailState.setDescription('The availability of the specified virtual server indicated in color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
ltmVsStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusEnabledState.setDescription('The activity status of the specified virtual server, as specified \n\t\tby the user.')
ltmVsStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVsStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified virtual server.')
ltmVsStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 13, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVsStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusDetailReason.setDescription("The detail description of the specified virtual server's status.")
ltmVAddrStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusNumber.setDescription('The number of ltmVirtualAddrStatus entries in the table.')
ltmVAddrStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2), )
if mibBuilder.loadTexts: ltmVAddrStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusTable.setDescription('A table containing status information of virtual addresses.')
ltmVAddrStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"))
if mibBuilder.loadTexts: ltmVAddrStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusEntry.setDescription('Columns in the ltmVAddrStatus Table')
ltmVAddrStatusAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAddrType.setDescription('The IP address type of ltmVsAddrStatusAddr')
ltmVAddrStatusAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAddr.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAddr.setDescription('The IP address of a virtual address. It is interpreted \n\t\t within the context of a ltmVsAddrAddrType value.')
ltmVAddrStatusAvailState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 0), ("green", 1), ("yellow", 2), ("red", 3), ("blue", 4), ("gray", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusAvailState.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusAvailState.setDescription('The availability of the specified virtual address indicated in color.\n\t\tnone - error;\n\t\tgreen - available in some capacity;\n\t\tyellow - not currently available;\n\t\tred - not available;\n\t\tblue - availability is unknown;\n\t\tgray - unlicensed.')
ltmVAddrStatusEnabledState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("enabled", 1), ("disabled", 2), ("disabledbyparent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusEnabledState.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusEnabledState.setDescription('The activity status of the specified virtual address, as specified \n\t\tby the user.')
ltmVAddrStatusParentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusParentType.setStatus('deprecated')
if mibBuilder.loadTexts: ltmVAddrStatusParentType.setDescription('Deprecated! This is an internal data.\n\t\tThe type of parent object which disabled the specified virtual address.')
ltmVAddrStatusDetailReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusDetailReason.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusDetailReason.setDescription("The detail description of the specified virtual address's status.")
ltmVAddrStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 14, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVAddrStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusName.setDescription('Virtual Address name')
ltmFallbackStatusNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusNumber.setDescription('The number of ltmHttpProfileFallbackStatus entries in the table.')
ltmFallbackStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2), )
if mibBuilder.loadTexts: ltmFallbackStatusTable.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusTable.setDescription("A table containing information of status codes that when matched, \n\t\ttraffic will be sent to the 'fallback_host' for HTTP profiles.")
ltmFallbackStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"))
if mibBuilder.loadTexts: ltmFallbackStatusEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusEntry.setDescription('Columns in the ltmFallbackStatus Table')
ltmFallbackStatusName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusName.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusName.setDescription('The name of a HTTP profile.')
ltmFallbackStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusIndex.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusIndex.setDescription('The index of status code for the specified HTTP profile.')
ltmFallbackStatusCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 10, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFallbackStatusCode.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusCode.setDescription("The status code that when matched, traffic will be sent to the 'fallback_host' for the specified profile.")
ltmRespHeadersPermNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermNumber.setDescription('The number of ltmHttpProfileRespHeadersPerm entries in the table.')
ltmRespHeadersPermTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2), )
if mibBuilder.loadTexts: ltmRespHeadersPermTable.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermTable.setDescription('A table containing information of permitted headers in the \n\t\tresponses for HTTP profiles.')
ltmRespHeadersPermEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"))
if mibBuilder.loadTexts: ltmRespHeadersPermEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermEntry.setDescription('Columns in the ltmRespHeadersPerm Table')
ltmRespHeadersPermName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermName.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermName.setDescription('The name of a HTTP profile.')
ltmRespHeadersPermIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermIndex.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermIndex.setDescription('The index of permitted header in a response for the specified HTTP profile.')
ltmRespHeadersPermStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 11, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRespHeadersPermStr.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermStr.setDescription('The permitted header in a response for the specified profile.')
ltmEncCookiesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesNumber.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesNumber.setDescription('The number of ltmHttpProfileEncCookies entries in the table.')
ltmEncCookiesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2), )
if mibBuilder.loadTexts: ltmEncCookiesTable.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesTable.setDescription('A table containing information of cookies to be encrypted before\n\t\tsending them to the clients for HTTP profiles.')
ltmEncCookiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"))
if mibBuilder.loadTexts: ltmEncCookiesEntry.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesEntry.setDescription('Columns in the ltmEncCookies Table')
ltmEncCookiesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesName.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesName.setDescription('The name of a HTTP profile.')
ltmEncCookiesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesIndex.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesIndex.setDescription('The index of cookie to be encrypted before sending it to the client\n\t\t for the specified HTTP profile.')
ltmEncCookiesStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 12, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmEncCookiesStr.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesStr.setDescription('The cookie to be encrypted before sending it to the client\n\t\tfor the specified profile.')
ltmFastL4ProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFastL4ProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmFastL4ProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFastL4ProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatNumber.setDescription('The number of ltmFastL4ProfileStat entries in the table.')
ltmFastL4ProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3), )
if mibBuilder.loadTexts: ltmFastL4ProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatTable.setDescription('A table containing statistics information of fast L4 profiles.')
ltmFastL4ProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"))
if mibBuilder.loadTexts: ltmFastL4ProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatEntry.setDescription('Columns in the ltmFastL4ProfileStat Table')
ltmFastL4ProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatName.setDescription('The name of a fast L4 profile.')
ltmFastL4ProfileStatOpen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatOpen.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatOpen.setDescription('The number of current open connections for the specified fast L4 profile.')
ltmFastL4ProfileStatAccepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAccepts.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatAccepts.setDescription('The number of accepted connections for the specified fast L4 profile.')
ltmFastL4ProfileStatAcceptfails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatAcceptfails.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatAcceptfails.setDescription('The number of not accepted connections for the specified fast L4 profile.')
ltmFastL4ProfileStatExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatExpires.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatExpires.setDescription('The number of expired connections due to idle timeout for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadpkt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadpkt.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadpkt.setDescription('The number of malformed packets for the specified fast L4 profile.')
ltmFastL4ProfileStatRxunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxunreach.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxunreach.setDescription('The number of received ICMP unreach/TCP RST for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadunreach = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadunreach.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadunreach.setDescription('The number of received TCP RST outside the current window for the specified fast L4 profile.')
ltmFastL4ProfileStatRxbadsum = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadsum.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatRxbadsum.setDescription('The number of bad checksum for the specified fast L4 profile.')
ltmFastL4ProfileStatTxerrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatTxerrors.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatTxerrors.setDescription('The number of transmit datagram errors for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookIssue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookIssue.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookIssue.setDescription('The number of syncookies issued for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookAccept.setDescription('The number of syncookies accepted for the specified fast L4 profile.')
ltmFastL4ProfileStatSyncookReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookReject.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatSyncookReject.setDescription('The number of syncookies rejected for the specified fast L4 profile.')
ltmFastL4ProfileStatServersynrtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatServersynrtx.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatServersynrtx.setDescription('The number of retransmissions of SYN to server for a syncookied connection for the specified fast L4 profile.')
ltmFastL4ProfileStatLbcSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcSuccessful.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcSuccessful.setDescription('The number of Successful Late Binding Connections.')
ltmFastL4ProfileStatLbcTimedout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 5, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcTimedout.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatLbcTimedout.setDescription('The number of Late Binding Connections that were timed out.')
ltmSipProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileNumber.setDescription('The number of ltmSipProfile entries in the table.')
ltmSipProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2), )
if mibBuilder.loadTexts: ltmSipProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileTable.setDescription('A table containing configuration information of SIP profiles.')
ltmSipProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"))
if mibBuilder.loadTexts: ltmSipProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileEntry.setDescription('Columns in the ltmSipProfile Table')
ltmSipProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileName.setDescription('The name of a SIP profile.')
ltmSipProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmSipProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmSipProfileMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileMaxSize.setDescription('The acceptable maximum SIP message size for the specified profile.')
ltmSipProfileTerminateBye = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileTerminateBye.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileTerminateBye.setDescription('The state indicating whether  or not to terminate connection after bye (200 BYE) message for the specified profile.')
ltmSipProfileInsertVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertVia.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileInsertVia.setDescription('The state indicating whether or not to insert Via for the specified profile.')
ltmSipProfileSecureVia = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileSecureVia.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileSecureVia.setDescription('The state indicating whether or not it is SIPS/2.0/TLS for the specified profile.')
ltmSipProfileInsertRecordRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileInsertRecordRoute.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileInsertRecordRoute.setDescription('The state indicating whether or not insert Record-route for the specified profile.')
ltmSipProfileFirewallEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileFirewallEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileFirewallEnabled.setDescription('The state indicating whether or not SIP firewall is enabled for the specified \n\t\tprofile.')
ltmSipProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmSipProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmSipProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSipProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSipProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSipProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatNumber.setDescription('The number of ltmSipProfileStat entries in the table.')
ltmSipProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3), )
if mibBuilder.loadTexts: ltmSipProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatTable.setDescription('A table containing statistics information of SIP profiles.')
ltmSipProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"))
if mibBuilder.loadTexts: ltmSipProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatEntry.setDescription('Columns in the ltmSipProfileStat Table')
ltmSipProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatName.setDescription('The name of a SIP profile.')
ltmSipProfileStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatRequests.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatRequests.setDescription('The total number of requests received for the specified profile.')
ltmSipProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatResponses.setDescription('The total number of responses sent for the specified profile.')
ltmSipProfileStatBadmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatBadmsgs.setDescription('The total number of bad messages for the specified profile.')
ltmSipProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 20, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipProfileStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatDrops.setDescription('The total number of dropped packets for the specified profile.')
ltmVirtualModuleScoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreNumber.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreNumber.setDescription('The number of ltmVirtualModuleScore entries in the table.')
ltmVirtualModuleScoreTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2), )
if mibBuilder.loadTexts: ltmVirtualModuleScoreTable.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreTable.setDescription('A table containing module capacity scores for virtual servers')
ltmVirtualModuleScoreEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"))
if mibBuilder.loadTexts: ltmVirtualModuleScoreEntry.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreEntry.setDescription('Columns in the ltmVirtualModuleScore Table')
ltmVirtualModuleScoreVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreVsName.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreVsName.setDescription('The name of the virtual server this score applies to.')
ltmVirtualModuleScoreModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("asm", 0), ("sam", 1), ("wam", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreModuleType.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreModuleType.setDescription('The bigip module that this score applites to.')
ltmVirtualModuleScoreScore = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 15, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmVirtualModuleScoreScore.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreScore.setDescription('The score represents how much capacity the module estimates it has left.')
ltmIsessionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileNumber.setDescription('The number of ltmIsessionProfile entries in the table.')
ltmIsessionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2), )
if mibBuilder.loadTexts: ltmIsessionProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileTable.setDescription('A table containing configuration information of Isession profiles.')
ltmIsessionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"))
if mibBuilder.loadTexts: ltmIsessionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileEntry.setDescription('Columns in the ltmIsessionProfile Table')
ltmIsessionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileName.setDescription('The name of a iSession profile.')
ltmIsessionProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileMode.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileMode.setDescription('Enable/disable this profile.')
ltmIsessionProfileConnectionReuse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileConnectionReuse.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileConnectionReuse.setDescription('Enable/disable connection reuse.')
ltmIsessionProfileCompressionNull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionNull.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionNull.setDescription('Deprecated!  \n\t         Select null compression method if enabled.')
ltmIsessionProfileCompressionDeflate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflate.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflate.setDescription('Deprecated!  \n\t       Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompressionLzo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionLzo.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionLzo.setDescription('Deprecated!  \n\t       Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompressionAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionAdaptive.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionAdaptive.setDescription('Select adaptive compression method if enabled.')
ltmIsessionProfileDeduplication = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileDeduplication.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileDeduplication.setDescription('Enable/disable deduplication functionality.')
ltmIsessionProfilePortTransparency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfilePortTransparency.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfilePortTransparency.setDescription('Use same destination port over WAN as specified by the client.')
ltmIsessionProfileTargetVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("hostmatchnoisession", 1), ("hostmatchall", 2), ("matchall", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileTargetVirtual.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileTargetVirtual.setDescription('Use to provide good match for targetted virtual.')
ltmIsessionProfileEndpointPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileEndpointPool.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileEndpointPool.setDescription('The name of a LTM pool for paired tunneling.')
ltmIsessionProfileCompressionDeflateLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflateLevel.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionDeflateLevel.setDescription('Select compression level [1-9] when deflate compression method is enabled.')
ltmIsessionProfileCompressionBzip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionBzip2.setStatus('deprecated')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionBzip2.setDescription('Deprecated! \n\t        Replaced by ltmIsessionCompression and ltmIsessionCompressionCodecs.')
ltmIsessionProfileCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompression.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompression.setDescription('Enable/disable compression functionality.')
ltmIsessionProfileCompressionCodecs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 1, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileCompressionCodecs.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileCompressionCodecs.setDescription('Assign lzo(0), deflate(1), bzip2(2) comression methods, if compression enabled.')
ltmIsessionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIsessionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmIsessionProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmIsessionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNumber.setDescription('The number of ltmIsessionProfileStat entries in the table.')
ltmIsessionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3), )
if mibBuilder.loadTexts: ltmIsessionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatTable.setDescription('A table containing statistics information for virtual servers with iSession profiles')
ltmIsessionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"))
if mibBuilder.loadTexts: ltmIsessionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatEntry.setDescription('Columns in the ltmIsessionProfileStat Table')
ltmIsessionProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatVsName.setDescription('The name of a iSession virtual server.')
ltmIsessionProfileStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatProfileName.setDescription('The name of a iSession profile.')
ltmIsessionProfileStatNullInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInUses.setDescription('The number of uses NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInErrors.setDescription('The number of errors in use NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesOpt.setDescription('The number of opt bytes NULL compression for IN towards LAN')
ltmIsessionProfileStatNullInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullInBytesRaw.setDescription('The number of raw bytes NULL compression for IN towards LAN')
ltmIsessionProfileStatNullOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutUses.setDescription('The number of uses NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutErrors.setDescription('The number of errors in use NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesOpt.setDescription('The number of opt bytes NULL compression for OUT towards WAN')
ltmIsessionProfileStatNullOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatNullOutBytesRaw.setDescription('The number of raw bytes NULL compression for OUT towards WAN')
ltmIsessionProfileStatLzoInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInUses.setDescription('The number of uses LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInErrors.setDescription('The number of errors in use LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesOpt.setDescription('The number of opt bytes LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoInBytesRaw.setDescription('The number of raw bytes LZO compression for IN towards LAN')
ltmIsessionProfileStatLzoOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutUses.setDescription('The number of uses LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutErrors.setDescription('The number of errors in use LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesOpt.setDescription('The number of opt bytes LZO compression for OUT towards WAN')
ltmIsessionProfileStatLzoOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatLzoOutBytesRaw.setDescription('The number of raw bytes LZO compression for OUT towards WAN')
ltmIsessionProfileStatDeflateInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInUses.setDescription('The number of uses DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInErrors.setDescription('The number of errors in use DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesOpt.setDescription('The number of opt bytes DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateInBytesRaw.setDescription('The number of raw bytes DEFLATE compression for IN towards LAN')
ltmIsessionProfileStatDeflateOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutUses.setDescription('The number of uses DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutErrors.setDescription('The number of errors in use DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesOpt.setDescription('The number of opt bytes DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDeflateOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDeflateOutBytesRaw.setDescription('The number of raw bytes DEFLATE compression for OUT towards WAN')
ltmIsessionProfileStatDedupInUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInUses.setDescription('The number of uses DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInErrors.setDescription('The number of errors in use DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesOpt.setDescription('The number of opt bytes DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupInBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInBytesRaw.setDescription('The number of raw bytes DEDUPLICATION compression for IN towards LAN')
ltmIsessionProfileStatDedupOutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutUses.setDescription('The number of uses DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutErrors.setDescription('The number of errors in use DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesOpt.setDescription('The number of opt bytes DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupOutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutBytesRaw.setDescription('The number of raw bytes DEDUPLICATION compression for OUT towards WAN')
ltmIsessionProfileStatDedupInHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHits.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHits.setDescription('The number of deduplication hits for IN towards LAN')
ltmIsessionProfileStatDedupInHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitBytes.setDescription('The number of deduplication hit bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1k.setDescription('The number of deduplication hits with size less than 1k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket2k.setDescription('The number of deduplication hits with size between 1k and 2k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket4k.setDescription('The number of deduplication hits with size between 2k and 4k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket8k.setDescription('The number of deduplication hits with size between 4k and 8k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket16k.setDescription('The number of deduplication hits with size between 8k and 16k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket32k.setDescription('The number of deduplication hits with size between 16k and 32k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket64k.setDescription('The number of deduplication hits with size between 32k and 64k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket128k.setDescription('The number of deduplication hits with size between 64k and 128k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket256k.setDescription('The number of deduplication hits with size between 128k and 256k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket512k.setDescription('The number of deduplication hits with size between 256k and 512k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucket1m.setDescription('The number of deduplication hits with size between 512k and 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInHitHistBucketLarge.setDescription('The number of deduplication hits with size more than 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMisses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMisses.setDescription('The number of deduplication misses for IN towards LAN')
ltmIsessionProfileStatDedupInMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissBytes.setDescription('The number of deduplication misses bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1k.setDescription('The number of deduplication misses with size less than 1k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket2k.setDescription('The number of deduplication misses with size between 1k and 2k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket4k.setDescription('The number of deduplication misses with size between 2k and 4k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket8k.setDescription('The number of deduplication misses with size between 4k and 8k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket16k.setDescription('The number of deduplication misses with size between 8k and 16k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket32k.setDescription('The number of deduplication misses with size between 16k and 32k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket64k.setDescription('The number of deduplication misses with size between 32k and 64k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket128k.setDescription('The number of deduplication misses with size between 64k and 128k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket256k.setDescription('The number of deduplication misses with size between 128k and 256k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket512k.setDescription('The number of deduplication misses with size between 256k and 512k bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucket1m.setDescription('The number of deduplication misses with size between 512k and 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupInMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupInMissHistBucketLarge.setDescription('The number of deduplication misses with size more than 1m bytes for IN towards LAN')
ltmIsessionProfileStatDedupOutHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHits.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHits.setDescription('The number of deduplication hits for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitBytes.setDescription('The number of deduplication hit bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1k.setDescription('The number of deduplication hits with size less than 1k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket2k.setDescription('The number of deduplication hits with size between 1k and 2k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket4k.setDescription('The number of deduplication hits with size between 2k and 4k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket8k.setDescription('The number of deduplication hits with size between 4k and 8k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket16k.setDescription('The number of deduplication hits with size between 8k and 16k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket32k.setDescription('The number of deduplication hits with size between 16k and 32k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket64k.setDescription('The number of deduplication hits with size between 32k and 64k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket128k.setDescription('The number of deduplication hits with size between 64k and 128k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket256k.setDescription('The number of deduplication hits with size between 128k and 256k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket512k.setDescription('The number of deduplication hits with size between 256k and 512k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucket1m.setDescription('The number of deduplication hits with size between 512k and 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutHitHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutHitHistBucketLarge.setDescription('The number of deduplication hits with size more than 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMisses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMisses.setDescription('The number of deduplication misses for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissBytes.setDescription('The number of deduplication misses bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket1k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 79), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1k.setDescription('The number of deduplication misses with size less than 1k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket2k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket2k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket2k.setDescription('The number of deduplication misses with size between 1k and 2k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket4k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket4k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket4k.setDescription('The number of deduplication misses with size between 2k and 4k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket8k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket8k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket8k.setDescription('The number of deduplication misses with size between 4k and 8k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket16k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket16k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket16k.setDescription('The number of deduplication misses with size between 8k and 16k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket32k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket32k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket32k.setDescription('The number of deduplication misses with size between 16k and 32k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket64k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket64k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket64k.setDescription('The number of deduplication misses with size between 32k and 64k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket128k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket128k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket128k.setDescription('The number of deduplication misses with size between 64k and 128k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket256k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket256k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket256k.setDescription('The number of deduplication misses with size between 128k and 256k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket512k = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket512k.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket512k.setDescription('The number of deduplication misses with size between 256k and 512k bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucket1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1m.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucket1m.setDescription('The number of deduplication misses with size between 512k and 1m bytes for OUT towards WAN')
ltmIsessionProfileStatDedupOutMissHistBucketLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucketLarge.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatDedupOutMissHistBucketLarge.setDescription('The number of deduplication misses with size more than 1m bytes for OUT towards WAN')
ltmIsessionProfileStatOutgoingConnsIdleCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 91), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleCur.setDescription('The current number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsIdleMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleMax.setDescription('The maximum number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsIdleTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsIdleTot.setDescription('The total number of outgoing idle connections')
ltmIsessionProfileStatOutgoingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 94), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveCur.setDescription('The current number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveMax.setDescription('The maximum number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsActiveTot.setDescription('The total number of outgoing active connections')
ltmIsessionProfileStatOutgoingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsErrors.setDescription('The number of outgoing connection errors')
ltmIsessionProfileStatOutgoingConnsPassthruTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsPassthruTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatOutgoingConnsPassthruTot.setDescription('The number of outgoing passthrough connections')
ltmIsessionProfileStatIncomingConnsActiveCur = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 99), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveCur.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveCur.setDescription('The current number of incoming active connections')
ltmIsessionProfileStatIncomingConnsActiveMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveMax.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveMax.setDescription('The maximum number of incoming active connections')
ltmIsessionProfileStatIncomingConnsActiveTot = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveTot.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsActiveTot.setDescription('The total number of incoming active connections')
ltmIsessionProfileStatIncomingConnsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatIncomingConnsErrors.setDescription('The number of incoming connection errors')
ltmIsessionProfileStatBzip2InUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InUses.setDescription('The number of uses BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InErrors.setDescription('The number of errors in use BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesOpt.setDescription('The number of opt bytes BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2InBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2InBytesRaw.setDescription('The number of raw bytes BZIP2 compression for IN towards LAN')
ltmIsessionProfileStatBzip2OutUses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutUses.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutUses.setDescription('The number of uses BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutErrors.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutErrors.setDescription('The number of errors in use BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutBytesOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesOpt.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesOpt.setDescription('The number of opt bytes BZIP2 compression for OUT towards WAN')
ltmIsessionProfileStatBzip2OutBytesRaw = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 21, 2, 3, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesRaw.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatBzip2OutBytesRaw.setDescription('The number of raw bytes BZIP2 compression for OUT towards WAN')
ltmXmlProfileXpathQueriesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesNumber.setDescription('The number of ltmXmlProfileXpathQueries entries in the table.')
ltmXmlProfileXpathQueriesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2), )
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesTable.setDescription('A table containing information of XPath queries in xml profiles.')
ltmXmlProfileXpathQueriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"))
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesEntry.setDescription('Columns in the ltmXmlProfileXpathQueries Table')
ltmXmlProfileXpathQueriesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesName.setDescription('The name of an xml profile.')
ltmXmlProfileXpathQueriesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesIndex.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesIndex.setDescription('The index of XPath queries for the specified xml profile.')
ltmXmlProfileXpathQueriesString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesString.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesString.setDescription('The XPath query for the specified profile.')
ltmXmlProfileNamespaceMappingsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsNumber.setDescription('The number of ltmXmlProfileNamespaceMappings entries in the table.')
ltmXmlProfileNamespaceMappingsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2), )
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsTable.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsTable.setDescription('A table containing information of namespace mappings in xml profiles.')
ltmXmlProfileNamespaceMappingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"))
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsEntry.setDescription('Columns in the ltmXmlProfileNamespaceMappings Table')
ltmXmlProfileNamespaceMappingsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsName.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsName.setDescription('The name of an xml profile.')
ltmXmlProfileNamespaceMappingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsIndex.setDescription('The index of Namespace Mappings for the specified xml profile.')
ltmXmlProfileNamespaceMappingsMappingPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingPrefix.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingPrefix.setDescription('The Namespace Mapping Prefix for the specified profile.')
ltmXmlProfileNamespaceMappingsMappingNamespace = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 13, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingNamespace.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsMappingNamespace.setDescription('The Namespace Mapping Namespace for the specified profile.')
ltmHttpCompressionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileNumber.setDescription('The number of ltmHttpCompressionProfile entries in the table.')
ltmHttpCompressionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2), )
if mibBuilder.loadTexts: ltmHttpCompressionProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileTable.setDescription('A table containing information of HTTP Compression profiles.')
ltmHttpCompressionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileEntry.setDescription('Columns in the ltmHttpCompressionProfile Table')
ltmHttpCompressionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileName.setDescription('The name of a HTTP compression profile.')
ltmHttpCompressionProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmHttpCompressionProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmHttpCompressionProfileSelective = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileSelective.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileSelective.setDescription('The state that specifies whether selective compression is enabled.')
ltmHttpCompressionProfileMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileMinSize.setDescription('The value that specifies the minimum length of the server \n\t\tresponses (in bytes) to be considered acceptable for compression.')
ltmHttpCompressionProfileBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBufferSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileBufferSize.setDescription("The value that specifies the maximum number of uncompressed bytes \n\t\tthat the compression proxy will buffer before it decides whether or \n\t\tnot to compress the server's response, in case the server's response \n\t\theaders don't specify the content length of the response.")
ltmHttpCompressionProfileVaryHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileVaryHeader.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileVaryHeader.setDescription("The state that specifies whether to insert the header \n\t\t'Vary: Accept-Encoding' in the server response for responses that \n\t\thave been compressed. If the 'Vary:' header already exists in the \n\t\tserver response, then the value 'Accept-Encoding' will be appended to it.")
ltmHttpCompressionProfileAllowHttp10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileAllowHttp10.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileAllowHttp10.setDescription('The state that specifies whether to allow compression on responses \n\t\tto HTTP 1.0 requests.')
ltmHttpCompressionProfileGzipMemlevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipMemlevel.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipMemlevel.setDescription('The amount of memory that the proxy will use when doing compression. \n\t\tIt must be an integer no less than 1 and no greater than 9. Higher \n\t\tvalues produce faster compression at the expense of more memory usage. \n\t\tThe default memory level will be 8.')
ltmHttpCompressionProfileGzipWindowsize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipWindowsize.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipWindowsize.setDescription('The number of bits in the window size that the compression proxy \n\t\twill use when compressing the server response. It should be an integer \n\t\tno less than 8 and no greater than 15. Higher values produce better \n\t\tcompression ratios at the expense of more memory usage. \n\t\tThe default window size will be 15.')
ltmHttpCompressionProfileGzipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipLevel.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGzipLevel.setDescription('The speed of compression that is applied to the response. Minimum\n\t\tvalue is 1, maximum is 9. The lower numbers give faster compression \n\t\twith lower ratios, and higher numbers give slower compression with \n\t\thigher ratios.')
ltmHttpCompressionProfileKeepAcceptEncoding = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileKeepAcceptEncoding.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileKeepAcceptEncoding.setDescription('The state of the option to keep client-encoding header.')
ltmHttpCompressionProfileBrowserWorkarounds = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileBrowserWorkarounds.setStatus('deprecated')
if mibBuilder.loadTexts: ltmHttpCompressionProfileBrowserWorkarounds.setDescription("Deprecated! The option to control whether or not to disable compression for \n\t\tknown browsers that cannot handle certain types of compressed \n\t\tresponses properly. If it's true, compression for known browsers \n\t\twill be disabled.")
ltmHttpCompressionProfileCpusaver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaver.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaver.setDescription('The state indicating whether CPU saving mode is enable or not\n\t\twhen doing compression.')
ltmHttpCompressionProfileCpusaverHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverHigh.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverHigh.setDescription('The CPU saver high threshold. When CPU utilization exceeds this value,\n\t\tcompression is switched to NULL compression.')
ltmHttpCompressionProfileCpusaverLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverLow.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileCpusaverLow.setDescription('The CPU saver low threshold. When CPU utilization drops below\n\t\tthis value, compression is switched to full throttle.')
ltmHttpCompressionProfilePreferredMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deflate", 0), ("gzip", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfilePreferredMethod.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfilePreferredMethod.setDescription('The option for preferred compression method.')
ltmHttpcompUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclNumber.setDescription('The number of ltmHttpCompressionProfileUriIncl entries in the table.')
ltmHttpcompUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2), )
if mibBuilder.loadTexts: ltmHttpcompUriInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe request URI part of the client requests during compression. \n\t\tA match must be found in at least one of the 'include' fields.")
ltmHttpcompUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclEntry.setDescription('Columns in the ltmHttpcompUriIncl Table')
ltmHttpcompUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclIndex.setDescription("The index of the regular expression used to match the request \n\t\tURI part of the client requests during compression in \n\t\t'include' fields for the specified HTTP Compression profile.")
ltmHttpcompUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriInclUri.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclUri.setDescription("The regular expression used to match the request URI part \n\t\tof the client requests during compression in 'include' fields \n\t\tfor the specified HTTP Compression profile.")
ltmHttpcompUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclNumber.setDescription('The number of ltmHttpCompressionProfileUriExcl entries in the table.')
ltmHttpcompUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2), )
if mibBuilder.loadTexts: ltmHttpcompUriExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe request URI part of the client requests during compression. \n\t\tA match must be found in at least one of the 'exclude' fields.")
ltmHttpcompUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompUriExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclEntry.setDescription('Columns in the ltmHttpcompUriExcl Table')
ltmHttpcompUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclIndex.setDescription("The index of the regular expression used to match the request \n\t\tURI part of the client requests during compression in \n\t\t'exclude' fields for the specified HTTP Compression profile.")
ltmHttpcompUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompUriExclUri.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclUri.setDescription("The regular expression used to match the request URI part \n\t\tof the client requests during compression in 'exclude' fields \n\t\tfor the specified HTTP Compression profile.")
ltmHttpcompContTypeInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclNumber.setDescription('The number of ltmHttpCompressionProfileContTypeIncl entries in the table.')
ltmHttpcompContTypeInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2), )
if mibBuilder.loadTexts: ltmHttpcompContTypeInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe MIME types in the server response's 'Content-Type:' headers. \n\t\tA match must be found in at least one of the 'include' fields.")
ltmHttpcompContTypeInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclEntry.setDescription('Columns in the ltmHttpcompContTypeIncl Table')
ltmHttpcompContTypeInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompContTypeInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclIndex.setDescription("The index of the regular expression to match the MIME types in the \n\t        server response's 'Content-Type:' headers in 'include' fields for \n\t\tthe specified HTTP Compression profile.")
ltmHttpcompContTypeInclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeInclContentType.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclContentType.setDescription("The regular expression used to match the MIME types in the server \n\t\tresponse's 'Content-Type:' headers in 'include' fields for the\n\t\tspecified HTTP Compression profile.")
ltmHttpcompContTypeExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclNumber.setDescription('The number of ltmHttpCompressionProfileContTypeExcl entries in the table.')
ltmHttpcompContTypeExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2), )
if mibBuilder.loadTexts: ltmHttpcompContTypeExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclTable.setDescription("A table containing information of regular expressions used to match \n\t\tthe MIME types in the server response's 'Content-Type:' headers. \n\t\tA match must be found in at least one of the 'exclude' fields.")
ltmHttpcompContTypeExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"))
if mibBuilder.loadTexts: ltmHttpcompContTypeExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclEntry.setDescription('Columns in the ltmHttpcompContTypeExcl Table')
ltmHttpcompContTypeExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclName.setDescription('The name of a HTTP Compression profile.')
ltmHttpcompContTypeExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclIndex.setDescription("The index of the regular expression to match the MIME types in the \n\t        server response's 'Content-Type:' headers in 'exclude' fields for \n\t\tthe specified HTTP Compression profile.")
ltmHttpcompContTypeExclContentType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpcompContTypeExclContentType.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclContentType.setDescription("The regular expression used to match the MIME types in the server \n\t\tresponse's 'Content-Type:' headers in 'exclude' fields for the\n\t\tspecified HTTP Compression profile.")
ltmHttpCompressionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmHttpCompressionProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpCompressionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNumber.setDescription('The number of ltmHttpCompressionProfileStat entries in the table.')
ltmHttpCompressionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3), )
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatTable.setDescription('A table containing statistic information of HTTP Compression profiles.')
ltmHttpCompressionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"))
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatEntry.setDescription('Columns in the ltmHttpCompressionProfileStat Table')
ltmHttpCompressionProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatName.setDescription('The name of a HTTP Compression profile.')
ltmHttpCompressionProfileStatPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPrecompressBytes.setDescription('The number of response bytes before compression has taken place.')
ltmHttpCompressionProfileStatPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPostcompressBytes.setDescription('The number of response bytes after compression has taken place.')
ltmHttpCompressionProfileStatNullCompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNullCompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatNullCompressBytes.setDescription('The number of bytes subjected to NULL compression (for license enforcement).')
ltmHttpCompressionProfileStatHtmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: HTML.')
ltmHttpCompressionProfileStatHtmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatHtmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: HTML.')
ltmHttpCompressionProfileStatCssPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: CSS.')
ltmHttpCompressionProfileStatCssPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatCssPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: CSS.')
ltmHttpCompressionProfileStatJsPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Javascript.')
ltmHttpCompressionProfileStatJsPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatJsPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Javascript.')
ltmHttpCompressionProfileStatXmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: XML.')
ltmHttpCompressionProfileStatXmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatXmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: XML.')
ltmHttpCompressionProfileStatSgmlPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: SGML.')
ltmHttpCompressionProfileStatSgmlPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatSgmlPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: SGML.')
ltmHttpCompressionProfileStatPlainPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Plain.')
ltmHttpCompressionProfileStatPlainPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatPlainPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Plain.')
ltmHttpCompressionProfileStatOctetPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpCompressionProfileStatOctetPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOctetPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Octet stream.')
ltmHttpCompressionProfileStatImagePrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Images.')
ltmHttpCompressionProfileStatImagePostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatImagePostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Images.')
ltmHttpCompressionProfileStatVideoPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Video files.')
ltmHttpCompressionProfileStatVideoPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatVideoPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Video files.')
ltmHttpCompressionProfileStatAudioPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: Audio files.')
ltmHttpCompressionProfileStatAudioPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatAudioPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: Audio files.')
ltmHttpCompressionProfileStatOtherPrecompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPrecompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPrecompressBytes.setDescription('The number of pre-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmHttpCompressionProfileStatOtherPostcompressBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 22, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPostcompressBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatOtherPostcompressBytes.setDescription('The number of post-compressed bytes for the MIME-Types: other than \n\t\tHTML, CSS, Javascript, XML, SGML, Plain, Images, Video files, \n\t\tAudio files.')
ltmWebAccelerationProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileNumber.setDescription('The number of ltmWebAccelerationProfile entries in the table.')
ltmWebAccelerationProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2), )
if mibBuilder.loadTexts: ltmWebAccelerationProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileTable.setDescription('A table containing information of Web Acceleration profiles.')
ltmWebAccelerationProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileEntry.setDescription('Columns in the ltmWebAccelerationProfile Table')
ltmWebAccelerationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileName.setDescription('The name of a Web Acceleration profile.')
ltmWebAccelerationProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmWebAccelerationProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmWebAccelerationProfileCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheSize.setDescription("The maximum cache size in MB's.")
ltmWebAccelerationProfileCacheMaxEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxEntries.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxEntries.setDescription('The maximum cache entries.')
ltmWebAccelerationProfileCacheMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxAge.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheMaxAge.setDescription('The maximum age of cached object.')
ltmWebAccelerationProfileCacheObjectMinSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMinSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMinSize.setDescription('The minimum size requirement for cached object in bytes.')
ltmWebAccelerationProfileCacheObjectMaxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMaxSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheObjectMaxSize.setDescription('The maximum size limitation for cached object in bytes.')
ltmWebAccelerationProfileCacheIgnoreClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("maxage", 1), ("all", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheIgnoreClient.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheIgnoreClient.setDescription('The state that determine whether cache ignores client cache.')
ltmWebAccelerationProfileCacheAgingRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheAgingRate.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheAgingRate.setDescription('The aging rate for the cache.')
ltmWebAccelerationProfileCacheInsertAgeHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheInsertAgeHeader.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileCacheInsertAgeHeader.setDescription('The mode that indicates whether to insert the Age headers.')
ltmWebaccCacheUriExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclNumber.setDescription('The number of ltmWebAccelerationProfileUriExcl entries in the table.')
ltmWebaccCacheUriExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclTable.setDescription('A table containing information of excludes URIs in \n\t    Web Acceleration profiles.')
ltmWebaccCacheUriExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclEntry.setDescription('Columns in the ltmWebaccCacheUriExcl Table')
ltmWebaccCacheUriExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclIndex.setDescription('The index of exclude URI for the specified profile.')
ltmWebaccCacheUriExclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriExclUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclUri.setDescription('The exclude URI for the specified profile.')
ltmWebaccCacheUriInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclNumber.setDescription('The number of ltmWebAccelerationProfileUriIncl entries in the table.')
ltmWebaccCacheUriInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclTable.setDescription('A table containing information of includes URI in Web Acceleration\n\t    profiles.')
ltmWebaccCacheUriInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclEntry.setDescription('Columns in the ltmWebaccCacheUriIncl Table')
ltmWebaccCacheUriInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclIndex.setDescription('The index of include URI for the specified profile.')
ltmWebaccCacheUriInclUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriInclUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclUri.setDescription('The include URI for the specified profile.')
ltmWebaccCacheUriPinNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinNumber.setDescription('The number of ltmWebAccelerationProfileUriPin entries in the table.')
ltmWebaccCacheUriPinTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriPinTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinTable.setDescription('A table containing information of pinned URIs in Web Acceleration profiles.')
ltmWebaccCacheUriPinEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriPinEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinEntry.setDescription('Columns in the ltmWebaccCacheUriPin Table')
ltmWebaccCacheUriPinName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriPinIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinIndex.setDescription('The index of pinned URI for the specified profile.')
ltmWebaccCacheUriPinUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 4, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriPinUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinUri.setDescription('The pinned URI for the specified profile.')
ltmWebAccelerationProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmWebAccelerationProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmWebAccelerationProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatNumber.setDescription('The number of ltmWebAccelerationProfileStat entries in the table.')
ltmWebAccelerationProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3), )
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatTable.setDescription('A table containing statistic information of Web Acceleration profiles.')
ltmWebAccelerationProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"))
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatEntry.setDescription('Columns in the ltmWebAccelerationProfileStat Table')
ltmWebAccelerationProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatName.setDescription('The name of a Web Acceleration profile.')
ltmWebAccelerationProfileStatCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHits.setDescription('The number of cache hits.')
ltmWebAccelerationProfileStatCacheMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMisses.setDescription('The number of cache misses, excluding un-cacheable data.')
ltmWebAccelerationProfileStatCacheMissesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissesAll.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissesAll.setDescription('The total number of cache misses.')
ltmWebAccelerationProfileStatCacheHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheHitBytes.setDescription('The number of cache hits in bytes.')
ltmWebAccelerationProfileStatCacheMissBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytes.setDescription('The number of cache misses in bytes, excluding un-cacheable data.')
ltmWebAccelerationProfileStatCacheMissBytesAll = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytesAll.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheMissBytesAll.setDescription('The total number of cache misses in bytes.')
ltmWebAccelerationProfileStatCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheSize.setDescription('The current cache size (in bytes).')
ltmWebAccelerationProfileStatCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheCount.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheCount.setDescription('The number of items stored in cache.')
ltmWebAccelerationProfileStatCacheEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatCacheEvictions.setDescription('The number of cache evictions.')
ltmWebAccelerationProfileStatInterStripeHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHits.setDescription('The number of inter-stripe cache hits.')
ltmWebAccelerationProfileStatInterStripeMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeMisses.setDescription('The number of inter-stripe cache misses.')
ltmWebAccelerationProfileStatInterStripeHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeHitBytes.setDescription('The number of inter-stripe cache hits in bytes.')
ltmWebAccelerationProfileStatInterStripeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeSize.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeSize.setDescription('The current inter-stripe cache size (in bytes).')
ltmWebAccelerationProfileStatInterStripeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeCount.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeCount.setDescription('The number of items stored in inter-stripe cache.')
ltmWebAccelerationProfileStatInterStripeEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatInterStripeEvictions.setDescription('The number of inter-stripe cache evictions.')
ltmWebAccelerationProfileStatRemoteHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHits.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHits.setDescription('The number of remote cache hits.')
ltmWebAccelerationProfileStatRemoteMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteMisses.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteMisses.setDescription('The number of remote cache misses.')
ltmWebAccelerationProfileStatRemoteHitBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 5, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHitBytes.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatRemoteHitBytes.setDescription('The number of remote cache hits in bytes.')
ltmRstCauseStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRstCauseStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatResetStats.setDescription('The action to reset resettable statistics data in ltmRstCauseStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmRstCauseStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatNumber.setDescription('The number of ltmRstCauseStat entries in the table.')
ltmRstCauseStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3), )
if mibBuilder.loadTexts: ltmRstCauseStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatTable.setDescription('A table containing statistics for TCP/IP reset (RST) causes.')
ltmRstCauseStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"))
if mibBuilder.loadTexts: ltmRstCauseStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatEntry.setDescription('Columns in the ltmRstCauseStat Table')
ltmRstCauseStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatIndex.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatIndex.setDescription('The index of cause of TCP/IP reset.')
ltmRstCauseStatRstCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatRstCause.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatRstCause.setDescription('The cause for TCP/IP reset (RST).')
ltmRstCauseStatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 11, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRstCauseStatCount.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatCount.setDescription('The count for each TCP/IP reset (RST) cause.')
ltmWebaccCacheUriOverNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverNumber.setDescription('The number of ltmWebAccelerationProfileUriOver entries in the table.')
ltmWebaccCacheUriOverTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2), )
if mibBuilder.loadTexts: ltmWebaccCacheUriOverTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverTable.setDescription('A table containing information of include override URI in Web Acceleration profiles.')
ltmWebaccCacheUriOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"))
if mibBuilder.loadTexts: ltmWebaccCacheUriOverEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverEntry.setDescription('Columns in the ltmWebaccCacheUriOver Table')
ltmWebaccCacheUriOverName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverName.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverName.setDescription('The name of a Web Acceleration profile.')
ltmWebaccCacheUriOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverIndex.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverIndex.setDescription('The index of include override URI for the specified profile.')
ltmWebaccCacheUriOverUri = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 23, 6, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebaccCacheUriOverUri.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverUri.setDescription('The include override URI for the specified profile.')
ltmDnsCacheNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheNumber.setDescription('The number of ltmDnsCache entries in the table.')
ltmDnsCacheTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2), )
if mibBuilder.loadTexts: ltmDnsCacheTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheTable.setDescription('A table containing information of DNS cache.')
ltmDnsCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheEntry.setDescription('Columns in the ltmDnsCache Table')
ltmDnsCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheName.setDescription('The name of DNS cache.')
ltmDnsCacheType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("resolver", 0), ("validatingResolver", 1), ("transparentResolver", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheType.setDescription('The type of DNS cache.\n\t\t resolver - configures a DNS cache with a resolver on the BIG-IP system;\n\t\t validatingResolver - configures a DNS cache with a resolver and\n\t\t validator on the BIG-IP system;\n\t\t transparentResolver - configures a DNS cache without a resolver\n\t\t on the BIG-IP system.')
ltmDnsCacheMsgCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMsgCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMsgCacheSize.setDescription('The number of bytes allocated to the message cache. The default\n\t\tvalue is 1m. Relevant to resolver, validatingResolver, and\n\t\ttransparentResolver types.')
ltmDnsCacheRrsetCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRrsetCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRrsetCacheSize.setDescription('The number of bytes allocated to the resource records set cache.\n\t\tThe default value is 10m. Relevant to resolver, validatingResolver,\n\t\tand transparentResolver types.')
ltmDnsCacheAnswerDefaultZones = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAnswerDefaultZones.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheAnswerDefaultZones.setDescription('The state indicating whether or not the resolver answers queries for \n\t\tdefault zones: localhost, reverse 127.0.0.1 and ::1, and AS112 zones.\n\t\tThe default value is no. Relevant to resolver, validatingResolver,\n\t\tand transparentResolver types.')
ltmDnsCacheUseIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv4.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseIpv4.setDescription('The state indicating whether or not the resolver is enabled to \n\t\tsend queries to IPv4 addresses. The default value is yes. Relevant\n\t\tto resolver and validatingResolver types.')
ltmDnsCacheUseIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseIpv6.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseIpv6.setDescription('The state indicating whether or not the resolver is enabled to \n\t\tsend queries to IPv6 addresses. The default value is yes. Relevant\n\t\tto resolver and validatingResolver types.')
ltmDnsCacheUseUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseUdp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseUdp.setDescription('The state indicating whether or not the resolver is enabled to \n\t\tsend queries over UDP. The default value is yes. Relevant to\n\t\tresolver and validatingResolver types.')
ltmDnsCacheUseTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUseTcp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUseTcp.setDescription('The state indicating whether or not the resolver is enabled to \n\t\tsend queries over TCP. The default value is yes. Relevant to\n\t\tresolver and validatingResolver types.')
ltmDnsCacheNameserverCacheCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheNameserverCacheCount.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheNameserverCacheCount.setDescription('The number of DNS name-servers for which connection and capability \n\t\tdata is cached. The default value is 16k. Relevant to resolver and\n\t\tvalidatingResolver types.')
ltmDnsCacheMaxConcurrentTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentTcp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentTcp.setDescription('The maximum number of concurrent TCP flows used by the resolver. \n\t\tThe default value is 20. Relevant to resolver and validatingResolver\n\t\ttypes.')
ltmDnsCacheMaxConcurrentUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentUdp.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentUdp.setDescription('The maximum number of concurrent UDP flows used by the resolver. \n\t\tThe default value is 8192. Relevant to resolver and\n\t\tvalidatingResolver types.')
ltmDnsCacheUnwantedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheUnwantedThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheUnwantedThreshold.setDescription('The threshold count of unsolicited query replies which triggers \n\t\tan alert (potential DOS attack underway). The default value is\n\t\tzero (or off). Relevant to resolver and validatingResolver types.')
ltmDnsCacheRouteDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 14), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRouteDomainName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRouteDomainName.setDescription('The name of the route domain used for resolver outbound traffic. \n\t\tThe default value is the default route domain. Relevant to resolver\n\t\tand validatingResolver types.')
ltmDnsCacheIgnoreCd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheIgnoreCd.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheIgnoreCd.setDescription('The state indicating whether or not the validatingResolver ignores\n\t\tclient queries setting of checking-disabled and performs validation\n\t\tanyway and only returns secure answers. The default value is no.\n\t\tRelevant to validatingResolver type.')
ltmDnsCachePrefetchKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCachePrefetchKey.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCachePrefetchKey.setDescription('The state indicating whether or not the validatingResolver fetches\n\t\tDNSKEY early in validation process. The default value is yes.\n\t\tRelevant to validatingResolver type.')
ltmDnsCacheKeyCacheSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheKeyCacheSize.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheKeyCacheSize.setDescription('The number of bytes allocated to the DNSKEY cache. The default \n\t\tvalue is 1m. Relevant to validatingResolver type.')
ltmDnsCacheRandomizeQueryNameCase = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheRandomizeQueryNameCase.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheRandomizeQueryNameCase.setDescription('The state indicating whether or not the resolver is enabled to randomize\n\t        the case of query names. The default value is yes. Relevant to resolver\n\t        and validatingResolver types.')
ltmDnsCacheMaxConcurrentQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheMaxConcurrentQueries.setDescription('The maximum number of concurrent distinct queries used\n\t        by the resolver. A query is identified by query name, type and class.\n\t        If the number of distinct queries exceeds this limit, the resolver\n\t        will try to find a query from the queue which arrives the earliest.\n\t        Replace it with the new query if it has been in the queue longer than\n\t        the allowed time. The default value is 1024.')
ltmDnsCacheAllowedQueryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheAllowedQueryTime.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheAllowedQueryTime.setDescription('The time allowed for a query to stay in the queue before replaced by\n\t        a new query when the number of concurrent distinct queries exceeds\n\t        the limit. The default value is 200 milliseconds.')
ltmDnsCacheStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsCacheStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatResetStats.setDescription('The action to reset resettable statistics data in ltmDnsCacheStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsCacheStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNumber.setDescription('The number of ltmDnsCacheStat entries in the table.')
ltmDnsCacheStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3), )
if mibBuilder.loadTexts: ltmDnsCacheStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTable.setDescription('A table containing statistics information of DNS cache.')
ltmDnsCacheStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"))
if mibBuilder.loadTexts: ltmDnsCacheStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatEntry.setDescription('Columns in the ltmDnsCacheStat Table')
ltmDnsCacheStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatName.setDescription('The name of DNS cache.')
ltmDnsCacheStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatQueries.setDescription('The total number of queries.')
ltmDnsCacheStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatResponses.setDescription('The total number of responses.')
ltmDnsCacheStatSync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSync.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSync.setDescription('The total number of synchronous responses.')
ltmDnsCacheStatAsync = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatAsync.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatAsync.setDescription('The total number of asynchronous responses.')
ltmDnsCacheStatFailureResolv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureResolv.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureResolv.setDescription('The total number of internal resolution failures.')
ltmDnsCacheStatFailureCf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureCf.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureCf.setDescription('The total number of internal connection failures.')
ltmDnsCacheStatFailureServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureServer.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureServer.setDescription('The total number of server core failures.')
ltmDnsCacheStatFailureSend = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFailureSend.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFailureSend.setDescription('The total number of response send failures.')
ltmDnsCacheStatMsgHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgHits.setDescription('The number of complete message cache hits.')
ltmDnsCacheStatMsgMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgMisses.setDescription('The number of complete message cache misses.')
ltmDnsCacheStatMsgInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgInserts.setDescription('The number of complete message cache inserts.')
ltmDnsCacheStatMsgUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgUpdates.setDescription('The number of complete message cache updates.')
ltmDnsCacheStatMsgEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatMsgEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatMsgEvictions.setDescription('The number of complete message cache evictions.')
ltmDnsCacheStatRrsetHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetHits.setDescription('The number of resource record set cache hits.')
ltmDnsCacheStatRrsetMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetMisses.setDescription('The number of resource record set cache misses.')
ltmDnsCacheStatRrsetInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetInserts.setDescription('The number of resource record set cache inserts.')
ltmDnsCacheStatRrsetUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetUpdates.setDescription('The number of resource record set cache updates.')
ltmDnsCacheStatRrsetEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRrsetEvictions.setDescription('The number of resource record set cache evictions.')
ltmDnsCacheStatNameserverHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverHits.setDescription('The number of internet name-server cache hits.')
ltmDnsCacheStatNameserverMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverMisses.setDescription('The number of internet name-server cache misses.')
ltmDnsCacheStatNameserverInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverInserts.setDescription('The number of internet name-server cache inserts.')
ltmDnsCacheStatNameserverUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverUpdates.setDescription('The number of internet name-server cache updates.')
ltmDnsCacheStatNameserverEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatNameserverEvictions.setDescription('The number of internet name-server evictions.')
ltmDnsCacheStatKeyHits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyHits.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyHits.setDescription('The number of DNSSEC key cache hits.')
ltmDnsCacheStatKeyMisses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyMisses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyMisses.setDescription('The number of DNSSEC key cache misses.')
ltmDnsCacheStatKeyInserts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyInserts.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyInserts.setDescription('The number of DNSSEC key cache inserts.')
ltmDnsCacheStatKeyUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyUpdates.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyUpdates.setDescription('The number of DNSSEC key cache updates.')
ltmDnsCacheStatKeyEvictions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatKeyEvictions.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatKeyEvictions.setDescription('The number of DNSSEC key cache evictions.')
ltmDnsCacheStatUdpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesIn.setDescription('The number of UDP bytes received for resolution.')
ltmDnsCacheStatUdpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpBytesOut.setDescription('The number of UDP bytes sent for resolution.')
ltmDnsCacheStatUdpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsIn.setDescription('The number of UDP packets received for resolution.')
ltmDnsCacheStatUdpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpPktsOut.setDescription('The number of UDP packets sent for resolution.')
ltmDnsCacheStatUdpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpCurConns.setDescription('The number of current UDP connections for resolution.')
ltmDnsCacheStatUdpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpMaxConns.setDescription('The number of maximum UDP connections for resolution.')
ltmDnsCacheStatUdpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUdpTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUdpTotConns.setDescription('The total number of UDP connections for resolution.')
ltmDnsCacheStatTcpBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesIn.setDescription('The number of TCP bytes received for resolution.')
ltmDnsCacheStatTcpBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpBytesOut.setDescription('The number of TCP bytes sent for resolution.')
ltmDnsCacheStatTcpPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsIn.setDescription('The number of TCP packets received for resolution.')
ltmDnsCacheStatTcpPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpPktsOut.setDescription('The number of TCP packets sent for resolution.')
ltmDnsCacheStatTcpCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpCurConns.setDescription('The number of current TCP connections for resolution.')
ltmDnsCacheStatTcpMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpMaxConns.setDescription('The number of maximum TCP connections for resolution.')
ltmDnsCacheStatTcpTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatTcpTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatTcpTotConns.setDescription('The total number of TCP connections for resolution.')
ltmDnsCacheStatUnsolicitedReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatUnsolicitedReplies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatUnsolicitedReplies.setDescription('The total number of replies received to queries that were\n\t\tnever sent.')
ltmDnsCacheStatSecUnchecked = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecUnchecked.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecUnchecked.setDescription('The number of DNSSEC unchecked responses.')
ltmDnsCacheStatSecBogus = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecBogus.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecBogus.setDescription('The number of DNSSEC bogus responses.')
ltmDnsCacheStatSecIndeterminate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecIndeterminate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecIndeterminate.setDescription('The number of DNSSEC indeterminate responses.')
ltmDnsCacheStatSecInsecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecInsecure.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecInsecure.setDescription('The number of DNSSEC insecure responses.')
ltmDnsCacheStatSecSecure = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatSecSecure.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatSecSecure.setDescription('The number of DNSSEC secure responses.')
ltmDnsCacheStatFwdQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFwdQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFwdQueries.setDescription('The total number of forward queries received.')
ltmDnsCacheStatFwdResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatFwdResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatFwdResponses.setDescription('The total number of forward responses sent.')
ltmDnsCacheStatRpzRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheStatRpzRewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatRpzRewrites.setDescription('The number of queries rewritten due to response policy.')
ltmDnsProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmDnsProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNumber.setDescription('The number of ltmDnsProfileStat entries in the table.')
ltmDnsProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3), )
if mibBuilder.loadTexts: ltmDnsProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTable.setDescription('A table containing statistics information for DNS profiles.')
ltmDnsProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"))
if mibBuilder.loadTexts: ltmDnsProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatEntry.setDescription('Columns in the ltmDnsProfileStat Table')
ltmDnsProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatName.setDescription('The name of a DNS profile.')
ltmDnsProfileStatQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatQueries.setDescription('The total number of DNS queries.')
ltmDnsProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResponses.setDescription('The total number of DNS responses.')
ltmDnsProfileStatResponsesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatResponsesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatResponsesPerSec.setDescription('The average number of DNS responses per second.')
ltmDnsProfileStatToGtm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToGtm.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToGtm.setDescription('The number of requests sent to GTM.')
ltmDnsProfileStatDnsExpressReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressReqs.setDescription('The number of DNS Express requests.')
ltmDnsProfileStatDnsExpressNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsExpressNotifies.setDescription('The number of DNS Express notifies.')
ltmDnsProfileStatToCache = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToCache.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToCache.setDescription('The number of requests sent to the DNS cache.')
ltmDnsProfileStatToDns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatToDns.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatToDns.setDescription('The number of requests sent to backend DNS.')
ltmDnsProfileStatDns64Reqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Reqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Reqs.setDescription('The number of A requests the system generated and sent.')
ltmDnsProfileStatDns64Rewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Rewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Rewrites.setDescription('The number of A responses translated to AAAA.')
ltmDnsProfileStatDns64Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Failures.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDns64Failures.setDescription('The number of unsuccessful AAAA requests.')
ltmDnsProfileStatHints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHints.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHints.setDescription('The number of hint (Root Nameservers) responses sent.')
ltmDnsProfileStatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRejects.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRejects.setDescription('The number of reject (REFUSED) responses sent.')
ltmDnsProfileStatNoErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNoErrors.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNoErrors.setDescription('The number of NOERROR responses sent.')
ltmDnsProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDrops.setDescription('The number of packets dropped (not sent to GTM, DNS-Express, DNSSEC,\n\t\tDNS64, or Backend DNS (e.g. BIND)).')
ltmDnsProfileStatMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalformed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMalformed.setDescription('The number of malformed packets received.')
ltmDnsProfileStatTclSuspends = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTclSuspends.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTclSuspends.setDescription('The number of TCL suspends.')
ltmDnsProfileStatRecursionDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionDesired.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionDesired.setDescription('The number of queries with RD bit set.')
ltmDnsProfileStatCheckingDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCheckingDisabled.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatCheckingDisabled.setDescription('The number of queries with CD bit set.')
ltmDnsProfileStatEdns0 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatEdns0.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatEdns0.setDescription('The number of queries with EDNS0 bit set.')
ltmDnsProfileStatOpcodeQuery = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeQuery.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeQuery.setDescription('The number of queries whose operation code is QUERY.')
ltmDnsProfileStatOpcodeNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeNotify.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeNotify.setDescription('The number of queries whose operation code is NOTIFY.')
ltmDnsProfileStatOpcodeUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeUpdate.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeUpdate.setDescription('The number of queries whose operation code is UPDATE.')
ltmDnsProfileStatZoneIxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneIxfr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatZoneIxfr.setDescription('The number of queries whose question type is IXFR.')
ltmDnsProfileStatZoneAxfr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatZoneAxfr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatZoneAxfr.setDescription('The number of queries whose question type is AXFR.')
ltmDnsProfileStatAuthoritativeAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthoritativeAnswer.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAuthoritativeAnswer.setDescription('The number of responses with AA bit set.')
ltmDnsProfileStatRecursionAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionAvailable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRecursionAvailable.setDescription('The number of responses with RA bit set.')
ltmDnsProfileStatAuthenticatedData = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAuthenticatedData.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAuthenticatedData.setDescription('The number of responses with AD bit set.')
ltmDnsProfileStatTruncated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTruncated.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTruncated.setDescription('The number of responses with TC bit set.')
ltmDnsProfileStatRcodeNoerror = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNoerror.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNoerror.setDescription('The number of responses whose return code is NOERROR.')
ltmDnsProfileStatRcodeNxdomain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNxdomain.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeNxdomain.setDescription('The number of responses whose return code is NXDOMAIN.')
ltmDnsProfileStatRcodeServfail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeServfail.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeServfail.setDescription('The number of responses whose return code is SERVFAIL.')
ltmDnsProfileStatRcodeRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeRefused.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeRefused.setDescription('The number of responses whose return code is REFUSED.')
ltmDnsProfileStatMalicious = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMalicious.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMalicious.setDescription('The number of malicious packets received.')
ltmDnsProfileStatAReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAReqs.setDescription('The number of A query packets received.')
ltmDnsProfileStatAaaaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAaaaReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAaaaReqs.setDescription('The number of AAAA query packets received.')
ltmDnsProfileStatAnyReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatAnyReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatAnyReqs.setDescription('The number of ANY type query packets received.')
ltmDnsProfileStatCnameReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatCnameReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatCnameReqs.setDescription('The number of CNAME query packets received.')
ltmDnsProfileStatMxReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatMxReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatMxReqs.setDescription('The number of MX query packets received.')
ltmDnsProfileStatNsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNsReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNsReqs.setDescription('The number of NS query packets received.')
ltmDnsProfileStatPtrReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatPtrReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatPtrReqs.setDescription('The number of PTR query packets received.')
ltmDnsProfileStatSoaReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSoaReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatSoaReqs.setDescription('The number of SOA query packets received.')
ltmDnsProfileStatSrvReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatSrvReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatSrvReqs.setDescription('The number of SRV query packets received.')
ltmDnsProfileStatTxtReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatTxtReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatTxtReqs.setDescription('The number of TXT query packets received.')
ltmDnsProfileStatOtherReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOtherReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOtherReqs.setDescription('The number of uncategorized DNS packets received.')
ltmDnsProfileStatDnsEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsEffectiveRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsEffectiveRateLimit.setDescription('The DNS services effective request rate limit.')
ltmDnsProfileStatDnsConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsConfiguredObjects.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsConfiguredObjects.setDescription('Deprecated!\n\t\tDNS services objects are no longer counted, nor does the number of\n\t\tDNS services configured objects affect the licensed rate.')
ltmDnsProfileStatDnsRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatDnsRateRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatDnsRateRejectedRequests.setDescription('The number of DNS services requests rejected due to rate limiter action.')
ltmDnsProfileStatGtmEffectiveRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmEffectiveRateLimit.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmEffectiveRateLimit.setDescription('Deprecated!\n\t\tThe GTM request rate no longer has its own licensed limit.')
ltmDnsProfileStatGtmConfiguredObjects = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmConfiguredObjects.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmConfiguredObjects.setDescription('Deprecated!\n\t\tGTM services objects are no longer counted, nor does the number of\n\t\tGTM services configured objects affect the licensed rate.')
ltmDnsProfileStatGtmRateRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRateRejectedRequests.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRateRejectedRequests.setDescription('Deprecated!\n\t\tThe GTM request rate no longer has its own licensed limit.')
ltmDnsProfileStatGtmRewrites = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRewrites.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGtmRewrites.setDescription('The number of responses modified by GTM.')
ltmDnsProfileStatOpcodeOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeOther.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatOpcodeOther.setDescription('The number of queries whose operation code is uncategorized.')
ltmDnsProfileStatFastDnsQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsQueries.setDescription('The number of queries handled by DNS Rapid Response.')
ltmDnsProfileStatFastDnsResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsResponses.setDescription('The number of responses returned by DNS Rapid Response.')
ltmDnsProfileStatFastDnsAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsAllowed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsAllowed.setDescription('The number of non-matched queries passing through DNS Rapid Response.')
ltmDnsProfileStatFastDnsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsDrops.setDescription('The number of non-matching queries dropped by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespTc = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespTc.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespTc.setDescription('The number of non-matching queries resulting in a truncated response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespNx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNx.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNx.setDescription('The number of non-matching queries resulting in a NXDOMAIN response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespNe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNe.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespNe.setDescription('The number of non-matching queries resulting in a No-Data response by DNS Rapid Response.')
ltmDnsProfileStatFastDnsRespRf = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespRf.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespRf.setDescription('The number of non-matching queries resulting in a REFUSED response by DNS Rapid Response.')
ltmDnsProfileStatHwMalformed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHwMalformed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHwMalformed.setDescription('The number of DNS queries determined to be malformed by hardware.')
ltmDnsProfileStatHwInspected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHwInspected.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHwInspected.setDescription('The number of DNS queries inspected by hardware.')
ltmDnsProfileStatHwCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHwCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHwCacheLookups.setDescription('The number of DNS query match attempts in the hardware response cache.')
ltmDnsProfileStatHwCacheResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatHwCacheResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatHwCacheResponses.setDescription('The number of DNS responses returned from hardware response cache')
ltmDnsProfileStatNaptrReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatNaptrReqs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatNaptrReqs.setDescription('The number of NAPTR query packets received.')
ltmDnsProfileStatRcodeBadvers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeBadvers.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatRcodeBadvers.setDescription('The number of responses whose return code is BADVERS.')
ltmDnsProfileStatFastDnsRespBvers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 14, 2, 3, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespBvers.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatFastDnsRespBvers.setDescription('The number of queries resulting in a BADVERS response by DNS Rapid Response.')
ltmDosProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileNumber.setDescription('The number of ltmDosProfile entries in the table.')
ltmDosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2), )
if mibBuilder.loadTexts: ltmDosProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileTable.setDescription('A table containing information of DoS profile.')
ltmDosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"))
if mibBuilder.loadTexts: ltmDosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileEntry.setDescription('Columns in the ltmDosProfile Table')
ltmDosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileName.setDescription('The name of a DoS profile.')
ltmDosProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmDosProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmDosApplicationNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationNumber.setDescription('The number of ltmDosApplication entries in the table.')
ltmDosApplicationTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2), )
if mibBuilder.loadTexts: ltmDosApplicationTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTable.setDescription('A table containing information of DoS profile Application Security.')
ltmDosApplicationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"))
if mibBuilder.loadTexts: ltmDosApplicationEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationEntry.setDescription('Columns in the ltmDosApplication Table')
ltmDosApplicationProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationTriggerIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTriggerIrule.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTriggerIrule.setDescription('The state indicating whether Application DoS iRule event is triggered or not.')
ltmDosApplicationTpsBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMode.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMode.setDescription('The operation mode of TPS-based anomaly detection .')
ltmDosApplicationLatencyBasedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("transparent", 1), ("blocking", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMode.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMode.setDescription('The operation mode of Latency-based anomaly detection.')
ltmDosApplicationTpsBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpClientSideDefense.setDescription('The state indicating whether Source IP-based client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlClientSideDefense.setDescription('The state indicating whether URL-based client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpRateLimiting.setDescription('The state indicating whether Source IP-based rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlRateLimiting.setDescription('The state indicating whether URL-based rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in IP detection criteria of TPS-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMaximumTps.setDescription('The value that specifies the amount which TPS reached in IP detection criteria of TPS-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedIpMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in IP detection criteria of TPS-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in URL detection criteria of TPS-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMaximumTps.setDescription('The value that specifies the amount which TPS reached in URL detection criteria of TPS-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedUrlMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in URL detection criteria of TPS-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMaximumPreventionDuration.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedMaximumPreventionDuration.setDescription('Deprecated! Replaced by ltmDosApplicationTpsBasedEscalationPeriod and ltmDosApplicationTpsBasedDeescalationPeriod.\n\t\tThe value that specifies the maximum prevention duration (in seconds) in TPS-based anomaly. 0 for unlimited.')
ltmDosApplicationLatencyIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyIncreaseRate.setDescription('The value that specifies the percentage by which latency increased in detection criteria of Latency-based anomaly.')
ltmDosApplicationMaximumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMaximumLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationMaximumLatency.setDescription('The value that specifies the amount which latency reached (in milliseconds) in detection criteria of Latency-based anomaly.')
ltmDosApplicationMinimumLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationMinimumLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationMinimumLatency.setDescription('The value that specifies the minimum latency threshold for detection (in milliseconds) in detection criteria of Latency-based anomaly.')
ltmDosApplicationLatencyBasedIpClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpClientSideDefense.setDescription('The state indicating whether Source IP-based client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedUrlClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlClientSideDefense.setDescription('The state indicating whether URL-based client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedIpRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpRateLimiting.setDescription('The state indicating whether Source IP-based rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedUrlRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlRateLimiting.setDescription('The state indicating whether URL-based rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedIpTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious IP criteria of Latency-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedIpMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious IP criteria of Latency-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedIpMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedIpMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious IP criteria of Latency-based anomaly.\n\t\tIt is only used when Source IP-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious URL criteria of Latency-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious URL criteria of Latency-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedUrlMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedUrlMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious URL criteria of Latency-based anomaly.\n\t\tIt is only used when URL-based client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedMaximumPreventionDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMaximumPreventionDuration.setStatus('deprecated')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedMaximumPreventionDuration.setDescription('Deprecated! Replaced by ltmDosApplicationLatencyBasedEscalationPeriod and ltmDosApplicationLatencyBasedDeescalationPeriod.\n\t\tThe value that specifies the maximum prevention duration (in seconds) in Latency-based anomaly. 0 for unlimited.')
ltmDosApplicationTpsBasedSiteClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteClientSideDefense.setDescription('The state indicating whether Site-wide client side integrity defense in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedSiteRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteRateLimiting.setDescription('The state indicating whether Site-wide rate limiting in TPS-based anomaly is enabled or not.')
ltmDosApplicationTpsBasedSiteTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in Site-wide detection criteria of TPS-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedSiteMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMaximumTps.setDescription('The value that specifies the amount which TPS reached in Site-wide detection criteria of TPS-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedSiteMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedSiteMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in Site-wide detection criteria of TPS-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in TPS-based anomaly, otherwise ignored.')
ltmDosApplicationTpsBasedEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 36), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedEscalationPeriod.setDescription('The value that specifies the escalation period (in seconds) in TPS-based anomaly.')
ltmDosApplicationTpsBasedDeEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedDeEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationTpsBasedDeEscalationPeriod.setDescription('The value that specifies the de-escalation period (in seconds) in TPS-based anomaly.')
ltmDosApplicationLatencyBasedSiteClientSideDefense = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteClientSideDefense.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteClientSideDefense.setDescription('The state indicating whether Site-wide client side integrity defense in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedSiteRateLimiting = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteRateLimiting.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteRateLimiting.setDescription('The state indicating whether Site-wide rate limiting in Latency-based anomaly is enabled or not.')
ltmDosApplicationLatencyBasedSiteTpsIncreaseRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteTpsIncreaseRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteTpsIncreaseRate.setDescription('The value that specifies the percentage by which TPS increased in suspicious Site-wide criteria of Latency-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedSiteMaximumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMaximumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMaximumTps.setDescription('The value that specifies the amount which TPS reached in suspicious Site-wide criteria of Latency-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedSiteMinimumTps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMinimumTps.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedSiteMinimumTps.setDescription('The value that specifies the minimum TPS threshold for detection in suspicious Site-wide criteria of Latency-based anomaly.\n\t\tIt is only used when Site-wide client side integrity defense and/or rate limiting are enabled in Latency-based anomaly, otherwise ignored.')
ltmDosApplicationLatencyBasedEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedEscalationPeriod.setDescription('The value that specifies the escalation period (in seconds) in Latency-based anomaly.')
ltmDosApplicationLatencyBasedDeEscalationPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedDeEscalationPeriod.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationLatencyBasedDeEscalationPeriod.setDescription('The value that specifies the de-escalation period (in seconds) in Latency-based anomaly.')
ltmDosApplicationHeavyUrlProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlProtection.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlProtection.setDescription('The state indicating whether heavy URL protection is enabled or not.')
ltmDosApplicationHeavyUrlAutomaticDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlAutomaticDetection.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlAutomaticDetection.setDescription('The state indicating whether automatic heavy URL detection is enabled or not.')
ltmDosApplicationHeavyUrlLatencyThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 2, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlLatencyThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlLatencyThreshold.setDescription('The value that specifies the latency threshold for automatic heavy URL detection (in milliseconds).')
ltmDosWhiteIpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNumber.setDescription('The number of ltmDosWhiteIp entries in the table.')
ltmDosWhiteIpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2), )
if mibBuilder.loadTexts: ltmDosWhiteIpTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpTable.setDescription('A table containing information of DoS profile Application Security IP address whitelist.')
ltmDosWhiteIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"))
if mibBuilder.loadTexts: ltmDosWhiteIpEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpEntry.setDescription('Columns in the ltmDosWhiteIp Table')
ltmDosWhiteIpParentProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentProfile.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpParentProfile.setDescription('The name of a DoS profile.')
ltmDosWhiteIpParentName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpParentName.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpParentName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosWhiteIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpAddressType.setDescription('The IP address type of ltmDosWhiteIpAddress')
ltmDosWhiteIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpAddress.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpAddress.setDescription('The IP address in the whitelist of the specified DoS profile with Application Security. \n\t\tIt is interpreted within the context of a ltmDosWhiteIpAddressType value.')
ltmDosWhiteIpNetmaskType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmaskType.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNetmaskType.setDescription('The IP address type of ltmDosWhiteIpNetmask')
ltmDosWhiteIpNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 3, 2, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosWhiteIpNetmask.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpNetmask.setDescription('The subnet mask associated with the specified Application DoS profile whitelist IP address.\n\t\tIt is interpreted within the context of a ltmDosWhiteIpNetmaskType value.')
ltmDnsSecurityNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityNumber.setDescription('The number of ltmDnsSecurity entries in the table.')
ltmDnsSecurityTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2), )
if mibBuilder.loadTexts: ltmDnsSecurityTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityTable.setDescription('A table containing information of DNS security.')
ltmDnsSecurityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"))
if mibBuilder.loadTexts: ltmDnsSecurityEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityEntry.setDescription('Columns in the ltmDnsSecurity Table')
ltmDnsSecurityName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityName.setDescription('The name of DNS security profile.')
ltmDnsSecurityQueryTypeInclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityQueryTypeInclusion.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityQueryTypeInclusion.setDescription('The state indicating whether or not the query type filter is\n\t        an enable (inclusion) or a disable (exclusion) list.\n\t        Value 0 (no) implies disable and 1 (yes) is enable.')
ltmDnsSecurityStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsSecurityStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatResetStats.setDescription('The action to reset resettable statistics data in ltmDnsSecurityStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsSecurityStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatNumber.setDescription('The number of ltmDnsSecurityStat entries in the table.')
ltmDnsSecurityStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3), )
if mibBuilder.loadTexts: ltmDnsSecurityStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatTable.setDescription('A table containing statistics information of DNS security.')
ltmDnsSecurityStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"))
if mibBuilder.loadTexts: ltmDnsSecurityStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatEntry.setDescription('Columns in the ltmDnsSecurityStat Table')
ltmDnsSecurityStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatName.setDescription('The name of DNS security profile.')
ltmDnsSecurityStatFilteredDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatFilteredDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatFilteredDrops.setDescription('The total number of dropped DNS packets due to filtering.')
ltmDnsSecurityStatADrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatADrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatADrops.setDescription('The total number of dropped A packets due to filtering.')
ltmDnsSecurityStatAaaaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAaaaDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatAaaaDrops.setDescription('The total number of dropped AAAA packets due to filtering.')
ltmDnsSecurityStatAnyDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatAnyDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatAnyDrops.setDescription('The total number of dropped ANY packets due to filtering.')
ltmDnsSecurityStatCnameDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatCnameDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatCnameDrops.setDescription('The total number of dropped CNAME packets due to filtering.')
ltmDnsSecurityStatMxDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatMxDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatMxDrops.setDescription('The total number of dropped MX packets due to filtering.')
ltmDnsSecurityStatNsDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatNsDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatNsDrops.setDescription('The total number of dropped NS packets due to filtering.')
ltmDnsSecurityStatPtrDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatPtrDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatPtrDrops.setDescription('The total number of dropped PTR packets due to filtering.')
ltmDnsSecurityStatSoaDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSoaDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatSoaDrops.setDescription('The total number of dropped SOA packets due to filtering.')
ltmDnsSecurityStatSrvDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatSrvDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatSrvDrops.setDescription('The total number of dropped SRV packets due to filtering.')
ltmDnsSecurityStatTxtDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatTxtDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatTxtDrops.setDescription('The total number of dropped TXT packets due to filtering.')
ltmDnsSecurityStatOtherDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 4, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsSecurityStatOtherDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatOtherDrops.setDescription('The total number of dropped OTHER packets due to filtering.')
ltmBwcPolicyStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmBwcPolicyStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatResetStats.setDescription('The action to reset resettable statistics data in ltmBwcPolicyStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmBwcPolicyStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatNumber.setDescription('The number of ltmBwcPolicyStat entries in the table.')
ltmBwcPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3), )
if mibBuilder.loadTexts: ltmBwcPolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTable.setDescription('A table containing statistics information of BWC policy.')
ltmBwcPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"))
if mibBuilder.loadTexts: ltmBwcPolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatEntry.setDescription('Columns in the ltmBwcPolicyStat Table')
ltmBwcPolicyStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatName.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatName.setDescription('The name of BWC policy that is configured. There are many types of\n\t        BWC policies. This name is string upto max of string name of policy.')
ltmBwcPolicyStatBytesPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSec.setDescription('The average input bytes/sec over last 4 seconds. These are bytes as\n\t        processed by this policy.')
ltmBwcPolicyStatBytesPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSecOut.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPerSecOut.setDescription('The average output bytes/sec over last 4 seconds. These are bytes\n\t        processed by this policy.')
ltmBwcPolicyStatBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesIn.setDescription('The number of bytes ingress. These are bytes ingress to policy before\n\t        being processed by policy.')
ltmBwcPolicyStatBytesPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPassed.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesPassed.setDescription('The number of bytes passed. These are bytes processed by the policy.')
ltmBwcPolicyStatBytesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatBytesDropped.setDescription('The number of bytes dropped. These are bytes dropped by the policy.')
ltmBwcPolicyStatPacketsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsIn.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsIn.setDescription('The number of packets ingress. These are packets input to the policy\n\t        processing.')
ltmBwcPolicyStatPacketsPassed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPassed.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPassed.setDescription('The number of packets passed. These are packets passed by the policy.')
ltmBwcPolicyStatActivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatActivePolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatActivePolicies.setDescription('The number of current policies. This is active number of current\n\t        policies in system.')
ltmBwcPolicyStatInactivePolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatInactivePolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatInactivePolicies.setDescription('The number of inactive policies created. This is inactive number of\n\t        policies in the system.')
ltmBwcPolicyStatTotalPolicies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTotalPolicies.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTotalPolicies.setDescription('The number of total policies created. This is total number of\n\t        policies in system.')
ltmBwcPolicyStatTimeDataCollected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatTimeDataCollected.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatTimeDataCollected.setDescription('The time since start in seconds. This is the time since the stats\n\t        information has been collected.')
ltmBwcPolicyStatPacketsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPerSec.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPerSec.setDescription('The average input packets/sec over last 4 seconds. These are packets as\n\t        processed by this policy.')
ltmBwcPolicyStatPacketsPerSecOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 13, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPerSecOut.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatPacketsPerSecOut.setDescription('The average output packets/sec over last 4 seconds. These are packets \n\t        processed by this policy.')
ltmDnsQueryFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterNumber.setDescription('The number of ltmDnsQueryFilter entries in the table.')
ltmDnsQueryFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2), )
if mibBuilder.loadTexts: ltmDnsQueryFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterTable.setDescription('A table containing information of DNS query type filtering.')
ltmDnsQueryFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"))
if mibBuilder.loadTexts: ltmDnsQueryFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterEntry.setDescription('Columns in the ltmDnsQueryFilter Table')
ltmDnsQueryFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterName.setDescription('The name of a DNS security profile.')
ltmDnsQueryFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterIndex.setDescription('The index of DNS query type filter for the specified DNS security profile.')
ltmDnsQueryFilterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 249, 250, 251, 252, 253, 254, 255, 256, 65536))).clone(namedValues=NamedValues(("invalid", 0), ("a", 1), ("ns", 2), ("md", 3), ("mf", 4), ("cname", 5), ("soa", 6), ("mb", 7), ("mg", 8), ("mr", 9), ("null", 10), ("wks", 11), ("ptr", 12), ("hinfo", 13), ("minfo", 14), ("mx", 15), ("txt", 16), ("rp", 17), ("afsdb", 18), ("x25", 19), ("isdn", 20), ("rt", 21), ("nsap", 22), ("nsapPtr", 23), ("sg", 24), ("key", 25), ("px", 26), ("gpos", 27), ("aaaa", 28), ("loc", 29), ("nxt", 30), ("eid", 31), ("nimloc", 32), ("srv", 33), ("atma", 34), ("naptr", 35), ("kx", 36), ("cert", 37), ("a6", 38), ("dname", 39), ("sink", 40), ("opt", 41), ("tkey", 249), ("tsig", 250), ("ixfr", 251), ("axfr", 252), ("mailb", 253), ("maila", 254), ("any", 255), ("zxfr", 256), ("max", 65536)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsQueryFilterType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterType.setDescription('The DNS query type value that is either included or excluded\n\t         depending on the query_type_inclusion flag.  Value 0 (no)\n\t         implies disable (exclusion) and 1 (yes) is enable\n\t         (inclusion).')
ltmDnsHeaderFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterNumber.setDescription('The number of ltmDnsHeaderFilter entries in the table.')
ltmDnsHeaderFilterTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2), )
if mibBuilder.loadTexts: ltmDnsHeaderFilterTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterTable.setDescription('A table containing information of DNS header opcode filtering.')
ltmDnsHeaderFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"))
if mibBuilder.loadTexts: ltmDnsHeaderFilterEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterEntry.setDescription('Columns in the ltmDnsHeaderFilter Table')
ltmDnsHeaderFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterName.setDescription('The name of a DNS security profile.')
ltmDnsHeaderFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterIndex.setDescription('The index of DNS header opcode exclusion for the specified DNS security profile.')
ltmDnsHeaderFilterOpcodeExclusion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4, 5))).clone(namedValues=NamedValues(("query", 0), ("iquery", 1), ("status", 2), ("notify", 4), ("update", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsHeaderFilterOpcodeExclusion.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterOpcodeExclusion.setDescription('The DNS header opcode values. Value of 3 is not used.')
ltmLsnPrefixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixNumber.setDescription('The number of ltmLsnPrefix entries in the table.')
ltmLsnPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixTable.setDescription('A table containing information of LSN prefix.')
ltmLsnPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixEntry.setDescription('Columns in the ltmLsnPrefix Table')
ltmLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixAddrType.setDescription('The IP address type of ltmLsnPrefixAddr.')
ltmLsnPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixAddr.setDescription('The IP address of a node. It is interpreted within \n\t\t the context of a ltmLsnPrefixAddrType value.')
ltmLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolNumber.setDescription('The number of ltmLsnPool entries in the table.')
ltmLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2), )
if mibBuilder.loadTexts: ltmLsnPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTable.setDescription('A table containing information of LSN pool.')
ltmLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"))
if mibBuilder.loadTexts: ltmLsnPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolEntry.setDescription('Columns in the ltmLsnPool Table')
ltmLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolName.setDescription('The name of a LSN Pool.')
ltmLsnPoolMemberCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMemberCount.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolMemberCount.setDescription('The total number of members in the specified pool.')
ltmLsnPoolRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolRouteAdvertisement.setDescription('Specifies whether route advertisement is enabled or disabled for \n\t        translated IP addresses.')
ltmLsnPoolMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("napt", 0), ("pba", 1), ("deterministic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolMode.setDescription('NAPT mode provides standard address and port translation\n\t        allowing multiple clients to share the same external address.\n\t    Deterministic mode provides address and port translations \n\t        that can be consistently reversed so that external address\n\t        and port combinations can identify specific clients.')
ltmLsnPoolPersistenceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("address", 1), ("addressPort", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolPersistenceMode.setDescription('Persistence settings for LSN translation entries.\n\t        none: Specifies that there is no persistence for the translation.\n\t        address: Specifies that the translation reuses the port mapping for \n\t            subsequent packets sent from the same internal IP address and port \n\t            to the same external IP address while the mapping is still active, \n\t            regardless of the external port.\n\t        addressPort: Specifies that the translation reuses the port mapping \n\t            for subsequent packets sent from the same internal IP address \n\t            and port to the same external IP address and port while the \n\t            mapping is still active.')
ltmLsnPoolPersistenceTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistenceTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolPersistenceTimeout.setDescription('Maximum time-to-live for inactive translation entries.')
ltmLsnPoolPersistencePrefixLengthIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv4.setStatus('deprecated')
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv4.setDescription('Deprecated! This field is removed.\n\t    Number of significant bits in the client IPv4 address to be used as \n\t        the persistence key.')
ltmLsnPoolPersistencePrefixLengthIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv6.setStatus('deprecated')
if mibBuilder.loadTexts: ltmLsnPoolPersistencePrefixLengthIpv6.setDescription('Deprecated! This field is removed.\n\t    Number of significant bits in the client IPv6 address to be used as \n\t        the persistence key.')
ltmLsnPoolInboundConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("automatic", 1), ("explicit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolInboundConnections.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolInboundConnections.setDescription('If true, will enable inbound connections to translation addresses and ports.')
ltmLsnPoolIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolIcmpEcho.setDescription('If true, will enable icmp-echo requests for translation addresses.')
ltmLsnPoolTranslationPortRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeLow.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeLow.setDescription('Specifies the low end of the range of port numbers available for use with \n\t        translation IP addresses.')
ltmLsnPoolTranslationPortRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeHigh.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolTranslationPortRangeHigh.setDescription('Specifies the high end of the range of port numbers available for use with \n\t        translation IP addresses.')
ltmLsnPoolClientConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolClientConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolClientConnectionLimit.setDescription('Specifies the maximum number of simultaneous translated connections a client or \n\t        subscriber is allowed to have.  A value of zero signifies no limit.')
ltmLsnPoolEgressInterfacesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolEgressInterfacesEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolEgressInterfacesEnabled.setDescription('If true, source address translation is allowed on the interfaces specified in \n\t        the egress-interfaces list.')
ltmLsnPoolLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 15), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolLogPublisher.setDescription('Specifies the name of the log publisher that logs translation events, if any.')
ltmLsnPoolHairpinMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolHairpinMode.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolHairpinMode.setDescription('If enabled, will enable hairpinning for inbound connections.  A hairpin connection between\n\t        two subscribers goes through the NAT device and uses translation addresses so that it \n\t        appears to each subscriber that the other is an external host.')
ltmLsnPoolLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 2, 2, 1, 17), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolLogProfile.setDescription('Specifies the name of the log profile that control the logging of translation events, if any.')
ltmLsnPrefixLsnPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolNumber.setDescription('The number of ltmLsnPrefixLsnPool entries in the table.')
ltmLsnPrefixLsnPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolTable.setDescription('A table containing information of LSN pool prefix.')
ltmLsnPrefixLsnPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolEntry.setDescription('Columns in the ltmLsnPrefixLsnPool Table')
ltmLsnPrefixLsnPoolLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixLsnPoolLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPrefixLsnPoolPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddressType.setDescription('The IP address type of ltmLsnPrefixLsnPoolPrefixAddress.')
ltmLsnPrefixLsnPoolPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolPrefixAddress.setDescription('The IP address of a node. It is interpreted within \n\t        the context of a ltmLsnPrefixLsnPoolPrefixAddressType value.')
ltmLsnPrefixLsnPoolBackupNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupNumber.setDescription('The number of ltmLsnPrefixLsnPoolBackup entries in the table.')
ltmLsnPrefixLsnPoolBackupTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2), )
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupTable.setDescription('A table containing information of LSN pool backup prefix.')
ltmLsnPrefixLsnPoolBackupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"))
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupEntry.setDescription('Columns in the ltmLsnPrefixLsnPoolBackup Table')
ltmLsnPrefixLsnPoolBackupLsnPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPrefixName.setDescription('The name of a LSN prefix node.')
ltmLsnPrefixLsnPoolBackupLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPrefixLsnPoolBackupPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddressType.setDescription('The IP address type of ltmLsnPrefixLsnPoolBackupPrefixAddress.')
ltmLsnPrefixLsnPoolBackupPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 4, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupPrefixAddress.setDescription('The IP address of a node. It is interpreted within \n\t        the context of a ltmLsnPrefixLsnPoolBackupPrefixAddressType value.')
ltmLsnPoolVlanNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanNumber.setDescription('The number of ltmLsnPoolVlan entries in the table.')
ltmLsnPoolVlanTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2), )
if mibBuilder.loadTexts: ltmLsnPoolVlanTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanTable.setDescription('A table containing VLAN information of LSN pool.')
ltmLsnPoolVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"))
if mibBuilder.loadTexts: ltmLsnPoolVlanEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanEntry.setDescription('Columns in the ltmLsnPoolVlan Table')
ltmLsnPoolVlanLsnPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanLsnPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanLsnPoolName.setDescription('The name of a LSN pool.')
ltmLsnPoolVlanVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolVlanVlanName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanVlanName.setDescription('The name of VLAN for LSN pool.')
ltmLsnPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmLsnPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmLsnPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmLsnPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatNumber.setDescription('The number of ltmLsnPoolStat entries in the table.')
ltmLsnPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3), )
if mibBuilder.loadTexts: ltmLsnPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTable.setDescription('A table containing statistic information of LSN pool.')
ltmLsnPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"))
if mibBuilder.loadTexts: ltmLsnPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatEntry.setDescription('Columns in the ltmLsnPoolStat Table')
ltmLsnPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatName.setDescription('The name of a LSN Pool.')
ltmLsnPoolStatTranslationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequests.setDescription('The number of translation requests.')
ltmLsnPoolStatHairpinConnectionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionRequests.setDescription('The number of hairpin connection requests.  A hairpin connection between \n\t        two subscribers goes through the NAT device and uses translation addresses so \n\t        that it appears to each subscriber that the other is an external host.')
ltmLsnPoolStatActiveTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveTranslations.setDescription('The number of active translations.')
ltmLsnPoolStatActiveHairpinConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveHairpinConnections.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveHairpinConnections.setDescription('The number of active hairpin connections.  A hairpin connection between \n\t        two subscribers goes through the NAT device and uses translation addresses so \n\t        that it appears to each subscriber that the other is an external host.')
ltmLsnPoolStatTranslationRequestFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTranslationRequestFailures.setDescription('The number of translation request failures.')
ltmLsnPoolStatPersistenceMappingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPersistenceMappingFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPersistenceMappingFailures.setDescription('The number of persistence mapping translation request failures.')
ltmLsnPoolStatHairpinConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatHairpinConnectionFailures.setDescription('The number of failed hairpin connections.  A hairpin connection failure \n\t        occurs when a subscriber connects to an inbound reservation but a connection \n\t        could not be created.')
ltmLsnPoolStatBackupPoolTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatBackupPoolTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatBackupPoolTranslations.setDescription('The number of translation requests that were served using the backup pool.')
ltmLsnPoolStatLogAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogAttempts.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatLogAttempts.setDescription('The number of logging attempts.')
ltmLsnPoolStatLogFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatLogFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatLogFailures.setDescription('The number of logging attempts that resulted in failure.')
ltmLsnPoolStatTotalEndPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalEndPoints.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalEndPoints.setDescription('The product of the number of IP addresses and the translation port\n\t        range. This is computed when the pool membership or translation\n\t        port range changes.')
ltmLsnPoolStatPcpAnnounceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceRequests.setDescription('The total number of PCP Announce requests received.')
ltmLsnPoolStatPcpAnnounceResponsesUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesUcast.setDescription('The total number of unicast PCP Announce responses transmitted.')
ltmLsnPoolStatPcpAnnounceResponsesMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpAnnounceResponsesMulticast.setDescription('The total number of multicast PCP Announce responses transmitted.')
ltmLsnPoolStatPcpMapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapRequests.setDescription('The total number of PCP Map requests received.')
ltmLsnPoolStatPcpMapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpMapResponses.setDescription('The total number of PCP Map responses transmitted.')
ltmLsnPoolStatPcpPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerRequests.setDescription('The total number of PCP Peer requests received.')
ltmLsnPoolStatPcpPeerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpPeerResponses.setDescription('The total number of PCP Peer responses transmitted.')
ltmLsnPoolStatPcpErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsInvalidRequest.setDescription('The total number of invalid or malformed PCP requests received.')
ltmLsnPoolStatPcpErrorsUnavailableResource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsUnavailableResource.setDescription('The total number of PCP requests received where the server has insufficient \n\t     resources to complete the requested operation.')
ltmLsnPoolStatPcpErrorsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsNotAuthorized.setDescription('The total number of PCP requests that generated (or caused) an\n\t    unauthorized error when attempting to create a mapping.')
ltmLsnPoolStatPcpErrorsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPcpErrorsOther.setDescription('The total number of PCP requests received that resulted in other errors.')
ltmLsnPoolStatActivePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActivePortBlocks.setDescription('The total number of port blocks actively in use.')
ltmLsnPoolStatActiveClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveClientsReachedLimit.setDescription('Total clients who have reached the max port blocks allocated to them.')
ltmLsnPoolStatActiveZombiePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatActiveZombiePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatActiveZombiePortBlocks.setDescription('Total blocks which have reached their lifetime and cannot be used for\n\t     \tnew allocations. They are not yet deleted because there are\n\t     \tconnections using ports in that block.')
ltmLsnPoolStatTotalClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalClientsReachedLimit.setDescription('Total client connections rejected because client hit\n\t        client-block-limit and could not find any free ports in the\n\t        existing blocks.')
ltmLsnPoolStatTotalPortBlockAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocations.setDescription('Total port block allocations.')
ltmLsnPoolStatTotalPortBlockAllocationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockAllocationFailures.setDescription('Total port block allocation failures.')
ltmLsnPoolStatTotalPortBlockDeallocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockDeallocations.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlockDeallocations.setDescription('Total port blocks freed.')
ltmLsnPoolStatTotalZombiePortBlocksCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksCreated.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksCreated.setDescription('Total blocks which have reached their lifetime and cannot be used for\n\t        new allocations. They are not yet deleted because there are\n\t        connections using ports in that block.')
ltmLsnPoolStatTotalZombiePortBlocksDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksDeleted.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlocksDeleted.setDescription('Total zombie blocks deleted after their zombie timeouts. When a zombie\n\t        block is deleted, the connections using them are killed.')
ltmLsnPoolStatTotalZombiePortBlockConnsKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlockConnsKilled.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalZombiePortBlockConnsKilled.setDescription('Total connections killed due to zombie block reaching zombie timeout.')
ltmLsnPoolStatEndPointsString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 34), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatEndPointsString.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatEndPointsString.setDescription('The product of the number of IP addresses and the translation port\n\t        range. This is computed when the pool membership or translation\n\t        port range changes.')
ltmLsnPoolStatTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlocks.setDescription('Deprecated! This field is no longer supported. The total number of port blocks.')
ltmLsnPoolStatPercentFreePortBlocksSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatPercentFreePortBlocksSnmp.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatPercentFreePortBlocksSnmp.setDescription('The percentage of free port blocks.')
ltmLsnPoolStatTotalPortBlocksString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 6, 3, 1, 37), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlocksString.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatTotalPortBlocksString.setDescription('The total number of port blocks.')
ltmSpdyProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileNumber.setDescription('Deprecated!.\n\t\tThe number of ltmSpdyProfile entries in the table.')
ltmSpdyProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2), )
if mibBuilder.loadTexts: ltmSpdyProfileTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileTable.setDescription('Deprecated! A table containing information about the SPDY profile.')
ltmSpdyProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"))
if mibBuilder.loadTexts: ltmSpdyProfileEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileEntry.setDescription('Columns in the ltmSpdyProfile Table')
ltmSpdyProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileName.setDescription('Deprecated! The name of a SPDY profile.')
ltmSpdyProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConfigSource.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileConfigSource.setDescription('Deprecated! The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmSpdyProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileDefaultName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileDefaultName.setDescription('Deprecated! The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmSpdyProfileActivationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("npn", 0), ("always", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileActivationMode.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileActivationMode.setDescription('Deprecated! The manner in which SPDY connections are made.\n\t         npn - TLS Extension, Next Protocol Negotiation is used to decide which\n\t               SPDY protocol is used.\n\t         always - All connections will be assumed to be SPDY connections.\n\t                  Clients that only support HTTP will not be supported.')
ltmSpdyProfilePriorityHandling = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("strict", 0), ("fair", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfilePriorityHandling.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfilePriorityHandling.setDescription('Deprecated! The manner in which streams of different priorities are handled.\n\t         strict - Higher priority streams will be processed to completion\n\t                  before lower priority streams are processed.\n\t         fair - Higher priority streams will use more bandwidth than lower\n\t                priority streams without completely blocking the lower priority\n\t                streams.')
ltmSpdyProfileInsertHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeader.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeader.setDescription('Deprecated! The state indicating whether or not an HTTP header that indicates the\n\t         use of SPDY should be inserted into the request going to the back-end\n\t         server.')
ltmSpdyProfileInsertHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeaderName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileInsertHeaderName.setDescription('Deprecated! The HTTP header inserted into the request going to the back-end server,\n\t         if that functionality is enabled.')
ltmSpdyProfileConcurrentStreamsPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConcurrentStreamsPerConnection.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileConcurrentStreamsPerConnection.setDescription('Deprecated! The maximum amount of concurrent streams allowed per connection.')
ltmSpdyProfileConnectionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileConnectionIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileConnectionIdleTimeout.setDescription('Deprecated! The amount of time, in seconds, a connection is open idly before it is\n\t         shutdown.')
ltmSpdyProfileReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileReceiveWindow.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileReceiveWindow.setDescription('Deprecated! Specifies the size of the receive window in kilobytes. The receive\n\t         window is a mechanism to stall individual upload streams when needed.\n\t         This mechanism is only available for SPDY version 3 connections.')
ltmSpdyProfileFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileFrameSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileFrameSize.setDescription('Deprecated! Specifies the size of the data frames, in bytes, that SPDY will send to\n\t         the client. Larger frame sizes will improve network utilization, but\n\t         may affect concurrency.')
ltmSpdyProfileWriteSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileWriteSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileWriteSize.setDescription('Deprecated! Specifies the total size of combined data frames, in bytes, SPDY will\n\t         send in a single write. This controls the size of the TLS records when\n\t         SPDY is used over SSL. A large write size will cause SPDY to buffer\n\t         more data, but will improve network utilization.')
ltmSpdyProfileCompressionLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionLevel.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileCompressionLevel.setDescription('Deprecated! Specifies the amount of compression to do by default for the headers of\n\t         the specified profiles. The compression level must be between 0 and\n\t         10. Higher numbers correspond to more compression.')
ltmSpdyProfileCompressionWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileCompressionWindowSize.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileCompressionWindowSize.setDescription('Deprecated! Specifies the size of the compression window for the specified profiles in\n\t         kilobytes. The compression window size must be between 1 and 128\n\t         kilobytes.')
ltmSpdyProfileProtocolVersionsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsNumber.setDescription('Deprecated!.\n\t\tThe number of ltmSpdyProfileProtocolVersions entries in the table.')
ltmSpdyProfileProtocolVersionsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2), )
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsTable.setDescription('Deprecated! A table containing information on the supported SPDY protocol\n\t        versions.')
ltmSpdyProfileProtocolVersionsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"))
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsEntry.setDescription('Columns in the ltmSpdyProfileProtocolVersions Table')
ltmSpdyProfileProtocolVersionsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsName.setDescription('Deprecated! The name of a SPDY profile.')
ltmSpdyProfileProtocolVersionsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsIndex.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsIndex.setDescription('Deprecated! The index of the protocol versions used to determine which SPDY \n\t         versions are supported and in what order those versions should be\n\t         prioritized when deciding which version to use. This prioritization is\n\t         only used when the activation mode is set to npn.')
ltmSpdyProfileProtocolVersionsProtocolVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("spdy2", 1), ("spdy3", 2), ("http11", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsProtocolVersions.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsProtocolVersions.setDescription('Deprecated! The SPDY version supported.\n\t         spdy2 - indicates that SPDY version 2 is supported.\n\t         spdy3 - indicates that SPDY version 3 is supported.\n\t         http11 - indicates that HTTP1.1 is supported when SPDY is not\n\t                  supported/requested by a client.')
ltmSpdyProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSpdyProfileStatResetStats.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatResetStats.setDescription('Deprecated!.\n\t\tThe action to reset resettable statistics data in ltmSpdyProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSpdyProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNumber.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatNumber.setDescription('Deprecated!.\n\t\tThe number of ltmSpdyProfileStat entries in the table.')
ltmSpdyProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3), )
if mibBuilder.loadTexts: ltmSpdyProfileStatTable.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatTable.setDescription('Deprecated! A table containing statistics information about the SPDY profile.')
ltmSpdyProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"))
if mibBuilder.loadTexts: ltmSpdyProfileStatEntry.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatEntry.setDescription('Columns in the ltmSpdyProfileStat Table')
ltmSpdyProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatName.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatName.setDescription('Deprecated! The name of the SPDY profile.')
ltmSpdyProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsAccepted.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsAccepted.setDescription('Deprecated! The total number of accepted connections.')
ltmSpdyProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsCurrent.setDescription('Deprecated! The total number of connections currently active.')
ltmSpdyProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsMax.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatConnectionsMax.setDescription('Deprecated! The maximum number of connections open simultaneously.')
ltmSpdyProfileStatDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesReceived.setDescription('Deprecated! The total number of data frames received.')
ltmSpdyProfileStatDataFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatDataFramesSent.setDescription('Deprecated! The total number of data frames sent.')
ltmSpdyProfileStatFlowsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCreated.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCreated.setDescription('Deprecated! The total number of flows created.')
ltmSpdyProfileStatFlowsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsCurrent.setDescription('Deprecated! The total number of flows currently active.')
ltmSpdyProfileStatFlowsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsMax.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatFlowsMax.setDescription('Deprecated! The maximum number of flows open simultaneously.')
ltmSpdyProfileStatGoawayFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesReceived.setDescription('Deprecated! The total number of GOAWAY frames received.')
ltmSpdyProfileStatGoawayFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatGoawayFramesSent.setDescription('Deprecated! The total number of GOAWAY frames sent.')
ltmSpdyProfileStatHeadersFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesReceived.setDescription('Deprecated! The total number of HEADERS frames received.')
ltmSpdyProfileStatHeadersFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatHeadersFramesSent.setDescription('Deprecated! The total number of HEADERS frames sent.')
ltmSpdyProfileStatHttpRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpRequestBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpRequestBytes.setDescription('Deprecated! The total number of HTTP request bytes.')
ltmSpdyProfileStatHttpResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpResponseBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatHttpResponseBytes.setDescription('Deprecated! The total number of HTTP response bytes.')
ltmSpdyProfileStatNoopFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesReceived.setDescription('Deprecated! The total number of NOOP frames received.')
ltmSpdyProfileStatNoopFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatNoopFramesSent.setDescription('Deprecated! The total number of NOOP frames sent.')
ltmSpdyProfileStatPingFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesReceived.setDescription('Deprecated! The total number of PING frames received.')
ltmSpdyProfileStatPingFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatPingFramesSent.setDescription('Deprecated! The total number of PING frames sent.')
ltmSpdyProfileStatRstStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesReceived.setDescription('Deprecated! The total number of RST_STREAM frames received.')
ltmSpdyProfileStatRstStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatRstStreamFramesSent.setDescription('Deprecated! The total number of RST_STREAM frames sent.')
ltmSpdyProfileStatSettingsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesReceived.setDescription('Deprecated! The total number of SETTINGS frames received.')
ltmSpdyProfileStatSettingsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSettingsFramesSent.setDescription('Deprecated! The total number of SETTINGS frames sent.')
ltmSpdyProfileStatSpdyRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestBytes.setDescription('Deprecated! The total number of SPDY request bytes.')
ltmSpdyProfileStatSpdyRequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestFrames.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyRequestFrames.setDescription('Deprecated! The total number of SPDY request frames.')
ltmSpdyProfileStatSpdyResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseBytes.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseBytes.setDescription('Deprecated! The total number of SPDY response bytes.')
ltmSpdyProfileStatSpdyResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseFrames.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSpdyResponseFrames.setDescription('Deprecated! The total number of SPDY response frames.')
ltmSpdyProfileStatSynReplyFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesReceived.setDescription('Deprecated! The total number of SYN_REPLY frames received.')
ltmSpdyProfileStatSynReplyFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynReplyFramesSent.setDescription('Deprecated! The total number of SYN_REPLY frames sent.')
ltmSpdyProfileStatSynStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesReceived.setDescription('Deprecated! The total number of SYN_STREAM frames received.')
ltmSpdyProfileStatSynStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatSynStreamFramesSent.setDescription('Deprecated! The total number of SYN_STREAM frames sent.')
ltmSpdyProfileStatV2StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCreated.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCreated.setDescription('Deprecated! The total number of SPDYv2 streams created.')
ltmSpdyProfileStatV2StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsCurrent.setDescription('Deprecated! The total number of SPDYv2 streams currently active.')
ltmSpdyProfileStatV2StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsMax.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV2StreamsMax.setDescription('Deprecated! The maximum number of SPDYv2 streams open simultaneously.')
ltmSpdyProfileStatV3StreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCreated.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCreated.setDescription('Deprecated! The total number of SPDYv3 streams created.')
ltmSpdyProfileStatV3StreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCurrent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsCurrent.setDescription('Deprecated! The total number of SPDYv3 streams currently active.')
ltmSpdyProfileStatV3StreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsMax.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatV3StreamsMax.setDescription('Deprecated! The maximum number of SPDYv3 streams open simultaneously.')
ltmSpdyProfileStatWindowUpdateFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesReceived.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesReceived.setDescription('Deprecated! The total number of WINDOW_UPDATE frames received.')
ltmSpdyProfileStatWindowUpdateFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 25, 3, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesSent.setStatus('deprecated')
if mibBuilder.loadTexts: ltmSpdyProfileStatWindowUpdateFramesSent.setDescription('Deprecated! The total number of WINDOW_UPDATE frames sent.')
ltmFtpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFtpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmFtpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFtpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatNumber.setDescription('The number of ltmFtpProfileStat entries in the table.')
ltmFtpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3), )
if mibBuilder.loadTexts: ltmFtpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatTable.setDescription('A table containing statistics information about the FTP profile.')
ltmFtpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatName"))
if mibBuilder.loadTexts: ltmFtpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatEntry.setDescription('Columns in the ltmFtpProfileStat Table')
ltmFtpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatName.setDescription('The name of the FTP profile.')
ltmFtpProfileStatLoginRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatLoginRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatLoginRequests.setDescription('The total number of login requests received.')
ltmFtpProfileStatDownloadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatDownloadRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatDownloadRequests.setDescription('The total number of download requests received.')
ltmFtpProfileStatUploadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatUploadRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatUploadRequests.setDescription('The total number of upload requests received.')
ltmFtpProfileStatFtpsSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsSessions.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsSessions.setDescription('The total number of sessions entering explicit FTPS mode.')
ltmFtpProfileStatPassthruTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatPassthruTransitions.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatPassthruTransitions.setDescription('The total number of sessions entering pass through mode.')
ltmFtpProfileStatFtpsIntercepts = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsIntercepts.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsIntercepts.setDescription('The total number of intercepted FTPS connections.')
ltmFtpProfileStatFtpsResets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsResets.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsResets.setDescription('The total number of reset FTP connections due to FTPS policy.')
ltmFtpProfileStatFtpsBypasses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsBypasses.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatFtpsBypasses.setDescription('The total number of FTP transitions to pass through mode due to SSL bypass.')
ltmFtpProfileStatPassiveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatPassiveRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatPassiveRequests.setDescription('The total number of passive transfer requests received.')
ltmFtpProfileStatActiveRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 6, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFtpProfileStatActiveRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatActiveRequests.setDescription('The total number of active transfer requests received.')
ltmDosApplicationHeavyUrlInclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclNumber.setDescription('The number of ltmDosApplicationHeavyUrlIncl entries in the table.')
ltmDosApplicationHeavyUrlInclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2), )
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclTable.setDescription('A table containing information of manually-configured (included) heavy URLs in DoS profile Application Security.')
ltmDosApplicationHeavyUrlInclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclIndex"))
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclEntry.setDescription('Columns in the ltmDosApplicationHeavyUrlIncl Table')
ltmDosApplicationHeavyUrlInclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationHeavyUrlInclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationHeavyUrlInclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclIndex.setDescription('The index of the included heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlInclUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 4, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclUrl.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclUrl.setDescription('The included heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlExclNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclNumber.setDescription('The number of ltmDosApplicationHeavyUrlExcl entries in the table.')
ltmDosApplicationHeavyUrlExclTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2), )
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclTable.setDescription('A table containing information of ignored (excluded) heavy URLs in DoS profile Application Security.')
ltmDosApplicationHeavyUrlExclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclIndex"))
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclEntry.setDescription('Columns in the ltmDosApplicationHeavyUrlExcl Table')
ltmDosApplicationHeavyUrlExclProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclProfileName.setDescription('The name of a DoS profile.')
ltmDosApplicationHeavyUrlExclName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclName.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclName.setDescription('The dummy name of enabled Application Security on this profile.')
ltmDosApplicationHeavyUrlExclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclIndex.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclIndex.setDescription('The index of the excluded heavy URL for the specified DoS profile with Application Security.')
ltmDosApplicationHeavyUrlExclUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 24, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclUrl.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclUrl.setDescription('The excluded heavy URL for the specified DoS profile with Application Security.')
ltmV6rdProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileNumber.setDescription('The number of ltmV6rdProfile entries in the table.')
ltmV6rdProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2), )
if mibBuilder.loadTexts: ltmV6rdProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileTable.setDescription('A table containing information about the V6RD profile.')
ltmV6rdProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileName"))
if mibBuilder.loadTexts: ltmV6rdProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileEntry.setDescription('Columns in the ltmV6rdProfile Table')
ltmV6rdProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileName.setDescription('The name of a V6RD profile.')
ltmV6rdProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t   or user defined profile.')
ltmV6rdProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t   its attribute default values.')
ltmV6rdProfileIpv4prefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixType.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixType.setDescription('The IP address type of ltmV6rdProfileIpv4prefix.')
ltmV6rdProfileIpv4prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefix.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefix.setDescription('IPv4 prefix for Customer Edge routers. It is interpreted within \n\t        the context of a ltmV6rdProfileIpv4prefixType value.')
ltmV6rdProfileIpv4prefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixlen.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileIpv4prefixlen.setDescription('The number of high-order bits of IPv4 addresses that are not embedded in the IPv6 addresses of a given V6RD domain.')
ltmV6rdProfileV6rdprefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixType.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixType.setDescription('The IP address type of ltmV6rdProfileV6rdprefix.')
ltmV6rdProfileV6rdprefix = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 8), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefix.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefix.setDescription('IPv6 prefix 6RD domain. It is interpreted within \n\t        the context of a ltmV6rdProfileV6rdprefixType value.')
ltmV6rdProfileV6rdprefixlen = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 26, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixlen.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileV6rdprefixlen.setDescription('The length of the 6rd IPv6 prefix for the given 6rd domain.')
ltmPptpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileNumber.setDescription('The number of ltmPptpProfile entries in the table.')
ltmPptpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2), )
if mibBuilder.loadTexts: ltmPptpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileTable.setDescription('A table containing information about the PPTP profile.')
ltmPptpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPptpProfileName"))
if mibBuilder.loadTexts: ltmPptpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileEntry.setDescription('Columns in the ltmPptpProfile Table')
ltmPptpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileName.setDescription('The name of a PPTP profile.')
ltmPptpProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileDescription.setDescription('The description of a PPTP profile.')
ltmPptpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t    or user defined profile.')
ltmPptpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t    its attribute default values.')
ltmPptpProfileLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileLogServerIp.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileLogServerIp.setDescription("state indicate whether the log messages for call establishment/disconnect\n\t    include the server's ip address.")
ltmPptpProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileLogPublisher.setDescription('Specifies the name of the log publisher for PPTP events.')
ltmPptpProfileCsvFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileCsvFormat.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileCsvFormat.setDescription('Use csv log format for output.')
ltmPptpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPptpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmPptpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmPptpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatNumber.setDescription('The number of ltmPptpProfileStat entries in the table.')
ltmPptpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3), )
if mibBuilder.loadTexts: ltmPptpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatTable.setDescription('A table containing statistics information about the PPTP profile.')
ltmPptpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatName"))
if mibBuilder.loadTexts: ltmPptpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEntry.setDescription('Columns in the ltmPptpProfileStat Table')
ltmPptpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatName.setDescription('The name of the PPTP profile.')
ltmPptpProfileStatStartRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStartRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStartRequests.setDescription('Number of PPTP control messages used to establish the control\n\t     connection between a server and a client.')
ltmPptpProfileStatStartReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStartReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStartReplies.setDescription('Number of PPTP control messages sent in reply to a received\n\t     Start-Control-Connection-Request message.')
ltmPptpProfileStatStopRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStopRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStopRequests.setDescription('Number of PPTP control messages sent by one peer of a client-server\n\t     control connection to inform the other peer that the control\n\t     connection should be closed.')
ltmPptpProfileStatStopReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatStopReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatStopReplies.setDescription('Number of PPTP control messages sent by one peer of a client-server\n\t     control connection upon receipt of a\n\t     Stop-Control-Connection-Request from the other peer.')
ltmPptpProfileStatEchoRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatEchoRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEchoRequests.setDescription('Number of PPTP control messages sent by either peer of a client-server\n\t     control connection.')
ltmPptpProfileStatEchoReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatEchoReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatEchoReplies.setDescription('Number of PPTP control messages sent by either peer of a client-server\n\t     control connection in response to the receipt of an Echo-Request.')
ltmPptpProfileStatOutgoingCallRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallRequests.setDescription('Number of PPTP control messages sent by the server to the client to\n\t     indicate that an outbound call from the client is to be\n\t     established.')
ltmPptpProfileStatOutgoingCallReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallReplies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatOutgoingCallReplies.setDescription('Number of PPTP control messages sent by the client to the server in\n\t     response to a received Outgoing-Call-Request message.')
ltmPptpProfileStatCallClearRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatCallClearRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatCallClearRequests.setDescription('Number of PPTP control messages sent by the server to the client\n\t     indicating that a particular call is to be disconnected.')
ltmPptpProfileStatCallDisconnectNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatCallDisconnectNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatCallDisconnectNotifies.setDescription('Number of PPTP Call-Disconnect-Notify control messages sent by the client\n\t    to the server.  Its purpose is to inform the server of both the\n\t    disconnection and the reason for it.')
ltmPptpProfileStatWanErrorNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatWanErrorNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatWanErrorNotifies.setDescription('Number of WAN-Error-Notify messages sent by the client to the server to\n\t    indicate WAN error conditions (conditions that occur on the interface\n\t    supporting PPP).')
ltmPptpProfileStatSetLinkInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatSetLinkInfo.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatSetLinkInfo.setDescription('Number of PPTP control messages sent by the server to the client to\n\t     set PPP-negotiated options.')
ltmPptpProfileStatActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatActiveCalls.setDescription('Number of active PPTP calls.')
ltmPptpProfileStatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatTotalCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatTotalCalls.setDescription('Total number of PPTP calls served.')
ltmPptpProfileStatFailedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 27, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPptpProfileStatFailedCalls.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatFailedCalls.setDescription('Total number of PPTP calls that failed.')
ltmPcpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileNumber.setDescription('The number of ltmPcpProfile entries in the table.')
ltmPcpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2), )
if mibBuilder.loadTexts: ltmPcpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileTable.setDescription('A table containing information about the Port Control Protocol (PCP) profile.')
ltmPcpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpProfileName"))
if mibBuilder.loadTexts: ltmPcpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileEntry.setDescription('Columns in the ltmPcpProfile Table')
ltmPcpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileName.setDescription('The name of a PCP profile.')
ltmPcpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t    or user defined profile.')
ltmPcpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t    its attribute default values.')
ltmPcpProfileListeningPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 4), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileListeningPort.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileListeningPort.setDescription('The port which Port Control Protocol listener listens for PCP client-to-server\n\t    request message.')
ltmPcpProfileMulticastPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMulticastPort.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMulticastPort.setDescription('The port which Port Control Protocol sends server-to-client multicast notifications.')
ltmPcpProfileMinMappingLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMinMappingLifetime.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMinMappingLifetime.setDescription('Minimum duration of a mapping.')
ltmPcpProfileMaxMappingLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMaxMappingLifetime.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMaxMappingLifetime.setDescription('Maximum allowed duration of a mapping.')
ltmPcpProfileMapRecycleDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapRecycleDelay.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapRecycleDelay.setDescription('How long to wait before reusing a mapping that was deleted.')
ltmPcpProfileMapLimitPerClient = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapLimitPerClient.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapLimitPerClient.setDescription('Maximum number of mappings allowed per client.')
ltmPcpProfileMapFilterLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileMapFilterLimit.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileMapFilterLimit.setDescription('Maximum number of filters allowed per mapping.')
ltmPcpProfileThirdPartyOption = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileThirdPartyOption.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileThirdPartyOption.setDescription('If true, allows a PCP client to create mappings on behalf of another internal host.')
ltmPcpProfileRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 2, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileRuleName.setDescription('The name of the rule that the specified profile will be using.')
ltmPcpPrefixNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixNumber.setDescription('The number of ltmPcpPrefix entries in the table.')
ltmPcpPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2), )
if mibBuilder.loadTexts: ltmPcpPrefixTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixTable.setDescription('A table containing information of PCP prefix.')
ltmPcpPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixName"))
if mibBuilder.loadTexts: ltmPcpPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixEntry.setDescription('Columns in the ltmPcpPrefix Table')
ltmPcpPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixName.setDescription('The name of a PCP prefix node.')
ltmPcpPrefixAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixAddrType.setDescription('The IP address type of ltmPcpPrefixAddr.')
ltmPcpPrefixAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 1, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixAddr.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixAddr.setDescription('The IP address of a node. It is interpreted within \n\t     the context of a ltmPcpPrefixAddrType value.')
ltmPcpPrefixProfilePcpNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpNumber.setDescription('The number of ltmPcpPrefixProfilePcp entries in the table.')
ltmPcpPrefixProfilePcpTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2), )
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpTable.setDescription('A table containing information of PCP profile prefix, or third-party-subnets.')
ltmPcpPrefixProfilePcpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPcpPrefixName"))
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpEntry.setDescription('Columns in the ltmPcpPrefixProfilePcp Table')
ltmPcpPrefixProfilePcpPcpPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPcpPrefixName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPcpPrefixName.setDescription('The name of a PCP prefix node.')
ltmPcpPrefixProfilePcpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpName.setDescription('The name of a PCP profile.')
ltmPcpPrefixProfilePcpPrefixAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddressType.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddressType.setDescription('The IP address type of ltmPcpPrefixProfilePcpPrefixAddress.')
ltmPcpPrefixProfilePcpPrefixAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 3, 2, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddress.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpPrefixAddress.setDescription('The IP address of a node. It is interpreted within \n\t        the context of a ltmPcpPrefixProfilePcpPrefixAddressType value.')
ltmPcpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmPcpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmPcpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmPcpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatNumber.setDescription('The number of ltmPcpProfileStat entries in the table.')
ltmPcpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3), )
if mibBuilder.loadTexts: ltmPcpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatTable.setDescription('A table containing statistics information about the Port Control Protocol \n\t            (PCP) profile.')
ltmPcpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatName"))
if mibBuilder.loadTexts: ltmPcpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatEntry.setDescription('Columns in the ltmPcpProfileStat Table')
ltmPcpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatName.setDescription('The name of the PCP profile.')
ltmPcpProfileStatPcpAnnounceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceRequests.setDescription('The total number of Announce requests received.')
ltmPcpProfileStatPcpAnnounceResponsesUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesUcast.setDescription('The total number of unicast Announce responses transmitted.')
ltmPcpProfileStatPcpAnnounceResponsesMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpAnnounceResponsesMulticast.setDescription('The total number of multicast Announce responses transmitted.')
ltmPcpProfileStatPcpMapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapRequests.setDescription('The total number of Map requests received.')
ltmPcpProfileStatPcpMapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpMapResponses.setDescription('The total number of Map responses transmitted.')
ltmPcpProfileStatPcpPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerRequests.setDescription('The total number of Peer requests received.')
ltmPcpProfileStatPcpPeerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpPeerResponses.setDescription('The total number of Peer responses transmitted.')
ltmPcpProfileStatPcpErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsInvalidRequest.setDescription('The total number of invalid or malformed PCP requests received.')
ltmPcpProfileStatPcpErrorsUnavailableResource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsUnavailableResource.setDescription('The total number of PCP requests received where the server has insufficient \n\t     resources to complete the requested operation.')
ltmPcpProfileStatPcpErrorsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsNotAuthorized.setDescription('The total number of PCP requests that generated (or caused) an\n\t    unauthorized error when attempting to create a mapping.')
ltmPcpProfileStatPcpErrorsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 28, 4, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatPcpErrorsOther.setDescription('The total number of PCP requests received that resulted in other errors.')
ltmDnsExpressStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsExpressStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatResetStats.setDescription('The action to reset resettable statistics data in ltmDnsExpressStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsExpressStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatNumber.setDescription('The number of ltmDnsExpressStat entries in the table.')
ltmDnsExpressStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3), )
if mibBuilder.loadTexts: ltmDnsExpressStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTable.setDescription('A table containing statistics information about DNS Express zone transfer.')
ltmDnsExpressStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatName"))
if mibBuilder.loadTexts: ltmDnsExpressStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatEntry.setDescription('Columns in the ltmDnsExpressStat Table')
ltmDnsExpressStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatName.setDescription('The name of DNS zone.')
ltmDnsExpressStatDnsxQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxQueries.setDescription('Total number of queries sent to DNS Express.')
ltmDnsExpressStatDnsxResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxResponses.setDescription('Total number of queries answered by DNS Express.')
ltmDnsExpressStatDnsxNotifiesRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxNotifiesRecv.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxNotifiesRecv.setDescription('Total number of zone notifies received by DNS Express.')
ltmDnsExpressStatAxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatAxfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatAxfrQueries.setDescription('Total number of AXFR queries.')
ltmDnsExpressStatIxfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatIxfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatIxfrQueries.setDescription('Total number of IXFR queries.')
ltmDnsExpressStatXfrQueriesAclFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrQueriesAclFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrQueriesAclFailed.setDescription('Total number of zone transfer queries whose source IP address is not in the ACL.')
ltmDnsExpressStatXfrNotifiesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesSent.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesSent.setDescription('Total number of zone notifies sent to the clients.')
ltmDnsExpressStatDnsxXfrMsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxXfrMsgs.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatDnsxXfrMsgs.setDescription('Total number of zone transfer messages sent to the clients from DNS Express.')
ltmDnsExpressStatXfrNotifiesFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatXfrNotifiesFailed.setDescription('Total number of failures when sending notifies to the clients.')
ltmDnsExpressStatTsigMissing = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigMissing.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigMissing.setDescription('Total number of zone transfer queries without TSIG while it is required.')
ltmDnsExpressStatTsigNotRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigNotRequired.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigNotRequired.setDescription('Total number of zone transfer queries without TSIG and TSIG is not required.')
ltmDnsExpressStatTsigVerified = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigVerified.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigVerified.setDescription('Total number of zone transfer queries whose HMAC is verified.')
ltmDnsExpressStatTsigBadKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadKey.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadKey.setDescription('Total number of zone transfer queries with a bad key.')
ltmDnsExpressStatTsigBadSig = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadSig.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadSig.setDescription('Total number of zone transfer queries with a bad HMAC.')
ltmDnsExpressStatTsigBadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 7, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadTime.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatTsigBadTime.setDescription('Total number of zone transfer queries with a bad time.')
ltmDnsServerStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDnsServerStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatResetStats.setDescription('The action to reset resettable statistics data in ltmDnsServerStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDnsServerStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatNumber.setDescription('The number of ltmDnsServerStat entries in the table.')
ltmDnsServerStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3), )
if mibBuilder.loadTexts: ltmDnsServerStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatTable.setDescription('A table containing statistics information about DNS server zone transfer.')
ltmDnsServerStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatName"))
if mibBuilder.loadTexts: ltmDnsServerStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatEntry.setDescription('Columns in the ltmDnsServerStat Table')
ltmDnsServerStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatName.setDescription('The name of DNS server.')
ltmDnsServerStatXfrQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrQueries.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrQueries.setDescription('Total number of zone transfer queries.')
ltmDnsServerStatXfrResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrResponses.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrResponses.setDescription('Total number of zone transfer responses.')
ltmDnsServerStatXfrNotifies = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifies.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifies.setDescription('Total number of zone transfer notifies.')
ltmDnsServerStatXfrNotifyFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifyFailed.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatXfrNotifyFailed.setDescription('Total number of zone transfer notify failures.')
ltmDnsCacheForwardZoneNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNumber.setDescription('The number of ltmDnsCacheForwardZone entries in the table.')
ltmDnsCacheForwardZoneTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2), )
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneTable.setDescription('A table containing information about DNS Cache Forward Zone.')
ltmDnsCacheForwardZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneEntry.setDescription('Columns in the ltmDnsCacheForwardZone Table')
ltmDnsCacheForwardZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneName.setDescription('The name of DNS Cache Forward Zone.')
ltmDnsCacheForwardZoneCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 9, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneCacheName.setDescription('The name of DNS Cache to which the specified Forward Zone belongs.')
ltmDnsCacheForwardZoneNameServerNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerNumber.setDescription('The number of ltmDnsCacheForwardZoneNameServer entries in the table.')
ltmDnsCacheForwardZoneNameServerTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2), )
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerTable.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerTable.setDescription('A table containing information about DNS Cache Forward Zone Nameserver.')
ltmDnsCacheForwardZoneNameServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerPort"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerForwardZoneName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerCacheName"))
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerEntry.setDescription('Columns in the ltmDnsCacheForwardZoneNameServer Table')
ltmDnsCacheForwardZoneNameServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddrType.setDescription('The IP address type of the ltmDnsCacheForwardZoneNameServerIp.')
ltmDnsCacheForwardZoneNameServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddr.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerAddr.setDescription('The IP address of the specified nameserver. It is interpreted within \n\t         the context of a ltmDnsCacheForwardZoneNameServerIpType')
ltmDnsCacheForwardZoneNameServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 3), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerPort.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerPort.setDescription('The port of the specified nameserver.')
ltmDnsCacheForwardZoneNameServerForwardZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerForwardZoneName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerForwardZoneName.setDescription('The name of DNS Cache Forward Zone to which the specified nameserver belongs.')
ltmDnsCacheForwardZoneNameServerCacheName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 12, 10, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerCacheName.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerCacheName.setDescription("The name of DNS Cache to which the specified nameserver, and it's parent Forward Zone, belongs.")
ltmClientSslCertKeyChainNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainNumber.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainNumber.setDescription('The number of ltmClientSslCertKeyChain entries in the table.')
ltmClientSslCertKeyChainTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2), )
if mibBuilder.loadTexts: ltmClientSslCertKeyChainTable.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainTable.setDescription('A table containing cert, key and chain configuration of client-side SSL profiles.')
ltmClientSslCertKeyChainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainClientssl"))
if mibBuilder.loadTexts: ltmClientSslCertKeyChainEntry.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainEntry.setDescription('Columns in the ltmClientSslCertKeyChain Table')
ltmClientSslCertKeyChainName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainName.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainName.setDescription('The name of a certkeychain set.')
ltmClientSslCertKeyChainClientssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainClientssl.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainClientssl.setDescription('The name of a ClientSSL profile the set is related to.')
ltmClientSslCertKeyChainCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainCert.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainCert.setDescription('The certificate file name.')
ltmClientSslCertKeyChainKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainKey.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainKey.setDescription('The key file name.')
ltmClientSslCertKeyChainChain = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainChain.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainChain.setDescription('The certificate chain file name.')
ltmClientSslCertKeyChainOcspStplParams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 2, 3, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmClientSslCertKeyChainOcspStplParams.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainOcspStplParams.setDescription('The name of the OCSP Stapling Parameters object.')
ltmDosAttackDataStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDosAttackDataStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatResetStats.setDescription('The action to reset resettable statistics data in ltmDosAttackDataStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDosAttackDataStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatNumber.setDescription('The number of ltmDosAttackDataStat entries in the table.')
ltmDosAttackDataStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3), )
if mibBuilder.loadTexts: ltmDosAttackDataStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatTable.setDescription('A table containing statistic information of DoS attack data.')
ltmDosAttackDataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDeviceName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatVectorName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackType"))
if mibBuilder.loadTexts: ltmDosAttackDataStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatEntry.setDescription('Columns in the ltmDosAttackDataStat Table')
ltmDosAttackDataStatDeviceName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDeviceName.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDeviceName.setDescription('The name of the DoS Device.')
ltmDosAttackDataStatVectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatVectorName.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatVectorName.setDescription('The name of the DoS Vector.')
ltmDosAttackDataStatAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 101, 102, 103, 104, 105, 106))).clone(namedValues=NamedValues(("etherBrdcstPkt", 1), ("etherMulticstPkt", 2), ("etherMacSaEqDa", 3), ("arpFlood", 4), ("badVer", 5), ("hdrLenTooShort", 6), ("hdrLenGtL2Len", 7), ("ipLenGtL2Len", 8), ("l2LenGgtIpLen", 9), ("noL4", 10), ("badTtlVal", 11), ("ttlLeqOne", 12), ("ipErrChksum", 13), ("ipOptFrames", 14), ("ipFragFlood", 15), ("badIgmpFrame", 16), ("ipShortFrag", 17), ("igmpFlood", 18), ("badIpv6Ver", 19), ("ipv6LenGtL2Len", 20), ("payloadLenLsL2Len", 21), ("tooManyExtHdrs", 22), ("dupExtHdr", 23), ("extHdrTooLarge", 24), ("l4ExtHdrsGoEnd", 25), ("badIpv6HopCnt", 26), ("hopCntLeqOne", 27), ("routingHeaderType0", 28), ("ipv6ExtHdrFrames", 29), ("ipv6FragFlood", 30), ("badExtHdrOrder", 31), ("ipv6ShortFrag", 32), ("igmpFragFlood", 33), ("tcpHdrLenTooShort", 34), ("tclHdrLenGtL2Len", 35), ("unkTcpOptType", 36), ("optPresentWithIllegalLen", 37), ("tcpOptOverrunsTcpHdr", 38), ("badTcpChksum", 39), ("badTcpFlagsAllSet", 40), ("badTcpFlagsAllClr", 41), ("synAndFinSet", 42), ("finOnlySet", 43), ("tcpSynFlood", 44), ("tcpSynackFlood", 45), ("tcpRstFlood", 46), ("badIcmpChksum", 47), ("tcpBadUrg", 48), ("tcpWindowSize", 49), ("ipv6AtomicFrag", 50), ("badUdpHdr", 51), ("badUdpChksum", 52), ("ipBadSrc", 53), ("ipv6BadSrc", 54), ("badIcmpFrame", 55), ("icmpv4Flood", 56), ("icmpFrag", 57), ("icmpFrameTooLarge", 58), ("icmpv6Flood", 59), ("hostUnreachable", 60), ("tidcmp", 61), ("udpFlood", 62), ("dnsOversize", 63), ("landAttack", 64), ("dnsResponseFlood", 65), ("dnsMalformed", 66), ("dnsQdcountLimit", 67), ("dnsAnyQuery", 68), ("dnsAQuery", 69), ("dnsPtrQuery", 70), ("dnsNsQuery", 71), ("dnsSoaQuery", 72), ("dnsCnameQuery", 73), ("dnsMxQuery", 74), ("dnsAaaaQuery", 75), ("dnsTxtQuery", 76), ("dnsSrvQuery", 77), ("dnsAxfrQuery", 78), ("dnsIxfrQuery", 79), ("dnsOtherQuery", 80), ("ipOtherFrag", 81), ("ipv6OtherFrag", 82), ("sipMalformed", 83), ("sipInviteMethod", 84), ("sipAckMethod", 85), ("sipOptionsMethod", 86), ("sipByeMethod", 87), ("sipCancelMethod", 88), ("sipRegisterMethod", 89), ("sipPublishMethod", 90), ("sipNotifyMethod", 91), ("sipSubscribeMethod", 92), ("sipMessageMethod", 93), ("sipPrackMethod", 94), ("sipOtherMethod", 95), ("ipOverlapFrag", 96), ("ipv6OverlapFrag", 97), ("badIpOpt", 98), ("tcpAckFlood", 99), ("sweep", 101), ("flood", 102), ("unkIpoptType", 103), ("badSctpChksum", 104), ("ipUnkProt", 105), ("tcpSynOversize", 106)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackType.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackType.setDescription('The DoS attack vector type.')
ltmDosAttackDataStatAttackDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackDetected.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackDetected.setDescription('A Boolean representing whether or not an attack is currently\n\t        occurring.')
ltmDosAttackDataStatAttackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackCount.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatAttackCount.setDescription('The number of attacks detected.')
ltmDosAttackDataStatStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats.setDescription('The number of attack packets received.')
ltmDosAttackDataStatStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStatsRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStatsRate.setDescription('The number of attack packets received per second.')
ltmDosAttackDataStatStats1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1m.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1m.setDescription('The number of attack packets received in the last minute.')
ltmDosAttackDataStatStats1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1h.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatStats1h.setDescription('The number of attack packets received in the last hour.')
ltmDosAttackDataStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops.setDescription('The number of attack packets dropped.')
ltmDosAttackDataStatDropsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDropsRate.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDropsRate.setDescription('The number of attack packets dropped per second.')
ltmDosAttackDataStatDrops1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1m.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1m.setDescription('The number of attack packets dropped in the last minute.')
ltmDosAttackDataStatDrops1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1h.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatDrops1h.setDescription('The number of attack packets dropped in the last hour.')
ltmDosAttackDataStatWlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDosAttackDataStatWlCount.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatWlCount.setDescription('Total number of whitelist hits.')
ltmNetworkAttackDataStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatResetStats.setDescription('The action to reset resettable statistics data in ltmNetworkAttackDataStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmNetworkAttackDataStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatNumber.setDescription('The number of ltmNetworkAttackDataStat entries in the table.')
ltmNetworkAttackDataStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3), )
if mibBuilder.loadTexts: ltmNetworkAttackDataStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatTable.setDescription('A table containing statistic information of Network DoS attack data.')
ltmNetworkAttackDataStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVectorName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVsName"))
if mibBuilder.loadTexts: ltmNetworkAttackDataStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatEntry.setDescription('Columns in the ltmNetworkAttackDataStat Table')
ltmNetworkAttackDataStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatProfileName.setDescription('The name of the DoS Profile.')
ltmNetworkAttackDataStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVsName.setDescription('The name of the virtual server.')
ltmNetworkAttackDataStatVectorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVectorName.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatVectorName.setDescription('The name of the DoS Vector.')
ltmNetworkAttackDataStatAttackType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))).clone(namedValues=NamedValues(("ipOptFrames", 1), ("ipLowTtl", 2), ("hopCntLow", 3), ("icmpFrag", 4), ("ipFragFlood", 5), ("tooManyExtHdrs", 6), ("extHdrTooLarge", 7), ("ipv6ExtHdrFrames", 8), ("ipv6FragFlood", 9), ("unkTcpOptType", 10), ("optPresentWithIllegalLen", 11), ("tcpOptOverrunsTcpHdr", 12), ("tcpSynFlood", 13), ("tcpSynackFlood", 14), ("tcpRstFlood", 15), ("tcpBadUrg", 16), ("tcpWindowSize", 17), ("hostUnreachable", 18), ("tidcmp", 19), ("icmpv4Flood", 20), ("icmpv6Flood", 21), ("udpFlood", 22), ("sweep", 23), ("tcpSynOversize", 24)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackType.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackType.setDescription('The DoS attack vector type.')
ltmNetworkAttackDataStatAttackDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackDetected.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackDetected.setDescription('A Boolean representing whether or not an attack is currently\n\t        occurring.')
ltmNetworkAttackDataStatAttackCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackCount.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatAttackCount.setDescription('The number of attacks detected.')
ltmNetworkAttackDataStatStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats.setDescription('The number of attack packets received.')
ltmNetworkAttackDataStatStatsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStatsRate.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStatsRate.setDescription('The number of attack packets received per second.')
ltmNetworkAttackDataStatStats1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1m.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1m.setDescription('The number of attack packets received in the last minute.')
ltmNetworkAttackDataStatStats1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1h.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatStats1h.setDescription('The number of attack packets received in the last hour.')
ltmNetworkAttackDataStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops.setDescription('The number of attack packets dropped.')
ltmNetworkAttackDataStatDropsRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDropsRate.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDropsRate.setDescription('The number of attack packets dropped per second.')
ltmNetworkAttackDataStatDrops1m = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1m.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1m.setDescription('The number of attack packets dropped in the last minute.')
ltmNetworkAttackDataStatDrops1h = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1h.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatDrops1h.setDescription('The number of attack packets dropped in the last hour.')
ltmNetworkAttackDataStatWlCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 16, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmNetworkAttackDataStatWlCount.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatWlCount.setDescription('Total number of whitelist hits.')
ltmFwAdminIpRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatNumber.setDescription('The number of ltmFwAdminIpRuleStat entries in the table.')
ltmFwAdminIpRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2), )
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatTable.setDescription('A table containing statistic information of Management IP Firewall Rules.')
ltmFwAdminIpRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatContainerName"))
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatEntry.setDescription('Columns in the ltmFwAdminIpRuleStat Table')
ltmFwAdminIpRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatRuleName.setDescription('The name of the rule.')
ltmFwAdminIpRuleStatContainerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatContainerName.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatContainerName.setDescription('The name of the containing item.')
ltmFwAdminIpRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwIpintGlobalStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwIpintGlobalStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintGlobalStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatNumber.setDescription('The number of ltmFwIpintGlobalStat entries in the table.')
ltmFwIpintGlobalStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3), )
if mibBuilder.loadTexts: ltmFwIpintGlobalStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatTable.setDescription('A table containing statistic information of global IP Intelligence data.')
ltmFwIpintGlobalStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintGlobalStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatEntry.setDescription('Columns in the ltmFwIpintGlobalStat Table')
ltmFwIpintGlobalStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintGlobalStatSrcIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatSrcIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatSrcIpBlacklist.setDescription('The number of packets whose source IP matched this category.')
ltmFwIpintGlobalStatDstIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 4, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintGlobalStatDstIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatDstIpBlacklist.setDescription('The number of packets whose destination IP matched this category.')
ltmFwIpintVirtualStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwIpintVirtualStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintVirtualStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatNumber.setDescription('The number of ltmFwIpintVirtualStat entries in the table.')
ltmFwIpintVirtualStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3), )
if mibBuilder.loadTexts: ltmFwIpintVirtualStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatTable.setDescription('A table containing statistic information of virtual server IP Intelligence data.')
ltmFwIpintVirtualStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintVirtualStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatEntry.setDescription('Columns in the ltmFwIpintVirtualStat Table')
ltmFwIpintVirtualStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatContextName.setDescription('The name of the virtual server.')
ltmFwIpintVirtualStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintVirtualStatSrcIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatSrcIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatSrcIpBlacklist.setDescription('The number of packets whose source IP matched this category.')
ltmFwIpintVirtualStatDstIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 10, 17, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintVirtualStatDstIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatDstIpBlacklist.setDescription('The number of packets whose destination IP matched this category.')
ltmFwIpintRouteDomainStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwIpintRouteDomainStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwIpintRouteDomainStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatNumber.setDescription('The number of ltmFwIpintRouteDomainStat entries in the table.')
ltmFwIpintRouteDomainStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3), )
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatTable.setDescription('A table containing statistic information of route domain IP Intelligence data.')
ltmFwIpintRouteDomainStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatBlClassName"))
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatEntry.setDescription('Columns in the ltmFwIpintRouteDomainStat Table')
ltmFwIpintRouteDomainStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatContextName.setDescription('The name of the route domain.')
ltmFwIpintRouteDomainStatBlClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatBlClassName.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatBlClassName.setDescription('The blacklist class name.')
ltmFwIpintRouteDomainStatSrcIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatSrcIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatSrcIpBlacklist.setDescription('The number of packets whose source IP matched this category.')
ltmFwIpintRouteDomainStatDstIpBlacklist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatDstIpBlacklist.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatDstIpBlacklist.setDescription('The number of packets whose destination IP matched this category.')
ltmRouteDomainStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmRouteDomainStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatResetStats.setDescription('The action to reset resettable statistics data in ltmRouteDomainStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmRouteDomainStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatNumber.setDescription('The number of ltmRouteDomainStat entries in the table.')
ltmRouteDomainStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3), )
if mibBuilder.loadTexts: ltmRouteDomainStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatTable.setDescription('A table containing statistic information of route domains.')
ltmRouteDomainStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatName"))
if mibBuilder.loadTexts: ltmRouteDomainStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatEntry.setDescription('Columns in the ltmRouteDomainStat Table')
ltmRouteDomainStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatName.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatName.setDescription('The name of a route domain.')
ltmRouteDomainStatConnLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatConnLimit.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatConnLimit.setDescription('The maximum number of connections the specified route domain is allowed \n\t         to have open at one time.')
ltmRouteDomainStatConnectionFlowMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatConnectionFlowMiss.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatConnectionFlowMiss.setDescription('The number of packets received that have no associated connection flow open.')
ltmRouteDomainStatClientPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsIn.setDescription('The number of packets received by the specified route domain from client-side.')
ltmRouteDomainStatClientBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesIn.setDescription('The number of bytes received by the specified route domain from client-side.')
ltmRouteDomainStatClientPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientPktsOut.setDescription('The number of packets sent to client-side on the specified route domain.')
ltmRouteDomainStatClientBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientBytesOut.setDescription('The number of bytes sent to client-side on the specified route domain.')
ltmRouteDomainStatClientMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientMaxConns.setDescription('The maximum connections from client-side on the specified route domain.')
ltmRouteDomainStatClientTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientTotConns.setDescription('The total connections from client-side on the specified route domain.')
ltmRouteDomainStatClientCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientCurConns.setDescription('The current connections from client-side on the specified route domain.')
ltmRouteDomainStatClientEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientEvictedConns.setDescription('The number of client-side connections that have been evicted on the specified route domain.')
ltmRouteDomainStatClientSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatClientSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatClientSlowKilled.setDescription('The number of slow client-side connections that have been killed on the specified route domain.')
ltmRouteDomainStatServerPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsIn.setDescription('The number of packets received by the specified route domain from server-side.')
ltmRouteDomainStatServerBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesIn.setDescription('The number of bytes received by the specified route domain from server-side.')
ltmRouteDomainStatServerPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerPktsOut.setDescription('The number of packets sent to server-side on the specified route domain.')
ltmRouteDomainStatServerBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerBytesOut.setDescription('The number of bytes sent to server-side on the specified route domain.')
ltmRouteDomainStatServerMaxConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerMaxConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerMaxConns.setDescription('The maximum connections from server-side on the specified route domain.')
ltmRouteDomainStatServerTotConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerTotConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerTotConns.setDescription('The total connections from server-side on the specified route domain.')
ltmRouteDomainStatServerCurConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerCurConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerCurConns.setDescription('The current connections from server-side on the specified route domain.')
ltmRouteDomainStatServerEvictedConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerEvictedConns.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerEvictedConns.setDescription('The number of server-side connections that have been evicted on the specified route domain.')
ltmRouteDomainStatServerSlowKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 15, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmRouteDomainStatServerSlowKilled.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatServerSlowKilled.setDescription('The number of slow server-side connections that have been killed on the specified route domain.')
ltmFlowEvictionPolicyStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatResetStats.setDescription('The action to reset resettable statistics data in ltmFlowEvictionPolicyStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFlowEvictionPolicyStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatNumber.setDescription('The number of ltmFlowEvictionPolicyStat entries in the table.')
ltmFlowEvictionPolicyStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3), )
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatTable.setDescription('A table containing statistic information of flow eviction policies.')
ltmFlowEvictionPolicyStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatSweptContext"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatContextName"))
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEntry.setDescription('Columns in the ltmFlowEvictionPolicyStat Table')
ltmFlowEvictionPolicyStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatPolicyName.setDescription('The policy name.')
ltmFlowEvictionPolicyStatSweptContext = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatSweptContext.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatSweptContext.setDescription('The context that was swept.')
ltmFlowEvictionPolicyStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatContextName.setDescription('The context name.')
ltmFlowEvictionPolicyStatEvicted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEvicted.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatEvicted.setDescription('The number of evicted flows.')
ltmAlgLogProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileNumber.setDescription('The number of ltmAlgLogProfile entries in the table.')
ltmAlgLogProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileTable.setDescription('A table containing information about the ALG log profile.')
ltmAlgLogProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileName"))
if mibBuilder.loadTexts: ltmAlgLogProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEntry.setDescription('Columns in the ltmAlgLogProfile Table')
ltmAlgLogProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileDescription.setDescription('The description of a ALG log profile.')
ltmAlgLogProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmAlgLogProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmAlgLogProfileStartControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlAction.setDescription('Log action to occur at the creation of the control channel connection.')
ltmAlgLogProfileEndControlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlAction.setDescription('Log action to occur at the end of the control channel connection.')
ltmAlgLogProfileStartDataAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataAction.setDescription('Log action to occur at the creation of the data channel connection.')
ltmAlgLogProfileEndDataAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataAction.setDescription('Log action to occur at the end of the data channel connection.')
ltmAlgLogProfileInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileInboundAction.setDescription('Log action to occur for inbound transactions, this could be either\n\t\t incoming or outgoing message.')
ltmAlgLogProfileCsvFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileCsvFormat.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileCsvFormat.setDescription('Use CSV log format for output.')
ltmAlgLogProfileStartControlElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsNumber.setDescription('The number of ltmAlgLogProfileStartControlElements entries in the table.')
ltmAlgLogProfileStartControlElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsTable.setDescription('A table containing information on the optional elements of start control event log message.')
ltmAlgLogProfileStartControlElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsEntry.setDescription('Columns in the ltmAlgLogProfileStartControlElements Table')
ltmAlgLogProfileStartControlElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileStartControlElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileStartControlElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileEndControlElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsNumber.setDescription('The number of ltmAlgLogProfileEndControlElements entries in the table.')
ltmAlgLogProfileEndControlElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsTable.setDescription('A table containing information on the optional elements of end control event log message.')
ltmAlgLogProfileEndControlElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsEntry.setDescription('Columns in the ltmAlgLogProfileEndControlElements Table')
ltmAlgLogProfileEndControlElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileEndControlElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileEndControlElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileStartDataElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsNumber.setDescription('The number of ltmAlgLogProfileStartDataElements entries in the table.')
ltmAlgLogProfileStartDataElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsTable.setDescription('A table containing information on the optional elements of start data event log message.')
ltmAlgLogProfileStartDataElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsEntry.setDescription('Columns in the ltmAlgLogProfileStartDataElements Table')
ltmAlgLogProfileStartDataElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileStartDataElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileStartDataElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsElements.setDescription('The optional element of ALG event log messages.')
ltmAlgLogProfileEndDataElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsNumber.setDescription('The number of ltmAlgLogProfileEndDataElements entries in the table.')
ltmAlgLogProfileEndDataElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2), )
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsTable.setDescription('A table containing information on the optional elements of end data event log message.')
ltmAlgLogProfileEndDataElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsIndex"))
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsEntry.setDescription('Columns in the ltmAlgLogProfileEndDataElements Table')
ltmAlgLogProfileEndDataElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsName.setDescription('The name of a ALG Log profile.')
ltmAlgLogProfileEndDataElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsIndex.setDescription('The index of the optional element for ALG event log messages.')
ltmAlgLogProfileEndDataElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 29, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsElements.setDescription('The optional element of ALG event log messages.')
ltmLsnLogProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileNumber.setDescription('The number of ltmLsnLogProfile entries in the table.')
ltmLsnLogProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileTable.setDescription('A table containing information about the LSN log profile.')
ltmLsnLogProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileName"))
if mibBuilder.loadTexts: ltmLsnLogProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEntry.setDescription('Columns in the ltmLsnLogProfile Table')
ltmLsnLogProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileName.setDescription('The name of a ALG Log profile.')
ltmLsnLogProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileDescription.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileDescription.setDescription('The description of a ALG log profile.')
ltmLsnLogProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmLsnLogProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmLsnLogProfileStartOutboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundAction.setDescription('Log action to occur at the creation of the outbound LSN connection.')
ltmLsnLogProfileEndOutboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundAction.setDescription('Log action to occur at the end of the outbound LSN connection.')
ltmLsnLogProfileStartInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartInboundAction.setDescription('Log action to occur at the creation of the incoming connection.')
ltmLsnLogProfileEndInboundAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("backupAllocationOnly", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndInboundAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndInboundAction.setDescription('Log action to occur at the end of the incoming connection.')
ltmLsnLogProfileQuotaExceededAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileQuotaExceededAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileQuotaExceededAction.setDescription('Log action to occur when LSN client exceeded allocated resources.')
ltmLsnLogProfileErrorsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileErrorsAction.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileErrorsAction.setDescription('Log action to occur when LSN translation errors occur.')
ltmLsnLogProfileCsvFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileCsvFormat.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileCsvFormat.setDescription('Use CSV log format for output.')
ltmLsnLogProfileStartOutboundElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsNumber.setDescription('The number of ltmLsnLogProfileStartOutboundElements entries in the table.')
ltmLsnLogProfileStartOutboundElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsTable.setDescription('A table containing information on the optional elements of start outbound event log message.')
ltmLsnLogProfileStartOutboundElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsIndex"))
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsEntry.setDescription('Columns in the ltmLsnLogProfileStartOutboundElements Table')
ltmLsnLogProfileStartOutboundElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsName.setDescription('The name of a LSN Log profile.')
ltmLsnLogProfileStartOutboundElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsIndex.setDescription('The index of the optional element for LSN log messages.')
ltmLsnLogProfileStartOutboundElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsElements.setDescription('The optional element of LSN log messages.')
ltmLsnLogProfileEndOutboundElementsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsNumber.setDescription('The number of ltmLsnLogProfileEndOutboundElements entries in the table.')
ltmLsnLogProfileEndOutboundElementsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2), )
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsTable.setDescription('A table containing information on the optional elements of end outbound event log message.')
ltmLsnLogProfileEndOutboundElementsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsIndex"))
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsEntry.setDescription('Columns in the ltmLsnLogProfileEndOutboundElements Table')
ltmLsnLogProfileEndOutboundElementsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsName.setDescription('The name of a LSN Log profile.')
ltmLsnLogProfileEndOutboundElementsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsIndex.setDescription('The index of the optional element for LSN log messages.')
ltmLsnLogProfileEndOutboundElementsElements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 30, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("destination", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsElements.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsElements.setDescription('The optional element of LSN log messages.')
ltmOcspStaplingParametersNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersNumber.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersNumber.setDescription('The number of ltmOcspStaplingParameters entries in the table.')
ltmOcspStaplingParametersTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2), )
if mibBuilder.loadTexts: ltmOcspStaplingParametersTable.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTable.setDescription('A table containing options to be used for enabling OCSP Stapling on clientside SSL profiles.')
ltmOcspStaplingParametersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersName"))
if mibBuilder.loadTexts: ltmOcspStaplingParametersEntry.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersEntry.setDescription('Columns in the ltmOcspStaplingParameters Table')
ltmOcspStaplingParametersName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersName.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersName.setDescription('The name of the OCSP Stapling Parameters object.')
ltmOcspStaplingParametersUseProxyServer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersUseProxyServer.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersUseProxyServer.setDescription('Whether to use a proxy server or a DNS resolver.')
ltmOcspStaplingParametersProxyServerPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersProxyServerPool.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersProxyServerPool.setDescription('The name of the proxy server pool.')
ltmOcspStaplingParametersDnsResolver = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersDnsResolver.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersDnsResolver.setDescription('The name of the DNS resolver.')
ltmOcspStaplingParametersTrustedCa = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedCa.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedCa.setDescription('The name of the trusted certificate authority file.')
ltmOcspStaplingParametersTrustedResponders = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedResponders.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTrustedResponders.setDescription('The name of the file containing the trusted OCSP responders.')
ltmOcspStaplingParametersUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersUrl.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersUrl.setDescription('The name of the responder URL.')
ltmOcspStaplingParametersSignerCert = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerCert.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerCert.setDescription('The name of the signer certificate file.')
ltmOcspStaplingParametersSignerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 9), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerKey.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignerKey.setDescription('The name of the signer key file.')
ltmOcspStaplingParametersSignHash = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sha1", 0), ("sha256", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignHash.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersSignHash.setDescription('The hash algorithm used for signing the OCSP request.')
ltmOcspStaplingParametersTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersTimeout.setDescription('The OCSP Stapling timeout.')
ltmOcspStaplingParametersClockSkew = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersClockSkew.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersClockSkew.setDescription('The maximum allowable clock skew between the BIG-IP and the OCSP responder.')
ltmOcspStaplingParametersStatusAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersStatusAge.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersStatusAge.setDescription('The allowed age of the OCSP response when nextUpdate time is not specified in the response.')
ltmOcspStaplingParametersCacheTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheTimeout.setDescription('The desired lifetime of the OCSP response in the cache, in seconds.')
ltmOcspStaplingParametersCacheErrorTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheErrorTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersCacheErrorTimeout.setDescription('The lifetime of an error response in the cache, in seconds.')
ltmOcspStaplingParametersStrictRespCertCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 17, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmOcspStaplingParametersStrictRespCertCheck.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersStrictRespCertCheck.setDescription('Whether the certificate in the OCSP response should be checked for OCSP signing extension.')
ltmFwRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatNumber.setDescription('The number of ltmFwRuleStat entries in the table.')
ltmFwRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2), )
if mibBuilder.loadTexts: ltmFwRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatTable.setDescription('A table containing statistic information of Firewall rule stats.')
ltmFwRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleListName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleStatType"))
if mibBuilder.loadTexts: ltmFwRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatEntry.setDescription('Columns in the ltmFwRuleStat Table')
ltmFwRuleStatContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatContextType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatContextType.setDescription('The context type.')
ltmFwRuleStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatContextName.setDescription('The context name.')
ltmFwRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleName.setDescription('The rule name.')
ltmFwRuleStatRuleListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleListName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleListName.setDescription('The rule list name.')
ltmFwRuleStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatPolicyName.setDescription('The policy name.')
ltmFwRuleStatRuleStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enforced", 1), ("staged", 2), ("active", 3), ("overlapper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatRuleStatType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatRuleStatType.setDescription('')
ltmFwRuleStatActualRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatActualRule.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatActualRule.setDescription('The actual rule name.')
ltmFwRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwRuleStatLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTime.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTime.setDescription('The last time a packet matched this rule.')
ltmFwRuleStatLastHitTimeFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTimeFmt.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatLastHitTimeFmt.setDescription('The last time a packet matched this rule, in human readable format.')
ltmFwRuleStatOverlapper = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatOverlapper.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatOverlapper.setDescription('The overlapper for this rule.')
ltmFwRuleStatOverlapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatOverlapType.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatOverlapType.setDescription('The overlap type.')
ltmFwRuleStatAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 5, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("accept", 0), ("acceptDecisively", 1), ("reject", 2), ("drop", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwRuleStatAction.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatAction.setDescription('The rule action')
ltmFwContextStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatNumber.setDescription('The number of ltmFwContextStat entries in the table.')
ltmFwContextStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2), )
if mibBuilder.loadTexts: ltmFwContextStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatTable.setDescription('A table containing statistic information of Firewall context stats.')
ltmFwContextStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwContextStatContextType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwContextStatContextName"))
if mibBuilder.loadTexts: ltmFwContextStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEntry.setDescription('Columns in the ltmFwContextStat Table')
ltmFwContextStatContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatContextType.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatContextType.setDescription('The context type.')
ltmFwContextStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatContextName.setDescription('The context name.')
ltmFwContextStatEnforcedPacketsAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsAccept.setDescription('The number of packets accepted by enforced policy of this context.')
ltmFwContextStatEnforcedPacketsAcceptDecisively = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsAcceptDecisively.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsAcceptDecisively.setDescription('The number of packets accepted-decisively by enforced policy of this context.')
ltmFwContextStatEnforcedPacketsReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsReject.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsReject.setDescription('The number of packets rejected by enforced policy of this context.')
ltmFwContextStatEnforcedPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDrop.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDrop.setDescription('The number of packets dropped by enforced policy of this context.')
ltmFwContextStatEnforcedPacketsDefaultAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultAccept.setDescription('The number of packets accepted by default rule of enforced policy of this context.')
ltmFwContextStatEnforcedPacketsDefaultReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultReject.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultReject.setDescription('The number of packets rejected by default rule of enforced policy of this context.')
ltmFwContextStatEnforcedPacketsDefaultDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultDrop.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatEnforcedPacketsDefaultDrop.setDescription('The number of packets dropped by default rule of enforced policy of this context.')
ltmFwContextStatStagedPacketsAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsAccept.setDescription('The number of packets accepted by staged policy of this context.')
ltmFwContextStatStagedPacketsAcceptDecisively = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsAcceptDecisively.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsAcceptDecisively.setDescription('The number of packets accepted-decisively by staged policy of this context.')
ltmFwContextStatStagedPacketsReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsReject.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsReject.setDescription('The number of packets rejected by staged policy of this context.')
ltmFwContextStatStagedPacketsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDrop.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDrop.setDescription('The number of packets dropped by staged policy of this context.')
ltmFwContextStatStagedPacketsDefaultAccept = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultAccept.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultAccept.setDescription('The number of packets accepted by default rule of staged policy of this context.')
ltmFwContextStatStagedPacketsDefaultReject = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultReject.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultReject.setDescription('The number of packets rejected by default rule of staged policy of this context.')
ltmFwContextStatStagedPacketsDefaultDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 1, 6, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultDrop.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatStagedPacketsDefaultDrop.setDescription('The number of packets dropped by default rule of staged policy of this context.')
ltmFwPolicyRuleStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatNumber.setDescription('The number of ltmFwPolicyRuleStat entries in the table.')
ltmFwPolicyRuleStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2), )
if mibBuilder.loadTexts: ltmFwPolicyRuleStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatTable.setDescription('A table containing statistic information of Firewall policy rule stats.')
ltmFwPolicyRuleStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleListName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatPolicyName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleStatType"))
if mibBuilder.loadTexts: ltmFwPolicyRuleStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatEntry.setDescription('Columns in the ltmFwPolicyRuleStat Table')
ltmFwPolicyRuleStatContextType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextType.setDescription('The context type.')
ltmFwPolicyRuleStatContextName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatContextName.setDescription('The context name.')
ltmFwPolicyRuleStatRuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleName.setDescription('The rule name.')
ltmFwPolicyRuleStatRuleListName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleListName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleListName.setDescription('The rule list name.')
ltmFwPolicyRuleStatPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatPolicyName.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatPolicyName.setDescription('The policy name.')
ltmFwPolicyRuleStatRuleStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enforced", 1), ("staged", 2), ("active", 3), ("overlapper", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleStatType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatRuleStatType.setDescription('')
ltmFwPolicyRuleStatActualRule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatActualRule.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatActualRule.setDescription('The actual rule name.')
ltmFwPolicyRuleStatCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatCounter.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatCounter.setDescription('The number of packets matching this rule.')
ltmFwPolicyRuleStatLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTime.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTime.setDescription('The last time a packet matched this rule.')
ltmFwPolicyRuleStatLastHitTimeFmt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 10), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTimeFmt.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatLastHitTimeFmt.setDescription('The last time a packet matched this rule, in human readable format.')
ltmFwPolicyRuleStatOverlapper = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapper.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapper.setDescription('The overlapper for this rule.')
ltmFwPolicyRuleStatOverlapType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 16, 2, 2, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapType.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatOverlapType.setDescription('The overlap type.')
ltmTftpProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileNumber.setDescription('The number of ltmTftpProfile entries in the table.')
ltmTftpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2), )
if mibBuilder.loadTexts: ltmTftpProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileTable.setDescription('A table containing information for TFTP profiles.')
ltmTftpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTftpProfileName"))
if mibBuilder.loadTexts: ltmTftpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileEntry.setDescription('Columns in the ltmTftpProfile Table')
ltmTftpProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileName.setDescription('The name of a TFTP profile.')
ltmTftpProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmTftpProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmTftpProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileIdleTimeout.setDescription('The idle timeout for TFTP connections.')
ltmTftpProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmTftpProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 1, 2, 1, 6), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmTftpProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmTftpProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmTftpProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmTftpProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatNumber.setDescription('The number of ltmTftpProfileStat entries in the table.')
ltmTftpProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3), )
if mibBuilder.loadTexts: ltmTftpProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatTable.setDescription('A table containing statistics information for the TFTP profile.')
ltmTftpProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatName"))
if mibBuilder.loadTexts: ltmTftpProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatEntry.setDescription('Columns in the ltmTftpProfileStat Table')
ltmTftpProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatName.setDescription('The name of the TFTP profile.')
ltmTftpProfileStatReadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileStatReadRequests.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatReadRequests.setDescription('The total number of read requests received.')
ltmTftpProfileStatWriteRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileStatWriteRequests.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatWriteRequests.setDescription('The total number of write requests received.')
ltmTftpProfileStatDiscardedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 31, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTftpProfileStatDiscardedRequests.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatDiscardedRequests.setDescription('The total number of requests that were discarded.')
ltmIpsecalgProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileNumber.setDescription('The number of ltmIpsecalgProfile entries in the table.')
ltmIpsecalgProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2), )
if mibBuilder.loadTexts: ltmIpsecalgProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileTable.setDescription('A table containing information for IPsecALG profiles.')
ltmIpsecalgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileName"))
if mibBuilder.loadTexts: ltmIpsecalgProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileEntry.setDescription('Columns in the ltmIpsecalgProfile Table')
ltmIpsecalgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileName.setDescription('The name of a IPsecALG profile.')
ltmIpsecalgProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmIpsecalgProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmIpsecalgProfileIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileIdleTimeout.setDescription('The idle timeout for IPsecALG connections.')
ltmIpsecalgProfilePendingIkeConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfilePendingIkeConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfilePendingIkeConnectionLimit.setDescription('The pending IKE connections limit per client for IPsecALG connections.')
ltmIpsecalgProfileInitialConnectionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileInitialConnectionTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileInitialConnectionTimeout.setDescription('The initial connection timeout for servers to respond to an IKE/IPSEC request.')
ltmIpsecalgProfileLogPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileLogPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileLogPublisher.setDescription('Specifies the name of the log publisher that logs ALG events, if any.')
ltmIpsecalgProfileLogProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 1, 2, 1, 8), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileLogProfile.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileLogProfile.setDescription('Specifies the name of the log profile that control the logging of ALG events, if any.')
ltmKnownMethodsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmKnownMethodsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsNumber.setDescription('The number of ltmHttpProfileKnownMethods entries in the table.')
ltmKnownMethodsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 2), )
if mibBuilder.loadTexts: ltmKnownMethodsTable.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsTable.setDescription('A table containing the known HTTP methods in the HTTP profiles.')
ltmKnownMethodsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsIndex"))
if mibBuilder.loadTexts: ltmKnownMethodsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsEntry.setDescription('Columns in the ltmKnownMethods Table')
ltmKnownMethodsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmKnownMethodsName.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsName.setDescription('The name of a HTTP profile.')
ltmKnownMethodsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmKnownMethodsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsIndex.setDescription('The index of a known HTTP method for the specified HTTP profile.')
ltmKnownMethodsStr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 7, 13, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmKnownMethodsStr.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsStr.setDescription('A known HTTP method in the specified profile.')
ltmIpsecalgProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmIpsecalgProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmIpsecalgProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatNumber.setDescription('The number of ltmIpsecalgProfileStat entries in the table.')
ltmIpsecalgProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3), )
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTable.setDescription('A table containing statistics information for the IPsecALG profile.')
ltmIpsecalgProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatName"))
if mibBuilder.loadTexts: ltmIpsecalgProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatEntry.setDescription('Columns in the ltmIpsecalgProfileStat Table')
ltmIpsecalgProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatName.setDescription('The name of the IPsecALG profile.')
ltmIpsecalgProfileStatIkePackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatIkePackets.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatIkePackets.setDescription('Number of IKE packets.')
ltmIpsecalgProfileStatTunnelCreates = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTunnelCreates.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTunnelCreates.setDescription('Number of tunnel creates.')
ltmIpsecalgProfileStatTunnelTeardowns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTunnelTeardowns.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatTunnelTeardowns.setDescription('Number of tunnel teardowns.')
ltmIpsecalgProfileStatFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatFailures.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatFailures.setDescription('Number of failed connection attempts.')
ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 35, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops.setDescription('Number of dropped IKE connections because a client exceeded its limit of pending unacknowledged connections.')
ltmHttp2ProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileNumber.setDescription('The number of ltmHttp2Profile entries in the table.')
ltmHttp2ProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2), )
if mibBuilder.loadTexts: ltmHttp2ProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileTable.setDescription('A table containing information about the HTTP/2 profile.')
ltmHttp2ProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileName"))
if mibBuilder.loadTexts: ltmHttp2ProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileEntry.setDescription('Columns in the ltmHttp2Profile Table')
ltmHttp2ProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileName.setDescription('The name of a HTTP/2 profile.')
ltmHttp2ProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile \n\t\tor user defined profile.')
ltmHttp2ProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileDefaultName.setDescription('The name of the profile from which the specified profile derives \n\t\tits attribute default values.')
ltmHttp2ProfileInsertHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileInsertHeader.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileInsertHeader.setDescription('The state indicating whether or not an HTTP header that indicates the\n\t         use of HTTP/2 should be inserted into the request going to the back-end\n\t         server.')
ltmHttp2ProfileInsertHeaderName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileInsertHeaderName.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileInsertHeaderName.setDescription('The HTTP header inserted into the request going to the back-end server,\n\t         if that functionality is enabled.')
ltmHttp2ProfileConcurrentStreamsPerConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileConcurrentStreamsPerConnection.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileConcurrentStreamsPerConnection.setDescription('The maximum amount of concurrent streams allowed per connection.')
ltmHttp2ProfileConnectionIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileConnectionIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileConnectionIdleTimeout.setDescription('The amount of time, in seconds, a connection is open idly before it is\n\t         shutdown.')
ltmHttp2ProfileReceiveWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileReceiveWindow.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileReceiveWindow.setDescription('Specifies the size of the receive window in kilobytes. The receive\n\t         window is a mechanism to stall individual upload streams when\n\t         needed.')
ltmHttp2ProfileFrameSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileFrameSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileFrameSize.setDescription('Specifies the size of the data frames, in bytes, that HTTP/2 will send to\n\t         the client. Larger frame sizes will improve network utilization, but\n\t         may affect concurrency.')
ltmHttp2ProfileWriteSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileWriteSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileWriteSize.setDescription('Specifies the total size of combined data frames, in bytes, HTTP/2 will\n\t         send in a single write. This controls the size of the TLS records when\n\t         HTTP/2 is used over SSL. A large write size will cause HTTP/2 to buffer\n\t         more data, but will improve network utilization.')
ltmHttp2ProfileHeaderTableSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileHeaderTableSize.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileHeaderTableSize.setDescription('Specifies the total size of the header table that will be used to\n\t         decompress HTTP/2 requests.')
ltmHttp2ProfileEnforceTlsRequirements = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileEnforceTlsRequirements.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileEnforceTlsRequirements.setDescription('Specifies whether the TLS connection requirements, as\n\t         specified in the HTTP/2 protocol specification, will be enforced.')
ltmHttp2ProfileIncludeContentLength = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileIncludeContentLength.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileIncludeContentLength.setDescription('Ignored.  The Content Length header is always sent.')
ltmHttp2ProfileActivationModesNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesNumber.setDescription('The number of ltmHttp2ProfileActivationModes entries in the table.')
ltmHttp2ProfileActivationModesTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 2), )
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesTable.setDescription('A table containing information on the supported HTTP/2 activation\n\t        modes.')
ltmHttp2ProfileActivationModesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesIndex"))
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesEntry.setDescription('Columns in the ltmHttp2ProfileActivationModes Table')
ltmHttp2ProfileActivationModesName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesName.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesName.setDescription('The name of a HTTP/2 profile.')
ltmHttp2ProfileActivationModesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesIndex.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesIndex.setDescription('The index of the protocol versions used to determine which HTTP/2 \n\t         versions are supported and in what order those versions should be\n\t         prioritized when deciding which version to use. This prioritization is\n\t         only used when the activation mode is set to npn.')
ltmHttp2ProfileActivationModesActivationModes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("alpn", 0), ("npn", 1), ("always", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesActivationModes.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesActivationModes.setDescription('The HTTP/2 version supported.\n\t         alpn - indicates that HTTP/2 will be negotiated through the TLS ALPN extension\n\t         npn - indicates that HTTP/2 will be negotiated through the TLS NPN extension\n\t         always - indicates that HTTP/2 is always active')
ltmHttp2ProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttp2ProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmHttp2ProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttp2ProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatNumber.setDescription('The number of ltmHttp2ProfileStat entries in the table.')
ltmHttp2ProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3), )
if mibBuilder.loadTexts: ltmHttp2ProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatTable.setDescription('A table containing statistics information about the HTTP/2 profile.')
ltmHttp2ProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatName"))
if mibBuilder.loadTexts: ltmHttp2ProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatEntry.setDescription('Columns in the ltmHttp2ProfileStat Table')
ltmHttp2ProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatName.setDescription('The name of the HTTP/2 profile.')
ltmHttp2ProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsAccepted.setDescription('The total number of accepted connections.')
ltmHttp2ProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsCurrent.setDescription('The total number of connections currently active.')
ltmHttp2ProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsMax.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatConnectionsMax.setDescription('The maximum number of connections open simultaneously.')
ltmHttp2ProfileStatContinuationFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatContinuationFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatContinuationFramesReceived.setDescription('The total number of CONTINUATION frames received.')
ltmHttp2ProfileStatContinuationFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatContinuationFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatContinuationFramesSent.setDescription('The total number of CONTINUATION frames sent.')
ltmHttp2ProfileStatDataFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatDataFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatDataFramesReceived.setDescription('The total number of DATA frames received.')
ltmHttp2ProfileStatDataFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatDataFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatDataFramesSent.setDescription('The total number of DATA frames sent.')
ltmHttp2ProfileStatFlowsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsCreated.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsCreated.setDescription('The total number of flows created.')
ltmHttp2ProfileStatFlowsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsCurrent.setDescription('The total number of flows currently active.')
ltmHttp2ProfileStatFlowsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsMax.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatFlowsMax.setDescription('The maximum number of flows open simultaneously.')
ltmHttp2ProfileStatGoawayFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatGoawayFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatGoawayFramesReceived.setDescription('The total number of GOAWAY frames received.')
ltmHttp2ProfileStatGoawayFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatGoawayFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatGoawayFramesSent.setDescription('The total number of GOAWAY frames sent.')
ltmHttp2ProfileStatHeadersFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHeadersFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHeadersFramesReceived.setDescription('The total number of HEADERS frames received.')
ltmHttp2ProfileStatHeadersFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHeadersFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHeadersFramesSent.setDescription('The total number of HEADERS frames sent.')
ltmHttp2ProfileStatHttp2RequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2RequestBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2RequestBytes.setDescription('The total number of HTTP/2 request bytes.')
ltmHttp2ProfileStatHttp2RequestFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2RequestFrames.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2RequestFrames.setDescription('The total number of HTTP/2 request frames.')
ltmHttp2ProfileStatHttp2ResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2ResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2ResponseBytes.setDescription('The total number of HTTP/2 response bytes.')
ltmHttp2ProfileStatHttp2ResponseFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2ResponseFrames.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttp2ResponseFrames.setDescription('The total number of HTTP/2 response frames.')
ltmHttp2ProfileStatHttpRequestBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttpRequestBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttpRequestBytes.setDescription('The total number of HTTP request bytes.')
ltmHttp2ProfileStatHttpResponseBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttpResponseBytes.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatHttpResponseBytes.setDescription('The total number of HTTP response bytes.')
ltmHttp2ProfileStatPingFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPingFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPingFramesReceived.setDescription('The total number of PING frames received.')
ltmHttp2ProfileStatPingFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPingFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPingFramesSent.setDescription('The total number of PING frames sent.')
ltmHttp2ProfileStatPriorityFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPriorityFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPriorityFramesReceived.setDescription('The total number of PRIORITY frames received.')
ltmHttp2ProfileStatPriorityFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPriorityFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPriorityFramesSent.setDescription('The total number of PRIORITY frames sent.')
ltmHttp2ProfileStatPushPromiseFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPushPromiseFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPushPromiseFramesReceived.setDescription('The total number of PUSH_PROMISE frames received.')
ltmHttp2ProfileStatPushPromiseFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatPushPromiseFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatPushPromiseFramesSent.setDescription('The total number of PUSH_PROMISE frames sent.')
ltmHttp2ProfileStatRstStreamFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatRstStreamFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatRstStreamFramesReceived.setDescription('The total number of RST_STREAM frames received.')
ltmHttp2ProfileStatRstStreamFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatRstStreamFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatRstStreamFramesSent.setDescription('The total number of RST_STREAM frames sent.')
ltmHttp2ProfileStatSettingsFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatSettingsFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatSettingsFramesReceived.setDescription('The total number of SETTINGS frames received.')
ltmHttp2ProfileStatSettingsFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatSettingsFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatSettingsFramesSent.setDescription('The total number of SETTINGS frames sent.')
ltmHttp2ProfileStatStreamsCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsCreated.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsCreated.setDescription('The total number of HTTP/2 streams created.')
ltmHttp2ProfileStatStreamsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsCurrent.setDescription('The total number of HTTP/2 streams currently active.')
ltmHttp2ProfileStatStreamsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsMax.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatStreamsMax.setDescription('The maximum number of HTTP/2 streams open simultaneously.')
ltmHttp2ProfileStatWindowUpdateFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatWindowUpdateFramesReceived.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatWindowUpdateFramesReceived.setDescription('The total number of WINDOW_UPDATE frames received.')
ltmHttp2ProfileStatWindowUpdateFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 32, 3, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttp2ProfileStatWindowUpdateFramesSent.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatWindowUpdateFramesSent.setDescription('The total number of WINDOW_UPDATE frames sent.')
ltmLsnPoolFailureStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmLsnPoolFailureStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatResetStats.setDescription('The action to reset resettable statistics data in ltmLsnPoolFailureStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmLsnPoolFailureStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolFailureStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatNumber.setDescription('The number of ltmLsnPoolFailureStat entries in the table.')
ltmLsnPoolFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 3), )
if mibBuilder.loadTexts: ltmLsnPoolFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatTable.setDescription('A table containing statistic information of LSN pool failures.')
ltmLsnPoolFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatFailureCause"))
if mibBuilder.loadTexts: ltmLsnPoolFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatEntry.setDescription('Columns in the ltmLsnPoolFailureStat Table')
ltmLsnPoolFailureStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolFailureStatName.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatName.setDescription('The name of a LSN Pool.')
ltmLsnPoolFailureStatFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolFailureStatFailureCause.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatFailureCause.setDescription('The name of a LSN Pool failure cause.')
ltmLsnPoolFailureStatFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 14, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmLsnPoolFailureStatFailureCount.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatFailureCount.setDescription('The value of a LSN Pool failure cause.')
ltmWebsocketProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileNumber.setDescription('The number of ltmWebsocketProfile entries in the table.')
ltmWebsocketProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2), )
if mibBuilder.loadTexts: ltmWebsocketProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileTable.setDescription('A table containing information about the WebSocket profile.')
ltmWebsocketProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileName"))
if mibBuilder.loadTexts: ltmWebsocketProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileEntry.setDescription('Columns in the ltmWebsocketProfile Table')
ltmWebsocketProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileName.setDescription('The name of a WebSocket profile.')
ltmWebsocketProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmWebsocketProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmWebsocketProfileMasking = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("unmask", 0), ("remask", 1), ("preserve", 2), ("selective", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileMasking.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileMasking.setDescription('The masking operation applied to WebSocket frames.\n\t         unmask - WebSocket feature unmasks the frame and provides cleartext data\n\t                    to other features. The frames are masked again before sending\n\t                    the frames over to the client or server.\n\t         remask - WebSocket feature unmasks the frame and provides cleartext data\n\t                    to other features. The frames are masked using the configured mask again\n\t                    before sending the frames over to the client or server.\n\t         preserve - WebSocket feature does not perform any masking operation on the frames.\n\t         selective - WebSocket feature remasks the frames when required by other features.\n\t                    If no features require remasking, then the mask will be preserved.')
ltmWebsocketProfileCompressMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("preserved", 0), ("typed", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileCompressMode.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileCompressMode.setDescription('The compression mode that the feature operates in.\n\t         preserved - Websocket feature does not perform any decompression/recompression\n\t                        operation on compressed data received from the endpoint. This is the\n\t                        default value.\n\t          typed     - Based on the compression parameters that are configured, the compressed\n\t                        frames may be decompressed. The ensures that cleartext data is provided\n\t                        to other features. Based on configuration, data may be recompressed\n\t                        before being sent on the wire to the endpoint.')
ltmWebsocketProfileCompression = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileCompression.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileCompression.setDescription('Controls whether compression is negotiated with the endpoint in typed mode. The default\n\t         value is enabled.')
ltmWebsocketProfileWindowBits = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileWindowBits.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileWindowBits.setDescription('The maximum window size for compression that is negotiated with the endpoint in typed mode.\n\t         The default value is 10.')
ltmWebsocketProfileNoDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileNoDelay.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileNoDelay.setDescription('In typed mode controls whether data is buffered for efficient compression, or\n\t         compressed without delay. The default value is enabled.')
ltmWebsocketProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmWebsocketProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmWebsocketProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmWebsocketProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatNumber.setDescription('The number of ltmWebsocketProfileStat entries in the table.')
ltmWebsocketProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3), )
if mibBuilder.loadTexts: ltmWebsocketProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatTable.setDescription('A table containing statistics information about the WebSocket profile.')
ltmWebsocketProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatName"))
if mibBuilder.loadTexts: ltmWebsocketProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatEntry.setDescription('Columns in the ltmWebsocketProfileStat Table')
ltmWebsocketProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatName.setDescription('The name of the WebSocket profile.')
ltmWebsocketProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsAccepted.setDescription('The total number of accepted connections.')
ltmWebsocketProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsCurrent.setDescription('The total number of connections currently active.')
ltmWebsocketProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsMax.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatConnectionsMax.setDescription('The maximum number of connections open simultaneously.')
ltmWebsocketProfileStatContFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatContFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatContFramesClientRecv.setDescription('The total number of CONT frames received from client.')
ltmWebsocketProfileStatContFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatContFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatContFramesServerRecv.setDescription('The total number of CONT frames received from server.')
ltmWebsocketProfileStatTextFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatTextFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatTextFramesClientRecv.setDescription('The total number of Text frames received from client.')
ltmWebsocketProfileStatTextFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatTextFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatTextFramesServerRecv.setDescription('The total number of Text frames received from server.')
ltmWebsocketProfileStatBinaryFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatBinaryFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatBinaryFramesClientRecv.setDescription('The total number of Binary frames received from client.')
ltmWebsocketProfileStatBinaryFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatBinaryFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatBinaryFramesServerRecv.setDescription('The total number of Binary frames received from server.')
ltmWebsocketProfileStatCloseFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseFramesClientRecv.setDescription('The total number of Close frames received from client.')
ltmWebsocketProfileStatCloseFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseFramesServerRecv.setDescription('The total number of Close frames received from server.')
ltmWebsocketProfileStatPingFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatPingFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatPingFramesClientRecv.setDescription('The total number of Ping frames received from client.')
ltmWebsocketProfileStatPingFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatPingFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatPingFramesServerRecv.setDescription('The total number of Ping frames received from server.')
ltmWebsocketProfileStatPongFramesClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatPongFramesClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatPongFramesClientRecv.setDescription('The total number of Pong frames received from client.')
ltmWebsocketProfileStatPongFramesServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatPongFramesServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatPongFramesServerRecv.setDescription('The total number of Pong frames received from server.')
ltmWebsocketProfileStatCloseRsnNormalClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnNormalClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnNormalClientRecv.setDescription('The total number of Close frames with reason Normal received from client.')
ltmWebsocketProfileStatCloseRsnNormalServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnNormalServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnNormalServerRecv.setDescription('The total number of Close frames with reason Normal received from server.')
ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv.setDescription('The total number of Close frames with reason Endpoint Going Away received from client.')
ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv.setDescription('The total number of Close frames with reason Endpoint Going Away received from server.')
ltmWebsocketProfileStatCloseRsnProtErrClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProtErrClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProtErrClientRecv.setDescription('The total number of Close frames with reason Protocol Error received from client.')
ltmWebsocketProfileStatCloseRsnProtErrServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProtErrServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProtErrServerRecv.setDescription('The total number of Close frames with reason Protocol Error received from server.')
ltmWebsocketProfileStatCloseRsnProcErrClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProcErrClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProcErrClientRecv.setDescription('The total number of Close frames with reason Processing Error received from client.')
ltmWebsocketProfileStatCloseRsnProcErrServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProcErrServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnProcErrServerRecv.setDescription('The total number of Close frames with reason Processing Error received from server.')
ltmWebsocketProfileStatCloseRsnExtFailClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnExtFailClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnExtFailClientRecv.setDescription('The total number of Close frames with reason Extension Negotiation Fail received from client.')
ltmWebsocketProfileStatCloseRsnExtFailServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnExtFailServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnExtFailServerRecv.setDescription('The total number of Close frames with reason Extension Negotiation Fail received from server.')
ltmWebsocketProfileStatCloseRsnOtherClientRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnOtherClientRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnOtherClientRecv.setDescription('The total number of Close frames with reason Other received from client.')
ltmWebsocketProfileStatCloseRsnOtherServerRecv = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnOtherServerRecv.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatCloseRsnOtherServerRecv.setDescription('The total number of Close frames with reason Other received from server.')
ltmWebsocketProfileStatClientBytesRecdPreCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientBytesRecdPreCompress.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientBytesRecdPreCompress.setDescription('The total number of compression bytes received from the client.')
ltmWebsocketProfileStatClientBytesRecdPostCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientBytesRecdPostCompress.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientBytesRecdPostCompress.setDescription('The total number of decompression bytes received from the client.')
ltmWebsocketProfileStatServerBytesRecdPreCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerBytesRecdPreCompress.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerBytesRecdPreCompress.setDescription('The total number of compression bytes received from the server.')
ltmWebsocketProfileStatServerBytesRecdPostCompress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerBytesRecdPostCompress.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerBytesRecdPostCompress.setDescription('The total number of decompression bytes received from the server.')
ltmWebsocketProfileStatClientCompressionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientCompressionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientCompressionFailures.setDescription('The total number of compression failures on the clientside.')
ltmWebsocketProfileStatServerCompressionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerCompressionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerCompressionFailures.setDescription('The total number of compression failures on the serverside.')
ltmWebsocketProfileStatClientDecompressionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientDecompressionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatClientDecompressionFailures.setDescription('The total number of decompression failures on the clientside.')
ltmWebsocketProfileStatServerDecompressionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 33, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerDecompressionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatServerDecompressionFailures.setDescription('The total number of decompression failures on the serverside.')
ltmTcpanalyticsProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileNumber.setDescription('The number of ltmTcpanalyticsProfile entries in the table.')
ltmTcpanalyticsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2), )
if mibBuilder.loadTexts: ltmTcpanalyticsProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileTable.setDescription('A table containing configuration of TCP Analytics.')
ltmTcpanalyticsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileName"))
if mibBuilder.loadTexts: ltmTcpanalyticsProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileEntry.setDescription('Columns in the ltmTcpanalyticsProfile Table')
ltmTcpanalyticsProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileName.setDescription('The name of a TCP analytics profile.')
ltmTcpanalyticsProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured\n\t        profile or user defined profile.')
ltmTcpanalyticsProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmTcpanalyticsProfileCollectedByClientSide = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedByClientSide.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedByClientSide.setDescription('If true, client side connections collect TCP analytics data unless\n\t        directed otherwise by iRule. If false, client side connections only\n\t        collect data if directed by iRule.')
ltmTcpanalyticsProfileCollectedByServerSide = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedByServerSide.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedByServerSide.setDescription('If true, server side connections collect TCP analytics data unless\n\t        directed otherwise by iRule. If false, server side connections only\n\t        collect data if directed by iRule.')
ltmTcpanalyticsProfileCollectCity = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectCity.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectCity.setDescription('If true, AVR stores the city (from the GeoIP database) for the\n\t        remote IP address of the connection with TCP statistics. See\n\t        SOL11176 on support.f5.com for more on GeoIP.')
ltmTcpanalyticsProfileCollectContinent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectContinent.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectContinent.setDescription('If true, AVR stores the continent (from the GeoIP database) for the\n\t        remote IP address of the connection with TCP statistics. See\n\t        SOL11176 on support.f5.com for more on GeoIP.')
ltmTcpanalyticsProfileCollectCountry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectCountry.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectCountry.setDescription('If true, AVR stores the country (from the GeoIP database) for the\n\t        remote IP address of the connection with TCP statistics. See\n\t        SOL11176 on support.f5.com for more on GeoIP.')
ltmTcpanalyticsProfileCollectNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectNexthop.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectNexthop.setDescription('If true, AVR stores the next hop ethernet address of the connection\n\t        with TCP statistics.')
ltmTcpanalyticsProfileCollectPostCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectPostCode.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectPostCode.setDescription('If true, AVR stores the postcode (from the GeoIP database) for the\n\t        remote IP address of the connection with TCP statistics. See\n\t        SOL11176 on support.f5.com for more on GeoIP.')
ltmTcpanalyticsProfileCollectRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRegion.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRegion.setDescription('If true, AVR stores the region (from the GeoIP database) for the\n\t        remote IP address of the connection with TCP statistics. See\n\t        SOL11176 on support.f5.com for more on GeoIP.')
ltmTcpanalyticsProfileCollectRemoteHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRemoteHostIp.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRemoteHostIp.setDescription('If true, AVR stores the remote host IP address with TCP\n\t        statistics.')
ltmTcpanalyticsProfileCollectRemoteHostSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRemoteHostSubnet.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectRemoteHostSubnet.setDescription('If true, AVR stores the remote host IP subnet (24-bit) with TCP\n\t        statistics.')
ltmTcpanalyticsProfileCollectedStatsInternalLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedStatsInternalLogging.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedStatsInternalLogging.setDescription('If true, TCP statistics are logged on the local BIG-IP.')
ltmTcpanalyticsProfileCollectedStatsExternalLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedStatsExternalLogging.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileCollectedStatsExternalLogging.setDescription('If true, TCP statistics are logged on a remote machine.')
ltmTcpanalyticsProfileExternalLoggingPublisher = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 34, 1, 2, 1, 16), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmTcpanalyticsProfileExternalLoggingPublisher.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileExternalLoggingPublisher.setDescription('The name of the publisher to accept external logging.')
ltmSplitsessionclientProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileNumber.setDescription('The number of ltmSplitsessionclientProfile entries in the table.')
ltmSplitsessionclientProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2), )
if mibBuilder.loadTexts: ltmSplitsessionclientProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileTable.setDescription('A table containing information about the Splitsessionclient profile.')
ltmSplitsessionclientProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileName"))
if mibBuilder.loadTexts: ltmSplitsessionclientProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileEntry.setDescription('Columns in the ltmSplitsessionclientProfile Table')
ltmSplitsessionclientProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileName.setDescription('The name of a Splitsessionclient profile.')
ltmSplitsessionclientProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmSplitsessionclientProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmSplitsessionclientProfilePeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfilePeerIp.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfilePeerIp.setDescription('The IP address of the peer that is used for Out-of-band connection.')
ltmSplitsessionclientProfilePeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfilePeerPort.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfilePeerPort.setDescription('The port of the peer that is used for Out-of-band connection.')
ltmSplitsessionclientProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSplitsessionclientProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSplitsessionclientProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatNumber.setDescription('The number of ltmSplitsessionclientProfileStat entries in the table.')
ltmSplitsessionclientProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3), )
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatTable.setDescription('A table containing statistics information about the Splitsessionclient profile.')
ltmSplitsessionclientProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatName"))
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatEntry.setDescription('Columns in the ltmSplitsessionclientProfileStat Table')
ltmSplitsessionclientProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatName.setDescription('The name of the Splitsessionclient profile.')
ltmSplitsessionclientProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsAccepted.setDescription('The total number of accepted connections.')
ltmSplitsessionclientProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsCurrent.setDescription('The total number of connections currently active.')
ltmSplitsessionclientProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnectionsMax.setDescription('The maximum number of connections open simultaneously.')
ltmSplitsessionclientProfileStatConnPeerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerActive.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerActive.setDescription('The total number of Out-of-band connections established with the peer.')
ltmSplitsessionclientProfileStatConnPeerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerTimeout.setDescription('The total number of Out-of-band connections that timed out.')
ltmSplitsessionclientProfileStatConnPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerReset.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatConnPeerReset.setDescription('The total number of Out-of-band connections that were reset.')
ltmSplitsessionclientProfileStatPeerMsgRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatPeerMsgRecd.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatPeerMsgRecd.setDescription('The total number of messages received over the Out-of-band connections.')
ltmSplitsessionclientProfileStatPeerMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 36, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatPeerMsgSent.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatPeerMsgSent.setDescription('The total number of messages sent over the Out-of-band connections.')
ltmSplitsessionserverProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileNumber.setDescription('The number of ltmSplitsessionserverProfile entries in the table.')
ltmSplitsessionserverProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2), )
if mibBuilder.loadTexts: ltmSplitsessionserverProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileTable.setDescription('A table containing information about the Splitsessionserver profile.')
ltmSplitsessionserverProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileName"))
if mibBuilder.loadTexts: ltmSplitsessionserverProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileEntry.setDescription('Columns in the ltmSplitsessionserverProfile Table')
ltmSplitsessionserverProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileName.setDescription('The name of a Splitsessionserver profile.')
ltmSplitsessionserverProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmSplitsessionserverProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmSplitsessionserverProfileListenIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileListenIp.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileListenIp.setDescription('The IP address that the peer uses to connect for Out-of-band connection.')
ltmSplitsessionserverProfileListenPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 1, 2, 1, 5), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileListenPort.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileListenPort.setDescription('The port that the peer uses to connect for Out-of-band connection.')
ltmSplitsessionserverProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSplitsessionserverProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSplitsessionserverProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatNumber.setDescription('The number of ltmSplitsessionserverProfileStat entries in the table.')
ltmSplitsessionserverProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3), )
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatTable.setDescription('A table containing statistics information about the Splitsessionserver profile.')
ltmSplitsessionserverProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatName"))
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatEntry.setDescription('Columns in the ltmSplitsessionserverProfileStat Table')
ltmSplitsessionserverProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatName.setDescription('The name of the Splitsessionserver profile.')
ltmSplitsessionserverProfileStatConnectionsAccepted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsAccepted.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsAccepted.setDescription('The total number of accepted connections.')
ltmSplitsessionserverProfileStatConnectionsCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsCurrent.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsCurrent.setDescription('The total number of connections currently active.')
ltmSplitsessionserverProfileStatConnectionsMax = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsMax.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnectionsMax.setDescription('The maximum number of connections open simultaneously.')
ltmSplitsessionserverProfileStatConnPeerActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerActive.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerActive.setDescription('The total number of Out-of-band connections established with the peer.')
ltmSplitsessionserverProfileStatConnPeerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerTimeout.setDescription('The total number of Out-of-band connections that timed out.')
ltmSplitsessionserverProfileStatConnPeerReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerReset.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatConnPeerReset.setDescription('The total number of Out-of-band connections that were reset.')
ltmSplitsessionserverProfileStatPeerMsgRecd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatPeerMsgRecd.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatPeerMsgRecd.setDescription('The total number of messages received over the Out-of-band connections.')
ltmSplitsessionserverProfileStatPeerMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 37, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatPeerMsgSent.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatPeerMsgSent.setDescription('The total number of messages sent over the Out-of-band connections.')
ltmHttpProxyConnectProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileNumber.setDescription('The number of ltmHttpProxyConnectProfile entries in the table.')
ltmHttpProxyConnectProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2), )
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileTable.setDescription('A table containing information about the HTTP Proxy Connect profile.')
ltmHttpProxyConnectProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileName"))
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileEntry.setDescription('Columns in the ltmHttpProxyConnectProfile Table')
ltmHttpProxyConnectProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileName.setDescription('The name of a HTTP Proxy Connect profile.')
ltmHttpProxyConnectProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t\tor user defined profile.')
ltmHttpProxyConnectProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t\tits attribute default values.')
ltmHttpProxyConnectProfileDefaultState = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileDefaultState.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileDefaultState.setDescription('Enable proxy chaining by default, or not.')
ltmHttpProxyConnectProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmHttpProxyConnectProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmHttpProxyConnectProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatNumber.setDescription('The number of ltmHttpProxyConnectProfileStat entries in the table.')
ltmHttpProxyConnectProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3), )
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatTable.setDescription('A table containing statistic information of HTTP Proxy Connect profiles.')
ltmHttpProxyConnectProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatName"))
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatEntry.setDescription('Columns in the ltmHttpProxyConnectProfileStat Table')
ltmHttpProxyConnectProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatName.setDescription('The name of a HTTP Proxy Connect profile.')
ltmHttpProxyConnectProfileStatResp2xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp2xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp2xxCnt.setDescription('The number of server-side responses in range of 200 to 206 \n\t\t (successful responses)')
ltmHttpProxyConnectProfileStatResp3xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp3xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp3xxCnt.setDescription('The number of server-side responses in range of 300 to 307 \n\t\t (redirection responses).')
ltmHttpProxyConnectProfileStatResp4xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp4xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp4xxCnt.setDescription('The number of server-side responses in range of 400 to 417  \n\t\t (client errors).')
ltmHttpProxyConnectProfileStatResp5xxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp5xxCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatResp5xxCnt.setDescription('The number of server-side responses in range of 500 to 505 \n\t\t (server errors).')
ltmHttpProxyConnectProfileStatRespOtherCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatRespOtherCnt.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatRespOtherCnt.setDescription('The number of server-side responses with other status ids.')
ltmHttpProxyConnectProfileStatV9Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV9Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV9Resp.setDescription('The total number of version 9 responses.')
ltmHttpProxyConnectProfileStatV10Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV10Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV10Resp.setDescription('The total number of version 10 responses.')
ltmHttpProxyConnectProfileStatV11Resp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV11Resp.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatV11Resp.setDescription('The total number of version 11 responses.')
ltmHttpProxyConnectProfileStatProxyConnReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 38, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatProxyConnReqs.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatProxyConnReqs.setDescription('The total number of CONNECT requests.')
ltmDiametersessionProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileNumber.setDescription('The number of ltmDiametersessionProfile entries in the table.')
ltmDiametersessionProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2), )
if mibBuilder.loadTexts: ltmDiametersessionProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileTable.setDescription('A table containing configuration information for diameter session profiles.')
ltmDiametersessionProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileName"))
if mibBuilder.loadTexts: ltmDiametersessionProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileEntry.setDescription('Columns in the ltmDiametersessionProfile Table')
ltmDiametersessionProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileName.setDescription('The Name of the diametersession profile.')
ltmDiametersessionProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t      or user defined profile.')
ltmDiametersessionProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t      its attribute default values.')
ltmDiametersessionProfileRouteUnconfiguredPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRouteUnconfiguredPeers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRouteUnconfiguredPeers.setDescription('When it is\n\t    enabled, unconfigured peers is added to the route table.')
ltmDiametersessionProfileHandshakeTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileHandshakeTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileHandshakeTimeout.setDescription('Indicates the number of seconds\n\t    before the handshake times out to a peer.')
ltmDiametersessionProfileMaxRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxRetransmissions.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxRetransmissions.setDescription('Number of times, the peer tries to\n\t    retransmit the message.')
ltmDiametersessionProfileMaxWatchdogFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxWatchdogFailures.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxWatchdogFailures.setDescription('Specifies the maximum number of\n\t    device watchdog failures that the traffic management system can\n\t    take before it tears down the connection. After the system\n\t    receives this number of device watchdog failures, it closes the\n\t    connection if the reset-on-timeout is enabled. However, if the\n\t    reset-on-timeout is not enabled, but the watchdog timeout count is\n\t    great and equal than 3 times of max-watchdog-failures, then the\n\t    connection is closed.')
ltmDiametersessionProfileResetOnTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileResetOnTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileResetOnTimeout.setDescription('When it is enabled\n\t    and the watchdog failures exceed the max watchdog failure, the\n\t    system resets the connection. The default value is enabled.')
ltmDiametersessionProfileRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionTimeout.setDescription('Specifies the retransmission\n\t    timeout in seconds. This setting specifies the number of seconds\n\t    the BIG-IP waits to retransmit the request messages if it does not\n\t    receive the corresponding answer messages. The default value is\n\t    10.')
ltmDiametersessionProfileRetransmissionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionAction.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionAction.setDescription('Specifies the action to be\n\t    performed when retransmission is triggered for a request message.\n\t    disable: retransmission is disabled busy: A busy answer is sent to\n\t    the originator of the request unavailable: A unable to deliver\n\t    answer is sent to the originator of the request retransmit: the\n\t    request message will be retransmitted.')
ltmDiametersessionProfileArrayRetransmissionErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 11), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayRetransmissionErrorCode.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayRetransmissionErrorCode.setDescription('Specifies a list of\n\t    DIAMETER error codes that if an answer message is received\n\t    containing one of the listed error codes, the corresponding\n\t    request will be retransmitted as directed by the\n\t    retransmission-action.  Each error-code in the list is limited\n\t    from 1000 to 6999')
ltmDiametersessionProfileRetransmissionQueueMaxMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueMaxMessages.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueMaxMessages.setDescription('Specifies the\n\t    maximum number of messages that may be held in the retransmission\n\t    message queue. If a request message is received that is enabled\n\t    for retransmission and the retransmission queue has reached its\n\t    configured limit, a busy answer will be returned to the\n\t    originator. A value of zero disables the limit.')
ltmDiametersessionProfileRetransmissionQueueMaxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueMaxBytes.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueMaxBytes.setDescription('Specifies the maximum\n\t    number of bytes that may be held in the retransmission message\n\t    queue. If a request message is received that is enabled for\n\t    retransmission and the retransmission queue has reached its\n\t    configured limit, a busy answer will be returned to the\n\t    originator. A value of zero disables the limit.')
ltmDiametersessionProfileRetransmissionQueueLimitHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueLimitHigh.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueLimitHigh.setDescription('Specifies the high\n\t    watermark for the retransmission queue in percent. If the number\n\t    of messages or bytes in the retransmission queue for a connection\n\t    exceeds the high watermark, the TCP window will begin to close. If\n\t    zero value disables closing the TCP window based on queue size.')
ltmDiametersessionProfileRetransmissionQueueLimitLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueLimitLow.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileRetransmissionQueueLimitLow.setDescription('Specifies the low\n\t    watermark for the retransmission queue in percent. If the number\n\t    of messages or bytes in the retransmission queue for a connection\n\t    drops below the low watermark, the TCP window will reopen.')
ltmDiametersessionProfileDiscardUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDiscardUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDiscardUnroutable.setDescription('If enabled,\n\t    discard unroutable messages.')
ltmDiametersessionProfileLoopDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileLoopDetection.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileLoopDetection.setDescription('If enabled, detect and\n\t    reject (error response) looped request messages.')
ltmDiametersessionProfileWatchdogTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileWatchdogTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileWatchdogTimeout.setDescription('Specifies the watchdog timeout in\n\t    seconds. This setting specifies the number of seconds that a\n\t    connection is idle before the device watchdog request is sent. The\n\t    default value is 0, which means BIG-IP will not send a device\n\t    watchdog request to either client or server side.')
ltmDiametersessionProfileMaxMessageSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxMessageSize.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileMaxMessageSize.setDescription('Maximum bytes that will be allowed\n\t    for the messages. The default value is 0, which means no such\n\t    restriction is allowed in BIG-IP.')
ltmDiametersessionProfilePersistType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistType.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistType.setDescription('Specifies the type of the persistence.\n\t       None - Persistence is disabled\n\t       AVP - To persist based on avp in the message.\n\t       Custom - To persist based on the custom key specified using iRule.')
ltmDiametersessionProfilePersistAvp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 21), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistAvp.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistAvp.setDescription("Specifies the Diameter AVP that is used\n\t    for persistence. The format is avp[index] for a single AVP or\n\t    a[x]:b[y]:c[z]:d[w] for a grouped AVP. There may be at most 4 AVPs\n\t    in a group. The AVP name is used as the session-key; it may be an\n\t    ASCII string or numeric ID in the range 1 to 4294967295 (AVP code\n\t    can be specified instead of AVP name). The default value is\n\t    'SESSION-ID[0]'. A grouped-avp can be specified with the following\n\t    syntax:\n\t    grouped-avp-name[index]:nested-avp1[index1]:nested-avp2[index2],\n\t    where nested-avp1 and nested-avp2 are the AVPs in the grouped\n\t    AVP.")
ltmDiametersessionProfilePersistTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePersistTimeout.setDescription('Indicates the timeout value for\n\t    persistence entries in seconds. Its recommended to have the\n\t    persist-timeout to be greater than transaction timeout, specified\n\t    in the Diameter router configuration, as the lesser of the two is\n\t    used when creating the persist record on receiving of the first\n\t    Diameter request message. Upon receiving of the response for the\n\t    first Diameter request message the persistence record is updated\n\t    with the persist-timeout value. (For any subsequent responses\n\t    received the persist timeout is updated for the persist\n\t    record.)')
ltmDiametersessionProfileOriginHostRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginHostRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginHostRewrite.setDescription('Rewrites the Origin-Host AVP to\n\t    the specified value on the egress.')
ltmDiametersessionProfileOriginRealmRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 24), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginRealmRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginRealmRewrite.setDescription('Rewrites the Origin-Host AVP to\n\t    the specified value on the egress.')
ltmDiametersessionProfileDestHostRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDestHostRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDestHostRewrite.setDescription('Rewrites the Destination-Host AVP\n\t    to the specified value on the egress.')
ltmDiametersessionProfileDestRealmRewrite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 26), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDestRealmRewrite.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDestRealmRewrite.setDescription('Rewrites the Destination-Realm AVP\n\t    to the specified value on the egress.')
ltmDiametersessionProfileOriginHost = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 27), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginHost.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginHost.setDescription('Specifies the identifier of the\n\t    originating server in the form siteserver.f5.com. Must specify the\n\t    origin-host.')
ltmDiametersessionProfileOriginRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 28), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginRealm.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileOriginRealm.setDescription('Origin-Realm AVP data. Must specify the\n\t    origin-realm.')
ltmDiametersessionProfileHostIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 29), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileHostIpAddress.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileHostIpAddress.setDescription("Specifies the IP address of the\n\t    diameter server. If no value is specified, the system uses the\n\t    BIG-IP system's IP address on the VLAN that the system uses to\n\t    generate traffic to the server.")
ltmDiametersessionProfileVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 30), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorId.setDescription('Specifies the vendor identification number\n\t    assigned to your diameter server by the Internet Assigned Numbers\n\t    Authority (IANA). The default is 0.')
ltmDiametersessionProfileFirmwareRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 31), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileFirmwareRevision.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileFirmwareRevision.setDescription('Specifies the firmware revision of\n\t    the issuing device to inform a diameter peer. The default value\n\t    is 1.')
ltmDiametersessionProfileProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 32), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileProductName.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileProductName.setDescription('Specifies the vendor-assigned name for\n\t    the product.')
ltmDiametersessionProfileAuthApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 33), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileAuthApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileAuthApplicationId.setDescription('Specifies the Authentication and\n\t    Authorization identifier for a specific application, as specified\n\t    in RFC 6733.')
ltmDiametersessionProfileAcctApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 34), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileAcctApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileAcctApplicationId.setDescription('Specifies the Accounting\n\t    identifier for a specific application, as specified in RFC\n\t    6733.')
ltmDiametersessionProfileArrayAuthApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 35), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayAuthApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayAuthApplicationId.setDescription('Specifies a space separted\n\t    list of Authentication and Authorization identifiers for a\n\t    specific application, as specified in RFC 6733.')
ltmDiametersessionProfileArrayAcctApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 36), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayAcctApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileArrayAcctApplicationId.setDescription('Specifies a space separated\n\t    list of Accounting identifiers for a specific application, as\n\t    specified in RFC 6733.')
ltmDiametersessionProfileVendorSpecificVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 37), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificVendorId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificVendorId.setDescription('Specifies the vendor\n\t    identification number for the vendor-specific application.')
ltmDiametersessionProfileVendorSpecificAuthApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificAuthApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificAuthApplicationId.setDescription('Specifies the\n\t    authentication identification number for the vendor-specific\n\t    application.')
ltmDiametersessionProfileVendorSpecificAcctApplicationId = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificAcctApplicationId.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileVendorSpecificAcctApplicationId.setDescription('Specifies the\n\t    accounting identification number for the vendor-specific\n\t    application.')
ltmDiametersessionProfilePeerDelayCriticalLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerDelayCriticalLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerDelayCriticalLimit.setDescription('Specifies the critical limit\n\t    threshold for peer delay.')
ltmDiametersessionProfileEgressCriticalMessageRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileEgressCriticalMessageRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileEgressCriticalMessageRateLimit.setDescription('Specifies the\n\t    critical message rate limit threshold for messages sent to peer.')
ltmDiametersessionProfileEgressMajorMessageRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileEgressMajorMessageRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileEgressMajorMessageRateLimit.setDescription('Specifies the\n\t    major message rate limit threshold for messages sent to peer.')
ltmDiametersessionProfileIngressCriticalMessageRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileIngressCriticalMessageRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileIngressCriticalMessageRateLimit.setDescription('Specifies the\n\t    critical message rate limit threshold for messages received from peer.')
ltmDiametersessionProfileIngressMajorMessageRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileIngressMajorMessageRateLimit.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileIngressMajorMessageRateLimit.setDescription('Specifies the\n\t    major message rate limit threshold for messages received peer.')
ltmDiametersessionProfileDynamicRouteInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteInsertion.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteInsertion.setDescription('If enabled,\n\t    dynamically add routes for connected peers.')
ltmDiametersessionProfileDynamicRouteLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteLookup.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteLookup.setDescription('If enabled,\n\t    route messages based on dynamically added routes.')
ltmDiametersessionProfileDynamicRouteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDynamicRouteTimeout.setDescription('Specifies the duration after\n\t    which dynamic routes will be removed after the releated peer\n\t    connections are closed.')
ltmDiametersessionProfilePeerErrorsMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerErrorsMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerErrorsMajorThreshold.setDescription('Specifies the major limit\n\t    threshold for peer errors.')
ltmDiametersessionProfilePeerTimeoutsMajorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerTimeoutsMajorThreshold.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfilePeerTimeoutsMajorThreshold.setDescription('Specifies the major limit\n\t    threshold for peer timeouts.')
ltmDiametersessionProfileDisconnectPeerAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileDisconnectPeerAction.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileDisconnectPeerAction.setDescription('Specifies the type of action \n\t    taken when Disconnect Peer Request received from peer. \n\t       None: Terminates connection on receiving DPR.Connection can be re-established between peer and BIGIP.\n\t       Disable: When set to Disabled, a node  continues to process persistent and active connections. \n\t       It can accept new connections only if the connections belong to an existing persistent sessions. \n\t       Force-offline: When set to Forced Offline, a node allows existing connections to time out, but no new connections are allowed.\n\t    default value is None.')
ltmDiametersessionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmDiametersessionProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDiametersessionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatNumber.setDescription('The number of ltmDiametersessionProfileStat entries in the table.')
ltmDiametersessionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3), )
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTable.setDescription('A table containing statistic information for diameter session profiles.')
ltmDiametersessionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatName"))
if mibBuilder.loadTexts: ltmDiametersessionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatEntry.setDescription('Columns in the ltmDiametersessionProfileStat Table')
ltmDiametersessionProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatName.setDescription('The Name of the diametersession profile.')
ltmDiametersessionProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatVsName.setDescription('The Name of the virtual server.')
ltmDiametersessionProfileStatTotCapExcReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCapExcReq.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCapExcReq.setDescription('Displays the number of Capabilities Exchange Request messages.')
ltmDiametersessionProfileStatTotCapExcAns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCapExcAns.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCapExcAns.setDescription('Displays the number of Capabilities Exchange Answer messages.')
ltmDiametersessionProfileStatTotDeviceWatchdogRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDeviceWatchdogRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDeviceWatchdogRequests.setDescription('Displays the number of Device Watchdog Request messages.')
ltmDiametersessionProfileStatTotDeviceWatchdogAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDeviceWatchdogAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDeviceWatchdogAnswers.setDescription('Displays the number of Device Watchdog Answers messages.')
ltmDiametersessionProfileStatTotDisconnectPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDisconnectPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDisconnectPeerRequests.setDescription('Displays the number of Disconnect Peer Request messages.')
ltmDiametersessionProfileStatTotDisconnectPeerAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDisconnectPeerAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDisconnectPeerAnswers.setDescription('Displays the number of Disconnect Peer Answer messages.')
ltmDiametersessionProfileStatTotAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotAccountingRequests.setDescription('Displays the number of Accounting Request messages.')
ltmDiametersessionProfileStatTotAccountingAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotAccountingAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotAccountingAnswers.setDescription('Displays the number of Accounting Answers messages.')
ltmDiametersessionProfileStatTotCreditControlRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCreditControlRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCreditControlRequests.setDescription('Displays the number of Credit Control Request messages.')
ltmDiametersessionProfileStatTotCreditControlAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCreditControlAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotCreditControlAnswers.setDescription('Displays the number of Credit Control Answers messages.')
ltmDiametersessionProfileStatTotUserAuthorizationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotUserAuthorizationRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotUserAuthorizationRequests.setDescription('Displays the number of User Authorization Request messages.')
ltmDiametersessionProfileStatTotUserAuthorizationAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotUserAuthorizationAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotUserAuthorizationAnswers.setDescription('Displays the number of User Authorization Answers messages.')
ltmDiametersessionProfileStatTotOtherRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotOtherRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotOtherRequests.setDescription('Displays the number of Other Request messages.')
ltmDiametersessionProfileStatTotOtherAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotOtherAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotOtherAnswers.setDescription('Displays the number of Other Answers messages.')
ltmDiametersessionProfileStatTotBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotBadMessages.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotBadMessages.setDescription('Displays the number of Bad Messages.')
ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers.setDescription('Displays the number of Messages Rejected for Unconfigured Peers.')
ltmDiametersessionProfileStatCurReqQueuedForRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurReqQueuedForRetrans.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurReqQueuedForRetrans.setDescription('Displays the current number of request messages queued for retransmission.')
ltmDiametersessionProfileStatTotRetransReturnedBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReturnedBusy.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReturnedBusy.setDescription('Displays the total number of requests triggered for retransmission that returned a busy answer.')
ltmDiametersessionProfileStatTotRetransReturnedUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReturnedUnavail.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReturnedUnavail.setDescription('Displays the total number of requests triggered for retransmission that returned a unable to deliver answer.')
ltmDiametersessionProfileStatTotRetransReqRetransmitted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReqRetransmitted.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransReqRetransmitted.setDescription('Displays the total number of requests retransmitted.')
ltmDiametersessionProfileStatTotRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionTimeout.setDescription('Displays the total number of requests triggered for retransmission due to timeout.')
ltmDiametersessionProfileStatTotRetransmissionErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionErrorCode.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionErrorCode.setDescription('Displays the total number of requests triggered for retransmission due a error code.')
ltmDiametersessionProfileStatTotRetransmissionIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionIrule.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRetransmissionIrule.setDescription('Displays the total number of requests triggered for retransmission by iRule command.')
ltmDiametersessionProfileStatTotRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRequestReceived.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRequestReceived.setDescription('Displays the number of request messages received.')
ltmDiametersessionProfileStatTotRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRequestSent.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRequestSent.setDescription('Displays the number of request messages sent.')
ltmDiametersessionProfileStatTotDiscardUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDiscardUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotDiscardUnroutable.setDescription('Displays the number of unroutable request messages dropped automatically.')
ltmDiametersessionProfileStatTotRespondUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRespondUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotRespondUnroutable.setDescription('Displays the number of unroutable request messages converted to error\n\t     answer messages automatically.')
ltmDiametersessionProfileStatAveRequestLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveRequestLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveRequestLatency.setDescription('Displays the average L7 processing latency for diameter request messages\n\t     over the last second (in milliseconds).')
ltmDiametersessionProfileStatAveAnswerLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveAnswerLatency.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveAnswerLatency.setDescription('Displays the average L7 processing latency for diameter answer messages\n\t     over the last second. (in milliseconds).')
ltmDiametersessionProfileStatAvePeerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAvePeerDelay.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAvePeerDelay.setDescription('Displays the average time between forwarding a request message to a peer and\n\t     receiving the answer message from that peer over the last second (in milliseconds).')
ltmDiametersessionProfileStatAveRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatAveRoundTripTime.setDescription('Displays the average time between receiving a request message and\n\t     forwarding the answer message over the last second (in milliseconds).')
ltmDiametersessionProfileStatCurTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurTrafficRate.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurTrafficRate.setDescription('Displays the number of requests and responses sent and received over the\n\t     last second.')
ltmDiametersessionProfileStatCurErrorAnswerRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurErrorAnswerRatio.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurErrorAnswerRatio.setDescription('Displays the percentage of answer messages received containing an\n\t     error result code (3000-5999).')
ltmDiametersessionProfileStatCurTimeoutRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurTimeoutRatio.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatCurTimeoutRatio.setDescription('Displays the percentage of answer messages unanswered.')
ltmDiametersessionProfileStatTotResultCodeRcvd1xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd1xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd1xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 1000-1999.')
ltmDiametersessionProfileStatTotResultCodeRcvd2xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd2xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd2xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 2000-2999.')
ltmDiametersessionProfileStatTotResultCodeRcvd3xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd3xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd3xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 3000-3999.')
ltmDiametersessionProfileStatTotResultCodeRcvd4xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd4xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd4xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 4000-4999.')
ltmDiametersessionProfileStatTotResultCodeRcvd5xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd5xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeRcvd5xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 5000-5999.')
ltmDiametersessionProfileStatTotResultCodeSent1xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent1xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent1xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 1000-1999.')
ltmDiametersessionProfileStatTotResultCodeSent2xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent2xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent2xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 2000-2999.')
ltmDiametersessionProfileStatTotResultCodeSent3xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent3xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent3xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 3000-3999.')
ltmDiametersessionProfileStatTotResultCodeSent4xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent4xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent4xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 4000-4999.')
ltmDiametersessionProfileStatTotResultCodeSent5xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent5xxx.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotResultCodeSent5xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 5000-5999.')
ltmDiametersessionProfileStatTotLoopedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 39, 2, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotLoopedRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatTotLoopedRequests.setDescription('Displays the total number of looped messages that have been detected.')
ltmDiameterrouterProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileNumber.setDescription('The number of ltmDiameterrouterProfile entries in the table.')
ltmDiameterrouterProfileTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2), )
if mibBuilder.loadTexts: ltmDiameterrouterProfileTable.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileTable.setDescription('A table containing configuration information for diameter router profiles.')
ltmDiameterrouterProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileName"))
if mibBuilder.loadTexts: ltmDiameterrouterProfileEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileEntry.setDescription('Columns in the ltmDiameterrouterProfile Table')
ltmDiameterrouterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileName.setDescription('The Name of the diameterrouter profile.')
ltmDiameterrouterProfileConfigSource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("usercfg", 0), ("basecfg", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileConfigSource.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileConfigSource.setDescription('The state that specifies whether this is a base/pre-configured profile\n\t      or user defined profile.')
ltmDiameterrouterProfileDefaultName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileDefaultName.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileDefaultName.setDescription('The name of the profile from which the specified profile derives\n\t      its attribute default values.')
ltmDiameterrouterProfileMirrored = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileMirrored.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileMirrored.setDescription('Enables mirroring of all incoming connections\n\t    for all virtual servers using this router instance, and all\n\t    outgoing connection created by this router instance.')
ltmDiameterrouterProfileTrafficGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileTrafficGroup.setDescription('The traffic group for the router\n\t    instance. All virtual servers using this router profile will have\n\t    the their traffic group replaced by the traffic group of the\n\t    router profile.')
ltmDiameterrouterProfileSupportedApplications = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileSupportedApplications.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileSupportedApplications.setDescription('List of supported application-ids')
ltmDiameterrouterProfileIgnorePeerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileIgnorePeerPort.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileIgnorePeerPort.setDescription('If set, the remote port on the peers\n\t    connecting to BIGIP is ignored when searching for an existing\n\t    connection.')
ltmDiameterrouterProfileMaxPendingMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxPendingMessages.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxPendingMessages.setDescription('The maximum number of pending\n\t    messages that are held while waiting for a connection to a peer to\n\t    be created. Once reached any additional messages to the peer are\n\t    flagged as undeliverable and dropped. A default value of 0, uses\n\t    default value 256.')
ltmDiameterrouterProfileMaxPendingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxPendingBytes.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxPendingBytes.setDescription('The maximum number of bytes\n\t    contained within pending messages that are held while waiting for\n\t    a connection to a peer to be created. Once reached any additional\n\t    messages to the peer are flagged as undeliverable and dropped. A\n\t    default value of 0, uses default value 32768.')
ltmDiameterrouterProfileHaMsgSweeperInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileHaMsgSweeperInterval.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileHaMsgSweeperInterval.setDescription('This attribute sets the\n\t    frequency of the mirrored message sweeper. For virtual servers\n\t    where mirroring is enabled, the received messages will be\n\t    processed on both the active device and the standby device. On the\n\t    standby device, the messages are not routed, instead they are\n\t    stored in a message store until the active device sends a\n\t    notification that the message has been routed to the standby\n\t    device so that the standby device can deliver the message to the\n\t    equivalent connection for egress processing. A sweeper has been\n\t    implemented to drop messages from the message store if they remain\n\t    in the store longer than the time specified in this attribute. The\n\t    time shall be in milliseconds.')
ltmDiameterrouterProfilePendingReqSweeperInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfilePendingReqSweeperInterval.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfilePendingReqSweeperInterval.setDescription('This attribute sets the\n\t    frequency for the pending request sweeper. When run, data retained\n\t    to assist with forwarding received answer messages will be removed\n\t    if it is older than twice the transaction timeout value. If set to\n\t    zero the sweeper will be disabled. The time shall be in\n\t    milli-seconds.')
ltmDiameterrouterProfileUseLocalConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileUseLocalConnection.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileUseLocalConnection.setDescription('Controls whether connections\n\t    established by the ingress TMM are preferred over connections\n\t    established by other TMMs when selecting egress connection to\n\t    destination peer.')
ltmDiameterrouterProfileTransactionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileTransactionTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileTransactionTimeout.setDescription('Specifies the maximum time in\n\t    seconds between request and its response. A provisional response\n\t    restarts the timer. This may not affect all transactions. The\n\t    scenarios where BIG-IP waits for response, is impacted, by\n\t    dropping any persistent data maintained for this request.')
ltmDiameterrouterProfileMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileMaxRetries.setDescription('The maximum number of attempts to retry\n\t    creating a connection to a peer. Once reached, all pending\n\t    messages will be flagged as undeliverable and returned to the\n\t    originator. A default value of 0, indicates no connection retries\n\t    will happen.  Need to remove this from schema, never exposed to\n\t    end user.')
ltmDiameterrouterProfileIruleScopeMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileIruleScopeMessage.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileIruleScopeMessage.setDescription('An attribute in a\n\t    MR (message-routing) diameter router profile that causes Diameter\n\t    iRule events to be processed in the scope of the executing\n\t    message, rather than one by one in the scope of the connection. If\n\t    true, each message has its own Tcl execution context and local\n\t    variables, and may execute iRules concurrently with other\n\t    messages. Otherwise all messages on a connection flow share a\n\t    single execution context and share their local variables, so must\n\t    queue to execute one by one. This is false by default (the legacy\n\t    mode). Before setting this to true, some pre-existing iRules might\n\t    need to be adjusted to avoid sharing local variables.')
ltmDiameterrouterProfilePerPeerStats = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfilePerPeerStats.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfilePerPeerStats.setDescription('If set to true, the profile specific statistics\n\t    will be captured for each pool member. The default value is false.')
ltmDiameterrouterProfileAssociateClientsideToPmbr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileAssociateClientsideToPmbr.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileAssociateClientsideToPmbr.setDescription('If set to true, the configured\n\t    routes will be scanned for a pool member that matches a new clientside\n\t    connection. If found, the clientside connection will be associated with\n\t    the pool member allowing the activity on the clientside connection to be\n\t    included with the activity of the pool member. The default value is\n\t    false.')
ltmDiameterrouterProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmDiameterrouterProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmDiameterrouterProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatNumber.setDescription('The number of ltmDiameterrouterProfileStat entries in the table.')
ltmDiameterrouterProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3), )
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTable.setDescription('A table containing statistic information for diameter router profiles.')
ltmDiameterrouterProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatName"))
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatEntry.setDescription('Columns in the ltmDiameterrouterProfileStat Table')
ltmDiameterrouterProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatName.setDescription('The Name of the diameterrouter profile.')
ltmDiameterrouterProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatVsName.setDescription('The Name of the virtual server.')
ltmDiameterrouterProfileStatTotMessgesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
ltmDiameterrouterProfileStatTotMessagesInRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
ltmDiameterrouterProfileStatTotMessagesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
ltmDiameterrouterProfileStatTotMessagesCannotReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
ltmDiameterrouterProfileStatTotMessagesRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
ltmDiameterrouterProfileStatTotMessagesUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
ltmDiameterrouterProfileStatTotMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
ltmDiameterrouterProfileStatTotMessagesQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t      queue for the destination was full.')
ltmDiameterrouterProfileStatTotMessagesNoConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
ltmDiameterrouterProfileStatTotMessagesConnectionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
ltmDiameterrouterProfileStatTotMessagesInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
ltmDiameterrouterProfileStatTotMessagesPersistInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t      was already in use.')
ltmDiameterrouterProfileStatTotMessagesStandbyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t      standby device.')
ltmDiameterrouterProfileStatTotMessagesMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t      routing exceeded the configured max retry count.')
ltmDiameterrouterProfileStatTotMessagesInCloned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
ltmDiameterrouterProfileStatTotMessagesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
ltmDiameterrouterProfileStatTotPayloadBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
ltmDiameterrouterProfileStatTotPayloadBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
ltmDiameterrouterProfileStatCurIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
ltmDiameterrouterProfileStatCurOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
ltmDiameterrouterProfileStatTotIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotFailedOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
ltmDiameterrouterProfileStatCurIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
ltmDiameterrouterProfileStatCurOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t      auto-initialization).')
ltmDiameterrouterProfileStatCurAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurAutoInitOutgoingConns.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
ltmDiameterrouterProfileStatTotIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t      (including outgoing connections created by auto-initialization).')
ltmDiameterrouterProfileStatTotAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotFailedOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t      auto-initalization.')
ltmDiameterrouterProfileStatCurPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
ltmDiameterrouterProfileStatTotPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotFailedPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
ltmDiameterrouterProfileStatTotPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
ltmDiameterrouterProfileStatCurPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurPendingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurPendingRequests.setDescription('Displays the cur_pending_requests')
ltmDiameterrouterProfileStatTotExpiredPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotExpiredPendingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotExpiredPendingRequests.setDescription('Displays the tot_expired_pending_requests')
ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers.setDescription('Displays the tot_dropped_unexpected_answers')
ltmDiameterrouterProfileStatTotDroppedLateAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotDroppedLateAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotDroppedLateAnswers.setDescription('Displays the tot_dropped_late_answers')
ltmDiameterrouterProfileStatCurDynamicRoutes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurDynamicRoutes.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatCurDynamicRoutes.setDescription('Quantity of dynamic routes that are currently active')
ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 40, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline.setDescription('Displays the number of messages dropped due to force offline.')
ltmMrPmbrDiameterSessionStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatResetStats.setDescription('The action to reset resettable statistics data in ltmMrPmbrDiameterSessionStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmMrPmbrDiameterSessionStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatNumber.setDescription('The number of ltmMrPmbrDiameterSessionStat entries in the table.')
ltmMrPmbrDiameterSessionStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3), )
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTable.setDescription('A table containing statistic information for message routing diameter session profiles.')
ltmMrPmbrDiameterSessionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatRouterInst"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatMrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTrName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatPool"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatPort"))
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatEntry.setDescription('Columns in the ltmMrPmbrDiameterSessionStat Table')
ltmMrPmbrDiameterSessionStatRouterInst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatRouterInst.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatRouterInst.setDescription('The name of the router instance.')
ltmMrPmbrDiameterSessionStatMrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatMrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatMrType.setDescription('The type of transport - config or virtual.')
ltmMrPmbrDiameterSessionStatTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTrName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTrName.setDescription('The name of the transport config.')
ltmMrPmbrDiameterSessionStatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatPool.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatPool.setDescription('The name of the pool.')
ltmMrPmbrDiameterSessionStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAddrType.setDescription('The IP address type of the pool member address.')
ltmMrPmbrDiameterSessionStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAddr.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAddr.setDescription('The IP address of the pool member')
ltmMrPmbrDiameterSessionStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 7), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatProfileName.setDescription('The name of the diameter session profile.')
ltmMrPmbrDiameterSessionStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatPort.setDescription('The port number of the specified pool member.')
ltmMrPmbrDiameterSessionStatTotCapExcReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCapExcReq.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCapExcReq.setDescription('Displays the number of Capabilities Exchange Request messages.')
ltmMrPmbrDiameterSessionStatTotCapExcAns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCapExcAns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCapExcAns.setDescription('Displays the number of Capabilities Exchange Answer messages.')
ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests.setDescription('Displays the number of Device Watchdog Request messages.')
ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers.setDescription('Displays the number of Device Watchdog Answers messages.')
ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests.setDescription('Displays the number of Disconnect Peer Request messages.')
ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers.setDescription('Displays the number of Disconnect Peer Answer messages.')
ltmMrPmbrDiameterSessionStatTotAccountingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotAccountingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotAccountingRequests.setDescription('Displays the number of Accounting Request messages.')
ltmMrPmbrDiameterSessionStatTotAccountingAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotAccountingAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotAccountingAnswers.setDescription('Displays the number of Accounting Answers messages.')
ltmMrPmbrDiameterSessionStatTotCreditControlRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCreditControlRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCreditControlRequests.setDescription('Displays the number of Credit Control Request messages.')
ltmMrPmbrDiameterSessionStatTotCreditControlAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCreditControlAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotCreditControlAnswers.setDescription('Displays the number of Credit Control Answers messages.')
ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests.setDescription('Displays the number of User Authorization Request messages.')
ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers.setDescription('Displays the number of User Authorization Answers messages.')
ltmMrPmbrDiameterSessionStatTotOtherRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotOtherRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotOtherRequests.setDescription('Displays the number of Other Request messages.')
ltmMrPmbrDiameterSessionStatTotOtherAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotOtherAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotOtherAnswers.setDescription('Displays the number of Other Answers messages.')
ltmMrPmbrDiameterSessionStatTotBadMessages = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotBadMessages.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotBadMessages.setDescription('Displays the number of Bad Messages.')
ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers.setDescription('Displays the number of Messages Rejected for Unconfigured Peers.')
ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans.setDescription('Displays the number of Current Requests Queued for\n\t     Potential Retransmission.')
ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy.setDescription('Displays the number of Retransmissions Returned Busy.')
ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail.setDescription('Displays the number of Retransmissions Returned Unavailable.')
ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit.setDescription('Displays the number of Retransmission Requests Retransmitted.')
ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout.setDescription('Displays the number of Retransmissions due to Timeout.')
ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode.setDescription('Displays the number of Retransmissions due to Matched Error Code.')
ltmMrPmbrDiameterSessionStatTotRetransmissionIrule = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionIrule.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRetransmissionIrule.setDescription('Displays the number of Retransmissions due to iRule.')
ltmMrPmbrDiameterSessionStatTotRequestReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRequestReceived.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRequestReceived.setDescription('Displays the number of request messages received.')
ltmMrPmbrDiameterSessionStatTotRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRequestSent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRequestSent.setDescription('Displays the number of request messages sent.')
ltmMrPmbrDiameterSessionStatTotDiscardUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDiscardUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotDiscardUnroutable.setDescription('Displays the number of unroutable request messages dropped automatically.')
ltmMrPmbrDiameterSessionStatTotRespondUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRespondUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotRespondUnroutable.setDescription('Displays the number of unroutable request messages converted to error\n\t     answer messages automatically.')
ltmMrPmbrDiameterSessionStatAveRequestLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveRequestLatency.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveRequestLatency.setDescription('Displays the average L7 processing latency for diameter request messages\n\t     over the last second (in milliseconds).')
ltmMrPmbrDiameterSessionStatAveAnswerLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveAnswerLatency.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveAnswerLatency.setDescription('Displays the average L7 processing latency for diameter answer messages\n\t     over the last second. (in milliseconds).')
ltmMrPmbrDiameterSessionStatAvePeerDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAvePeerDelay.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAvePeerDelay.setDescription('Displays the average time between forwarding a request message to a peer and\n\t     receiving the answer message from that peer over the last second (in milliseconds).')
ltmMrPmbrDiameterSessionStatAveRoundTripTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveRoundTripTime.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatAveRoundTripTime.setDescription('Displays the average time between receiving a request message and\n\t     forwarding the answer message over the last second (in milliseconds).')
ltmMrPmbrDiameterSessionStatCurTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurTrafficRate.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurTrafficRate.setDescription('Displays the number of requests and responses sent and received over the\n\t     last second.')
ltmMrPmbrDiameterSessionStatCurTimeoutRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurTimeoutRatio.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurTimeoutRatio.setDescription('Displays the percentage of answer messages unanswered.')
ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio.setDescription('Displays the percentage of answer messages received containing an\n\t     error result code (3000-5999).')
ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 1000-1999.')
ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 2000-2999.')
ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 3000-3999.')
ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 4000-4999.')
ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx.setDescription('Displays the number of answer messages received with\n\t     a response code between 5000-5999.')
ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 1000-1999.')
ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 2000-2999.')
ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 3000-3999.')
ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 4000-4999.')
ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 1, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx.setDescription('Displays the number of answer messages sent with a response\n\t     code between 5000-5999.')
ltmMrPmbrDiameterRouterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatResetStats.setDescription('The action to reset resettable statistics data in ltmMrPmbrDiameterRouterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmMrPmbrDiameterRouterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatNumber.setDescription('The number of ltmMrPmbrDiameterRouterStat entries in the table.')
ltmMrPmbrDiameterRouterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3), )
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTable.setDescription('A table containing statistic information for message routing diameter router profiles.')
ltmMrPmbrDiameterRouterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatRouterInst"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatMrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTrName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatPool"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatPort"))
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatEntry.setDescription('Columns in the ltmMrPmbrDiameterRouterStat Table')
ltmMrPmbrDiameterRouterStatRouterInst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatRouterInst.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatRouterInst.setDescription('The name of the router instance.')
ltmMrPmbrDiameterRouterStatMrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatMrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatMrType.setDescription('The type of transport - config or virtual.')
ltmMrPmbrDiameterRouterStatTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTrName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTrName.setDescription('The name of the transport config.')
ltmMrPmbrDiameterRouterStatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatPool.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatPool.setDescription('The name of the pool.')
ltmMrPmbrDiameterRouterStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatAddrType.setDescription('The IP address type of the pool member address.')
ltmMrPmbrDiameterRouterStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatAddr.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatAddr.setDescription('The IP address of the pool member')
ltmMrPmbrDiameterRouterStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatPort.setDescription('The port number of the specified pool member.')
ltmMrPmbrDiameterRouterStatTotMessgesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
ltmMrPmbrDiameterRouterStatTotMessagesInRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
ltmMrPmbrDiameterRouterStatTotMessagesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
ltmMrPmbrDiameterRouterStatTotMessagesRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
ltmMrPmbrDiameterRouterStatTotMessagesUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
ltmMrPmbrDiameterRouterStatTotMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
ltmMrPmbrDiameterRouterStatTotMessagesQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t     queue for the destination was full.')
ltmMrPmbrDiameterRouterStatTotMessagesNoConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
ltmMrPmbrDiameterRouterStatTotMessagesInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t     was already in use.')
ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t     standby device.')
ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t     routing exceeded the configured max retry count.')
ltmMrPmbrDiameterRouterStatTotMessagesInCloned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
ltmMrPmbrDiameterRouterStatTotMessagesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
ltmMrPmbrDiameterRouterStatTotPayloadBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
ltmMrPmbrDiameterRouterStatTotPayloadBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
ltmMrPmbrDiameterRouterStatCurIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
ltmMrPmbrDiameterRouterStatCurOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
ltmMrPmbrDiameterRouterStatTotIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatCurIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
ltmMrPmbrDiameterRouterStatCurOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t     auto-initialization).')
ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
ltmMrPmbrDiameterRouterStatTotIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t     (including outgoing connections created by auto-initialization).')
ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t     auto-initalization.')
ltmMrPmbrDiameterRouterStatCurPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
ltmMrPmbrDiameterRouterStatTotPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
ltmMrPmbrDiameterRouterStatTotPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
ltmMrPmbrDiameterRouterStatCurPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurPendingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatCurPendingRequests.setDescription('Displays the current number of pending request messages awaiting answer\n\t     responses.')
ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests.setDescription('Displays the total number of expired pending requests. An expired\n\t     pending request is a request that did not receive an answer within twice the transaction timeout as\n\t      detected by the pending request sweeper.')
ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers.setDescription('Displays the number of unexpected answer messages. An unexpected\n\t     answer message is an answer that did have a corresponding pending request message.')
ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 41, 2, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers.setDescription('Displays the number of answers dropped because the corresponding\n\t     request has been retransmitted.')
ltmSipsessionProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSipsessionProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSipsessionProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSipsessionProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNumber.setDescription('The number of ltmSipsessionProfileStat entries in the table.')
ltmSipsessionProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3), )
if mibBuilder.loadTexts: ltmSipsessionProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTable.setDescription('A table containing statistic information for SIP session profiles.')
ltmSipsessionProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatVsName"))
if mibBuilder.loadTexts: ltmSipsessionProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatEntry.setDescription('Columns in the ltmSipsessionProfileStat Table')
ltmSipsessionProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatName.setDescription('The Name of the SIP session profile.')
ltmSipsessionProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatVsName.setDescription('The Name of the virtual server.')
ltmSipsessionProfileStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequests.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequests.setDescription('Displays the number of SIP request messages the system handled.')
ltmSipsessionProfileStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatResponses.setDescription('Displays the number of SIP response messages the system handled.')
ltmSipsessionProfileStatBadmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadmsgs.setDescription('Displays the number of bad SIP messages the system handled.')
ltmSipsessionProfileStatBadmsgsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadmsgsReq.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadmsgsReq.setDescription('Displays the number of bad SIP request messages the system handled.')
ltmSipsessionProfileStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatDrops.setDescription('Displays the total number of SIP messages the system dropped.')
ltmSipsessionProfileStatDropsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatDropsReq.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatDropsReq.setDescription('Displays the number of SIP request messages the system dropped.')
ltmSipsessionProfileStatInvite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatInvite.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatInvite.setDescription('Displays the number of INVITE SIP request messages the system handled.')
ltmSipsessionProfileStatAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatAck.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatAck.setDescription('Displays the number of ACK SIP request messages the system handled.')
ltmSipsessionProfileStatBye = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBye.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBye.setDescription('Displays the number of BYE SIP request messages the system handled.')
ltmSipsessionProfileStatCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatCancel.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatCancel.setDescription('Displays the number of CANCEL SIP request messages the system handled.')
ltmSipsessionProfileStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatOptions.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatOptions.setDescription('Displays the number of OPTIONS SIP request messages the system handled.')
ltmSipsessionProfileStatRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRegisterReq.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRegisterReq.setDescription('Displays the number of REGISTER SIP request messages the system handled.')
ltmSipsessionProfileStatPrack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatPrack.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatPrack.setDescription('Displays the number of PRACK SIP request messages the system handled.')
ltmSipsessionProfileStatSubscribe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatSubscribe.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatSubscribe.setDescription('Displays the number of SUBSCRIBE SIP request messages the system handled.')
ltmSipsessionProfileStatNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotify.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotify.setDescription('Displays the number of NOTIFY SIP request messages the system handled.')
ltmSipsessionProfileStatPublish = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatPublish.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatPublish.setDescription('Displays the number of PUBLISH SIP request messages the system handled.')
ltmSipsessionProfileStatInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatInfo.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatInfo.setDescription('Displays the number of INFO SIP request messages the system handled.')
ltmSipsessionProfileStatRefer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRefer.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRefer.setDescription('Displays the number of REFER SIP request messages the system handled.')
ltmSipsessionProfileStatMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatMessage.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatMessage.setDescription('Displays the number of MESSAGE SIP request messages the system handled.')
ltmSipsessionProfileStatUpdateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatUpdateReq.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatUpdateReq.setDescription('Displays the number of UPDATE SIP request messages the system handled.')
ltmSipsessionProfileStatService = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatService.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatService.setDescription('Displays the number of SERVICE SIP request messages the system handled.')
ltmSipsessionProfileStatBenotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBenotify.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBenotify.setDescription('Displays the number of BENOTIFY SIP request messages the system handled.')
ltmSipsessionProfileStatNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNegotiate.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNegotiate.setDescription('Displays the number of NEGOTIATE SIP request messages the system handled.')
ltmSipsessionProfileStatOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatOther.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatOther.setDescription('Displays the number of OTHER SIP request messages the system handled.')
ltmSipsessionProfileStatProvisional = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatProvisional.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatProvisional.setDescription('Displays the number of Provisional SIP response messages the system handled.')
ltmSipsessionProfileStatSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatSuccessful.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatSuccessful.setDescription('Displays the number of Successful SIP response messages the system handled.')
ltmSipsessionProfileStatRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRedirection.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRedirection.setDescription('Displays the number of Redirection SIP response messages the system handled.')
ltmSipsessionProfileStatClientFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatClientFailures.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatClientFailures.setDescription('Displays the number of Client Failure SIP response messages the system handled.')
ltmSipsessionProfileStatServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerFailures.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerFailures.setDescription('Displays the number of Server Failure SIP response messages the system handled.')
ltmSipsessionProfileStatGlobalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatGlobalFailures.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatGlobalFailures.setDescription('Displays the number of Global Failure SIP response messages the system handled.')
ltmSipsessionProfileStatBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadRequest.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadRequest.setDescription('Displays the number of Bad-Request failure response messages generated when\n\t      rejecting a SIP message due to a malformed syntax.')
ltmSipsessionProfileStatBadRequest400Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadRequest400Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatBadRequest400Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message due to a malformed syntax.')
ltmSipsessionProfileStatNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotFound.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotFound.setDescription('Displays the number of Bad-Request failure response messages generated when rejecting\n\t      a SIP message when there is no matching user registration entry.')
ltmSipsessionProfileStatNotFound404Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotFound404Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotFound404Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message when there is no matching user registration entry.')
ltmSipsessionProfileStatRequestEntityTooLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequestEntityTooLarge.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequestEntityTooLarge.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages generated when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
ltmSipsessionProfileStatRequestEntityTooLarge413Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequestEntityTooLarge413Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatRequestEntityTooLarge413Sent.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages sent when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
ltmSipsessionProfileStatUnsupportedUriScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatUnsupportedUriScheme.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatUnsupportedUriScheme.setDescription('Displays the number of Unsupported-URI-Scheme responses messages\n\t      generated when rejecting a SIP message due to malformed URI.')
ltmSipsessionProfileStatUnsupportedUriScheme416Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatUnsupportedUriScheme416Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatUnsupportedUriScheme416Sent.setDescription('Displays the number of Unsupported-URI-Scheme responses\n\t      messages sent when rejecting a SIP message due to malformed URI.')
ltmSipsessionProfileStatTemporarilyUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTemporarilyUnavailable.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTemporarilyUnavailable.setDescription('Displays the number of Temporary Unavailable failure response\n\t      messages generated when rejecting a call when the user is not available at this time.')
ltmSipsessionProfileStatTemporarilyUnavailable480Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTemporarilyUnavailable480Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTemporarilyUnavailable480Sent.setDescription('Displays the number of Temporary Unavailable failure\n\t      response messages sent when rejecting a call when the user is not available at this time.')
ltmSipsessionProfileStatTransactionDoesNotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTransactionDoesNotExist.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTransactionDoesNotExist.setDescription('Displays the number of transaction does not exist response\n\t      message generated when response or request message is not able to be matched to a SIP transaction.')
ltmSipsessionProfileStatTransactionDoesNotExist481Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTransactionDoesNotExist481Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTransactionDoesNotExist481Sent.setDescription('Displays the number of transaction does not exist response\n\t      message sent when response or request message is not able to be matched to a SIP transaction.')
ltmSipsessionProfileStatLoopDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatLoopDetected.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatLoopDetected.setDescription('Displays the number of Loop-Detected failure response messages generated\n\t      when rejecting a SIP message due to loop detection.')
ltmSipsessionProfileStatLoopDetected482Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatLoopDetected482Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatLoopDetected482Sent.setDescription('Displays the number of Loop-Detected failure response messages sent\n\t      when rejecting a SIP message due to loop detection.')
ltmSipsessionProfileStatTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTooManyHops.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTooManyHops.setDescription("Displays the number of Too-Many-Hops failure response messages generated\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
ltmSipsessionProfileStatTooManyHops483Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatTooManyHops483Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatTooManyHops483Sent.setDescription("Displays the number of Too-Many-Hops failure response messages sent\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
ltmSipsessionProfileStatAddressIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatAddressIncomplete.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatAddressIncomplete.setDescription('Displays the number of Address-Incomplete failure response\n\t      messages generated when rejecting a SIP message due to malformed or incomplete request URI.')
ltmSipsessionProfileStatAddressIncomplete484Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatAddressIncomplete484Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatAddressIncomplete484Sent.setDescription('Displays the number of Address-Incomplete failure\n\t      response messages sent when rejecting a SIP message due to malformed or incomplete request URI.')
ltmSipsessionProfileStatNotAcceptableHere = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotAcceptableHere.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotAcceptableHere.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages generated when rejecting a SIP message containing too many SDP media requests.')
ltmSipsessionProfileStatNotAcceptableHere488Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotAcceptableHere488Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotAcceptableHere488Sent.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages sent when rejecting a SIP message containing too many SDP media requests.')
ltmSipsessionProfileStatServerInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerInternalError.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages generated when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
ltmSipsessionProfileStatServerInternalError500Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerInternalError500Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatServerInternalError500Sent.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages sent when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
ltmSipsessionProfileStatNotImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotImplemented.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotImplemented.setDescription('Displays the number of Not-Implemented failure response messages generated\n\t      when rejecting a SIP message due to an invalid/unimplemented request method.')
ltmSipsessionProfileStatNotImplemented501Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotImplemented501Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatNotImplemented501Sent.setDescription('Displays the number of Not-Implemented failure response messages\n\t      sent when rejecting a SIP message due to an invalid/unimplemented request method.')
ltmSipsessionProfileStatServiceUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatServiceUnavailable.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatServiceUnavailable.setDescription('Displays the number of Service-Unavailable failure response messages\n\t      generated when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
ltmSipsessionProfileStatServiceUnavailable503Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatServiceUnavailable503Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatServiceUnavailable503Sent.setDescription('Displays the number of Service-Unavailable failure response\n\t      messages sent when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
ltmSipsessionProfileStatVersionNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatVersionNotSupported.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatVersionNotSupported.setDescription('Displays the number of Version-Not-Supported failure response messages\n\t      generated when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
ltmSipsessionProfileStatVersionNotSupported505Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 42, 1, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSipsessionProfileStatVersionNotSupported505Sent.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatVersionNotSupported505Sent.setDescription('Displays the number of Version-Not-Supported failure response\n\t      messages sent when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
ltmSiprouterProfileStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmSiprouterProfileStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatResetStats.setDescription('The action to reset resettable statistics data in ltmSiprouterProfileStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmSiprouterProfileStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatNumber.setDescription('The number of ltmSiprouterProfileStat entries in the table.')
ltmSiprouterProfileStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3), )
if mibBuilder.loadTexts: ltmSiprouterProfileStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTable.setDescription('A table containing statistic information for SIP router profiles.')
ltmSiprouterProfileStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatVsName"))
if mibBuilder.loadTexts: ltmSiprouterProfileStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatEntry.setDescription('Columns in the ltmSiprouterProfileStat Table')
ltmSiprouterProfileStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatName.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatName.setDescription('The Name of the SIP router profile.')
ltmSiprouterProfileStatVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatVsName.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatVsName.setDescription('The Name of the virtual server.')
ltmSiprouterProfileStatTotMessgesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
ltmSiprouterProfileStatTotMessagesInRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
ltmSiprouterProfileStatTotMessagesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
ltmSiprouterProfileStatTotMessagesCannotReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
ltmSiprouterProfileStatTotMessagesRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
ltmSiprouterProfileStatTotMessagesUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
ltmSiprouterProfileStatTotMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
ltmSiprouterProfileStatTotMessagesQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t      queue for the destination was full.')
ltmSiprouterProfileStatTotMessagesNoConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
ltmSiprouterProfileStatTotMessagesConnectionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
ltmSiprouterProfileStatTotMessagesInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
ltmSiprouterProfileStatTotMessagesPersistInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t      was already in use.')
ltmSiprouterProfileStatTotMessagesStandbyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t      standby device.')
ltmSiprouterProfileStatTotMessagesMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t      routing exceeded the configured max retry count.')
ltmSiprouterProfileStatTotMessagesInCloned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
ltmSiprouterProfileStatTotMessagesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
ltmSiprouterProfileStatTotPayloadBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
ltmSiprouterProfileStatTotPayloadBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
ltmSiprouterProfileStatCurIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
ltmSiprouterProfileStatCurOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
ltmSiprouterProfileStatTotIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
ltmSiprouterProfileStatTotOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
ltmSiprouterProfileStatTotFailedOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
ltmSiprouterProfileStatCurIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
ltmSiprouterProfileStatCurOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t      auto-initialization).')
ltmSiprouterProfileStatCurAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurAutoInitOutgoingConns.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
ltmSiprouterProfileStatTotIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
ltmSiprouterProfileStatTotOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t      (including outgoing connections created by auto-initialization).')
ltmSiprouterProfileStatTotAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
ltmSiprouterProfileStatTotFailedOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
ltmSiprouterProfileStatTotFailAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t      auto-initalization.')
ltmSiprouterProfileStatCurPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
ltmSiprouterProfileStatTotPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
ltmSiprouterProfileStatTotFailedPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
ltmSiprouterProfileStatTotPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
ltmSiprouterProfileStatCurrPendingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 38), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurrPendingCalls.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurrPendingCalls.setDescription('Displays the current number of pending calls.')
ltmSiprouterProfileStatCurrActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurrActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatCurrActiveCalls.setDescription('Displays the current number of active calls.')
ltmSiprouterProfileStatTotSuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 40), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotSuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotSuccessfulCalls.setDescription('Displays the total number of total successful calls.')
ltmSiprouterProfileStatTotRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 41), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotRejectedCalls.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotRejectedCalls.setDescription('Displays the total number of rejected calls.')
ltmSiprouterProfileStatTotCancelledCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 42), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotCancelledCalls.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatTotCancelledCalls.setDescription('Displays the total number of cancelled calls.')
ltmSiprouterProfileStatActiveRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatActiveRegistrations.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatActiveRegistrations.setDescription('Displays the total number of active registrations.')
ltmSiprouterProfileStatRejectedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 43, 1, 3, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmSiprouterProfileStatRejectedRegistrations.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatRejectedRegistrations.setDescription('Displays the total number of rejected registrations.')
ltmMrPmbrSipSessionStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatResetStats.setDescription('The action to reset resettable statistics data in ltmMrPmbrSipSessionStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmMrPmbrSipSessionStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNumber.setDescription('The number of ltmMrPmbrSipSessionStat entries in the table.')
ltmMrPmbrSipSessionStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3), )
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTable.setDescription('A table containing statistic information for message routing SIP session profiles.')
ltmMrPmbrSipSessionStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRouterInst"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatMrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTrName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPool"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatProfileName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPort"))
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatEntry.setDescription('Columns in the ltmMrPmbrSipSessionStat Table')
ltmMrPmbrSipSessionStatRouterInst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRouterInst.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRouterInst.setDescription('The name of the router instance.')
ltmMrPmbrSipSessionStatMrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatMrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatMrType.setDescription('The type of transport - config or virtual.')
ltmMrPmbrSipSessionStatTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTrName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTrName.setDescription('The name of the transport config.')
ltmMrPmbrSipSessionStatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPool.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPool.setDescription('The name of the pool.')
ltmMrPmbrSipSessionStatProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 5), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatProfileName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatProfileName.setDescription('The name of the diameter session profile.')
ltmMrPmbrSipSessionStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 6), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddrType.setDescription('The IP address type of the pool member address.')
ltmMrPmbrSipSessionStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 7), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddr.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddr.setDescription('The IP address of the pool member')
ltmMrPmbrSipSessionStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 8), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPort.setDescription('The port number of the specified pool member.')
ltmMrPmbrSipSessionStatRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequests.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequests.setDescription('Displays the number of SIP request messages the system handled.')
ltmMrPmbrSipSessionStatResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatResponses.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatResponses.setDescription('Displays the number of SIP response messages the system handled.')
ltmMrPmbrSipSessionStatBadmsgs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadmsgs.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadmsgs.setDescription('Displays the number of bad SIP messages the system handled.')
ltmMrPmbrSipSessionStatBadmsgsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadmsgsReq.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadmsgsReq.setDescription('Displays the number of bad SIP request messages the system handled.')
ltmMrPmbrSipSessionStatDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatDrops.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatDrops.setDescription('Displays the total number of SIP messages the system dropped.')
ltmMrPmbrSipSessionStatDropsReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatDropsReq.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatDropsReq.setDescription('Displays the number of SIP request messages the system dropped.')
ltmMrPmbrSipSessionStatInvite = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatInvite.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatInvite.setDescription('Displays the number of INVITE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatAck = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAck.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAck.setDescription('Displays the number of ACK SIP request messages the system handled.')
ltmMrPmbrSipSessionStatBye = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBye.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBye.setDescription('Displays the number of BYE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatCancel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatCancel.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatCancel.setDescription('Displays the number of CANCEL SIP request messages the system handled.')
ltmMrPmbrSipSessionStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatOptions.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatOptions.setDescription('Displays the number of OPTIONS SIP request messages the system handled.')
ltmMrPmbrSipSessionStatRegisterReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRegisterReq.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRegisterReq.setDescription('Displays the number of REGISTER SIP request messages the system handled.')
ltmMrPmbrSipSessionStatPrack = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPrack.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPrack.setDescription('Displays the number of PRACK SIP request messages the system handled.')
ltmMrPmbrSipSessionStatSubscribe = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatSubscribe.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatSubscribe.setDescription('Displays the number of SUBSCRIBE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotify.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotify.setDescription('Displays the number of NOTIFY SIP request messages the system handled.')
ltmMrPmbrSipSessionStatPublish = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPublish.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatPublish.setDescription('Displays the number of PUBLISH SIP request messages the system handled.')
ltmMrPmbrSipSessionStatInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatInfo.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatInfo.setDescription('Displays the number of INFO SIP request messages the system handled.')
ltmMrPmbrSipSessionStatRefer = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRefer.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRefer.setDescription('Displays the number of REFER SIP request messages the system handled.')
ltmMrPmbrSipSessionStatMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatMessage.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatMessage.setDescription('Displays the number of MESSAGE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatUpdateReq = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUpdateReq.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUpdateReq.setDescription('Displays the number of UPDATE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatService = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatService.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatService.setDescription('Displays the number of SERVICE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatBenotify = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBenotify.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBenotify.setDescription('Displays the number of BENOTIFY SIP request messages the system handled.')
ltmMrPmbrSipSessionStatNegotiate = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNegotiate.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNegotiate.setDescription('Displays the number of NEGOTIATE SIP request messages the system handled.')
ltmMrPmbrSipSessionStatOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatOther.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatOther.setDescription('Displays the number of OTHER SIP request messages the system handled.')
ltmMrPmbrSipSessionStatProvisional = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatProvisional.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatProvisional.setDescription('Displays the number of Provisional SIP response messages the system handled.')
ltmMrPmbrSipSessionStatSuccessful = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatSuccessful.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatSuccessful.setDescription('Displays the number of Successful SIP response messages the system handled.')
ltmMrPmbrSipSessionStatRedirection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRedirection.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRedirection.setDescription('Displays the number of Redirection SIP response messages the system handled.')
ltmMrPmbrSipSessionStatClientFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatClientFailures.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatClientFailures.setDescription('Displays the number of Client Failure SIP response messages the system handled.')
ltmMrPmbrSipSessionStatServerFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerFailures.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerFailures.setDescription('Displays the number of Server Failure SIP response messages the system handled.')
ltmMrPmbrSipSessionStatGlobalFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatGlobalFailures.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatGlobalFailures.setDescription('Displays the number of Global Failure SIP response messages the system handled.')
ltmMrPmbrSipSessionStatBadRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadRequest.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadRequest.setDescription('Displays the number of Bad-Request failure response messages generated when\n\t      rejecting a SIP message due to a malformed syntax.')
ltmMrPmbrSipSessionStatBadRequest400Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadRequest400Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatBadRequest400Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message due to a malformed syntax.')
ltmMrPmbrSipSessionStatNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotFound.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotFound.setDescription('Displays the number of Bad-Request failure response messages generated when rejecting\n\t      a SIP message when there is no matching user registration entry.')
ltmMrPmbrSipSessionStatNotFound404Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotFound404Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotFound404Sent.setDescription('Displays the number of Bad-Request failure response messages sent when\n\t      rejecting a SIP message when there is no matching user registration entry.')
ltmMrPmbrSipSessionStatRequestEntityTooLarge = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequestEntityTooLarge.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequestEntityTooLarge.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages generated when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent.setDescription('Displays the number of Request-Entity-Too-Large response\n\t      messages sent when rejecting a SIP message due to some aspect of the message exceeding a\n\t      configured size limit.')
ltmMrPmbrSipSessionStatUnsupportedUriScheme = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUnsupportedUriScheme.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUnsupportedUriScheme.setDescription('Displays the number of Unsupported-URI-Scheme responses messages\n\t      generated when rejecting a SIP message due to malformed URI.')
ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent.setDescription('Displays the number of Unsupported-URI-Scheme responses\n\t      messages sent when rejecting a SIP message due to malformed URI.')
ltmMrPmbrSipSessionStatTemporarilyUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTemporarilyUnavailable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTemporarilyUnavailable.setDescription('Displays the number of Temporary Unavailable failure response\n\t      messages generated when rejecting a call when the user is not available at this time.')
ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent.setDescription('Displays the number of Temporary Unavailable failure\n\t      response messages sent when rejecting a call when the user is not available at this time.')
ltmMrPmbrSipSessionStatTransactionDoesNotExist = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTransactionDoesNotExist.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTransactionDoesNotExist.setDescription('Displays the number of transaction does not exist response\n\t      message generated when response or request message is not able to be matched to a SIP transaction.')
ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent.setDescription('Displays the number of transaction does not exist response\n\t      message sent when response or request message is not able to be matched to a SIP transaction.')
ltmMrPmbrSipSessionStatLoopDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatLoopDetected.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatLoopDetected.setDescription('Displays the number of Loop-Detected failure response messages generated\n\t      when rejecting a SIP message due to loop detection.')
ltmMrPmbrSipSessionStatLoopDetected482Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatLoopDetected482Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatLoopDetected482Sent.setDescription('Displays the number of Loop-Detected failure response messages sent\n\t      when rejecting a SIP message due to loop detection.')
ltmMrPmbrSipSessionStatTooManyHops = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTooManyHops.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTooManyHops.setDescription("Displays the number of Too-Many-Hops failure response messages generated\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
ltmMrPmbrSipSessionStatTooManyHops483Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTooManyHops483Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatTooManyHops483Sent.setDescription("Displays the number of Too-Many-Hops failure response messages sent\n\t      when rejecting a SIP message as Max-Forwards header has reached value '0'.")
ltmMrPmbrSipSessionStatAddressIncomplete = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddressIncomplete.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddressIncomplete.setDescription('Displays the number of Address-Incomplete failure response\n\t      messages generated when rejecting a SIP message due to malformed or incomplete request URI.')
ltmMrPmbrSipSessionStatAddressIncomplete484Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddressIncomplete484Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatAddressIncomplete484Sent.setDescription('Displays the number of Address-Incomplete failure\n\t      response messages sent when rejecting a SIP message due to malformed or incomplete request URI.')
ltmMrPmbrSipSessionStatNotAcceptableHere = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotAcceptableHere.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotAcceptableHere.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages generated when rejecting a SIP message containing too many SDP media requests.')
ltmMrPmbrSipSessionStatNotAcceptableHere488Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotAcceptableHere488Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotAcceptableHere488Sent.setDescription('Displays the number of Not-Acceptable failure response\n\t      messages sent when rejecting a SIP message containing too many SDP media requests.')
ltmMrPmbrSipSessionStatServerInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerInternalError.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages generated when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
ltmMrPmbrSipSessionStatServerInternalError500Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerInternalError500Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServerInternalError500Sent.setDescription('Displays the number of Server-Internal-Error failure response\n\t      messages sent when rejecting a SIP message due to some unexpected condition and cannot\n\t      fulfill the request.')
ltmMrPmbrSipSessionStatNotImplemented = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotImplemented.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotImplemented.setDescription('Displays the number of Not-Implemented failure response messages generated\n\t      when rejecting a SIP message due to an invalid/unimplemented request method.')
ltmMrPmbrSipSessionStatNotImplemented501Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotImplemented501Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatNotImplemented501Sent.setDescription('Displays the number of Not-Implemented failure response messages\n\t      sent when rejecting a SIP message due to an invalid/unimplemented request method.')
ltmMrPmbrSipSessionStatServiceUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServiceUnavailable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServiceUnavailable.setDescription('Displays the number of Service-Unavailable failure response messages\n\t      generated when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
ltmMrPmbrSipSessionStatServiceUnavailable503Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServiceUnavailable503Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatServiceUnavailable503Sent.setDescription('Displays the number of Service-Unavailable failure response\n\t      messages sent when rejecting a SIP message due to the server undergoing maintenance or temporary\n\t      traffic overload.')
ltmMrPmbrSipSessionStatVersionNotSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatVersionNotSupported.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatVersionNotSupported.setDescription('Displays the number of Version-Not-Supported failure response messages\n\t      generated when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
ltmMrPmbrSipSessionStatVersionNotSupported505Sent = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 1, 3, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatVersionNotSupported505Sent.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatVersionNotSupported505Sent.setDescription('Displays the number of Version-Not-Supported failure response\n\t      messages sent when rejecting a SIP message when the SIP protocol version in the request is not supported\n\t      by the server.')
ltmMrPmbrSipRouterStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatResetStats.setDescription('The action to reset resettable statistics data in ltmMrPmbrSipRouterStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmMrPmbrSipRouterStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatNumber.setDescription('The number of ltmMrPmbrSipRouterStat entries in the table.')
ltmMrPmbrSipRouterStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3), )
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTable.setDescription('A table containing statistic information for message routing SIP router profiles.')
ltmMrPmbrSipRouterStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatRouterInst"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatMrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTrName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatPool"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatAddrType"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatAddr"), (0, "F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatPort"))
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatEntry.setDescription('Columns in the ltmMrPmbrSipRouterStat Table')
ltmMrPmbrSipRouterStatRouterInst = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatRouterInst.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatRouterInst.setDescription('The name of the router instance.')
ltmMrPmbrSipRouterStatMrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatMrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatMrType.setDescription('The type of transport - config or virtual.')
ltmMrPmbrSipRouterStatTrName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTrName.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTrName.setDescription('The name of the transport config.')
ltmMrPmbrSipRouterStatPool = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 4), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatPool.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatPool.setDescription('The name of the pool.')
ltmMrPmbrSipRouterStatAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatAddrType.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatAddrType.setDescription('The IP address type of the pool member address.')
ltmMrPmbrSipRouterStatAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatAddr.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatAddr.setDescription('The IP address of the pool member')
ltmMrPmbrSipRouterStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 7), InetPortNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatPort.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatPort.setDescription('The port number of the specified pool member.')
ltmMrPmbrSipRouterStatTotMessgesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessgesIn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessgesIn.setDescription('Displays the number of messages received for forwarding.')
ltmMrPmbrSipRouterStatTotMessagesInRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInRetry.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInRetry.setDescription('Displays the number of retry messages received for forwarding.')
ltmMrPmbrSipRouterStatTotMessagesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesOut.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesOut.setDescription('Displays the number of messages forwarded or returned to the originator.')
ltmMrPmbrSipRouterStatTotMessagesCannotReturn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesCannotReturn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesCannotReturn.setDescription('Displays the number of messages which routing failed and could not be returned to the originator.')
ltmMrPmbrSipRouterStatTotMessagesRouted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesRouted.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesRouted.setDescription('Displays the number of messages where a route was successfully found.')
ltmMrPmbrSipRouterStatTotMessagesUnroutable = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesUnroutable.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesUnroutable.setDescription('Displays the number of messages where no route was found.')
ltmMrPmbrSipRouterStatTotMessagesDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesDropped.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesDropped.setDescription('Displays the number of messages dropped via an iRule.')
ltmMrPmbrSipRouterStatTotMessagesQueueFull = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesQueueFull.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesQueueFull.setDescription('Displays the number of messages which were routed but the outgoing\n\t      queue for the destination was full.')
ltmMrPmbrSipRouterStatTotMessagesNoConnection = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesNoConnection.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesNoConnection.setDescription('Displays the number of messages which were routed to a connection which was closed before the\n\t      message could be delivered.')
ltmMrPmbrSipRouterStatTotMessagesConnectionClosed = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesConnectionClosed.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesConnectionClosed.setDescription('Displays the number of messages which were pending delivery when the connection closed.')
ltmMrPmbrSipRouterStatTotMessagesInternalError = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInternalError.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInternalError.setDescription('Displays the number of messages which were not routed due to an internal error .')
ltmMrPmbrSipRouterStatTotMessagesPersistInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesPersistInUse.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesPersistInUse.setDescription('Displays the number of messages which after routing failed to add a persistence entry because it\n\t      was already in use.')
ltmMrPmbrSipRouterStatTotMessagesStandbyDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesStandbyDropped.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesStandbyDropped.setDescription('Displays the number of messages which were dropped on the\n\t      standby device.')
ltmMrPmbrSipRouterStatTotMessagesMaxRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesMaxRetries.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesMaxRetries.setDescription('Displays the number of messages returned to the originator because the latest attempt to retry\n\t      routing exceeded the configured max retry count.')
ltmMrPmbrSipRouterStatTotMessagesInCloned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInCloned.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesInCloned.setDescription('Displays the total number of messages cloned per route.')
ltmMrPmbrSipRouterStatTotMessagesReturned = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesReturned.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotMessagesReturned.setDescription('Displays the number of messages returned.')
ltmMrPmbrSipRouterStatTotPayloadBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPayloadBytesIn.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPayloadBytesIn.setDescription('Displays the number of bytes of payload received.')
ltmMrPmbrSipRouterStatTotPayloadBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPayloadBytesOut.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPayloadBytesOut.setDescription('Displays the number of bytes of payload sent.')
ltmMrPmbrSipRouterStatCurIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurIncomingStreams.setDescription('Displays the number of active incoming streams.')
ltmMrPmbrSipRouterStatCurOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurOutgoingStreams.setDescription('Displays the number of active outgoing streams.')
ltmMrPmbrSipRouterStatTotIncomingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotIncomingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotIncomingStreams.setDescription('Displays the total number of incoming streams since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotOutgoingStreams.setDescription('Displays the total number of outgoing streams since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotFailedOutgoingStreams = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedOutgoingStreams.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedOutgoingStreams.setDescription('Displays the total number of failed outgoing streams since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatCurIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurIncomingConnections.setDescription('Displays the number of active incoming connections.')
ltmMrPmbrSipRouterStatCurOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurOutgoingConnections.setDescription('Displays the number of active outgoing connections (including outgoing connections created by\n\t      auto-initialization).')
ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns.setDescription('Displays the number of active outgoing connections created by auto-initialization.')
ltmMrPmbrSipRouterStatTotIncomingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotIncomingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotIncomingConnections.setDescription('Displays the total number of incoming connections created since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotOutgoingConnections.setDescription('Displays the total number of outgoing connections created since TMM restart or stats reset\n\t      (including outgoing connections created by auto-initialization).')
ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections created by auto-initialization since\n\t      TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotFailedOutgoingConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedOutgoingConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedOutgoingConnections.setDescription('Displays the total number of outgoing connections that failed to be established.')
ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns.setDescription('Displays the total number of outgoing connections that failed to be established by\n\t      auto-initalization.')
ltmMrPmbrSipRouterStatCurPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurPassthruConnections.setDescription('Displays the number of active pass through connections.')
ltmMrPmbrSipRouterStatTotPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPassthruConnections.setDescription('Displays the total number of pass through connections since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotFailedPassthruConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedPassthruConnections.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotFailedPassthruConnections.setDescription('Displays the total number of failed pass through connections since TMM restart or stats reset.')
ltmMrPmbrSipRouterStatTotPassthruBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPassthruBytes.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotPassthruBytes.setDescription('Displays the number of pass through bytes.')
ltmMrPmbrSipRouterStatCurrPendingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurrPendingCalls.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurrPendingCalls.setDescription('Displays the current number of pending calls.')
ltmMrPmbrSipRouterStatCurrActiveCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 44), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurrActiveCalls.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatCurrActiveCalls.setDescription('Displays the current number of active calls.')
ltmMrPmbrSipRouterStatTotSuccessfulCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotSuccessfulCalls.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotSuccessfulCalls.setDescription('Displays the total number of total successful calls.')
ltmMrPmbrSipRouterStatTotRejectedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotRejectedCalls.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotRejectedCalls.setDescription('Displays the total number of rejected calls.')
ltmMrPmbrSipRouterStatTotCancelledCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotCancelledCalls.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatTotCancelledCalls.setDescription('Displays the total number of cancelled calls.')
ltmMrPmbrSipRouterStatActiveRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatActiveRegistrations.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatActiveRegistrations.setDescription('Displays the total number of active registrations.')
ltmMrPmbrSipRouterStatRejectedRegistrations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatRejectedRegistrations.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatRejectedRegistrations.setDescription('Displays the total number of rejected registrations.')
ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber.setDescription('Displays the maximum number of registrations per subscriber.')
ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 44, 2, 3, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber.setDescription('Displays the number of concurrent sessions per subscriber.')
ltmServerSslProfileC3dCertExtensionCustomOidsNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsNumber.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsNumber.setDescription('The number of ltmServerSslProfileC3dCertExtensionCustomOids entries in the table.')
ltmServerSslProfileC3dCertExtensionCustomOidsTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 2), )
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsTable.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsTable.setDescription('A table containing the custom extension OIDs information of the client\n\t         certificates to be included in the generated certificates of server-ssl profile.')
ltmServerSslProfileC3dCertExtensionCustomOidsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsServerssl"), (0, "F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsIndex"))
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsEntry.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsEntry.setDescription('Columns in the ltmServerSslProfileC3dCertExtensionCustomOids Table')
ltmServerSslProfileC3dCertExtensionCustomOidsServerssl = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsServerssl.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsServerssl.setDescription('The name of a server-ssl profile the set is related to.')
ltmServerSslProfileC3dCertExtensionCustomOidsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsIndex.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsIndex.setDescription('The index of the included certificate extension custom OID.')
ltmServerSslProfileC3dCertExtensionCustomOidsOid = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 6, 3, 3, 2, 1, 3), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsOid.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsOid.setDescription('The certificate extension custom OID.')
ltmFwNatDynamicPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolNumber.setDescription('The number of ltmFwNatDynamicPool entries in the table.')
ltmFwNatDynamicPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2), )
if mibBuilder.loadTexts: ltmFwNatDynamicPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolTable.setDescription('A table containing information for a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolName"))
if mibBuilder.loadTexts: ltmFwNatDynamicPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolEntry.setDescription('Columns in the ltmFwNatDynamicPool Table')
ltmFwNatDynamicPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolName.setDescription('The name of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolDescription.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolDescription.setDescription('The description of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolAddressCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolAddressCount.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolAddressCount.setDescription('The address count of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPortCount.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPortCount.setDescription('The port count of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolAddrFamily = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolAddrFamily.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolAddrFamily.setDescription('The addr family of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("staticNat", 1), ("staticPat", 2), ("dynamicNat", 3), ("dynamicPat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolType.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolType.setDescription('The type of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolPatMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("napt", 0), ("pba", 1), ("deterministic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPatMode.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPatMode.setDescription('The pat mode of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolInboundMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("eif", 1), ("explicit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolInboundMode.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolInboundMode.setDescription('The inbound mode of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolMappingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolMappingMode.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolMappingMode.setDescription('The mapping mode of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolMappingTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolMappingTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolMappingTimeout.setDescription('The mapping timeout of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolBlockLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockLifetime.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockLifetime.setDescription('The block lifetime of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolBlockIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockIdleTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockIdleTimeout.setDescription('The block idle timeout of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolZombieTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolZombieTimeout.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolZombieTimeout.setDescription('The zombie timeout of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockSize.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolBlockSize.setDescription('The block size of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolClientBlockLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolClientBlockLimit.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolClientBlockLimit.setDescription('The client block limit of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolRouteAdvertisement.setDescription('The route advertisement setting of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolProxyArp.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolProxyArp.setDescription('The proxy arp of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolHairpinMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolHairpinMode.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolHairpinMode.setDescription('The hairpin mode of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolIcmpEcho.setDescription('The icmp echo of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolClientConnectionLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolClientConnectionLimit.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolClientConnectionLimit.setDescription('The client connection limit of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolEgressInterfacesEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolEgressInterfacesEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolEgressInterfacesEnabled.setDescription('Whether or not the egress interfaces for a Dynamic AFM NAT Translation Pool are enabled.')
ltmFwNatDynamicPoolTrafficGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 22), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolTrafficGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolTrafficGroup.setDescription('The traffic group of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolPcpName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 23), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpName.setDescription('The pcp name of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolPcpSelfipName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 24), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpSelfipName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpSelfipName.setDescription('The pcp selfip name of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolDsliteTunnel = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 25), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolDsliteTunnel.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolDsliteTunnel.setDescription('The dslite tunnel of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolPcpEpoch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 1, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpEpoch.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolPcpEpoch.setDescription('The pcp epoch of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwNatDynamicPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwNatDynamicPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatNumber.setDescription('The number of ltmFwNatDynamicPoolStat entries in the table.')
ltmFwNatDynamicPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3), )
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatTable.setDescription('A table containing statistic information for a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatName"))
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatEntry.setDescription('Columns in the ltmFwNatDynamicPoolStat Table')
ltmFwNatDynamicPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatName.setDescription('The name of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolStatLsnTranslationRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnTranslationRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnTranslationRequests.setDescription('The number of translation requests.')
ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests.setDescription('The number of hairpin connection requests.')
ltmFwNatDynamicPoolStatLsnActiveTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveTranslations.setDescription('The number of active translations.')
ltmFwNatDynamicPoolStatLsnActiveHairpinConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveHairpinConnections.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveHairpinConnections.setDescription('The number of active hairpin connections.')
ltmFwNatDynamicPoolStatLsnTranslationRequestFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnTranslationRequestFailures.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnTranslationRequestFailures.setDescription('The number of translation request failures.')
ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures.setDescription('The number of persistence mapping failures.')
ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures.setDescription('The number of hairpin connection failures.')
ltmFwNatDynamicPoolStatLsnBackupPoolTranslations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnBackupPoolTranslations.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnBackupPoolTranslations.setDescription('The number of backup pool translations.')
ltmFwNatDynamicPoolStatLsnActiveEndPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveEndPoints.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnActiveEndPoints.setDescription('The number of active end points.')
ltmFwNatDynamicPoolStatLsnEndPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnEndPoints.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnEndPoints.setDescription('The number of end points.')
ltmFwNatDynamicPoolStatLsnEndPointsHighValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 12), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnEndPointsHighValue.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatLsnEndPointsHighValue.setDescription('The end points high value.')
ltmFwNatDynamicPoolStatPbaActivePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActivePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActivePortBlocks.setDescription('The number of active port blocks.')
ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit.setDescription('The number of active clients reached limit.')
ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks.setDescription('The number of active zombie port blocks.')
ltmFwNatDynamicPoolStatPbaPortBlockAllocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockAllocations.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockAllocations.setDescription('The number of port block allocations.')
ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures.setDescription('The number of port block allocation failures.')
ltmFwNatDynamicPoolStatPbaPortBlockDeallocations = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockDeallocations.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPortBlockDeallocations.setDescription('The number of port block deallocations.')
ltmFwNatDynamicPoolStatPbaClientsReachedLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaClientsReachedLimit.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaClientsReachedLimit.setDescription('The number of clients reached limit.')
ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated.setDescription('The number of zombie port blocks created.')
ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted.setDescription('The number of zombie port blocks deleted.')
ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled.setDescription('The number of zombie port block connections killed.')
ltmFwNatDynamicPoolStatPcpAnnounceRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceRequests.setDescription('The number of announce requests.')
ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast.setDescription('The number of announce responses ucast.')
ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast.setDescription('The number of announce responses multicast.')
ltmFwNatDynamicPoolStatPcpMapRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpMapRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpMapRequests.setDescription('The number of map requests.')
ltmFwNatDynamicPoolStatPcpMapResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpMapResponses.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpMapResponses.setDescription('The number of map responses.')
ltmFwNatDynamicPoolStatPcpPeerRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpPeerRequests.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpPeerRequests.setDescription('The number of peer requests.')
ltmFwNatDynamicPoolStatPcpPeerResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpPeerResponses.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpPeerResponses.setDescription('The number of peer responses.')
ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest.setDescription('The number of errors: invalid request.')
ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource.setDescription('The number of errors: unavailable resource.')
ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized.setDescription('The number of errors: not authorized.')
ltmFwNatDynamicPoolStatPcpErrorsOther = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsOther.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPcpErrorsOther.setDescription('The number of errors: other.')
ltmFwNatDynamicPoolStatPbaTotalPortBlocks = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaTotalPortBlocks.setStatus('deprecated')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaTotalPortBlocks.setDescription('Deprecated! This field is no longer supported. The total number of port blocks.')
ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp.setDescription('The percentage of free port blocks.')
ltmFwNatDynamicPoolStatPbaTotalPortBlocksString = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 2, 3, 1, 36), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaTotalPortBlocksString.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatPbaTotalPortBlocksString.setDescription('The total number of port blocks.')
ltmFwNatDynamicPoolFailureStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwNatDynamicPoolFailureStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwNatDynamicPoolFailureStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatNumber.setDescription('The number of ltmFwNatDynamicPoolFailureStat entries in the table.')
ltmFwNatDynamicPoolFailureStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 3), )
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatTable.setDescription('A table containing statistic information for Dynamic AFM NAT Translation Pool failures.')
ltmFwNatDynamicPoolFailureStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatName"), (0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatFailureCause"))
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatEntry.setDescription('Columns in the ltmFwNatDynamicPoolFailureStat Table')
ltmFwNatDynamicPoolFailureStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatName.setDescription('The name of a Dynamic AFM NAT Translation Pool.')
ltmFwNatDynamicPoolFailureStatFailureCause = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 3, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatFailureCause.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatFailureCause.setDescription('The name of a Dynamic AFM NAT Translation Pool failure cause.')
ltmFwNatDynamicPoolFailureStatFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatFailureCount.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatFailureCount.setDescription('The value of a Dynamic AFM NAT Translation Pool failure cause.')
ltmFwNatStaticDestinationTranslationPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolNumber.setDescription('The number of ltmFwNatStaticDestinationTranslationPool entries in the table.')
ltmFwNatStaticDestinationTranslationPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2), )
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolTable.setDescription('A table containing information for a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolName"))
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolEntry.setDescription('Columns in the ltmFwNatStaticDestinationTranslationPool Table')
ltmFwNatStaticDestinationTranslationPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolName.setDescription('The name of a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolDescription.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolDescription.setDescription('The description of a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("staticNat", 1), ("staticPat", 2), ("dynamicNat", 3), ("dynamicPat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolType.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolType.setDescription('The type of a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolPortCount.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolPortCount.setDescription('The port count of a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwNatStaticDestinationTranslationPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwNatStaticDestinationTranslationPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatNumber.setDescription('The number of ltmFwNatStaticDestinationTranslationPoolStat entries in the table.')
ltmFwNatStaticDestinationTranslationPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3), )
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTable.setDescription('A table containing statistic information for a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatName"))
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatEntry.setDescription('Columns in the ltmFwNatStaticDestinationTranslationPoolStat Table')
ltmFwNatStaticDestinationTranslationPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatName.setDescription('The name of a Static AFM NAT Destination Translation Pool.')
ltmFwNatStaticDestinationTranslationPoolStatTransReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTransReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTransReqs.setDescription('The number of translation requests.')
ltmFwNatStaticDestinationTranslationPoolStatTransReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTransReqFails.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatTransReqFails.setDescription('The number of translation request failures.')
ltmFwNatStaticDestinationTranslationPoolStatBidirReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatBidirReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatBidirReqs.setDescription('The number of bidirectional requests.')
ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails.setDescription('The number of bidirectional request failures.')
ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans.setDescription('The number of err address translation events.')
ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans.setDescription('The number of err port translation events.')
ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis.setDescription('The number of err flow collision events.')
ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch.setDescription('The number of err config mismatch events.')
ltmFwNatStaticDestinationTranslationPoolStatErrMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrMemory.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatErrMemory.setDescription('The number of err memory events.')
ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps.setDescription('The number of subscriber id lookups.')
ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd.setDescription('The number of subscriber id not found events.')
ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 7, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs.setDescription('The number of subscriber id errors.')
ltmFwNatStaticSourceTranslationPoolNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolNumber.setDescription('The number of ltmFwNatStaticSourceTranslationPool entries in the table.')
ltmFwNatStaticSourceTranslationPoolTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2), )
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolTable.setDescription('A table containing information for a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolName"))
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolEntry.setDescription('Columns in the ltmFwNatStaticSourceTranslationPool Table')
ltmFwNatStaticSourceTranslationPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolName.setDescription('The name of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 2), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolDescription.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolDescription.setDescription('The description of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolPortCount.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolPortCount.setDescription('The port count of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 0), ("staticNat", 1), ("staticPat", 2), ("dynamicNat", 3), ("dynamicPat", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolType.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolType.setDescription('The type of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolRouteAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolRouteAdvertisement.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolRouteAdvertisement.setDescription('The route advertisement setting of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolProxyArp = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolProxyArp.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolProxyArp.setDescription('The proxy arp of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolIcmpEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolIcmpEcho.setDescription('The icmp echo of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled.setDescription('Whether or not the egress interfaces for a Static AFM NAT Source Translation Pool are enabled.')
ltmFwNatStaticSourceTranslationPoolStatResetStats = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatResetStats.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatResetStats.setDescription('The action to reset resettable statistics data in ltmFwNatStaticSourceTranslationPoolStat.\n\t\t Setting this value to 1 will reset statistics data.\n\t\t Note, some statistics data may not be reset including data that are incremental counters.')
ltmFwNatStaticSourceTranslationPoolStatNumber = MibScalar((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatNumber.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatNumber.setDescription('The number of ltmFwNatStaticSourceTranslationPoolStat entries in the table.')
ltmFwNatStaticSourceTranslationPoolStatTable = MibTable((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3), )
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTable.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTable.setDescription('A table containing statistic information for a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1), ).setIndexNames((0, "F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatName"))
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatEntry.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatEntry.setDescription('Columns in the ltmFwNatStaticSourceTranslationPoolStat Table')
ltmFwNatStaticSourceTranslationPoolStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 1), LongDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatName.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatName.setDescription('The name of a Static AFM NAT Source Translation Pool.')
ltmFwNatStaticSourceTranslationPoolStatTransReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTransReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTransReqs.setDescription('The number of translation requests.')
ltmFwNatStaticSourceTranslationPoolStatTransReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTransReqFails.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatTransReqFails.setDescription('The number of translation request failures.')
ltmFwNatStaticSourceTranslationPoolStatBidirReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatBidirReqs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatBidirReqs.setDescription('The number of bidirectional requests.')
ltmFwNatStaticSourceTranslationPoolStatBidirReqFails = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatBidirReqFails.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatBidirReqFails.setDescription('The number of bidirectional request failures.')
ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans.setDescription('The number of err address translation events.')
ltmFwNatStaticSourceTranslationPoolStatErrPortTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrPortTrans.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrPortTrans.setDescription('The number of err port translation events.')
ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis.setDescription('The number of err flow collision events.')
ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch.setDescription('The number of err config mismatch events.')
ltmFwNatStaticSourceTranslationPoolStatErrMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrMemory.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatErrMemory.setDescription('The number of err memory events.')
ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps.setDescription('The number of subscriber id lookups.')
ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd.setDescription('The number of subscriber id not found events.')
ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs = MibTableColumn((1, 3, 6, 1, 4, 1, 3375, 2, 2, 18, 5, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs.setDescription('The number of subscriber id errors.')
bigipLocalTMCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 3375, 2, 5, 1, 2)).setObjects(("F5-BIGIP-LOCAL-MIB", "bigipLocalTMGroups"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    bigipLocalTMCompliance = bigipLocalTMCompliance.setStatus('current')
if mibBuilder.loadTexts: bigipLocalTMCompliance.setDescription('This specifies the objects that are required to claim \n                 compliance to F5 Traffic Management System.')
bigipLocalTMGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2))
ltmAttrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 1)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAttrLbmodeFastestMaxIdleTime"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorState"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrLimitMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrPersistDestAddrMaxCount"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrSnatAnyIpProtocol"), ("F5-BIGIP-LOCAL-MIB", "ltmAttrMirrorPeerIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAttrGroup = ltmAttrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAttrGroup.setDescription('A collection of objects of ltmGlobalAttr MIB.')
ltmRateFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 2)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterRate"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterCeil"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterPname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterQtype"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterDirection"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRateFilterGroup = ltmRateFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterGroup.setDescription('A collection of objects of ltmRateFilter MIB.')
ltmRateFilterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 3)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatCname"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatRateBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBurstBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDroppedBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesQueued"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTailBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropRandBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotPkts"), ("F5-BIGIP-LOCAL-MIB", "ltmRateFilterStatDropTotBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRateFilterStatGroup = ltmRateFilterStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRateFilterStatGroup.setDescription('A collection of objects of ltmRateFilterStat MIB.')
ltmMirrorPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 4)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMirrorPortGroup = ltmMirrorPortGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortGroup.setDescription('A collection of objects of ltmMirrorPort MIB.')
ltmMirrorPortMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 5)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberToName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberName"), ("F5-BIGIP-LOCAL-MIB", "ltmMirrorPortMemberConduitName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMirrorPortMemberGroup = ltmMirrorPortMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMirrorPortMemberGroup.setDescription('A collection of objects of ltmMirrorPortMember MIB.')
ltmNatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 6)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatOrigAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmNatUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmNatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmNatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatGroup = ltmNatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatGroup.setDescription('A collection of objects of ltmNat MIB.')
ltmNatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 7)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNatStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatStatGroup = ltmNatStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatStatGroup.setDescription('A collection of objects of ltmNatStat MIB.')
ltmNatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 8)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanVlanName"), ("F5-BIGIP-LOCAL-MIB", "ltmNatVlanNatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNatVlanGroup = ltmNatVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNatVlanGroup.setDescription('A collection of objects of ltmNatVlan MIB.')
ltmNodeAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 9)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDynamicRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrPoolMemberRefCount"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrScreenName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrGroup = ltmNodeAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrGroup.setDescription('A collection of objects of ltmNodeAddr MIB.')
ltmNodeAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 10)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatDurationRateExceeded"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrStatGroup = ltmNodeAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatGroup.setDescription('A collection of objects of ltmNodeAddrStat MIB.')
ltmPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 11)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLbMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActionOnServiceDown"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMembersEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinUpMemberAction"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMinActiveMembers"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolActiveMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowSnat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisallowNat"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSimpleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDynamicRatioSum"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolSlowRampTime"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueOnConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueDepthLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolQueueTimeLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolGroup = ltmPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolGroup.setDescription('A collection of objects of ltmPool MIB.')
ltmPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 12)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatConnqAllServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatMsgMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatMsgMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatReqMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatReqMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatRespMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatRespMrOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolStatGroup = ltmPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatGroup.setDescription('A collection of objects of ltmPoolStat MIB.')
ltmPoolMemberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 13)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberWeight"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDynamicRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNewSessionEnable"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberSessionStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberMonitorRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMemberGroup = ltmPoolMemberGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberGroup.setDescription('A collection of objects of ltmPoolMember MIB.')
ltmPoolMemberStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 14)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeHead"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeMax"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEma"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqAgeEdm"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatConnqServiced"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatNodeName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatMsgMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatMsgMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatReqMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatReqMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatRespMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMemberStatRespMrOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMemberStatGroup = ltmPoolMemberStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMemberStatGroup.setDescription('A collection of objects of ltmPoolMemberStat MIB.')
ltmAuthProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 15)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileConfigName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileCredentialSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileIdleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAuthProfileGroup = ltmAuthProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileGroup.setDescription('A collection of objects of ltmAuthProfile MIB.')
ltmAuthProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 16)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatTotSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatCurSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatMaxSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatSuccessResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatFailureResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatWantcredentialResults"), ("F5-BIGIP-LOCAL-MIB", "ltmAuthProfileStatErrorResults"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAuthProfileStatGroup = ltmAuthProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAuthProfileStatGroup.setDescription('A collection of objects of ltmAuthProfileStat MIB.')
ltmClientSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 17)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslClientcertca"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslRenegotiateMaxRecordDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAllowNonssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCaPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertLifespan"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpCertExtensionIncludes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpLookupByIpaddrPort"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslGenericAlert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSslSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassDipBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassDipWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassSipBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassSipWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassHnBList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslFwdpBypassHnWList"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslProxySsl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslProxySslPassthrough"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslPeerNoRenegotiateTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMaxRenegotiationsPerMin"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionMirroring"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMaxAggregateRenegotiationsPerMin"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslSessionTicketTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAllowExpiredCrl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMaxActiveHandshake"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslAllowDynamicRecordSizing"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslMaximumRecordSize"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslBypassHsAlertEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslBypassClientCertFailEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslOcspStapling"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslNotifyCertStatusToVs"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslC3dEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCentityOcspObjName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslDropUnknownOcspStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslData0rttMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslGroup = ltmClientSslGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslGroup.setDescription('A collection of objects of ltmClientSslProfile MIB.')
ltmClientSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 18)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatShaDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDtlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCachedCerts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDheDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesGcmBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDestinationIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSourceIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatHostnameBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRenegotiationsRejected"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingResponseStatusErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingResponseValidationErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingCertStatusErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnHttpErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnTimeouts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspStaplingOcspConnFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAggregateRenegotiationsRejected"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessionMirrorSuccess"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSessionMirrorFailure"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorPeerReady"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorHaCtxSent"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorHaCtxRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorHaHsSuccess"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorHaFailure"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatConnectionMirrorHaTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDtlsTxPushbacks"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCamelliaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatActiveHandshakeRejected"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCurrentActiveHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatLicensedTps"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize1k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize2k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize3k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize4k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize5k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize6k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize7k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize8k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize9k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize10k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize11k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize12k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize13k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize14k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize15k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRecordSize16k"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatExtendedMasterSecrets"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatBypassesHandshakeAlert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatBypassClientCertificateRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslCachedResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslCertStatusReq"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslStapledResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslRespstatusErrResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslInvalidCertResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslRevokedResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatOcspFwdpClientsslUnknownResp"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatC3dConns"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTlsv13"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatChacha20Poly1305Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatData0rttAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatData0rttRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatAesGcmBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatChacha20Poly1305BulkOffld"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDesBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRc4BulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatCamelliaBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatMd5DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatShaDigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha224Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha224DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha256Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha256DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha384Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha384DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha512Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatSha512DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupP256"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupP256Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupP384"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupP384Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupX25519"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDhGroupX25519Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize1024"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize1024Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize2048"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize2048Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize4096"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatRsaKeySize4096Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotalHandshakesSoftware"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatTotalHandshakesOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslStatDtlsv12"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslStatGroup = ltmClientSslStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslStatGroup.setDescription('A collection of objects of ltmClientSslProfileStat MIB.')
ltmServerSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 19)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmServerSslNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslKey"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslChain"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCafile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCrlfile"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCiphers"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslModsslmethods"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiatePeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslRenegotiateSize"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslPeerCertMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateOnce"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateDepth"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAuthenticateName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStrictResume"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAlertTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSessionTicket"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslFwdpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropExpCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropUntrustCa"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslGenericAlert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSslSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslFwdpBypassEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProxySsl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProxySslPassthrough"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslSessionMirroring"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslAllowExpiredCrl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslMaxActiveHandshake"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslBypassHsAlertEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslBypassClientCertFailEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslCentityOcspObjName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dCaKey"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dCaCert"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dCaPassphrase"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dCertLifespan"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslC3dCertExtensionIncludes"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslData0rttMode"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropRevokedCertStatus"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslDropUnknownCertStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmServerSslGroup = ltmServerSslGroup.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslGroup.setDescription('A collection of objects of ltmServerSslProfile MIB.')
ltmServerSslStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 20)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotNativeConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMaxCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotCompatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEncryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDecryptedBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRecordsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFullyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPartiallyHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNonHwAcceleratedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPrematureDisconnects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMidstreamRenegotiations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheCurEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheOverflows"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessCacheInvalidations"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertValid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertInvalid"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatPeercertNone"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatHandshakeFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatBadRecords"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatFatalAlerts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv2"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSslv3"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAdhKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDesBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatIdeaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc2Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc4Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNullDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMd5Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatShaDigest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatNotssl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSecureHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureHandshakeRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatInsecureRenegotiationRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSniRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv11"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv12"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDtlsv1"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReused"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatReuseFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdheRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdhRsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdheEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatEcdhEcdsaKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDheDssKeyxchg"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesGcmBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDestinationIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSourceIpBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatHostnameBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessionMirrorSuccess"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSessionMirrorFailure"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorPeerReady"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorHaCtxSent"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorHaCtxRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorHaHsSuccess"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorHaFailure"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatConnectionMirrorHaTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDtlsTxPushbacks"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCamelliaBulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatActiveHandshakeRejected"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCurrentActiveHandshakes"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatLicensedTps"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatExtendedMasterSecrets"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslCachedResp"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslStapledResp"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslResponderQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslResponseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslCertStatusUnknown"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatOcspServersslCertStatusRevoked"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatC3dConns"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTlsv13"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatChacha20Poly1305Bulk"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatAesGcmBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatChacha20Poly1305BulkOffld"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDesBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRc4BulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatCamelliaBulkOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatMd5DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatShaDigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha224Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha224DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha256Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha256DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha384Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha384DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha512Digest"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatSha512DigestOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupP256"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupP256Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupP384"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupP384Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupX25519"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDhGroupX25519Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize1024"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize1024Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize2048"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize2048Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize4096"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatRsaKeySize4096Offload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotalHandshakesSoftware"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatTotalHandshakesOffload"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslStatDtlsv12"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmServerSslStatGroup = ltmServerSslStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslStatGroup.setDescription('A collection of objects of ltmServerSslProfileStat MIB.')
ltmConnPoolProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 21)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileSrcMask"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileIdleTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmConnPoolProfileGroup = ltmConnPoolProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileGroup.setDescription('A collection of objects of ltmConnPoolProfile MIB.')
ltmConnPoolProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 22)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatCurSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmConnPoolProfileStatConnects"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmConnPoolProfileStatGroup = ltmConnPoolProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmConnPoolProfileStatGroup.setDescription('A collection of objects of ltmConnPoolProfileStat MIB.')
ltmFastL4ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 23)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpFragReass"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfilePvaAccelMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpTimestampMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpWscaleMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpGenerateIsn"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpStripSack"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileIpTosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLinkQosToServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromClient"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileRttFromServer"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTcpCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseInitiation"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLooseClose"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileHardSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileSoftSyncookie"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileLateBinding"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileExplicitFlowMigration"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileClientTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileTimeoutRecovery"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastL4ProfileGroup = ltmFastL4ProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileGroup.setDescription('A collection of objects of ltmFastL4Profile MIB.')
ltmFtpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 24)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileTranslateExtended"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileDataPort"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFtpProfileGroup = ltmFtpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileGroup.setDescription('A collection of objects of ltmFtpProfile MIB.')
ltmHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 25)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileBasicAuthRealm"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileOneConnect"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHeaderErase"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileFallbackHost"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMode"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRequestChunking"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileResponseChunking"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsMaxColumn"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileLwsSeparator"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRedirectRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePipelining"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcache"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileRamcacheInsertAgeHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileCompressPreferredMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileServerAgentName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughPipeline"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileTruncatedRedirects"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughOversizeClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughOversizeServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughExcessClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughExcessServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfilePassthroughUnknownMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHstsMode"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHstsMaximumAge"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHstsIncludeSubdomains"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileHstsPreload"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileOneConnectStatusReuse"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProfileGroup = ltmHttpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileGroup.setDescription('A collection of objects of ltmHttpProfile MIB.')
ltmCompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 26)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompUriInclGroup = ltmCompUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompUriInclGroup.setDescription('A collection of objects of ltmHttpProfileCompUriIncl MIB.')
ltmCompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 27)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompUriExclGroup = ltmCompUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompUriExclGroup.setDescription('A collection of objects of ltmHttpProfileCompUriExcl MIB.')
ltmCompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 28)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeInclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompContTypeInclGroup = ltmCompContTypeInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompContTypeInclGroup.setDescription('A collection of objects of ltmHttpProfileCompContTypeIncl MIB.')
ltmCompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 29)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmCompContTypeExclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmCompContTypeExclGroup = ltmCompContTypeExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmCompContTypeExclGroup.setDescription('A collection of objects of ltmHttpProfileCompContTypeExcl MIB.')
ltmHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 30)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRamcacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughConnect"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughWebSockets"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughOversizeClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughOversizeServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughExcessClientHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughExcessServerHeaders"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughUnknownMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatPassthroughPipeline"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV20Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV30Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV20Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProfileStatV30Resp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProfileStatGroup = ltmHttpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProfileStatGroup.setDescription('A collection of objects of ltmHttpProfileStat MIB.')
ltmPersistProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 31)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMirror"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMask"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieMethod"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieName"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashOffset"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHashLength"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMsrdpNoSessionDir"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileMapProxies"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossServices"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossVirtuals"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileAcrossPools"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileUieRule"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileSipInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieHttpOnly"), ("F5-BIGIP-LOCAL-MIB", "ltmPersistProfileCookieSecure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPersistProfileGroup = ltmPersistProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPersistProfileGroup.setDescription('A collection of objects of ltmPersistProfile MIB.')
ltmStreamProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 32)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileSource"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileTarget"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmStreamProfileGroup = ltmStreamProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileGroup.setDescription('A collection of objects of ltmStreamProfile MIB.')
ltmStreamProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 33)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmStreamProfileStatReplaces"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmStreamProfileStatGroup = ltmStreamProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmStreamProfileStatGroup.setDescription('A collection of objects of ltmStreamProfileStat MIB.')
ltmTcpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 34)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitRecycle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayedAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyMss"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimeWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFinWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCloseWaitTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileKeepAliveInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDeferredAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSelectiveAcks"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEcn"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileLimitedTransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileHighPerfTcpExt"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSlowStart"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileBandwidthDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileNagle"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAckOnPush"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5Sig"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMd5SigPass"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAbc"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCongestionCtrl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDsack"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCmetricsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileVerifiedAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreRate"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePktLossIgnoreBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileZeroWindowTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitCwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileInitRwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileDelayWindowControl"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileSynRtoBase"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTimestamps"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMinRto"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcp"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRatePace"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpCsum"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpCsumVerify"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpDebug"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpFallback"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpJoinmax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpNojoindssack"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpRtomax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpRxmitmin"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpSubflowmax"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpMakeafterbreak"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileMptcpFastjoin"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEarlyRetransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileTailLossProbe"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileCmetricsCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRatePaceMaxRate"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFastOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFastOpenCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileFinWait2Timeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileRexmtThresh"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAutoSendBuffer"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAutoReceiveWindow"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileAutoProxyBuffer"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileEnhancedLossRecovery"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfilePushFlag"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTcpProfileGroup = ltmTcpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileGroup.setDescription('A collection of objects of ltmTcpProfile MIB.')
ltmTcpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 35)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatCloseWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatFinWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTimeWait"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxooseg"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatRxbadcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatSyncacheover"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatTxrexmits"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpProfileStatFinWait2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTcpProfileStatGroup = ltmTcpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTcpProfileStatGroup.setDescription('A collection of objects of ltmTcpProfileStat MIB.')
ltmUdpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 36)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileIpTosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileLinkQosToClient"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileDatagramLb"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileAllowNoPayload"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileSndbuf"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUdpProfileGroup = ltmUdpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileGroup.setDescription('A collection of objects of ltmUdpProfile MIB.')
ltmUdpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 37)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxdgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbaddgram"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatRxnosum"), ("F5-BIGIP-LOCAL-MIB", "ltmUdpProfileStatTxdgram"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUdpProfileStatGroup = ltmUdpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUdpProfileStatGroup.setDescription('A collection of objects of ltmUdpProfileStat MIB.')
ltmRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 38)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleDefinition"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleConfigSource"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleGroup = ltmRuleGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleGroup.setDescription('A collection of objects of ltmRule MIB.')
ltmRuleEventGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 39)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventEventType"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventScript"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleEventGroup = ltmRuleEventGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventGroup.setDescription('A collection of objects of ltmRuleEvent MIB.')
ltmRuleEventStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 40)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatEventType"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatPriority"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAborts"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatTotalExecutions"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatAvgCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMaxCycles"), ("F5-BIGIP-LOCAL-MIB", "ltmRuleEventStatMinCycles"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRuleEventStatGroup = ltmRuleEventStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRuleEventStatGroup.setDescription('A collection of objects of ltmRuleEventStat MIB.')
ltmSnatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 41)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatGroup = ltmSnatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatGroup.setDescription('A collection of objects of ltmSnat MIB.')
ltmSnatStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 42)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatStatClientCurConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatStatGroup = ltmSnatStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatStatGroup.setDescription('A collection of objects of ltmSnatStat MIB.')
ltmSnatVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 43)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatVlanGroup = ltmSnatVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatVlanGroup.setDescription('A collection of objects of ltmSnatVlan MIB.')
ltmSnatOrigAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 44)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrSnatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatOrigAddrWildmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatOrigAddrGroup = ltmSnatOrigAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatOrigAddrGroup.setDescription('A collection of objects of ltmSnatOrigAddr MIB.')
ltmTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 45)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrTcpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUdpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrIpIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTransAddrGroup = ltmTransAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrGroup.setDescription('A collection of objects of ltmTransAddr MIB.')
ltmTransAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 46)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmTransAddrStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTransAddrStatGroup = ltmTransAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTransAddrStatGroup.setDescription('A collection of objects of ltmTransAddrStat MIB.')
ltmSnatPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 47)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatPoolGroup = ltmSnatPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolGroup.setDescription('A collection of objects of ltmSnatPool MIB.')
ltmSnatPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 48)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatPoolStatServerCurConns"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatPoolStatGroup = ltmSnatPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatPoolStatGroup.setDescription('A collection of objects of ltmSnatPoolStat MIB.')
ltmSnatpoolTransAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 49)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmSnatpoolTransAddrTransAddrName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSnatpoolTransAddrGroup = ltmSnatpoolTransAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSnatpoolTransAddrGroup.setDescription('A collection of objects of ltmSnatpoolTransAddr MIB.')
ltmVirtualServGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 50)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServWildmask"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServIpProto"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServListedEnabledVlans"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRclass"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslateAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServTranslatePort"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServLasthopPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSnatpoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDefaultPool"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServFallbackPersist"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServActualPvaAccel"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServGtmScore"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServCmpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSrcport"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVaName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServSourceAddressTranslationPool"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServServiceDownImmediateAction"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServServersslUseSni"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServGroup = ltmVirtualServGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServGroup.setDescription('A collection of objects of ltmVirtualServ MIB.')
ltmVirtualServStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 51)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMinConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMaxConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCsMeanConnDur"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatNoNodesErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatEphemeralCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCycleCount"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5s"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio1m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatVsUsageRatio5m"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatCurrentConnsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatDurationRateExceeded"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatSwSyncookies"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatSwSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatHwSyncookies"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatHwSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatClientSlowKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieHits"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatWlSyncookieRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatMsgMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatMsgMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatReqMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatReqMrOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatRespMrIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServStatRespMrOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServStatGroup = ltmVirtualServStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServStatGroup.setDescription('A collection of objects of ltmVirtualServStat MIB.')
ltmVirtualServAuthGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 52)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServAuthProfileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServAuthGroup = ltmVirtualServAuthGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServAuthGroup.setDescription('A collection of objects of ltmVirtualServAuth MIB.')
ltmVirtualServPersistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 53)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPersistUseDefault"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServPersistGroup = ltmVirtualServPersistGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPersistGroup.setDescription('A collection of objects of ltmVirtualServPersist MIB.')
ltmVirtualServProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 54)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServProfileContext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServProfileGroup = ltmVirtualServProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServProfileGroup.setDescription('A collection of objects of ltmVirtualServProfile MIB.')
ltmVirtualServPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 55)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServPoolRuleName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServPoolGroup = ltmVirtualServPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServPoolGroup.setDescription('A collection of objects of ltmVirtualServPool MIB.')
ltmVirtualServClonePoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 56)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServClonePoolType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServClonePoolGroup = ltmVirtualServClonePoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServClonePoolGroup.setDescription('A collection of objects of ltmVirtualServClonePool MIB.')
ltmVirtualServRuleGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 57)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleVirtualServerName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRuleRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServRulePriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServRuleGroup = ltmVirtualServRuleGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServRuleGroup.setDescription('A collection of objects of ltmVirtualServRule MIB.')
ltmVirtualServVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 58)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualServVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualServVlanGroup = ltmVirtualServVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualServVlanGroup.setDescription('A collection of objects of ltmVirtualServVlan MIB.')
ltmVirtualAddrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 59)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrArpEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrSfFlags"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrUnitId"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrAvailabilityState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrDisabledParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatusReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrServer"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrIsFloat"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrIcmpEcho"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualAddrGroup = ltmVirtualAddrGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrGroup.setDescription('A collection of objects of ltmVirtualAddr MIB.')
ltmVirtualAddrStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 60)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatPvaCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatTotPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatCurrPvaAssistConn"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualAddrStatName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualAddrStatGroup = ltmVirtualAddrStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualAddrStatGroup.setDescription('A collection of objects of ltmVirtualAddrStat MIB.')
ltmFastHttpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 61)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMssOverride"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileClientCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileServerCloseTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolStep"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolMaxReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileMaxRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileInsertXforwardedFor"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHttp11CloseWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileHeaderInsert"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileUncleanShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileForceHttp10Response"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileLayer7"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileConnpoolReplenish"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastHttpProfileGroup = ltmFastHttpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileGroup.setDescription('A collection of objects of ltmFastHttpProfile MIB.')
ltmFastHttpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 62)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientSyns"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolCurSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolReuses"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatConnpoolExhausted"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatUnbufferedReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatReqParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatRespParseErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatClientRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatServerRxBad"), ("F5-BIGIP-LOCAL-MIB", "ltmFastHttpProfileStatPipelinedReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastHttpProfileStatGroup = ltmFastHttpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastHttpProfileStatGroup.setDescription('A collection of objects of ltmFastHttpProfileStat MIB.')
ltmXmlProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 63)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileAbortOnError"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMaxBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileMultipleQueryMatches"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileGroup = ltmXmlProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileGroup.setDescription('A collection of objects of ltmXmlProfile MIB.')
ltmXmlProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 64)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumInspectedDocuments"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithOneMatch"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithTwoMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithThreeMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumDocumentsWithNoMatches"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileStatNumMalformedDocuments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileStatGroup = ltmXmlProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileStatGroup.setDescription('A collection of objects of ltmXmlProfileStat MIB.')
ltmRamUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 65)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriExclGroup = ltmRamUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriExclGroup.setDescription('A collection of objects of ltmHttpProfileRamUriExcl MIB.')
ltmRamUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 66)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriInclGroup = ltmRamUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriInclGroup.setDescription('A collection of objects of ltmHttpProfileRamUriIncl MIB.')
ltmRamUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 67)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinName"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRamUriPinUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRamUriPinGroup = ltmRamUriPinGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRamUriPinGroup.setDescription('A collection of objects of ltmHttpProfileRamUriPin MIB.')
ltmDnsProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 68)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileGtmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Mode"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64PrefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64Prefix"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDns64AdditionalRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsLastAction"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileUseLocalBind"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsExpressEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnssecEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileCacheEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileDnsCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileProcessRd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileAvrDnsStatSampleRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurity"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileSecurityEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileLoggingEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileFastDnsEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileHwValidation"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileHwCache"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsProfileGroup = ltmDnsProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileGroup.setDescription('A collection of objects of ltmDnsProfile MIB.')
ltmHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 69)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassAsmEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassWaEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassRedirectLocation"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUrlRewrite"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassGroup = ltmHttpClassGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassGroup.setDescription('A collection of objects of ltmHttpClassProfile MIB.')
ltmHttpClassHostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 70)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHostString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassHostGroup = ltmHttpClassHostGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassHostGroup.setDescription('A collection of objects of ltmHttpClassProfileHost MIB.')
ltmHttpClassUriGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 71)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassUriString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassUriGroup = ltmHttpClassUriGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassUriGroup.setDescription('A collection of objects of ltmHttpClassProfileUri MIB.')
ltmHttpClassHeadGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 72)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassHeadString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassHeadGroup = ltmHttpClassHeadGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassHeadGroup.setDescription('A collection of objects of ltmHttpClassProfileHead MIB.')
ltmHttpClassCookGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 73)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassCookString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassCookGroup = ltmHttpClassCookGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassCookGroup.setDescription('A collection of objects of ltmHttpClassProfileCook MIB.')
ltmHttpClassStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 74)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCookiePersistInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNumberReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatGetReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatMaxKeepaliveReq"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRespBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatOtherPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpClassStatRamcacheMissBytesAll"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpClassStatGroup = ltmHttpClassStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpClassStatGroup.setDescription('A collection of objects of ltmHttpClassProfileStat MIB.')
ltmIiopProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 75)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistRequestId"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfilePersistObjectKey"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileAbortOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIiopProfileGroup = ltmIiopProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileGroup.setDescription('A collection of objects of ltmIiopProfile MIB.')
ltmIiopProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 76)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumCancels"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIiopProfileStatNumFragments"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIiopProfileStatGroup = ltmIiopProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIiopProfileStatGroup.setDescription('A collection of objects of ltmIiopProfileStat MIB.')
ltmRtspProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 77)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxHeaderSize"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMaxQueuedData"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileUnicastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileMulticastRedirect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileSessionReconnect"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRealHttpPersistence"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxy"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileProxyHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileRtcpPort"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRtspProfileGroup = ltmRtspProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileGroup.setDescription('A collection of objects of ltmRtspProfile MIB.')
ltmRtspProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 78)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmRtspProfileStatNumInterleaved"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRtspProfileStatGroup = ltmRtspProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRtspProfileStatGroup.setDescription('A collection of objects of ltmRtspProfileStat MIB.')
ltmSctpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 79)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvOrdered"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndPartial"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTcpShutdown"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileOutStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSndbuf"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRcvwnd"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileTxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRxChunks"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileCookieExpiration"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileInitMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileAssocMaxrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferLow"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileProxyBufferHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileHeartbeatInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileIpTosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileLinkQosToPeer"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSecret"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileMaxBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileHeartbeatMaxBurst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileMaxCommunicationPaths"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileMaxPathRetransmitLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileServerSideMultihoming"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileClientSideMultihoming"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRtoInitial"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRtoMin"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileRtoMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileSackTimeout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSctpProfileGroup = ltmSctpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileGroup.setDescription('A collection of objects of ltmSctpProfile MIB.')
ltmSctpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 80)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnects"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConnfails"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAbandons"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxrst"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatRxbadcookie"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatAssociations"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatClosing"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatConfirmedAddresses"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatUnconfirmedAddresses"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatActivePaths"), ("F5-BIGIP-LOCAL-MIB", "ltmSctpProfileStatInactivePaths"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSctpProfileStatGroup = ltmSctpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSctpProfileStatGroup.setDescription('A collection of objects of ltmSctpProfileStat MIB.')
ltmUserStatProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 81)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileDefaultName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUserStatProfileGroup = ltmUserStatProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileGroup.setDescription('A collection of objects of ltmUserStatProfile MIB.')
ltmUserStatProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 83)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldId"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldName"), ("F5-BIGIP-LOCAL-MIB", "ltmUserStatProfileStatFieldValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmUserStatProfileStatGroup = ltmUserStatProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmUserStatProfileStatGroup.setDescription('A collection of objects of ltmUserStatProfileStat MIB.')
ltmVsHttpClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 84)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsHttpClassPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVsHttpClassGroup = ltmVsHttpClassGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVsHttpClassGroup.setDescription('A collection of objects of ltmVirtualServHttpClass MIB.')
ltmNodeAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 85)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmNodeAddrStatusName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNodeAddrStatusGroup = ltmNodeAddrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNodeAddrStatusGroup.setDescription('A collection of objects of ltmNodeAddrStatus MIB.')
ltmPoolStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 86)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolStatusGroup = ltmPoolStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolStatusGroup.setDescription('A collection of objects of ltmPoolStatus MIB.')
ltmPoolMbrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 87)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmPoolMbrStatusNodeName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPoolMbrStatusGroup = ltmPoolMbrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPoolMbrStatusGroup.setDescription('A collection of objects of ltmPoolMemberStatus MIB.')
ltmVsStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 88)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVsStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVsStatusDetailReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVsStatusGroup = ltmVsStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVsStatusGroup.setDescription('A collection of objects of ltmVirtualServStatus MIB.')
ltmVAddrStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 89)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusAvailState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusEnabledState"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusParentType"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusDetailReason"), ("F5-BIGIP-LOCAL-MIB", "ltmVAddrStatusName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVAddrStatusGroup = ltmVAddrStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVAddrStatusGroup.setDescription('A collection of objects of ltmVirtualAddrStatus MIB.')
ltmFallbackStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 90)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusName"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmFallbackStatusCode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFallbackStatusGroup = ltmFallbackStatusGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFallbackStatusGroup.setDescription('A collection of objects of ltmHttpProfileFallbackStatus MIB.')
ltmRespHeadersPermGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 91)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermName"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRespHeadersPermStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRespHeadersPermGroup = ltmRespHeadersPermGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRespHeadersPermGroup.setDescription('A collection of objects of ltmHttpProfileRespHeadersPerm MIB.')
ltmEncCookiesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 92)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesName"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmEncCookiesStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmEncCookiesGroup = ltmEncCookiesGroup.setStatus('current')
if mibBuilder.loadTexts: ltmEncCookiesGroup.setDescription('A collection of objects of ltmHttpProfileEncCookies MIB.')
ltmFastL4ProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 93)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatOpen"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAccepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatAcceptfails"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatExpires"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadpkt"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadunreach"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatRxbadsum"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatTxerrors"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookIssue"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatSyncookReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatServersynrtx"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatLbcSuccessful"), ("F5-BIGIP-LOCAL-MIB", "ltmFastL4ProfileStatLbcTimedout"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFastL4ProfileStatGroup = ltmFastL4ProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFastL4ProfileStatGroup.setDescription('A collection of objects of ltmFastL4ProfileStat MIB.')
ltmSipProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 94)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileTerminateBye"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileSecureVia"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileInsertRecordRoute"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileFirewallEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSipProfileGroup = ltmSipProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileGroup.setDescription('A collection of objects of ltmSipProfile MIB.')
ltmSipProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 95)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatBadmsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmSipProfileStatDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSipProfileStatGroup = ltmSipProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSipProfileStatGroup.setDescription('A collection of objects of ltmSipProfileStat MIB.')
ltmVirtualModuleScoreGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 96)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreModuleType"), ("F5-BIGIP-LOCAL-MIB", "ltmVirtualModuleScoreScore"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmVirtualModuleScoreGroup = ltmVirtualModuleScoreGroup.setStatus('current')
if mibBuilder.loadTexts: ltmVirtualModuleScoreGroup.setDescription('A collection of objects of ltmVirtualModuleScore MIB.')
ltmIsessionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 97)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileMode"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileConnectionReuse"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionNull"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflate"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionLzo"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionAdaptive"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileDeduplication"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfilePortTransparency"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileTargetVirtual"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileEndpointPool"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionDeflateLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionBzip2"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompression"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileCompressionCodecs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIsessionProfileGroup = ltmIsessionProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileGroup.setDescription('A collection of objects of ltmIsessionProfile MIB.')
ltmIsessionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 98)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatNullOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatLzoOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDeflateOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupInMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHits"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutHitHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket2k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket4k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket8k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket16k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket32k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket64k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket128k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket256k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket512k"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucket1m"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatDedupOutMissHistBucketLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsIdleTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatOutgoingConnsPassthruTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveCur"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveMax"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsActiveTot"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatIncomingConnsErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2InBytesRaw"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutUses"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesOpt"), ("F5-BIGIP-LOCAL-MIB", "ltmIsessionProfileStatBzip2OutBytesRaw"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIsessionProfileStatGroup = ltmIsessionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIsessionProfileStatGroup.setDescription('A collection of objects of ltmIsessionProfileStat MIB.')
ltmXmlProfileXpathQueriesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 99)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileXpathQueriesString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileXpathQueriesGroup = ltmXmlProfileXpathQueriesGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileXpathQueriesGroup.setDescription('A collection of objects of ltmXmlProfileXpathQueries MIB.')
ltmXmlProfileNamespaceMappingsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 100)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsName"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingPrefix"), ("F5-BIGIP-LOCAL-MIB", "ltmXmlProfileNamespaceMappingsMappingNamespace"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmXmlProfileNamespaceMappingsGroup = ltmXmlProfileNamespaceMappingsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmXmlProfileNamespaceMappingsGroup.setDescription('A collection of objects of ltmXmlProfileNamespaceMappings MIB.')
ltmHttpCompressionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 101)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileSelective"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBufferSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileVaryHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileAllowHttp10"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipMemlevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipWindowsize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileGzipLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileKeepAcceptEncoding"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileBrowserWorkarounds"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaver"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileCpusaverLow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfilePreferredMethod"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpCompressionProfileGroup = ltmHttpCompressionProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileGroup.setDescription('A collection of objects of ltmHttpCompressionProfile MIB.')
ltmHttpcompUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 102)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompUriInclGroup = ltmHttpcompUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriInclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileUriIncl MIB.')
ltmHttpcompUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 103)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompUriExclGroup = ltmHttpcompUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompUriExclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileUriExcl MIB.')
ltmHttpcompContTypeInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 104)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeInclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompContTypeInclGroup = ltmHttpcompContTypeInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeInclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileContTypeIncl MIB.')
ltmHttpcompContTypeExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 105)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpcompContTypeExclContentType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpcompContTypeExclGroup = ltmHttpcompContTypeExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpcompContTypeExclGroup.setDescription('A collection of objects of ltmHttpCompressionProfileContTypeExcl MIB.')
ltmHttpCompressionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 106)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatNullCompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatHtmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatCssPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatJsPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatXmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatSgmlPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatPlainPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOctetPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatImagePostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatVideoPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatAudioPostcompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPrecompressBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpCompressionProfileStatOtherPostcompressBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpCompressionProfileStatGroup = ltmHttpCompressionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpCompressionProfileStatGroup.setDescription('A collection of objects of ltmHttpCompressionProfileStat MIB.')
ltmWebAccelerationProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 107)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxEntries"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheMaxAge"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMinSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheObjectMaxSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheIgnoreClient"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheAgingRate"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileCacheInsertAgeHeader"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebAccelerationProfileGroup = ltmWebAccelerationProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileGroup.setDescription('A collection of objects of ltmWebAccelerationProfile MIB.')
ltmWebaccCacheUriExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 108)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriExclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriExclGroup = ltmWebaccCacheUriExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriExclGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriExcl MIB.')
ltmWebaccCacheUriInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 109)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriInclUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriInclGroup = ltmWebaccCacheUriInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriInclGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriIncl MIB.')
ltmWebaccCacheUriPinGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 110)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriPinUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriPinGroup = ltmWebaccCacheUriPinGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriPinGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriPin MIB.')
ltmWebAccelerationProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 111)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheMissBytesAll"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatCacheEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeHitBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeSize"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeCount"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatInterStripeEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmWebAccelerationProfileStatRemoteHitBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebAccelerationProfileStatGroup = ltmWebAccelerationProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebAccelerationProfileStatGroup.setDescription('A collection of objects of ltmWebAccelerationProfileStat MIB.')
ltmRstCauseStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 112)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatRstCause"), ("F5-BIGIP-LOCAL-MIB", "ltmRstCauseStatCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRstCauseStatGroup = ltmRstCauseStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRstCauseStatGroup.setDescription('A collection of objects of ltmRstCauseStat MIB.')
ltmWebaccCacheUriOverGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 113)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmWebaccCacheUriOverUri"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebaccCacheUriOverGroup = ltmWebaccCacheUriOverGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebaccCacheUriOverGroup.setDescription('A collection of objects of ltmWebAccelerationProfileUriOver MIB.')
ltmDnsCacheGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 114)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMsgCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRrsetCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAnswerDefaultZones"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUseTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheNameserverCacheCount"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentTcp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentUdp"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheUnwantedThreshold"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRouteDomainName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheIgnoreCd"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCachePrefetchKey"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheKeyCacheSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheRandomizeQueryNameCase"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheMaxConcurrentQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheAllowedQueryTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheGroup = ltmDnsCacheGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheGroup.setDescription('A collection of objects of ltmDnsCache MIB.')
ltmDnsCacheStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 115)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatAsync"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureResolv"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureCf"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureServer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFailureSend"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatMsgEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRrsetEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatNameserverEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyHits"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyMisses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyInserts"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyUpdates"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatKeyEvictions"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUdpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatTcpTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatUnsolicitedReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecUnchecked"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecBogus"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecIndeterminate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecInsecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatSecSecure"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFwdQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatFwdResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheStatRpzRewrites"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheStatGroup = ltmDnsCacheStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheStatGroup.setDescription('A collection of objects of ltmDnsCacheStat MIB.')
ltmDnsProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 116)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatResponsesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToGtm"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsExpressNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToCache"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatToDns"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Reqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Rewrites"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDns64Failures"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHints"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRejects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNoErrors"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalformed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTclSuspends"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionDesired"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCheckingDisabled"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatEdns0"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeQuery"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeNotify"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeUpdate"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneIxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatZoneAxfr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthoritativeAnswer"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRecursionAvailable"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAuthenticatedData"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTruncated"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNoerror"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeNxdomain"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeServfail"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeRefused"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMalicious"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAaaaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatAnyReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatCnameReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatMxReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNsReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatPtrReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSoaReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatSrvReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatTxtReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOtherReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatDnsRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmEffectiveRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmConfiguredObjects"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmRateRejectedRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatGtmRewrites"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatOpcodeOther"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsAllowed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespTc"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespNx"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespNe"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespRf"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHwMalformed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHwInspected"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHwCacheLookups"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatHwCacheResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatNaptrReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatRcodeBadvers"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsProfileStatFastDnsRespBvers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsProfileStatGroup = ltmDnsProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsProfileStatGroup.setDescription('A collection of objects of ltmDnsProfileStat MIB.')
ltmDosProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 117)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDosProfileDefaultName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosProfileGroup = ltmDosProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosProfileGroup.setDescription('A collection of objects of ltmDosProfile MIB.')
ltmDosApplicationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 118)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTriggerIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMode"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMaximumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationMinimumLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedIpMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedUrlMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedMaximumPreventionDuration"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedSiteMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationTpsBasedDeEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteClientSideDefense"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteRateLimiting"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteTpsIncreaseRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteMaximumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedSiteMinimumTps"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationLatencyBasedDeEscalationPeriod"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlProtection"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlAutomaticDetection"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlLatencyThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationGroup = ltmDosApplicationGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationGroup.setDescription('A collection of objects of ltmDosApplication MIB.')
ltmDosWhiteIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 119)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentProfile"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpParentName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpAddress"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmaskType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosWhiteIpNetmask"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosWhiteIpGroup = ltmDosWhiteIpGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosWhiteIpGroup.setDescription('A collection of objects of ltmDosWhiteIp MIB.')
ltmDnsSecurityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 120)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityQueryTypeInclusion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsSecurityGroup = ltmDnsSecurityGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityGroup.setDescription('A collection of objects of ltmDnsSecurity MIB.')
ltmDnsSecurityStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 121)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatFilteredDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatADrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAaaaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatAnyDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatCnameDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatMxDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatNsDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatPtrDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSoaDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatSrvDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatTxtDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsSecurityStatOtherDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsSecurityStatGroup = ltmDnsSecurityStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsSecurityStatGroup.setDescription('A collection of objects of ltmDnsSecurityStat MIB.')
ltmBwcPolicyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 122)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPerSecOut"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatBytesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsPassed"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatActivePolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatInactivePolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTotalPolicies"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatTimeDataCollected"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsPerSec"), ("F5-BIGIP-LOCAL-MIB", "ltmBwcPolicyStatPacketsPerSecOut"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmBwcPolicyStatGroup = ltmBwcPolicyStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmBwcPolicyStatGroup.setDescription('A collection of objects of ltmBwcPolicyStat MIB.')
ltmDnsQueryFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 123)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsQueryFilterType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsQueryFilterGroup = ltmDnsQueryFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsQueryFilterGroup.setDescription('A collection of objects of ltmDnsQueryFilter MIB.')
ltmDnsHeaderFilterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 124)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsHeaderFilterOpcodeExclusion"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsHeaderFilterGroup = ltmDnsHeaderFilterGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsHeaderFilterGroup.setDescription('A collection of objects of ltmDnsHeaderFilter MIB.')
ltmLsnPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 125)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixGroup = ltmLsnPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixGroup.setDescription('A collection of objects of ltmLsnPrefix MIB.')
ltmLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 126)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMemberCount"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistenceTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv4"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolPersistencePrefixLengthIpv6"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolInboundConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolIcmpEcho"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeLow"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolTranslationPortRangeHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolClientConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolEgressInterfacesEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolHairpinMode"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolGroup = ltmLsnPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolGroup.setDescription('A collection of objects of ltmLsnPool MIB.')
ltmLsnPrefixLsnPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 127)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixLsnPoolGroup = ltmLsnPrefixLsnPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolGroup.setDescription('A collection of objects of ltmLsnPrefixLsnPool MIB.')
ltmLsnPrefixLsnPoolBackupGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 128)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPrefixLsnPoolBackupPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPrefixLsnPoolBackupGroup = ltmLsnPrefixLsnPoolBackupGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPrefixLsnPoolBackupGroup.setDescription('A collection of objects of ltmLsnPrefixLsnPoolBackup MIB.')
ltmLsnPoolVlanGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 129)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanLsnPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolVlanVlanName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolVlanGroup = ltmLsnPoolVlanGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolVlanGroup.setDescription('A collection of objects of ltmLsnPoolVlan MIB.')
ltmLsnPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 130)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveHairpinConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTranslationRequestFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPersistenceMappingFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatHairpinConnectionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatBackupPoolTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogAttempts"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatLogFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalEndPoints"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpMapRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpMapResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpPeerResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsInvalidRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsUnavailableResource"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsNotAuthorized"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPcpErrorsOther"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActivePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatActiveZombiePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockAllocations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockAllocationFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlockDeallocations"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlocksCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlocksDeleted"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalZombiePortBlockConnsKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatEndPointsString"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatPercentFreePortBlocksSnmp"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolStatTotalPortBlocksString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolStatGroup = ltmLsnPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolStatGroup.setDescription('A collection of objects of ltmLsnPoolStat MIB.')
ltmSpdyProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 131)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileActivationMode"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfilePriorityHandling"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileInsertHeaderName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConcurrentStreamsPerConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileConnectionIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileReceiveWindow"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileFrameSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileWriteSize"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionLevel"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileCompressionWindowSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileGroup = ltmSpdyProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileGroup.setDescription('A collection of objects of ltmSpdyProfile MIB.')
ltmSpdyProfileProtocolVersionsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 132)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileProtocolVersionsProtocolVersions"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileProtocolVersionsGroup = ltmSpdyProfileProtocolVersionsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileProtocolVersionsGroup.setDescription('A collection of objects of ltmSpdyProfileProtocolVersions MIB.')
ltmSpdyProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 133)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatDataFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatFlowsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatGoawayFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHeadersFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatHttpResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatNoopFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatPingFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatRstStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSettingsFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyRequestFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSpdyResponseFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynReplyFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatSynStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV2StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatV3StreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmSpdyProfileStatWindowUpdateFramesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSpdyProfileStatGroup = ltmSpdyProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSpdyProfileStatGroup.setDescription('A collection of objects of ltmSpdyProfileStat MIB.')
ltmFtpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 134)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatLoginRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatDownloadRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatUploadRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatFtpsSessions"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatPassthruTransitions"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatFtpsIntercepts"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatFtpsResets"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatFtpsBypasses"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatPassiveRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFtpProfileStatActiveRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFtpProfileStatGroup = ltmFtpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFtpProfileStatGroup.setDescription('A collection of objects of ltmFtpProfileStat MIB.')
ltmDosApplicationHeavyUrlInclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 135)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlInclUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationHeavyUrlInclGroup = ltmDosApplicationHeavyUrlInclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlInclGroup.setDescription('A collection of objects of ltmDosApplicationHeavyUrlIncl MIB.')
ltmDosApplicationHeavyUrlExclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 136)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmDosApplicationHeavyUrlExclUrl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosApplicationHeavyUrlExclGroup = ltmDosApplicationHeavyUrlExclGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosApplicationHeavyUrlExclGroup.setDescription('A collection of objects of ltmDosApplicationHeavyUrlExcl MIB.')
ltmV6rdProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 137)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefix"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileIpv4prefixlen"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefixType"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefix"), ("F5-BIGIP-LOCAL-MIB", "ltmV6rdProfileV6rdprefixlen"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmV6rdProfileGroup = ltmV6rdProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmV6rdProfileGroup.setDescription('A collection of objects of ltmV6rdProfile MIB.')
ltmPptpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 138)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileLogServerIp"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileCsvFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPptpProfileGroup = ltmPptpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileGroup.setDescription('A collection of objects of ltmPptpProfile MIB.')
ltmPptpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 139)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStartRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStartReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStopRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatStopReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatEchoRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatEchoReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatOutgoingCallRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatOutgoingCallReplies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatCallClearRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatCallDisconnectNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatWanErrorNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatSetLinkInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatActiveCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatTotalCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmPptpProfileStatFailedCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPptpProfileStatGroup = ltmPptpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPptpProfileStatGroup.setDescription('A collection of objects of ltmPptpProfileStat MIB.')
ltmPcpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 140)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileListeningPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMulticastPort"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMinMappingLifetime"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMaxMappingLifetime"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapRecycleDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapLimitPerClient"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileMapFilterLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileThirdPartyOption"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileRuleName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpProfileGroup = ltmPcpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileGroup.setDescription('A collection of objects of ltmPcpProfile MIB.')
ltmPcpPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 141)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpPrefixGroup = ltmPcpPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixGroup.setDescription('A collection of objects of ltmPcpPrefix MIB.')
ltmPcpPrefixProfilePcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 142)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPcpPrefixName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPrefixAddressType"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpPrefixProfilePcpPrefixAddress"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpPrefixProfilePcpGroup = ltmPcpPrefixProfilePcpGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpPrefixProfilePcpGroup.setDescription('A collection of objects of ltmPcpPrefixProfilePcp MIB.')
ltmPcpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 143)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpMapRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpMapResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpPeerResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsInvalidRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsUnavailableResource"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsNotAuthorized"), ("F5-BIGIP-LOCAL-MIB", "ltmPcpProfileStatPcpErrorsOther"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmPcpProfileStatGroup = ltmPcpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmPcpProfileStatGroup.setDescription('A collection of objects of ltmPcpProfileStat MIB.')
ltmDnsExpressStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 144)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxNotifiesRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatAxfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatIxfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrQueriesAclFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrNotifiesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatDnsxXfrMsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatXfrNotifiesFailed"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigMissing"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigNotRequired"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigVerified"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadKey"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadSig"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsExpressStatTsigBadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsExpressStatGroup = ltmDnsExpressStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsExpressStatGroup.setDescription('A collection of objects of ltmDnsExpressStat MIB.')
ltmDnsServerStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 145)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrQueries"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrNotifies"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsServerStatXfrNotifyFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsServerStatGroup = ltmDnsServerStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsServerStatGroup.setDescription('A collection of objects of ltmDnsServerStat MIB.')
ltmDnsCacheForwardZoneGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 146)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneCacheName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheForwardZoneGroup = ltmDnsCacheForwardZoneGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneGroup.setDescription('A collection of objects of ltmDnsCacheForwardZone MIB.')
ltmDnsCacheForwardZoneNameServerGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 147)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerPort"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerForwardZoneName"), ("F5-BIGIP-LOCAL-MIB", "ltmDnsCacheForwardZoneNameServerCacheName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDnsCacheForwardZoneNameServerGroup = ltmDnsCacheForwardZoneNameServerGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDnsCacheForwardZoneNameServerGroup.setDescription('A collection of objects of ltmDnsCacheForwardZoneNameServer MIB.')
ltmClientSslCertKeyChainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 148)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainName"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainClientssl"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainCert"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainKey"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainChain"), ("F5-BIGIP-LOCAL-MIB", "ltmClientSslCertKeyChainOcspStplParams"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmClientSslCertKeyChainGroup = ltmClientSslCertKeyChainGroup.setStatus('current')
if mibBuilder.loadTexts: ltmClientSslCertKeyChainGroup.setDescription('A collection of objects of ltmClientSslCertKeyChain MIB.')
ltmDosAttackDataStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 149)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDeviceName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatVectorName"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackType"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatAttackCount"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStatsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats1m"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatStats1h"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDropsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops1m"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatDrops1h"), ("F5-BIGIP-LOCAL-MIB", "ltmDosAttackDataStatWlCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDosAttackDataStatGroup = ltmDosAttackDataStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDosAttackDataStatGroup.setDescription('A collection of objects of ltmDosAttackDataStat MIB.')
ltmNetworkAttackDataStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 150)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatVectorName"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackType"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatAttackCount"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStatsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats1m"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatStats1h"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDropsRate"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops1m"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatDrops1h"), ("F5-BIGIP-LOCAL-MIB", "ltmNetworkAttackDataStatWlCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmNetworkAttackDataStatGroup = ltmNetworkAttackDataStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmNetworkAttackDataStatGroup.setDescription('A collection of objects of ltmNetworkAttackDataStat MIB.')
ltmFwAdminIpRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 151)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatContainerName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwAdminIpRuleStatCounter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwAdminIpRuleStatGroup = ltmFwAdminIpRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwAdminIpRuleStatGroup.setDescription('A collection of objects of ltmFwAdminIpRuleStat MIB.')
ltmFwIpintGlobalStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 152)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatSrcIpBlacklist"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintGlobalStatDstIpBlacklist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintGlobalStatGroup = ltmFwIpintGlobalStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintGlobalStatGroup.setDescription('A collection of objects of ltmFwIpintGlobalStat MIB.')
ltmFwIpintVirtualStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 153)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatSrcIpBlacklist"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintVirtualStatDstIpBlacklist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintVirtualStatGroup = ltmFwIpintVirtualStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintVirtualStatGroup.setDescription('A collection of objects of ltmFwIpintVirtualStat MIB.')
ltmFwIpintRouteDomainStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 154)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatBlClassName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatSrcIpBlacklist"), ("F5-BIGIP-LOCAL-MIB", "ltmFwIpintRouteDomainStatDstIpBlacklist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwIpintRouteDomainStatGroup = ltmFwIpintRouteDomainStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwIpintRouteDomainStatGroup.setDescription('A collection of objects of ltmFwIpintRouteDomainStat MIB.')
ltmRouteDomainStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 155)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatConnLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatConnectionFlowMiss"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatClientSlowKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerPktsIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerPktsOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerMaxConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerTotConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerCurConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerEvictedConns"), ("F5-BIGIP-LOCAL-MIB", "ltmRouteDomainStatServerSlowKilled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmRouteDomainStatGroup = ltmRouteDomainStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmRouteDomainStatGroup.setDescription('A collection of objects of ltmRouteDomainStat MIB.')
ltmFlowEvictionPolicyStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 156)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatSweptContext"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFlowEvictionPolicyStatEvicted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFlowEvictionPolicyStatGroup = ltmFlowEvictionPolicyStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFlowEvictionPolicyStatGroup.setDescription('A collection of objects of ltmFlowEvictionPolicyStat MIB.')
ltmAlgLogProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 157)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileInboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileCsvFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileGroup = ltmAlgLogProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileGroup.setDescription('A collection of objects of ltmAlgLogProfile MIB.')
ltmAlgLogProfileStartControlElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 158)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartControlElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileStartControlElementsGroup = ltmAlgLogProfileStartControlElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartControlElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileStartControlElements MIB.')
ltmAlgLogProfileEndControlElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 159)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndControlElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileEndControlElementsGroup = ltmAlgLogProfileEndControlElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndControlElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileEndControlElements MIB.')
ltmAlgLogProfileStartDataElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 160)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileStartDataElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileStartDataElementsGroup = ltmAlgLogProfileStartDataElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileStartDataElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileStartDataElements MIB.')
ltmAlgLogProfileEndDataElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 161)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmAlgLogProfileEndDataElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmAlgLogProfileEndDataElementsGroup = ltmAlgLogProfileEndDataElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmAlgLogProfileEndDataElementsGroup.setDescription('A collection of objects of ltmAlgLogProfileEndDataElements MIB.')
ltmLsnLogProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 162)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartInboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndInboundAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileQuotaExceededAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileErrorsAction"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileCsvFormat"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileGroup = ltmLsnLogProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileGroup.setDescription('A collection of objects of ltmLsnLogProfile MIB.')
ltmLsnLogProfileStartOutboundElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 163)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileStartOutboundElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileStartOutboundElementsGroup = ltmLsnLogProfileStartOutboundElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileStartOutboundElementsGroup.setDescription('A collection of objects of ltmLsnLogProfileStartOutboundElements MIB.')
ltmLsnLogProfileEndOutboundElementsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 164)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnLogProfileEndOutboundElementsElements"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnLogProfileEndOutboundElementsGroup = ltmLsnLogProfileEndOutboundElementsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnLogProfileEndOutboundElementsGroup.setDescription('A collection of objects of ltmLsnLogProfileEndOutboundElements MIB.')
ltmOcspStaplingParametersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 165)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersName"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersUseProxyServer"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersProxyServerPool"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersDnsResolver"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTrustedCa"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTrustedResponders"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersUrl"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignerCert"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignerKey"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersSignHash"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersClockSkew"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersStatusAge"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersCacheTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersCacheErrorTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmOcspStaplingParametersStrictRespCertCheck"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmOcspStaplingParametersGroup = ltmOcspStaplingParametersGroup.setStatus('current')
if mibBuilder.loadTexts: ltmOcspStaplingParametersGroup.setDescription('A collection of objects of ltmOcspStaplingParameters MIB.')
ltmFwRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 166)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleListName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatRuleStatType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatActualRule"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatCounter"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatLastHitTime"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatLastHitTimeFmt"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatOverlapper"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatOverlapType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwRuleStatAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwRuleStatGroup = ltmFwRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwRuleStatGroup.setDescription('A collection of objects of ltmFwRuleStat MIB.')
ltmFwContextStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 167)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatContextType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsAcceptDecisively"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsDrop"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsDefaultAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsDefaultReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatEnforcedPacketsDefaultDrop"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsAcceptDecisively"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsDrop"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsDefaultAccept"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsDefaultReject"), ("F5-BIGIP-LOCAL-MIB", "ltmFwContextStatStagedPacketsDefaultDrop"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwContextStatGroup = ltmFwContextStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwContextStatGroup.setDescription('A collection of objects of ltmFwContextStat MIB.')
ltmFwPolicyRuleStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 168)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatContextName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleListName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatPolicyName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatRuleStatType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatActualRule"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatCounter"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatLastHitTime"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatLastHitTimeFmt"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatOverlapper"), ("F5-BIGIP-LOCAL-MIB", "ltmFwPolicyRuleStatOverlapType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwPolicyRuleStatGroup = ltmFwPolicyRuleStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwPolicyRuleStatGroup.setDescription('A collection of objects of ltmFwPolicyRuleStat MIB.')
ltmTftpProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 169)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTftpProfileGroup = ltmTftpProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileGroup.setDescription('A collection of objects of ltmTftpProfile MIB.')
ltmTftpProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 170)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatReadRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatWriteRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmTftpProfileStatDiscardedRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTftpProfileStatGroup = ltmTftpProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTftpProfileStatGroup.setDescription('A collection of objects of ltmTftpProfileStat MIB.')
ltmIpsecalgProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 171)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfilePendingIkeConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileInitialConnectionTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileLogPublisher"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileLogProfile"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIpsecalgProfileGroup = ltmIpsecalgProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileGroup.setDescription('A collection of objects of ltmIpsecalgProfile MIB.')
ltmKnownMethodsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 172)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsName"), ("F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmKnownMethodsStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmKnownMethodsGroup = ltmKnownMethodsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmKnownMethodsGroup.setDescription('A collection of objects of ltmHttpProfileKnownMethods MIB.')
ltmIpsecalgProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 173)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatIkePackets"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatTunnelCreates"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatTunnelTeardowns"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmIpsecalgProfileStatGroup = ltmIpsecalgProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmIpsecalgProfileStatGroup.setDescription('A collection of objects of ltmIpsecalgProfileStat MIB.')
ltmHttp2ProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 174)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileInsertHeader"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileInsertHeaderName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileConcurrentStreamsPerConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileConnectionIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileReceiveWindow"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileFrameSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileWriteSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileHeaderTableSize"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileEnforceTlsRequirements"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileIncludeContentLength"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttp2ProfileGroup = ltmHttp2ProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileGroup.setDescription('A collection of objects of ltmHttp2Profile MIB.')
ltmHttp2ProfileActivationModesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 175)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileActivationModesActivationModes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttp2ProfileActivationModesGroup = ltmHttp2ProfileActivationModesGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileActivationModesGroup.setDescription('A collection of objects of ltmHttp2ProfileActivationModes MIB.')
ltmHttp2ProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 176)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatContinuationFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatContinuationFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatDataFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatDataFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatFlowsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatFlowsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatFlowsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatGoawayFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatGoawayFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHeadersFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHeadersFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttp2RequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttp2RequestFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttp2ResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttp2ResponseFrames"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttpRequestBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatHttpResponseBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPingFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPingFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPriorityFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPriorityFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPushPromiseFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatPushPromiseFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatRstStreamFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatRstStreamFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatSettingsFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatSettingsFramesSent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatStreamsCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatStreamsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatStreamsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatWindowUpdateFramesReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmHttp2ProfileStatWindowUpdateFramesSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttp2ProfileStatGroup = ltmHttp2ProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttp2ProfileStatGroup.setDescription('A collection of objects of ltmHttp2ProfileStat MIB.')
ltmLsnPoolFailureStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 177)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatFailureCause"), ("F5-BIGIP-LOCAL-MIB", "ltmLsnPoolFailureStatFailureCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmLsnPoolFailureStatGroup = ltmLsnPoolFailureStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmLsnPoolFailureStatGroup.setDescription('A collection of objects of ltmLsnPoolFailureStat MIB.')
ltmWebsocketProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 178)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileMasking"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileCompressMode"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileCompression"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileWindowBits"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileNoDelay"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebsocketProfileGroup = ltmWebsocketProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileGroup.setDescription('A collection of objects of ltmWebsocketProfile MIB.')
ltmWebsocketProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 179)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatContFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatContFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatTextFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatTextFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatBinaryFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatBinaryFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatPingFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatPingFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatPongFramesClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatPongFramesServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnNormalClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnNormalServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnProtErrClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnProtErrServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnProcErrClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnProcErrServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnExtFailClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnExtFailServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnOtherClientRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatCloseRsnOtherServerRecv"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatClientBytesRecdPreCompress"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatClientBytesRecdPostCompress"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatServerBytesRecdPreCompress"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatServerBytesRecdPostCompress"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatClientCompressionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatServerCompressionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatClientDecompressionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmWebsocketProfileStatServerDecompressionFailures"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmWebsocketProfileStatGroup = ltmWebsocketProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmWebsocketProfileStatGroup.setDescription('A collection of objects of ltmWebsocketProfileStat MIB.')
ltmTcpanalyticsProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 180)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectedByClientSide"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectedByServerSide"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectCity"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectContinent"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectCountry"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectNexthop"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectPostCode"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectRegion"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectRemoteHostIp"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectRemoteHostSubnet"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectedStatsInternalLogging"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileCollectedStatsExternalLogging"), ("F5-BIGIP-LOCAL-MIB", "ltmTcpanalyticsProfileExternalLoggingPublisher"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmTcpanalyticsProfileGroup = ltmTcpanalyticsProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmTcpanalyticsProfileGroup.setDescription('A collection of objects of ltmTcpanalyticsProfile MIB.')
ltmSplitsessionclientProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 181)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfilePeerIp"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfilePeerPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSplitsessionclientProfileGroup = ltmSplitsessionclientProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileGroup.setDescription('A collection of objects of ltmSplitsessionclientProfile MIB.')
ltmSplitsessionclientProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 182)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnPeerActive"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnPeerTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatConnPeerReset"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatPeerMsgRecd"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionclientProfileStatPeerMsgSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSplitsessionclientProfileStatGroup = ltmSplitsessionclientProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionclientProfileStatGroup.setDescription('A collection of objects of ltmSplitsessionclientProfileStat MIB.')
ltmSplitsessionserverProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 183)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileListenIp"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileListenPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSplitsessionserverProfileGroup = ltmSplitsessionserverProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileGroup.setDescription('A collection of objects of ltmSplitsessionserverProfile MIB.')
ltmSplitsessionserverProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 184)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnectionsAccepted"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnectionsCurrent"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnectionsMax"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnPeerActive"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnPeerTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatConnPeerReset"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatPeerMsgRecd"), ("F5-BIGIP-LOCAL-MIB", "ltmSplitsessionserverProfileStatPeerMsgSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSplitsessionserverProfileStatGroup = ltmSplitsessionserverProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSplitsessionserverProfileStatGroup.setDescription('A collection of objects of ltmSplitsessionserverProfileStat MIB.')
ltmHttpProxyConnectProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 185)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileDefaultState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProxyConnectProfileGroup = ltmHttpProxyConnectProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileGroup.setDescription('A collection of objects of ltmHttpProxyConnectProfile MIB.')
ltmHttpProxyConnectProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 186)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatResp2xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatResp3xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatResp4xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatResp5xxCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatRespOtherCnt"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatV9Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatV10Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatV11Resp"), ("F5-BIGIP-LOCAL-MIB", "ltmHttpProxyConnectProfileStatProxyConnReqs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmHttpProxyConnectProfileStatGroup = ltmHttpProxyConnectProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmHttpProxyConnectProfileStatGroup.setDescription('A collection of objects of ltmHttpProxyConnectProfileStat MIB.')
ltmDiametersessionProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 187)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRouteUnconfiguredPeers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileHandshakeTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileMaxRetransmissions"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileMaxWatchdogFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileResetOnTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionAction"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileArrayRetransmissionErrorCode"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionQueueMaxMessages"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionQueueMaxBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionQueueLimitHigh"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileRetransmissionQueueLimitLow"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDiscardUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileLoopDetection"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileWatchdogTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileMaxMessageSize"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePersistType"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePersistAvp"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePersistTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileOriginHostRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileOriginRealmRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDestHostRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDestRealmRewrite"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileOriginHost"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileOriginRealm"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileHostIpAddress"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileVendorId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileFirmwareRevision"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileProductName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileAuthApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileAcctApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileArrayAuthApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileArrayAcctApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileVendorSpecificVendorId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileVendorSpecificAuthApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileVendorSpecificAcctApplicationId"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePeerDelayCriticalLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileEgressCriticalMessageRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileEgressMajorMessageRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileIngressCriticalMessageRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileIngressMajorMessageRateLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDynamicRouteInsertion"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDynamicRouteLookup"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDynamicRouteTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePeerErrorsMajorThreshold"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfilePeerTimeoutsMajorThreshold"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileDisconnectPeerAction"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDiametersessionProfileGroup = ltmDiametersessionProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileGroup.setDescription('A collection of objects of ltmDiametersessionProfile MIB.')
ltmDiametersessionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 188)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotCapExcReq"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotCapExcAns"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotDeviceWatchdogRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotDeviceWatchdogAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotDisconnectPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotDisconnectPeerAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotAccountingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotAccountingAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotCreditControlRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotCreditControlAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotUserAuthorizationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotUserAuthorizationAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotOtherRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotOtherAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotBadMessages"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatCurReqQueuedForRetrans"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransReturnedBusy"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransReturnedUnavail"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransReqRetransmitted"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransmissionTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransmissionErrorCode"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRetransmissionIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRequestReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRequestSent"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotDiscardUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotRespondUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatAveRequestLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatAveAnswerLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatAvePeerDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatAveRoundTripTime"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatCurTrafficRate"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatCurErrorAnswerRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatCurTimeoutRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeRcvd1xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeRcvd2xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeRcvd3xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeRcvd4xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeRcvd5xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeSent1xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeSent2xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeSent3xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeSent4xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotResultCodeSent5xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmDiametersessionProfileStatTotLoopedRequests"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDiametersessionProfileStatGroup = ltmDiametersessionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDiametersessionProfileStatGroup.setDescription('A collection of objects of ltmDiametersessionProfileStat MIB.')
ltmDiameterrouterProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 189)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileConfigSource"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileDefaultName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileMirrored"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileTrafficGroup"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileSupportedApplications"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileIgnorePeerPort"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileMaxPendingMessages"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileMaxPendingBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileHaMsgSweeperInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfilePendingReqSweeperInterval"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileUseLocalConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileTransactionTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileMaxRetries"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileIruleScopeMessage"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfilePerPeerStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileAssociateClientsideToPmbr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDiameterrouterProfileGroup = ltmDiameterrouterProfileGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileGroup.setDescription('A collection of objects of ltmDiameterrouterProfile MIB.')
ltmDiameterrouterProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 190)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessgesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesInRetry"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesCannotReturn"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesRouted"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesQueueFull"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesNoConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesConnectionClosed"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesPersistInUse"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesStandbyDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesMaxRetries"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesInCloned"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMessagesReturned"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotPayloadBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotPayloadBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotFailedOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotFailedOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotFailedPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotPassthruBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurPendingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotExpiredPendingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotDroppedLateAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatCurDynamicRoutes"), ("F5-BIGIP-LOCAL-MIB", "ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmDiameterrouterProfileStatGroup = ltmDiameterrouterProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmDiameterrouterProfileStatGroup.setDescription('A collection of objects of ltmDiameterrouterProfileStat MIB.')
ltmMrPmbrDiameterSessionStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 191)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatRouterInst"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatMrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTrName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatPool"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotCapExcReq"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotCapExcAns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotAccountingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotAccountingAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotCreditControlRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotCreditControlAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotOtherRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotOtherAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotBadMessages"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRetransmissionIrule"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRequestReceived"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRequestSent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotDiscardUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotRespondUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAveRequestLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAveAnswerLatency"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAvePeerDelay"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatAveRoundTripTime"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatCurTrafficRate"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatCurTimeoutRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMrPmbrDiameterSessionStatGroup = ltmMrPmbrDiameterSessionStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterSessionStatGroup.setDescription('A collection of objects of ltmMrPmbrDiameterSessionStat MIB.')
ltmMrPmbrDiameterRouterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 192)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatRouterInst"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatMrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTrName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatPool"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessgesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesInRetry"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesRouted"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesQueueFull"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesNoConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesInCloned"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotMessagesReturned"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotPayloadBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotPayloadBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotPassthruBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatCurPendingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMrPmbrDiameterRouterStatGroup = ltmMrPmbrDiameterRouterStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrDiameterRouterStatGroup.setDescription('A collection of objects of ltmMrPmbrDiameterRouterStat MIB.')
ltmSipsessionProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 193)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBadmsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBadmsgsReq"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatDropsReq"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatInvite"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatAck"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBye"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatCancel"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRegisterReq"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatPrack"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatSubscribe"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotify"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatPublish"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRefer"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatMessage"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatUpdateReq"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatService"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBenotify"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNegotiate"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatOther"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatProvisional"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatSuccessful"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRedirection"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatClientFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatServerFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatGlobalFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBadRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatBadRequest400Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotFound"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotFound404Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRequestEntityTooLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatRequestEntityTooLarge413Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatUnsupportedUriScheme"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatUnsupportedUriScheme416Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTemporarilyUnavailable"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTemporarilyUnavailable480Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTransactionDoesNotExist"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTransactionDoesNotExist481Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatLoopDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatLoopDetected482Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTooManyHops"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatTooManyHops483Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatAddressIncomplete"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatAddressIncomplete484Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotAcceptableHere"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotAcceptableHere488Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatServerInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatServerInternalError500Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotImplemented"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatNotImplemented501Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatServiceUnavailable"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatServiceUnavailable503Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatVersionNotSupported"), ("F5-BIGIP-LOCAL-MIB", "ltmSipsessionProfileStatVersionNotSupported505Sent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSipsessionProfileStatGroup = ltmSipsessionProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSipsessionProfileStatGroup.setDescription('A collection of objects of ltmSipsessionProfileStat MIB.')
ltmSiprouterProfileStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 194)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatVsName"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessgesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesInRetry"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesCannotReturn"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesRouted"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesQueueFull"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesNoConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesConnectionClosed"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesPersistInUse"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesStandbyDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesMaxRetries"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesInCloned"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotMessagesReturned"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotPayloadBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotPayloadBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotFailedOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotFailedOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotFailAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotFailedPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotPassthruBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurrPendingCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatCurrActiveCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotSuccessfulCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotRejectedCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatTotCancelledCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatActiveRegistrations"), ("F5-BIGIP-LOCAL-MIB", "ltmSiprouterProfileStatRejectedRegistrations"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmSiprouterProfileStatGroup = ltmSiprouterProfileStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmSiprouterProfileStatGroup.setDescription('A collection of objects of ltmSiprouterProfileStat MIB.')
ltmMrPmbrSipSessionStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 195)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRouterInst"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatMrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTrName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPool"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatProfileName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBadmsgs"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBadmsgsReq"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatDrops"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatDropsReq"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatInvite"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAck"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBye"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatCancel"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatOptions"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRegisterReq"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPrack"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatSubscribe"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotify"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatPublish"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatInfo"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRefer"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatMessage"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatUpdateReq"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatService"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBenotify"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNegotiate"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatOther"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatProvisional"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatSuccessful"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRedirection"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatClientFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatServerFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatGlobalFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBadRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatBadRequest400Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotFound"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotFound404Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRequestEntityTooLarge"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatUnsupportedUriScheme"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTemporarilyUnavailable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTransactionDoesNotExist"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatLoopDetected"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatLoopDetected482Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTooManyHops"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatTooManyHops483Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddressIncomplete"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatAddressIncomplete484Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotAcceptableHere"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotAcceptableHere488Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatServerInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatServerInternalError500Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotImplemented"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatNotImplemented501Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatServiceUnavailable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatServiceUnavailable503Sent"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatVersionNotSupported"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipSessionStatVersionNotSupported505Sent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMrPmbrSipSessionStatGroup = ltmMrPmbrSipSessionStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipSessionStatGroup.setDescription('A collection of objects of ltmMrPmbrSipSessionStat MIB.')
ltmMrPmbrSipRouterStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 196)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatRouterInst"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatMrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTrName"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatPool"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatAddrType"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatAddr"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatPort"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessgesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesInRetry"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesCannotReturn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesRouted"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesUnroutable"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesQueueFull"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesNoConnection"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesConnectionClosed"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesInternalError"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesPersistInUse"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesStandbyDropped"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesMaxRetries"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesInCloned"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotMessagesReturned"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotPayloadBytesIn"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotPayloadBytesOut"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotIncomingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotFailedOutgoingStreams"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotIncomingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotFailedOutgoingConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotFailedPassthruConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotPassthruBytes"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurrPendingCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatCurrActiveCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotSuccessfulCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotRejectedCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatTotCancelledCalls"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatActiveRegistrations"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatRejectedRegistrations"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber"), ("F5-BIGIP-LOCAL-MIB", "ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmMrPmbrSipRouterStatGroup = ltmMrPmbrSipRouterStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmMrPmbrSipRouterStatGroup.setDescription('A collection of objects of ltmMrPmbrSipRouterStat MIB.')
ltmServerSslProfileC3dCertExtensionCustomOidsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 197)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsServerssl"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsIndex"), ("F5-BIGIP-LOCAL-MIB", "ltmServerSslProfileC3dCertExtensionCustomOidsOid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmServerSslProfileC3dCertExtensionCustomOidsGroup = ltmServerSslProfileC3dCertExtensionCustomOidsGroup.setStatus('current')
if mibBuilder.loadTexts: ltmServerSslProfileC3dCertExtensionCustomOidsGroup.setDescription('A collection of objects of ltmServerSslProfileC3dCertExtensionCustomOids MIB.')
ltmFwNatDynamicPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 198)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolAddressCount"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolPortCount"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolAddrFamily"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolPatMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolInboundMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolMappingMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolMappingTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolBlockLifetime"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolBlockIdleTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolZombieTimeout"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolBlockSize"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolClientBlockLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolProxyArp"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolHairpinMode"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolIcmpEcho"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolClientConnectionLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolEgressInterfacesEnabled"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolTrafficGroup"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolPcpName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolPcpSelfipName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolDsliteTunnel"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolPcpEpoch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatDynamicPoolGroup = ltmFwNatDynamicPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolGroup.setDescription('A collection of objects of ltmFwNatDynamicPool MIB.')
ltmFwNatDynamicPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 199)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnTranslationRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnActiveTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnActiveHairpinConnections"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnTranslationRequestFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnBackupPoolTranslations"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnActiveEndPoints"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnEndPoints"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatLsnEndPointsHighValue"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaActivePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaPortBlockAllocations"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaPortBlockDeallocations"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaClientsReachedLimit"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpAnnounceRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpMapRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpMapResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpPeerRequests"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpPeerResponses"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPcpErrorsOther"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaTotalPortBlocks"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolStatPbaTotalPortBlocksString"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatDynamicPoolStatGroup = ltmFwNatDynamicPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolStatGroup.setDescription('A collection of objects of ltmFwNatDynamicPoolStat MIB.')
ltmFwNatDynamicPoolFailureStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 200)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatFailureCause"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatDynamicPoolFailureStatFailureCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatDynamicPoolFailureStatGroup = ltmFwNatDynamicPoolFailureStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatDynamicPoolFailureStatGroup.setDescription('A collection of objects of ltmFwNatDynamicPoolFailureStat MIB.')
ltmFwNatStaticDestinationTranslationPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 201)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolPortCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatStaticDestinationTranslationPoolGroup = ltmFwNatStaticDestinationTranslationPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolGroup.setDescription('A collection of objects of ltmFwNatStaticDestinationTranslationPool MIB.')
ltmFwNatStaticDestinationTranslationPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 202)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatTransReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatTransReqFails"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatBidirReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatErrMemory"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatStaticDestinationTranslationPoolStatGroup = ltmFwNatStaticDestinationTranslationPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticDestinationTranslationPoolStatGroup.setDescription('A collection of objects of ltmFwNatStaticDestinationTranslationPoolStat MIB.')
ltmFwNatStaticSourceTranslationPoolGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 203)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolDescription"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolPortCount"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolType"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolRouteAdvertisement"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolProxyArp"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolIcmpEcho"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatStaticSourceTranslationPoolGroup = ltmFwNatStaticSourceTranslationPoolGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolGroup.setDescription('A collection of objects of ltmFwNatStaticSourceTranslationPool MIB.')
ltmFwNatStaticSourceTranslationPoolStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3375, 2, 5, 2, 2, 204)).setObjects(("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatResetStats"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatNumber"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatName"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatTransReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatTransReqFails"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatBidirReqs"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatBidirReqFails"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatErrPortTrans"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatErrMemory"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd"), ("F5-BIGIP-LOCAL-MIB", "ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ltmFwNatStaticSourceTranslationPoolStatGroup = ltmFwNatStaticSourceTranslationPoolStatGroup.setStatus('current')
if mibBuilder.loadTexts: ltmFwNatStaticSourceTranslationPoolStatGroup.setDescription('A collection of objects of ltmFwNatStaticSourceTranslationPoolStat MIB.')
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmFwIpintVirtualStatNumber=ltmFwIpintVirtualStatNumber, ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch=ltmFwNatStaticDestinationTranslationPoolStatErrCfgMismtch, ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit=ltmFwNatDynamicPoolStatPbaActiveClientsReachedLimit, ltmHttp2ProfileStatContinuationFramesReceived=ltmHttp2ProfileStatContinuationFramesReceived, ltmMrPmbrSipSessionStatBenotify=ltmMrPmbrSipSessionStatBenotify, ltmDnsProfileStatRcodeRefused=ltmDnsProfileStatRcodeRefused, ltmSnatPoolStatName=ltmSnatPoolStatName, ltmPool=ltmPool, ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch=ltmFwNatStaticSourceTranslationPoolStatErrCfgMismtch, ltmHttpProfileStatPassthroughIrule=ltmHttpProfileStatPassthroughIrule, ltmSipsessionProfileStatResponses=ltmSipsessionProfileStatResponses, ltmMirrorPortMember=ltmMirrorPortMember, ltmSnatPoolStatNumber=ltmSnatPoolStatNumber, ltmServerSslStatShaDigest=ltmServerSslStatShaDigest, ltmClientSslStatData0rttAccepts=ltmClientSslStatData0rttAccepts, ltmVirtualServStatDurationRateExceeded=ltmVirtualServStatDurationRateExceeded, ltmFwNatStaticSourceTranslationPoolStatBidirReqFails=ltmFwNatStaticSourceTranslationPoolStatBidirReqFails, ltmHttpClassStatImagePostcompressBytes=ltmHttpClassStatImagePostcompressBytes, ltmPptpProfileGroup=ltmPptpProfileGroup, ltmNatStatGroup=ltmNatStatGroup, ltmHttpProxyConnectProfile=ltmHttpProxyConnectProfile, ltmSctpProfileTcpShutdown=ltmSctpProfileTcpShutdown, ltmWebAccelerationProfileEntry=ltmWebAccelerationProfileEntry, ltmPcpProfileStat=ltmPcpProfileStat, ltmDnsCacheStatTcpPktsOut=ltmDnsCacheStatTcpPktsOut, ltmWebsocketProfileStatClientCompressionFailures=ltmWebsocketProfileStatClientCompressionFailures, ltmClientSslStatSniRejects=ltmClientSslStatSniRejects, ltmNATs=ltmNATs, ltmPptpProfileStatEchoRequests=ltmPptpProfileStatEchoRequests, ltmHttpProfileEntry=ltmHttpProfileEntry, ltmNetworkAttackDataStatEntry=ltmNetworkAttackDataStatEntry, ltmRstCauseStatIndex=ltmRstCauseStatIndex, ltmFastHttpProfileMaxHeaderSize=ltmFastHttpProfileMaxHeaderSize, ltmDnsProfileHwValidation=ltmDnsProfileHwValidation, ltmSnatPoolStat=ltmSnatPoolStat, ltmPoolMemberPort=ltmPoolMemberPort, ltmV6rdProfileNumber=ltmV6rdProfileNumber, ltmDosApplicationHeavyUrlExclIndex=ltmDosApplicationHeavyUrlExclIndex, ltmAlgLogProfileEndControlElementsIndex=ltmAlgLogProfileEndControlElementsIndex, ltmFwNatDynamicPoolFailureStatEntry=ltmFwNatDynamicPoolFailureStatEntry, ltmVirtualServClonePoolNumber=ltmVirtualServClonePoolNumber, ltmServerSslStatEcdhRsaKeyxchg=ltmServerSslStatEcdhRsaKeyxchg, ltmVirtualAddrGroup=ltmVirtualAddrGroup, ltmPoolSlowRampTime=ltmPoolSlowRampTime, ltmHttpCompressionProfileNumber=ltmHttpCompressionProfileNumber, ltmDosProfileName=ltmDosProfileName, ltmLsnPrefix=ltmLsnPrefix, ltmFwNatStaticSourceTranslationPoolEntry=ltmFwNatStaticSourceTranslationPoolEntry, ltmV6rdProfileIpv4prefix=ltmV6rdProfileIpv4prefix, ltmSipsessionProfileStatVersionNotSupported=ltmSipsessionProfileStatVersionNotSupported, ltmVsStatusNumber=ltmVsStatusNumber, ltmServerSslStatMaxCompatConns=ltmServerSslStatMaxCompatConns, ltmIsessionProfileStatLzoOutBytesRaw=ltmIsessionProfileStatLzoOutBytesRaw, ltmOcspStaplingParametersStrictRespCertCheck=ltmOcspStaplingParametersStrictRespCertCheck, ltmSplitsessionclientProfileTable=ltmSplitsessionclientProfileTable, ltmFwNatDynamicPoolStatLsnEndPoints=ltmFwNatDynamicPoolStatLsnEndPoints, ltmDnsHeaderFilterTable=ltmDnsHeaderFilterTable, ltmConnPoolProfileMaxReuse=ltmConnPoolProfileMaxReuse, ltmDnsProfileStatFastDnsDrops=ltmDnsProfileStatFastDnsDrops, ltmDosAttackDataStatStats=ltmDosAttackDataStatStats, ltmHttpClassStatNumberReqs=ltmHttpClassStatNumberReqs, ltmFwPolicyRuleStatRuleStatType=ltmFwPolicyRuleStatRuleStatType, ltmHttpProfileStatRamcacheSize=ltmHttpProfileStatRamcacheSize, ltmWebaccCacheUriInclTable=ltmWebaccCacheUriInclTable, ltmDnsCacheStatFwdQueries=ltmDnsCacheStatFwdQueries, ltmXmlProfileStatNumDocumentsWithTwoMatches=ltmXmlProfileStatNumDocumentsWithTwoMatches, ltmHttpProfileCompressMode=ltmHttpProfileCompressMode, ltmDosApplicationLatencyBasedIpMinimumTps=ltmDosApplicationLatencyBasedIpMinimumTps, ltmConnPool=ltmConnPool, ltmUserStatProfileEntry=ltmUserStatProfileEntry, ltmRuleEventStatResetStats=ltmRuleEventStatResetStats, ltmEncCookiesName=ltmEncCookiesName, ltmFtpProfileNumber=ltmFtpProfileNumber, ltmDnsSecurityStatAaaaDrops=ltmDnsSecurityStatAaaaDrops, ltmLsnPrefixLsnPoolBackupTable=ltmLsnPrefixLsnPoolBackupTable, ltmSipsessionProfileStatSuccessful=ltmSipsessionProfileStatSuccessful, ltmKnownMethodsNumber=ltmKnownMethodsNumber, ltmDnsSecurityStatADrops=ltmDnsSecurityStatADrops, ltmMrPmbrSipRouterStatTotMessgesIn=ltmMrPmbrSipRouterStatTotMessgesIn, ltmClientSslFwdpEnabled=ltmClientSslFwdpEnabled, ltmXmlProfileXpathQueriesTable=ltmXmlProfileXpathQueriesTable, ltmServerSslStatAesGcmBulkOffload=ltmServerSslStatAesGcmBulkOffload, ltmAuthProfileNumber=ltmAuthProfileNumber, ltmSnatOrigAddrWildmask=ltmSnatOrigAddrWildmask, ltmTransAddrStatAddr=ltmTransAddrStatAddr, ltmLsnPoolPersistenceTimeout=ltmLsnPoolPersistenceTimeout, ltmWebsocketProfileStatGroup=ltmWebsocketProfileStatGroup, ltmIsessionProfileStatLzoInErrors=ltmIsessionProfileStatLzoInErrors, ltmIiopProfileStat=ltmIiopProfileStat, ltmFwNatStaticDestinationTranslationPoolDescription=ltmFwNatStaticDestinationTranslationPoolDescription, ltmDiametersessionProfileStatTotUserAuthorizationRequests=ltmDiametersessionProfileStatTotUserAuthorizationRequests, ltmAuthProfileMode=ltmAuthProfileMode, ltmVAddrStatusParentType=ltmVAddrStatusParentType, ltmPcpPrefixProfilePcpPrefixAddressType=ltmPcpPrefixProfilePcpPrefixAddressType, ltmDnsSecurityStatNumber=ltmDnsSecurityStatNumber, ltmWebsocketProfileCompression=ltmWebsocketProfileCompression, ltmSipProfileLogProfile=ltmSipProfileLogProfile, ltmV6rdProfileConfigSource=ltmV6rdProfileConfigSource, ltmDiameterrouterProfileStatTotOutgoingConnections=ltmDiameterrouterProfileStatTotOutgoingConnections, ltmSplitsessionserverProfileConfigSource=ltmSplitsessionserverProfileConfigSource, ltmServerSslStatRc2Bulk=ltmServerSslStatRc2Bulk, ltmAlgLogProfileConfigSource=ltmAlgLogProfileConfigSource, ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans=ltmMrPmbrDiameterSessionStatCurReqQueuedForRetrans, ltmLsnPoolEntry=ltmLsnPoolEntry, ltmStreamProfileGroup=ltmStreamProfileGroup, ltmDosAttackDataStatStats1h=ltmDosAttackDataStatStats1h, ltmVirtualServVlanGroup=ltmVirtualServVlanGroup, ltmFtpProfileStatFtpsBypasses=ltmFtpProfileStatFtpsBypasses, ltmClientSslEntry=ltmClientSslEntry, ltmPoolMemberStatus=ltmPoolMemberStatus, ltmVsStatusAvailState=ltmVsStatusAvailState, ltmVirtualServStatCurrentConnsPerSec=ltmVirtualServStatCurrentConnsPerSec, ltmVirtualAddrStatPvaBytesOut=ltmVirtualAddrStatPvaBytesOut, ltmSpdyProfileStatSettingsFramesSent=ltmSpdyProfileStatSettingsFramesSent, ltmFwIpintRouteDomainStatDstIpBlacklist=ltmFwIpintRouteDomainStatDstIpBlacklist, ltmXmlProfileStatNumDocumentsWithOneMatch=ltmXmlProfileStatNumDocumentsWithOneMatch, ltmPoolStatus=ltmPoolStatus, ltmOcspStaplingParametersSignerCert=ltmOcspStaplingParametersSignerCert, ltmMrPmbrSipSessionStatBadRequest=ltmMrPmbrSipSessionStatBadRequest, ltmLsnLogProfileEndOutboundElementsElements=ltmLsnLogProfileEndOutboundElementsElements, ltmSplitsessionserverProfileStatConnectionsMax=ltmSplitsessionserverProfileStatConnectionsMax, ltmDosProfileEntry=ltmDosProfileEntry, ltmLsnPoolStatTotalEndPoints=ltmLsnPoolStatTotalEndPoints, ltmPersistProfileCookieHashOffset=ltmPersistProfileCookieHashOffset, ltmIsessionProfileStatDedupOutHits=ltmIsessionProfileStatDedupOutHits, ltmTransAddrStatResetStats=ltmTransAddrStatResetStats, ltmNetworkAttackDataStatAttackType=ltmNetworkAttackDataStatAttackType, ltmDosApplicationHeavyUrlAutomaticDetection=ltmDosApplicationHeavyUrlAutomaticDetection, ltmAlgLogProfileEndDataElementsTable=ltmAlgLogProfileEndDataElementsTable, ltmRtspProfileUnicastRedirect=ltmRtspProfileUnicastRedirect, ltmDnsCacheMaxConcurrentUdp=ltmDnsCacheMaxConcurrentUdp, ltmBwcPolicyStatPacketsIn=ltmBwcPolicyStatPacketsIn, ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv=ltmWebsocketProfileStatCloseRsnEpGoawayClientRecv, ltmClientSslStatRecordSize8k=ltmClientSslStatRecordSize8k, ltmPoolMemberStatusReason=ltmPoolMemberStatusReason, ltmLsnLogProfileStartOutboundElementsNumber=ltmLsnLogProfileStartOutboundElementsNumber, ltmFastHttpProfileStatConnpoolReuses=ltmFastHttpProfileStatConnpoolReuses, ltmClientSslFwdpBypassSipWList=ltmClientSslFwdpBypassSipWList, ltmVirtualServServersslUseSni=ltmVirtualServServersslUseSni, ltmWebAccelerationProfileTable=ltmWebAccelerationProfileTable, ltmDiametersessionProfileStatEntry=ltmDiametersessionProfileStatEntry, ltmClientSslStatDhGroupP384Offload=ltmClientSslStatDhGroupP384Offload, ltmClientSslAuthenticateDepth=ltmClientSslAuthenticateDepth, ltmSpdyProfileStatSpdyRequestFrames=ltmSpdyProfileStatSpdyRequestFrames, ltmHttpProfileStatNumberReqs=ltmHttpProfileStatNumberReqs, ltmHttpClassStatAudioPostcompressBytes=ltmHttpClassStatAudioPostcompressBytes, ltmTcpProfileStatRxbadseg=ltmTcpProfileStatRxbadseg, ltmSiprouterProfileStatTotMessagesOut=ltmSiprouterProfileStatTotMessagesOut, ltmClientSslFwdpBypassDipBList=ltmClientSslFwdpBypassDipBList, ltmNatListedEnabledVlans=ltmNatListedEnabledVlans, ltmHttpCompressionProfileStatEntry=ltmHttpCompressionProfileStatEntry, ltmVirtualServAuthNumber=ltmVirtualServAuthNumber, ltmHttpClassStatResp5xxCnt=ltmHttpClassStatResp5xxCnt, ltmDosApplicationHeavyUrlInclIndex=ltmDosApplicationHeavyUrlInclIndex, ltmDiameterrouterProfileStatTotIncomingConnections=ltmDiameterrouterProfileStatTotIncomingConnections, ltmClientSslStatRsaKeySize2048Offload=ltmClientSslStatRsaKeySize2048Offload, ltmWebaccCacheUriExclName=ltmWebaccCacheUriExclName, ltmFlowEvictionPolicyStatContextName=ltmFlowEvictionPolicyStatContextName, ltmSnatVlan=ltmSnatVlan, ltmFastHttpProfileStatResp4xxCnt=ltmFastHttpProfileStatResp4xxCnt, ltmMrPmbrSipSessionStatBadRequest400Sent=ltmMrPmbrSipSessionStatBadRequest400Sent, ltmTcpanalyticsProfileExternalLoggingPublisher=ltmTcpanalyticsProfileExternalLoggingPublisher, ltmDnsCacheStatTcpCurConns=ltmDnsCacheStatTcpCurConns, ltmClientSslStatEdhRsaKeyxchg=ltmClientSslStatEdhRsaKeyxchg, ltmIsessionProfileStatBzip2InBytesOpt=ltmIsessionProfileStatBzip2InBytesOpt, ltmMrPmbrDiameterRouterStatResetStats=ltmMrPmbrDiameterRouterStatResetStats, ltmNetworkAttackDataStatDropsRate=ltmNetworkAttackDataStatDropsRate, ltmDnsExpressStatEntry=ltmDnsExpressStatEntry, ltmPptpProfileStatEntry=ltmPptpProfileStatEntry, ltmVirtualServEnabled=ltmVirtualServEnabled, ltmFwIpintRouteDomainStatBlClassName=ltmFwIpintRouteDomainStatBlClassName, ltmHttpCompressionProfileStatSgmlPrecompressBytes=ltmHttpCompressionProfileStatSgmlPrecompressBytes, ltmMrPmbrSipSessionStatUpdateReq=ltmMrPmbrSipSessionStatUpdateReq, ltmServerSslStatSecureHandshakes=ltmServerSslStatSecureHandshakes, ltmClientSslStatSha512DigestOffload=ltmClientSslStatSha512DigestOffload, ltmVirtualAddrStatTable=ltmVirtualAddrStatTable, ltmPoolStatEntry=ltmPoolStatEntry, ltmClientSslStatAesBulkOffload=ltmClientSslStatAesBulkOffload, ltmStreamProfileStatName=ltmStreamProfileStatName, ltmTcpProfileFastOpen=ltmTcpProfileFastOpen, ltmFastL4ProfileStatTxerrors=ltmFastL4ProfileStatTxerrors, ltmFwNatDynamicPoolStatPcpMapRequests=ltmFwNatDynamicPoolStatPcpMapRequests, ltmStreamProfileTarget=ltmStreamProfileTarget, ltmDnsExpressStatTsigBadKey=ltmDnsExpressStatTsigBadKey, ltmServerSslStatFullyHwAcceleratedConns=ltmServerSslStatFullyHwAcceleratedConns, ltmRtspProfileStatNumResponses=ltmRtspProfileStatNumResponses, ltmSpdyProfileStatEntry=ltmSpdyProfileStatEntry, ltmDosApplicationLatencyBasedUrlClientSideDefense=ltmDosApplicationLatencyBasedUrlClientSideDefense, ltmMirrorPortName=ltmMirrorPortName, ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent=ltmMrPmbrSipSessionStatTransactionDoesNotExist481Sent, ltmSnatpoolTransAddrTransAddr=ltmSnatpoolTransAddrTransAddr, ltmHttpProfileStatXmlPostcompressBytes=ltmHttpProfileStatXmlPostcompressBytes, ltmVirtualServTable=ltmVirtualServTable, ltmVirtualServName=ltmVirtualServName, ltmMrPmbrSipRouterStatTotOutgoingStreams=ltmMrPmbrSipRouterStatTotOutgoingStreams, ltmDiametersessionProfilePeerTimeoutsMajorThreshold=ltmDiametersessionProfilePeerTimeoutsMajorThreshold, ltmMrPmbrSipSessionStatResetStats=ltmMrPmbrSipSessionStatResetStats, ltmDiameterrouterProfileStatCurPassthruConnections=ltmDiameterrouterProfileStatCurPassthruConnections, ltmServerSslStatEncryptedBytesOut=ltmServerSslStatEncryptedBytesOut, ltmDnsExpressStatXfrNotifiesSent=ltmDnsExpressStatXfrNotifiesSent, ltmLsnPoolStatPercentFreePortBlocksSnmp=ltmLsnPoolStatPercentFreePortBlocksSnmp, ltmSctpProfileMaxBurst=ltmSctpProfileMaxBurst, ltmDiameterrouterProfileStatTotMessagesOut=ltmDiameterrouterProfileStatTotMessagesOut, ltmClientSslSessionMirroring=ltmClientSslSessionMirroring, ltmClientSslStatMaxNativeConns=ltmClientSslStatMaxNativeConns, ltmServerSslStatEncryptedBytesIn=ltmServerSslStatEncryptedBytesIn, ltmNatStatServerPktsIn=ltmNatStatServerPktsIn, ltmPoolStatGroup=ltmPoolStatGroup, ltmTcpProfileStatResetStats=ltmTcpProfileStatResetStats, ltmDnsQueryFilterName=ltmDnsQueryFilterName, ltmFwContextStatEnforcedPacketsDefaultReject=ltmFwContextStatEnforcedPacketsDefaultReject, ltmHttpProfileStatPassthroughConnect=ltmHttpProfileStatPassthroughConnect, ltmIsessionProfileCompressionDeflateLevel=ltmIsessionProfileCompressionDeflateLevel, ltmClientSslStatOcspStaplingResponseStatusErrors=ltmClientSslStatOcspStaplingResponseStatusErrors, ltmSipsessionProfileStatVersionNotSupported505Sent=ltmSipsessionProfileStatVersionNotSupported505Sent, ltmHttpClassStatCssPrecompressBytes=ltmHttpClassStatCssPrecompressBytes, ltmFwContextStatEntry=ltmFwContextStatEntry, ltmAuthProfileDefaultName=ltmAuthProfileDefaultName, ltmIpsecalgProfileTable=ltmIpsecalgProfileTable, ltmVirtualServClonePoolVirtualServerName=ltmVirtualServClonePoolVirtualServerName, ltmHttpClassPoolName=ltmHttpClassPoolName, ltmVsStatusTable=ltmVsStatusTable, ltmServerSslStatSessionMirrorSuccess=ltmServerSslStatSessionMirrorSuccess, ltmClientSslCrlfile=ltmClientSslCrlfile, ltmFastHttpProfileClientCloseTimeout=ltmFastHttpProfileClientCloseTimeout, ltmWebaccCacheUriExclGroup=ltmWebaccCacheUriExclGroup, ltmNodeAddrNumber=ltmNodeAddrNumber, ltmDnsExpressStatDnsxXfrMsgs=ltmDnsExpressStatDnsxXfrMsgs, ltmServerSslStatOcspServersslCertStatusUnknown=ltmServerSslStatOcspServersslCertStatusUnknown, ltmClientSslCertKeyChainEntry=ltmClientSslCertKeyChainEntry, ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers=ltmDiameterrouterProfileStatTotDroppedUnexpectedAnswers, ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns=ltmMrPmbrDiameterRouterStatTotFailAutoInitOutgoingConns, ltmClientSslPeerCertMode=ltmClientSslPeerCertMode, ltmV6rdProfileIpv4prefixType=ltmV6rdProfileIpv4prefixType, ltmDosAttackDataStatStatsRate=ltmDosAttackDataStatStatsRate, ltmSnatTable=ltmSnatTable, ltmWebsocketProfileStatClientBytesRecdPreCompress=ltmWebsocketProfileStatClientBytesRecdPreCompress, ltmPoolGroup=ltmPoolGroup, ltmRouteDomainStatClientPktsOut=ltmRouteDomainStatClientPktsOut, ltmPcpProfileStatPcpPeerResponses=ltmPcpProfileStatPcpPeerResponses, ltmFwNatStaticDestinationTranslationPoolGroup=ltmFwNatStaticDestinationTranslationPoolGroup, ltmServerSslProfileC3dCertExtensionCustomOidsGroup=ltmServerSslProfileC3dCertExtensionCustomOidsGroup, ltmNodeAddrSessionStatus=ltmNodeAddrSessionStatus, ltmPptpProfileConfigSource=ltmPptpProfileConfigSource, ltmXmlProfileNumber=ltmXmlProfileNumber, ltmHttp2ProfileActivationModesActivationModes=ltmHttp2ProfileActivationModesActivationModes, ltmSnatpoolTransAddrNumber=ltmSnatpoolTransAddrNumber, ltmClientSslCacheSize=ltmClientSslCacheSize, ltmNodeAddrScreenName=ltmNodeAddrScreenName, ltmVAddrStatusGroup=ltmVAddrStatusGroup, ltmDnsProfileStatPtrReqs=ltmDnsProfileStatPtrReqs, ltmHttp2ProfileStatPushPromiseFramesSent=ltmHttp2ProfileStatPushPromiseFramesSent, ltmCompUriInclNumber=ltmCompUriInclNumber, ltmFwContextStatTable=ltmFwContextStatTable)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmFastHttpProfileLayer7=ltmFastHttpProfileLayer7, ltmTcpProfileStatAbandons=ltmTcpProfileStatAbandons, ltmDnsCacheMsgCacheSize=ltmDnsCacheMsgCacheSize, ltmFwNatStaticDestinationTranslationPoolStatEntry=ltmFwNatStaticDestinationTranslationPoolStatEntry, ltmHttpClassStatOtherPrecompressBytes=ltmHttpClassStatOtherPrecompressBytes, ltmFwAdminIpRuleStat=ltmFwAdminIpRuleStat, bigipLocalTM=bigipLocalTM, ltmFwContextStatStagedPacketsReject=ltmFwContextStatStagedPacketsReject, ltmFastL4ProfileStatLbcSuccessful=ltmFastL4ProfileStatLbcSuccessful, ltmMrPmbrSipRouterStatTotMessagesReturned=ltmMrPmbrSipRouterStatTotMessagesReturned, ltmAuthProfileStatSuccessResults=ltmAuthProfileStatSuccessResults, ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline=ltmDiameterrouterProfileStatTotMsgsDroppedForceOffline, ltmTftpProfileStatDiscardedRequests=ltmTftpProfileStatDiscardedRequests, ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps=ltmFwNatStaticDestinationTranslationPoolStatSubscrIdLkps, ltmNatStatTransAddr=ltmNatStatTransAddr, ltmFastHttpProfileStatConnpoolExhausted=ltmFastHttpProfileStatConnpoolExhausted, ltmDnsProfileStatOtherReqs=ltmDnsProfileStatOtherReqs, ltmDnsServerStatNumber=ltmDnsServerStatNumber, ltmOcspStaplingParametersNumber=ltmOcspStaplingParametersNumber, ltmNatTable=ltmNatTable, ltmHttpCompressionProfileStatPlainPostcompressBytes=ltmHttpCompressionProfileStatPlainPostcompressBytes, ltmVirtualServPersist=ltmVirtualServPersist, ltmClientSslStatTlsv11=ltmClientSslStatTlsv11, ltmWebAccelerationProfileStatInterStripeEvictions=ltmWebAccelerationProfileStatInterStripeEvictions, ltmTcpProfileVerifiedAccept=ltmTcpProfileVerifiedAccept, ltmOcspStaplingParametersCacheErrorTimeout=ltmOcspStaplingParametersCacheErrorTimeout, ltmLsnPoolHairpinMode=ltmLsnPoolHairpinMode, ltmSplitsessionserverProfileStatConnectionsAccepted=ltmSplitsessionserverProfileStatConnectionsAccepted, ltmRtspProfileStatNumInterleaved=ltmRtspProfileStatNumInterleaved, ltmTcpProfileCongestionCtrl=ltmTcpProfileCongestionCtrl, ltmPoolStatServerPktsOut=ltmPoolStatServerPktsOut, ltmCompUriInclUri=ltmCompUriInclUri, ltmHttpProfileStatAudioPrecompressBytes=ltmHttpProfileStatAudioPrecompressBytes, ltmDnsProfileStatNoErrors=ltmDnsProfileStatNoErrors, ltmPoolStatServerMaxConns=ltmPoolStatServerMaxConns, ltmDosApplicationLatencyBasedUrlTpsIncreaseRate=ltmDosApplicationLatencyBasedUrlTpsIncreaseRate, ltmDiametersessionProfileStatTotOtherRequests=ltmDiametersessionProfileStatTotOtherRequests, ltmNodeAddrPoolMemberRefCount=ltmNodeAddrPoolMemberRefCount, ltmIpsecalgProfileStatTable=ltmIpsecalgProfileStatTable, ltmMrPmbrDiameterRouterStatCurIncomingConnections=ltmMrPmbrDiameterRouterStatCurIncomingConnections, ltmVirtualServProfileGroup=ltmVirtualServProfileGroup, ltmBwcPolicyStatBytesPassed=ltmBwcPolicyStatBytesPassed, ltmUdpProfileStatRxbadsum=ltmUdpProfileStatRxbadsum, ltmClientSslCiphers=ltmClientSslCiphers, ltmSctpProfileIdleTimeout=ltmSctpProfileIdleTimeout, ltmRateFilterStatDropRandPkts=ltmRateFilterStatDropRandPkts, ltmFwNatDynamicPoolDescription=ltmFwNatDynamicPoolDescription, ltmBwcPolicyStatTotalPolicies=ltmBwcPolicyStatTotalPolicies, ltmSipProfileStatBadmsgs=ltmSipProfileStatBadmsgs, ltmMirrors=ltmMirrors, ltmSnatpoolTransAddrGroup=ltmSnatpoolTransAddrGroup, ltmTcpProfileNagle=ltmTcpProfileNagle, ltmMrPmbrSipSessionStatLoopDetected482Sent=ltmMrPmbrSipSessionStatLoopDetected482Sent, ltmServerSslStatConns=ltmServerSslStatConns, ltmDnsProfileStatHwInspected=ltmDnsProfileStatHwInspected, ltmNodeAddrStatGroup=ltmNodeAddrStatGroup, ltmFastHttpProfileStat=ltmFastHttpProfileStat, ltmServerSslStatRc4Bulk=ltmServerSslStatRc4Bulk, ltmDnsCacheStatMsgInserts=ltmDnsCacheStatMsgInserts, ltmSiprouterProfileStatTotMessgesIn=ltmSiprouterProfileStatTotMessgesIn, ltmFwNatDynamicPoolStatPcpAnnounceRequests=ltmFwNatDynamicPoolStatPcpAnnounceRequests, ltmClientSslRenegotiateMaxRecordDelay=ltmClientSslRenegotiateMaxRecordDelay, ltmHttpProfileStatPassthroughExcessClientHeaders=ltmHttpProfileStatPassthroughExcessClientHeaders, ltmBwcPolicyStatName=ltmBwcPolicyStatName, ltmLsnLogProfileStartOutboundElements=ltmLsnLogProfileStartOutboundElements, ltmWebsocketProfileStat=ltmWebsocketProfileStat, ltmDiameterrouterProfileHaMsgSweeperInterval=ltmDiameterrouterProfileHaMsgSweeperInterval, ltmXmlProfileStatResetStats=ltmXmlProfileStatResetStats, ltmSiprouterProfileStatTotOutgoingConnections=ltmSiprouterProfileStatTotOutgoingConnections, ltmRouteDomainStatEntry=ltmRouteDomainStatEntry, ltmTcpanalyticsProfileCollectNexthop=ltmTcpanalyticsProfileCollectNexthop, ltmVirtualServRuleVirtualServerName=ltmVirtualServRuleVirtualServerName, ltmDnsCacheStatNameserverInserts=ltmDnsCacheStatNameserverInserts, ltmWebAccelerationProfileStatCacheMissBytesAll=ltmWebAccelerationProfileStatCacheMissBytesAll, ltmServerSslStatSha512DigestOffload=ltmServerSslStatSha512DigestOffload, ltmSpdyProfileStatDataFramesSent=ltmSpdyProfileStatDataFramesSent, ltmSctpProfileStatGroup=ltmSctpProfileStatGroup, ltmFwIpintVirtualStatBlClassName=ltmFwIpintVirtualStatBlClassName, ltmIpsecalgProfileStatGroup=ltmIpsecalgProfileStatGroup, ltmClientSslCertKeyChainTable=ltmClientSslCertKeyChainTable, ltmFtpProfileName=ltmFtpProfileName, ltmDiameterrouterProfileNumber=ltmDiameterrouterProfileNumber, ltmTcpProfileSelectiveAcks=ltmTcpProfileSelectiveAcks, ltmMrPmbrSip=ltmMrPmbrSip, ltmFwNatDynamicPoolStatLsnActiveEndPoints=ltmFwNatDynamicPoolStatLsnActiveEndPoints, ltmNodeAddrStatNumber=ltmNodeAddrStatNumber, ltmFwPolicyRuleStatRuleName=ltmFwPolicyRuleStatRuleName, ltmHttpProxyConnectProfileConfigSource=ltmHttpProxyConnectProfileConfigSource, ltmSctpProfileAssocMaxrtx=ltmSctpProfileAssocMaxrtx, ltmIsessionProfilePortTransparency=ltmIsessionProfilePortTransparency, ltmIsessionProfileStatDedupInMissHistBucket16k=ltmIsessionProfileStatDedupInMissHistBucket16k, ltmTcpProfileTimestamps=ltmTcpProfileTimestamps, ltmXmlProfileTable=ltmXmlProfileTable, ltmIsessionProfileStatDedupInMissHistBucket128k=ltmIsessionProfileStatDedupInMissHistBucket128k, ltmWebAccelerationProfileStatRemoteHits=ltmWebAccelerationProfileStatRemoteHits, ltmLsnLogProfileStartOutboundElementsIndex=ltmLsnLogProfileStartOutboundElementsIndex, ltmDnsCacheStatSecBogus=ltmDnsCacheStatSecBogus, ltmDosProfileConfigSource=ltmDosProfileConfigSource, ltmTcpProfileStatTimeWait=ltmTcpProfileStatTimeWait, ltmAlgLogProfileGroup=ltmAlgLogProfileGroup, ltmHttpProfileLwsSeparator=ltmHttpProfileLwsSeparator, ltmPersistProfileCookieName=ltmPersistProfileCookieName, ltmDnsSecurityStatOtherDrops=ltmDnsSecurityStatOtherDrops, ltmHttpCompressionProfileContTypeIncl=ltmHttpCompressionProfileContTypeIncl, ltmAuthProfileGroup=ltmAuthProfileGroup, ltmFtpProfileStatName=ltmFtpProfileStatName, ltmDnsProfileName=ltmDnsProfileName, ltmDosAttackDataStatWlCount=ltmDosAttackDataStatWlCount, ltmNatOrigAddr=ltmNatOrigAddr, ltmIsessionProfileStatDedupOutMissHistBucket1k=ltmIsessionProfileStatDedupOutMissHistBucket1k, ltmSplitsessionserverProfileNumber=ltmSplitsessionserverProfileNumber, ltmDnsSecurityNumber=ltmDnsSecurityNumber, ltmDnsProfileStatResponsesPerSec=ltmDnsProfileStatResponsesPerSec, ltmClientSslStatDtlsv12=ltmClientSslStatDtlsv12, ltmCompContTypeInclNumber=ltmCompContTypeInclNumber, ltmWebsocketProfileStatTable=ltmWebsocketProfileStatTable, ltmFwNatDynamicPoolStatPcpPeerRequests=ltmFwNatDynamicPoolStatPcpPeerRequests, ltmFwNatStaticSourceTranslationPoolTable=ltmFwNatStaticSourceTranslationPoolTable, ltmPoolMemberStatPvaCurConns=ltmPoolMemberStatPvaCurConns, ltmDnsCacheForwardZoneNameServerPort=ltmDnsCacheForwardZoneNameServerPort, ltmLsnPoolRouteAdvertisement=ltmLsnPoolRouteAdvertisement, ltmIpsecalgProfileConfigSource=ltmIpsecalgProfileConfigSource, ltmPcpProfileStatPcpPeerRequests=ltmPcpProfileStatPcpPeerRequests, ltmKnownMethodsEntry=ltmKnownMethodsEntry, ltmDiametersessionProfileArrayRetransmissionErrorCode=ltmDiametersessionProfileArrayRetransmissionErrorCode, ltmMrPmbrSipSessionStatResponses=ltmMrPmbrSipSessionStatResponses, ltmHttpcompContTypeInclContentType=ltmHttpcompContTypeInclContentType, ltmStreamProfileStatNumber=ltmStreamProfileStatNumber, ltmHttpClassGroup=ltmHttpClassGroup, ltmWebAccelerationProfile=ltmWebAccelerationProfile, ltmSpdyProfileStatSpdyResponseFrames=ltmSpdyProfileStatSpdyResponseFrames, ltmTcpProfileStatConnects=ltmTcpProfileStatConnects, ltmUdpProfileStatTxdgram=ltmUdpProfileStatTxdgram, ltmServerSslChain=ltmServerSslChain, ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans=ltmFwNatStaticDestinationTranslationPoolStatErrPortTrans, ltmLsnLogProfile=ltmLsnLogProfile, ltmVirtualServStatTotRequests=ltmVirtualServStatTotRequests, ltmMrPmbrSipSessionStatPort=ltmMrPmbrSipSessionStatPort, ltmIsessionProfileStatDedupOutMissHistBucketLarge=ltmIsessionProfileStatDedupOutMissHistBucketLarge, ltmIsessionProfileStatOutgoingConnsActiveCur=ltmIsessionProfileStatOutgoingConnsActiveCur, ltmBwcPolicyStatTable=ltmBwcPolicyStatTable, ltmSnatOrigAddrTable=ltmSnatOrigAddrTable, ltmIsessionProfileStatOutgoingConnsActiveMax=ltmIsessionProfileStatOutgoingConnsActiveMax, ltmDnsCacheStatTable=ltmDnsCacheStatTable, ltmMrPmbrDiameterRouterStatRouterInst=ltmMrPmbrDiameterRouterStatRouterInst, ltmDiameterrouterProfileStatTotMessagesNoConnection=ltmDiameterrouterProfileStatTotMessagesNoConnection, ltmHttp2ProfileStatContinuationFramesSent=ltmHttp2ProfileStatContinuationFramesSent, ltmTftpProfileLogPublisher=ltmTftpProfileLogPublisher, ltmClientSslModsslmethods=ltmClientSslModsslmethods, ltmVAddrStatusEntry=ltmVAddrStatusEntry, ltmIsessionProfileStatBzip2InBytesRaw=ltmIsessionProfileStatBzip2InBytesRaw, ltmBwcPolicyStatInactivePolicies=ltmBwcPolicyStatInactivePolicies, ltmMrPmbrSipSessionStatRequests=ltmMrPmbrSipSessionStatRequests, ltmClientSslStatRecordSize9k=ltmClientSslStatRecordSize9k, ltmFwIpintVirtualStatContextName=ltmFwIpintVirtualStatContextName, ltmSplitsessionserverProfileName=ltmSplitsessionserverProfileName, ltmDnsExpressStatXfrNotifiesFailed=ltmDnsExpressStatXfrNotifiesFailed, ltmSiprouterProfileStatTotPayloadBytesOut=ltmSiprouterProfileStatTotPayloadBytesOut, ltmSpdyProfileStatName=ltmSpdyProfileStatName, ltmMrPmbrSipRouterStatNumber=ltmMrPmbrSipRouterStatNumber, ltmPersistProfileNumber=ltmPersistProfileNumber, ltmClientSslConfigSource=ltmClientSslConfigSource, ltmHttpcompUriInclGroup=ltmHttpcompUriInclGroup, ltmLsnLogProfileEndOutboundElementsGroup=ltmLsnLogProfileEndOutboundElementsGroup, ltmSplitsessionserverProfileStatEntry=ltmSplitsessionserverProfileStatEntry, ltmPcpProfileStatPcpErrorsInvalidRequest=ltmPcpProfileStatPcpErrorsInvalidRequest, ltmTcpProfileMptcpCsum=ltmTcpProfileMptcpCsum, ltmClientSslStrictResume=ltmClientSslStrictResume, ltmClientSslStatTotalHandshakesSoftware=ltmClientSslStatTotalHandshakesSoftware, ltmServerSslStatDecryptedBytesOut=ltmServerSslStatDecryptedBytesOut, ltmIsessionProfileStatNullOutErrors=ltmIsessionProfileStatNullOutErrors, ltmXmlProfileMaxBufferSize=ltmXmlProfileMaxBufferSize, ltmFwNatStaticDestinationTranslationPoolNumber=ltmFwNatStaticDestinationTranslationPoolNumber, ltmTcpProfileFastOpenCookieExpiration=ltmTcpProfileFastOpenCookieExpiration, ltmSpdyProfileEntry=ltmSpdyProfileEntry, ltmXmlProfileNamespaceMappingsMappingNamespace=ltmXmlProfileNamespaceMappingsMappingNamespace, ltmWebAccelerationProfileCacheInsertAgeHeader=ltmWebAccelerationProfileCacheInsertAgeHeader, ltmTcpProfileStatName=ltmTcpProfileStatName, ltmVirtualServDefaultPool=ltmVirtualServDefaultPool, ltmClientSslStatAesBulk=ltmClientSslStatAesBulk, ltmFwIpintGlobalStatNumber=ltmFwIpintGlobalStatNumber, ltmCompUriExclIndex=ltmCompUriExclIndex, ltmClientSslStatAesGcmBulkOffload=ltmClientSslStatAesGcmBulkOffload, ltmDnsCacheStatNameserverEvictions=ltmDnsCacheStatNameserverEvictions, ltmServerSslStatCamelliaBulk=ltmServerSslStatCamelliaBulk, ltmCompContTypeExclEntry=ltmCompContTypeExclEntry, ltmIsessionProfileStatNullInBytesOpt=ltmIsessionProfileStatNullInBytesOpt, ltmDnsProfileStatToCache=ltmDnsProfileStatToCache, ltmClientSslMaxAggregateRenegotiationsPerMin=ltmClientSslMaxAggregateRenegotiationsPerMin, ltmHttpCompressionProfileAllowHttp10=ltmHttpCompressionProfileAllowHttp10, ltmServerSslStatPeercertValid=ltmServerSslStatPeercertValid, ltmFwPolicyRuleStatRuleListName=ltmFwPolicyRuleStatRuleListName, ltmFwNatStaticSourceTranslationPoolStatEntry=ltmFwNatStaticSourceTranslationPoolStatEntry, ltmIsessionProfileStatDedupOutHitHistBucketLarge=ltmIsessionProfileStatDedupOutHitHistBucketLarge, ltmLsnPrefixLsnPoolBackupGroup=ltmLsnPrefixLsnPoolBackupGroup, ltmIiopProfileStatNumFragments=ltmIiopProfileStatNumFragments, ltmLsnPoolStatPcpAnnounceResponsesMulticast=ltmLsnPoolStatPcpAnnounceResponsesMulticast, ltmRuleNumber=ltmRuleNumber, ltmNodeAddrStatusDetailReason=ltmNodeAddrStatusDetailReason, ltmFwPolicyRuleStatNumber=ltmFwPolicyRuleStatNumber, ltmServerSslC3dCaPassphrase=ltmServerSslC3dCaPassphrase, ltmClientSslFwdpBypassHnWList=ltmClientSslFwdpBypassHnWList, ltmFwNatDynamicPoolPatMode=ltmFwNatDynamicPoolPatMode, ltmAuthProfileConfigName=ltmAuthProfileConfigName, ltmFwNatDynamicPoolStatPbaTotalPortBlocks=ltmFwNatDynamicPoolStatPbaTotalPortBlocks, ltmSipsessionProfileStatSubscribe=ltmSipsessionProfileStatSubscribe, ltmDiameterrouterProfileStatTotPayloadBytesOut=ltmDiameterrouterProfileStatTotPayloadBytesOut, ltmDnsCacheStatResetStats=ltmDnsCacheStatResetStats, ltmHttpProfileStatCssPostcompressBytes=ltmHttpProfileStatCssPostcompressBytes, ltmSpdyProfileStatFlowsCurrent=ltmSpdyProfileStatFlowsCurrent, ltmDiametersessionProfileLoopDetection=ltmDiametersessionProfileLoopDetection, ltmDnsProfileStatAuthoritativeAnswer=ltmDnsProfileStatAuthoritativeAnswer, ltmTftpProfileStatReadRequests=ltmTftpProfileStatReadRequests, ltmClientSslStatDhRsaKeyxchg=ltmClientSslStatDhRsaKeyxchg, ltmFastL4ProfileLinkQosToClient=ltmFastL4ProfileLinkQosToClient, ltmHttpProfileStatRespBucket1k=ltmHttpProfileStatRespBucket1k, ltmIsessionProfileStatOutgoingConnsActiveTot=ltmIsessionProfileStatOutgoingConnsActiveTot, ltmDnsQueryFilterIndex=ltmDnsQueryFilterIndex, ltmSipsessionProfileStatUnsupportedUriScheme=ltmSipsessionProfileStatUnsupportedUriScheme, ltmMrPmbrSipSessionStatServerInternalError=ltmMrPmbrSipSessionStatServerInternalError, ltmFwNatStaticDestinationTranslationPoolStatGroup=ltmFwNatStaticDestinationTranslationPoolStatGroup, ltmCompContTypeExclIndex=ltmCompContTypeExclIndex, ltmRtspProfile=ltmRtspProfile, ltmIsessionProfileStatDedupOutMissBytes=ltmIsessionProfileStatDedupOutMissBytes, ltmVsHttpClassGroup=ltmVsHttpClassGroup, ltmClientSslStatRecordSize14k=ltmClientSslStatRecordSize14k, ltmLsnPoolPersistencePrefixLengthIpv6=ltmLsnPoolPersistencePrefixLengthIpv6, ltmTcpProfileBandwidthDelay=ltmTcpProfileBandwidthDelay, ltmConnPoolProfileConfigSource=ltmConnPoolProfileConfigSource, ltmDiameterrouterProfileStatTotOutgoingStreams=ltmDiameterrouterProfileStatTotOutgoingStreams, ltmOcspStaplingParametersTrustedCa=ltmOcspStaplingParametersTrustedCa, ltmMrPmbrSipRouterStatTotMessagesStandbyDropped=ltmMrPmbrSipRouterStatTotMessagesStandbyDropped, ltmNodeAddrName=ltmNodeAddrName, ltmIsessionProfileStatDedupOutMissHistBucket512k=ltmIsessionProfileStatDedupOutMissHistBucket512k, ltmClientSslStatHostnameBypasses=ltmClientSslStatHostnameBypasses, ltmNetworkAttackDataStatDrops1m=ltmNetworkAttackDataStatDrops1m, ltmHttpClassStatRespBucket4k=ltmHttpClassStatRespBucket4k, ltmSplitsessionserverProfileStatName=ltmSplitsessionserverProfileStatName, ltmHttpProfilePipelining=ltmHttpProfilePipelining, ltmDnsCacheStatSecIndeterminate=ltmDnsCacheStatSecIndeterminate, ltmSpdyProfileFrameSize=ltmSpdyProfileFrameSize, ltmDosApplicationLatencyBasedIpTpsIncreaseRate=ltmDosApplicationLatencyBasedIpTpsIncreaseRate, ltmDnsProfileStatNsReqs=ltmDnsProfileStatNsReqs, ltmNodeAddrStatServerCurConns=ltmNodeAddrStatServerCurConns, ltmClientSslStatRecordSize2k=ltmClientSslStatRecordSize2k, ltmClientSslStatInsecureHandshakeAccepts=ltmClientSslStatInsecureHandshakeAccepts, ltmRamUriExclIndex=ltmRamUriExclIndex, ltmAlgLogProfileEndDataElementsNumber=ltmAlgLogProfileEndDataElementsNumber, ltmFastL4ProfileStatGroup=ltmFastL4ProfileStatGroup, ltmHttpClassStatJsPostcompressBytes=ltmHttpClassStatJsPostcompressBytes, ltmVirtualAddr=ltmVirtualAddr, ltmHttpClassStatRespBucket32k=ltmHttpClassStatRespBucket32k, ltmSctpProfileSndPartial=ltmSctpProfileSndPartial, ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks=ltmFwNatDynamicPoolStatPbaActiveZombiePortBlocks)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDnsQueryFilterTable=ltmDnsQueryFilterTable, ltmUserStatProfileGroup=ltmUserStatProfileGroup, ltmUserStatProfileTable=ltmUserStatProfileTable, ltmPoolStatPvaCurConns=ltmPoolStatPvaCurConns, ltmDnsQueryFilterType=ltmDnsQueryFilterType, ltmMrPmbrSipRouterStatActiveRegistrations=ltmMrPmbrSipRouterStatActiveRegistrations, ltmVirtualServClonePoolTable=ltmVirtualServClonePoolTable, ltmPoolStatusNumber=ltmPoolStatusNumber, ltmCompUriExclGroup=ltmCompUriExclGroup, ltmIsessionProfileStatDedupOutHitHistBucket32k=ltmIsessionProfileStatDedupOutHitHistBucket32k, ltmSnatPoolGroup=ltmSnatPoolGroup, ltmFwNatDynamicPoolFailureStatGroup=ltmFwNatDynamicPoolFailureStatGroup, ltmHttpCompressionProfileCpusaverHigh=ltmHttpCompressionProfileCpusaverHigh, ltmSipsessionProfileStatRequests=ltmSipsessionProfileStatRequests, ltmFastL4ProfileGroup=ltmFastL4ProfileGroup, ltmHttp2ProfileStatNumber=ltmHttp2ProfileStatNumber, ltmClientSslStatDhGroupP384=ltmClientSslStatDhGroupP384, ltmVirtualServStatRespMrIn=ltmVirtualServStatRespMrIn, ltmClientSslStatTlsv1=ltmClientSslStatTlsv1, ltmWebsocketProfileStatConnectionsMax=ltmWebsocketProfileStatConnectionsMax, ltmVirtualServStatCsMaxConnDur=ltmVirtualServStatCsMaxConnDur, ltmServerSslBypassClientCertFailEnabled=ltmServerSslBypassClientCertFailEnabled, ltmIsessionProfileStatDedupOutBytesRaw=ltmIsessionProfileStatDedupOutBytesRaw, ltmSpdyProfileStatSpdyRequestBytes=ltmSpdyProfileStatSpdyRequestBytes, ltmHttpClassStatRespBucket64k=ltmHttpClassStatRespBucket64k, ltmSpdyProfileStatRstStreamFramesReceived=ltmSpdyProfileStatRstStreamFramesReceived, ltmLsnPoolFailureStatNumber=ltmLsnPoolFailureStatNumber, ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx=ltmMrPmbrDiameterSessionStatTotResultCodeRcvd4xxx, ltmVirtualServStatCsMinConnDur=ltmVirtualServStatCsMinConnDur, ltmHttpClassStatNumber=ltmHttpClassStatNumber, ltmMrPmbrDiameterRouterStatPort=ltmMrPmbrDiameterRouterStatPort, ltmDnsCacheStatGroup=ltmDnsCacheStatGroup, ltmPptpProfileEntry=ltmPptpProfileEntry, ltmFastL4ProfileStatResetStats=ltmFastL4ProfileStatResetStats, ltmVirtualServAddr=ltmVirtualServAddr, ltmXmlProfileXpathQueriesNumber=ltmXmlProfileXpathQueriesNumber, ltmSnatStatGroup=ltmSnatStatGroup, ltmVirtualServLasthopPoolName=ltmVirtualServLasthopPoolName, ltmStreamProfileStat=ltmStreamProfileStat, ltmDosWhiteIpNumber=ltmDosWhiteIpNumber, ltmSipsessionProfileStatRequestEntityTooLarge=ltmSipsessionProfileStatRequestEntityTooLarge, ltmSnatVlanVlanName=ltmSnatVlanVlanName, ltmDiametersessionProfileNumber=ltmDiametersessionProfileNumber, ltmIsessionProfileStatOutgoingConnsIdleCur=ltmIsessionProfileStatOutgoingConnsIdleCur, ltmVirtualServRuleTable=ltmVirtualServRuleTable, ltmFwNatDynamicPoolStatPcpErrorsOther=ltmFwNatDynamicPoolStatPcpErrorsOther, ltmVirtualServStatGroup=ltmVirtualServStatGroup, ltmVirtualModuleScoreModuleType=ltmVirtualModuleScoreModuleType, ltmVsHttpClassEntry=ltmVsHttpClassEntry, ltmRouteDomainStatName=ltmRouteDomainStatName, ltmSNATs=ltmSNATs, ltmHttpCompressionProfileGzipWindowsize=ltmHttpCompressionProfileGzipWindowsize, ltmUdpProfileStatExpires=ltmUdpProfileStatExpires, ltmSplitsessionclientProfileStatResetStats=ltmSplitsessionclientProfileStatResetStats, ltmClientSslStatBypassClientCertificateRequest=ltmClientSslStatBypassClientCertificateRequest, ltmDiametersessionProfileIngressCriticalMessageRateLimit=ltmDiametersessionProfileIngressCriticalMessageRateLimit, ltmVirtualServStatClientPktsOut=ltmVirtualServStatClientPktsOut, ltmVirtualServPoolNumber=ltmVirtualServPoolNumber, ltmSpdyProfileStatWindowUpdateFramesReceived=ltmSpdyProfileStatWindowUpdateFramesReceived, ltmFastHttpProfileConnpoolMaxReuse=ltmFastHttpProfileConnpoolMaxReuse, ltmPptpProfileStatStartRequests=ltmPptpProfileStatStartRequests, ltmSctpProfileStatAbandons=ltmSctpProfileStatAbandons, ltmAuthProfileStatEntry=ltmAuthProfileStatEntry, ltmPcpPrefixProfilePcpTable=ltmPcpPrefixProfilePcpTable, ltmTcpProfileTailLossProbe=ltmTcpProfileTailLossProbe, ltmIsessionProfileStatDedupOutMissHistBucket64k=ltmIsessionProfileStatDedupOutMissHistBucket64k, ltmRtspProfileEntry=ltmRtspProfileEntry, ltmSpdyProfileStatHeadersFramesSent=ltmSpdyProfileStatHeadersFramesSent, ltmVirtualAddrArpEnabled=ltmVirtualAddrArpEnabled, ltmDosApplicationLatencyBasedUrlRateLimiting=ltmDosApplicationLatencyBasedUrlRateLimiting, ltmHttpClassStatGroup=ltmHttpClassStatGroup, ltmDiameterrouterProfileStatCurIncomingConnections=ltmDiameterrouterProfileStatCurIncomingConnections, ltmTcpProfileFinWaitTimeout=ltmTcpProfileFinWaitTimeout, ltmDosProfileDefaultName=ltmDosProfileDefaultName, ltmClientSslAllowDynamicRecordSizing=ltmClientSslAllowDynamicRecordSizing, ltmClientSslStatCurrentActiveHandshakes=ltmClientSslStatCurrentActiveHandshakes, ltmVirtualServStatEphemeralMaxConns=ltmVirtualServStatEphemeralMaxConns, ltmVAddrStatusDetailReason=ltmVAddrStatusDetailReason, ltmIpsecalgProfileStatIkePackets=ltmIpsecalgProfileStatIkePackets, ltmDnsCacheForwardZoneNameServerTable=ltmDnsCacheForwardZoneNameServerTable, ltmWebsocketProfileDefaultName=ltmWebsocketProfileDefaultName, ltmSipsessionProfileStatDropsReq=ltmSipsessionProfileStatDropsReq, ltmMrPmbrSipRouterStatTotMessagesUnroutable=ltmMrPmbrSipRouterStatTotMessagesUnroutable, ltmSctpProfileStatAccepts=ltmSctpProfileStatAccepts, ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis=ltmFwNatStaticSourceTranslationPoolStatErrFlowCollis, ltmSpdyProfileProtocolVersionsIndex=ltmSpdyProfileProtocolVersionsIndex, ltmIiopProfileAbortOnTimeout=ltmIiopProfileAbortOnTimeout, ltmDosApplicationHeavyUrlProtection=ltmDosApplicationHeavyUrlProtection, ltmServerSslCacheTimeout=ltmServerSslCacheTimeout, ltmDiametersessionProfileIngressMajorMessageRateLimit=ltmDiametersessionProfileIngressMajorMessageRateLimit, ltmTcpanalyticsProfileConfigSource=ltmTcpanalyticsProfileConfigSource, ltmClientSslCacheTimeout=ltmClientSslCacheTimeout, ltmHttpCompressionProfileStat=ltmHttpCompressionProfileStat, ltmDnsProfileStatName=ltmDnsProfileStatName, ltmServerSslSslSignHash=ltmServerSslSslSignHash, ltmPersistProfileCookieHashLength=ltmPersistProfileCookieHashLength, ltmTcpProfileProxyMss=ltmTcpProfileProxyMss, ltmRespHeadersPermGroup=ltmRespHeadersPermGroup, ltmDiameterrouterProfileStatCurAutoInitOutgoingConns=ltmDiameterrouterProfileStatCurAutoInitOutgoingConns, ltmIpsecalgProfileEntry=ltmIpsecalgProfileEntry, ltmVirtualServRuleGroup=ltmVirtualServRuleGroup, ltmRuleGroup=ltmRuleGroup, ltmStreamProfileStatGroup=ltmStreamProfileStatGroup, ltmHttp2ProfileConcurrentStreamsPerConnection=ltmHttp2ProfileConcurrentStreamsPerConnection, ltmPoolStatConnqAllAgeHead=ltmPoolStatConnqAllAgeHead, ltmLsnPoolStatPcpErrorsUnavailableResource=ltmLsnPoolStatPcpErrorsUnavailableResource, ltmNetworkAttackDataStatResetStats=ltmNetworkAttackDataStatResetStats, ltmPoolMemberDynamicRatio=ltmPoolMemberDynamicRatio, ltmTcpProfileStatRxbadcookie=ltmTcpProfileStatRxbadcookie, ltmTcpProfileInitRwnd=ltmTcpProfileInitRwnd, ltmLsnPoolStatTotalZombiePortBlocksCreated=ltmLsnPoolStatTotalZombiePortBlocksCreated, ltmIsessionProfileNumber=ltmIsessionProfileNumber, ltmHttpCompression=ltmHttpCompression, ltmHttpProfileCompressCpusaverHigh=ltmHttpProfileCompressCpusaverHigh, ltmRtspProfileStatNumRequests=ltmRtspProfileStatNumRequests, ltmDnsExpressStatDnsxResponses=ltmDnsExpressStatDnsxResponses, ltmNatVlanGroup=ltmNatVlanGroup, ltmVirtualServStatNoNodesErrors=ltmVirtualServStatNoNodesErrors, ltmHttpClassStatGetReqs=ltmHttpClassStatGetReqs, ltmIpsecalgProfileLogProfile=ltmIpsecalgProfileLogProfile, ltmHttp2ProfileHeaderTableSize=ltmHttp2ProfileHeaderTableSize, ltmHttpClassStatResp3xxCnt=ltmHttpClassStatResp3xxCnt, ltmMrPmbrDiameterRouterStatCurPendingRequests=ltmMrPmbrDiameterRouterStatCurPendingRequests, ltmNatTransAddrType=ltmNatTransAddrType, ltmDnsServerStatTable=ltmDnsServerStatTable, ltmSipProfileTerminateBye=ltmSipProfileTerminateBye, ltmPoolMemberPriority=ltmPoolMemberPriority, ltmSpdyProfileStatRstStreamFramesSent=ltmSpdyProfileStatRstStreamFramesSent, ltmIsessionProfileCompressionBzip2=ltmIsessionProfileCompressionBzip2, ltmMirrorPortMemberEntry=ltmMirrorPortMemberEntry, ltmHttpProfileStatPostReqs=ltmHttpProfileStatPostReqs, ltmServerSslStatTlsv12=ltmServerSslStatTlsv12, ltmTcpProfileTimeWaitTimeout=ltmTcpProfileTimeWaitTimeout, ltmVirtualServStatPvaBytesOut=ltmVirtualServStatPvaBytesOut, ltmHttpClassUriString=ltmHttpClassUriString, ltmFtpProfileStatNumber=ltmFtpProfileStatNumber, ltmFtpProfileTable=ltmFtpProfileTable, ltmWebsocketProfileStatClientDecompressionFailures=ltmWebsocketProfileStatClientDecompressionFailures, ltmDiametersessionProfileOriginHost=ltmDiametersessionProfileOriginHost, ltmSnatStatEntry=ltmSnatStatEntry, ltmSctpProfileTable=ltmSctpProfileTable, ltmAlgLogProfileStartControlAction=ltmAlgLogProfileStartControlAction, ltmNatVlanTable=ltmNatVlanTable, ltmNodeAddrRatio=ltmNodeAddrRatio, ltmDns=ltmDns, ltmSnatOrigAddr=ltmSnatOrigAddr, ltmClientSslStatTotalHandshakesOffload=ltmClientSslStatTotalHandshakesOffload, ltmPersistProfileAcrossPools=ltmPersistProfileAcrossPools, ltmSplitsessionserverProfileStatConnectionsCurrent=ltmSplitsessionserverProfileStatConnectionsCurrent, ltmTftpProfileStatResetStats=ltmTftpProfileStatResetStats, ltmSctpProfileProxyBufferLow=ltmSctpProfileProxyBufferLow, ltmServerSslStatRecordsOut=ltmServerSslStatRecordsOut, ltmPoolMemberStatCurSessions=ltmPoolMemberStatCurSessions, ltmPcpProfileDefaultName=ltmPcpProfileDefaultName, ltmDosApplicationHeavyUrlInclName=ltmDosApplicationHeavyUrlInclName, ltmDnsCacheStatUdpBytesOut=ltmDnsCacheStatUdpBytesOut, ltmHttpCompressionProfileStatOctetPrecompressBytes=ltmHttpCompressionProfileStatOctetPrecompressBytes, ltmIsessionProfileStatTable=ltmIsessionProfileStatTable, ltmHttpClassStatHtmlPrecompressBytes=ltmHttpClassStatHtmlPrecompressBytes, ltmCompContTypeInclName=ltmCompContTypeInclName, ltmPoolMemberStatServerMaxConns=ltmPoolMemberStatServerMaxConns, ltmTcpProfileStatFinWait2=ltmTcpProfileStatFinWait2, ltmVirtualServEntry=ltmVirtualServEntry, ltmHttpClassCookNumber=ltmHttpClassCookNumber, ltmStreamProfileSource=ltmStreamProfileSource, ltmDosApplicationLatencyBasedUrlMinimumTps=ltmDosApplicationLatencyBasedUrlMinimumTps, ltmSpdyProfileStatV2StreamsMax=ltmSpdyProfileStatV2StreamsMax, ltmHttp2ProfileDefaultName=ltmHttp2ProfileDefaultName, ltmHttp2ProfileReceiveWindow=ltmHttp2ProfileReceiveWindow, ltmMrPmbrSipSessionStatMrType=ltmMrPmbrSipSessionStatMrType, ltmSnatName=ltmSnatName, ltmAlgLogProfileStartControlElementsElements=ltmAlgLogProfileStartControlElementsElements, ltmServerSslStatSha384Digest=ltmServerSslStatSha384Digest, ltmHttpClassStatV10Resp=ltmHttpClassStatV10Resp, ltmAlgLogProfileEndControlElementsTable=ltmAlgLogProfileEndControlElementsTable, ltmHttpClassStatRamcacheMissesAll=ltmHttpClassStatRamcacheMissesAll, ltmFastL4ProfileSoftSyncookie=ltmFastL4ProfileSoftSyncookie, ltmDiametersessionProfileStatTotRetransReturnedBusy=ltmDiametersessionProfileStatTotRetransReturnedBusy, ltmTcpProfileMptcpTimeout=ltmTcpProfileMptcpTimeout, ltmPoolMinActiveMembers=ltmPoolMinActiveMembers, ltmDnsProfileStatAaaaReqs=ltmDnsProfileStatAaaaReqs, ltmIsessionProfileStatDedupOutUses=ltmIsessionProfileStatDedupOutUses, ltmRtspProfileStatEntry=ltmRtspProfileStatEntry, ltmServerSslStatDecryptedBytesIn=ltmServerSslStatDecryptedBytesIn, ltmVirtualServStatPvaPktsIn=ltmVirtualServStatPvaPktsIn, ltmLsnPoolVlan=ltmLsnPoolVlan, ltmFwContextStat=ltmFwContextStat, ltmNodeAddrStatCurrentConnsPerSec=ltmNodeAddrStatCurrentConnsPerSec, ltmLsnLogProfileEntry=ltmLsnLogProfileEntry, ltmDnsCacheForwardZone=ltmDnsCacheForwardZone, ltmHttp2ProfileIncludeContentLength=ltmHttp2ProfileIncludeContentLength, ltmMrPmbrSipSessionStatLoopDetected=ltmMrPmbrSipSessionStatLoopDetected, ltmSipsessionProfileStatAck=ltmSipsessionProfileStatAck, ltmIsessionProfileStatNullInUses=ltmIsessionProfileStatNullInUses, ltmTcpProfileSndbuf=ltmTcpProfileSndbuf, ltmDiametersessionProfileStatTotDisconnectPeerAnswers=ltmDiametersessionProfileStatTotDisconnectPeerAnswers, ltmSipsessionProfileStatInvite=ltmSipsessionProfileStatInvite, ltmPoolStatConnqAgeEma=ltmPoolStatConnqAgeEma, ltmTcpProfileInitCwnd=ltmTcpProfileInitCwnd, ltmRouteDomainStatNumber=ltmRouteDomainStatNumber, ltmDnsProfileStatHwCacheResponses=ltmDnsProfileStatHwCacheResponses, ltmClientSslStatTable=ltmClientSslStatTable, ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures=ltmFwNatDynamicPoolStatPbaPortBlockAllocationFailures, ltmDiameterrouterProfileStatTotExpiredPendingRequests=ltmDiameterrouterProfileStatTotExpiredPendingRequests, ltmHttpProfileMaxHeaderSize=ltmHttpProfileMaxHeaderSize, ltmVirtualServStatEphemeralCurConns=ltmVirtualServStatEphemeralCurConns, ltmMrPmbrSipSessionStatRouterInst=ltmMrPmbrSipSessionStatRouterInst, ltmHttpClassStatV9Reqs=ltmHttpClassStatV9Reqs, ltmPersistProfileMapProxies=ltmPersistProfileMapProxies, ltmOcspStaplingParametersUseProxyServer=ltmOcspStaplingParametersUseProxyServer, ltmVirtualAddrStatPvaPktsIn=ltmVirtualAddrStatPvaPktsIn, ltmAuthProfileStatTable=ltmAuthProfileStatTable, ltmIsessionProfileStatDedupOutHitBytes=ltmIsessionProfileStatDedupOutHitBytes, ltmFtpProfileStatUploadRequests=ltmFtpProfileStatUploadRequests, ltmOcspStaplingParametersSignerKey=ltmOcspStaplingParametersSignerKey, ltmVirtualServStatPvaCurConns=ltmVirtualServStatPvaCurConns, ltmPersistProfileMode=ltmPersistProfileMode, ltmVirtualServStatVsUsageRatio1m=ltmVirtualServStatVsUsageRatio1m, ltmNatArpEnabled=ltmNatArpEnabled, ltmFastHttpProfileStatV9Reqs=ltmFastHttpProfileStatV9Reqs, ltmDnsSecurityStatMxDrops=ltmDnsSecurityStatMxDrops, ltmStreamProfileStatResetStats=ltmStreamProfileStatResetStats, ltmDiametersessionProfileStatTotRetransReqRetransmitted=ltmDiametersessionProfileStatTotRetransReqRetransmitted, ltmFwNatDynamicPoolStatGroup=ltmFwNatDynamicPoolStatGroup, ltmRamUriExclTable=ltmRamUriExclTable, ltmMrPmbrSipRouterStatTotFailedOutgoingStreams=ltmMrPmbrSipRouterStatTotFailedOutgoingStreams, ltmTcpProfileStatNumber=ltmTcpProfileStatNumber, ltmRespHeadersPermEntry=ltmRespHeadersPermEntry, ltmRouteDomainStatServerMaxConns=ltmRouteDomainStatServerMaxConns, ltmTftpProfileDefaultName=ltmTftpProfileDefaultName, ltmVirtualServDisabledParentType=ltmVirtualServDisabledParentType, ltmVirtualAddrStatusReason=ltmVirtualAddrStatusReason, ltmPolicies=ltmPolicies, ltmWebsocketProfileStatPongFramesClientRecv=ltmWebsocketProfileStatPongFramesClientRecv, ltmPersistProfileCookieHttpOnly=ltmPersistProfileCookieHttpOnly, ltmDiametersessionProfileMaxMessageSize=ltmDiametersessionProfileMaxMessageSize, ltmAlgLogProfileEndControlElementsEntry=ltmAlgLogProfileEndControlElementsEntry, ltmHttpProfileHstsIncludeSubdomains=ltmHttpProfileHstsIncludeSubdomains, ltmSctpProfileStatRxrst=ltmSctpProfileStatRxrst, ltmVirtualServServiceDownImmediateAction=ltmVirtualServServiceDownImmediateAction, ltmVirtualServRule=ltmVirtualServRule, ltmSctpProfileStatRxbadcookie=ltmSctpProfileStatRxbadcookie, ltmDiameterrouterProfileEntry=ltmDiameterrouterProfileEntry, ltmSipProfileStat=ltmSipProfileStat, ltmServerSslStatChacha20Poly1305BulkOffld=ltmServerSslStatChacha20Poly1305BulkOffld, ltmDiametersessionProfileStatTotCapExcReq=ltmDiametersessionProfileStatTotCapExcReq, ltmBWC=ltmBWC, ltmDNS=ltmDNS, ltmDnsCacheStatKeyEvictions=ltmDnsCacheStatKeyEvictions, ltmBwcPolicyStatNumber=ltmBwcPolicyStatNumber, ltmServerSsl=ltmServerSsl, ltmHttpCompressionProfileStatNumber=ltmHttpCompressionProfileStatNumber, ltmFastHttpProfileStatResp3xxCnt=ltmFastHttpProfileStatResp3xxCnt, ltmDosAttackDataStatAttackType=ltmDosAttackDataStatAttackType)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit=ltmMrPmbrDiameterSessionStatTotRetransReqRetransmit, ltmPoolStatRespMrIn=ltmPoolStatRespMrIn, ltmClientSslStatOcspFwdpClientsslRespstatusErrResp=ltmClientSslStatOcspFwdpClientsslRespstatusErrResp, ltmFwNatDynamicPoolFailureStat=ltmFwNatDynamicPoolFailureStat, ltmHttp2ProfileStatStreamsCreated=ltmHttp2ProfileStatStreamsCreated, ltmClientSslStatNotssl=ltmClientSslStatNotssl, ltmDosApplicationLatencyBasedDeEscalationPeriod=ltmDosApplicationLatencyBasedDeEscalationPeriod, ltmMrPmbrSipRouterStatCurIncomingConnections=ltmMrPmbrSipRouterStatCurIncomingConnections, ltmHttpcompContTypeInclIndex=ltmHttpcompContTypeInclIndex, ltmClientSslFwdpBypassDipWList=ltmClientSslFwdpBypassDipWList, ltmPersistProfileAcrossServices=ltmPersistProfileAcrossServices, ltmFwRuleStatLastHitTime=ltmFwRuleStatLastHitTime, ltmDiametersessionProfileStatTotResultCodeSent4xxx=ltmDiametersessionProfileStatTotResultCodeSent4xxx, ltmLsnPrefixLsnPoolGroup=ltmLsnPrefixLsnPoolGroup, ltmWebAccelerationProfileStatInterStripeMisses=ltmWebAccelerationProfileStatInterStripeMisses, ltmLsnLogProfileConfigSource=ltmLsnLogProfileConfigSource, ltmIsessionProfileStatIncomingConnsActiveCur=ltmIsessionProfileStatIncomingConnsActiveCur, ltmVirtualServProfileTable=ltmVirtualServProfileTable, ltmDiametersessionProfileStatAveRoundTripTime=ltmDiametersessionProfileStatAveRoundTripTime, ltmMrPmbrSipSessionStatService=ltmMrPmbrSipSessionStatService, ltmClientSslStatDhGroupX25519Offload=ltmClientSslStatDhGroupX25519Offload, ltmServerSslStatDhRsaKeyxchg=ltmServerSslStatDhRsaKeyxchg, ltmMrPmbrSipRouterStatTotMessagesConnectionClosed=ltmMrPmbrSipRouterStatTotMessagesConnectionClosed, ltmSipProfileStatResetStats=ltmSipProfileStatResetStats, ltmFastHttpProfileConnpoolMinSize=ltmFastHttpProfileConnpoolMinSize, ltmClientSslBypassHsAlertEnabled=ltmClientSslBypassHsAlertEnabled, ltmNodeAddrAddr=ltmNodeAddrAddr, ltmUdpProfileStatConnects=ltmUdpProfileStatConnects, ltmRuleEventStatNumber=ltmRuleEventStatNumber, ltmDnsCacheStatUnsolicitedReplies=ltmDnsCacheStatUnsolicitedReplies, ltmDiametersessionProfileMaxRetransmissions=ltmDiametersessionProfileMaxRetransmissions, ltmAttrLbmodeFastestMaxIdleTime=ltmAttrLbmodeFastestMaxIdleTime, ltmServerSslProfileC3dCertExtensionCustomOidsServerssl=ltmServerSslProfileC3dCertExtensionCustomOidsServerssl, ltmDiametersessionProfileGroup=ltmDiametersessionProfileGroup, ltmIsessionProfileStatIncomingConnsErrors=ltmIsessionProfileStatIncomingConnsErrors, ltmDnsSecurityGroup=ltmDnsSecurityGroup, ltmWebsocketProfileStatCloseRsnProtErrServerRecv=ltmWebsocketProfileStatCloseRsnProtErrServerRecv, ltmDosApplicationTpsBasedSiteTpsIncreaseRate=ltmDosApplicationTpsBasedSiteTpsIncreaseRate, ltmHttpProfileStatRamcacheHitBytes=ltmHttpProfileStatRamcacheHitBytes, ltmRuleEventNumber=ltmRuleEventNumber, ltmAlgLogProfileStartControlElementsName=ltmAlgLogProfileStartControlElementsName, ltmLsnLogProfileEndOutboundElementsTable=ltmLsnLogProfileEndOutboundElementsTable, ltmBwcPolicyStatPacketsPerSecOut=ltmBwcPolicyStatPacketsPerSecOut, ltmMrPmbrSipSessionStatPublish=ltmMrPmbrSipSessionStatPublish, ltmHttpCompressionProfileStatCssPostcompressBytes=ltmHttpCompressionProfileStatCssPostcompressBytes, ltmNetworkAttackDataStatGroup=ltmNetworkAttackDataStatGroup, ltmMrPmbrDiameterRouterStatTotMessagesInCloned=ltmMrPmbrDiameterRouterStatTotMessagesInCloned, ltmDosApplicationName=ltmDosApplicationName, ltmFwNatStaticDestinationTranslationPoolName=ltmFwNatStaticDestinationTranslationPoolName, ltmFwNatStaticDestinationTranslationPool=ltmFwNatStaticDestinationTranslationPool, ltmTcpProfileGroup=ltmTcpProfileGroup, ltmFwContextStatStagedPacketsAcceptDecisively=ltmFwContextStatStagedPacketsAcceptDecisively, ltmClientSslPassphrase=ltmClientSslPassphrase, ltmHttpProfileStat=ltmHttpProfileStat, ltmTransAddr=ltmTransAddr, ltmStreamProfileEntry=ltmStreamProfileEntry, ltmDnsCacheUseIpv6=ltmDnsCacheUseIpv6, ltmVirtualServClonePoolEntry=ltmVirtualServClonePoolEntry, ltmNodeAddrStatAddrType=ltmNodeAddrStatAddrType, ltmHttpClassStatRamcacheHits=ltmHttpClassStatRamcacheHits, ltmTcpProfile=ltmTcpProfile, ltmServerSslStatTotCompatConns=ltmServerSslStatTotCompatConns, ltmHttpClassStatAudioPrecompressBytes=ltmHttpClassStatAudioPrecompressBytes, ltmClientSslStatReused=ltmClientSslStatReused, ltmDnsCacheStatMsgHits=ltmDnsCacheStatMsgHits, ltmFwAdminIpRuleStatContainerName=ltmFwAdminIpRuleStatContainerName, ltmDosApplicationLatencyBasedEscalationPeriod=ltmDosApplicationLatencyBasedEscalationPeriod, ltmDnsProfileStatRecursionAvailable=ltmDnsProfileStatRecursionAvailable, ltmFwNatDynamicPoolZombieTimeout=ltmFwNatDynamicPoolZombieTimeout, ltmUserStatProfileStatGroup=ltmUserStatProfileStatGroup, ltmFastHttpProfileConfigSource=ltmFastHttpProfileConfigSource, ltmPoolMemberStatReqMrOut=ltmPoolMemberStatReqMrOut, ltmSpdyProfileStat=ltmSpdyProfileStat, ltmNatVlan=ltmNatVlan, ltmHttpProfileStatAudioPostcompressBytes=ltmHttpProfileStatAudioPostcompressBytes, ltmIsessionProfileStatDedupInMissHistBucketLarge=ltmIsessionProfileStatDedupInMissHistBucketLarge, ltmDnsProfileStatTable=ltmDnsProfileStatTable, ltmMrPmbrSipSessionStatRegisterReq=ltmMrPmbrSipSessionStatRegisterReq, ltmVirtualServStatEphemeralBytesOut=ltmVirtualServStatEphemeralBytesOut, ltmPcpProfileStatResetStats=ltmPcpProfileStatResetStats, ltmRouteDomainStatServerSlowKilled=ltmRouteDomainStatServerSlowKilled, ltmLsnPoolFailureStatFailureCause=ltmLsnPoolFailureStatFailureCause, ltmWebAccelerationProfileStatResetStats=ltmWebAccelerationProfileStatResetStats, ltmDosApplication=ltmDosApplication, ltmServerSslEntry=ltmServerSslEntry, ltmPoolDynamicRatioSum=ltmPoolDynamicRatioSum, ltmAuthProfileIdleTimeout=ltmAuthProfileIdleTimeout, ltmServerSslStatName=ltmServerSslStatName, ltmVirtualServStatEntry=ltmVirtualServStatEntry, ltmPoolStatCurrPvaAssistConn=ltmPoolStatCurrPvaAssistConn, ltmTcpProfileStat=ltmTcpProfileStat, ltmSnatTransAddrName=ltmSnatTransAddrName, ltmHttpProfileStatPassthroughWebSockets=ltmHttpProfileStatPassthroughWebSockets, ltmRuleEventEventType=ltmRuleEventEventType, ltmNetworkAttackDataStatStats1h=ltmNetworkAttackDataStatStats1h, ltmFlowEvictionPolicyStatEntry=ltmFlowEvictionPolicyStatEntry, ltmSnatpoolTransAddrTable=ltmSnatpoolTransAddrTable, ltmClientSslStatEcdhEcdsaKeyxchg=ltmClientSslStatEcdhEcdsaKeyxchg, ltmNetworkAttackDataStatDrops1h=ltmNetworkAttackDataStatDrops1h, ltmHttp2ProfileStatSettingsFramesReceived=ltmHttp2ProfileStatSettingsFramesReceived, ltmFwNatStaticDestinationTranslationPoolType=ltmFwNatStaticDestinationTranslationPoolType, ltmRamUriExclGroup=ltmRamUriExclGroup, ltmRateFilterStatDropTailBytes=ltmRateFilterStatDropTailBytes, ltmMrPmbrSipSessionStatBadmsgs=ltmMrPmbrSipSessionStatBadmsgs, ltmVsHttpClassVsName=ltmVsHttpClassVsName, ltmSpdyProfileStatHeadersFramesReceived=ltmSpdyProfileStatHeadersFramesReceived, ltmPcpProfileTable=ltmPcpProfileTable, ltmVirtualServAuthTable=ltmVirtualServAuthTable, ltmIpsecalgProfileName=ltmIpsecalgProfileName, ltmClientSslStatPeercertValid=ltmClientSslStatPeercertValid, ltmClientSslCertKeyChainClientssl=ltmClientSslCertKeyChainClientssl, ltmSpdyProfileGroup=ltmSpdyProfileGroup, ltmPptpProfileStatResetStats=ltmPptpProfileStatResetStats, ltmFwIpintVirtualStat=ltmFwIpintVirtualStat, ltmVAddrStatusAddrType=ltmVAddrStatusAddrType, ltmHttpProfileStatV30Resp=ltmHttpProfileStatV30Resp, ltmFastHttpProfileInsertXforwardedFor=ltmFastHttpProfileInsertXforwardedFor, ltmPoolMemberStatServerTotConns=ltmPoolMemberStatServerTotConns, ltmDiameterrouterProfileGroup=ltmDiameterrouterProfileGroup, ltmVirtualServStatCurrPvaAssistConn=ltmVirtualServStatCurrPvaAssistConn, ltmXmlProfileNamespaceMappings=ltmXmlProfileNamespaceMappings, ltmSiprouter=ltmSiprouter, ltmWebsocketProfileStatCloseFramesClientRecv=ltmWebsocketProfileStatCloseFramesClientRecv, ltmVirtualServPoolTable=ltmVirtualServPoolTable, ltmDiameterrouterProfileConfigSource=ltmDiameterrouterProfileConfigSource, ltmDiametersessionProfilePeerDelayCriticalLimit=ltmDiametersessionProfilePeerDelayCriticalLimit, ltmHttpProfileStatPostcompressBytes=ltmHttpProfileStatPostcompressBytes, ltmHttpClassStatName=ltmHttpClassStatName, ltmDnsServerStatXfrNotifyFailed=ltmDnsServerStatXfrNotifyFailed, ltmConnPoolProfileIdleTimeout=ltmConnPoolProfileIdleTimeout, ltmCompUriExclTable=ltmCompUriExclTable, ltmLsnPoolFailureStatTable=ltmLsnPoolFailureStatTable, ltmVirtualServPoolVirtualServerName=ltmVirtualServPoolVirtualServerName, ltmFwRuleStatEntry=ltmFwRuleStatEntry, ltmLsnPoolLogProfile=ltmLsnPoolLogProfile, ltmPoolMemberStatMsgMrOut=ltmPoolMemberStatMsgMrOut, ltmVirtualServClonePoolGroup=ltmVirtualServClonePoolGroup, ltmRouteDomainStatServerEvictedConns=ltmRouteDomainStatServerEvictedConns, ltmClientSslCertKeyChainChain=ltmClientSslCertKeyChainChain, ltmDiametersessionProfileDynamicRouteLookup=ltmDiametersessionProfileDynamicRouteLookup, ltmTcpProfileName=ltmTcpProfileName, ltmMirrorPortMemberNumber=ltmMirrorPortMemberNumber, ltmDiameterrouterProfileStatVsName=ltmDiameterrouterProfileStatVsName, ltmPcpProfileNumber=ltmPcpProfileNumber, ltmXmlProfileStatName=ltmXmlProfileStatName, ltmMrPmbrDiameterRouterStatTable=ltmMrPmbrDiameterRouterStatTable, ltmClientSslStatSha384DigestOffload=ltmClientSslStatSha384DigestOffload, ltmHttpCompressionProfileStatSgmlPostcompressBytes=ltmHttpCompressionProfileStatSgmlPostcompressBytes, ltmHttpProfileCompressGzipMemlevel=ltmHttpProfileCompressGzipMemlevel, ltmVirtualServClonePoolPoolName=ltmVirtualServClonePoolPoolName, ltmVAddrStatusName=ltmVAddrStatusName, ltmFastHttpProfileStatGroup=ltmFastHttpProfileStatGroup, ltmHttpCompressionProfileStatPostcompressBytes=ltmHttpCompressionProfileStatPostcompressBytes, ltmFwNatDynamicPoolStatLsnEndPointsHighValue=ltmFwNatDynamicPoolStatLsnEndPointsHighValue, ltmFastHttpProfileStatUnbufferedReqs=ltmFastHttpProfileStatUnbufferedReqs, ltmSctpProfileStatRxcookie=ltmSctpProfileStatRxcookie, ltmHttp2ProfileStatHeadersFramesReceived=ltmHttp2ProfileStatHeadersFramesReceived, ltmSipsessionProfileStatMessage=ltmSipsessionProfileStatMessage, ltmTransAddrEntry=ltmTransAddrEntry, ltmVirtualAddrStatResetStats=ltmVirtualAddrStatResetStats, ltmPcpPrefixName=ltmPcpPrefixName, ltmFastL4ProfileStatAccepts=ltmFastL4ProfileStatAccepts, ltmCompUriExclUri=ltmCompUriExclUri, ltmRuleEventStatEventType=ltmRuleEventStatEventType, ltmHttpCompressionProfileStatHtmlPrecompressBytes=ltmHttpCompressionProfileStatHtmlPrecompressBytes, ltmLsnPoolFailureStatName=ltmLsnPoolFailureStatName, ltmDiametersessionProfileProductName=ltmDiametersessionProfileProductName, ltmMrPmbrSipRouterStatTotFailedPassthruConnections=ltmMrPmbrSipRouterStatTotFailedPassthruConnections, ltmRamUriPinUri=ltmRamUriPinUri, ltmMirrorPortMemberConduitName=ltmMirrorPortMemberConduitName, ltmIsessionProfileStatDedupInHitHistBucket1k=ltmIsessionProfileStatDedupInHitHistBucket1k, ltmFtpProfileStatLoginRequests=ltmFtpProfileStatLoginRequests, ltmPoolMemberPoolName=ltmPoolMemberPoolName, ltmFwNatStaticSourceTranslationPoolStatTable=ltmFwNatStaticSourceTranslationPoolStatTable, ltmWebaccCacheUriOverNumber=ltmWebaccCacheUriOverNumber, ltmDiametersessionProfilePersistTimeout=ltmDiametersessionProfilePersistTimeout, ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber=ltmMrPmbrSipRouterStatConcurrentSessionsPerSubscriber, ltmLsnPrefixLsnPoolBackupEntry=ltmLsnPrefixLsnPoolBackupEntry, ltmWebAccelerationProfileUriOver=ltmWebAccelerationProfileUriOver, ltmWebaccCacheUriPinNumber=ltmWebaccCacheUriPinNumber, ltmDosApplicationLatencyIncreaseRate=ltmDosApplicationLatencyIncreaseRate, ltmPoolQueueDepthLimit=ltmPoolQueueDepthLimit, ltmFlowEvictionPolicyStatTable=ltmFlowEvictionPolicyStatTable, ltmHttpProfileCompressPreferredMethod=ltmHttpProfileCompressPreferredMethod, ltmClientSslStatSessCacheCurEntries=ltmClientSslStatSessCacheCurEntries, ltmRuleEvent=ltmRuleEvent, ltmMrPmbrDiameterSessionStatAddrType=ltmMrPmbrDiameterSessionStatAddrType, ltmSipsessionProfileStatPrack=ltmSipsessionProfileStatPrack, ltmAlgLogProfileStartDataElements=ltmAlgLogProfileStartDataElements, ltmHttpClassStatV11Resp=ltmHttpClassStatV11Resp, ltmPoolMbrStatusEntry=ltmPoolMbrStatusEntry, ltmServerSslStatRsaKeySize1024=ltmServerSslStatRsaKeySize1024, ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd=ltmFwNatStaticDestinationTranslationPoolStatSubscrIdNotFd, ltmDnsProfileEntry=ltmDnsProfileEntry, ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout=ltmMrPmbrDiameterSessionStatTotRetransmissionTimeout, ltmLsnPrefixGroup=ltmLsnPrefixGroup, ltmVirtualServProfileProfileName=ltmVirtualServProfileProfileName, ltmRouteDomainStatGroup=ltmRouteDomainStatGroup, ltmDnsProfileStatGtmRewrites=ltmDnsProfileStatGtmRewrites, ltmFwNatDynamicPoolStatTable=ltmFwNatDynamicPoolStatTable, ltmVirtualServStat=ltmVirtualServStat, ltmMrPmbrDiameterSessionStatTotCreditControlAnswers=ltmMrPmbrDiameterSessionStatTotCreditControlAnswers, ltmPptpProfileStatEchoReplies=ltmPptpProfileStatEchoReplies, ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers=ltmMrPmbrDiameterSessionStatTotDisconnectPeerAnswers, ltmDosWhiteIpAddress=ltmDosWhiteIpAddress, ltmDiameterrouterProfileTrafficGroup=ltmDiameterrouterProfileTrafficGroup, ltmServerSslStatNumber=ltmServerSslStatNumber, ltmHttpClassStatSgmlPostcompressBytes=ltmHttpClassStatSgmlPostcompressBytes, ltmBwcPolicyStatPacketsPassed=ltmBwcPolicyStatPacketsPassed, ltmClientSslStatIdeaBulk=ltmClientSslStatIdeaBulk, ltmHttpProxyConnectProfileEntry=ltmHttpProxyConnectProfileEntry, ltmTcpanalyticsProfileCollectCity=ltmTcpanalyticsProfileCollectCity, ltmPersist=ltmPersist, ltmDnsSecurityEntry=ltmDnsSecurityEntry, ltmSiprouterProfileStatTotMessagesMaxRetries=ltmSiprouterProfileStatTotMessagesMaxRetries, ltmPoolMemberStatPvaBytesIn=ltmPoolMemberStatPvaBytesIn, ltmSipsessionProfileStatBenotify=ltmSipsessionProfileStatBenotify, ltmIsessionProfileStatDeflateOutUses=ltmIsessionProfileStatDeflateOutUses, ltmVirtualServRulePriority=ltmVirtualServRulePriority, ltmRuleEventStatAborts=ltmRuleEventStatAborts, ltmDnsCacheStatKeyMisses=ltmDnsCacheStatKeyMisses, ltmFwContextStatContextType=ltmFwContextStatContextType, ltmFastHttpProfileStatResetStats=ltmFastHttpProfileStatResetStats, ltmUserStatProfileConfigSource=ltmUserStatProfileConfigSource, ltmIsessionProfileStatNullInErrors=ltmIsessionProfileStatNullInErrors, ltmV6rd=ltmV6rd, ltmDiametersessionProfileDestRealmRewrite=ltmDiametersessionProfileDestRealmRewrite, ltmDiametersessionProfileStatTotAccountingRequests=ltmDiametersessionProfileStatTotAccountingRequests, ltmGlobals=ltmGlobals, ltmWebsocketProfile=ltmWebsocketProfile, ltmHttpProfileStatV11Reqs=ltmHttpProfileStatV11Reqs, ltmLsnLogProfileErrorsAction=ltmLsnLogProfileErrorsAction, ltmDnsProfileDnsLastAction=ltmDnsProfileDnsLastAction, ltmHttpClassHeadName=ltmHttpClassHeadName, ltmClientSslStatMd5DigestOffload=ltmClientSslStatMd5DigestOffload, ltmPcpPrefixProfilePcpName=ltmPcpPrefixProfilePcpName, ltmFastL4ProfileStatAcceptfails=ltmFastL4ProfileStatAcceptfails, ltmDnsCacheForwardZoneNameServerNumber=ltmDnsCacheForwardZoneNameServerNumber, ltmDiameterrouterProfileStatCurOutgoingConnections=ltmDiameterrouterProfileStatCurOutgoingConnections, ltmFwNatStaticSourceTranslationPoolGroup=ltmFwNatStaticSourceTranslationPoolGroup, ltmLsnPoolStatTotalZombiePortBlockConnsKilled=ltmLsnPoolStatTotalZombiePortBlockConnsKilled, ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers=ltmMrPmbrDiameterRouterStatTotDroppedLateAnswers, ltmMrPmbrSipSessionStatMessage=ltmMrPmbrSipSessionStatMessage, ltmNodeAddrStatusEnabledState=ltmNodeAddrStatusEnabledState, ltmDnsProfileDns64PrefixType=ltmDnsProfileDns64PrefixType, ltmIsessionProfileStatBzip2InUses=ltmIsessionProfileStatBzip2InUses, ltmWebAccelerationProfileStatCacheCount=ltmWebAccelerationProfileStatCacheCount, ltmVirtualServVlanVsName=ltmVirtualServVlanVsName, ltmIsessionProfileCompression=ltmIsessionProfileCompression, ltmDnsProfileStatFastDnsQueries=ltmDnsProfileStatFastDnsQueries, ltmOcspStaplingParametersSignHash=ltmOcspStaplingParametersSignHash, ltmMrPmbrSipRouterStatTotIncomingConnections=ltmMrPmbrSipRouterStatTotIncomingConnections, ltmMrPmbrDiameterSessionStatProfileName=ltmMrPmbrDiameterSessionStatProfileName, ltmIsessionProfile=ltmIsessionProfile)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmIsessionProfileStatDedupOutMissHistBucket16k=ltmIsessionProfileStatDedupOutMissHistBucket16k, ltmClientSslCert=ltmClientSslCert, ltmMrPmbrDiameterRouterStatEntry=ltmMrPmbrDiameterRouterStatEntry, ltmClientSslStatSha256DigestOffload=ltmClientSslStatSha256DigestOffload, ltmPoolMonitorRule=ltmPoolMonitorRule, ltmSnatPoolStatServerBytesOut=ltmSnatPoolStatServerBytesOut, ltmLsnPoolTranslationPortRangeHigh=ltmLsnPoolTranslationPortRangeHigh, ltmFastL4ProfileStatRxbadunreach=ltmFastL4ProfileStatRxbadunreach, ltmWebAccelerationProfileDefaultName=ltmWebAccelerationProfileDefaultName, ltmFtpProfileStatActiveRequests=ltmFtpProfileStatActiveRequests, ltmSpdyProfileInsertHeaderName=ltmSpdyProfileInsertHeaderName, ltmIiopProfileStatNumResponses=ltmIiopProfileStatNumResponses, ltmDnsCacheRandomizeQueryNameCase=ltmDnsCacheRandomizeQueryNameCase, ltmPoolMemberMonitorStatus=ltmPoolMemberMonitorStatus, ltmWebsocketProfileGroup=ltmWebsocketProfileGroup, ltmHttpProfileTruncatedRedirects=ltmHttpProfileTruncatedRedirects, ltmPoolMemberStatServerCurConns=ltmPoolMemberStatServerCurConns, ltmSipsessionProfileStatServerInternalError=ltmSipsessionProfileStatServerInternalError, ltmMrPmbrSipRouterStatTotMessagesInCloned=ltmMrPmbrSipRouterStatTotMessagesInCloned, ltmHttpcompUriExclIndex=ltmHttpcompUriExclIndex, ltmIpsecalgProfileIdleTimeout=ltmIpsecalgProfileIdleTimeout, ltmHttpProfileStatGetReqs=ltmHttpProfileStatGetReqs, ltmHttpCompressionProfileStatHtmlPostcompressBytes=ltmHttpCompressionProfileStatHtmlPostcompressBytes, ltmMrPmbrDiameterRouterStatTotMessagesInRetry=ltmMrPmbrDiameterRouterStatTotMessagesInRetry, ltmLsnPoolPersistencePrefixLengthIpv4=ltmLsnPoolPersistencePrefixLengthIpv4, ltmFwNatDynamicPoolNumber=ltmFwNatDynamicPoolNumber, ltmDnsServerStatName=ltmDnsServerStatName, ltmServerSslStatDheDssKeyxchg=ltmServerSslStatDheDssKeyxchg, ltmSctpProfileSackTimeout=ltmSctpProfileSackTimeout, ltmClientSslStatRecordSize13k=ltmClientSslStatRecordSize13k, ltmClientSslStatPeercertNone=ltmClientSslStatPeercertNone, ltmMrPmbrSipSessionStatTrName=ltmMrPmbrSipSessionStatTrName, ltmFwContextStatStagedPacketsDefaultDrop=ltmFwContextStatStagedPacketsDefaultDrop, ltmSnatStatClientBytesIn=ltmSnatStatClientBytesIn, ltmFwNatDynamicPoolPcpName=ltmFwNatDynamicPoolPcpName, ltmUdpProfileStatOpen=ltmUdpProfileStatOpen, ltmSplitsessionclientProfileStatConnPeerReset=ltmSplitsessionclientProfileStatConnPeerReset, ltmIpsecalgProfileStat=ltmIpsecalgProfileStat, ltmDosApplicationTpsBasedIpMaximumTps=ltmDosApplicationTpsBasedIpMaximumTps, ltmServerSslProfileC3dCertExtensionCustomOidsOid=ltmServerSslProfileC3dCertExtensionCustomOidsOid, ltmFwIpintRouteDomainStatContextName=ltmFwIpintRouteDomainStatContextName, ltmFtp=ltmFtp, ltmDosWhiteIpParentName=ltmDosWhiteIpParentName, ltmFwNatDynamicPoolTrafficGroup=ltmFwNatDynamicPoolTrafficGroup, ltmTcpProfileMptcpCsumVerify=ltmTcpProfileMptcpCsumVerify, ltmSpdyProfileStatGoawayFramesReceived=ltmSpdyProfileStatGoawayFramesReceived, ltmPcpPrefixProfilePcpGroup=ltmPcpPrefixProfilePcpGroup, ltmWebsocket=ltmWebsocket, ltmStreamProfileTable=ltmStreamProfileTable, ltmIsessionProfileStatDedupOutMissHistBucket128k=ltmIsessionProfileStatDedupOutMissHistBucket128k, ltmPptpProfileStatOutgoingCallRequests=ltmPptpProfileStatOutgoingCallRequests, ltmSplitsessionserverProfileStat=ltmSplitsessionserverProfileStat, ltmHttpCompressionProfileStatOtherPostcompressBytes=ltmHttpCompressionProfileStatOtherPostcompressBytes, ltmDosAttackDataStatDrops=ltmDosAttackDataStatDrops, ltmTcpProfileMptcpFastjoin=ltmTcpProfileMptcpFastjoin, ltmClientSslStatEcdheRsaKeyxchg=ltmClientSslStatEcdheRsaKeyxchg, ltmDiameterrouterProfileStatTotPayloadBytesIn=ltmDiameterrouterProfileStatTotPayloadBytesIn, ltmTftpProfileName=ltmTftpProfileName, ltmUserStatProfileDefaultName=ltmUserStatProfileDefaultName, ltmPptpProfileStatActiveCalls=ltmPptpProfileStatActiveCalls, ltmVirtualServStatEphemeralTotConns=ltmVirtualServStatEphemeralTotConns, ltmServerSslHandshakeTimeout=ltmServerSslHandshakeTimeout, ltmDosApplicationTpsBasedMaximumPreventionDuration=ltmDosApplicationTpsBasedMaximumPreventionDuration, ltmServerSslStatSha224Digest=ltmServerSslStatSha224Digest, ltmXmlProfileStatNumDocumentsWithThreeMatches=ltmXmlProfileStatNumDocumentsWithThreeMatches, ltmTcpanalyticsProfileCollectRemoteHostIp=ltmTcpanalyticsProfileCollectRemoteHostIp, ltmDosApplicationHeavyUrlExclUrl=ltmDosApplicationHeavyUrlExclUrl, ltmClientSslMaxRenegotiationsPerMin=ltmClientSslMaxRenegotiationsPerMin, ltmFastL4ProfileStatRxbadsum=ltmFastL4ProfileStatRxbadsum, ltmKnownMethodsStr=ltmKnownMethodsStr, ltmHttpcompContTypeExclTable=ltmHttpcompContTypeExclTable, ltmVirtualServStatMsgMrOut=ltmVirtualServStatMsgMrOut, ltmPptpProfileStatGroup=ltmPptpProfileStatGroup, ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail=ltmMrPmbrDiameterSessionStatTotRetransReturnedUnavail, ltmUdpProfileSndbuf=ltmUdpProfileSndbuf, ltmPoolMemberNewSessionEnable=ltmPoolMemberNewSessionEnable, ltmWebsocketProfileStatName=ltmWebsocketProfileStatName, ltmDnsCacheStatRpzRewrites=ltmDnsCacheStatRpzRewrites, ltmAlgLogProfileStartControlElementsTable=ltmAlgLogProfileStartControlElementsTable, ltmLsnPoolStatPcpErrorsOther=ltmLsnPoolStatPcpErrorsOther, ltmHttpProfileRamUriExcl=ltmHttpProfileRamUriExcl, ltmFtpProfileStatFtpsIntercepts=ltmFtpProfileStatFtpsIntercepts, ltmWebAccelerationProfileConfigSource=ltmWebAccelerationProfileConfigSource, ltmRuleEventStatGroup=ltmRuleEventStatGroup, ltmFastL4ProfileMssOverride=ltmFastL4ProfileMssOverride, ltmServerSslBypassHsAlertEnabled=ltmServerSslBypassHsAlertEnabled, ltmSpdyProfileStatGoawayFramesSent=ltmSpdyProfileStatGoawayFramesSent, ltmDnsCacheUseUdp=ltmDnsCacheUseUdp, ltmSipsessionProfileStatNotFound404Sent=ltmSipsessionProfileStatNotFound404Sent, ltmDnsServerStatResetStats=ltmDnsServerStatResetStats, ltmPoolMemberGroup=ltmPoolMemberGroup, ltmClientSslStatOcspStaplingOcspConnFailures=ltmClientSslStatOcspStaplingOcspConnFailures, ltmServerSslSessionMirroring=ltmServerSslSessionMirroring, ltmMrPmbrSipRouterStatTotMessagesInternalError=ltmMrPmbrSipRouterStatTotMessagesInternalError, ltmServerSslStatTlsv11=ltmServerSslStatTlsv11, ltmSnatVlanEntry=ltmSnatVlanEntry, ltmSnatType=ltmSnatType, ltmHttpCompressionProfileStatVideoPrecompressBytes=ltmHttpCompressionProfileStatVideoPrecompressBytes, ltmMrPmbrSipSessionStatGroup=ltmMrPmbrSipSessionStatGroup, ltmPoolStatTotRequests=ltmPoolStatTotRequests, ltmVirtualAddrStatPvaBytesIn=ltmVirtualAddrStatPvaBytesIn, ltmSplitsessionclientProfile=ltmSplitsessionclientProfile, ltmSctpProfileConfigSource=ltmSctpProfileConfigSource, ltmDnsCacheAnswerDefaultZones=ltmDnsCacheAnswerDefaultZones, ltmDosAttackDataStatStats1m=ltmDosAttackDataStatStats1m, ltmSiprouterProfileStatTotPassthruConnections=ltmSiprouterProfileStatTotPassthruConnections, ltmRateFilterStatEntry=ltmRateFilterStatEntry, ltmHttpProfileHstsMaximumAge=ltmHttpProfileHstsMaximumAge, ltmFastL4Profile=ltmFastL4Profile, ltmPersistProfileSipInfo=ltmPersistProfileSipInfo, ltmWebAccelerationProfileStatInterStripeHitBytes=ltmWebAccelerationProfileStatInterStripeHitBytes, ltmLsnPoolStatTranslationRequestFailures=ltmLsnPoolStatTranslationRequestFailures, ltmDiametersessionProfileMaxWatchdogFailures=ltmDiametersessionProfileMaxWatchdogFailures, ltmServerSslProfileC3dCertExtensionCustomOidsIndex=ltmServerSslProfileC3dCertExtensionCustomOidsIndex, ltmClientSslMaxActiveHandshake=ltmClientSslMaxActiveHandshake, ltmClientSslStatSha256Digest=ltmClientSslStatSha256Digest, ltmFastL4ProfileDefaultName=ltmFastL4ProfileDefaultName, ltmVirtualServGtmScore=ltmVirtualServGtmScore, ltmTcpProfilePktLossIgnoreRate=ltmTcpProfilePktLossIgnoreRate, ltmRst=ltmRst, ltmSpdyProfileStatFlowsMax=ltmSpdyProfileStatFlowsMax, ltmClientSslDropUnknownOcspStatus=ltmClientSslDropUnknownOcspStatus, ltmWebsocketProfileTable=ltmWebsocketProfileTable, ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest=ltmFwNatDynamicPoolStatPcpErrorsInvalidRequest, ltmHttpProfileStatPlainPostcompressBytes=ltmHttpProfileStatPlainPostcompressBytes, ltmFastL4ProfileClientTimeout=ltmFastL4ProfileClientTimeout, ltmPoolStatPvaPktsOut=ltmPoolStatPvaPktsOut, ltmSnatListedEnabledVlans=ltmSnatListedEnabledVlans, ltmIsessionProfileStatDedupInUses=ltmIsessionProfileStatDedupInUses, ltmDnsCacheStatMsgMisses=ltmDnsCacheStatMsgMisses, ltmDnsQueryFilter=ltmDnsQueryFilter, ltmHttpProfileStatNullCompressBytes=ltmHttpProfileStatNullCompressBytes, ltmVirtualServCmpEnabled=ltmVirtualServCmpEnabled, ltmDnsSecurityTable=ltmDnsSecurityTable, ltmFwPolicyRuleStatPolicyName=ltmFwPolicyRuleStatPolicyName, ltmTcpProfileResetOnTimeout=ltmTcpProfileResetOnTimeout, ltmTcpProfileHighPerfTcpExt=ltmTcpProfileHighPerfTcpExt, ltmNodeAddrStatusNumber=ltmNodeAddrStatusNumber, ltmFwPolicyRuleStatLastHitTime=ltmFwPolicyRuleStatLastHitTime, ltmDiameterrouterProfileStatTotIncomingStreams=ltmDiameterrouterProfileStatTotIncomingStreams, ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers=ltmMrPmbrDiameterSessionStatTotRejectedUnconfiguredPeers, ltmRateFilterStatDropTotBytes=ltmRateFilterStatDropTotBytes, ltmClientSslStatFullyHwAcceleratedConns=ltmClientSslStatFullyHwAcceleratedConns, ltmXmlProfileXpathQueriesIndex=ltmXmlProfileXpathQueriesIndex, ltmDiameterrouterProfileStatTotMessgesIn=ltmDiameterrouterProfileStatTotMessgesIn, ltmTcpProfileMptcpJoinmax=ltmTcpProfileMptcpJoinmax, ltmRateFilterStatBurstBytes=ltmRateFilterStatBurstBytes, ltmFastHttpProfileStatClientRxBad=ltmFastHttpProfileStatClientRxBad, ltmClientSslFwdpBypassHnBList=ltmClientSslFwdpBypassHnBList, ltmFwNATs=ltmFwNATs, ltmSiprouterProfileStatGroup=ltmSiprouterProfileStatGroup, ltmCompUriExclName=ltmCompUriExclName, ltmEncCookiesStr=ltmEncCookiesStr, ltmXmlProfileStatNumMalformedDocuments=ltmXmlProfileStatNumMalformedDocuments, ltmNodeAddrStatPvaCurConns=ltmNodeAddrStatPvaCurConns, ltmDnsCacheUseIpv4=ltmDnsCacheUseIpv4, ltmRateFilterStatDroppedBytes=ltmRateFilterStatDroppedBytes, ltmIsessionProfileEndpointPool=ltmIsessionProfileEndpointPool, ltmWebsocketProfileStatCloseRsnProcErrClientRecv=ltmWebsocketProfileStatCloseRsnProcErrClientRecv, ltmOcspStaplingParametersClockSkew=ltmOcspStaplingParametersClockSkew, ltmConnPoolProfileStatReuses=ltmConnPoolProfileStatReuses, ltmClientSslFwdpCaKey=ltmClientSslFwdpCaKey, ltmSctpProfileGroup=ltmSctpProfileGroup, ltmPersistProfileMsrdpNoSessionDir=ltmPersistProfileMsrdpNoSessionDir, ltmServerSslFwdpEnabled=ltmServerSslFwdpEnabled, ltmDnsProfileStatFastDnsResponses=ltmDnsProfileStatFastDnsResponses, ltmPptpProfileStatSetLinkInfo=ltmPptpProfileStatSetLinkInfo, ltmNatStatTable=ltmNatStatTable, ltmHttpProfileStatOtherPostcompressBytes=ltmHttpProfileStatOtherPostcompressBytes, ltmDosProfileGroup=ltmDosProfileGroup, ltmTftpProfileIdleTimeout=ltmTftpProfileIdleTimeout, ltmServerSslStatTotalHandshakesSoftware=ltmServerSslStatTotalHandshakesSoftware, ltmNodeAddrStatEntry=ltmNodeAddrStatEntry, ltmFwIpintGlobalStatGroup=ltmFwIpintGlobalStatGroup, ltmSnatPoolStatServerMaxConns=ltmSnatPoolStatServerMaxConns, ltmPoolStatPvaBytesOut=ltmPoolStatPvaBytesOut, ltmSctpProfileCookieExpiration=ltmSctpProfileCookieExpiration, ltmNodeAddrStatusAddrType=ltmNodeAddrStatusAddrType, ltmKnownMethodsGroup=ltmKnownMethodsGroup, ltmDosApplicationHeavyUrlExclName=ltmDosApplicationHeavyUrlExclName, ltmPcpPrefixAddr=ltmPcpPrefixAddr, ltmMrPmbrDiameterSessionStatTotRetransmissionIrule=ltmMrPmbrDiameterSessionStatTotRetransmissionIrule, ltmRuleEventStatFailures=ltmRuleEventStatFailures, ltmPoolMemberStatConnqAgeEma=ltmPoolMemberStatConnqAgeEma, ltmSipsessionProfileStatServerFailures=ltmSipsessionProfileStatServerFailures, ltmMrPmbrSipSessionStatOther=ltmMrPmbrSipSessionStatOther, ltmNodeAddrStatusGroup=ltmNodeAddrStatusGroup, ltmSipProfileStatNumber=ltmSipProfileStatNumber, ltmNodeAddrMonitorRule=ltmNodeAddrMonitorRule, ltmHttpcompContTypeInclName=ltmHttpcompContTypeInclName, ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy=ltmMrPmbrDiameterSessionStatTotRetransReturnedBusy, ltmServerSslStatMaxNativeConns=ltmServerSslStatMaxNativeConns, ltmPoolMemberCnt=ltmPoolMemberCnt, ltmServerSslStatDhGroupX25519Offload=ltmServerSslStatDhGroupX25519Offload, ltmDnsProfileStatRcodeNxdomain=ltmDnsProfileStatRcodeNxdomain, ltmSplitsessionclientProfileConfigSource=ltmSplitsessionclientProfileConfigSource, ltmDiameterrouterProfileStatTotPassthruConnections=ltmDiameterrouterProfileStatTotPassthruConnections, ltmFwRuleStatGroup=ltmFwRuleStatGroup, ltmLsnPoolStatActiveClientsReachedLimit=ltmLsnPoolStatActiveClientsReachedLimit, ltmVirtualServWildmaskType=ltmVirtualServWildmaskType, ltmIsessionProfileStatIncomingConnsActiveMax=ltmIsessionProfileStatIncomingConnsActiveMax, ltmSctp=ltmSctp, ltmDiametersessionProfileStatTotRetransmissionErrorCode=ltmDiametersessionProfileStatTotRetransmissionErrorCode, ltmDnsProfileStatHints=ltmDnsProfileStatHints, ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests=ltmMrPmbrDiameterSessionStatTotUserAuthorizationRequests, ltmAttrPersistDestAddrMaxCount=ltmAttrPersistDestAddrMaxCount, ltmFtpProfileStatGroup=ltmFtpProfileStatGroup, ltmHttpClassStatPrecompressBytes=ltmHttpClassStatPrecompressBytes, ltmClientSslStatSha512Digest=ltmClientSslStatSha512Digest, ltmWebaccCacheUriInclNumber=ltmWebaccCacheUriInclNumber, ltmNatGroup=ltmNatGroup, ltmClientSslFwdpBypassEnabled=ltmClientSslFwdpBypassEnabled, ltmAlgLogProfileStartControlElementsIndex=ltmAlgLogProfileStartControlElementsIndex, ltmRateFilterGroup=ltmRateFilterGroup, ltmPoolStatPvaTotConns=ltmPoolStatPvaTotConns, ltmSpdyProfileNumber=ltmSpdyProfileNumber, ltmTcpProfileProxyBufferHigh=ltmTcpProfileProxyBufferHigh, ltmDiameterrouterProfileStatTotMessagesRouted=ltmDiameterrouterProfileStatTotMessagesRouted, ltmIsessionProfileStatDedupInHitHistBucket64k=ltmIsessionProfileStatDedupInHitHistBucket64k, ltmRtspProfileLogPublisher=ltmRtspProfileLogPublisher, ltmAuthProfileStatName=ltmAuthProfileStatName, ltmLsnPool=ltmLsnPool, ltmPoolStatusTable=ltmPoolStatusTable, ltmIsessionProfileStatNumber=ltmIsessionProfileStatNumber, ltmDnsProfileStatHwCacheLookups=ltmDnsProfileStatHwCacheLookups, ltmDiametersessionProfileStatTotResultCodeSent3xxx=ltmDiametersessionProfileStatTotResultCodeSent3xxx, ltmHttpProfileStatRamcacheCount=ltmHttpProfileStatRamcacheCount, ltmSplitsessionclientProfileStatConnPeerActive=ltmSplitsessionclientProfileStatConnPeerActive, ltmClientSslNumber=ltmClientSslNumber, ltmDnsProfileCacheEnabled=ltmDnsProfileCacheEnabled, ltmDnsProfileStatTruncated=ltmDnsProfileStatTruncated, ltmKnownMethodsIndex=ltmKnownMethodsIndex, ltmUdpProfileStatRxunreach=ltmUdpProfileStatRxunreach, ltmDnsCacheStatUdpPktsIn=ltmDnsCacheStatUdpPktsIn, ltmFwContextStatStagedPacketsDefaultAccept=ltmFwContextStatStagedPacketsDefaultAccept, ltmMrPmbrDiameterRouterStat=ltmMrPmbrDiameterRouterStat, ltmLsnPrefixLsnPoolPrefixAddressType=ltmLsnPrefixLsnPoolPrefixAddressType, ltmRtspProfileDefaultName=ltmRtspProfileDefaultName, ltmMrPmbrDiameterSessionStatTotOtherRequests=ltmMrPmbrDiameterSessionStatTotOtherRequests, ltmWebAccelerationProfileGroup=ltmWebAccelerationProfileGroup, ltmNodeAddrDisabledParentType=ltmNodeAddrDisabledParentType, ltmServerSslStatExtendedMasterSecrets=ltmServerSslStatExtendedMasterSecrets, ltmHttpProfileStatV9Resp=ltmHttpProfileStatV9Resp, ltmServerSslStatDesBulk=ltmServerSslStatDesBulk, ltmVirtualAddrSfFlags=ltmVirtualAddrSfFlags, ltmDnsCacheForwardZoneNameServerAddrType=ltmDnsCacheForwardZoneNameServerAddrType, ltmSplitsessionserverProfileStatResetStats=ltmSplitsessionserverProfileStatResetStats, ltmSipsessionProfileStatInfo=ltmSipsessionProfileStatInfo, ltmDiametersessionProfileRetransmissionAction=ltmDiametersessionProfileRetransmissionAction, ltmHttpClassUriGroup=ltmHttpClassUriGroup, ltmHttpClassStatRamcacheMissBytesAll=ltmHttpClassStatRamcacheMissBytesAll, ltmDosProfile=ltmDosProfile, ltmRateFilterStatTable=ltmRateFilterStatTable, ltmDnsCacheStatUdpMaxConns=ltmDnsCacheStatUdpMaxConns)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDosApplicationLatencyBasedSiteClientSideDefense=ltmDosApplicationLatencyBasedSiteClientSideDefense, ltmFlowEvictionPolicyStatGroup=ltmFlowEvictionPolicyStatGroup, ltmDnsSecurity=ltmDnsSecurity, ltmSpdyProfileStatNoopFramesSent=ltmSpdyProfileStatNoopFramesSent, ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures=ltmFwNatDynamicPoolStatLsnPersistenceMappingFailures, ltmDnsCacheStatUdpPktsOut=ltmDnsCacheStatUdpPktsOut, ltmTftp=ltmTftp, ltmHttpProfileStatGroup=ltmHttpProfileStatGroup, ltmAlgLogProfileStartDataElementsElements=ltmAlgLogProfileStartDataElementsElements, ltmHttpProxyConnectProfileStatTable=ltmHttpProxyConnectProfileStatTable, ltmServerSslStatConnectionMirrorHaFailure=ltmServerSslStatConnectionMirrorHaFailure, ltmClientSslStatEcdhRsaKeyxchg=ltmClientSslStatEcdhRsaKeyxchg, ltmDnsProfileConfigSource=ltmDnsProfileConfigSource, ltmMrPmbrDiameterRouterStatPool=ltmMrPmbrDiameterRouterStatPool, ltmDnsProfileStatDnsConfiguredObjects=ltmDnsProfileStatDnsConfiguredObjects, ltmRateFilter=ltmRateFilter, ltmIpsecalgProfileStatResetStats=ltmIpsecalgProfileStatResetStats, ltmClientSslStatBypassesHandshakeAlert=ltmClientSslStatBypassesHandshakeAlert, ltmSnatPoolStatTable=ltmSnatPoolStatTable, ltmFastL4ProfileStatName=ltmFastL4ProfileStatName, ltmWebsocketProfileStatPingFramesClientRecv=ltmWebsocketProfileStatPingFramesClientRecv, ltmDnsCacheStatNameserverHits=ltmDnsCacheStatNameserverHits, ltmFwContextStatGroup=ltmFwContextStatGroup, ltmWebsocketProfileNumber=ltmWebsocketProfileNumber, ltmHttpProfileRamcacheSize=ltmHttpProfileRamcacheSize, ltmFwIpintGlobalStat=ltmFwIpintGlobalStat, ltmSctpProfileName=ltmSctpProfileName, ltmServerSslPassphrase=ltmServerSslPassphrase, ltmWebsocketProfileStatCloseRsnNormalServerRecv=ltmWebsocketProfileStatCloseRsnNormalServerRecv, ltmNodeAddrStatPvaTotConns=ltmNodeAddrStatPvaTotConns, ltmDnsSecurityName=ltmDnsSecurityName, ltmLsnPoolVlanTable=ltmLsnPoolVlanTable, ltmClientSslStatRsaKeySize2048=ltmClientSslStatRsaKeySize2048, ltmWebAccelerationProfileCacheMaxEntries=ltmWebAccelerationProfileCacheMaxEntries, ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers=ltmMrPmbrDiameterSessionStatTotDeviceWatchdogAnswers, ltmDiametersessionProfileDefaultName=ltmDiametersessionProfileDefaultName, ltmClientSslStatDtlsTxPushbacks=ltmClientSslStatDtlsTxPushbacks, ltmDiametersessionProfileStatTable=ltmDiametersessionProfileStatTable, ltmMrPmbrDiameterSessionStatAvePeerDelay=ltmMrPmbrDiameterSessionStatAvePeerDelay, ltmMrPmbrSipSessionStatCancel=ltmMrPmbrSipSessionStatCancel, ltmServerSslStatInsecureHandshakeAccepts=ltmServerSslStatInsecureHandshakeAccepts, ltmHttpClassHeadNumber=ltmHttpClassHeadNumber, ltmLsnPrefixLsnPoolEntry=ltmLsnPrefixLsnPoolEntry, ltmVirtualServStatHwSyncookieAccepts=ltmVirtualServStatHwSyncookieAccepts, ltmDnsSecurityStatTable=ltmDnsSecurityStatTable, ltmIsessionProfileStatDedupOutHitHistBucket4k=ltmIsessionProfileStatDedupOutHitHistBucket4k, ltmHttpCompressionProfileGzipMemlevel=ltmHttpCompressionProfileGzipMemlevel, ltmNatUnitId=ltmNatUnitId, ltmDosApplicationTpsBasedMode=ltmDosApplicationTpsBasedMode, ltmVirtualServStatReqMrIn=ltmVirtualServStatReqMrIn, ltmClientSslStatInsecureRenegotiationRejects=ltmClientSslStatInsecureRenegotiationRejects, ltmSipsessionProfileStatResetStats=ltmSipsessionProfileStatResetStats, ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped=ltmMrPmbrDiameterRouterStatTotMessagesStandbyDropped, ltmHttpProfileServerAgentName=ltmHttpProfileServerAgentName, ltmVirtualAddrConnLimit=ltmVirtualAddrConnLimit, ltmHttpcompContTypeExclGroup=ltmHttpcompContTypeExclGroup, ltmServerSslStatPeercertNone=ltmServerSslStatPeercertNone, ltmFwNatStaticDestinationTranslationPoolStatTable=ltmFwNatStaticDestinationTranslationPoolStatTable, ltmMrPmbrSipSessionStatServerFailures=ltmMrPmbrSipSessionStatServerFailures, ltmServerSslStatHandshakeFailures=ltmServerSslStatHandshakeFailures, ltmSnatPoolStatServerPktsIn=ltmSnatPoolStatServerPktsIn, ltmSpdyProfileStatV2StreamsCreated=ltmSpdyProfileStatV2StreamsCreated, ltmIsessionProfileDeduplication=ltmIsessionProfileDeduplication, ltmServerSslStatSessCacheLookups=ltmServerSslStatSessCacheLookups, ltmPoolDisallowNat=ltmPoolDisallowNat, ltmUdpProfileIpTosToClient=ltmUdpProfileIpTosToClient, ltmWebaccCacheUriOverUri=ltmWebaccCacheUriOverUri, ltmLsnPoolClientConnectionLimit=ltmLsnPoolClientConnectionLimit, ltmSpdyProfileTable=ltmSpdyProfileTable, ltmFlowEvictionPolicyStatPolicyName=ltmFlowEvictionPolicyStatPolicyName, ltmDiametersessionProfileStatNumber=ltmDiametersessionProfileStatNumber, ltmHttp2ProfileFrameSize=ltmHttp2ProfileFrameSize, ltmFwPolicyRuleStatOverlapType=ltmFwPolicyRuleStatOverlapType, ltmHttpProfileStatSgmlPostcompressBytes=ltmHttpProfileStatSgmlPostcompressBytes, ltmTcpProfileCloseWaitTimeout=ltmTcpProfileCloseWaitTimeout, ltmSnatpoolTransAddr=ltmSnatpoolTransAddr, ltmVirtualServActualPvaAccel=ltmVirtualServActualPvaAccel, ltmFtpProfileStatResetStats=ltmFtpProfileStatResetStats, ltmHttpProfileStatRamcacheHits=ltmHttpProfileStatRamcacheHits, ltmSnatStatClientMaxConns=ltmSnatStatClientMaxConns, ltmRule=ltmRule, ltmHttpProfileRamUriIncl=ltmHttpProfileRamUriIncl, ltmPcpProfileThirdPartyOption=ltmPcpProfileThirdPartyOption, ltmEncCookiesGroup=ltmEncCookiesGroup, ltmDiametersessionProfileTable=ltmDiametersessionProfileTable, ltmTcpProfileStatCloseWait=ltmTcpProfileStatCloseWait, ltmLsnLogProfileEndOutboundAction=ltmLsnLogProfileEndOutboundAction, ltmUdp=ltmUdp, ltmDnsCacheForwardZoneNameServerEntry=ltmDnsCacheForwardZoneNameServerEntry, ltmMrPmbrDiameterRouterStatTotMessagesOut=ltmMrPmbrDiameterRouterStatTotMessagesOut, ltmDiameterrouterProfileIruleScopeMessage=ltmDiameterrouterProfileIruleScopeMessage, ltmAlgLogProfileEndControlElementsGroup=ltmAlgLogProfileEndControlElementsGroup, ltmClientSslCentityOcspObjName=ltmClientSslCentityOcspObjName, ltmClientSslStatGroup=ltmClientSslStatGroup, ltmVAddrStatusTable=ltmVAddrStatusTable, ltmSpdyProfileInsertHeader=ltmSpdyProfileInsertHeader, ltmUdpProfileStatGroup=ltmUdpProfileStatGroup, ltmTcpProfileZeroWindowTimeout=ltmTcpProfileZeroWindowTimeout, ltmClientSslStatBadRecords=ltmClientSslStatBadRecords, ltmHttpClassEntry=ltmHttpClassEntry, ltmStream=ltmStream, ltmSnatPoolStatServerTotConns=ltmSnatPoolStatServerTotConns, ltmDnsCacheIgnoreCd=ltmDnsCacheIgnoreCd, ltmIpsecalg=ltmIpsecalg, ltmSctpProfileRxChunks=ltmSctpProfileRxChunks, ltmMrPmbrDiameterSessionStatAveRequestLatency=ltmMrPmbrDiameterSessionStatAveRequestLatency, ltmDnsCacheStatSecInsecure=ltmDnsCacheStatSecInsecure, ltmNetworkAttackDataStatNumber=ltmNetworkAttackDataStatNumber, ltmFallbackStatusCode=ltmFallbackStatusCode, ltmVirtualServClonePoolType=ltmVirtualServClonePoolType, ltmDnsProfileStat=ltmDnsProfileStat, ltmNodeAddrStatServerPktsOut=ltmNodeAddrStatServerPktsOut, ltmHttpProfilePassthroughExcessServerHeaders=ltmHttpProfilePassthroughExcessServerHeaders, ltmPoolMemberAddr=ltmPoolMemberAddr, ltmFastHttpProfileStatNumberReqs=ltmFastHttpProfileStatNumberReqs, ltmPoolMemberStatPvaBytesOut=ltmPoolMemberStatPvaBytesOut, ltmServerSslProfile=ltmServerSslProfile, ltmBwcPolicyStatTimeDataCollected=ltmBwcPolicyStatTimeDataCollected, ltmNatStat=ltmNatStat, ltmDnsSecurityStatNsDrops=ltmDnsSecurityStatNsDrops, ltmPoolMemberStatServerPktsOut=ltmPoolMemberStatServerPktsOut, ltmDosProfileTable=ltmDosProfileTable, ltmBwcPolicyStatActivePolicies=ltmBwcPolicyStatActivePolicies, ltmFastHttpProfileStatConnpoolMaxSize=ltmFastHttpProfileStatConnpoolMaxSize, ltmSplitsessionclientProfileStat=ltmSplitsessionclientProfileStat, ltmServerSslStatEcdheEcdsaKeyxchg=ltmServerSslStatEcdheEcdsaKeyxchg, ltmPcpPrefixAddrType=ltmPcpPrefixAddrType, ltmHttp2ProfileStatHttpRequestBytes=ltmHttp2ProfileStatHttpRequestBytes, ltmDnsProfileStatGroup=ltmDnsProfileStatGroup, ltmHttpClassStatXmlPostcompressBytes=ltmHttpClassStatXmlPostcompressBytes, ltmServerSslStatTable=ltmServerSslStatTable, ltmTcpProfileSlowStart=ltmTcpProfileSlowStart, ltmDiameterrouterProfileStatTotMessagesQueueFull=ltmDiameterrouterProfileStatTotMessagesQueueFull, ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx=ltmMrPmbrDiameterSessionStatTotResultCodeRcvd3xxx, ltmClientSslStatHandshakeFailures=ltmClientSslStatHandshakeFailures, ltmTftpProfileStatWriteRequests=ltmTftpProfileStatWriteRequests, ltmIsession=ltmIsession, ltmVirtualServSfFlags=ltmVirtualServSfFlags, ltmSiprouterProfileStatTotOutgoingStreams=ltmSiprouterProfileStatTotOutgoingStreams, ltmHttpProfileStatV10Resp=ltmHttpProfileStatV10Resp, ltmHttpProfileStatImagePrecompressBytes=ltmHttpProfileStatImagePrecompressBytes, ltmCompUriExclNumber=ltmCompUriExclNumber, ltmNodeAddrAvailabilityState=ltmNodeAddrAvailabilityState, ltmClientSslStatRecordSize12k=ltmClientSslStatRecordSize12k, ltmAuthProfileEntry=ltmAuthProfileEntry, ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated=ltmFwNatDynamicPoolStatPbaZombiePortBlocksCreated, ltmMirrorPortMemberName=ltmMirrorPortMemberName, ltmIsessionProfileStatDedupInBytesOpt=ltmIsessionProfileStatDedupInBytesOpt, ltmClientSslRenegotiatePeriod=ltmClientSslRenegotiatePeriod, ltmServerSslStatConnectionMirrorHaCtxSent=ltmServerSslStatConnectionMirrorHaCtxSent, ltmMrPmbrDiameterSessionStatAveRoundTripTime=ltmMrPmbrDiameterSessionStatAveRoundTripTime, ltmAlgLogProfileEndControlElementsName=ltmAlgLogProfileEndControlElementsName, ltmMrPmbrSipRouterStatTotIncomingStreams=ltmMrPmbrSipRouterStatTotIncomingStreams, ltmTcpanalyticsProfileCollectRegion=ltmTcpanalyticsProfileCollectRegion, ltmRtspProfileMaxQueuedData=ltmRtspProfileMaxQueuedData, ltmMrPmbrDiameterSessionStatMrType=ltmMrPmbrDiameterSessionStatMrType, ltmRouteDomainStatServerPktsIn=ltmRouteDomainStatServerPktsIn, ltmHttpClassCookName=ltmHttpClassCookName, ltmVirtualServStatVsUsageRatio5s=ltmVirtualServStatVsUsageRatio5s, ltmSnatEntry=ltmSnatEntry, ltmFastL4ProfileStatOpen=ltmFastL4ProfileStatOpen, ltmServerSslAlertTimeout=ltmServerSslAlertTimeout, ltmWebaccCacheUriPinName=ltmWebaccCacheUriPinName, ltmDnsHeaderFilterOpcodeExclusion=ltmDnsHeaderFilterOpcodeExclusion, ltmClientSslCertKeyChainOcspStplParams=ltmClientSslCertKeyChainOcspStplParams, ltmHttpProxyConnectProfileStatProxyConnReqs=ltmHttpProxyConnectProfileStatProxyConnReqs, ltmSnatOrigAddrEntry=ltmSnatOrigAddrEntry, ltmRateFilterTable=ltmRateFilterTable, ltmAuthProfileConfigSource=ltmAuthProfileConfigSource, ltmMrPmbrSipSessionStatProfileName=ltmMrPmbrSipSessionStatProfileName, ltmRuleEventStatAvgCycles=ltmRuleEventStatAvgCycles, ltmClientSslNotifyCertStatusToVs=ltmClientSslNotifyCertStatusToVs, ltmDiameterrouterProfileName=ltmDiameterrouterProfileName, ltmPptpProfileStat=ltmPptpProfileStat, ltmVirtualServStatCsMeanConnDur=ltmVirtualServStatCsMeanConnDur, ltmFastHttpProfileStatReqParseErrors=ltmFastHttpProfileStatReqParseErrors, ltmHttpProfileStatTable=ltmHttpProfileStatTable, ltmIiopProfileStatNumRequests=ltmIiopProfileStatNumRequests, ltmSnatpoolTransAddrTransAddrName=ltmSnatpoolTransAddrTransAddrName, ltmRespHeadersPermIndex=ltmRespHeadersPermIndex, ltmSipProfileConfigSource=ltmSipProfileConfigSource, ltmFwPolicyRuleStatOverlapper=ltmFwPolicyRuleStatOverlapper, ltmIsessionProfileStatBzip2InErrors=ltmIsessionProfileStatBzip2InErrors, ltmPersistProfileMask=ltmPersistProfileMask, ltmHttpCompressionProfileStatImagePostcompressBytes=ltmHttpCompressionProfileStatImagePostcompressBytes, ltmSplitsessionserverProfileStatTable=ltmSplitsessionserverProfileStatTable, ltmFastHttpProfileName=ltmFastHttpProfileName, ltmIiopProfilePersistRequestId=ltmIiopProfilePersistRequestId, ltmNetworkAttackDataStatWlCount=ltmNetworkAttackDataStatWlCount, ltmClientSslC3dEnabled=ltmClientSslC3dEnabled, ltmNodeAddrConnLimit=ltmNodeAddrConnLimit, ltmServerSslStatMidstreamRenegotiations=ltmServerSslStatMidstreamRenegotiations, ltmFastHttpProfileTable=ltmFastHttpProfileTable, ltmHttpClassName=ltmHttpClassName, ltmDosApplicationTpsBasedIpTpsIncreaseRate=ltmDosApplicationTpsBasedIpTpsIncreaseRate, ltmSpdyProfileStatHttpRequestBytes=ltmSpdyProfileStatHttpRequestBytes, ltmHttp2ProfileStatDataFramesSent=ltmHttp2ProfileStatDataFramesSent, ltmClientSslOptions=ltmClientSslOptions, ltmHttpProxyConnectProfileStatResp4xxCnt=ltmHttpProxyConnectProfileStatResp4xxCnt, ltmNodeAddrTable=ltmNodeAddrTable, ltmCompUriExclEntry=ltmCompUriExclEntry, ltmWebAcceleration=ltmWebAcceleration, ltmDnsCacheStatMsgEvictions=ltmDnsCacheStatMsgEvictions, ltmWebsocketProfileStatContFramesServerRecv=ltmWebsocketProfileStatContFramesServerRecv, ltmFwNatDynamicPoolMappingTimeout=ltmFwNatDynamicPoolMappingTimeout, ltmLsnPrefixName=ltmLsnPrefixName, ltmLsnPrefixLsnPoolBackupLsnPrefixName=ltmLsnPrefixLsnPoolBackupLsnPrefixName, ltmUdpProfileStatRxnosum=ltmUdpProfileStatRxnosum, ltmServerSslStrictResume=ltmServerSslStrictResume, ltmFwNatStaticSourceTranslationPoolStatName=ltmFwNatStaticSourceTranslationPoolStatName, ltmNatVlanNumber=ltmNatVlanNumber, ltmLsnPoolStat=ltmLsnPoolStat, ltmFtpProfileStatFtpsSessions=ltmFtpProfileStatFtpsSessions, ltmSctpProfileLinkQosToPeer=ltmSctpProfileLinkQosToPeer, ltmBwcPolicyStatBytesIn=ltmBwcPolicyStatBytesIn, ltmHttpProfileStatResp2xxCnt=ltmHttpProfileStatResp2xxCnt, ltmPoolMemberStatPvaPktsIn=ltmPoolMemberStatPvaPktsIn, ltmVsHttpClassTable=ltmVsHttpClassTable, ltmClientSslStatSessCacheHits=ltmClientSslStatSessCacheHits, ltmVirtualServRuleNumber=ltmVirtualServRuleNumber, ltmLsnLogProfileEndOutboundElements=ltmLsnLogProfileEndOutboundElements, ltmRamUriInclUri=ltmRamUriInclUri, ltmSiprouterProfileStatTotMessagesNoConnection=ltmSiprouterProfileStatTotMessagesNoConnection, ltmWebAccelerationProfileCacheIgnoreClient=ltmWebAccelerationProfileCacheIgnoreClient, ltmPoolMemberStatPvaMaxConns=ltmPoolMemberStatPvaMaxConns, ltmFwNatStaticSourceTranslationPoolType=ltmFwNatStaticSourceTranslationPoolType, ltmFwNatDynamicPoolStatPbaClientsReachedLimit=ltmFwNatDynamicPoolStatPbaClientsReachedLimit, ltmHttp2ProfileNumber=ltmHttp2ProfileNumber, ltmRateFilterPname=ltmRateFilterPname, ltmRouteDomainStat=ltmRouteDomainStat, ltmServerSslStatSessCacheCurEntries=ltmServerSslStatSessCacheCurEntries, ltmDosAttackDataStatGroup=ltmDosAttackDataStatGroup, ltmSipsessionProfileStatUnsupportedUriScheme416Sent=ltmSipsessionProfileStatUnsupportedUriScheme416Sent, ltmFastL4ProfileTcpTimestampMode=ltmFastL4ProfileTcpTimestampMode, ltmCompContTypeInclTable=ltmCompContTypeInclTable, ltmHttpCompressionProfileBufferSize=ltmHttpCompressionProfileBufferSize, ltmMrPmbrSipRouterStatTotCancelledCalls=ltmMrPmbrSipRouterStatTotCancelledCalls, ltmDnsSecurityStatSrvDrops=ltmDnsSecurityStatSrvDrops, ltmCompContTypeInclContentType=ltmCompContTypeInclContentType, ltmTcpanalyticsProfileCollectCountry=ltmTcpanalyticsProfileCollectCountry, ltmTransAddrStatServerBytesOut=ltmTransAddrStatServerBytesOut, ltmDosApplicationGroup=ltmDosApplicationGroup, ltmIsessionProfileStatDedupInMissHistBucket1k=ltmIsessionProfileStatDedupInMissHistBucket1k, ltmRateFilterStatBytesQueued=ltmRateFilterStatBytesQueued, ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps=ltmFwNatStaticSourceTranslationPoolStatSubscrIdLkps, ltmMrPmbrDiameterSessionStatTotAccountingAnswers=ltmMrPmbrDiameterSessionStatTotAccountingAnswers, ltmMrPmbrDiameterSessionStatPool=ltmMrPmbrDiameterSessionStatPool, ltmPoolEntry=ltmPoolEntry, ltmHttpcompContTypeInclNumber=ltmHttpcompContTypeInclNumber, ltmDnsProfileStatDnsExpressReqs=ltmDnsProfileStatDnsExpressReqs, ltmUdpProfile=ltmUdpProfile, ltmServerSslRenegotiatePeriod=ltmServerSslRenegotiatePeriod, ltmMrPmbrSipRouterStatCurrPendingCalls=ltmMrPmbrSipRouterStatCurrPendingCalls, ltmAlgLogProfileStartControlElementsEntry=ltmAlgLogProfileStartControlElementsEntry)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmPoolStatServerPktsIn=ltmPoolStatServerPktsIn, ltmHttpProfileTable=ltmHttpProfileTable, ltmPoolAvailabilityState=ltmPoolAvailabilityState, ltmHttpClassStatPostReqs=ltmHttpClassStatPostReqs, ltmDiametersessionProfileDynamicRouteInsertion=ltmDiametersessionProfileDynamicRouteInsertion, ltmSiprouterProfileStatTotFailAutoInitOutgoingConns=ltmSiprouterProfileStatTotFailAutoInitOutgoingConns, ltmFwNatStaticSourceTranslationPoolStatErrPortTrans=ltmFwNatStaticSourceTranslationPoolStatErrPortTrans, ltmFastL4ProfileName=ltmFastL4ProfileName, ltmWebaccCacheUriInclUri=ltmWebaccCacheUriInclUri, ltmXmlProfileStatNumInspectedDocuments=ltmXmlProfileStatNumInspectedDocuments, ltmFwPolicyRuleStat=ltmFwPolicyRuleStat, ltmFastL4ProfileStatServersynrtx=ltmFastL4ProfileStatServersynrtx, ltmWebAccelerationProfileUriPin=ltmWebAccelerationProfileUriPin, ltmPcpPrefixProfilePcpPcpPrefixName=ltmPcpPrefixProfilePcpPcpPrefixName, ltmClientSslStatRecordSize6k=ltmClientSslStatRecordSize6k, ltmLsnLogProfileDefaultName=ltmLsnLogProfileDefaultName, ltmNodeAddrStatusTable=ltmNodeAddrStatusTable, ltmLsnLogProfileStartOutboundElementsEntry=ltmLsnLogProfileStartOutboundElementsEntry, ltmHttpProfileStatOtherPrecompressBytes=ltmHttpProfileStatOtherPrecompressBytes, ltmSipsessionProfileStatDrops=ltmSipsessionProfileStatDrops, ltmWebsocketProfileStatServerCompressionFailures=ltmWebsocketProfileStatServerCompressionFailures, ltmLsnPoolStatTotalPortBlockAllocations=ltmLsnPoolStatTotalPortBlockAllocations, ltmServerSslProxySslPassthrough=ltmServerSslProxySslPassthrough, ltmSplitsessionserverProfileStatNumber=ltmSplitsessionserverProfileStatNumber, ltmDnsCacheForwardZoneNameServerGroup=ltmDnsCacheForwardZoneNameServerGroup, ltmFwNatStaticSourceTranslationPoolStatNumber=ltmFwNatStaticSourceTranslationPoolStatNumber, ltmHttpCompressionProfileGzipLevel=ltmHttpCompressionProfileGzipLevel, ltmLsnPoolStatActiveHairpinConnections=ltmLsnPoolStatActiveHairpinConnections, ltmServerSslProfileC3dCertExtensionCustomOidsTable=ltmServerSslProfileC3dCertExtensionCustomOidsTable, ltmFwNatStaticDestinationTranslationPoolStatErrMemory=ltmFwNatStaticDestinationTranslationPoolStatErrMemory, ltmRouteDomains=ltmRouteDomains, ltmTcpanalyticsProfile=ltmTcpanalyticsProfile, ltmFtpProfileEntry=ltmFtpProfileEntry, ltmProfiles=ltmProfiles, ltmTcpProfileAutoSendBuffer=ltmTcpProfileAutoSendBuffer, ltmPoolIpTosToClient=ltmPoolIpTosToClient, ltmStreamProfileDefaultName=ltmStreamProfileDefaultName, ltmVirtualServRuleEntry=ltmVirtualServRuleEntry, ltmIsessionProfileCompressionDeflate=ltmIsessionProfileCompressionDeflate, ltmTftpProfileStatName=ltmTftpProfileStatName, ltmHttpProfileFallbackStatus=ltmHttpProfileFallbackStatus, ltmMrPmbrDiameterSessionStatTotRequestSent=ltmMrPmbrDiameterSessionStatTotRequestSent, ltmVirtualServFallbackPersist=ltmVirtualServFallbackPersist, ltmAlgLog=ltmAlgLog, ltmSipsessionProfileStat=ltmSipsessionProfileStat, ltmVirtualServStatNumber=ltmVirtualServStatNumber, ltmVAddrStatusNumber=ltmVAddrStatusNumber, ltmDnsProfileStatDnsEffectiveRateLimit=ltmDnsProfileStatDnsEffectiveRateLimit, ltmFwIpintGlobalStatBlClassName=ltmFwIpintGlobalStatBlClassName, ltmNodeAddr=ltmNodeAddr, ltmFastHttpProfileStatTable=ltmFastHttpProfileStatTable, ltmUdpProfileConfigSource=ltmUdpProfileConfigSource, ltmFwNatDynamicPoolType=ltmFwNatDynamicPoolType, ltmTcpProfileRexmtThresh=ltmTcpProfileRexmtThresh, ltmDosWhiteIpEntry=ltmDosWhiteIpEntry, ltmSiprouterProfileStatCurrActiveCalls=ltmSiprouterProfileStatCurrActiveCalls, ltmVirtualAddrStatAddr=ltmVirtualAddrStatAddr, ltmPptpProfileLogPublisher=ltmPptpProfileLogPublisher, ltmVirtualServProfileEntry=ltmVirtualServProfileEntry, ltmTcpProfileAbc=ltmTcpProfileAbc, ltmFlowEvictionPolicyStatNumber=ltmFlowEvictionPolicyStatNumber, ltmFastHttpProfileStatV11Reqs=ltmFastHttpProfileStatV11Reqs, ltmMrPmbrSipSessionStatTransactionDoesNotExist=ltmMrPmbrSipSessionStatTransactionDoesNotExist, ltmMrPmbrSipSessionStatNotFound404Sent=ltmMrPmbrSipSessionStatNotFound404Sent, ltmIsessionProfileStatDedupInMissHistBucket32k=ltmIsessionProfileStatDedupInMissHistBucket32k, ltmSplitsessionserverProfileTable=ltmSplitsessionserverProfileTable, ltmSipsessionProfileStatTemporarilyUnavailable=ltmSipsessionProfileStatTemporarilyUnavailable, ltmHttpcompContTypeExclEntry=ltmHttpcompContTypeExclEntry, ltmRstCauseStatRstCause=ltmRstCauseStatRstCause, ltmLsnPoolIcmpEcho=ltmLsnPoolIcmpEcho, ltmRtspProfileNumber=ltmRtspProfileNumber, ltmIsessionProfileStatDedupInHitHistBucketLarge=ltmIsessionProfileStatDedupInHitHistBucketLarge, ltmSpdyProfileStatResetStats=ltmSpdyProfileStatResetStats, ltmHttp2ProfileTable=ltmHttp2ProfileTable, ltmAlgLogProfileEndDataElementsGroup=ltmAlgLogProfileEndDataElementsGroup, ltmHttpProfileStatRespBucket16k=ltmHttpProfileStatRespBucket16k, ltmFastL4ProfileTcpStripSack=ltmFastL4ProfileTcpStripSack, ltmPoolMbrStatusNodeName=ltmPoolMbrStatusNodeName, ltmPcpProfileStatPcpErrorsOther=ltmPcpProfileStatPcpErrorsOther, ltmTcpProfileAutoProxyBuffer=ltmTcpProfileAutoProxyBuffer, ltmIsessionProfileStatDeflateOutBytesOpt=ltmIsessionProfileStatDeflateOutBytesOpt, ltmSiprouterProfileStatCurrPendingCalls=ltmSiprouterProfileStatCurrPendingCalls, ltmHttpClassStatPostcompressBytes=ltmHttpClassStatPostcompressBytes, ltmDnsCacheForwardZoneNameServerAddr=ltmDnsCacheForwardZoneNameServerAddr, ltmDnsCache=ltmDnsCache, ltmIpsecalgProfile=ltmIpsecalgProfile, ltmPoolMemberStatCurrentConnsPerSec=ltmPoolMemberStatCurrentConnsPerSec, ltmClientSslStatRc2Bulk=ltmClientSslStatRc2Bulk, ltmServerSslStatCamelliaBulkOffload=ltmServerSslStatCamelliaBulkOffload, ltmDosApplicationTpsBasedIpRateLimiting=ltmDosApplicationTpsBasedIpRateLimiting, ltmDiameterrouterProfileStatTotMessagesUnroutable=ltmDiameterrouterProfileStatTotMessagesUnroutable, ltmNodeAddrStatTable=ltmNodeAddrStatTable, ltmDiametersessionProfileStatTotCapExcAns=ltmDiametersessionProfileStatTotCapExcAns, ltmTcpProfileConfigSource=ltmTcpProfileConfigSource, ltmIsessionProfileName=ltmIsessionProfileName, ltmServerSslStatChacha20Poly1305Bulk=ltmServerSslStatChacha20Poly1305Bulk, ltmSnatStatClientPktsOut=ltmSnatStatClientPktsOut, ltmHttpClassStatCookiePersistInserts=ltmHttpClassStatCookiePersistInserts, ltmOcspStaplingParameters=ltmOcspStaplingParameters, ltmDosApplicationHeavyUrlExclTable=ltmDosApplicationHeavyUrlExclTable, ltmServerSslStatOcspServersslCertStatusRevoked=ltmServerSslStatOcspServersslCertStatusRevoked, ltmPcpProfileStatPcpAnnounceResponsesUcast=ltmPcpProfileStatPcpAnnounceResponsesUcast, ltmMrPmbrDiameterSessionStatAveAnswerLatency=ltmMrPmbrDiameterSessionStatAveAnswerLatency, ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs=ltmFwNatStaticSourceTranslationPoolStatSubscrIdErrs, ltmServerSslStatReused=ltmServerSslStatReused, ltmRuleTable=ltmRuleTable, ltmSctpProfileNumber=ltmSctpProfileNumber, ltmWebAccelerationProfileCacheAgingRate=ltmWebAccelerationProfileCacheAgingRate, ltmFwNatDynamicPoolStatEntry=ltmFwNatDynamicPoolStatEntry, ltmLSNs=ltmLSNs, ltmSpdyProfileStatTable=ltmSpdyProfileStatTable, ltmSpdyProfileActivationMode=ltmSpdyProfileActivationMode, ltmIsessionProfileStatVsName=ltmIsessionProfileStatVsName, ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers=ltmMrPmbrDiameterSessionStatTotUserAuthorizationAnswers, ltmServerSslStatNonHwAcceleratedConns=ltmServerSslStatNonHwAcceleratedConns, ltmHttpProfileRequestChunking=ltmHttpProfileRequestChunking, ltmClientSslStatRsaKeySize1024=ltmClientSslStatRsaKeySize1024, ltmMirrorPort=ltmMirrorPort, ltmDosApplicationHeavyUrlExclGroup=ltmDosApplicationHeavyUrlExclGroup, ltmClientSslStatConnectionMirrorHaHsSuccess=ltmClientSslStatConnectionMirrorHaHsSuccess, ltmFastHttpProfileStatV10Reqs=ltmFastHttpProfileStatV10Reqs, ltmRtspProfileRtpPort=ltmRtspProfileRtpPort, ltmTcpProfileFinWait2Timeout=ltmTcpProfileFinWait2Timeout, ltmHttpProfileCompressCpusaverLow=ltmHttpProfileCompressCpusaverLow, ltmSipsessionProfileStatLoopDetected482Sent=ltmSipsessionProfileStatLoopDetected482Sent, ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests=ltmFwNatDynamicPoolStatLsnHairpinConnectionRequests, ltmSctpProfileStat=ltmSctpProfileStat, ltmVirtualAddrStatClientTotConns=ltmVirtualAddrStatClientTotConns, ltmMrPmbrDiameterRouterStatCurOutgoingStreams=ltmMrPmbrDiameterRouterStatCurOutgoingStreams, ltmFwAdminIpRuleStatTable=ltmFwAdminIpRuleStatTable, ltmSipsessionProfileStatNotify=ltmSipsessionProfileStatNotify, ltmEncCookiesNumber=ltmEncCookiesNumber, ltmFtpProfileStatEntry=ltmFtpProfileStatEntry, ltmLsnPoolStatPcpMapResponses=ltmLsnPoolStatPcpMapResponses, ltmSnatStatNumber=ltmSnatStatNumber, ltmHttpClassStatEntry=ltmHttpClassStatEntry, ltmMrPmbrSipSessionStatVersionNotSupported505Sent=ltmMrPmbrSipSessionStatVersionNotSupported505Sent, ltmMrPmbrSipSessionStatNotFound=ltmMrPmbrSipSessionStatNotFound, ltmPoolMbrStatusAvailState=ltmPoolMbrStatusAvailState, ltmV6rdProfileIpv4prefixlen=ltmV6rdProfileIpv4prefixlen, ltmFwNatDynamicPoolStatPcpMapResponses=ltmFwNatDynamicPoolStatPcpMapResponses, ltmIsessionProfileStatProfileName=ltmIsessionProfileStatProfileName, ltmDnsExpressStatTsigMissing=ltmDnsExpressStatTsigMissing, ltmSplitsessionclient=ltmSplitsessionclient, ltmVirtualServStatPvaBytesIn=ltmVirtualServStatPvaBytesIn, ltmVirtualServRuleRuleName=ltmVirtualServRuleRuleName, ltmFastL4ProfileExplicitFlowMigration=ltmFastL4ProfileExplicitFlowMigration, ltmFwNatDynamicPoolStatNumber=ltmFwNatDynamicPoolStatNumber, ltmIpsecalgProfileInitialConnectionTimeout=ltmIpsecalgProfileInitialConnectionTimeout, ltmWebAccelerationProfileStatCacheHitBytes=ltmWebAccelerationProfileStatCacheHitBytes, ltmDiametersessionProfileStatResetStats=ltmDiametersessionProfileStatResetStats, ltmServerSslOptions=ltmServerSslOptions, ltmServerSslName=ltmServerSslName, ltmNatStatEntry=ltmNatStatEntry, ltmClientSslStatDhGroupX25519=ltmClientSslStatDhGroupX25519, ltmFwIpintRouteDomainStatResetStats=ltmFwIpintRouteDomainStatResetStats, ltmNetworkAttackDataStatStats=ltmNetworkAttackDataStatStats, ltmConnPoolProfileSrcMask=ltmConnPoolProfileSrcMask, ltmSplitsessionclientProfilePeerPort=ltmSplitsessionclientProfilePeerPort, ltmDiametersessionProfileVendorId=ltmDiametersessionProfileVendorId, ltmClientSslStatRecordSize1k=ltmClientSslStatRecordSize1k, ltmSiprouterProfileStatTable=ltmSiprouterProfileStatTable, ltmIsessionProfileStatDedupInBytesRaw=ltmIsessionProfileStatDedupInBytesRaw, ltmServerSslStatOcspServersslCachedResp=ltmServerSslStatOcspServersslCachedResp, ltmFtpProfile=ltmFtpProfile, ltmBwcPolicyStatGroup=ltmBwcPolicyStatGroup, ltmNodeAddrStatPvaPktsIn=ltmNodeAddrStatPvaPktsIn, ltmIsessionProfileStatNullOutBytesRaw=ltmIsessionProfileStatNullOutBytesRaw, ltmRouteDomainStatServerBytesOut=ltmRouteDomainStatServerBytesOut, ltmFlowEvictionPolicyStatSweptContext=ltmFlowEvictionPolicyStatSweptContext, ltmMrPmbrDiameterSessionStatTotCreditControlRequests=ltmMrPmbrDiameterSessionStatTotCreditControlRequests, ltmSipsessionProfileStatGlobalFailures=ltmSipsessionProfileStatGlobalFailures, ltmSplitsessionserverProfileStatPeerMsgRecd=ltmSplitsessionserverProfileStatPeerMsgRecd, ltmFwContextStatEnforcedPacketsAccept=ltmFwContextStatEnforcedPacketsAccept, ltmDiametersessionProfilePersistType=ltmDiametersessionProfilePersistType, ltmDiametersessionProfileDestHostRewrite=ltmDiametersessionProfileDestHostRewrite, ltmClientSslStatAdhKeyxchg=ltmClientSslStatAdhKeyxchg, ltmIsessionProfileStatDedupOutHitHistBucket256k=ltmIsessionProfileStatDedupOutHitHistBucket256k, ltmHttpProfileStatV30Reqs=ltmHttpProfileStatV30Reqs, ltmSipsessionProfileStatBadRequest400Sent=ltmSipsessionProfileStatBadRequest400Sent, ltmIsessionProfileStatLzoOutBytesOpt=ltmIsessionProfileStatLzoOutBytesOpt, ltmIsessionProfileStatDedupInMissHistBucket2k=ltmIsessionProfileStatDedupInMissHistBucket2k, ltmNodeAddrStatusParentType=ltmNodeAddrStatusParentType, ltmSplitsessionserverProfileListenIp=ltmSplitsessionserverProfileListenIp, ltmWebAccelerationProfileStatNumber=ltmWebAccelerationProfileStatNumber, ltmFwNatDynamicPoolFailureStatFailureCause=ltmFwNatDynamicPoolFailureStatFailureCause, ltmWebsocketProfileStatCloseRsnProtErrClientRecv=ltmWebsocketProfileStatCloseRsnProtErrClientRecv, ltmMrPmbrSipSessionStatPool=ltmMrPmbrSipSessionStatPool, ltmClientSslAlertTimeout=ltmClientSslAlertTimeout, ltmSpdyProfileStatNoopFramesReceived=ltmSpdyProfileStatNoopFramesReceived, ltmAttrSnatAnyIpProtocol=ltmAttrSnatAnyIpProtocol, ltmDiametersessionProfileDiscardUnroutable=ltmDiametersessionProfileDiscardUnroutable, ltmSipsessionProfileStatNotFound=ltmSipsessionProfileStatNotFound, ltmRuleEventStat=ltmRuleEventStat, ltmIsessionProfileStatDedupInHitHistBucket1m=ltmIsessionProfileStatDedupInHitHistBucket1m, ltmFwNatDynamicPoolStatLsnTranslationRequestFailures=ltmFwNatDynamicPoolStatLsnTranslationRequestFailures, ltmMrPmbrSipRouterStatCurIncomingStreams=ltmMrPmbrSipRouterStatCurIncomingStreams, ltmTcpProfileStatGroup=ltmTcpProfileStatGroup, ltmRuleEventStatPriority=ltmRuleEventStatPriority, ltmDnsProfileStatResetStats=ltmDnsProfileStatResetStats, ltmVirtualAddrServer=ltmVirtualAddrServer, ltmLsnLogProfileQuotaExceededAction=ltmLsnLogProfileQuotaExceededAction, ltmNodeAddrEnabledState=ltmNodeAddrEnabledState, ltmConnPoolProfileStatNumber=ltmConnPoolProfileStatNumber, ltmFastL4ProfileTcpWscaleMode=ltmFastL4ProfileTcpWscaleMode, ltmIsessionProfileStatBzip2OutErrors=ltmIsessionProfileStatBzip2OutErrors, ltmVirtualServProfileVsName=ltmVirtualServProfileVsName, ltmHttpProfileStatPassthroughPipeline=ltmHttpProfileStatPassthroughPipeline, ltmDiametersessionProfileStatTotRequestReceived=ltmDiametersessionProfileStatTotRequestReceived, ltmSiprouterProfileStatTotRejectedCalls=ltmSiprouterProfileStatTotRejectedCalls, ltmHttpProxyConnectProfileStatV11Resp=ltmHttpProxyConnectProfileStatV11Resp, ltmIsessionProfileEntry=ltmIsessionProfileEntry, ltmDnsProfileStatRcodeNoerror=ltmDnsProfileStatRcodeNoerror, ltmFwIpintRouteDomainStatTable=ltmFwIpintRouteDomainStatTable, ltmDnsCacheStatSecUnchecked=ltmDnsCacheStatSecUnchecked, ltmTcpProfileMaxrtx=ltmTcpProfileMaxrtx, ltmTcpProfileTable=ltmTcpProfileTable, ltmHttpProfileStatRespBucket4k=ltmHttpProfileStatRespBucket4k, ltmFastHttpProfileStatConnpoolCurSize=ltmFastHttpProfileStatConnpoolCurSize, ltmRtspProfileProxyHeader=ltmRtspProfileProxyHeader, ltmMrPmbrDiameterRouterStatTotOutgoingConnections=ltmMrPmbrDiameterRouterStatTotOutgoingConnections, ltmSpdyProfileStatSynReplyFramesReceived=ltmSpdyProfileStatSynReplyFramesReceived, ltmClientSslStatNullBulk=ltmClientSslStatNullBulk, ltmSplitsessionserver=ltmSplitsessionserver, ltmDnsSecurityStatSoaDrops=ltmDnsSecurityStatSoaDrops, ltmServerSslStatSessCacheHits=ltmServerSslStatSessCacheHits, ltmUserStatProfileNumber=ltmUserStatProfileNumber, ltmHttp2ProfileStat=ltmHttp2ProfileStat, ltmSpdyProfileStatV3StreamsCreated=ltmSpdyProfileStatV3StreamsCreated, ltmWebAccelerationProfileStatEntry=ltmWebAccelerationProfileStatEntry, ltmPoolStatusEnabledState=ltmPoolStatusEnabledState, ltmWebsocketProfileStatPingFramesServerRecv=ltmWebsocketProfileStatPingFramesServerRecv, ltmWebsocketProfileStatClientBytesRecdPostCompress=ltmWebsocketProfileStatClientBytesRecdPostCompress, ltmFastL4ProfileTcpCloseTimeout=ltmFastL4ProfileTcpCloseTimeout, ltmHttpProxyConnectProfileStatEntry=ltmHttpProxyConnectProfileStatEntry, ltmPcpPrefix=ltmPcpPrefix, ltmDnsSecurityStatFilteredDrops=ltmDnsSecurityStatFilteredDrops, ltmFwRuleStatAction=ltmFwRuleStatAction, ltmIiopProfilePersistObjectKey=ltmIiopProfilePersistObjectKey, ltmDiametersessionProfileStatAveAnswerLatency=ltmDiametersessionProfileStatAveAnswerLatency, ltmFwNatDynamicPoolStat=ltmFwNatDynamicPoolStat, ltmRuleEventName=ltmRuleEventName, ltmPoolMbrStatusAddr=ltmPoolMbrStatusAddr, ltmDnsSecurityStatName=ltmDnsSecurityStatName, ltmDiameterrouterProfileStatTotMessagesInternalError=ltmDiameterrouterProfileStatTotMessagesInternalError, ltmMrPmbrDiameterRouterStatTotMessagesQueueFull=ltmMrPmbrDiameterRouterStatTotMessagesQueueFull, ltmDiametersessionProfileRetransmissionQueueMaxMessages=ltmDiametersessionProfileRetransmissionQueueMaxMessages, ltmFwNatStaticDestinationTranslationPoolStatResetStats=ltmFwNatStaticDestinationTranslationPoolStatResetStats, ltmHttpClassStatRamcacheMissBytes=ltmHttpClassStatRamcacheMissBytes, ltmTransAddrStatNumber=ltmTransAddrStatNumber, ltmPoolLinkQosToServer=ltmPoolLinkQosToServer, ltmPoolStatPvaMaxConns=ltmPoolStatPvaMaxConns, ltmClientSslStatRsaKeyxchg=ltmClientSslStatRsaKeyxchg, ltmAuthProfileType=ltmAuthProfileType)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpProfileCompressCpusaver=ltmHttpProfileCompressCpusaver, ltmUserStatProfileStatFieldId=ltmUserStatProfileStatFieldId, ltmDnsProfileStatQueries=ltmDnsProfileStatQueries, ltmTransAddrStatServerBytesIn=ltmTransAddrStatServerBytesIn, ltmMrPmbrSipSessionStatNotAcceptableHere488Sent=ltmMrPmbrSipSessionStatNotAcceptableHere488Sent, ltmDiametersessionProfilePersistAvp=ltmDiametersessionProfilePersistAvp, ltmFwNatDynamicPoolStatPbaPortBlockAllocations=ltmFwNatDynamicPoolStatPbaPortBlockAllocations, ltmSnatPoolStatResetStats=ltmSnatPoolStatResetStats, ltmVirtualAddrStatName=ltmVirtualAddrStatName, ltmMrPmbrDiameterRouterStatTotPayloadBytesOut=ltmMrPmbrDiameterRouterStatTotPayloadBytesOut, ltmRamUriExclNumber=ltmRamUriExclNumber, ltmDnsSecurityStatPtrDrops=ltmDnsSecurityStatPtrDrops, ltmServerSslStatDhGroupP384=ltmServerSslStatDhGroupP384, ltmSplitsessionserverProfileListenPort=ltmSplitsessionserverProfileListenPort, ltmServerSslStatRsaKeySize2048=ltmServerSslStatRsaKeySize2048, ltmMrPmbrDiameterSessionStatNumber=ltmMrPmbrDiameterSessionStatNumber, ltmNodeAddrStatCurrPvaAssistConn=ltmNodeAddrStatCurrPvaAssistConn, bigipLocalTMCompliance=bigipLocalTMCompliance, ltmHttpProfileStatRamcacheMissBytes=ltmHttpProfileStatRamcacheMissBytes, ltmSctpProfileStatTable=ltmSctpProfileStatTable, ltmTftpProfileStatGroup=ltmTftpProfileStatGroup, ltmPptpProfileStatTable=ltmPptpProfileStatTable, ltmVirtualServPool=ltmVirtualServPool, ltmServerSslMode=ltmServerSslMode, ltmPptpProfileCsvFormat=ltmPptpProfileCsvFormat, ltmFastL4ProfileTimeoutRecovery=ltmFastL4ProfileTimeoutRecovery, ltmHttpClassStatVideoPrecompressBytes=ltmHttpClassStatVideoPrecompressBytes, ltmVirtualServStatSwSyncookies=ltmVirtualServStatSwSyncookies, ltmServerSslDropExpCert=ltmServerSslDropExpCert, ltmPcpPrefixProfilePcpPrefixAddress=ltmPcpPrefixProfilePcpPrefixAddress, ltmRuleName=ltmRuleName, ltmServerSslStatAesBulkOffload=ltmServerSslStatAesBulkOffload, ltmTransAddrIpIdleTimeout=ltmTransAddrIpIdleTimeout, ltmClientSslStatEdhDssKeyxchg=ltmClientSslStatEdhDssKeyxchg, ltmSpdyProfileProtocolVersions=ltmSpdyProfileProtocolVersions, ltmDnsProfile=ltmDnsProfile, ltmHttpProfileCompressKeepAcceptEncoding=ltmHttpProfileCompressKeepAcceptEncoding, ltmPoolMemberStatNodeName=ltmPoolMemberStatNodeName, ltmSplitsessionclientProfileEntry=ltmSplitsessionclientProfileEntry, ltmMrPmbrSipRouterStatTotMessagesOut=ltmMrPmbrSipRouterStatTotMessagesOut, ltmFastL4ProfilePvaAccelMode=ltmFastL4ProfilePvaAccelMode, ltmServerSslStatRsaKeySize2048Offload=ltmServerSslStatRsaKeySize2048Offload, ltmTransAddrStatServerTotConns=ltmTransAddrStatServerTotConns, ltmCompUriInclEntry=ltmCompUriInclEntry, ltmDnsCacheStatTcpTotConns=ltmDnsCacheStatTcpTotConns, ltmLsnPoolStatPcpPeerRequests=ltmLsnPoolStatPcpPeerRequests, ltmUdpProfileStatConnfails=ltmUdpProfileStatConnfails, ltmMrPmbrDiameterSessionStatTable=ltmMrPmbrDiameterSessionStatTable, ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections=ltmMrPmbrDiameterRouterStatTotFailedOutgoingConnections, ltmCompUriInclGroup=ltmCompUriInclGroup, ltmWebAccelerationProfileStat=ltmWebAccelerationProfileStat, ltmClientSslStatSecureHandshakes=ltmClientSslStatSecureHandshakes, ltmServerSslStatCurNativeConns=ltmServerSslStatCurNativeConns, ltmHttpClassCookTable=ltmHttpClassCookTable, ltmPoolMemberNodeName=ltmPoolMemberNodeName, ltmVAddrStatusAddr=ltmVAddrStatusAddr, ltmHttpcompUriInclEntry=ltmHttpcompUriInclEntry, ltmUserStatProfileStatFieldValue=ltmUserStatProfileStatFieldValue, ltmDosApplicationHeavyUrlExclNumber=ltmDosApplicationHeavyUrlExclNumber, ltmSctpProfileMaxCommunicationPaths=ltmSctpProfileMaxCommunicationPaths, ltmDnsCacheUnwantedThreshold=ltmDnsCacheUnwantedThreshold, ltmMrPmbrDiameterRouterStatTotPassthruBytes=ltmMrPmbrDiameterRouterStatTotPassthruBytes, ltmMrPmbrDiameterRouterStatAddrType=ltmMrPmbrDiameterRouterStatAddrType, ltmMrPmbrSipSessionStatBye=ltmMrPmbrSipSessionStatBye, ltmDiametersessionProfileStatCurErrorAnswerRatio=ltmDiametersessionProfileStatCurErrorAnswerRatio, ltmDnsSecurityStatResetStats=ltmDnsSecurityStatResetStats, ltmRouteDomainStatClientMaxConns=ltmRouteDomainStatClientMaxConns, ltmHttpClass=ltmHttpClass, ltmIsessionProfileStatDeflateInErrors=ltmIsessionProfileStatDeflateInErrors, ltmFwNatDynamicPoolFailureStatResetStats=ltmFwNatDynamicPoolFailureStatResetStats, ltmVirtualServSnatpoolName=ltmVirtualServSnatpoolName, ltmFastHttpProfileStatServerRxBad=ltmFastHttpProfileStatServerRxBad, ltmDiametersessionProfileStat=ltmDiametersessionProfileStat, ltmWebAccelerationProfileName=ltmWebAccelerationProfileName, ltmHttpProxyConnectProfileStatResp3xxCnt=ltmHttpProxyConnectProfileStatResp3xxCnt, ltmDiametersessionProfileStatTotResultCodeRcvd2xxx=ltmDiametersessionProfileStatTotResultCodeRcvd2xxx, ltmIiopProfile=ltmIiopProfile, ltmFastL4ProfileIdleTimeout=ltmFastL4ProfileIdleTimeout, ltmTcpProfileRcvwnd=ltmTcpProfileRcvwnd, ltmHttpClassWaEnabled=ltmHttpClassWaEnabled, ltmDnsCacheForwardZoneName=ltmDnsCacheForwardZoneName, ltmVsStatusEntry=ltmVsStatusEntry, ltmSiprouterProfileStatTotFailedOutgoingStreams=ltmSiprouterProfileStatTotFailedOutgoingStreams, ltmFwNatDynamicPoolStatPbaPortBlockDeallocations=ltmFwNatDynamicPoolStatPbaPortBlockDeallocations, ltmHttpProfileStatHtmlPostcompressBytes=ltmHttpProfileStatHtmlPostcompressBytes, ltmHttp2ProfileStatHttp2ResponseFrames=ltmHttp2ProfileStatHttp2ResponseFrames, ltmNatOrigAddrType=ltmNatOrigAddrType, ltmSpdyProfileStatWindowUpdateFramesSent=ltmSpdyProfileStatWindowUpdateFramesSent, ltmSpdyProfileStatV3StreamsCurrent=ltmSpdyProfileStatV3StreamsCurrent, ltmSiprouterProfileStatCurOutgoingStreams=ltmSiprouterProfileStatCurOutgoingStreams, ltmMrPmbrSipRouterStatAddrType=ltmMrPmbrSipRouterStatAddrType, ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans=ltmFwNatStaticSourceTranslationPoolStatErrAddrTrans, ltmFastHttpProfileConnpoolReplenish=ltmFastHttpProfileConnpoolReplenish, ltmHttp2ProfileStatGoawayFramesReceived=ltmHttp2ProfileStatGoawayFramesReceived, ltmDnsHeaderFilter=ltmDnsHeaderFilter, ltmServerSslStatC3dConns=ltmServerSslStatC3dConns, ltmSipProfileSecureVia=ltmSipProfileSecureVia, ltmClientSslStatDesBulkOffload=ltmClientSslStatDesBulkOffload, ltmFastL4ProfileStatSyncookAccept=ltmFastL4ProfileStatSyncookAccept, ltmPcpProfileMaxMappingLifetime=ltmPcpProfileMaxMappingLifetime, ltmHttpProfileCompressBufferSize=ltmHttpProfileCompressBufferSize, ltmServerSslStatDhDssKeyxchg=ltmServerSslStatDhDssKeyxchg, ltmPoolMemberStatReqMrIn=ltmPoolMemberStatReqMrIn, ltmHttp2ProfileStatPriorityFramesSent=ltmHttp2ProfileStatPriorityFramesSent, ltmDiametersessionProfileDisconnectPeerAction=ltmDiametersessionProfileDisconnectPeerAction, ltmMrPmbrDiameterRouterStatCurOutgoingConnections=ltmMrPmbrDiameterRouterStatCurOutgoingConnections, ltmDnsCacheForwardZoneNameServer=ltmDnsCacheForwardZoneNameServer, ltmStreamProfileNumber=ltmStreamProfileNumber, ltmPcpProfileMapLimitPerClient=ltmPcpProfileMapLimitPerClient, ltmAlgLogProfileStartControlElementsNumber=ltmAlgLogProfileStartControlElementsNumber, ltmPoolStatServerBytesOut=ltmPoolStatServerBytesOut, ltmHttpProfileStatResp3xxCnt=ltmHttpProfileStatResp3xxCnt, ltmAlgLogProfileEndDataElements=ltmAlgLogProfileEndDataElements, ltmHttp2ProfileStatStreamsMax=ltmHttp2ProfileStatStreamsMax, ltmMrPmbrDiameterSessionStatTrName=ltmMrPmbrDiameterSessionStatTrName, ltmMrPmbrSipSessionStatServiceUnavailable503Sent=ltmMrPmbrSipSessionStatServiceUnavailable503Sent, ltmXmlProfileNamespaceMappingsIndex=ltmXmlProfileNamespaceMappingsIndex, ltmBwcPolicyStatPacketsPerSec=ltmBwcPolicyStatPacketsPerSec, ltmFwNatStaticDestinationTranslationPoolTable=ltmFwNatStaticDestinationTranslationPoolTable, ltmAttrMirrorState=ltmAttrMirrorState, ltmHttpCompressionProfileStatAudioPrecompressBytes=ltmHttpCompressionProfileStatAudioPrecompressBytes, ltmWebsocketProfileCompressMode=ltmWebsocketProfileCompressMode, ltmSnatOrigAddrAddr=ltmSnatOrigAddrAddr, ltmAuthProfileStatWantcredentialResults=ltmAuthProfileStatWantcredentialResults, ltmLsnLogProfileEndOutboundElementsName=ltmLsnLogProfileEndOutboundElementsName, ltmXmlProfile=ltmXmlProfile, ltmTcpProfileStatExpires=ltmTcpProfileStatExpires, ltmPoolMemberStatTotRequests=ltmPoolMemberStatTotRequests, ltmCompContTypeExclNumber=ltmCompContTypeExclNumber, ltmNatStatServerTotConns=ltmNatStatServerTotConns, ltmClientSslStatSessCacheOverflows=ltmClientSslStatSessCacheOverflows, ltmRamUriInclName=ltmRamUriInclName, ltmHttpCompressionProfileCpusaver=ltmHttpCompressionProfileCpusaver, ltmVirtualServPoolRuleName=ltmVirtualServPoolRuleName, ltmLsnPoolFailureStat=ltmLsnPoolFailureStat, ltmSpdyProfileStatFlowsCreated=ltmSpdyProfileStatFlowsCreated, ltmFwRuleStatRuleName=ltmFwRuleStatRuleName, ltmDiametersessionProfileHostIpAddress=ltmDiametersessionProfileHostIpAddress, ltmHttpClassProfileHost=ltmHttpClassProfileHost, ltmHttp2ProfileGroup=ltmHttp2ProfileGroup, ltmSipsessionProfileStatProvisional=ltmSipsessionProfileStatProvisional, ltmSipProfileStatEntry=ltmSipProfileStatEntry, ltmGlobalAttr=ltmGlobalAttr, ltmVirtualServStatTotPvaAssistConn=ltmVirtualServStatTotPvaAssistConn, ltmIsessionProfileStatNullInBytesRaw=ltmIsessionProfileStatNullInBytesRaw, ltmTcpProfileAckOnPush=ltmTcpProfileAckOnPush, ltmPoolMemberStatConnqAgeHead=ltmPoolMemberStatConnqAgeHead, ltmServerSslStatAdhKeyxchg=ltmServerSslStatAdhKeyxchg, ltmLsnPoolStatName=ltmLsnPoolStatName, ltmAlgLogProfileNumber=ltmAlgLogProfileNumber, ltmDnsProfileStatMalformed=ltmDnsProfileStatMalformed, ltmHttpProfileStatOctetPostcompressBytes=ltmHttpProfileStatOctetPostcompressBytes, ltmClientSslStatCamelliaBulkOffload=ltmClientSslStatCamelliaBulkOffload, ltmSiprouterProfileStatTotMessagesInCloned=ltmSiprouterProfileStatTotMessagesInCloned, ltmClientSslTable=ltmClientSslTable, ltmRateFilterStatDropTotPkts=ltmRateFilterStatDropTotPkts, ltmSnatPoolStatServerCurConns=ltmSnatPoolStatServerCurConns, ltmHttpClassTable=ltmHttpClassTable, ltmTransAddrStatTable=ltmTransAddrStatTable, ltmNodeAddrAddrType=ltmNodeAddrAddrType, ltmMrPmbrSipSessionStatClientFailures=ltmMrPmbrSipSessionStatClientFailures, ltmClientSslStatRsaKeySize4096Offload=ltmClientSslStatRsaKeySize4096Offload, ltmUdpProfileStat=ltmUdpProfileStat, ltmRamUriExclUri=ltmRamUriExclUri, ltmSctpProfileInStreams=ltmSctpProfileInStreams, ltmLsnPoolNumber=ltmLsnPoolNumber, ltmDiameterrouterProfileDefaultName=ltmDiameterrouterProfileDefaultName, ltmDiametersessionProfileRetransmissionQueueLimitHigh=ltmDiametersessionProfileRetransmissionQueueLimitHigh, ltmHttpProxyConnectProfileStatGroup=ltmHttpProxyConnectProfileStatGroup, ltmTransAddrGroup=ltmTransAddrGroup, ltmNatStatServerCurConns=ltmNatStatServerCurConns, ltmServerSslStatOcspServersslResponderQueries=ltmServerSslStatOcspServersslResponderQueries, ltmLsnPoolVlanLsnPoolName=ltmLsnPoolVlanLsnPoolName, ltmAuthProfileStatFailureResults=ltmAuthProfileStatFailureResults, ltmDiameterrouter=ltmDiameterrouter, ltmNodeAddrStatusEntry=ltmNodeAddrStatusEntry, ltmHttpProfileFallbackHost=ltmHttpProfileFallbackHost, ltmStreamProfileName=ltmStreamProfileName, ltmHttpCompressionProfileStatXmlPrecompressBytes=ltmHttpCompressionProfileStatXmlPrecompressBytes, ltmBwcPolicyStat=ltmBwcPolicyStat, ltmHttpClassStatRespBucket16k=ltmHttpClassStatRespBucket16k, ltmDiameterrouterProfileMaxPendingBytes=ltmDiameterrouterProfileMaxPendingBytes, ltmServerSslStatPeercertInvalid=ltmServerSslStatPeercertInvalid, ltmPcpProfileConfigSource=ltmPcpProfileConfigSource, ltmDnsProfileStatTxtReqs=ltmDnsProfileStatTxtReqs, ltmHttpProfileStatPassthroughUnknownMethod=ltmHttpProfileStatPassthroughUnknownMethod, ltmWebaccCacheUriInclIndex=ltmWebaccCacheUriInclIndex, ltmHttpProfileCompressMinSize=ltmHttpProfileCompressMinSize, ltmSpdyProfileStatSynStreamFramesReceived=ltmSpdyProfileStatSynStreamFramesReceived, ltmLsnLogProfileEndOutboundElementsIndex=ltmLsnLogProfileEndOutboundElementsIndex, ltmSctpProfileStatResetStats=ltmSctpProfileStatResetStats, ltmMrPmbrSipSessionStatAddressIncomplete484Sent=ltmMrPmbrSipSessionStatAddressIncomplete484Sent, ltmServerSslC3dCaCert=ltmServerSslC3dCaCert, ltmDosAttackDataStatEntry=ltmDosAttackDataStatEntry, ltmIsessionProfileStatNullOutBytesOpt=ltmIsessionProfileStatNullOutBytesOpt, ltmHttp=ltmHttp, ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers=ltmDiametersessionProfileStatTotRejectedUnconfiguredPeers, ltmMrPmbrSipSessionStatPrack=ltmMrPmbrSipSessionStatPrack, ltmVirtualServAuthProfileName=ltmVirtualServAuthProfileName, ltmUdpProfileStatAccepts=ltmUdpProfileStatAccepts, ltmPcpProfile=ltmPcpProfile, ltmIsessionProfileStatDedupInMissHistBucket256k=ltmIsessionProfileStatDedupInMissHistBucket256k, ltmIpsecalgProfileStatFailures=ltmIpsecalgProfileStatFailures, ltmWebAccelerationProfileStatCacheMissBytes=ltmWebAccelerationProfileStatCacheMissBytes, ltmClientSslStatOcspStaplingOcspConnTimeouts=ltmClientSslStatOcspStaplingOcspConnTimeouts, ltmServerSslStatSha384DigestOffload=ltmServerSslStatSha384DigestOffload, ltmSipsessionProfileStatName=ltmSipsessionProfileStatName, ltmFwNatStaticDestinationTranslationPoolStatTransReqs=ltmFwNatStaticDestinationTranslationPoolStatTransReqs, ltmServerSslSessionTicket=ltmServerSslSessionTicket, ltmDiameterrouterProfileStatCurIncomingStreams=ltmDiameterrouterProfileStatCurIncomingStreams, ltmHttpProfileMaxRequests=ltmHttpProfileMaxRequests, ltmIsessionProfileCompressionCodecs=ltmIsessionProfileCompressionCodecs, ltmDiametersessionProfileRetransmissionQueueMaxBytes=ltmDiametersessionProfileRetransmissionQueueMaxBytes, ltmPoolMemberSessionStatus=ltmPoolMemberSessionStatus, ltmSpdy=ltmSpdy, ltmDnsProfileStatMxReqs=ltmDnsProfileStatMxReqs, ltmDiametersessionProfileStatTotBadMessages=ltmDiametersessionProfileStatTotBadMessages, ltmHttp2ProfileStatHeadersFramesSent=ltmHttp2ProfileStatHeadersFramesSent, ltmTftpProfileStat=ltmTftpProfileStat, ltmVirtualAddrStatClientBytesOut=ltmVirtualAddrStatClientBytesOut, ltmLsnPrefixNumber=ltmLsnPrefixNumber, ltmDosApplicationTable=ltmDosApplicationTable, ltmLsnPoolStatBackupPoolTranslations=ltmLsnPoolStatBackupPoolTranslations, ltmNatVlanEntry=ltmNatVlanEntry, ltmNetworkAttackDataStatAttackCount=ltmNetworkAttackDataStatAttackCount, ltmClientSslStatMaxConns=ltmClientSslStatMaxConns, ltmHttpClassHostTable=ltmHttpClassHostTable, ltmSiprouterProfileStatNumber=ltmSiprouterProfileStatNumber, ltmVirtualServPoolGroup=ltmVirtualServPoolGroup, ltmFwNatDynamicPoolFailureStatNumber=ltmFwNatDynamicPoolFailureStatNumber, ltmWebsocketProfileStatCloseRsnOtherClientRecv=ltmWebsocketProfileStatCloseRsnOtherClientRecv, ltmHttp2ProfileStatEntry=ltmHttp2ProfileStatEntry, ltmDnsQueryFilterGroup=ltmDnsQueryFilterGroup, ltmVirtualServStatMsgMrIn=ltmVirtualServStatMsgMrIn, ltmRateFilterRate=ltmRateFilterRate, ltmServerSslStatDhGroupP384Offload=ltmServerSslStatDhGroupP384Offload, ltmHttpcompUriInclNumber=ltmHttpcompUriInclNumber, ltmPcpProfileListeningPort=ltmPcpProfileListeningPort, ltmFastL4ProfileTable=ltmFastL4ProfileTable, ltmTcpanalyticsProfileTable=ltmTcpanalyticsProfileTable, ltmUserStat=ltmUserStat, ltmWebAccelerationProfileUriIncl=ltmWebAccelerationProfileUriIncl, ltmDiameterrouterProfileIgnorePeerPort=ltmDiameterrouterProfileIgnorePeerPort, ltmHttp2ProfileStatPingFramesSent=ltmHttp2ProfileStatPingFramesSent, ltmServerSslMaxActiveHandshake=ltmServerSslMaxActiveHandshake, ltmPoolSimpleTimeout=ltmPoolSimpleTimeout, ltmClientSslStatSessionMirrorFailure=ltmClientSslStatSessionMirrorFailure, ltmFwNatStaticSourceTranslationPool=ltmFwNatStaticSourceTranslationPool, ltmNodeAddrStatResetStats=ltmNodeAddrStatResetStats, ltmVirtualServProfileNumber=ltmVirtualServProfileNumber, ltmHttpProfileStatResp4xxCnt=ltmHttpProfileStatResp4xxCnt, ltmTcpProfileStatSyncacheover=ltmTcpProfileStatSyncacheover, ltmFastHttpProfileStatClientSyns=ltmFastHttpProfileStatClientSyns, ltmClientSslStatFatalAlerts=ltmClientSslStatFatalAlerts)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmServerSslStatEntry=ltmServerSslStatEntry, ltmFastHttpProfileNumber=ltmFastHttpProfileNumber, ltmPoolStatusName=ltmPoolStatusName, ltmTftpProfileStatTable=ltmTftpProfileStatTable, ltmHttp2ProfileStatWindowUpdateFramesReceived=ltmHttp2ProfileStatWindowUpdateFramesReceived, ltmSipsessionProfileStatNotAcceptableHere=ltmSipsessionProfileStatNotAcceptableHere, ltmFwNatDynamicPoolProxyArp=ltmFwNatDynamicPoolProxyArp, ltmIiopProfileName=ltmIiopProfileName, ltmHttpProfile=ltmHttpProfile, ltmDiameterrouterProfileStat=ltmDiameterrouterProfileStat, ltmStreamProfileStatTable=ltmStreamProfileStatTable, ltmServerSslStatIdeaBulk=ltmServerSslStatIdeaBulk, ltmPoolStatRespMrOut=ltmPoolStatRespMrOut, ltmSplitsessionclientProfileDefaultName=ltmSplitsessionclientProfileDefaultName, ltmWebsocketProfileStatConnectionsAccepted=ltmWebsocketProfileStatConnectionsAccepted, ltmDnsProfileDnsExpressEnabled=ltmDnsProfileDnsExpressEnabled, ltmSctpProfileStatConnfails=ltmSctpProfileStatConnfails, ltmFwIpintRouteDomainStatSrcIpBlacklist=ltmFwIpintRouteDomainStatSrcIpBlacklist, ltmTcpProfileStatTxrexmits=ltmTcpProfileStatTxrexmits, ltmDosApplicationHeavyUrlInclProfileName=ltmDosApplicationHeavyUrlInclProfileName, ltmClientSslStatChacha20Poly1305Bulk=ltmClientSslStatChacha20Poly1305Bulk, ltmLsnPrefixLsnPoolBackup=ltmLsnPrefixLsnPoolBackup, ltmFtpProfileStat=ltmFtpProfileStat, ltmSnatStatResetStats=ltmSnatStatResetStats, ltmTransAddrUnitId=ltmTransAddrUnitId, ltmClientSslOcspStapling=ltmClientSslOcspStapling, ltmVirtualAddrEnabled=ltmVirtualAddrEnabled, ltmFwContextStatEnforcedPacketsAcceptDecisively=ltmFwContextStatEnforcedPacketsAcceptDecisively, ltmFwNatStaticSourceTranslationPoolStatResetStats=ltmFwNatStaticSourceTranslationPoolStatResetStats, ltmTftpProfileGroup=ltmTftpProfileGroup, ltmDiametersessionProfileStatCurReqQueuedForRetrans=ltmDiametersessionProfileStatCurReqQueuedForRetrans, ltmCompContTypeExclTable=ltmCompContTypeExclTable, ltmHttpClassStatJsPrecompressBytes=ltmHttpClassStatJsPrecompressBytes, ltmPptpProfileDefaultName=ltmPptpProfileDefaultName, ltmTransAddrStatServerPktsIn=ltmTransAddrStatServerPktsIn, ltmClientSslHandshakeTimeout=ltmClientSslHandshakeTimeout, ltmDiameterrouterProfileStatTotPassthruBytes=ltmDiameterrouterProfileStatTotPassthruBytes, ltmSiprouterProfileStatTotAutoInitOutgoingConns=ltmSiprouterProfileStatTotAutoInitOutgoingConns, ltmFastHttpProfileConnpoolStep=ltmFastHttpProfileConnpoolStep, ltmVirtualAddrAvailabilityState=ltmVirtualAddrAvailabilityState, ltmFastL4ProfileStat=ltmFastL4ProfileStat, ltmNetworkAttackDataStatStatsRate=ltmNetworkAttackDataStatStatsRate, ltmDnsCacheTable=ltmDnsCacheTable, ltmPoolMemberStatConnqAgeEdm=ltmPoolMemberStatConnqAgeEdm, ltmSpdyProfileStatPingFramesReceived=ltmSpdyProfileStatPingFramesReceived, ltmDiametersessionProfileOriginRealmRewrite=ltmDiametersessionProfileOriginRealmRewrite, ltmSnatTransAddr=ltmSnatTransAddr, ltmSipProfileStatRequests=ltmSipProfileStatRequests, ltmVsHttpClassProfileName=ltmVsHttpClassProfileName, ltmClientSslStatInsecureHandshakeRejects=ltmClientSslStatInsecureHandshakeRejects, ltmDnsCacheStatNumber=ltmDnsCacheStatNumber, ltmHttpClassHeadEntry=ltmHttpClassHeadEntry, ltmDnsHeaderFilterGroup=ltmDnsHeaderFilterGroup, ltmFastL4ProfileLooseClose=ltmFastL4ProfileLooseClose, ltmClientSslStatCurNativeConns=ltmClientSslStatCurNativeConns, ltmTcpProfileStatFinWait=ltmTcpProfileStatFinWait, ltmUdpProfileIdleTimeout=ltmUdpProfileIdleTimeout, ltmPptpProfileStatStopRequests=ltmPptpProfileStatStopRequests, ltmDiametersessionProfileStatTotResultCodeSent1xxx=ltmDiametersessionProfileStatTotResultCodeSent1xxx, ltmIsessionProfileStatDedupInHitHistBucket128k=ltmIsessionProfileStatDedupInHitHistBucket128k, ltmPoolMbrStatusPoolName=ltmPoolMbrStatusPoolName, ltmFwNatStaticSourceTranslationPoolStatBidirReqs=ltmFwNatStaticSourceTranslationPoolStatBidirReqs, ltmMrPmbrSipRouterStatTotMessagesMaxRetries=ltmMrPmbrSipRouterStatTotMessagesMaxRetries, ltmFwPolicyRuleStatTable=ltmFwPolicyRuleStatTable, ltmRstCauseStatCount=ltmRstCauseStatCount, ltmDnsCacheStatTcpMaxConns=ltmDnsCacheStatTcpMaxConns, ltmDnsCacheForwardZoneNameServerCacheName=ltmDnsCacheForwardZoneNameServerCacheName, ltmSpdyProfileWriteSize=ltmSpdyProfileWriteSize, ltmSnatSfFlags=ltmSnatSfFlags, ltmSplitsessionserverProfileStatConnPeerActive=ltmSplitsessionserverProfileStatConnPeerActive, ltmClientSslStatDhGroupP256=ltmClientSslStatDhGroupP256, ltmDnsProfileStatGtmConfiguredObjects=ltmDnsProfileStatGtmConfiguredObjects, ltmUserStatProfileStatName=ltmUserStatProfileStatName, ltmSnat=ltmSnat, ltmSpdyProfileStatConnectionsCurrent=ltmSpdyProfileStatConnectionsCurrent, ltmNatEnabled=ltmNatEnabled, ltmDnsExpressStatTsigVerified=ltmDnsExpressStatTsigVerified, ltmSplitsessionclientProfileName=ltmSplitsessionclientProfileName, ltmRamUriPinGroup=ltmRamUriPinGroup, ltmLsnPrefixLsnPoolBackupNumber=ltmLsnPrefixLsnPoolBackupNumber, ltmPoolStatNumber=ltmPoolStatNumber, ltmFastHttpProfileStatNumber=ltmFastHttpProfileStatNumber, ltmHttpProfileStatXmlPrecompressBytes=ltmHttpProfileStatXmlPrecompressBytes, ltmLsnPoolStatActiveTranslations=ltmLsnPoolStatActiveTranslations, ltmFwAdminIpRuleStatCounter=ltmFwAdminIpRuleStatCounter, ltmDosApplicationTpsBasedUrlTpsIncreaseRate=ltmDosApplicationTpsBasedUrlTpsIncreaseRate, ltmAlgLogProfileStartControlElementsGroup=ltmAlgLogProfileStartControlElementsGroup, ltmHttpProfileCompressGzipLevel=ltmHttpProfileCompressGzipLevel, ltmNodeAddrStat=ltmNodeAddrStat, ltmIiopProfileConfigSource=ltmIiopProfileConfigSource, ltmSctpProfileTxChunks=ltmSctpProfileTxChunks, ltmSipsessionProfileStatNotImplemented=ltmSipsessionProfileStatNotImplemented, ltmIsessionProfileStatDeflateInBytesRaw=ltmIsessionProfileStatDeflateInBytesRaw, ltmRouteDomainStatClientBytesOut=ltmRouteDomainStatClientBytesOut, ltmNatStatServerBytesOut=ltmNatStatServerBytesOut, ltmRespHeadersPermName=ltmRespHeadersPermName, ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns=ltmDiameterrouterProfileStatTotFailAutoInitOutgoingConns, ltmTcpProfileMinRto=ltmTcpProfileMinRto, ltmSiprouterProfileStatName=ltmSiprouterProfileStatName, ltmHttp2ProfileStatConnectionsCurrent=ltmHttp2ProfileStatConnectionsCurrent, ltmFastL4ProfileIpTosToClient=ltmFastL4ProfileIpTosToClient, ltmPoolMemberMonitorRule=ltmPoolMemberMonitorRule, ltmWebAccelerationProfileCacheSize=ltmWebAccelerationProfileCacheSize, ltmConnPoolProfileTable=ltmConnPoolProfileTable, ltmMrPmbrSipRouterStatTotMessagesDropped=ltmMrPmbrSipRouterStatTotMessagesDropped, ltmWebAccelerationProfileStatTable=ltmWebAccelerationProfileStatTable, ltmPptpProfileStatStopReplies=ltmPptpProfileStatStopReplies, ltmDnsCacheStatFwdResponses=ltmDnsCacheStatFwdResponses, ltmTcpProfileCmetricsCacheTimeout=ltmTcpProfileCmetricsCacheTimeout, ltmHttpProxyConnectProfileTable=ltmHttpProxyConnectProfileTable, ltmSipsessionProfileStatRedirection=ltmSipsessionProfileStatRedirection, ltmDnsHeaderFilterNumber=ltmDnsHeaderFilterNumber, ltmHttp2ProfileActivationModesGroup=ltmHttp2ProfileActivationModesGroup, ltmDnsExpressStatTsigBadTime=ltmDnsExpressStatTsigBadTime, ltmHttpClassCookEntry=ltmHttpClassCookEntry, ltmNatStatServerMaxConns=ltmNatStatServerMaxConns, ltmWebsocketProfileMasking=ltmWebsocketProfileMasking, ltmHttpProfileCompContTypeExcl=ltmHttpProfileCompContTypeExcl, ltmDnsProfileStatNumber=ltmDnsProfileStatNumber, ltmDnsProfileStatFastDnsRespNx=ltmDnsProfileStatFastDnsRespNx, ltmSipsessionProfileStatNegotiate=ltmSipsessionProfileStatNegotiate, ltmServerSslStatTotNativeConns=ltmServerSslStatTotNativeConns, ltmSnatStatName=ltmSnatStatName, ltmTransAddrUdpIdleTimeout=ltmTransAddrUdpIdleTimeout, ltmRstCauseStatTable=ltmRstCauseStatTable, ltmServerSslStatPrematureDisconnects=ltmServerSslStatPrematureDisconnects, ltmSplitsessionclientProfileStatConnectionsCurrent=ltmSplitsessionclientProfileStatConnectionsCurrent, ltmWebsocketProfileStatBinaryFramesServerRecv=ltmWebsocketProfileStatBinaryFramesServerRecv, ltmClientSslStatRecordSize7k=ltmClientSslStatRecordSize7k, ltmIsessionProfileMode=ltmIsessionProfileMode, ltmSpdyProfileStatSpdyResponseBytes=ltmSpdyProfileStatSpdyResponseBytes, ltmHttpProfileStatCookiePersistInserts=ltmHttpProfileStatCookiePersistInserts, ltmVirtualServTranslatePort=ltmVirtualServTranslatePort, ltmIsessionProfileStatDedupOutMissHistBucket32k=ltmIsessionProfileStatDedupOutMissHistBucket32k, ltmVirtualServSrcport=ltmVirtualServSrcport, ltmDosAttackDataStatAttackCount=ltmDosAttackDataStatAttackCount, ltmHttpcompUriInclTable=ltmHttpcompUriInclTable, ltmSipsessionProfileStatServiceUnavailable=ltmSipsessionProfileStatServiceUnavailable, ltmClientSslChain=ltmClientSslChain, ltmWebAccelerationProfileStatInterStripeHits=ltmWebAccelerationProfileStatInterStripeHits, ltmDosApplicationTpsBasedSiteMaximumTps=ltmDosApplicationTpsBasedSiteMaximumTps, ltmV6rdProfileEntry=ltmV6rdProfileEntry, ltmPptpProfileStatCallDisconnectNotifies=ltmPptpProfileStatCallDisconnectNotifies, ltmDiameterrouterProfileAssociateClientsideToPmbr=ltmDiameterrouterProfileAssociateClientsideToPmbr, ltmFastL4ProfileConfigSource=ltmFastL4ProfileConfigSource, ltmV6rdProfileV6rdprefixType=ltmV6rdProfileV6rdprefixType, ltmClientSslStatDheDssKeyxchg=ltmClientSslStatDheDssKeyxchg, ltmMrPmbrDiameterRouterStatAddr=ltmMrPmbrDiameterRouterStatAddr, ltmDnsCacheStatUdpTotConns=ltmDnsCacheStatUdpTotConns, ltmHttpcompUriExclEntry=ltmHttpcompUriExclEntry, ltmDnsProfileStatFastDnsRespNe=ltmDnsProfileStatFastDnsRespNe, ltmServerSslStatSniRejects=ltmServerSslStatSniRejects, ltmFastL4ProfileRttFromServer=ltmFastL4ProfileRttFromServer, ltmPoolMemberStatAddr=ltmPoolMemberStatAddr, ltmHttpProfileStatPassthroughOversizeClientHeaders=ltmHttpProfileStatPassthroughOversizeClientHeaders, ltmMirrorPortEntry=ltmMirrorPortEntry, ltmHttpClassUriName=ltmHttpClassUriName, ltmRstCauseStatNumber=ltmRstCauseStatNumber, ltmSipsessionProfileStatBadmsgs=ltmSipsessionProfileStatBadmsgs, ltmFtpProfileLogProfile=ltmFtpProfileLogProfile, ltmHttpProfileStatOctetPrecompressBytes=ltmHttpProfileStatOctetPrecompressBytes, ltmDnsProfileGtmEnabled=ltmDnsProfileGtmEnabled, ltmFwNatDynamicPool=ltmFwNatDynamicPool, ltmMrPmbrDiameterSessionStatTotRequestReceived=ltmMrPmbrDiameterSessionStatTotRequestReceived, ltmClientSslKey=ltmClientSslKey, ltmTcpProfileRatePace=ltmTcpProfileRatePace, ltmDnsProfileStatTclSuspends=ltmDnsProfileStatTclSuspends, ltmPptpProfileName=ltmPptpProfileName, ltmDiametersessionProfileStatTotLoopedRequests=ltmDiametersessionProfileStatTotLoopedRequests, ltmSipsessionProfileStatBadRequest=ltmSipsessionProfileStatBadRequest, ltmSplitsessionserverProfileGroup=ltmSplitsessionserverProfileGroup, ltmHttp2ProfileStatFlowsMax=ltmHttp2ProfileStatFlowsMax, ltmLsnPoolVlanVlanName=ltmLsnPoolVlanVlanName, ltmTcpProfileNumber=ltmTcpProfileNumber, ltmVsStatusName=ltmVsStatusName, ltmRamUriPinName=ltmRamUriPinName, ltmDnsCacheStatFailureCf=ltmDnsCacheStatFailureCf, ltmDosApplicationTriggerIrule=ltmDosApplicationTriggerIrule, ltmPoolMemberStatRespMrOut=ltmPoolMemberStatRespMrOut, ltmWebsocketProfileNoDelay=ltmWebsocketProfileNoDelay, ltmClientSslStatPrematureDisconnects=ltmClientSslStatPrematureDisconnects, ltmHttp2ProfileStatConnectionsAccepted=ltmHttp2ProfileStatConnectionsAccepted, ltmSipsessionProfileStatTransactionDoesNotExist481Sent=ltmSipsessionProfileStatTransactionDoesNotExist481Sent, ltmV6rdProfile=ltmV6rdProfile, ltmWebAccelerationProfileStatCacheEvictions=ltmWebAccelerationProfileStatCacheEvictions, ltmHttpCompressionProfileStatTable=ltmHttpCompressionProfileStatTable, ltmHttp2ProfileStatConnectionsMax=ltmHttp2ProfileStatConnectionsMax, ltmHttpClassConfigSource=ltmHttpClassConfigSource, ltmClientSslStatShaDigestOffload=ltmClientSslStatShaDigestOffload, ltmFwNatStaticSourceTranslationPoolStat=ltmFwNatStaticSourceTranslationPoolStat, ltmRouteDomainStatTable=ltmRouteDomainStatTable, ltmFwRuleStatNumber=ltmFwRuleStatNumber, ltmPoolTable=ltmPoolTable, ltmWebsocketProfileConfigSource=ltmWebsocketProfileConfigSource, ltmDnsProfileFastDnsEnabled=ltmDnsProfileFastDnsEnabled, ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections=ltmMrPmbrDiameterRouterStatTotFailedPassthruConnections, ltmSipsessionProfileStatNotImplemented501Sent=ltmSipsessionProfileStatNotImplemented501Sent, ltmWebAccelerationProfileStatCacheMissesAll=ltmWebAccelerationProfileStatCacheMissesAll, ltmHttp2ProfileStatFlowsCurrent=ltmHttp2ProfileStatFlowsCurrent, ltmVirtualServStatusReason=ltmVirtualServStatusReason, ltmHttpClassUriEntry=ltmHttpClassUriEntry, ltmAlgLogProfileEndDataElementsEntry=ltmAlgLogProfileEndDataElementsEntry, ltmSipsessionProfileStatPublish=ltmSipsessionProfileStatPublish, ltmAlgLogProfileDefaultName=ltmAlgLogProfileDefaultName, ltmSipsessionProfileStatEntry=ltmSipsessionProfileStatEntry, ltmClientSslStatSha224DigestOffload=ltmClientSslStatSha224DigestOffload, ltmV6rdProfileTable=ltmV6rdProfileTable, ltmHttp2=ltmHttp2, ltmSctpProfileOutStreams=ltmSctpProfileOutStreams, ltmServerSslStatDhGroupP256Offload=ltmServerSslStatDhGroupP256Offload, ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx=ltmMrPmbrDiameterSessionStatTotResultCodeRcvd5xxx, ltmClientSslStatOcspStaplingConns=ltmClientSslStatOcspStaplingConns, ltmServerSslCacheSize=ltmServerSslCacheSize, ltmFwNatStaticSourceTranslationPoolRouteAdvertisement=ltmFwNatStaticSourceTranslationPoolRouteAdvertisement, ltmHttpCompressionProfileUriIncl=ltmHttpCompressionProfileUriIncl, ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled=ltmFwNatStaticSourceTranslationPoolEgressIfcsEnabled, ltmIiopProfileGroup=ltmIiopProfileGroup, ltmDnsProfileStatToDns=ltmDnsProfileStatToDns, ltmHttp2ProfileInsertHeader=ltmHttp2ProfileInsertHeader, ltmRtspProfileIdleTimeout=ltmRtspProfileIdleTimeout, ltmMrPmbrSipSessionStatNotify=ltmMrPmbrSipSessionStatNotify, ltmWebaccCacheUriPinGroup=ltmWebaccCacheUriPinGroup, ltmDiametersessionProfileDynamicRouteTimeout=ltmDiametersessionProfileDynamicRouteTimeout, ltmClientSslUncleanShutdown=ltmClientSslUncleanShutdown, ltmClientSslName=ltmClientSslName, ltmHttpProfileStatV20Reqs=ltmHttpProfileStatV20Reqs, ltmWebAccelerationProfileStatName=ltmWebAccelerationProfileStatName, ltmSpdyProfileStatGroup=ltmSpdyProfileStatGroup, ltmFallbackStatusTable=ltmFallbackStatusTable, ltmFwIpintVirtualStatGroup=ltmFwIpintVirtualStatGroup, ltmTcpProfileStatEntry=ltmTcpProfileStatEntry, ltmIsessionProfileStatDedupOutHitHistBucket512k=ltmIsessionProfileStatDedupOutHitHistBucket512k, ltmTcpProfileMd5Sig=ltmTcpProfileMd5Sig, ltmIpsecalgProfileNumber=ltmIpsecalgProfileNumber, ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests=ltmMrPmbrDiameterSessionStatTotDeviceWatchdogRequests, ltmMrPmbrDiameterSessionStatTotAccountingRequests=ltmMrPmbrDiameterSessionStatTotAccountingRequests, ltmSipsessionProfileStatVsName=ltmSipsessionProfileStatVsName, ltmSplitsessionserverProfileStatGroup=ltmSplitsessionserverProfileStatGroup, ltmDnsProfileStatDrops=ltmDnsProfileStatDrops, ltmDiametersessionProfileName=ltmDiametersessionProfileName, ltmDosApplicationHeavyUrlIncl=ltmDosApplicationHeavyUrlIncl, ltmTcpProfileStatRxcookie=ltmTcpProfileStatRxcookie, ltmV6rdProfileDefaultName=ltmV6rdProfileDefaultName, ltmTftpProfileEntry=ltmTftpProfileEntry, ltmLsnPrefixEntry=ltmLsnPrefixEntry, ltmServerSslProfileC3dCertExtensionCustomOidsEntry=ltmServerSslProfileC3dCertExtensionCustomOidsEntry, ltmPcpProfileEntry=ltmPcpProfileEntry, ltmMrPmbrDiameterRouterStatCurIncomingStreams=ltmMrPmbrDiameterRouterStatCurIncomingStreams, ltmDnsCacheStatFailureServer=ltmDnsCacheStatFailureServer, ltmRtspProfileStatGroup=ltmRtspProfileStatGroup, ltmWebsocketProfileStatConnectionsCurrent=ltmWebsocketProfileStatConnectionsCurrent, ltmClientSslStatRecordSize16k=ltmClientSslStatRecordSize16k, ltmHttpCompressionProfileStatJsPrecompressBytes=ltmHttpCompressionProfileStatJsPrecompressBytes, ltmDnsCacheStatTcpBytesIn=ltmDnsCacheStatTcpBytesIn)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpClassStatOctetPrecompressBytes=ltmHttpClassStatOctetPrecompressBytes, ltmVirtualAddrStatus=ltmVirtualAddrStatus, ltmRateFilterStatNumber=ltmRateFilterStatNumber, ltmClientSslStatSourceIpBypasses=ltmClientSslStatSourceIpBypasses, ltmClientSslStatConns=ltmClientSslStatConns, ltmSctpProfileStatEntry=ltmSctpProfileStatEntry, ltmIsessionProfileStatDedupOutHitHistBucket1m=ltmIsessionProfileStatDedupOutHitHistBucket1m, ltmSpdyProfileProtocolVersionsNumber=ltmSpdyProfileProtocolVersionsNumber, ltmHttpProxyConnect=ltmHttpProxyConnect, ltmDiametersessionProfileEgressCriticalMessageRateLimit=ltmDiametersessionProfileEgressCriticalMessageRateLimit, ltmDiametersessionProfileStatAvePeerDelay=ltmDiametersessionProfileStatAvePeerDelay, ltmVirtualServVlan=ltmVirtualServVlan, ltmClientSslStatNonHwAcceleratedConns=ltmClientSslStatNonHwAcceleratedConns, ltmDosWhiteIpTable=ltmDosWhiteIpTable, ltmHttpProfileCompressBrowserWorkarounds=ltmHttpProfileCompressBrowserWorkarounds, ltmDiametersessionProfileStatVsName=ltmDiametersessionProfileStatVsName, ltmMrPmbrDiameterRouterStatTotPassthruConnections=ltmMrPmbrDiameterRouterStatTotPassthruConnections, ltmSipProfileStatResponses=ltmSipProfileStatResponses, ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx=ltmMrPmbrDiameterSessionStatTotResultCodeSent3xxx, ltmSpdyProfileProtocolVersionsName=ltmSpdyProfileProtocolVersionsName, ltmTcpProfileRatePaceMaxRate=ltmTcpProfileRatePaceMaxRate, ltmServerSslStatNotssl=ltmServerSslStatNotssl, ltmTftpProfileLogProfile=ltmTftpProfileLogProfile, ltmMrPmbrSipSessionStatBadmsgsReq=ltmMrPmbrSipSessionStatBadmsgsReq, ltmClientSslCertKeyChainKey=ltmClientSslCertKeyChainKey, ltmLsnPrefixLsnPoolLsnPrefixName=ltmLsnPrefixLsnPoolLsnPrefixName, ltmRateFilterStatBytesPerSec=ltmRateFilterStatBytesPerSec, ltmDnsCacheForwardZoneNameServerForwardZoneName=ltmDnsCacheForwardZoneNameServerForwardZoneName, ltmDiameterrouterProfileStatTotMessagesConnectionClosed=ltmDiameterrouterProfileStatTotMessagesConnectionClosed, ltmVsStatusGroup=ltmVsStatusGroup, ltmServerSslStatAesBulk=ltmServerSslStatAesBulk, ltmRtspProfileRealHttpPersistence=ltmRtspProfileRealHttpPersistence, ltmClientSslCafile=ltmClientSslCafile, ltmIpsecalgProfileStatName=ltmIpsecalgProfileStatName, ltmWebsocketProfileStatServerBytesRecdPostCompress=ltmWebsocketProfileStatServerBytesRecdPostCompress, ltmLsnPoolStatLogFailures=ltmLsnPoolStatLogFailures, ltmDnsCacheStatSecSecure=ltmDnsCacheStatSecSecure, ltmLsnPoolStatActiveZombiePortBlocks=ltmLsnPoolStatActiveZombiePortBlocks, ltmSipProfile=ltmSipProfile, ltmSipsessionProfileStatRefer=ltmSipsessionProfileStatRefer, ltmConnPoolProfileStatTable=ltmConnPoolProfileStatTable, ltmSctpProfileHeartbeatMaxBurst=ltmSctpProfileHeartbeatMaxBurst, ltmWebsocketProfileStatNumber=ltmWebsocketProfileStatNumber, ltmSnatOrigAddrAddrType=ltmSnatOrigAddrAddrType, ltmDnsCacheForwardZoneCacheName=ltmDnsCacheForwardZoneCacheName, ltmPoolLinkQosToClient=ltmPoolLinkQosToClient, ltmLsnLogProfileName=ltmLsnLogProfileName, ltmIsessionProfileStatDedupOutMisses=ltmIsessionProfileStatDedupOutMisses, ltmFlowEvictionPolicyStatEvicted=ltmFlowEvictionPolicyStatEvicted, ltmIsessionProfileStatDedupInMissHistBucket1m=ltmIsessionProfileStatDedupInMissHistBucket1m, ltmDnsCacheNameserverCacheCount=ltmDnsCacheNameserverCacheCount, ltmPcpProfileStatPcpMapResponses=ltmPcpProfileStatPcpMapResponses, ltmSpdyProfileStatNumber=ltmSpdyProfileStatNumber, ltmHttpCompressionProfileEntry=ltmHttpCompressionProfileEntry, ltmPcp=ltmPcp, ltmVirtualServProfile=ltmVirtualServProfile, ltmSplitsessionserverProfile=ltmSplitsessionserverProfile, ltmOCSPStapling=ltmOCSPStapling, ltmFastL4ProfileHardSyncookie=ltmFastL4ProfileHardSyncookie, ltmHttpCompressionProfileStatXmlPostcompressBytes=ltmHttpCompressionProfileStatXmlPostcompressBytes, ltmLsnLogProfileStartOutboundElementsTable=ltmLsnLogProfileStartOutboundElementsTable, ltmWebsocketProfileStatCloseFramesServerRecv=ltmWebsocketProfileStatCloseFramesServerRecv, ltmNetworkAttackDataStatProfileName=ltmNetworkAttackDataStatProfileName, ltmVirtualServPersistTable=ltmVirtualServPersistTable, ltmTftpProfileNumber=ltmTftpProfileNumber, ltmSpdyProfileStatV2StreamsCurrent=ltmSpdyProfileStatV2StreamsCurrent, ltmHttp2ProfileActivationModesTable=ltmHttp2ProfileActivationModesTable, ltmDiameterrouterProfileStatTotMessagesInRetry=ltmDiameterrouterProfileStatTotMessagesInRetry, ltmPoolMemberStatDurationRateExceeded=ltmPoolMemberStatDurationRateExceeded, ltmRtspProfileProxy=ltmRtspProfileProxy, ltmSplitsessionclientProfileStatGroup=ltmSplitsessionclientProfileStatGroup, ltmDosApplicationHeavyUrlInclEntry=ltmDosApplicationHeavyUrlInclEntry, ltmAlgLogProfileStartDataElementsName=ltmAlgLogProfileStartDataElementsName, ltmTcpProfileMptcpDebug=ltmTcpProfileMptcpDebug, ltmLsnLogProfileEndOutboundElementsEntry=ltmLsnLogProfileEndOutboundElementsEntry, ltmMrPmbrSipSessionStatAddr=ltmMrPmbrSipSessionStatAddr, ltmRouteDomainStatServerBytesIn=ltmRouteDomainStatServerBytesIn, ltmAlgLogProfileEndControlElements=ltmAlgLogProfileEndControlElements, ltmMrPmbrSipSessionStatRedirection=ltmMrPmbrSipSessionStatRedirection, ltmIsessionProfileStatDeflateOutBytesRaw=ltmIsessionProfileStatDeflateOutBytesRaw, ltmHttpProfileBasicAuthRealm=ltmHttpProfileBasicAuthRealm, ltmVirtualServPersistEntry=ltmVirtualServPersistEntry, ltmIsessionProfileCompressionNull=ltmIsessionProfileCompressionNull, ltmHttpProfileRamcacheIgnoreClient=ltmHttpProfileRamcacheIgnoreClient, ltmDnsServerStatXfrResponses=ltmDnsServerStatXfrResponses, ltmLsnLogProfileCsvFormat=ltmLsnLogProfileCsvFormat, ltmClientSslStatRc4Bulk=ltmClientSslStatRc4Bulk, ltmPoolMemberStatServerBytesOut=ltmPoolMemberStatServerBytesOut, ltmDosAttackDataStatVectorName=ltmDosAttackDataStatVectorName, ltmFastHttpProfileUncleanShutdown=ltmFastHttpProfileUncleanShutdown, ltmDosApplicationTpsBasedDeEscalationPeriod=ltmDosApplicationTpsBasedDeEscalationPeriod, ltmSpdyProfileStatSettingsFramesReceived=ltmSpdyProfileStatSettingsFramesReceived, ltmAttrMirrorPeerIpAddr=ltmAttrMirrorPeerIpAddr, ltmServerSslGroup=ltmServerSslGroup, ltmPoolMemberRatio=ltmPoolMemberRatio, ltmAlgLogProfileEntry=ltmAlgLogProfileEntry, ltmHttpClassDefaultName=ltmHttpClassDefaultName, ltmRespHeadersPermStr=ltmRespHeadersPermStr, ltmIsessionProfileStatLzoOutErrors=ltmIsessionProfileStatLzoOutErrors, ltmLsnPoolTranslationPortRangeLow=ltmLsnPoolTranslationPortRangeLow, ltmDnsProfileLoggingEnabled=ltmDnsProfileLoggingEnabled, ltmMrPmbrSipRouterStatTotSuccessfulCalls=ltmMrPmbrSipRouterStatTotSuccessfulCalls, ltmWebaccCacheUriExclNumber=ltmWebaccCacheUriExclNumber, ltmLsnPoolStatLogAttempts=ltmLsnPoolStatLogAttempts, ltmDosAttackDataStatAttackDetected=ltmDosAttackDataStatAttackDetected, ltmDnsProfileProcessRd=ltmDnsProfileProcessRd, ltmServerSslData0rttMode=ltmServerSslData0rttMode, ltmPoolIpTosToServer=ltmPoolIpTosToServer, ltmPersistProfileAcrossVirtuals=ltmPersistProfileAcrossVirtuals, ltmServerSslDefaultName=ltmServerSslDefaultName, ltmServerSslStatDesBulkOffload=ltmServerSslStatDesBulkOffload, ltmSpdyProfilePriorityHandling=ltmSpdyProfilePriorityHandling, ltmDosApplicationLatencyBasedIpClientSideDefense=ltmDosApplicationLatencyBasedIpClientSideDefense, ltmXml=ltmXml, ltmPptpProfileStatName=ltmPptpProfileStatName, ltmDnsCacheForwardZoneTable=ltmDnsCacheForwardZoneTable, ltmServerSslStatDhGroupP256=ltmServerSslStatDhGroupP256, ltmWebAccelerationProfileStatCacheHits=ltmWebAccelerationProfileStatCacheHits, ltmDiametersessionProfileStatCurTrafficRate=ltmDiametersessionProfileStatCurTrafficRate, ltmClientSslStatRecordSize4k=ltmClientSslStatRecordSize4k, ltmTcpProfileDelayedAcks=ltmTcpProfileDelayedAcks, ltmVirtualServAvailabilityState=ltmVirtualServAvailabilityState, ltmClientSslStatOcspFwdpClientsslCertStatusReq=ltmClientSslStatOcspFwdpClientsslCertStatusReq, ltmIsessionProfileStatDedupInHitBytes=ltmIsessionProfileStatDedupInHitBytes, ltmConnPoolProfileGroup=ltmConnPoolProfileGroup, ltmConnPoolProfile=ltmConnPoolProfile, ltmPersistProfileUieRule=ltmPersistProfileUieRule, ltmTcpProfilePushFlag=ltmTcpProfilePushFlag, ltmOcspStaplingParametersStatusAge=ltmOcspStaplingParametersStatusAge, ltmSiprouterProfileStatVsName=ltmSiprouterProfileStatVsName, ltmMirrorPortMemberGroup=ltmMirrorPortMemberGroup, ltmSiprouterProfileStatTotMessagesReturned=ltmSiprouterProfileStatTotMessagesReturned, ltmAuth=ltmAuth, ltmServerSslStatSha256DigestOffload=ltmServerSslStatSha256DigestOffload, ltmAlgLogProfileStartDataElementsNumber=ltmAlgLogProfileStartDataElementsNumber, ltmHttpProfileHeaderErase=ltmHttpProfileHeaderErase, ltmVirtualAddrStatClientMaxConns=ltmVirtualAddrStatClientMaxConns, ltmFastHttpProfileDefaultName=ltmFastHttpProfileDefaultName, ltmMrPmbrSipRouterStatTotMessagesCannotReturn=ltmMrPmbrSipRouterStatTotMessagesCannotReturn, ltmHttpcompUriExclGroup=ltmHttpcompUriExclGroup, ltmVirtualAddrStatPvaMaxConns=ltmVirtualAddrStatPvaMaxConns, ltmMrPmbrSipRouterStatGroup=ltmMrPmbrSipRouterStatGroup, ltmTransAddrStat=ltmTransAddrStat, ltmServerSslC3dCertExtensionIncludes=ltmServerSslC3dCertExtensionIncludes, ltmHttpClassStatRespBucket1k=ltmHttpClassStatRespBucket1k, ltmMrPmbrSipSessionStatTemporarilyUnavailable=ltmMrPmbrSipSessionStatTemporarilyUnavailable, ltmSnatVlanSnatName=ltmSnatVlanSnatName, ltmClientSslStatOcspFwdpClientsslInvalidCertResp=ltmClientSslStatOcspFwdpClientsslInvalidCertResp, ltmHttpClassStatTable=ltmHttpClassStatTable, ltmMrPmbrSipRouterStatTotPassthruBytes=ltmMrPmbrSipRouterStatTotPassthruBytes, ltmHttpProfileHeaderInsert=ltmHttpProfileHeaderInsert, ltmHttpCompressionProfileName=ltmHttpCompressionProfileName, ltmFwNatDynamicPoolPcpSelfipName=ltmFwNatDynamicPoolPcpSelfipName, ltmUdpProfileLinkQosToClient=ltmUdpProfileLinkQosToClient, ltmSipsessionProfileStatServiceUnavailable503Sent=ltmSipsessionProfileStatServiceUnavailable503Sent, ltmSnatOrigAddrSnatName=ltmSnatOrigAddrSnatName, ltmHttpProfileRamcache=ltmHttpProfileRamcache, ltmClientSslFwdpCaCert=ltmClientSslFwdpCaCert, ltmPoolMemberDisabledParentType=ltmPoolMemberDisabledParentType, ltmClientSslSessionTicketTimeout=ltmClientSslSessionTicketTimeout, ltmV6rdProfileV6rdprefix=ltmV6rdProfileV6rdprefix, ltmConnPoolProfileStatResetStats=ltmConnPoolProfileStatResetStats, ltmDnsProfileNumber=ltmDnsProfileNumber, ltmFwContextStatStagedPacketsDrop=ltmFwContextStatStagedPacketsDrop, ltmIsessionProfileGroup=ltmIsessionProfileGroup, ltmServerSslFwdpBypassEnabled=ltmServerSslFwdpBypassEnabled, ltmMrPmbrDiameterSessionStatTotCapExcAns=ltmMrPmbrDiameterSessionStatTotCapExcAns, ltmRouteDomainStatConnectionFlowMiss=ltmRouteDomainStatConnectionFlowMiss, ltmHttpClassStatSgmlPrecompressBytes=ltmHttpClassStatSgmlPrecompressBytes, ltmTcpProfileDefaultName=ltmTcpProfileDefaultName, ltmServerSslStatConnectionMirrorPeerReady=ltmServerSslStatConnectionMirrorPeerReady, ltmDiameterrouterProfileStatTotMessagesMaxRetries=ltmDiameterrouterProfileStatTotMessagesMaxRetries, ltmV6rdProfileV6rdprefixlen=ltmV6rdProfileV6rdprefixlen, ltmMrPmbrSipSessionStatInvite=ltmMrPmbrSipSessionStatInvite, ltmPoolMemberEntry=ltmPoolMemberEntry, ltmFwNatDynamicPoolPcpEpoch=ltmFwNatDynamicPoolPcpEpoch, ltmSplitsessionclientProfileStatConnPeerTimeout=ltmSplitsessionclientProfileStatConnPeerTimeout, ltmDosApplicationHeavyUrlLatencyThreshold=ltmDosApplicationHeavyUrlLatencyThreshold, ltmDiametersessionProfileArrayAuthApplicationId=ltmDiametersessionProfileArrayAuthApplicationId, ltmFtpProfileGroup=ltmFtpProfileGroup, ltmMrPmbrSipRouterStatTotFailedOutgoingConnections=ltmMrPmbrSipRouterStatTotFailedOutgoingConnections, ltmDiametersessionProfileFirmwareRevision=ltmDiametersessionProfileFirmwareRevision, ltmAuthProfileStatNumber=ltmAuthProfileStatNumber, ltmLsnPoolFailureStatGroup=ltmLsnPoolFailureStatGroup, ltmClientSslStatRecordSize10k=ltmClientSslStatRecordSize10k, ltmHttpProfileRamUriPin=ltmHttpProfileRamUriPin, ltmVirtualServNumber=ltmVirtualServNumber, ltmIsessionProfileStatBzip2OutUses=ltmIsessionProfileStatBzip2OutUses, ltmWebAccelerationProfileStatCacheSize=ltmWebAccelerationProfileStatCacheSize, ltmMrPmbrDiameterSessionStatTotRespondUnroutable=ltmMrPmbrDiameterSessionStatTotRespondUnroutable, ltmMrPmbrSipSessionStatServerInternalError500Sent=ltmMrPmbrSipSessionStatServerInternalError500Sent, ltmDnsCacheAllowedQueryTime=ltmDnsCacheAllowedQueryTime, ltmRateFilterStatCname=ltmRateFilterStatCname, ltmClientSslStatAggregateRenegotiationsRejected=ltmClientSslStatAggregateRenegotiationsRejected, ltmRamUriInclTable=ltmRamUriInclTable, ltmIsessionProfileStatDedupInHitHistBucket8k=ltmIsessionProfileStatDedupInHitHistBucket8k, ltmDnsProfileStatCnameReqs=ltmDnsProfileStatCnameReqs, ltmSipProfileInsertRecordRoute=ltmSipProfileInsertRecordRoute, ltmServerSslStatMd5Digest=ltmServerSslStatMd5Digest, ltmSplitsessionserverProfileStatConnPeerReset=ltmSplitsessionserverProfileStatConnPeerReset, ltmIiopProfileTimeout=ltmIiopProfileTimeout, ltmPoolName=ltmPoolName, ltmHttpProfileStatV10Reqs=ltmHttpProfileStatV10Reqs, ltmStreamProfileConfigSource=ltmStreamProfileConfigSource, ltmSnatPoolStatEntry=ltmSnatPoolStatEntry, ltmDnsProfileStatHwMalformed=ltmDnsProfileStatHwMalformed, ltmUdpProfileName=ltmUdpProfileName, ltmVirtualAddrIcmpEcho=ltmVirtualAddrIcmpEcho, ltmRtspProfileTable=ltmRtspProfileTable, ltmPoolMemberStatGroup=ltmPoolMemberStatGroup, ltmVirtualAddrStatNumber=ltmVirtualAddrStatNumber, ltmAttrGroup=ltmAttrGroup, ltmHttp2ProfileActivationModesName=ltmHttp2ProfileActivationModesName, ltmClientSslStatConnectionMirrorPeerReady=ltmClientSslStatConnectionMirrorPeerReady, ltmHttpProfileCompressAllowHttp10=ltmHttpProfileCompressAllowHttp10, ltmV6rdProfileName=ltmV6rdProfileName, ltmRtspProfileName=ltmRtspProfileName, ltmMrPmbrDiameterRouterStatTotMessagesInternalError=ltmMrPmbrDiameterRouterStatTotMessagesInternalError, ltmServerSslProxySsl=ltmServerSslProxySsl, ltmFastL4ProfileStatRxunreach=ltmFastL4ProfileStatRxunreach, ltmPcpPrefixNumber=ltmPcpPrefixNumber, ltmHttpProfileRamcacheInsertAgeHeader=ltmHttpProfileRamcacheInsertAgeHeader, ltmDosAttackDataStatDrops1h=ltmDosAttackDataStatDrops1h, ltmHttpClassProfileHead=ltmHttpClassProfileHead, ltmServerSslStatDtlsv12=ltmServerSslStatDtlsv12, ltmDnsProfileStatFastDnsRespTc=ltmDnsProfileStatFastDnsRespTc, ltmSctpProfileServerSideMultihoming=ltmSctpProfileServerSideMultihoming, ltmFwNatStaticDestinationTranslationPoolEntry=ltmFwNatStaticDestinationTranslationPoolEntry, ltmSctpProfileSecret=ltmSctpProfileSecret, ltmTcpanalyticsProfileEntry=ltmTcpanalyticsProfileEntry, ltmPoolMember=ltmPoolMember, ltmFwRuleStatOverlapper=ltmFwRuleStatOverlapper, ltmServerSslStatSessCacheInvalidations=ltmServerSslStatSessCacheInvalidations, ltmSctpProfileStatUnconfirmedAddresses=ltmSctpProfileStatUnconfirmedAddresses, ltmVirtualServAuthEntry=ltmVirtualServAuthEntry, ltmConnPoolProfileStat=ltmConnPoolProfileStat, ltmClientSslStatShaDigest=ltmClientSslStatShaDigest, ltmVirtualAddrAddrType=ltmVirtualAddrAddrType, ltmVsStatusEnabledState=ltmVsStatusEnabledState, ltmHttpCompressionProfileCpusaverLow=ltmHttpCompressionProfileCpusaverLow, ltmServerSslStatFatalAlerts=ltmServerSslStatFatalAlerts, ltmPoolQueueTimeLimit=ltmPoolQueueTimeLimit, ltmFtpProfileStatDownloadRequests=ltmFtpProfileStatDownloadRequests, ltmRouteDomainStatResetStats=ltmRouteDomainStatResetStats, ltmPoolMemberStatPoolName=ltmPoolMemberStatPoolName, ltmLsnPrefixLsnPoolBackupPrefixAddressType=ltmLsnPrefixLsnPoolBackupPrefixAddressType, ltmMrPmbrDiameterRouterStatTotMessgesIn=ltmMrPmbrDiameterRouterStatTotMessgesIn, ltmClientSslCertKeyChainGroup=ltmClientSslCertKeyChainGroup, ltmBwcPolicyStatBytesPerSec=ltmBwcPolicyStatBytesPerSec, ltmSipsessionProfileStatBye=ltmSipsessionProfileStatBye, ltmHttpProfileStatVideoPostcompressBytes=ltmHttpProfileStatVideoPostcompressBytes, ltmDnsExpressStatXfrQueriesAclFailed=ltmDnsExpressStatXfrQueriesAclFailed, ltmHttp2ProfileStatHttp2ResponseBytes=ltmHttp2ProfileStatHttp2ResponseBytes, ltmDosApplicationTpsBasedIpClientSideDefense=ltmDosApplicationTpsBasedIpClientSideDefense)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmHttpCompressionProfileMinSize=ltmHttpCompressionProfileMinSize, ltmRuleConfigSource=ltmRuleConfigSource, ltmHttp2ProfileName=ltmHttp2ProfileName, ltmRamUriInclEntry=ltmRamUriInclEntry, ltmSctpProfileStatClosing=ltmSctpProfileStatClosing, ltmFastL4ProfileTcpHandshakeTimeout=ltmFastL4ProfileTcpHandshakeTimeout, ltmDnsSecurityStat=ltmDnsSecurityStat, ltmLsnLogProfileStartInboundAction=ltmLsnLogProfileStartInboundAction, ltmDiametersessionProfileWatchdogTimeout=ltmDiametersessionProfileWatchdogTimeout, ltmHttpcompContTypeInclEntry=ltmHttpcompContTypeInclEntry, ltmSipsessionProfileStatServerInternalError500Sent=ltmSipsessionProfileStatServerInternalError500Sent, ltmHttpProfileStatV9Reqs=ltmHttpProfileStatV9Reqs, ltmServerSslStatRsaKeyxchg=ltmServerSslStatRsaKeyxchg, ltmFastHttpProfileStatEntry=ltmFastHttpProfileStatEntry, ltmSctpProfileInitMaxrtx=ltmSctpProfileInitMaxrtx, ltmSctpProfileRtoMin=ltmSctpProfileRtoMin, ltmDosApplicationLatencyBasedMode=ltmDosApplicationLatencyBasedMode, ltmAuthProfileName=ltmAuthProfileName, ltmPptpProfileStatCallClearRequests=ltmPptpProfileStatCallClearRequests, ltmHttpCompressionProfileBrowserWorkarounds=ltmHttpCompressionProfileBrowserWorkarounds, ltmDnsCacheStatFailureResolv=ltmDnsCacheStatFailureResolv, ltmHttpProxyConnectProfileStatNumber=ltmHttpProxyConnectProfileStatNumber, ltmMrPmbrDiameterRouterStatMrType=ltmMrPmbrDiameterRouterStatMrType, ltmDosApplicationLatencyBasedSiteRateLimiting=ltmDosApplicationLatencyBasedSiteRateLimiting, ltmXmlProfileGroup=ltmXmlProfileGroup, ltmFlowEvictionPolicyStat=ltmFlowEvictionPolicyStat, ltmRouteDomainStatClientCurConns=ltmRouteDomainStatClientCurConns, ltmFallbackStatusGroup=ltmFallbackStatusGroup, ltmFwNatStaticSourceTranslationPoolIcmpEcho=ltmFwNatStaticSourceTranslationPoolIcmpEcho, ltmWebaccCacheUriOverGroup=ltmWebaccCacheUriOverGroup, ltmSctpProfileStatAcceptfails=ltmSctpProfileStatAcceptfails, ltmHttpcompUriInclUri=ltmHttpcompUriInclUri, ltmHttpProfileStatRespBucket32k=ltmHttpProfileStatRespBucket32k, ltmMrPmbrDiameterSessionStatEntry=ltmMrPmbrDiameterSessionStatEntry, ltmDiametersessionProfileStatTotResultCodeRcvd3xxx=ltmDiametersessionProfileStatTotResultCodeRcvd3xxx, ltmDos=ltmDos, ltmSnatpoolTransAddrTransAddrType=ltmSnatpoolTransAddrTransAddrType, ltmSnatNumber=ltmSnatNumber, ltmDiametersessionProfileStatTotDeviceWatchdogRequests=ltmDiametersessionProfileStatTotDeviceWatchdogRequests, ltmDiameterrouterProfileMirrored=ltmDiameterrouterProfileMirrored, ltmBwcPolicyStatBytesDropped=ltmBwcPolicyStatBytesDropped, ltmPoolMemberStatPvaTotConns=ltmPoolMemberStatPvaTotConns, ltmFtpProfileDefaultName=ltmFtpProfileDefaultName, ltmEncCookiesIndex=ltmEncCookiesIndex, ltmNetworkAttackDataStatVsName=ltmNetworkAttackDataStatVsName, ltmMrPmbrSipRouterStatTotMessagesPersistInUse=ltmMrPmbrSipRouterStatTotMessagesPersistInUse, ltmServerSslStatRc4BulkOffload=ltmServerSslStatRc4BulkOffload, ltmMrPmbrSipRouterStatTotMessagesRouted=ltmMrPmbrSipRouterStatTotMessagesRouted, ltmAlgLogProfileCsvFormat=ltmAlgLogProfileCsvFormat, ltmNodeAddrStatusAddr=ltmNodeAddrStatusAddr, ltmPptpProfileTable=ltmPptpProfileTable, ltmFwNatDynamicPoolMappingMode=ltmFwNatDynamicPoolMappingMode, ltmUserStatProfileStatEntry=ltmUserStatProfileStatEntry, ltmIiopProfileDefaultName=ltmIiopProfileDefaultName, ltmSplitsessionserverProfileEntry=ltmSplitsessionserverProfileEntry, ltmFwContextStatNumber=ltmFwContextStatNumber, ltmFwNatDynamicPoolStatLsnActiveHairpinConnections=ltmFwNatDynamicPoolStatLsnActiveHairpinConnections, ltmConnPoolProfileEntry=ltmConnPoolProfileEntry, ltmDiametersessionProfileResetOnTimeout=ltmDiametersessionProfileResetOnTimeout, ltmHttpCompressionProfileKeepAcceptEncoding=ltmHttpCompressionProfileKeepAcceptEncoding, ltmPersistProfileMirror=ltmPersistProfileMirror, ltmHttpProfileRamcacheObjectMinSize=ltmHttpProfileRamcacheObjectMinSize, ltmDnsCacheStatNameserverUpdates=ltmDnsCacheStatNameserverUpdates, ltmSnatStat=ltmSnatStat, ltmPoolMemberStatNumber=ltmPoolMemberStatNumber, ltmPcpProfileMapFilterLimit=ltmPcpProfileMapFilterLimit, ltmOcspStaplingParametersEntry=ltmOcspStaplingParametersEntry, ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns=ltmMrPmbrSipRouterStatCurAutoInitOutgoingConns, ltmPoolStatConnqDepth=ltmPoolStatConnqDepth, ltmVirtualServStatReqMrOut=ltmVirtualServStatReqMrOut, ltmFastHttpProfileStatGetReqs=ltmFastHttpProfileStatGetReqs, ltmHttpClassStatVideoPostcompressBytes=ltmHttpClassStatVideoPostcompressBytes, ltmVirtualAddrIsFloat=ltmVirtualAddrIsFloat, ltmHttpProfilePassthroughUnknownMethod=ltmHttpProfilePassthroughUnknownMethod, ltmRateFilterStatGroup=ltmRateFilterStatGroup, ltmFastHttpProfileGroup=ltmFastHttpProfileGroup, ltmFwIpintVirtualStatEntry=ltmFwIpintVirtualStatEntry, ltmWebAccelerationProfileStatRemoteMisses=ltmWebAccelerationProfileStatRemoteMisses, ltmDosApplicationEntry=ltmDosApplicationEntry, ltmSnatGroup=ltmSnatGroup, ltmHttpProfileEncCookies=ltmHttpProfileEncCookies, ltmMrPmbrSipRouterStatTotPayloadBytesOut=ltmMrPmbrSipRouterStatTotPayloadBytesOut, ltmAuthProfileStatMaxSessions=ltmAuthProfileStatMaxSessions, ltmHttpCompressionProfileVaryHeader=ltmHttpCompressionProfileVaryHeader, ltmPoolStatTable=ltmPoolStatTable, ltmNodeAddrStatPvaMaxConns=ltmNodeAddrStatPvaMaxConns, ltmRuleEventEntry=ltmRuleEventEntry, ltmAlgLogProfileStartDataElementsTable=ltmAlgLogProfileStartDataElementsTable, ltmServerSslStatTotalHandshakesOffload=ltmServerSslStatTotalHandshakesOffload, ltmLsnPoolStatPcpMapRequests=ltmLsnPoolStatPcpMapRequests, ltmDnsCacheStatTcpBytesOut=ltmDnsCacheStatTcpBytesOut, ltmDiameterrouterProfileStatTotAutoInitOutgoingConns=ltmDiameterrouterProfileStatTotAutoInitOutgoingConns, ltmFwNatStaticSourceTranslationPoolDescription=ltmFwNatStaticSourceTranslationPoolDescription, ltmHttpProfileHstsMode=ltmHttpProfileHstsMode, ltmNatVlanNatName=ltmNatVlanNatName, ltmTftpProfile=ltmTftpProfile, ltmConnPoolProfileStatName=ltmConnPoolProfileStatName, ltmTransAddrTcpIdleTimeout=ltmTransAddrTcpIdleTimeout, ltmClientSslStatDesBulk=ltmClientSslStatDesBulk, ltmHttpProfileStatJsPrecompressBytes=ltmHttpProfileStatJsPrecompressBytes, ltmHttpcompUriInclIndex=ltmHttpcompUriInclIndex, ltmLsnLogProfileStartOutboundAction=ltmLsnLogProfileStartOutboundAction, ltmDnsExpressStatIxfrQueries=ltmDnsExpressStatIxfrQueries, ltmSpdyProfileConcurrentStreamsPerConnection=ltmSpdyProfileConcurrentStreamsPerConnection, ltmIsessionProfileStatDedupInHitHistBucket256k=ltmIsessionProfileStatDedupInHitHistBucket256k, ltmPoolStatusReason=ltmPoolStatusReason, ltmSctpProfileHeartbeatInterval=ltmSctpProfileHeartbeatInterval, ltmHttpClassHostGroup=ltmHttpClassHostGroup, ltmHttpCompressionProfileStatResetStats=ltmHttpCompressionProfileStatResetStats, ltmDnsProfileGroup=ltmDnsProfileGroup, ltmClientSslStatPeercertInvalid=ltmClientSslStatPeercertInvalid, ltmFwNatDynamicPoolHairpinMode=ltmFwNatDynamicPoolHairpinMode, ltmSiprouterProfileStatTotIncomingConnections=ltmSiprouterProfileStatTotIncomingConnections, ltmVirtualModuleScoreGroup=ltmVirtualModuleScoreGroup, ltmVirtualModuleScoreVsName=ltmVirtualModuleScoreVsName, ltmFastHttpProfileResetOnTimeout=ltmFastHttpProfileResetOnTimeout, ltmMrPmbrSipSessionStatServiceUnavailable=ltmMrPmbrSipSessionStatServiceUnavailable, ltmFwNatDynamicPoolBlockLifetime=ltmFwNatDynamicPoolBlockLifetime, ltmFwNatDynamicPoolBlockIdleTimeout=ltmFwNatDynamicPoolBlockIdleTimeout, ltmHttpcompUriExclName=ltmHttpcompUriExclName, ltmRateFilterStatDropTailPkts=ltmRateFilterStatDropTailPkts, ltmLsnPoolStatActivePortBlocks=ltmLsnPoolStatActivePortBlocks, ltmPersistProfileEntry=ltmPersistProfileEntry, ltmHttpClassHostString=ltmHttpClassHostString, ltmIsessionProfileStatOutgoingConnsIdleMax=ltmIsessionProfileStatOutgoingConnsIdleMax, ltmDosWhiteIpNetmask=ltmDosWhiteIpNetmask, ltmPcpProfileRuleName=ltmPcpProfileRuleName, ltmWebaccCacheUriExclUri=ltmWebaccCacheUriExclUri, ltmTcpProfileMptcpSubflowmax=ltmTcpProfileMptcpSubflowmax, ltmRuleEventStatTotalExecutions=ltmRuleEventStatTotalExecutions, ltmBwcPolicyStatResetStats=ltmBwcPolicyStatResetStats, ltmFwNatDynamicPoolPortCount=ltmFwNatDynamicPoolPortCount, ltmPcpPrefixEntry=ltmPcpPrefixEntry, ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber=ltmMrPmbrSipRouterStatMaxRegistrationsPerSubscriber, ltmFtpProfileStatPassiveRequests=ltmFtpProfileStatPassiveRequests, ltmNodeAddrStatusReason=ltmNodeAddrStatusReason, ltmDosAttackDataStatTable=ltmDosAttackDataStatTable, ltmFastL4ProfileRttFromClient=ltmFastL4ProfileRttFromClient, ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse=ltmMrPmbrDiameterRouterStatTotMessagesPersistInUse, ltmServerSslNumber=ltmServerSslNumber, ltmUdpProfileStatRxbaddgram=ltmUdpProfileStatRxbaddgram, ltmServerSslStatSslv3=ltmServerSslStatSslv3, ltmFastL4ProfileTcpGenerateIsn=ltmFastL4ProfileTcpGenerateIsn, ltmHttp2ProfileStatHttp2RequestFrames=ltmHttp2ProfileStatHttp2RequestFrames, ltmServerSslStatDtlsv1=ltmServerSslStatDtlsv1, ltmWebaccCacheUriOverIndex=ltmWebaccCacheUriOverIndex, ltmClientSslStatEncryptedBytesOut=ltmClientSslStatEncryptedBytesOut, ltmNodeAddrStatDurationRateExceeded=ltmNodeAddrStatDurationRateExceeded, ltmFastHttpProfileConnpoolMaxSize=ltmFastHttpProfileConnpoolMaxSize, ltmPersistProfileCookieMethod=ltmPersistProfileCookieMethod, ltmDnsExpressStat=ltmDnsExpressStat, ltmMrPmbrSipSessionStatNotImplemented=ltmMrPmbrSipSessionStatNotImplemented, ltmSpdyProfileConnectionIdleTimeout=ltmSpdyProfileConnectionIdleTimeout, ltmNatTransAddr=ltmNatTransAddr, ltmStreamProfileStatReplaces=ltmStreamProfileStatReplaces, ltmIpsecalgProfileGroup=ltmIpsecalgProfileGroup, ltmClientSslStatSessionMirrorSuccess=ltmClientSslStatSessionMirrorSuccess, ltmFallbackStatusIndex=ltmFallbackStatusIndex, ltmNatVlanTransAddr=ltmNatVlanTransAddr, ltmHttpClassStatResp4xxCnt=ltmHttpClassStatResp4xxCnt, ltmHttpClassStatPlainPrecompressBytes=ltmHttpClassStatPlainPrecompressBytes, ltmIsessionProfileStatDedupInHits=ltmIsessionProfileStatDedupInHits, ltmSplitsessionclientProfileStatTable=ltmSplitsessionclientProfileStatTable, ltmHttpClassStatRamcacheMisses=ltmHttpClassStatRamcacheMisses, ltmTcpProfileSynMaxrtx=ltmTcpProfileSynMaxrtx, ltmIsessionProfileStat=ltmIsessionProfileStat, ltmPoolStat=ltmPoolStat, ltmMrPmbrSipSessionStatNumber=ltmMrPmbrSipSessionStatNumber, ltmVirtualServSourceAddressTranslationType=ltmVirtualServSourceAddressTranslationType, ltmDnsProfileStatNaptrReqs=ltmDnsProfileStatNaptrReqs, ltmIsessionProfileStatOutgoingConnsIdleTot=ltmIsessionProfileStatOutgoingConnsIdleTot, ltmHttpClassHostNumber=ltmHttpClassHostNumber, ltmSplitsessionclientProfileStatConnectionsMax=ltmSplitsessionclientProfileStatConnectionsMax, ltmTransAddrStatGroup=ltmTransAddrStatGroup, ltmTcpProfileDsack=ltmTcpProfileDsack, ltmRuleDefinition=ltmRuleDefinition, ltmFastHttpProfileStatPipelinedReqs=ltmFastHttpProfileStatPipelinedReqs, ltmFwContextStatEnforcedPacketsDefaultDrop=ltmFwContextStatEnforcedPacketsDefaultDrop, ltmHttpProfileStatV11Resp=ltmHttpProfileStatV11Resp, ltmHttpProfileStatJsPostcompressBytes=ltmHttpProfileStatJsPostcompressBytes, ltmRuleEventStatEntry=ltmRuleEventStatEntry, ltmPoolMbrStatusNumber=ltmPoolMbrStatusNumber, ltmVirtualModuleScoreEntry=ltmVirtualModuleScoreEntry, ltmHttpCompressionProfileStatJsPostcompressBytes=ltmHttpCompressionProfileStatJsPostcompressBytes, ltmAlgLogProfileStartDataAction=ltmAlgLogProfileStartDataAction, ltmFwNatStaticDestinationTranslationPoolPortCount=ltmFwNatStaticDestinationTranslationPoolPortCount, ltmXmlProfileStatGroup=ltmXmlProfileStatGroup, ltmRouteDomainStatServerTotConns=ltmRouteDomainStatServerTotConns, ltmFwNatDynamicPoolEntry=ltmFwNatDynamicPoolEntry, ltmConnPoolProfileSrcMaskType=ltmConnPoolProfileSrcMaskType, ltmHttpClassUrlRewrite=ltmHttpClassUrlRewrite, ltmSipsessionProfileStatRequestEntityTooLarge413Sent=ltmSipsessionProfileStatRequestEntityTooLarge413Sent, ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized=ltmFwNatDynamicPoolStatPcpErrorsNotAuthorized, ltmDnsSecurityStatEntry=ltmDnsSecurityStatEntry, ltmVirtualServStatHwSyncookies=ltmVirtualServStatHwSyncookies, ltmWebsocketProfileStatServerBytesRecdPreCompress=ltmWebsocketProfileStatServerBytesRecdPreCompress, ltmFwNatStaticSourceTranslationPoolName=ltmFwNatStaticSourceTranslationPoolName, ltmSctpProfileStatConfirmedAddresses=ltmSctpProfileStatConfirmedAddresses, ltmMrPmbrDiameterRouterStatTotIncomingConnections=ltmMrPmbrDiameterRouterStatTotIncomingConnections, ltmHttpProfileStatRamcacheEvictions=ltmHttpProfileStatRamcacheEvictions, ltmAlgLogProfileInboundAction=ltmAlgLogProfileInboundAction, ltmVirtualServStatCycleCount=ltmVirtualServStatCycleCount, ltmConnPoolProfileStatGroup=ltmConnPoolProfileStatGroup, ltmUdpProfileStatNumber=ltmUdpProfileStatNumber, ltmVirtualServPersistUseDefault=ltmVirtualServPersistUseDefault, ltmRespHeadersPermNumber=ltmRespHeadersPermNumber, ltmVirtualAddrAddr=ltmVirtualAddrAddr, ltmHttpClassRedirectLocation=ltmHttpClassRedirectLocation, ltmClientSslDefaultName=ltmClientSslDefaultName, ltmVirtualServPoolPoolName=ltmVirtualServPoolPoolName, ltmPersistProfileName=ltmPersistProfileName, ltmIsessionProfileStatDedupInMissHistBucket64k=ltmIsessionProfileStatDedupInMissHistBucket64k, ltmFwPolicyRuleStatEntry=ltmFwPolicyRuleStatEntry, ltmFastHttpProfileServerCloseTimeout=ltmFastHttpProfileServerCloseTimeout, ltmDiametersessionProfileStatTotRequestSent=ltmDiametersessionProfileStatTotRequestSent, ltmPoolMemberAvailabilityState=ltmPoolMemberAvailabilityState, ltmPcpProfileStatTable=ltmPcpProfileStatTable, ltmRuleEventStatTable=ltmRuleEventStatTable, ltmFwIpintGlobalStatSrcIpBlacklist=ltmFwIpintGlobalStatSrcIpBlacklist, ltmMrPmbrSipSessionStatAck=ltmMrPmbrSipSessionStatAck, ltmHttp2ProfileStatWindowUpdateFramesSent=ltmHttp2ProfileStatWindowUpdateFramesSent, ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns=ltmMrPmbrDiameterRouterStatTotAutoInitOutgoingConns, ltmPoolMemberStatResetStats=ltmPoolMemberStatResetStats, ltmPersistProfileCookieSecure=ltmPersistProfileCookieSecure, ltmTcpProfileStatOpen=ltmTcpProfileStatOpen, ltmTransAddrTable=ltmTransAddrTable, ltmUserStatProfileStatTable=ltmUserStatProfileStatTable, ltmDiameterrouterProfileSupportedApplications=ltmDiameterrouterProfileSupportedApplications, ltmSctpProfileStatExpires=ltmSctpProfileStatExpires, ltmDnsProfileDns64AdditionalRewrite=ltmDnsProfileDns64AdditionalRewrite, ltmNodeAddrStatPvaBytesIn=ltmNodeAddrStatPvaBytesIn, ltmDiameterrouterProfileStatName=ltmDiameterrouterProfileStatName, ltmNatStatTransAddrType=ltmNatStatTransAddrType, ltmRstCauseStatGroup=ltmRstCauseStatGroup, ltmPoolStatConnqServiced=ltmPoolStatConnqServiced, ltmFwPolicyRuleStatContextType=ltmFwPolicyRuleStatContextType, ltmWebaccCacheUriInclGroup=ltmWebaccCacheUriInclGroup, ltmHttpClassHeadString=ltmHttpClassHeadString, ltmClientSslStatMaxCompatConns=ltmClientSslStatMaxCompatConns, ltmUdpProfileDefaultName=ltmUdpProfileDefaultName, ltmAuthProfileStatErrorResults=ltmAuthProfileStatErrorResults, ltmEncCookiesEntry=ltmEncCookiesEntry, ltmClientSslProfileStat=ltmClientSslProfileStat, ltmNodeAddrNewSessionEnable=ltmNodeAddrNewSessionEnable, ltmHttpcompContTypeExclContentType=ltmHttpcompContTypeExclContentType, ltmWebaccCacheUriOverEntry=ltmWebaccCacheUriOverEntry, ltmSplitsessionclientProfilePeerIp=ltmSplitsessionclientProfilePeerIp, ltmSipsessionProfileStatNotAcceptableHere488Sent=ltmSipsessionProfileStatNotAcceptableHere488Sent, ltmSctpProfileClientSideMultihoming=ltmSctpProfileClientSideMultihoming, ltmSpdyProfileStatHttpResponseBytes=ltmSpdyProfileStatHttpResponseBytes, ltmFwNatDynamicPoolBlockSize=ltmFwNatDynamicPoolBlockSize, ltmDnsProfileStatSrvReqs=ltmDnsProfileStatSrvReqs, ltmFwNatDynamicPoolFailureStatTable=ltmFwNatDynamicPoolFailureStatTable, ltmHttpClassHostIndex=ltmHttpClassHostIndex)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmAlgLogProfileEndDataElementsIndex=ltmAlgLogProfileEndDataElementsIndex, ltmPoolMemberStatServerBytesIn=ltmPoolMemberStatServerBytesIn, ltmServerSslStatOcspServersslStapledResp=ltmServerSslStatOcspServersslStapledResp, ltmFlowEvictionPolicyStatResetStats=ltmFlowEvictionPolicyStatResetStats, ltmServerSslC3dCertLifespan=ltmServerSslC3dCertLifespan, ltmClientSslFwdpCertExtensionIncludes=ltmClientSslFwdpCertExtensionIncludes, ltmBwcPolicyStatEntry=ltmBwcPolicyStatEntry, ltmSpdyProfileStatSynReplyFramesSent=ltmSpdyProfileStatSynReplyFramesSent, ltmMrPmbrDiameterRouterStatTotMessagesDropped=ltmMrPmbrDiameterRouterStatTotMessagesDropped, ltmHttpProfilePassthroughOversizeClientHeaders=ltmHttpProfilePassthroughOversizeClientHeaders, ltmHttpProfileRamcacheMaxAge=ltmHttpProfileRamcacheMaxAge, ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx=ltmMrPmbrDiameterSessionStatTotResultCodeRcvd1xxx, ltmHttpProfileGroup=ltmHttpProfileGroup, ltmVirtualServVlanEntry=ltmVirtualServVlanEntry, ltmClientSslMaximumRecordSize=ltmClientSslMaximumRecordSize, ltmTcpProfileProxyOptions=ltmTcpProfileProxyOptions, ltmDnsCacheForwardZoneGroup=ltmDnsCacheForwardZoneGroup, ltmTcpProfileStatRxooseg=ltmTcpProfileStatRxooseg, ltmMrPmbrDiameterSessionStatTotBadMessages=ltmMrPmbrDiameterSessionStatTotBadMessages, ltmNodeAddrStatAddr=ltmNodeAddrStatAddr, ltmSctpProfileStatInactivePaths=ltmSctpProfileStatInactivePaths, ltmVirtualAddrDisabledParentType=ltmVirtualAddrDisabledParentType, ltmHttp2ProfileStatName=ltmHttp2ProfileStatName, ltmSipProfileInsertVia=ltmSipProfileInsertVia, ltmVirtualServ=ltmVirtualServ, ltmPoolMbrStatusDetailReason=ltmPoolMbrStatusDetailReason, ltmRtspProfileStat=ltmRtspProfileStat, ltmDnsProfileStatAnyReqs=ltmDnsProfileStatAnyReqs, ltmClientSslProfile=ltmClientSslProfile, ltmMrPmbrDiameterRouterStatTotMessagesUnroutable=ltmMrPmbrDiameterRouterStatTotMessagesUnroutable, ltmHttpClassHostEntry=ltmHttpClassHostEntry, ltmVirtualServStatName=ltmVirtualServStatName, ltmVirtualServStatus=ltmVirtualServStatus, ltmHttpCompressionProfileStatPlainPrecompressBytes=ltmHttpCompressionProfileStatPlainPrecompressBytes, ltmKnownMethodsName=ltmKnownMethodsName, ltmPoolMemberStatServerPktsIn=ltmPoolMemberStatServerPktsIn, ltmIsessionProfileStatDedupInHitHistBucket512k=ltmIsessionProfileStatDedupInHitHistBucket512k, ltmHttp2ProfileStatHttp2RequestBytes=ltmHttp2ProfileStatHttp2RequestBytes, ltmSplitsessionclientProfileStatEntry=ltmSplitsessionclientProfileStatEntry, ltmPptpProfileStatTotalCalls=ltmPptpProfileStatTotalCalls, ltmClientSslStatDhDssKeyxchg=ltmClientSslStatDhDssKeyxchg, ltmMrPmbrSipSessionStatSuccessful=ltmMrPmbrSipSessionStatSuccessful, ltmOcspStaplingParametersUrl=ltmOcspStaplingParametersUrl, ltmClientSslStatEncryptedBytesIn=ltmClientSslStatEncryptedBytesIn, ltmHttpCompressionProfileDefaultName=ltmHttpCompressionProfileDefaultName, ltmIsessionProfileCompressionLzo=ltmIsessionProfileCompressionLzo, ltmSipsessionProfileStatTooManyHops483Sent=ltmSipsessionProfileStatTooManyHops483Sent, ltmUdpProfileGroup=ltmUdpProfileGroup, ltmDosAttackDataStatNumber=ltmDosAttackDataStatNumber, ltmDiametersessionProfileStatTotRetransReturnedUnavail=ltmDiametersessionProfileStatTotRetransReturnedUnavail, ltmFwNatStaticSourceTranslationPoolNumber=ltmFwNatStaticSourceTranslationPoolNumber, ltmVirtualAddrStatClientPktsOut=ltmVirtualAddrStatClientPktsOut, ltmLsnPoolGroup=ltmLsnPoolGroup, ltmDnsServerStat=ltmDnsServerStat, ltmFastHttpProfileMssOverride=ltmFastHttpProfileMssOverride, ltmLsnPrefixLsnPool=ltmLsnPrefixLsnPool, ltmHttpProfilePassthroughPipeline=ltmHttpProfilePassthroughPipeline, ltmPersistProfileMaskType=ltmPersistProfileMaskType, ltmHttpProxyConnectProfileStatRespOtherCnt=ltmHttpProxyConnectProfileStatRespOtherCnt, ltmSipProfileNumber=ltmSipProfileNumber, ltmMirrorPortGroup=ltmMirrorPortGroup, ltmPptpProfileStatWanErrorNotifies=ltmPptpProfileStatWanErrorNotifies, ltmLsnLogProfileStartOutboundElementsName=ltmLsnLogProfileStartOutboundElementsName, ltmDiameterrouterProfileStatNumber=ltmDiameterrouterProfileStatNumber, ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent=ltmMrPmbrSipSessionStatUnsupportedUriScheme416Sent, ltmTransAddrAddrType=ltmTransAddrAddrType, ltmLsnPrefixAddrType=ltmLsnPrefixAddrType, ltmVirtualServTranslateAddr=ltmVirtualServTranslateAddr, ltmDnsCacheStatName=ltmDnsCacheStatName, ltmHttpProfileRespHeadersPerm=ltmHttpProfileRespHeadersPerm, ltmVirtualServStatPvaPktsOut=ltmVirtualServStatPvaPktsOut, ltmFwRuleStatRuleStatType=ltmFwRuleStatRuleStatType, ltmSplitsessionserverProfileDefaultName=ltmSplitsessionserverProfileDefaultName, ltmDiameterrouterProfileStatTotFailedOutgoingConnections=ltmDiameterrouterProfileStatTotFailedOutgoingConnections, ltmMrPmbrSipSessionStatGlobalFailures=ltmMrPmbrSipSessionStatGlobalFailures, ltmTcpProfileEarlyRetransmit=ltmTcpProfileEarlyRetransmit, ltmRules=ltmRules, ltmXmlProfileStatNumDocumentsWithNoMatches=ltmXmlProfileStatNumDocumentsWithNoMatches, ltmDnsSecurityQueryTypeInclusion=ltmDnsSecurityQueryTypeInclusion, ltmHttpProfileStatPrecompressBytes=ltmHttpProfileStatPrecompressBytes, ltmServerSslStatCurrentActiveHandshakes=ltmServerSslStatCurrentActiveHandshakes, ltmTcpProfileMptcpFallback=ltmTcpProfileMptcpFallback, ltmAuthProfileCredentialSource=ltmAuthProfileCredentialSource, ltmDosAttackDataStatDropsRate=ltmDosAttackDataStatDropsRate, ltmFwNatDynamicPoolStatLsnBackupPoolTranslations=ltmFwNatDynamicPoolStatLsnBackupPoolTranslations, ltmXmlProfileConfigSource=ltmXmlProfileConfigSource, ltmServerSslTable=ltmServerSslTable, ltmMirrorPortMemberTable=ltmMirrorPortMemberTable, ltmHttpProfileStatRamcacheMissesAll=ltmHttpProfileStatRamcacheMissesAll, ltmWebaccCacheUriOverName=ltmWebaccCacheUriOverName, ltmMrPmbrDiameter=ltmMrPmbrDiameter, ltmLsnPoolStatTotalPortBlocks=ltmLsnPoolStatTotalPortBlocks, ltmMrPmbrSipRouterStatTotOutgoingConnections=ltmMrPmbrSipRouterStatTotOutgoingConnections, ltmNodeAddrStatServerBytesOut=ltmNodeAddrStatServerBytesOut, bigipLocalTMGroups=bigipLocalTMGroups, ltmPoolStatConnqAllAgeMax=ltmPoolStatConnqAllAgeMax, ltmServerSslStatEdhRsaKeyxchg=ltmServerSslStatEdhRsaKeyxchg, ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv=ltmWebsocketProfileStatCloseRsnEpGoawayServerRecv, ltmHttpCompressionProfileStatGroup=ltmHttpCompressionProfileStatGroup, ltmKnownMethodsTable=ltmKnownMethodsTable, ltmDiametersessionProfileOriginRealm=ltmDiametersessionProfileOriginRealm, ltmCompUriInclTable=ltmCompUriInclTable, ltmHttpProfileInsertXforwardedFor=ltmHttpProfileInsertXforwardedFor, ltmWebaccCacheUriInclName=ltmWebaccCacheUriInclName, ltmFwAdminIpRuleStatEntry=ltmFwAdminIpRuleStatEntry, ltmClientSslStatOcspFwdpClientsslCachedResp=ltmClientSslStatOcspFwdpClientsslCachedResp, ltmTransAddrConnLimit=ltmTransAddrConnLimit, ltmPcpProfileMinMappingLifetime=ltmPcpProfileMinMappingLifetime, ltmWebsocketProfileStatTextFramesServerRecv=ltmWebsocketProfileStatTextFramesServerRecv, ltmDnsQueryFilterEntry=ltmDnsQueryFilterEntry, ltmSipsessionProfileStatAddressIncomplete=ltmSipsessionProfileStatAddressIncomplete, ltmSipsessionProfileStatOther=ltmSipsessionProfileStatOther, ltmClientSslStatCachedCerts=ltmClientSslStatCachedCerts, ltmSnatpoolTransAddrSnatpoolName=ltmSnatpoolTransAddrSnatpoolName, ltmDiameterrouterProfileTransactionTimeout=ltmDiameterrouterProfileTransactionTimeout, ltmSiprouterProfileStatTotMessagesInRetry=ltmSiprouterProfileStatTotMessagesInRetry, ltmPoolStatTotPvaAssistConn=ltmPoolStatTotPvaAssistConn, ltmPoolMemberEnabledState=ltmPoolMemberEnabledState, ltmCompContTypeInclEntry=ltmCompContTypeInclEntry, ltmUdpProfileEntry=ltmUdpProfileEntry, ltmWebaccCacheUriPinTable=ltmWebaccCacheUriPinTable, ltmClientSslSslSignHash=ltmClientSslSslSignHash, ltmHttpClassCookGroup=ltmHttpClassCookGroup, ltmWebsocketProfileEntry=ltmWebsocketProfileEntry, ltmHttp2ProfileEntry=ltmHttp2ProfileEntry, ltmDiametersessionProfileStatTotRetransmissionTimeout=ltmDiametersessionProfileStatTotRetransmissionTimeout, PYSNMP_MODULE_ID=bigipLocalTM, ltmNatStatNumber=ltmNatStatNumber, ltmIsessionProfileStatDedupOutHitHistBucket1k=ltmIsessionProfileStatDedupOutHitHistBucket1k, ltmOcspStaplingParametersDnsResolver=ltmOcspStaplingParametersDnsResolver, ltmServerSslAllowExpiredCrl=ltmServerSslAllowExpiredCrl, ltmServerSslStatBadRecords=ltmServerSslStatBadRecords, ltmServerSslStatConnectionMirrorHaTimeout=ltmServerSslStatConnectionMirrorHaTimeout, ltmHttpClassStatV10Reqs=ltmHttpClassStatV10Reqs, ltmMrPmbrSipSessionStatUnsupportedUriScheme=ltmMrPmbrSipSessionStatUnsupportedUriScheme, ltmSnatPoolStatServerPktsOut=ltmSnatPoolStatServerPktsOut, ltmTcpanalyticsProfileCollectContinent=ltmTcpanalyticsProfileCollectContinent, ltmClientSslStatTlsv12=ltmClientSslStatTlsv12, ltmFwPolicyRuleStatCounter=ltmFwPolicyRuleStatCounter, ltmVirtualServStatClientPktsIn=ltmVirtualServStatClientPktsIn, ltmPoolNumber=ltmPoolNumber, ltmHttpProfileCompContTypeIncl=ltmHttpProfileCompContTypeIncl, ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests=ltmMrPmbrDiameterSessionStatTotDisconnectPeerRequests, ltmDnsProfileStatSoaReqs=ltmDnsProfileStatSoaReqs, ltmDiametersessionProfileStatTotRespondUnroutable=ltmDiametersessionProfileStatTotRespondUnroutable, ltmTcpanalyticsProfileNumber=ltmTcpanalyticsProfileNumber, ltmAuthProfileRuleName=ltmAuthProfileRuleName, ltmDnsCacheStatNameserverMisses=ltmDnsCacheStatNameserverMisses, ltmDnsCacheStatRrsetInserts=ltmDnsCacheStatRrsetInserts, ltmVirtualServAuthGroup=ltmVirtualServAuthGroup, ltmFastHttpProfileStatRespParseErrors=ltmFastHttpProfileStatRespParseErrors, ltmDnsCacheUseTcp=ltmDnsCacheUseTcp, ltmSiprouterProfileStatTotCancelledCalls=ltmSiprouterProfileStatTotCancelledCalls, ltmWebAccelerationProfileCacheObjectMaxSize=ltmWebAccelerationProfileCacheObjectMaxSize, ltmUserStatProfileName=ltmUserStatProfileName, ltmHttpProfileHstsPreload=ltmHttpProfileHstsPreload, ltmServerSslStatTlsv13=ltmServerSslStatTlsv13, ltmVirtualServIpProto=ltmVirtualServIpProto, ltmDnsCacheStatRrsetEvictions=ltmDnsCacheStatRrsetEvictions, ltmLsnPoolStatGroup=ltmLsnPoolStatGroup, ltmServerSslConfigSource=ltmServerSslConfigSource, ltmRateFilterStatDropRandBytes=ltmRateFilterStatDropRandBytes, ltmIsessionProfileStatDeflateInUses=ltmIsessionProfileStatDeflateInUses, ltmClientSslAllowNonssl=ltmClientSslAllowNonssl, ltmSipProfileName=ltmSipProfileName, ltmPoolStatResetStats=ltmPoolStatResetStats, ltmPcpProfileStatPcpMapRequests=ltmPcpProfileStatPcpMapRequests, ltmConnPoolProfileMaxAge=ltmConnPoolProfileMaxAge, ltmHttpCompressionProfileSelective=ltmHttpCompressionProfileSelective, ltmSnatStatClientTotConns=ltmSnatStatClientTotConns, ltmVsStatusDetailReason=ltmVsStatusDetailReason, ltmDnsCacheForwardZoneNumber=ltmDnsCacheForwardZoneNumber, ltmMrPmbrSipSessionStatDropsReq=ltmMrPmbrSipSessionStatDropsReq, ltmAlgLogProfileStartDataElementsEntry=ltmAlgLogProfileStartDataElementsEntry, ltmFwIpintGlobalStatTable=ltmFwIpintGlobalStatTable, ltmIsessionProfileStatDeflateInBytesOpt=ltmIsessionProfileStatDeflateInBytesOpt, ltmSipsessionProfileStatNumber=ltmSipsessionProfileStatNumber, ltmNodeAddrEntry=ltmNodeAddrEntry, ltmHttpProfileStatSgmlPrecompressBytes=ltmHttpProfileStatSgmlPrecompressBytes, ltmClientSslStatDecryptedBytesIn=ltmClientSslStatDecryptedBytesIn, ltmPoolMemberStatRespMrIn=ltmPoolMemberStatRespMrIn, ltmMrPmbrSipSessionStatNegotiate=ltmMrPmbrSipSessionStatNegotiate, ltmTransAddrStatServerCurConns=ltmTransAddrStatServerCurConns, ltmHttp2ProfileStatGoawayFramesSent=ltmHttp2ProfileStatGoawayFramesSent, ltmNatVlanTransAddrType=ltmNatVlanTransAddrType, ltmFastHttpProfile=ltmFastHttpProfile, ltmVirtualAddrTable=ltmVirtualAddrTable, ltmDnsProfileStatOpcodeNotify=ltmDnsProfileStatOpcodeNotify, ltmSplitsessionserverProfileStatConnPeerTimeout=ltmSplitsessionserverProfileStatConnPeerTimeout, ltmDiameterrouterProfileStatGroup=ltmDiameterrouterProfileStatGroup, ltmMrPmbrSipRouterStatTotPassthruConnections=ltmMrPmbrSipRouterStatTotPassthruConnections, ltmTcpProfileStatAccepts=ltmTcpProfileStatAccepts, ltmXmlProfileStatNumber=ltmXmlProfileStatNumber, ltmAlgLogProfileStartControlElements=ltmAlgLogProfileStartControlElements, ltmRtspProfileGroup=ltmRtspProfileGroup, ltmNatStatServerPktsOut=ltmNatStatServerPktsOut, ltmPoolDescription=ltmPoolDescription, ltmSpdyProfileProtocolVersionsEntry=ltmSpdyProfileProtocolVersionsEntry, ltmHttpClassStatImagePrecompressBytes=ltmHttpClassStatImagePrecompressBytes, ltmHttpCompressionProfileStatOtherPrecompressBytes=ltmHttpCompressionProfileStatOtherPrecompressBytes, ltmSctpProfileRtoInitial=ltmSctpProfileRtoInitial, ltmFwIpintGlobalStatDstIpBlacklist=ltmFwIpintGlobalStatDstIpBlacklist, ltmDnsProfileStatZoneAxfr=ltmDnsProfileStatZoneAxfr, ltmOcspStaplingParametersProxyServerPool=ltmOcspStaplingParametersProxyServerPool, ltmHttpClassHeadTable=ltmHttpClassHeadTable, ltmCompContTypeInclGroup=ltmCompContTypeInclGroup, ltmClientSslStatDestinationIpBypasses=ltmClientSslStatDestinationIpBypasses, ltmClientSslStatTotCompatConns=ltmClientSslStatTotCompatConns, ltmHttpCompressionProfileStatNullCompressBytes=ltmHttpCompressionProfileStatNullCompressBytes, ltmDnsProfileStatOpcodeUpdate=ltmDnsProfileStatOpcodeUpdate, ltmPoolMinUpMemberAction=ltmPoolMinUpMemberAction, ltmDnsCacheStatRrsetHits=ltmDnsCacheStatRrsetHits, ltmSipsessionProfileStatOptions=ltmSipsessionProfileStatOptions, ltmOcspStaplingParametersTimeout=ltmOcspStaplingParametersTimeout, ltmDiametersessionProfileStatTotResultCodeSent2xxx=ltmDiametersessionProfileStatTotResultCodeSent2xxx, ltmVirtualServAuthVsName=ltmVirtualServAuthVsName, ltmDosApplicationTpsBasedSiteMinimumTps=ltmDosApplicationTpsBasedSiteMinimumTps, ltmPersistProfileTimeout=ltmPersistProfileTimeout, ltmFastL4ProfileLateBinding=ltmFastL4ProfileLateBinding, ltmIsessionProfileStatResetStats=ltmIsessionProfileStatResetStats, ltmClientSslProxySslPassthrough=ltmClientSslProxySslPassthrough, ltmRuleEventPriority=ltmRuleEventPriority, ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops=ltmIpsecalgProfileStatPendingIkeConnectionLimitDrops, ltmMrPmbrSipRouterStatTotMessagesInRetry=ltmMrPmbrSipRouterStatTotMessagesInRetry, ltmHttpProxyConnectProfileStat=ltmHttpProxyConnectProfileStat, ltmClientSslMode=ltmClientSslMode, ltmSpdyProfileProtocolVersionsProtocolVersions=ltmSpdyProfileProtocolVersionsProtocolVersions, ltmHttpClassUriNumber=ltmHttpClassUriNumber, ltmHttpProfileStatRespBucket64k=ltmHttpProfileStatRespBucket64k, ltmSiprouterProfileStatTotMessagesQueueFull=ltmSiprouterProfileStatTotMessagesQueueFull, ltmFastL4ProfileStatNumber=ltmFastL4ProfileStatNumber, ltmVirtualServPersistProfileName=ltmVirtualServPersistProfileName, ltmTcpProfileMptcpRxmitmin=ltmTcpProfileMptcpRxmitmin, ltmFastHttpProfileStatServerConnects=ltmFastHttpProfileStatServerConnects, ltmPptp=ltmPptp, ltmPoolMemberTable=ltmPoolMemberTable, ltmStreamProfileStatEntry=ltmStreamProfileStatEntry, ltmSipProfileDefaultName=ltmSipProfileDefaultName, ltmDnsProfileDnssecEnabled=ltmDnsProfileDnssecEnabled, ltmFastHttpProfileIdleTimeout=ltmFastHttpProfileIdleTimeout, ltmTcpProfileDelayWindowControl=ltmTcpProfileDelayWindowControl, ltmDnsExpressStatNumber=ltmDnsExpressStatNumber, ltmPoolStatConnqAgeEdm=ltmPoolStatConnqAgeEdm, ltmClientSslFwdpCaPassphrase=ltmClientSslFwdpCaPassphrase, ltmDnsCacheStatUdpBytesIn=ltmDnsCacheStatUdpBytesIn, ltmIpsecalgProfileStatNumber=ltmIpsecalgProfileStatNumber, ltmMrPmbrDiameterSessionStatAddr=ltmMrPmbrDiameterSessionStatAddr, ltmAlgLogProfileName=ltmAlgLogProfileName, ltmMrPmbrDiameterRouterStatTotPayloadBytesIn=ltmMrPmbrDiameterRouterStatTotPayloadBytesIn, ltmServerSslC3dEnabled=ltmServerSslC3dEnabled, ltmPoolStatPvaPktsIn=ltmPoolStatPvaPktsIn, ltmAuthProfileStatGroup=ltmAuthProfileStatGroup, ltmNodeAddrStatServerBytesIn=ltmNodeAddrStatServerBytesIn, ltmNodeAddrStatPvaPktsOut=ltmNodeAddrStatPvaPktsOut)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmPoolMemberStatConnqAgeMax=ltmPoolMemberStatConnqAgeMax, ltmServerSslStatConnectionMirrorHaHsSuccess=ltmServerSslStatConnectionMirrorHaHsSuccess, ltmVirtualAddrStatPvaPktsOut=ltmVirtualAddrStatPvaPktsOut, ltmIsessionProfileStatDedupOutBytesOpt=ltmIsessionProfileStatDedupOutBytesOpt, ltmIsessionProfileStatDedupOutHitHistBucket8k=ltmIsessionProfileStatDedupOutHitHistBucket8k, ltmIsessionProfileStatBzip2OutBytesRaw=ltmIsessionProfileStatBzip2OutBytesRaw, ltmClientSslStatEcdheEcdsaKeyxchg=ltmClientSslStatEcdheEcdsaKeyxchg, ltmIpsecalgProfileStatTunnelCreates=ltmIpsecalgProfileStatTunnelCreates, ltmDiametersessionProfileOriginHostRewrite=ltmDiametersessionProfileOriginHostRewrite, ltmMrPmbrSipRouterStatCurOutgoingStreams=ltmMrPmbrSipRouterStatCurOutgoingStreams, ltmFwNatStaticSourceTranslationPoolProxyArp=ltmFwNatStaticSourceTranslationPoolProxyArp, ltmMrPmbrDiameterSessionStatGroup=ltmMrPmbrDiameterSessionStatGroup, ltmHttpcompUriExclTable=ltmHttpcompUriExclTable, ltmConnPoolProfileStatEntry=ltmConnPoolProfileStatEntry, ltmTcpanalytics=ltmTcpanalytics, ltmSiprouterProfileStatTotMessagesRouted=ltmSiprouterProfileStatTotMessagesRouted, ltmFwNatStaticDestinationTranslationPoolStatNumber=ltmFwNatStaticDestinationTranslationPoolStatNumber, ltmServerSslCiphers=ltmServerSslCiphers, ltmWebaccCacheUriPinEntry=ltmWebaccCacheUriPinEntry, ltmClientSslStatOcspStaplingOcspConnHttpErrors=ltmClientSslStatOcspStaplingOcspConnHttpErrors, ltmConnPoolProfileName=ltmConnPoolProfileName, ltmUdpProfileStatResetStats=ltmUdpProfileStatResetStats, ltmRtspProfileMulticastRedirect=ltmRtspProfileMulticastRedirect, ltmDosAttackDataStat=ltmDosAttackDataStat, ltmFtpProfileDataPort=ltmFtpProfileDataPort, ltmPptpProfileStatStartReplies=ltmPptpProfileStatStartReplies, ltmFwNatDynamicPoolInboundMode=ltmFwNatDynamicPoolInboundMode, ltmDosWhiteIpGroup=ltmDosWhiteIpGroup, ltmWebAccelerationProfileStatGroup=ltmWebAccelerationProfileStatGroup, ltmFwAdminIpRuleStatGroup=ltmFwAdminIpRuleStatGroup, ltmIsessionProfileStatDedupInMissHistBucket8k=ltmIsessionProfileStatDedupInMissHistBucket8k, ltmSctpProfileStatNumber=ltmSctpProfileStatNumber, ltmHttp2ProfileConnectionIdleTimeout=ltmHttp2ProfileConnectionIdleTimeout, ltmIsessionProfileStatDedupOutMissHistBucket8k=ltmIsessionProfileStatDedupOutMissHistBucket8k, ltmDnsProfileStatOpcodeOther=ltmDnsProfileStatOpcodeOther, ltmSctpProfileStatActivePaths=ltmSctpProfileStatActivePaths, ltmDosApplicationTpsBasedSiteClientSideDefense=ltmDosApplicationTpsBasedSiteClientSideDefense, ltmMrPmbrSipRouterStatResetStats=ltmMrPmbrSipRouterStatResetStats, ltmFwNatDynamicPoolStatName=ltmFwNatDynamicPoolStatName, ltmSnatPoolTable=ltmSnatPoolTable, ltmOcspStaplingParametersTable=ltmOcspStaplingParametersTable, ltmVirtualServStatEphemeralPktsIn=ltmVirtualServStatEphemeralPktsIn, ltmWebaccCacheUriInclEntry=ltmWebaccCacheUriInclEntry, ltmHttpProxyConnectProfileStatV9Resp=ltmHttpProxyConnectProfileStatV9Resp, ltmRamUriPinTable=ltmRamUriPinTable, ltmDnsQueryFilterNumber=ltmDnsQueryFilterNumber, ltmVirtualAddrStatClientCurConns=ltmVirtualAddrStatClientCurConns, ltmServerSslAuthenticateName=ltmServerSslAuthenticateName, ltmDnsCachePrefetchKey=ltmDnsCachePrefetchKey, ltmNatEntry=ltmNatEntry, ltmSnatPoolNumber=ltmSnatPoolNumber, ltmXmlProfileDefaultName=ltmXmlProfileDefaultName, ltmUserStatProfileStatResetStats=ltmUserStatProfileStatResetStats, ltmOcspStaplingParametersCacheTimeout=ltmOcspStaplingParametersCacheTimeout, ltmMrPmbrSipRouterStatTotMessagesNoConnection=ltmMrPmbrSipRouterStatTotMessagesNoConnection, ltmRateFilterDirection=ltmRateFilterDirection, ltmSctpProfileResetOnTimeout=ltmSctpProfileResetOnTimeout, ltmMrPmbrDiameterSessionStatCurTimeoutRatio=ltmMrPmbrDiameterSessionStatCurTimeoutRatio, ltmSiprouterProfileStatTotMessagesConnectionClosed=ltmSiprouterProfileStatTotMessagesConnectionClosed, ltmClientSslStatMd5Digest=ltmClientSslStatMd5Digest, ltmIsessionProfileTable=ltmIsessionProfileTable, ltmDnsProfileStatRejects=ltmDnsProfileStatRejects, ltmFwNatDynamicPoolStatLsnActiveTranslations=ltmFwNatDynamicPoolStatLsnActiveTranslations, ltmTcpProfileIpTosToClient=ltmTcpProfileIpTosToClient, ltmHttpProxyConnectProfileName=ltmHttpProxyConnectProfileName, ltmVirtualServType=ltmVirtualServType, ltmDnsProfileStatCheckingDisabled=ltmDnsProfileStatCheckingDisabled, ltmHttpProfileCompUriIncl=ltmHttpProfileCompUriIncl, ltmLsnPoolMemberCount=ltmLsnPoolMemberCount, ltmTransAddrStatServerPktsOut=ltmTransAddrStatServerPktsOut, ltmServerSslStatOcspServersslResponseErrors=ltmServerSslStatOcspServersslResponseErrors, ltmSiprouterProfileStat=ltmSiprouterProfileStat, ltmDiametersessionProfileStatTotResultCodeRcvd4xxx=ltmDiametersessionProfileStatTotResultCodeRcvd4xxx, ltmDiameterrouterProfileStatTotFailedPassthruConnections=ltmDiameterrouterProfileStatTotFailedPassthruConnections, ltmSiprouterProfileStatTotMessagesStandbyDropped=ltmSiprouterProfileStatTotMessagesStandbyDropped, ltmPoolMemberWeight=ltmPoolMemberWeight, ltmDiametersessionProfileAcctApplicationId=ltmDiametersessionProfileAcctApplicationId, ltmDiameterrouterProfileStatCurOutgoingStreams=ltmDiameterrouterProfileStatCurOutgoingStreams, ltmWebsocketProfileStatResetStats=ltmWebsocketProfileStatResetStats, ltmSipProfileStatGroup=ltmSipProfileStatGroup, ltmSnatVlanNumber=ltmSnatVlanNumber, ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx=ltmMrPmbrDiameterSessionStatTotResultCodeSent4xxx, ltmAlgLogProfileEndControlElementsElements=ltmAlgLogProfileEndControlElementsElements, ltmWebAccelerationProfileCacheMaxAge=ltmWebAccelerationProfileCacheMaxAge, ltmFwNatDynamicPoolDsliteTunnel=ltmFwNatDynamicPoolDsliteTunnel, ltmPersistProfileGroup=ltmPersistProfileGroup, ltmSnatPoolEntry=ltmSnatPoolEntry, ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs=ltmFwNatStaticDestinationTranslationPoolStatSubscrIdErrs, ltmLsnPoolVlanEntry=ltmLsnPoolVlanEntry, ltmXmlProfileStatEntry=ltmXmlProfileStatEntry, ltmLsnPoolStatPcpAnnounceResponsesUcast=ltmLsnPoolStatPcpAnnounceResponsesUcast, ltmFwIpintVirtualStatSrcIpBlacklist=ltmFwIpintVirtualStatSrcIpBlacklist, ltmLsnPoolStatResetStats=ltmLsnPoolStatResetStats, ltmDiametersessionProfileStatTotCreditControlRequests=ltmDiametersessionProfileStatTotCreditControlRequests, ltmMrPmbrSipSessionStatTooManyHops=ltmMrPmbrSipSessionStatTooManyHops, ltmDiametersessionProfileRetransmissionTimeout=ltmDiametersessionProfileRetransmissionTimeout, ltmDiameterrouterProfileTable=ltmDiameterrouterProfileTable, ltmVirtualServProfileContext=ltmVirtualServProfileContext, ltmClientSslStatOcspFwdpClientsslRevokedResp=ltmClientSslStatOcspFwdpClientsslRevokedResp, ltmDnsProfileHwCache=ltmDnsProfileHwCache, ltmSctpProfileStatName=ltmSctpProfileStatName, ltmDnsProfileStatDns64Failures=ltmDnsProfileStatDns64Failures, ltmLsnPoolStatNumber=ltmLsnPoolStatNumber, ltmIpsecalgProfileStatTunnelTeardowns=ltmIpsecalgProfileStatTunnelTeardowns, ltmMrPmbrSipRouterStatCurrActiveCalls=ltmMrPmbrSipRouterStatCurrActiveCalls, ltmWebsocketProfileStatBinaryFramesClientRecv=ltmWebsocketProfileStatBinaryFramesClientRecv, ltmFwNatDynamicPoolName=ltmFwNatDynamicPoolName, ltmPcpProfileMapRecycleDelay=ltmPcpProfileMapRecycleDelay, ltmAlgLogProfileEndDataElementsName=ltmAlgLogProfileEndDataElementsName, ltmWebaccCacheUriPinIndex=ltmWebaccCacheUriPinIndex, ltmDosWhiteIp=ltmDosWhiteIp, ltmClientSslStatConnectionMirrorHaTimeout=ltmClientSslStatConnectionMirrorHaTimeout, ltmDnsServerStatXfrNotifies=ltmDnsServerStatXfrNotifies, ltmDiameterrouterProfileStatTotMessagesCannotReturn=ltmDiameterrouterProfileStatTotMessagesCannotReturn, ltmIsessionProfileStatDedupInMissBytes=ltmIsessionProfileStatDedupInMissBytes, ltmClientSslStatAesGcmBulk=ltmClientSslStatAesGcmBulk, ltmVirtualModuleScoreScore=ltmVirtualModuleScoreScore, ltmPptpProfileStatOutgoingCallReplies=ltmPptpProfileStatOutgoingCallReplies, ltmPoolMemberStatPort=ltmPoolMemberStatPort, ltmPoolStatMsgMrIn=ltmPoolStatMsgMrIn, ltmAuthProfileStatResetStats=ltmAuthProfileStatResetStats, ltmClientSslStatSha384Digest=ltmClientSslStatSha384Digest, ltmWebAccelerationProfileCacheObjectMinSize=ltmWebAccelerationProfileCacheObjectMinSize, ltmUdpProfileStatEntry=ltmUdpProfileStatEntry, ltmPoolStatMsgMrOut=ltmPoolStatMsgMrOut, ltmDiameterrouterProfilePerPeerStats=ltmDiameterrouterProfilePerPeerStats, ltmSpdyProfileCompressionLevel=ltmSpdyProfileCompressionLevel, ltmDnsProfileDnsCache=ltmDnsProfileDnsCache, ltmPcpProfileStatPcpErrorsNotAuthorized=ltmPcpProfileStatPcpErrorsNotAuthorized, ltmFwPolicyRuleStatContextName=ltmFwPolicyRuleStatContextName, ltmSplitsessionclientProfileNumber=ltmSplitsessionclientProfileNumber, ltmSiprouterProfileStatTotFailedOutgoingConnections=ltmSiprouterProfileStatTotFailedOutgoingConnections, ltmXmlProfileNamespaceMappingsTable=ltmXmlProfileNamespaceMappingsTable, ltmNodeAddrDynamicRatio=ltmNodeAddrDynamicRatio, ltmPoolStatServerTotConns=ltmPoolStatServerTotConns, ltmPoolMemberStatPvaPktsOut=ltmPoolMemberStatPvaPktsOut, ltmDnsProfileStatEntry=ltmDnsProfileStatEntry, ltmIsessionProfileStatGroup=ltmIsessionProfileStatGroup, ltmPoolActionOnServiceDown=ltmPoolActionOnServiceDown, ltmRateFilterBurst=ltmRateFilterBurst, ltmDnsProfileStatResponses=ltmDnsProfileStatResponses, ltmFwRuleStatPolicyName=ltmFwRuleStatPolicyName, ltmDnsProfileStatAReqs=ltmDnsProfileStatAReqs, ltmHttpProfileCompUriExcl=ltmHttpProfileCompUriExcl, ltmClientSslStatChacha20Poly1305BulkOffld=ltmClientSslStatChacha20Poly1305BulkOffld, ltmRtspProfileStatNumber=ltmRtspProfileStatNumber, ltmRstCauseStatEntry=ltmRstCauseStatEntry, ltmSpdyProfileCompressionWindowSize=ltmSpdyProfileCompressionWindowSize, ltmDosApplicationLatencyBasedSiteMinimumTps=ltmDosApplicationLatencyBasedSiteMinimumTps, ltmIsessionProfileStatDedupInErrors=ltmIsessionProfileStatDedupInErrors, ltmPoolActiveMemberCnt=ltmPoolActiveMemberCnt, ltmFastL4ProfileStatExpires=ltmFastL4ProfileStatExpires, ltmClientSslStatC3dConns=ltmClientSslStatC3dConns, ltmNodeAddrMonitorState=ltmNodeAddrMonitorState, ltmClientSslStatDtlsv1=ltmClientSslStatDtlsv1, ltmClientSslStatCurConns=ltmClientSslStatCurConns, ltmLsnPoolVlanGroup=ltmLsnPoolVlanGroup, ltmVirtualServConnLimit=ltmVirtualServConnLimit, ltmRouteDomainStatClientSlowKilled=ltmRouteDomainStatClientSlowKilled, ltmTcpProfileCmetricsCache=ltmTcpProfileCmetricsCache, ltmFwNatStaticDestinationTranslationPoolStat=ltmFwNatStaticDestinationTranslationPoolStat, ltmPcpProfileGroup=ltmPcpProfileGroup, ltmClientSslStatExtendedMasterSecrets=ltmClientSslStatExtendedMasterSecrets, ltmDiameterrouterProfileStatCurDynamicRoutes=ltmDiameterrouterProfileStatCurDynamicRoutes, ltmClientSslStatName=ltmClientSslStatName, ltmVirtualServAddrType=ltmVirtualServAddrType, ltmCompContTypeExclName=ltmCompContTypeExclName, ltmIpsecalgProfileDefaultName=ltmIpsecalgProfileDefaultName, ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp=ltmFwNatDynamicPoolStatPbaPercentFreePortBlocksSnmp, ltmPptpProfileStatFailedCalls=ltmPptpProfileStatFailedCalls, ltmTftpProfileTable=ltmTftpProfileTable, ltmIsessionProfileStatOutgoingConnsPassthruTot=ltmIsessionProfileStatOutgoingConnsPassthruTot, ltmServerSslKey=ltmServerSslKey, ltmClientSsl=ltmClientSsl, ltmSiprouterProfileStatCurIncomingStreams=ltmSiprouterProfileStatCurIncomingStreams, ltmPoolMemberStatTotPvaAssistConn=ltmPoolMemberStatTotPvaAssistConn, ltmClientSslStatRenegotiationsRejected=ltmClientSslStatRenegotiationsRejected, ltmPoolMemberConnLimit=ltmPoolMemberConnLimit, ltmClientSslBypassClientCertFailEnabled=ltmClientSslBypassClientCertFailEnabled, ltmNodeAddrStatServerTotConns=ltmNodeAddrStatServerTotConns, ltmClientSslStatRecordSize3k=ltmClientSslStatRecordSize3k, ltmDosApplicationLatencyBasedIpMaximumTps=ltmDosApplicationLatencyBasedIpMaximumTps, ltmLsnPrefixLsnPoolBackupLsnPoolName=ltmLsnPrefixLsnPoolBackupLsnPoolName, ltmDnsCacheStatUdpCurConns=ltmDnsCacheStatUdpCurConns, ltmVirtualAddrStatPvaTotConns=ltmVirtualAddrStatPvaTotConns, ltmHttpcompContTypeExclName=ltmHttpcompContTypeExclName, ltmPersistProfile=ltmPersistProfile, ltmVirtualServRclass=ltmVirtualServRclass, ltmFwRuleStatRuleListName=ltmFwRuleStatRuleListName, ltmVirtualModuleScore=ltmVirtualModuleScore, ltmHttpClassStatHtmlPostcompressBytes=ltmHttpClassStatHtmlPostcompressBytes, ltmXmlProfileNamespaceMappingsNumber=ltmXmlProfileNamespaceMappingsNumber, ltmDnsHeaderFilterIndex=ltmDnsHeaderFilterIndex, ltmMrPmbrDiameterSessionStatCurTrafficRate=ltmMrPmbrDiameterSessionStatCurTrafficRate, ltmNodeAddrStatTotRequests=ltmNodeAddrStatTotRequests, ltmVirtualAddrStatEntry=ltmVirtualAddrStatEntry, ltmSipsessionProfileStatClientFailures=ltmSipsessionProfileStatClientFailures, ltmRespHeadersPermTable=ltmRespHeadersPermTable, ltmSiprouterProfileStatResetStats=ltmSiprouterProfileStatResetStats, ltmSctpProfileProxyBufferHigh=ltmSctpProfileProxyBufferHigh, ltmVirtualServStatClientCurConns=ltmVirtualServStatClientCurConns, ltmMrPmbrSipSessionStatProvisional=ltmMrPmbrSipSessionStatProvisional, ltmPcpProfileStatNumber=ltmPcpProfileStatNumber, ltmHttp2ProfileStatPriorityFramesReceived=ltmHttp2ProfileStatPriorityFramesReceived, ltmFwNatStaticDestinationTranslationPoolStatBidirReqs=ltmFwNatStaticDestinationTranslationPoolStatBidirReqs, ltmUdpProfileStatName=ltmUdpProfileStatName, ltmSiprouterProfileStatCurAutoInitOutgoingConns=ltmSiprouterProfileStatCurAutoInitOutgoingConns, ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns=ltmMrPmbrSipRouterStatTotFailAutoInitOutgoingConns, ltmDiametersessionProfileStatGroup=ltmDiametersessionProfileStatGroup, ltmHttpProfileStatV20Resp=ltmHttpProfileStatV20Resp, ltmTcpProfileTimeWaitRecycle=ltmTcpProfileTimeWaitRecycle, ltmDnsProfileStatZoneIxfr=ltmDnsProfileStatZoneIxfr, ltmCompUriInclIndex=ltmCompUriInclIndex, ltmHttpProxyConnectProfileStatV10Resp=ltmHttpProxyConnectProfileStatV10Resp, ltmRtspProfileStatResetStats=ltmRtspProfileStatResetStats, ltmDnsExpressStatTsigBadSig=ltmDnsExpressStatTsigBadSig, ltmClientSslCertKeyChainCert=ltmClientSslCertKeyChainCert, ltmHttpCompressionProfileContTypeExcl=ltmHttpCompressionProfileContTypeExcl, ltmHttpProxyConnectProfileStatResetStats=ltmHttpProxyConnectProfileStatResetStats, ltmFastHttpProfileForceHttp10Response=ltmFastHttpProfileForceHttp10Response, ltmSipsessionProfileStatGroup=ltmSipsessionProfileStatGroup, ltmFwRuleStatActualRule=ltmFwRuleStatActualRule, ltmVirtualServVlanVlanName=ltmVirtualServVlanVlanName, ltmHttpClassCookString=ltmHttpClassCookString, ltmMrPmbrSipRouterStatMrType=ltmMrPmbrSipRouterStatMrType, ltmDiametersessionProfileArrayAcctApplicationId=ltmDiametersessionProfileArrayAcctApplicationId, ltmVirtualServStatEphemeralBytesIn=ltmVirtualServStatEphemeralBytesIn, ltmDosApplicationLatencyBasedSiteMaximumTps=ltmDosApplicationLatencyBasedSiteMaximumTps, ltmPoolStatServerCurConns=ltmPoolStatServerCurConns, ltmSpdyProfileStatConnectionsAccepted=ltmSpdyProfileStatConnectionsAccepted, ltmMrPmbrSipRouterStatPool=ltmMrPmbrSipRouterStatPool, ltmPoolEnabledState=ltmPoolEnabledState, ltmDnsCacheType=ltmDnsCacheType, ltmDosApplicationTpsBasedEscalationPeriod=ltmDosApplicationTpsBasedEscalationPeriod, ltmVirtualServStatTable=ltmVirtualServStatTable, ltmSiprouterProfileStatEntry=ltmSiprouterProfileStatEntry, ltmVirtualAddrStatGroup=ltmVirtualAddrStatGroup, ltmDnsSecurityStatCnameDrops=ltmDnsSecurityStatCnameDrops, ltmHttp2ProfileStatResetStats=ltmHttp2ProfileStatResetStats, ltmDnsCacheStatEntry=ltmDnsCacheStatEntry, ltmMrPmbrSipRouterStatTotRejectedCalls=ltmMrPmbrSipRouterStatTotRejectedCalls, ltmRamUriInclIndex=ltmRamUriInclIndex, ltmPcpProfileMulticastPort=ltmPcpProfileMulticastPort, ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent=ltmMrPmbrSipSessionStatRequestEntityTooLarge413Sent, ltmOcspStaplingParametersTrustedResponders=ltmOcspStaplingParametersTrustedResponders, ltmTransAddrStatAddrType=ltmTransAddrStatAddrType, ltmDnsExpressStatDnsxNotifiesRecv=ltmDnsExpressStatDnsxNotifiesRecv, ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns=ltmMrPmbrDiameterRouterStatCurAutoInitOutgoingConns, ltmWebsocketProfileStatCloseRsnNormalClientRecv=ltmWebsocketProfileStatCloseRsnNormalClientRecv, ltmDnsProfileStatFastDnsRespRf=ltmDnsProfileStatFastDnsRespRf, ltmUdpProfileStatAcceptfails=ltmUdpProfileStatAcceptfails, ltmHttpClassStatResetStats=ltmHttpClassStatResetStats, ltmSpdyProfileStatPingFramesSent=ltmSpdyProfileStatPingFramesSent, ltmSpdyProfileStatConnectionsMax=ltmSpdyProfileStatConnectionsMax)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmSpdyProfileStatSynStreamFramesSent=ltmSpdyProfileStatSynStreamFramesSent, ltmRuleEventGroup=ltmRuleEventGroup, ltmSipsessionProfileStatCancel=ltmSipsessionProfileStatCancel, ltmMrPmbrDiameterSessionStatTotOtherAnswers=ltmMrPmbrDiameterSessionStatTotOtherAnswers, ltmFwNatDynamicPoolAddressCount=ltmFwNatDynamicPoolAddressCount, ltmDiametersessionProfileVendorSpecificAcctApplicationId=ltmDiametersessionProfileVendorSpecificAcctApplicationId, ltmDnsSecurityStatGroup=ltmDnsSecurityStatGroup, ltmIsessionProfileStatNullOutUses=ltmIsessionProfileStatNullOutUses, ltmWebaccCacheUriExclEntry=ltmWebaccCacheUriExclEntry, ltmDiametersessionProfileEgressMajorMessageRateLimit=ltmDiametersessionProfileEgressMajorMessageRateLimit, ltmSipsessionProfileStatUpdateReq=ltmSipsessionProfileStatUpdateReq, ltmFastHttpProfileConnpoolIdleTimeout=ltmFastHttpProfileConnpoolIdleTimeout, ltmMrPmbrDiameterSessionStatTotDiscardUnroutable=ltmMrPmbrDiameterSessionStatTotDiscardUnroutable, ltmHttpProfileLwsMaxColumn=ltmHttpProfileLwsMaxColumn, ltmNodeAddrStatusName=ltmNodeAddrStatusName, ltmVirtualServPoolEntry=ltmVirtualServPoolEntry, ltmSplitsessionclientProfileStatPeerMsgSent=ltmSplitsessionclientProfileStatPeerMsgSent, ltmLsnPoolMode=ltmLsnPoolMode, ltmPptpProfileNumber=ltmPptpProfileNumber, ltmRuleEventStatName=ltmRuleEventStatName, ltmLsnPrefixLsnPoolPrefixAddress=ltmLsnPrefixLsnPoolPrefixAddress, ltmSctpProfileRcvwnd=ltmSctpProfileRcvwnd, ltmFastL4ProfileStatSyncookIssue=ltmFastL4ProfileStatSyncookIssue, ltmServerSslRenegotiateSize=ltmServerSslRenegotiateSize, ltmLsnLogProfileStartOutboundElementsElements=ltmLsnLogProfileStartOutboundElementsElements, ltmClientSslStatTlsv13=ltmClientSslStatTlsv13, ltmFwIpintRouteDomainStatEntry=ltmFwIpintRouteDomainStatEntry, ltmUdpProfileStatTable=ltmUdpProfileStatTable, ltmSpdyProfileConfigSource=ltmSpdyProfileConfigSource, ltmAlgLogProfileTable=ltmAlgLogProfileTable, ltmDnsProfileAvrDnsStatSampleRate=ltmDnsProfileAvrDnsStatSampleRate, ltmTcpProfileMptcp=ltmTcpProfileMptcp, ltmTcpanalyticsProfileCollectedStatsInternalLogging=ltmTcpanalyticsProfileCollectedStatsInternalLogging, ltmMrPmbrDiameterRouterStatNumber=ltmMrPmbrDiameterRouterStatNumber, ltmSiprouterProfileStatActiveRegistrations=ltmSiprouterProfileStatActiveRegistrations, ltmFwNatDynamicPoolFailureStatName=ltmFwNatDynamicPoolFailureStatName, ltmLsnLogProfileStartOutboundElementsGroup=ltmLsnLogProfileStartOutboundElementsGroup, ltmTcpanalyticsProfileGroup=ltmTcpanalyticsProfileGroup, ltmClientSslCertKeyChain=ltmClientSslCertKeyChain, ltmNatVlanVlanName=ltmNatVlanVlanName, ltmSipProfileFirewallEnabled=ltmSipProfileFirewallEnabled, ltmDiametersessionProfileAuthApplicationId=ltmDiametersessionProfileAuthApplicationId, ltmDosApplicationLatencyBasedMaximumPreventionDuration=ltmDosApplicationLatencyBasedMaximumPreventionDuration, ltmClientSslAuthenticateOnce=ltmClientSslAuthenticateOnce, ltmDnsProfileDefaultName=ltmDnsProfileDefaultName, ltmHttpClassStatPlainPostcompressBytes=ltmHttpClassStatPlainPostcompressBytes, ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx=ltmMrPmbrDiameterSessionStatTotResultCodeSent2xxx, ltmHttpProxyConnectProfileDefaultName=ltmHttpProxyConnectProfileDefaultName, ltmNatNumber=ltmNatNumber, ltmPoolMemberMonitorState=ltmPoolMemberMonitorState, ltmFastHttpProfileMaxRequests=ltmFastHttpProfileMaxRequests, ltmDiameterrouterProfileStatTotMessagesInCloned=ltmDiameterrouterProfileStatTotMessagesInCloned, ltmHttp2ProfileStatPushPromiseFramesReceived=ltmHttp2ProfileStatPushPromiseFramesReceived, ltmVirtualAddrStatAddrType=ltmVirtualAddrStatAddrType, ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans=ltmFwNatStaticDestinationTranslationPoolStatErrAddrTrans, ltmDiametersession=ltmDiametersession, ltmHttpClassStatMaxKeepaliveReq=ltmHttpClassStatMaxKeepaliveReq, ltmMrPmbrSipRouterStatPort=ltmMrPmbrSipRouterStatPort, ltmClientSslStatRecordSize15k=ltmClientSslStatRecordSize15k, ltmDnsServerStatEntry=ltmDnsServerStatEntry, ltmPoolStatusDetailReason=ltmPoolStatusDetailReason, ltmHttpProfileStatCssPrecompressBytes=ltmHttpProfileStatCssPrecompressBytes, ltmMirrorPortTable=ltmMirrorPortTable, ltmDnsProfileStatFastDnsAllowed=ltmDnsProfileStatFastDnsAllowed, ltmV6rdProfileGroup=ltmV6rdProfileGroup, ltmDnsCacheStatKeyHits=ltmDnsCacheStatKeyHits, ltmHttpProxyConnectProfileStatResp2xxCnt=ltmHttpProxyConnectProfileStatResp2xxCnt, ltmClientSslStatDssKeyxchg=ltmClientSslStatDssKeyxchg, ltmVirtualServStatClientBytesIn=ltmVirtualServStatClientBytesIn, ltmIsessionProfileStatLzoOutUses=ltmIsessionProfileStatLzoOutUses, ltmSctpProfile=ltmSctpProfile, ltmClientSslStatSessCacheLookups=ltmClientSslStatSessCacheLookups, ltmDnsProfileDns64Prefix=ltmDnsProfileDns64Prefix, ltmSctpProfileRtoMax=ltmSctpProfileRtoMax, ltmSipsessionProfileStatLoopDetected=ltmSipsessionProfileStatLoopDetected, ltmSiprouterProfileStatTotMessagesCannotReturn=ltmSiprouterProfileStatTotMessagesCannotReturn, ltmFastL4ProfileEntry=ltmFastL4ProfileEntry, ltmFwNatDynamicPoolClientConnectionLimit=ltmFwNatDynamicPoolClientConnectionLimit, ltmServerSslStatDhGroupX25519=ltmServerSslStatDhGroupX25519, ltmVirtualAddrNumber=ltmVirtualAddrNumber, ltmWebAccelerationProfileStatCacheMisses=ltmWebAccelerationProfileStatCacheMisses, ltmXmlProfileNamespaceMappingsMappingPrefix=ltmXmlProfileNamespaceMappingsMappingPrefix, ltmFtpProfileLogPublisher=ltmFtpProfileLogPublisher, ltmHttp2ProfileActivationModesIndex=ltmHttp2ProfileActivationModesIndex, ltmDiametersessionProfileStatTotResultCodeRcvd1xxx=ltmDiametersessionProfileStatTotResultCodeRcvd1xxx, ltmServerSslDropRevokedCertStatus=ltmServerSslDropRevokedCertStatus, ltmHttpProfileStatResetStats=ltmHttpProfileStatResetStats, ltmFallbackStatusEntry=ltmFallbackStatusEntry, ltmServerSslStatDtlsTxPushbacks=ltmServerSslStatDtlsTxPushbacks, ltmIiopProfileStatResetStats=ltmIiopProfileStatResetStats, ltmIsessionProfileStatDedupOutErrors=ltmIsessionProfileStatDedupOutErrors, ltmUdpProfileDatagramLb=ltmUdpProfileDatagramLb, ltmPcpProfileStatPcpAnnounceRequests=ltmPcpProfileStatPcpAnnounceRequests, ltmFwRuleStatLastHitTimeFmt=ltmFwRuleStatLastHitTimeFmt, ltmVirtualServStatWlSyncookieAccepts=ltmVirtualServStatWlSyncookieAccepts, ltmDosApplicationProfileName=ltmDosApplicationProfileName, ltmDnsServerStatGroup=ltmDnsServerStatGroup, ltmFwIpintVirtualStatTable=ltmFwIpintVirtualStatTable, ltmFastHttpProfileStatClientAccepts=ltmFastHttpProfileStatClientAccepts, ltmVirtualServStatRespMrOut=ltmVirtualServStatRespMrOut, ltmServerSslProfileC3dCertExtensionCustomOids=ltmServerSslProfileC3dCertExtensionCustomOids, ltmAlgLogProfileStartDataElementsIndex=ltmAlgLogProfileStartDataElementsIndex, ltmPoolMbrStatusTable=ltmPoolMbrStatusTable, ltmLsnPrefixAddr=ltmLsnPrefixAddr, ltmIiopProfileStatName=ltmIiopProfileStatName, ltmHttpProfileNumber=ltmHttpProfileNumber, ltmDiametersessionProfileStatTotResultCodeSent5xxx=ltmDiametersessionProfileStatTotResultCodeSent5xxx, ltmDiameterrouterProfileStatEntry=ltmDiameterrouterProfileStatEntry, ltmSctpProfileStatAssociations=ltmSctpProfileStatAssociations, ltmPcpProfileStatEntry=ltmPcpProfileStatEntry, ltmMrPmbrDiameterRouterStatTotMessagesRouted=ltmMrPmbrDiameterRouterStatTotMessagesRouted, ltmDnsCacheRrsetCacheSize=ltmDnsCacheRrsetCacheSize, ltmNetworkAttackDataStatDrops=ltmNetworkAttackDataStatDrops, ltmMrPmbrDiameterRouterStatCurPassthruConnections=ltmMrPmbrDiameterRouterStatCurPassthruConnections, ltmSipsessionProfileStatBadmsgsReq=ltmSipsessionProfileStatBadmsgsReq, ltmServerSslC3dCaKey=ltmServerSslC3dCaKey, ltmHttpcompUriExclNumber=ltmHttpcompUriExclNumber, ltmVirtualServStatClientMaxConns=ltmVirtualServStatClientMaxConns, ltmRtspProfileLogProfile=ltmRtspProfileLogProfile, ltmPcpPrefixProfilePcpNumber=ltmPcpPrefixProfilePcpNumber, ltmSplitsessionserverProfileStatPeerMsgSent=ltmSplitsessionserverProfileStatPeerMsgSent, ltmPoolStatusGroup=ltmPoolStatusGroup, ltmHttpProfileStatMaxKeepaliveReq=ltmHttpProfileStatMaxKeepaliveReq, ltmFwContextStatStagedPacketsDefaultReject=ltmFwContextStatStagedPacketsDefaultReject, ltmEncCookiesTable=ltmEncCookiesTable, ltmClientSslGroup=ltmClientSslGroup, ltmMrPmbrSipRouterStatCurPassthruConnections=ltmMrPmbrSipRouterStatCurPassthruConnections, ltmPptpProfileStatNumber=ltmPptpProfileStatNumber, ltmMrPmbrSipSessionStatVersionNotSupported=ltmMrPmbrSipSessionStatVersionNotSupported, ltmDosApplicationMaximumLatency=ltmDosApplicationMaximumLatency, ltmRuleEventTable=ltmRuleEventTable, ltmHttpClassStatV9Resp=ltmHttpClassStatV9Resp, ltmServerSslStatCurCompatConns=ltmServerSslStatCurCompatConns, ltmHttpClassStatXmlPrecompressBytes=ltmHttpClassStatXmlPrecompressBytes, ltmServerSslCrlfile=ltmServerSslCrlfile, ltmHttpCompressionProfileStatAudioPostcompressBytes=ltmHttpCompressionProfileStatAudioPostcompressBytes, ltmMrPmbrSipSessionStatAddressIncomplete=ltmMrPmbrSipSessionStatAddressIncomplete, ltmMrPmbrSipRouterStatTable=ltmMrPmbrSipRouterStatTable, ltmMirrorPortNumber=ltmMirrorPortNumber, ltmXmlProfileStatNumErrors=ltmXmlProfileStatNumErrors, ltmRamUriPinIndex=ltmRamUriPinIndex, ltmSctpProfileMaxPathRetransmitLimit=ltmSctpProfileMaxPathRetransmitLimit, ltmSipProfileStatName=ltmSipProfileStatName, ltmMrPmbrSipSessionStatOptions=ltmMrPmbrSipSessionStatOptions, ltmConnPoolProfileNumber=ltmConnPoolProfileNumber, ltmRateFilterEntry=ltmRateFilterEntry, ltmLsnLogProfileNumber=ltmLsnLogProfileNumber, ltmHttpClassProfileUri=ltmHttpClassProfileUri, ltmHttp2ProfileStatGroup=ltmHttp2ProfileStatGroup, ltmLsnPoolStatHairpinConnectionRequests=ltmLsnPoolStatHairpinConnectionRequests, ltmDnsProfileDns64Mode=ltmDnsProfileDns64Mode, ltmFwPolicyRuleStatActualRule=ltmFwPolicyRuleStatActualRule, ltmTcpProfileEntry=ltmTcpProfileEntry, ltmHttpProfileCompressGzipWindowsize=ltmHttpProfileCompressGzipWindowsize, ltmSpdyProfileDefaultName=ltmSpdyProfileDefaultName, ltmTransAddrStatServerMaxConns=ltmTransAddrStatServerMaxConns, ltmWebaccCacheUriOverTable=ltmWebaccCacheUriOverTable, ltmServerSslStatTlsv1=ltmServerSslStatTlsv1, ltmDiameterrouterProfileStatTotMessagesPersistInUse=ltmDiameterrouterProfileStatTotMessagesPersistInUse, ltmXmlProfileXpathQueriesEntry=ltmXmlProfileXpathQueriesEntry, ltmIpsecalgProfileStatEntry=ltmIpsecalgProfileStatEntry, ltmSpdyProfileProtocolVersionsGroup=ltmSpdyProfileProtocolVersionsGroup, ltmHttp2ProfileStatSettingsFramesSent=ltmHttp2ProfileStatSettingsFramesSent, ltmNodes=ltmNodes, ltmNodeAddrGroup=ltmNodeAddrGroup, ltmIsessionProfileStatBzip2OutBytesOpt=ltmIsessionProfileStatBzip2OutBytesOpt, ltmIsessionProfileConnectionReuse=ltmIsessionProfileConnectionReuse, ltmUdpProfileStatRxdgram=ltmUdpProfileStatRxdgram, ltmIpsecalgProfilePendingIkeConnectionLimit=ltmIpsecalgProfilePendingIkeConnectionLimit, ltmTftpProfileConfigSource=ltmTftpProfileConfigSource, ltmDnsCacheKeyCacheSize=ltmDnsCacheKeyCacheSize, ltmSiprouterProfileStatTotPayloadBytesIn=ltmSiprouterProfileStatTotPayloadBytesIn, ltmCompContTypeExclGroup=ltmCompContTypeExclGroup, ltmFwRuleStatCounter=ltmFwRuleStatCounter, ltmHttpProfileRamcacheAgingRate=ltmHttpProfileRamcacheAgingRate, ltmVirtualServStatPvaTotConns=ltmVirtualServStatPvaTotConns, ltmDnsHeaderFilterName=ltmDnsHeaderFilterName, ltmWebsocketProfileStatCloseRsnProcErrServerRecv=ltmWebsocketProfileStatCloseRsnProcErrServerRecv, ltmLsnPrefixTable=ltmLsnPrefixTable, ltmSnatStatClientCurConns=ltmSnatStatClientCurConns, ltmDnsCacheMaxConcurrentQueries=ltmDnsCacheMaxConcurrentQueries, ltmServerSslStatNullBulk=ltmServerSslStatNullBulk, ltmHttp2ProfileWriteSize=ltmHttp2ProfileWriteSize, ltmClientSslClientcertca=ltmClientSslClientcertca, ltmFwNatDynamicPoolRouteAdvertisement=ltmFwNatDynamicPoolRouteAdvertisement, ltmPoolStatPvaBytesIn=ltmPoolStatPvaBytesIn, ltmHttpProfileStatEntry=ltmHttpProfileStatEntry, ltmServerSslStatEcdheRsaKeyxchg=ltmServerSslStatEcdheRsaKeyxchg, ltmHttp2ProfileStatHttpResponseBytes=ltmHttp2ProfileStatHttpResponseBytes, ltmDiameterrouterProfilePendingReqSweeperInterval=ltmDiameterrouterProfilePendingReqSweeperInterval, ltmDiametersessionProfileStatTotDiscardUnroutable=ltmDiametersessionProfileStatTotDiscardUnroutable, ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx=ltmMrPmbrDiameterSessionStatTotResultCodeSent1xxx, ltmClientSslStatActiveHandshakeRejected=ltmClientSslStatActiveHandshakeRejected, ltmLsnPoolStatEndPointsString=ltmLsnPoolStatEndPointsString, ltmServerSslStatRsaKeySize1024Offload=ltmServerSslStatRsaKeySize1024Offload, ltmHttpClassStatOctetPostcompressBytes=ltmHttpClassStatOctetPostcompressBytes, ltmPoolStatCurSessions=ltmPoolStatCurSessions, ltmFwRuleStatContextType=ltmFwRuleStatContextType, ltmDnsCacheNumber=ltmDnsCacheNumber, ltmConnPoolProfileStatConnects=ltmConnPoolProfileStatConnects, ltmSnatPoolName=ltmSnatPoolName, ltmPoolMinUpMembersEnable=ltmPoolMinUpMembersEnable, ltmDnsProfileTable=ltmDnsProfileTable, ltmLsnPoolStatTotalPortBlockAllocationFailures=ltmLsnPoolStatTotalPortBlockAllocationFailures, ltmServerSslStatMd5DigestOffload=ltmServerSslStatMd5DigestOffload, ltmSiprouterProfileStatTotSuccessfulCalls=ltmSiprouterProfileStatTotSuccessfulCalls, ltmHttpProfileStatName=ltmHttpProfileStatName, ltmSnatOrigAddrWildmaskType=ltmSnatOrigAddrWildmaskType, ltmServerSslStatReuseFailed=ltmServerSslStatReuseFailed, ltmDiametersessionProfileStatTotUserAuthorizationAnswers=ltmDiametersessionProfileStatTotUserAuthorizationAnswers, ltmDiameterrouterProfileUseLocalConnection=ltmDiameterrouterProfileUseLocalConnection, ltmRateFilterStatRateBytes=ltmRateFilterStatRateBytes, ltmHttpClassUriTable=ltmHttpClassUriTable, ltmServerSslStatSslv2=ltmServerSslStatSslv2, ltmFtpProfileStatPassthruTransitions=ltmFtpProfileStatPassthruTransitions, ltmTcpProfileStatConnfails=ltmTcpProfileStatConnfails, ltmSctpProfileIpTosToPeer=ltmSctpProfileIpTosToPeer, ltmClientSslStatReuseFailed=ltmClientSslStatReuseFailed, ltmServerSslStatDssKeyxchg=ltmServerSslStatDssKeyxchg, ltmHttpCompressionProfileStatPrecompressBytes=ltmHttpCompressionProfileStatPrecompressBytes, ltmDnsProfileStatRcodeBadvers=ltmDnsProfileStatRcodeBadvers, ltmIsessionProfileCompressionAdaptive=ltmIsessionProfileCompressionAdaptive, ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries=ltmMrPmbrDiameterRouterStatTotMessagesMaxRetries, ltmUdpProfileNumber=ltmUdpProfileNumber, ltmPoolStatusEntry=ltmPoolStatusEntry, ltmSiprouterProfileStatTotMessagesDropped=ltmSiprouterProfileStatTotMessagesDropped, ltmVirtualAddrEntry=ltmVirtualAddrEntry, ltmHttpCompressionProfile=ltmHttpCompressionProfile, ltmVirtualAddrEnabledState=ltmVirtualAddrEnabledState, ltmClientSslStatRecordsOut=ltmClientSslStatRecordsOut, ltmServerSslStatHostnameBypasses=ltmServerSslStatHostnameBypasses, ltmHttpClassCookIndex=ltmHttpClassCookIndex, ltmTcpProfileStatRxrst=ltmTcpProfileStatRxrst, ltmRouteDomainStatServerPktsOut=ltmRouteDomainStatServerPktsOut, ltmLsnPoolStatPcpErrorsNotAuthorized=ltmLsnPoolStatPcpErrorsNotAuthorized, ltmSnatPoolStatGroup=ltmSnatPoolStatGroup, ltmFwIpintGlobalStatResetStats=ltmFwIpintGlobalStatResetStats, ltmSctpProfileEntry=ltmSctpProfileEntry, ltmLsnLog=ltmLsnLog, ltmSnatTransAddrType=ltmSnatTransAddrType, ltmPersistProfileDefaultName=ltmPersistProfileDefaultName, ltmLsnPoolVlanNumber=ltmLsnPoolVlanNumber, ltmServerSslPeerCertMode=ltmServerSslPeerCertMode, ltmTcpProfileEcn=ltmTcpProfileEcn, ltmTcpProfileMptcpMakeafterbreak=ltmTcpProfileMptcpMakeafterbreak, ltmHttpcompContTypeInclTable=ltmHttpcompContTypeInclTable, ltmFwNatDynamicPoolClientBlockLimit=ltmFwNatDynamicPoolClientBlockLimit, ltmFastHttpProfileStatResp2xxCnt=ltmFastHttpProfileStatResp2xxCnt, ltmSnatPool=ltmSnatPool, ltmVirtualAddrStatPvaCurConns=ltmVirtualAddrStatPvaCurConns, ltmPoolMemberStatMsgMrIn=ltmPoolMemberStatMsgMrIn, ltmFastHttpProfileStatName=ltmFastHttpProfileStatName, ltmHttpClassStatResp2xxCnt=ltmHttpClassStatResp2xxCnt, ltmSctpProfileSndbuf=ltmSctpProfileSndbuf)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmSnatOrigAddrNumber=ltmSnatOrigAddrNumber, ltmVirtualModuleScoreNumber=ltmVirtualModuleScoreNumber, ltmVirtualServHttpClass=ltmVirtualServHttpClass, ltmTcpanalyticsProfileCollectPostCode=ltmTcpanalyticsProfileCollectPostCode, ltmFwNatStaticSourceTranslationPoolStatErrMemory=ltmFwNatStaticSourceTranslationPoolStatErrMemory, ltmClientSslStatMidstreamRenegotiations=ltmClientSslStatMidstreamRenegotiations, ltmAuthProfile=ltmAuthProfile, ltmSpdyProfileName=ltmSpdyProfileName, ltmFtpProfileStatTable=ltmFtpProfileStatTable, ltmAuthProfileStatTotSessions=ltmAuthProfileStatTotSessions, ltmWebsocketProfileStatCloseRsnExtFailServerRecv=ltmWebsocketProfileStatCloseRsnExtFailServerRecv, ltmRamUriExclEntry=ltmRamUriExclEntry, ltmDnsCacheEntry=ltmDnsCacheEntry, ltmServerSslAuthenticateOnce=ltmServerSslAuthenticateOnce, ltmLsnPrefixLsnPoolTable=ltmLsnPrefixLsnPoolTable, ltmPptpProfileLogServerIp=ltmPptpProfileLogServerIp, ltmPoolStatusParentType=ltmPoolStatusParentType, ltmIsessionProfileStatDedupInHitHistBucket4k=ltmIsessionProfileStatDedupInHitHistBucket4k, ltmIiop=ltmIiop, ltmFwRuleStat=ltmFwRuleStat, ltmFwContextStatStagedPacketsAccept=ltmFwContextStatStagedPacketsAccept, ltmWebAccelerationProfileStatRemoteHitBytes=ltmWebAccelerationProfileStatRemoteHitBytes, ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled=ltmFwNatDynamicPoolStatPbaZombiePortBlockConnsKilled, ltmDosApplicationMinimumLatency=ltmDosApplicationMinimumLatency, ltmTcpProfileStatAcceptfails=ltmTcpProfileStatAcceptfails, ltmSipsessionProfileStatTable=ltmSipsessionProfileStatTable, ltmDiametersessionProfileStatTotDisconnectPeerRequests=ltmDiametersessionProfileStatTotDisconnectPeerRequests, ltmServerSslAuthenticateDepth=ltmServerSslAuthenticateDepth, ltmRuleEntry=ltmRuleEntry, ltmIsessionProfileStatOutgoingConnsErrors=ltmIsessionProfileStatOutgoingConnsErrors, ltmOcspStaplingParametersName=ltmOcspStaplingParametersName, ltmPptpProfileDescription=ltmPptpProfileDescription, ltmNetworkAttackDataStatVectorName=ltmNetworkAttackDataStatVectorName, ltmFwNatDynamicPoolStatLsnTranslationRequests=ltmFwNatDynamicPoolStatLsnTranslationRequests, ltmLsnPoolStatPersistenceMappingFailures=ltmLsnPoolStatPersistenceMappingFailures, ltmVirtualServStatClientSlowKilled=ltmVirtualServStatClientSlowKilled, ltmPcpPrefixGroup=ltmPcpPrefixGroup, ltmSipsessionProfileStatTemporarilyUnavailable480Sent=ltmSipsessionProfileStatTemporarilyUnavailable480Sent, ltmWebAccelerationProfileStatInterStripeSize=ltmWebAccelerationProfileStatInterStripeSize, ltmXmlProfileStatTable=ltmXmlProfileStatTable, ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns=ltmMrPmbrSipRouterStatTotAutoInitOutgoingConns, ltmTcpProfileDeferredAccept=ltmTcpProfileDeferredAccept, ltmFastL4ProfileStatEntry=ltmFastL4ProfileStatEntry, ltmServerSslStatCurConns=ltmServerSslStatCurConns, ltmVirtualServVlanNumber=ltmVirtualServVlanNumber, ltmDiametersessionProfileEntry=ltmDiametersessionProfileEntry, ltmMrPmbrSipSessionStatRefer=ltmMrPmbrSipSessionStatRefer, ltmHttpProfilePassthroughOversizeServerHeaders=ltmHttpProfilePassthroughOversizeServerHeaders, ltmSiprouterProfileStatTotMessagesInternalError=ltmSiprouterProfileStatTotMessagesInternalError, ltmPoolStatConnqAllAgeEma=ltmPoolStatConnqAllAgeEma, ltmHttpProfileOneConnectStatusReuse=ltmHttpProfileOneConnectStatusReuse, ltmDnsProfileStatDns64Reqs=ltmDnsProfileStatDns64Reqs, ltmLsnPoolStatPcpPeerResponses=ltmLsnPoolStatPcpPeerResponses, ltmSplitsessionclientProfileStatName=ltmSplitsessionclientProfileStatName, ltmDnsProfileStatGtmRateRejectedRequests=ltmDnsProfileStatGtmRateRejectedRequests, ltmFallbackStatusNumber=ltmFallbackStatusNumber, ltmSpdyProfile=ltmSpdyProfile, ltmHttp2ProfileActivationModes=ltmHttp2ProfileActivationModes, ltmXmlProfileXpathQueriesName=ltmXmlProfileXpathQueriesName, ltmSipsession=ltmSipsession, ltmAttrPersistDestAddrLimitMode=ltmAttrPersistDestAddrLimitMode, ltmHttp2ProfileActivationModesNumber=ltmHttp2ProfileActivationModesNumber, ltmDosApplicationHeavyUrlInclTable=ltmDosApplicationHeavyUrlInclTable, ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx=ltmMrPmbrDiameterSessionStatTotResultCodeSent5xxx, ltmHttpCompressionProfileStatVideoPostcompressBytes=ltmHttpCompressionProfileStatVideoPostcompressBytes, ltmVirtualServStatWlSyncookieHits=ltmVirtualServStatWlSyncookieHits, ltmServerSslStatRecordsIn=ltmServerSslStatRecordsIn, ltmWebsocketProfileStatServerDecompressionFailures=ltmWebsocketProfileStatServerDecompressionFailures, ltmSiprouterProfileStatTotIncomingStreams=ltmSiprouterProfileStatTotIncomingStreams, ltmSiprouterProfileStatRejectedRegistrations=ltmSiprouterProfileStatRejectedRegistrations, ltmDiametersessionProfilePeerErrorsMajorThreshold=ltmDiametersessionProfilePeerErrorsMajorThreshold, ltmIiopProfileStatNumErrors=ltmIiopProfileStatNumErrors, ltmRtspProfileStatName=ltmRtspProfileStatName, ltmFwIpintRouteDomainStat=ltmFwIpintRouteDomainStat, ltmDosApplicationHeavyUrlInclGroup=ltmDosApplicationHeavyUrlInclGroup, ltmMrPmbrSipSessionStatNotImplemented501Sent=ltmMrPmbrSipSessionStatNotImplemented501Sent, ltmLsnPoolStatPcpAnnounceRequests=ltmLsnPoolStatPcpAnnounceRequests, ltmDnsCacheStatSync=ltmDnsCacheStatSync, ltmHttpcompUriExclUri=ltmHttpcompUriExclUri, ltmClientSslCertKeyChainName=ltmClientSslCertKeyChainName, ltmDiameterrouterProfileStatResetStats=ltmDiameterrouterProfileStatResetStats, ltmDnsCacheStatKeyUpdates=ltmDnsCacheStatKeyUpdates, ltmMrPmbrSipRouterStatTrName=ltmMrPmbrSipRouterStatTrName, ltmIsessionProfileStatDedupInMisses=ltmIsessionProfileStatDedupInMisses, ltmSipsessionProfileStatAddressIncomplete484Sent=ltmSipsessionProfileStatAddressIncomplete484Sent, ltmMrPmbrSipSessionStat=ltmMrPmbrSipSessionStat, ltmDnsCacheForwardZoneEntry=ltmDnsCacheForwardZoneEntry, ltmFastL4=ltmFastL4, ltmPoolStatReqMrIn=ltmPoolStatReqMrIn, ltmClientSslStatRsaKeySize1024Offload=ltmClientSslStatRsaKeySize1024Offload, ltmVirtualServStatClientBytesOut=ltmVirtualServStatClientBytesOut, ltmConnPoolProfileMaxSize=ltmConnPoolProfileMaxSize, ltmPcpPrefixProfilePcpEntry=ltmPcpPrefixProfilePcpEntry, ltmVAddrStatusEnabledState=ltmVAddrStatusEnabledState, ltmMrPmbrDiameterSessionStatTotCapExcReq=ltmMrPmbrDiameterSessionStatTotCapExcReq, ltmXmlProfileXpathQueriesGroup=ltmXmlProfileXpathQueriesGroup, ltmFwContextStatContextName=ltmFwContextStatContextName, ltmClientSslStatRc4BulkOffload=ltmClientSslStatRc4BulkOffload, ltmClientSslStatTotNativeConns=ltmClientSslStatTotNativeConns, ltmVirtualServPersistVsName=ltmVirtualServPersistVsName, ltmClientSslStatResetStats=ltmClientSslStatResetStats, ltmDiameterrouterProfileStatTotMessagesStandbyDropped=ltmDiameterrouterProfileStatTotMessagesStandbyDropped, ltmHttpProxyConnectProfileGroup=ltmHttpProxyConnectProfileGroup, ltmDnsProfileSecurityEnabled=ltmDnsProfileSecurityEnabled, ltmDosApplicationHeavyUrlExcl=ltmDosApplicationHeavyUrlExcl, ltmPoolMemberStatConnqServiced=ltmPoolMemberStatConnqServiced, ltmSipProfileStatDrops=ltmSipProfileStatDrops, ltmWebsocketProfileStatContFramesClientRecv=ltmWebsocketProfileStatContFramesClientRecv, ltmNetworkAttackDataStat=ltmNetworkAttackDataStat, ltmDiametersessionProfileStatTotRetransmissionIrule=ltmDiametersessionProfileStatTotRetransmissionIrule, ltmIsessionProfileStatDedupOutHitHistBucket64k=ltmIsessionProfileStatDedupOutHitHistBucket64k, ltmWebsocketProfileWindowBits=ltmWebsocketProfileWindowBits, ltmOcspStaplingParametersGroup=ltmOcspStaplingParametersGroup, ltmVsStatusParentType=ltmVsStatusParentType, ltmDnsProfileStatFastDnsRespBvers=ltmDnsProfileStatFastDnsRespBvers, ltmLsnPoolStatTotalPortBlockDeallocations=ltmLsnPoolStatTotalPortBlockDeallocations, ltmMrPmbrSipRouterStatTotPayloadBytesIn=ltmMrPmbrSipRouterStatTotPayloadBytesIn, ltmDnsCacheStatQueries=ltmDnsCacheStatQueries, ltmHttpProfileStatRamcacheMisses=ltmHttpProfileStatRamcacheMisses, ltmClientSslStatRecordSize11k=ltmClientSslStatRecordSize11k, ltmIsessionProfileStatDedupOutHitHistBucket16k=ltmIsessionProfileStatDedupOutHitHistBucket16k, ltmClientSslSessionTicket=ltmClientSslSessionTicket, ltmSiprouterProfileStatCurIncomingConnections=ltmSiprouterProfileStatCurIncomingConnections, ltmFwNatStaticDestinationTranslationPoolStatName=ltmFwNatStaticDestinationTranslationPoolStatName, ltmLsnPrefixLsnPoolBackupPrefixAddress=ltmLsnPrefixLsnPoolBackupPrefixAddress, ltmTcpanalyticsProfileCollectRemoteHostSubnet=ltmTcpanalyticsProfileCollectRemoteHostSubnet, ltmIsessionProfileStatDedupOutMissHistBucket1m=ltmIsessionProfileStatDedupOutMissHistBucket1m, ltmSipsessionProfileStatTooManyHops=ltmSipsessionProfileStatTooManyHops, ltmDiametersessionProfileStatAveRequestLatency=ltmDiametersessionProfileStatAveRequestLatency, ltmServerSslStatEdhDssKeyxchg=ltmServerSslStatEdhDssKeyxchg, ltmServerSslStatSha256Digest=ltmServerSslStatSha256Digest, ltmVsHttpClassPriority=ltmVsHttpClassPriority, ltmDosApplicationLatencyBasedSiteTpsIncreaseRate=ltmDosApplicationLatencyBasedSiteTpsIncreaseRate, ltmIiopProfileStatNumCancels=ltmIiopProfileStatNumCancels, ltmHttp2ProfileStatRstStreamFramesSent=ltmHttp2ProfileStatRstStreamFramesSent, ltmPptpProfile=ltmPptpProfile, ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx=ltmMrPmbrDiameterSessionStatTotResultCodeRcvd2xxx, ltmCompContTypeExclContentType=ltmCompContTypeExclContentType, ltmHttpCompressionProfileConfigSource=ltmHttpCompressionProfileConfigSource, ltmDnsProfileSecurity=ltmDnsProfileSecurity, ltmPoolMemberStatEntry=ltmPoolMemberStatEntry, ltmPcpProfileName=ltmPcpProfileName, ltmTcpProfilePktLossIgnoreBurst=ltmTcpProfilePktLossIgnoreBurst, ltmSip=ltmSip, ltmServerSslStatPartiallyHwAcceleratedConns=ltmServerSslStatPartiallyHwAcceleratedConns, ltmUserStatProfileStat=ltmUserStatProfileStat, ltmHttpProfileStatPassthroughOversizeServerHeaders=ltmHttpProfileStatPassthroughOversizeServerHeaders, ltmServerSslStatInsecureRenegotiationRejects=ltmServerSslStatInsecureRenegotiationRejects, ltmHttpClassStatV11Reqs=ltmHttpClassStatV11Reqs, ltmServerSslCert=ltmServerSslCert, ltmTcpProfileStatRxbadsum=ltmTcpProfileStatRxbadsum, ltmFastHttpProfileHttp11CloseWorkarounds=ltmFastHttpProfileHttp11CloseWorkarounds, ltmSctpProfileStatConnects=ltmSctpProfileStatConnects, ltmLsnPoolName=ltmLsnPoolName, ltmFwIpintVirtualStatDstIpBlacklist=ltmFwIpintVirtualStatDstIpBlacklist, ltmIsessionProfileStatDedupOutMissHistBucket256k=ltmIsessionProfileStatDedupOutMissHistBucket256k, ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio=ltmMrPmbrDiameterSessionStatCurErrorAnswerRatio, ltmXmlProfileEntry=ltmXmlProfileEntry, ltmFwNatDynamicPoolStatPbaActivePortBlocks=ltmFwNatDynamicPoolStatPbaActivePortBlocks, ltmHttpcompContTypeInclGroup=ltmHttpcompContTypeInclGroup, ltmVirtualServEnabledState=ltmVirtualServEnabledState, ltmDnsProfileStatToGtm=ltmDnsProfileStatToGtm, ltmTcpanalyticsProfileCollectedStatsExternalLogging=ltmTcpanalyticsProfileCollectedStatsExternalLogging, ltmIsessionProfileStatDedupOutMissHistBucket2k=ltmIsessionProfileStatDedupOutMissHistBucket2k, ltmClientSslCertKeyChainNumber=ltmClientSslCertKeyChainNumber, ltmDiametersessionProfileStatName=ltmDiametersessionProfileStatName, ltmMrPmbrSipSessionStatRequestEntityTooLarge=ltmMrPmbrSipSessionStatRequestEntityTooLarge, ltmFwNatStaticSourceTranslationPoolPortCount=ltmFwNatStaticSourceTranslationPoolPortCount, ltmClientSslData0rttMode=ltmClientSslData0rttMode, ltmVirtualAddrUnitId=ltmVirtualAddrUnitId, ltmIsessionProfileStatDedupInHitHistBucket32k=ltmIsessionProfileStatDedupInHitHistBucket32k, ltmVirtualServPort=ltmVirtualServPort, ltmSnatVlanTable=ltmSnatVlanTable, ltmTcpProfileEnhancedLossRecovery=ltmTcpProfileEnhancedLossRecovery, ltmMrPmbrSipSessionStatTooManyHops483Sent=ltmMrPmbrSipSessionStatTooManyHops483Sent, ltmIiopProfileStatGroup=ltmIiopProfileStatGroup, ltmPoolStatConnqAgeHead=ltmPoolStatConnqAgeHead, ltmFwNatDynamicPoolStatPbaTotalPortBlocksString=ltmFwNatDynamicPoolStatPbaTotalPortBlocksString, ltmVirtualServStatSwSyncookieAccepts=ltmVirtualServStatSwSyncookieAccepts, ltmMrPmbrSipSessionStatAddrType=ltmMrPmbrSipSessionStatAddrType, ltmDiameterrouterProfileStatTotMessagesDropped=ltmDiameterrouterProfileStatTotMessagesDropped, ltmSiprouterProfileStatTotFailedPassthruConnections=ltmSiprouterProfileStatTotFailedPassthruConnections, ltmHttpcompContTypeExclIndex=ltmHttpcompContTypeExclIndex, ltmFwContextStatEnforcedPacketsReject=ltmFwContextStatEnforcedPacketsReject, ltmLsnPoolStatEntry=ltmLsnPoolStatEntry, ltmHttp2ProfileConfigSource=ltmHttp2ProfileConfigSource, ltmXmlProfileMultipleQueryMatches=ltmXmlProfileMultipleQueryMatches, ltmWebsocketProfileStatTextFramesClientRecv=ltmWebsocketProfileStatTextFramesClientRecv, ltmFastHttp=ltmFastHttp, ltmAlgLogProfileStartDataElementsGroup=ltmAlgLogProfileStartDataElementsGroup, ltmPoolMbrStatusGroup=ltmPoolMbrStatusGroup, ltmDnsCacheGroup=ltmDnsCacheGroup, ltmDosApplicationLatencyBasedIpRateLimiting=ltmDosApplicationLatencyBasedIpRateLimiting, ltmTftpProfileStatEntry=ltmTftpProfileStatEntry, ltmHttpProfilePassthroughExcessClientHeaders=ltmHttpProfilePassthroughExcessClientHeaders, ltmHttpClassProfileStat=ltmHttpClassProfileStat, ltmFastL4ProfileLooseInitiation=ltmFastL4ProfileLooseInitiation, ltmSpdyProfileReceiveWindow=ltmSpdyProfileReceiveWindow, ltmHttpCompressionProfileGroup=ltmHttpCompressionProfileGroup, ltmHttpClassProfile=ltmHttpClassProfile, ltmSctpProfileDefaultName=ltmSctpProfileDefaultName, ltmRtspProfileRtcpPort=ltmRtspProfileRtcpPort, ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent=ltmMrPmbrSipSessionStatTemporarilyUnavailable480Sent, ltmTcpProfileAutoReceiveWindow=ltmTcpProfileAutoReceiveWindow, ltmSplitsessionclientProfileGroup=ltmSplitsessionclientProfileGroup, ltmRateFilterStatResetStats=ltmRateFilterStatResetStats, ltmVirtualServStatClientTotConns=ltmVirtualServStatClientTotConns, ltmVirtualAddrRouteAdvertisement=ltmVirtualAddrRouteAdvertisement, ltmDnsExpressStatName=ltmDnsExpressStatName, ltmDiameterrouterProfileStatCurPendingRequests=ltmDiameterrouterProfileStatCurPendingRequests, ltmRtspProfileStatNumErrors=ltmRtspProfileStatNumErrors, ltmIsessionProfileStatDedupInHitHistBucket2k=ltmIsessionProfileStatDedupInHitHistBucket2k, ltmPersistProfileConfigSource=ltmPersistProfileConfigSource, ltmFwIpintGlobalStatEntry=ltmFwIpintGlobalStatEntry, ltmClientSslStatRsaKeySize4096=ltmClientSslStatRsaKeySize4096, ltmMrPmbrSipSessionStatTable=ltmMrPmbrSipSessionStatTable, ltmDnsCacheRouteDomainName=ltmDnsCacheRouteDomainName, ltmClientSslStatCurCompatConns=ltmClientSslStatCurCompatConns, ltmDosAttackDataStatDrops1m=ltmDosAttackDataStatDrops1m, ltmServerSslDropUntrustCa=ltmServerSslDropUntrustCa, ltmDnsHeaderFilterEntry=ltmDnsHeaderFilterEntry, ltmLsnPoolStatPcpErrorsInvalidRequest=ltmLsnPoolStatPcpErrorsInvalidRequest, ltmConnPoolProfileStatMaxSize=ltmConnPoolProfileStatMaxSize, ltmFastL4ProfileStatLbcTimedout=ltmFastL4ProfileStatLbcTimedout, ltmNodeAddrStatusAvailState=ltmNodeAddrStatusAvailState, ltmHttpClassHeadGroup=ltmHttpClassHeadGroup, ltmClientSslStatDecryptedBytesOut=ltmClientSslStatDecryptedBytesOut, ltmDnsProfileStatGtmEffectiveRateLimit=ltmDnsProfileStatGtmEffectiveRateLimit, ltmAuthProfileTable=ltmAuthProfileTable, ltmRamUriExclName=ltmRamUriExclName, ltmSiprouterProfileStatCurOutgoingConnections=ltmSiprouterProfileStatCurOutgoingConnections, ltmDosApplicationHeavyUrlInclUrl=ltmDosApplicationHeavyUrlInclUrl, ltmXmlProfileNamespaceMappingsGroup=ltmXmlProfileNamespaceMappingsGroup, ltmFtpProfileConfigSource=ltmFtpProfileConfigSource, ltmLsnLogProfileEndInboundAction=ltmLsnLogProfileEndInboundAction, ltmPersistProfileCookieExpiration=ltmPersistProfileCookieExpiration, ltmSnatpoolTransAddrEntry=ltmSnatpoolTransAddrEntry, ltmDiameterrouterProfileStatTotFailedOutgoingStreams=ltmDiameterrouterProfileStatTotFailedOutgoingStreams, ltmLsnPoolPersistenceMode=ltmLsnPoolPersistenceMode, ltmMrPmbrSipSessionStatNotAcceptableHere=ltmMrPmbrSipSessionStatNotAcceptableHere, ltmWebAccelerationProfileStatInterStripeCount=ltmWebAccelerationProfileStatInterStripeCount, ltmRouteDomainStatClientTotConns=ltmRouteDomainStatClientTotConns, ltmHttpClassHostName=ltmHttpClassHostName, ltmDosApplicationHeavyUrlInclNumber=ltmDosApplicationHeavyUrlInclNumber, ltmDiametersessionProfileVendorSpecificAuthApplicationId=ltmDiametersessionProfileVendorSpecificAuthApplicationId, ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn=ltmMrPmbrDiameterRouterStatTotMessagesCannotReturn, ltmSipsessionProfileStatTransactionDoesNotExist=ltmSipsessionProfileStatTransactionDoesNotExist, ltmPoolLbMode=ltmPoolLbMode, ltmClientSslRenegotiateSize=ltmClientSslRenegotiateSize, ltmRateFilters=ltmRateFilters, ltmRateFilterCname=ltmRateFilterCname, ltmPoolDisabledParentType=ltmPoolDisabledParentType, ltmServerSslStatAesGcmBulk=ltmServerSslStatAesGcmBulk, ltmXmlProfileNamespaceMappingsName=ltmXmlProfileNamespaceMappingsName)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmDiametersessionProfileStatTotDeviceWatchdogAnswers=ltmDiametersessionProfileStatTotDeviceWatchdogAnswers, ltmSipsessionProfileStatService=ltmSipsessionProfileStatService, ltmRouteDomainStatClientPktsIn=ltmRouteDomainStatClientPktsIn, ltmMrPmbrDiameterSessionStatRouterInst=ltmMrPmbrDiameterSessionStatRouterInst, ltmNatName=ltmNatName, ltmClientSslStatOcspFwdpClientsslUnknownResp=ltmClientSslStatOcspFwdpClientsslUnknownResp, ltmWebaccCacheUriExclIndex=ltmWebaccCacheUriExclIndex, ltmFastL4ProfileIpFragReass=ltmFastL4ProfileIpFragReass, ltmFwRuleStatTable=ltmFwRuleStatTable, ltmIsessionProfileStatDedupOutMissHistBucket4k=ltmIsessionProfileStatDedupOutMissHistBucket4k, ltmLsnPoolStatTable=ltmLsnPoolStatTable, ltmServerSslGenericAlert=ltmServerSslGenericAlert, ltmHttpProfileStatPassthroughExcessServerHeaders=ltmHttpProfileStatPassthroughExcessServerHeaders, ltmDiameterrouterProfileStatTotDroppedLateAnswers=ltmDiameterrouterProfileStatTotDroppedLateAnswers, ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails=ltmFwNatStaticDestinationTranslationPoolStatBidirReqFails, ltmHttpCompressionProfileTable=ltmHttpCompressionProfileTable, ltmTransAddrStatName=ltmTransAddrStatName, ltmClientSslStatNullDigest=ltmClientSslStatNullDigest, ltmUserStatProfileStatFieldName=ltmUserStatProfileStatFieldName, ltmHttpClassStatNullCompressBytes=ltmHttpClassStatNullCompressBytes, ltmServerSslStatResetStats=ltmServerSslStatResetStats, ltmPoolMemberStat=ltmPoolMemberStat, ltmVirtualServListedEnabledVlans=ltmVirtualServListedEnabledVlans, ltmVirtualAddrStatClientBytesIn=ltmVirtualAddrStatClientBytesIn, ltmDnsCacheStatRrsetUpdates=ltmDnsCacheStatRrsetUpdates, ltmAlgLogProfileEndControlElementsNumber=ltmAlgLogProfileEndControlElementsNumber, ltmServerSslCentityOcspObjName=ltmServerSslCentityOcspObjName, ltmVirtualAddrStatTotPvaAssistConn=ltmVirtualAddrStatTotPvaAssistConn, ltmDiametersessionProfileRouteUnconfiguredPeers=ltmDiametersessionProfileRouteUnconfiguredPeers, ltmServerSslStatActiveHandshakeRejected=ltmServerSslStatActiveHandshakeRejected, ltmHttp2ProfileStatFlowsCreated=ltmHttp2ProfileStatFlowsCreated, ltmSiprouterProfileStatTotMessagesUnroutable=ltmSiprouterProfileStatTotMessagesUnroutable, ltmUdpProfileAllowNoPayload=ltmUdpProfileAllowNoPayload, ltmXmlProfileStat=ltmXmlProfileStat, ltmMrPmbrSipRouterStatRouterInst=ltmMrPmbrSipRouterStatRouterInst, ltmXmlProfileXpathQueries=ltmXmlProfileXpathQueries, ltmClientSslStatEntry=ltmClientSslStatEntry, ltmHttpProfileOneConnect=ltmHttpProfileOneConnect, ltmTransAddrAddr=ltmTransAddrAddr, ltmPoolMemberAddrType=ltmPoolMemberAddrType, ltmFwAdminIpRuleStatNumber=ltmFwAdminIpRuleStatNumber, ltmUserStatProfileStatNumber=ltmUserStatProfileStatNumber, ltmFastL4ProfileIpTosToServer=ltmFastL4ProfileIpTosToServer, ltmHttp2ProfileInsertHeaderName=ltmHttp2ProfileInsertHeaderName, ltmHttpcompContTypeExclNumber=ltmHttpcompContTypeExclNumber, ltmTcpProfileMd5SigPass=ltmTcpProfileMd5SigPass, ltmDnsProfileStatDns64Rewrites=ltmDnsProfileStatDns64Rewrites, ltmVirtualServers=ltmVirtualServers, ltmFwNatDynamicPoolStatPcpPeerResponses=ltmFwNatDynamicPoolStatPcpPeerResponses, ltmVirtualServPersistNumber=ltmVirtualServPersistNumber, ltmHttpProfileKnownMethods=ltmHttpProfileKnownMethods, ltmPoolMemberStatAddrType=ltmPoolMemberStatAddrType, ltmIsessionProfileStatDeflateOutErrors=ltmIsessionProfileStatDeflateOutErrors, ltmHttpCompressionProfilePreferredMethod=ltmHttpCompressionProfilePreferredMethod, ltmDiametersessionProfileHandshakeTimeout=ltmDiametersessionProfileHandshakeTimeout, ltmWebsocketProfileName=ltmWebsocketProfileName, ltmXmlProfileAbortOnError=ltmXmlProfileAbortOnError, ltmServerSslStatSha512Digest=ltmServerSslStatSha512Digest, ltmDnsProfileStatRecursionDesired=ltmDnsProfileStatRecursionDesired, ltmTcpanalyticsProfileCollectedByClientSide=ltmTcpanalyticsProfileCollectedByClientSide, ltmIsessionProfileStatDedupInMissHistBucket4k=ltmIsessionProfileStatDedupInMissHistBucket4k, ltmDnsExpressStatDnsxQueries=ltmDnsExpressStatDnsxQueries, ltmFwContextStatEnforcedPacketsDrop=ltmFwContextStatEnforcedPacketsDrop, ltmServerSslStatSourceIpBypasses=ltmServerSslStatSourceIpBypasses, ltmVirtualServVlanTable=ltmVirtualServVlanTable, ltmMrPmbrDiameterRouterStatTrName=ltmMrPmbrDiameterRouterStatTrName, ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast=ltmFwNatDynamicPoolStatPcpAnnounceResponsesUcast, ltmLsnPoolEgressInterfacesEnabled=ltmLsnPoolEgressInterfacesEnabled, ltmDiametersessionProfileStatCurTimeoutRatio=ltmDiametersessionProfileStatCurTimeoutRatio, ltmWebAccelerationProfileUriExcl=ltmWebAccelerationProfileUriExcl, ltmHttpProfileStatImagePostcompressBytes=ltmHttpProfileStatImagePostcompressBytes, ltmDnsProfileStatMalicious=ltmDnsProfileStatMalicious, ltmDiametersessionProfileStatTotCreditControlAnswers=ltmDiametersessionProfileStatTotCreditControlAnswers, ltmVirtualServClonePool=ltmVirtualServClonePool, ltmNodeAddrStatServerMaxConns=ltmNodeAddrStatServerMaxConns, ltmRuleEventStatMaxCycles=ltmRuleEventStatMaxCycles, ltmAlgLogProfileDescription=ltmAlgLogProfileDescription, ltmWebsocketProfileStatCloseRsnExtFailClientRecv=ltmWebsocketProfileStatCloseRsnExtFailClientRecv, ltmSipProfileGroup=ltmSipProfileGroup, ltmClientSslStatRecordsIn=ltmClientSslStatRecordsIn, ltmHttpCompressionProfileStatName=ltmHttpCompressionProfileStatName, ltmClientSslStatPartiallyHwAcceleratedConns=ltmClientSslStatPartiallyHwAcceleratedConns, ltmTcpProfileLimitedTransmit=ltmTcpProfileLimitedTransmit, ltmVirtualAddrStatCurrPvaAssistConn=ltmVirtualAddrStatCurrPvaAssistConn, ltmSpdyProfileProtocolVersionsTable=ltmSpdyProfileProtocolVersionsTable, ltmDiametersessionProfile=ltmDiametersessionProfile, ltmMrPmbrSipRouterStatEntry=ltmMrPmbrSipRouterStatEntry, ltmHttpClassProfileCook=ltmHttpClassProfileCook, ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis=ltmFwNatStaticDestinationTranslationPoolStatErrFlowCollis, ltmDosApplicationTpsBasedIpMinimumTps=ltmDosApplicationTpsBasedIpMinimumTps, ltmPoolStatusAvailState=ltmPoolStatusAvailState, ltmVirtualServVaName=ltmVirtualServVaName, ltmDnsCacheStatMsgUpdates=ltmDnsCacheStatMsgUpdates, ltmServerSslStatMaxConns=ltmServerSslStatMaxConns, ltmRuleEventStatMinCycles=ltmRuleEventStatMinCycles, ltmIsessionProfileStatIncomingConnsActiveTot=ltmIsessionProfileStatIncomingConnsActiveTot, ltmVirtualModuleScoreTable=ltmVirtualModuleScoreTable, ltmDosApplicationTpsBasedUrlMinimumTps=ltmDosApplicationTpsBasedUrlMinimumTps, ltmHttpProxyConnectProfileStatResp5xxCnt=ltmHttpProxyConnectProfileStatResp5xxCnt, ltmTcpanalyticsProfileCollectedByServerSide=ltmTcpanalyticsProfileCollectedByServerSide, ltmServerSslStatDestinationIpBypasses=ltmServerSslStatDestinationIpBypasses, ltmHttpCompressionProfileStatOctetPostcompressBytes=ltmHttpCompressionProfileStatOctetPostcompressBytes, ltmServerSslStatRsaKeySize4096Offload=ltmServerSslStatRsaKeySize4096Offload, ltmRtspProfileStatTable=ltmRtspProfileStatTable, ltmDnsCacheName=ltmDnsCacheName, ltmHttp2ProfileStatPingFramesReceived=ltmHttp2ProfileStatPingFramesReceived, ltmHttp2ProfileStatRstStreamFramesReceived=ltmHttp2ProfileStatRstStreamFramesReceived, ltmSipsessionProfileStatRegisterReq=ltmSipsessionProfileStatRegisterReq, ltmFtpProfileStatFtpsResets=ltmFtpProfileStatFtpsResets, ltmClientSslStatSha224Digest=ltmClientSslStatSha224Digest, ltmMrPmbrSipSessionStatEntry=ltmMrPmbrSipSessionStatEntry, ltmFwNatStaticSourceTranslationPoolStatGroup=ltmFwNatStaticSourceTranslationPoolStatGroup, ltmHttpProfileStatNumber=ltmHttpProfileStatNumber, ltmCompContTypeInclIndex=ltmCompContTypeInclIndex, ltmHttp2ProfileEnforceTlsRequirements=ltmHttp2ProfileEnforceTlsRequirements, ltmHttpProfileStatResp5xxCnt=ltmHttpProfileStatResp5xxCnt, ltmDosWhiteIpAddressType=ltmDosWhiteIpAddressType, ltmHttpProfileName=ltmHttpProfileName, ltmAlgLogProfileEndDataElementsElements=ltmAlgLogProfileEndDataElementsElements, ltmSpdyProfileStatV3StreamsMax=ltmSpdyProfileStatV3StreamsMax, ltmBwcPolicyStatBytesPerSecOut=ltmBwcPolicyStatBytesPerSecOut, ltmTransAddrStatEntry=ltmTransAddrStatEntry, ltmWebAccelerationProfileNumber=ltmWebAccelerationProfileNumber, ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams=ltmMrPmbrDiameterRouterStatTotFailedOutgoingStreams, ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures=ltmFwNatDynamicPoolStatLsnHairpinConnectionFailures, ltmFtpProfileTranslateExtended=ltmFtpProfileTranslateExtended, ltmTcpProfileProxyBufferLow=ltmTcpProfileProxyBufferLow, ltmPoolStatServerBytesIn=ltmPoolStatServerBytesIn, ltmVirtualServSnatType=ltmVirtualServSnatType, ltmFastL4ProfileNumber=ltmFastL4ProfileNumber, ltmHttpClassStatRamcacheHitBytes=ltmHttpClassStatRamcacheHitBytes, ltmSipProfileMaxSize=ltmSipProfileMaxSize, ltmDnsProfileStatDnsExpressNotifies=ltmDnsProfileStatDnsExpressNotifies, ltmIsessionProfileStatDedupInHitHistBucket16k=ltmIsessionProfileStatDedupInHitHistBucket16k, ltmServerSslStatShaDigestOffload=ltmServerSslStatShaDigestOffload, ltmXmlProfileName=ltmXmlProfileName, ltmPoolDisallowSnat=ltmPoolDisallowSnat, ltmServerSslUncleanShutdown=ltmServerSslUncleanShutdown, ltmPoolMbrStatusEnabledState=ltmPoolMbrStatusEnabledState, ltmDnsExpressStatGroup=ltmDnsExpressStatGroup, ltmClientSslStatSslv3=ltmClientSslStatSslv3, ltmPoolMbrStatusParentType=ltmPoolMbrStatusParentType, ltmNodeAddrStatCurSessions=ltmNodeAddrStatCurSessions, ltmRouteDomainStatClientEvictedConns=ltmRouteDomainStatClientEvictedConns, ltmWebaccCacheUriExclTable=ltmWebaccCacheUriExclTable, ltmDnsCacheStatAsync=ltmDnsCacheStatAsync, ltmLsnPoolStatTotalClientsReachedLimit=ltmLsnPoolStatTotalClientsReachedLimit, ltmNetworkAttackDataStatStats1m=ltmNetworkAttackDataStatStats1m, ltmHttp2ProfileStatStreamsCurrent=ltmHttp2ProfileStatStreamsCurrent, ltmClientSslProxySsl=ltmClientSslProxySsl, ltmHttpClassAsmEnabled=ltmHttpClassAsmEnabled, ltmHttpProfileStatPlainPrecompressBytes=ltmHttpProfileStatPlainPrecompressBytes, ltmIsessionProfileStatDedupOutHitHistBucket2k=ltmIsessionProfileStatDedupOutHitHistBucket2k, ltmClientSslStatConnectionMirrorHaCtxRecv=ltmClientSslStatConnectionMirrorHaCtxRecv, ltmUdpProfileTable=ltmUdpProfileTable, ltmFwPolicyRuleStatLastHitTimeFmt=ltmFwPolicyRuleStatLastHitTimeFmt, ltmConnPoolProfileStatCurSize=ltmConnPoolProfileStatCurSize, ltmAuthProfileStatCurSessions=ltmAuthProfileStatCurSessions, ltmLsnPoolTable=ltmLsnPoolTable, ltmLsnPoolFailureStatResetStats=ltmLsnPoolFailureStatResetStats, ltmMrPmbrSipSessionStatSubscribe=ltmMrPmbrSipSessionStatSubscribe, ltmVirtualServPersistGroup=ltmVirtualServPersistGroup, ltmDiametersessionProfileRetransmissionQueueLimitLow=ltmDiametersessionProfileRetransmissionQueueLimitLow, ltmClientSslStatOcspStaplingCertStatusErrors=ltmClientSslStatOcspStaplingCertStatusErrors, ltmFwIpintVirtualStatResetStats=ltmFwIpintVirtualStatResetStats, ltmRamUriPinEntry=ltmRamUriPinEntry, ltmMrPmbrDiameterSessionStatPort=ltmMrPmbrDiameterSessionStatPort, ltmFastHttpProfileEntry=ltmFastHttpProfileEntry, ltmServerSslStatRsaKeySize4096=ltmServerSslStatRsaKeySize4096, ltmVirtualServProfileType=ltmVirtualServProfileType, ltmSiprouterProfileStatTotMessagesPersistInUse=ltmSiprouterProfileStatTotMessagesPersistInUse, ltmMrPmbrDiameterRouterStatTotMessagesNoConnection=ltmMrPmbrDiameterRouterStatTotMessagesNoConnection, ltmClientSslStatData0rttRejects=ltmClientSslStatData0rttRejects, ltmTransAddrEnabled=ltmTransAddrEnabled, ltmRouteDomainStatServerCurConns=ltmRouteDomainStatServerCurConns, ltmDosApplicationTpsBasedUrlClientSideDefense=ltmDosApplicationTpsBasedUrlClientSideDefense, ltmDnsExpressStatTable=ltmDnsExpressStatTable, ltmFwNatDynamicPoolTable=ltmFwNatDynamicPoolTable, ltmStreamProfile=ltmStreamProfile, ltmVirtualAddrName=ltmVirtualAddrName, ltmIsessionProfileStatLzoInBytesRaw=ltmIsessionProfileStatLzoInBytesRaw, ltmLsnPoolLogPublisher=ltmLsnPoolLogPublisher, ltmFastHttpProfileHeaderInsert=ltmFastHttpProfileHeaderInsert, ltmPcpPrefixTable=ltmPcpPrefixTable, ltmAlgLogProfileEndDataAction=ltmAlgLogProfileEndDataAction, ltmPoolStatConnqAllAgeEdm=ltmPoolStatConnqAllAgeEdm, ltmPcpPrefixProfilePcp=ltmPcpPrefixProfilePcp, ltmTcp=ltmTcp, ltmFastL4ProfileStatTable=ltmFastL4ProfileStatTable, ltmHttp2ProfileStatDataFramesReceived=ltmHttp2ProfileStatDataFramesReceived, ltmVsHttpClassNumber=ltmVsHttpClassNumber, ltmPoolMbrStatusPort=ltmPoolMbrStatusPort, ltmDosWhiteIpParentProfile=ltmDosWhiteIpParentProfile, ltmDiameterrouterProfileStatTotMessagesReturned=ltmDiameterrouterProfileStatTotMessagesReturned, ltmMrPmbrSipRouterStatRejectedRegistrations=ltmMrPmbrSipRouterStatRejectedRegistrations, ltmFwNatDynamicPoolIcmpEcho=ltmFwNatDynamicPoolIcmpEcho, ltmHttpProfileStatHtmlPrecompressBytes=ltmHttpProfileStatHtmlPrecompressBytes, ltmTcpProfileKeepAliveInterval=ltmTcpProfileKeepAliveInterval, ltmVirtualServAuth=ltmVirtualServAuth, ltmDosProfileNumber=ltmDosProfileNumber, ltmTcpProfileSynRtoBase=ltmTcpProfileSynRtoBase, ltmDosAttackDataStatResetStats=ltmDosAttackDataStatResetStats, ltmVirtualServStatEphemeralPktsOut=ltmVirtualServStatEphemeralPktsOut, ltmLsnLogProfileTable=ltmLsnLogProfileTable, ltmSnatOrigAddrGroup=ltmSnatOrigAddrGroup, ltmDosApplicationHeavyUrlExclEntry=ltmDosApplicationHeavyUrlExclEntry, ltmTcpProfileMptcpNojoindssack=ltmTcpProfileMptcpNojoindssack, ltmRamUriInclNumber=ltmRamUriInclNumber, ltmSnatPoolStatServerBytesIn=ltmSnatPoolStatServerBytesIn, ltmVAddrStatusAvailState=ltmVAddrStatusAvailState, ltmAlgLogProfile=ltmAlgLogProfile, ltmClientSslStatLicensedTps=ltmClientSslStatLicensedTps, ltmServerSslModsslmethods=ltmServerSslModsslmethods, ltmMrPmbrDiameterRouterStatTotOutgoingStreams=ltmMrPmbrDiameterRouterStatTotOutgoingStreams, ltmWebsocketProfileStatEntry=ltmWebsocketProfileStatEntry, ltmHttpProxyConnectProfileNumber=ltmHttpProxyConnectProfileNumber, ltmDosApplicationLatencyBasedUrlMaximumTps=ltmDosApplicationLatencyBasedUrlMaximumTps, ltmWebsocketProfileStatPongFramesServerRecv=ltmWebsocketProfileStatPongFramesServerRecv, ltmTcpanalyticsProfileDefaultName=ltmTcpanalyticsProfileDefaultName, ltmPoolStatConnqAllDepth=ltmPoolStatConnqAllDepth, ltmServerSslStatSha224DigestOffload=ltmServerSslStatSha224DigestOffload, ltmIsessionProfileStatDedupInMissHistBucket512k=ltmIsessionProfileStatDedupInMissHistBucket512k, ltmDosApplicationHeavyUrlExclProfileName=ltmDosApplicationHeavyUrlExclProfileName, ltmDiameterrouterProfileStatTable=ltmDiameterrouterProfileStatTable, ltmPoolStatName=ltmPoolStatName, ltmSipProfileEntry=ltmSipProfileEntry, ltmDnsCacheStatResponses=ltmDnsCacheStatResponses, ltmServerSslStatLicensedTps=ltmServerSslStatLicensedTps, ltmHttpCompressionProfileUriExcl=ltmHttpCompressionProfileUriExcl, ltmMrPmbrDiameterRouterStatGroup=ltmMrPmbrDiameterRouterStatGroup, ltmMirrorPortMemberToName=ltmMirrorPortMemberToName, ltmClientSslStatCamelliaBulk=ltmClientSslStatCamelliaBulk, ltmClientSslFwdpBypassSipBList=ltmClientSslFwdpBypassSipBList, ltmPcpProfileStatPcpAnnounceResponsesMulticast=ltmPcpProfileStatPcpAnnounceResponsesMulticast, ltmVirtualServStatResetStats=ltmVirtualServStatResetStats, ltmServerSslStatConnectionMirrorHaCtxRecv=ltmServerSslStatConnectionMirrorHaCtxRecv, ltmSctpProfileStatRxbadsum=ltmSctpProfileStatRxbadsum, ltmPoolMemberNumber=ltmPoolMemberNumber, ltmDnsProfileStatEdns0=ltmDnsProfileStatEdns0, ltmRouteDomainStatConnLimit=ltmRouteDomainStatConnLimit, ltmClientSslFwdpCertLifespan=ltmClientSslFwdpCertLifespan, ltmServerSslStatNullDigest=ltmServerSslStatNullDigest, ltmPoolStatReqMrOut=ltmPoolStatReqMrOut, ltmServerSslStatEcdhEcdsaKeyxchg=ltmServerSslStatEcdhEcdsaKeyxchg, ltmXmlProfileNamespaceMappingsEntry=ltmXmlProfileNamespaceMappingsEntry, ltmFwAdminIpRuleStatRuleName=ltmFwAdminIpRuleStatRuleName, ltmHttp2ProfileStatTable=ltmHttp2ProfileStatTable, ltmDiametersessionProfileStatTotOtherAnswers=ltmDiametersessionProfileStatTotOtherAnswers, ltmDnsCacheStat=ltmDnsCacheStat, ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode=ltmMrPmbrDiameterSessionStatTotRetransmissionErrorCode, ltmIpsecalgProfileLogPublisher=ltmIpsecalgProfileLogPublisher, ltmWebsocketProfileStatCloseRsnOtherServerRecv=ltmWebsocketProfileStatCloseRsnOtherServerRecv, ltmClientSslStatSessCacheInvalidations=ltmClientSslStatSessCacheInvalidations, ltmRouteDomainStatClientBytesIn=ltmRouteDomainStatClientBytesIn)
mibBuilder.exportSymbols("F5-BIGIP-LOCAL-MIB", ltmTcpProfileLinkQosToClient=ltmTcpProfileLinkQosToClient, ltmHttpProfileResponseChunking=ltmHttpProfileResponseChunking, ltmLsnLogProfileDescription=ltmLsnLogProfileDescription, ltmDiameterrouterProfileMaxRetries=ltmDiameterrouterProfileMaxRetries, ltmDnsExpressStatTsigNotRequired=ltmDnsExpressStatTsigNotRequired, ltmFwNatDynamicPoolStatResetStats=ltmFwNatDynamicPoolStatResetStats, ltmFwNatStaticSourceTranslationPoolStatTransReqs=ltmFwNatStaticSourceTranslationPoolStatTransReqs, ltmRamUriInclGroup=ltmRamUriInclGroup, ltmRuleEventScript=ltmRuleEventScript, ltmNodeAddrStatus=ltmNodeAddrStatus, ltmDnsProfileUseLocalBind=ltmDnsProfileUseLocalBind, ltmVirtualServStatClientEvictedConns=ltmVirtualServStatClientEvictedConns, ltmFastHttpProfileStatResp5xxCnt=ltmFastHttpProfileStatResp5xxCnt, ltmDnsProfileStatRcodeServfail=ltmDnsProfileStatRcodeServfail, ltmLsnPoolStatTotalPortBlocksString=ltmLsnPoolStatTotalPortBlocksString, ltmHttpClassNumber=ltmHttpClassNumber, ltmClientSslStatDhGroupP256Offload=ltmClientSslStatDhGroupP256Offload, ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed=ltmMrPmbrDiameterRouterStatTotMessagesConnectionClosed, ltmSplitsessionclientProfileStatConnectionsAccepted=ltmSplitsessionclientProfileStatConnectionsAccepted, ltmDnsProfileStatOpcodeQuery=ltmDnsProfileStatOpcodeQuery, ltmHttpProfileRamcacheMaxEntries=ltmHttpProfileRamcacheMaxEntries, ltmDnsSecurityStatTxtDrops=ltmDnsSecurityStatTxtDrops, ltmTftpProfileStatNumber=ltmTftpProfileStatNumber, ltmSnatVlanGroup=ltmSnatVlanGroup, ltmIsessionProfileStatEntry=ltmIsessionProfileStatEntry, ltmPoolMinUpMembers=ltmPoolMinUpMembers, ltmPoolMbrStatusAddrType=ltmPoolMbrStatusAddrType, ltmSplitsessionclientProfileStatNumber=ltmSplitsessionclientProfileStatNumber, ltmVirtualAddrStat=ltmVirtualAddrStat, ltmHttpProxyConnectProfileDefaultState=ltmHttpProxyConnectProfileDefaultState, ltmTransAddrNumber=ltmTransAddrNumber, ltmNodeAddrMonitorStatus=ltmNodeAddrMonitorStatus, ltmHttpProfileStatVideoPrecompressBytes=ltmHttpProfileStatVideoPrecompressBytes, ltmServerSslStatSessCacheOverflows=ltmServerSslStatSessCacheOverflows, ltmCompUriInclName=ltmCompUriInclName, ltmRstCauseStat=ltmRstCauseStat, ltmFastL4ProfileLinkQosToServer=ltmFastL4ProfileLinkQosToServer, ltmPersistProfileTable=ltmPersistProfileTable, ltmFallbackStatusName=ltmFallbackStatusName, ltmVirtualServGroup=ltmVirtualServGroup, ltmIsessionProfileStatLzoInUses=ltmIsessionProfileStatLzoInUses, ltmMrPmbrDiameterSessionStatResetStats=ltmMrPmbrDiameterSessionStatResetStats, ltmHttp2Profile=ltmHttp2Profile, ltmHttpcompUriInclName=ltmHttpcompUriInclName, ltmDnsProfileLoggingProfile=ltmDnsProfileLoggingProfile, ltmLsnPoolStatTotalZombiePortBlocksDeleted=ltmLsnPoolStatTotalZombiePortBlocksDeleted, ltmTcpanalyticsProfileName=ltmTcpanalyticsProfileName, ltmClientSslStatOcspStaplingResponseValidationErrors=ltmClientSslStatOcspStaplingResponseValidationErrors, ltmHttpProfileStatRamcacheMissBytesAll=ltmHttpProfileStatRamcacheMissBytesAll, ltmAlgLogProfileEndControlAction=ltmAlgLogProfileEndControlAction, ltmNodeAddrStatPvaBytesOut=ltmNodeAddrStatPvaBytesOut, ltmTcpProfileIdleTimeout=ltmTcpProfileIdleTimeout, ltmPools=ltmPools, ltmNetworkAttackDataStatTable=ltmNetworkAttackDataStatTable, ltmServerSslCafile=ltmServerSslCafile, ltmClientSslStatNumber=ltmClientSslStatNumber, ltmClientSslStatRecordSize5k=ltmClientSslStatRecordSize5k, ltmHttpClassStatOtherPostcompressBytes=ltmHttpClassStatOtherPostcompressBytes, ltmDnsExpressStatAxfrQueries=ltmDnsExpressStatAxfrQueries, ltmHttpProfileRedirectRewrite=ltmHttpProfileRedirectRewrite, ltmWebaccCacheUriPinUri=ltmWebaccCacheUriPinUri, ltmMrPmbrDiameterRouterStatTotIncomingStreams=ltmMrPmbrDiameterRouterStatTotIncomingStreams, ltmLsnLogProfileGroup=ltmLsnLogProfileGroup, ltmDnsProfileStatAuthenticatedData=ltmDnsProfileStatAuthenticatedData, ltmClientSslStatSslv2=ltmClientSslStatSslv2, ltmClientSslStatConnectionMirrorHaFailure=ltmClientSslStatConnectionMirrorHaFailure, ltmLsnPrefixLsnPoolLsnPoolName=ltmLsnPrefixLsnPoolLsnPoolName, ltmRateFilterCeil=ltmRateFilterCeil, ltmDosApplicationTpsBasedUrlMaximumTps=ltmDosApplicationTpsBasedUrlMaximumTps, ltmNatStatName=ltmNatStatName, ltmRateFilterNumber=ltmRateFilterNumber, ltmTransAddrArpEnabled=ltmTransAddrArpEnabled, ltmDnsSecurityStatAnyDrops=ltmDnsSecurityStatAnyDrops, ltmSiprouterProfileStatCurPassthruConnections=ltmSiprouterProfileStatCurPassthruConnections, ltmHttpCompressionProfileStatCssPrecompressBytes=ltmHttpCompressionProfileStatCssPrecompressBytes, ltmPoolStatConnqAgeMax=ltmPoolStatConnqAgeMax, ltmDnsCacheStatKeyInserts=ltmDnsCacheStatKeyInserts, ltmVirtualServStatWlSyncookieRejects=ltmVirtualServStatWlSyncookieRejects, ltmPcpProfileStatName=ltmPcpProfileStatName, ltmFwNatStaticSourceTranslationPoolStatTransReqFails=ltmFwNatStaticSourceTranslationPoolStatTransReqFails, ltmVirtualAddrStatClientPktsIn=ltmVirtualAddrStatClientPktsIn, ltmIsessionProfileTargetVirtual=ltmIsessionProfileTargetVirtual, ltmHttpClassUriIndex=ltmHttpClassUriIndex, ltmLsnPoolStatTranslationRequests=ltmLsnPoolStatTranslationRequests, ltmFwContextStatEnforcedPacketsDefaultAccept=ltmFwContextStatEnforcedPacketsDefaultAccept, ltmPcpProfileStatGroup=ltmPcpProfileStatGroup, ltmLsnPoolStatHairpinConnectionFailures=ltmLsnPoolStatHairpinConnectionFailures, ltmDnsCacheStatRrsetMisses=ltmDnsCacheStatRrsetMisses, ltmFwNatDynamicPoolAddrFamily=ltmFwNatDynamicPoolAddrFamily, ltmVirtualServStatPvaMaxConns=ltmVirtualServStatPvaMaxConns, ltmHttpClassHeadIndex=ltmHttpClassHeadIndex, ltmServerSslProfileC3dCertExtensionCustomOidsNumber=ltmServerSslProfileC3dCertExtensionCustomOidsNumber, ltmDosApplicationTpsBasedSiteRateLimiting=ltmDosApplicationTpsBasedSiteRateLimiting, ltmDnsCacheMaxConcurrentTcp=ltmDnsCacheMaxConcurrentTcp, ltmRtspProfileConfigSource=ltmRtspProfileConfigSource, ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd=ltmFwNatStaticSourceTranslationPoolStatSubscrIdNotFd, ltmClientSslAllowExpiredCrl=ltmClientSslAllowExpiredCrl, ltmDiameterrouterProfileMaxPendingMessages=ltmDiameterrouterProfileMaxPendingMessages, ltmHttpProfileDefaultName=ltmHttpProfileDefaultName, ltmDnsProfileStatDnsRateRejectedRequests=ltmDnsProfileStatDnsRateRejectedRequests, ltmRtspProfileSessionReconnect=ltmRtspProfileSessionReconnect, ltmNat=ltmNat, ltmDnsExpressStatResetStats=ltmDnsExpressStatResetStats, ltmFwIpintRouteDomainStatNumber=ltmFwIpintRouteDomainStatNumber, ltmServerSslDropUnknownCertStatus=ltmServerSslDropUnknownCertStatus, ltmClientSslGenericAlert=ltmClientSslGenericAlert, ltmSipProfileStatTable=ltmSipProfileStatTable, ltmFwNatStaticDestinationTranslationPoolStatTransReqFails=ltmFwNatStaticDestinationTranslationPoolStatTransReqFails, ltmHttpClassStatCssPostcompressBytes=ltmHttpClassStatCssPostcompressBytes, ltmDosApplicationTpsBasedUrlRateLimiting=ltmDosApplicationTpsBasedUrlRateLimiting, ltmHttpProfileRamcacheObjectMaxSize=ltmHttpProfileRamcacheObjectMaxSize, ltmSipProfileTable=ltmSipProfileTable, ltmXmlProfileXpathQueriesString=ltmXmlProfileXpathQueriesString, ltmHttp2ProfileActivationModesEntry=ltmHttp2ProfileActivationModesEntry, ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted=ltmFwNatDynamicPoolStatPbaZombiePortBlocksDeleted, ltmRstCauseStatResetStats=ltmRstCauseStatResetStats, ltmDnsCacheStatFailureSend=ltmDnsCacheStatFailureSend, ltmPoolMemberStatTable=ltmPoolMemberStatTable, ltmDiametersessionProfileVendorSpecificVendorId=ltmDiametersessionProfileVendorSpecificVendorId, ltmMrPmbrSipSessionStatInfo=ltmMrPmbrSipSessionStatInfo, ltmPoolMemberStatConnqDepth=ltmPoolMemberStatConnqDepth, ltmClientSslFwdpLookupByIpaddrPort=ltmClientSslFwdpLookupByIpaddrPort, ltmVirtualServSourceAddressTranslationPool=ltmVirtualServSourceAddressTranslationPool, ltmSctpProfileRcvOrdered=ltmSctpProfileRcvOrdered, ltmRateFilterStat=ltmRateFilterStat, ltmPcpProfileStatPcpErrorsUnavailableResource=ltmPcpProfileStatPcpErrorsUnavailableResource, ltmMrPmbrSipSessionStatDrops=ltmMrPmbrSipSessionStatDrops, ltmDiametersessionProfileStatTotAccountingAnswers=ltmDiametersessionProfileStatTotAccountingAnswers, ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast=ltmFwNatDynamicPoolStatPcpAnnounceResponsesMulticast, ltmFwNatDynamicPoolGroup=ltmFwNatDynamicPoolGroup, ltmTransAddrName=ltmTransAddrName, ltmServerSslProfileStat=ltmServerSslProfileStat, ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource=ltmFwNatDynamicPoolStatPcpErrorsUnavailableResource, ltmSpdyProfileStatDataFramesReceived=ltmSpdyProfileStatDataFramesReceived, ltmDiametersessionProfileStatTotResultCodeRcvd5xxx=ltmDiametersessionProfileStatTotResultCodeRcvd5xxx, ltmClientSslStatConnectionMirrorHaCtxSent=ltmClientSslStatConnectionMirrorHaCtxSent, ltmHttpProfileCompressVaryHeader=ltmHttpProfileCompressVaryHeader, ltmDiameterrouterProfile=ltmDiameterrouterProfile, ltmFastL4ProfileResetOnTimeout=ltmFastL4ProfileResetOnTimeout, ltmServerSslStatGroup=ltmServerSslStatGroup, ltmDosAttackDataStatDeviceName=ltmDosAttackDataStatDeviceName, ltmTcpProfileMptcpRtomax=ltmTcpProfileMptcpRtomax, ltmFastL4ProfileStatSyncookReject=ltmFastL4ProfileStatSyncookReject, ltmMrPmbrSipRouterStatAddr=ltmMrPmbrSipRouterStatAddr, ltmLsnPoolFailureStatEntry=ltmLsnPoolFailureStatEntry, ltmFwRuleStatContextName=ltmFwRuleStatContextName, ltmNetworkAttackDataStatAttackDetected=ltmNetworkAttackDataStatAttackDetected, ltmSplitsessionclientProfileStatPeerMsgRecd=ltmSplitsessionclientProfileStatPeerMsgRecd, ltmSipProfileLogPublisher=ltmSipProfileLogPublisher, ltmIsessionProfileStatLzoInBytesOpt=ltmIsessionProfileStatLzoInBytesOpt, ltmSnatSnatpoolName=ltmSnatSnatpoolName, ltmRateFilterQtype=ltmRateFilterQtype, ltmFastL4ProfileStatRxbadpkt=ltmFastL4ProfileStatRxbadpkt, ltmDosApplicationNumber=ltmDosApplicationNumber, ltmTcpProfileStatTable=ltmTcpProfileStatTable, ltmAuthProfileStat=ltmAuthProfileStat, ltmDiametersessionProfileConfigSource=ltmDiametersessionProfileConfigSource, ltmVirtualServStatVsUsageRatio5m=ltmVirtualServStatVsUsageRatio5m, ltmMrPmbrDiameterRouterStatTotMessagesReturned=ltmMrPmbrDiameterRouterStatTotMessagesReturned, ltmFwNatDynamicPoolFailureStatFailureCount=ltmFwNatDynamicPoolFailureStatFailureCount, ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests=ltmMrPmbrDiameterRouterStatTotExpiredPendingRequests, ltmDnsServerStatXfrQueries=ltmDnsServerStatXfrQueries, ltmSnatStatClientPktsIn=ltmSnatStatClientPktsIn, ltmClientSslPeerNoRenegotiateTimeout=ltmClientSslPeerNoRenegotiateTimeout, ltmFwPolicyRuleStatGroup=ltmFwPolicyRuleStatGroup, ltmMrPmbrSipRouterStat=ltmMrPmbrSipRouterStat, ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers=ltmMrPmbrDiameterRouterStatTotDroppedUnexpectedAnswers, ltmDnsCacheStatTcpPktsIn=ltmDnsCacheStatTcpPktsIn, ltmPoolQueueOnConnectionLimit=ltmPoolQueueOnConnectionLimit, ltmPoolMemberStatCurrPvaAssistConn=ltmPoolMemberStatCurrPvaAssistConn, ltmMrPmbrSipRouterStatCurOutgoingConnections=ltmMrPmbrSipRouterStatCurOutgoingConnections, ltmFastHttpProfileStatPostReqs=ltmFastHttpProfileStatPostReqs, ltmLsnPrefixLsnPoolNumber=ltmLsnPrefixLsnPoolNumber, ltmMrPmbrSipRouterStatTotMessagesQueueFull=ltmMrPmbrSipRouterStatTotMessagesQueueFull, ltmMrPmbrDiameterSessionStat=ltmMrPmbrDiameterSessionStat, ltmRamUriPinNumber=ltmRamUriPinNumber, ltmSnatStatTable=ltmSnatStatTable, ltmHttpCompressionProfileStatImagePrecompressBytes=ltmHttpCompressionProfileStatImagePrecompressBytes, ltmServerSslStatSessionMirrorFailure=ltmServerSslStatSessionMirrorFailure, ltmFwRuleStatOverlapType=ltmFwRuleStatOverlapType, ltmSiprouterProfileStatTotPassthruBytes=ltmSiprouterProfileStatTotPassthruBytes, ltmIsessionProfileStatDedupOutHitHistBucket128k=ltmIsessionProfileStatDedupOutHitHistBucket128k, ltmClientSslStatOcspFwdpClientsslStapledResp=ltmClientSslStatOcspFwdpClientsslStapledResp, ltmSnatStatClientBytesOut=ltmSnatStatClientBytesOut, ltmRtspProfileMaxHeaderSize=ltmRtspProfileMaxHeaderSize, ltmLsnPoolInboundConnections=ltmLsnPoolInboundConnections, ltmConnPoolProfileDefaultName=ltmConnPoolProfileDefaultName, ltmLsnLogProfileEndOutboundElementsNumber=ltmLsnLogProfileEndOutboundElementsNumber, ltmHttpProxyConnectProfileStatName=ltmHttpProxyConnectProfileStatName, ltmHttpProfileConfigSource=ltmHttpProfileConfigSource, ltmDosWhiteIpNetmaskType=ltmDosWhiteIpNetmaskType, ltmPoolStatConnqAllServiced=ltmPoolStatConnqAllServiced, ltmUserStatProfile=ltmUserStatProfile, ltmFwNatDynamicPoolEgressInterfacesEnabled=ltmFwNatDynamicPoolEgressInterfacesEnabled, ltmNatStatServerBytesIn=ltmNatStatServerBytesIn, ltmLsnPoolFailureStatFailureCount=ltmLsnPoolFailureStatFailureCount, ltmNodeAddrStatServerPktsIn=ltmNodeAddrStatServerPktsIn, ltmNatStatResetStats=ltmNatStatResetStats, ltmNodeAddrStatTotPvaAssistConn=ltmNodeAddrStatTotPvaAssistConn, ltmNodeAddrStatNodeName=ltmNodeAddrStatNodeName, ltmVirtualServWildmask=ltmVirtualServWildmask, ltmFwIpintRouteDomainStatGroup=ltmFwIpintRouteDomainStatGroup, ltmServerSslStatInsecureHandshakeRejects=ltmServerSslStatInsecureHandshakeRejects, ltmRtsp=ltmRtsp)
