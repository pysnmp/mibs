#
# PySNMP MIB module SIAE-RADIO-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-RADIO-SYSTEM-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:14:33 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
AlarmStatus, AlarmSeverityCode, alarmTrap = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmStatus", "AlarmSeverityCode", "alarmTrap")
equipIpSnmpAgentAddress, = mibBuilder.importSymbols("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, NotificationType, ObjectIdentity, Unsigned32, Counter64, iso, TimeTicks, MibIdentifier, Bits, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "NotificationType", "ObjectIdentity", "Unsigned32", "Counter64", "iso", "TimeTicks", "MibIdentifier", "Bits", "Gauge32")
TextualConvention, RowStatus, DisplayString, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString", "StorageType")
radioSystem = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 80))
radioSystem.setRevisions(('2016-07-14 00:00', '2016-02-29 00:00', '2015-09-15 00:00', '2015-06-18 00:00', '2015-03-23 00:00', '2014-11-05 00:00', '2014-09-16 00:00', '2014-04-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: radioSystem.setRevisionsDescriptions(('MIB version 01.00.05\n             - added radioXpd in radioStatusTable\n             - deprecated linkXpd in linkStatusTable\n            ', 'MIB version 01.00.04\n             - Added linkXpd to linkStatusTable\n             - changed MAX-ACCESS clause of linkChRadioSettingsIdx from\n               read-only to read-create \n             - Fixed DESCRIPTION of linkSettingsTable\n            ', 'Fixed DESCRIPTION of radioTxChannelSpacing\n            ', 'MIB version 01.00.03\n             - Added linkConfigurationInProgress and \n               linkConfigurationInProgressTrapNotification\n             - Added radio radioRxBerThresholdTable\n             - Added fadeMarginMeasure\n             - Deprecated linkFadeMarginMeasure\n             - Added table radioLoopCapabilityTable\n             - Added table sspTable\n             - Added table stm1BulkSettingsTable\n             - Added table linkE1vsSTM1CapacityTable\n             - Deprecated linkAcmMaxTDMCapacity\n             - Deprecated linkTfcTable, linkProTable and linkProMaintTable.\n             - Added linkTfcV2Table, linkProV2Table and linkProMaintV2Table\n               in order to replace deprecated tables.\n             - Added channelSpacingSelection\n            ', 'Removed alarmTrapNumber from TRAPs and IMPORTS.\n            ', 'MIB version 01.00.02\n             Changes for support of modulation 4096QAM:\n             - DESCRIPTION of linkBandwidthAndModulation\n             - ModulationMap TEXTUAL-CONVENTION\n             - BitsPerSymbol TEXTUAL-CONVENTION\n             Changes for support of channel spacing 60MHz and 80MHz:\n             - DESCRIPTION of linkBandwidthAndModulation\n             - ChannelSpacing TEXTUAL-CONVENTION\n            ', 'MIB version 01.00.01\n             - Added combinedRadioCapabilitiesTable, combinedRadioFrequencyTable,\n               combinedRadioDuplexFrequencyTable and combinedRadioPowerScalingTable\n             - Declared deprecated linkCapabilitiesTable, linkFrequencyTable,\n               linkDuplexFrequencyTable, linkAcmPowerScaling,\n               linkAcmAtpcRxPowerScaling and linkAcmPowerRange.\n             - Added linkNotMatchingRadiosAlarm and\n               linkNotMatchingRadiosAlarmSeverityCode\n            ', 'Initial version 01.00.00.\n            ',))
if mibBuilder.loadTexts: radioSystem.setLastUpdated('201607140000Z')
if mibBuilder.loadTexts: radioSystem.setOrganization('SIAE MICROELETTRONICA spa')
if mibBuilder.loadTexts: radioSystem.setContactInfo('SIAE MICROELETTONICA s.p.a.\n             Via Michelangelo Buonarroti, 21\n             20093 - Cologno Monzese\n             Milano - ITALY\n             Phone :  +39-02-27325-1\n             E-mail: help@siaemic.com\n            ')
if mibBuilder.loadTexts: radioSystem.setDescription('Radio System MIB.\n            ')
class ChannelSpacing(TextualConvention, Integer32):
    description = 'This TC describes a data type which identifies a RF channel spacing.\n         '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 5, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("bw3M5Hz", 0), ("bw7Mhz", 1), ("bw14MHz", 2), ("bw28MHz", 3), ("bw40MHz", 5), ("bw56MHz", 4), ("bw112MHz", 6), ("bw250Mhz", 7), ("bw500Mhz", 8), ("bw750Mhz", 9), ("bw1000Mhz", 10), ("bw10Mhz", 11), ("bw20Mhz", 12), ("bw30Mhz", 13), ("bw50Mhz", 14), ("bw60Mhz", 15), ("bw80Mhz", 16))

class ModulationMap(TextualConvention, Bits):
    description = 'This data type is used as the syntax of the radioBranchModulationMap\n          and radioBranchRefModulationMap objects.\n         '
    status = 'current'
    namedValues = NamedValues(("modBPSK", 0), ("mod4QAM", 1), ("mod8PSK", 2), ("mod16QAM", 3), ("mod32QAM", 4), ("mod64QAM", 5), ("mod128QAM", 6), ("mod256QAM", 7), ("mod512QAM", 8), ("mod1024QAM", 9), ("mod2048QAM", 10), ("mod4096QAM", 11))

class ConfigMismatchReason(TextualConvention, Bits):
    description = "This data type is used to specify the cause of Config Mismatch Alarm,\n          that is the mismatch between the radio link capability and the current\n          local and remote configuration.\n            - securityMismatch(0)\n                Copyright violation\n            - frequencyFailMismatch(1)\n                Configured frequency is out of  Filter-Bandwidth\n            - frequencyAlertMismatch(2)\n                  Configured frequency across Filter-Bandwidth\n            - ptxMismatch(3) \n                  Tx power configured incongruent with RF Tx power limits\n            - channelSpacingAndModulationMismatch(4)\n                  Bandwidth and/or modulation configured is invalid\n                  (RF doesn't support it) \n            - remoteConfigurationMismatch(5)\n                  Incongruence between the couple of Terminal Radio Unit (TRU)\n                  in the link:\n                  - Frequency Incongruent (Freq)\n                  - Reference Bandwidth and Modulation incongruent\n                  - Acm-Tx map in congruent with remote Acm-Rx map\n            - acmMismatch(6) \n                  Obsolete (no longer used)\n            - profileSetMismatch(7)\n                  The selected profile set is not supported by the TRU\n         "
    status = 'current'
    namedValues = NamedValues(("securityMismatch", 0), ("frequencyFailMismatch", 1), ("frequencyAlertMismatch", 2), ("ptxMismatch", 3), ("channelSpacingAndModulationMismatch", 4), ("remoteConfigurationMismatch", 5), ("acmMismatch", 6), ("profileSetMismatch", 7))

class RadioCapability(TextualConvention, Bits):
    description = 'This data type is used as the syntax of the radioBranchKeyFeatures\n          objects.\n         '
    status = 'current'
    namedValues = NamedValues(("reserved", 0), ("trafficSquelch", 1), ("baseBandLoop", 2), ("maxPower", 3), ("carrierOnly", 4), ("iQLoop", 5), ("rfLoopGivenMod", 6), ("rfLoopAnyMod", 7))

class BitsPerSymbol(TextualConvention, Integer32):
    description = 'his TC describes a data type which identifies a RF channel spacing.\n         '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("bpsBPSK", 1), ("bps4QAM", 2), ("bps8PSK", 3), ("bps16QAM", 4), ("bps32QAM", 5), ("bps64QAM", 6), ("bps128QAM", 7), ("bps256QAM", 8), ("bps512QAM", 9), ("bps1024QAM", 10), ("bps2048QAM", 11), ("bps4096QAM", 12))

class Stm1IndexOrZero(TextualConvention, Integer32):
    description = 'This textual convention permits the\n          additional value of zero to an stm1Index in stm1Table.\n          The value zero is object-specific and must therefore be \n          defined as part of the description of any object which\n          uses this syntax.  Examples of the usage of zero might\n          include situations where stm-1 was unknown, or when none\n          or all stm-1s need to be referenced.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 2147483647)

radioSystemMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSystemMibVersion.setStatus('current')
if mibBuilder.loadTexts: radioSystemMibVersion.setDescription('Numerical version of this module.\n             The string version of this MIB have the following format:\n                XX.YY.ZZ\n             so, for example, the value 1 should be interpreted as 00.00.01\n             and the value 10001 should be interpreted as 01.00.01.')
radioTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2), )
if mibBuilder.loadTexts: radioTable.setStatus('current')
if mibBuilder.loadTexts: radioTable.setDescription('A list of radio interface entries. This table is useful \n             to show the manager all the available radio interfaces \n             on the equipment. Moreover it is a reference for \n             Performance Monitoring (PWR and G828).\n            ')
radioEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioEntry.setStatus('current')
if mibBuilder.loadTexts: radioEntry.setDescription('An entry containing management information applicable to a\n             particular radio interface.\n            ')
radioIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIndex.setStatus('current')
if mibBuilder.loadTexts: radioIndex.setDescription('A unique value, greater than zero, for each radio \n            interface.  It is recommended that values are assigned\n            contiguously starting from 1.\n            ')
radioLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLabel.setStatus('current')
if mibBuilder.loadTexts: radioLabel.setDescription('A textual string containing information about the radio\n            interface.  This string should include the name of the\n            manufacturer, the product name and the version of the\n            interface hardware/software.\n            ')
radioType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("analogRadio", 2), ("digitalRadio", 3), ("xpicRadio", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioType.setStatus('current')
if mibBuilder.loadTexts: radioType.setDescription('The type of interface.\n            ')
radioIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIfIndex.setStatus('current')
if mibBuilder.loadTexts: radioIfIndex.setDescription('This object defines a greater than zero value \n            to identify an interface in ifTable or a zero \n            value if ifTable is not supported.           \n           ')
radioStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 2, 1, 5), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioStorageType.setStatus('current')
if mibBuilder.loadTexts: radioStorageType.setDescription("The storage type of this conceptual row. Conceptual \n            rows having the value 'permanent' need not allow \n            write-access to any columnar objects in the row.\n           ")
xpicTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 3), )
if mibBuilder.loadTexts: xpicTable.setStatus('current')
if mibBuilder.loadTexts: xpicTable.setDescription('A list of xpic radio interface entries. If a manager \n             wants to make an xpic link, it should only add a \n             particular xpic radio interface to an xpic link.\n            ')
xpicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 3, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "xpicIndex"))
if mibBuilder.loadTexts: xpicEntry.setStatus('current')
if mibBuilder.loadTexts: xpicEntry.setDescription('An entry containing management information applicable to a\n             particular xpic radio interface.\n            ')
xpicIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpicIndex.setStatus('current')
if mibBuilder.loadTexts: xpicIndex.setDescription('A unique value, greater than zero, for each xpic radio \n            interface.  It is recommended that values are assigned\n            contiguously starting from 1.\n            ')
xpicRadioIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xpicRadioIdx.setStatus('current')
if mibBuilder.loadTexts: xpicRadioIdx.setDescription('Index of xpic radio interface, corresponding \n             to an available xpic radio interface in radioTable.\n            ')
xpicRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 3, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xpicRowstatus.setStatus('current')
if mibBuilder.loadTexts: xpicRowstatus.setDescription('Status of this conceptual row in xpicTable.\n            ')
xpicChTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 4), )
if mibBuilder.loadTexts: xpicChTable.setStatus('current')
if mibBuilder.loadTexts: xpicChTable.setDescription('A list of xpic channel entries. This table maps\n             each xpic radio in respective xpic radio interface.\n            ')
xpicChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 4, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "xpicIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "xpicChPolIndex"))
if mibBuilder.loadTexts: xpicChEntry.setStatus('current')
if mibBuilder.loadTexts: xpicChEntry.setDescription('An entry containing management information applicable to a\n             particular xpic channel. It defines radio interface and \n             polarization for a given xpic channel.\n            ')
xpicChPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xpicChPolIndex.setStatus('current')
if mibBuilder.loadTexts: xpicChPolIndex.setDescription('This object identifies the xpic radio polarization.\n            ')
xpicChRadioIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 4, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xpicChRadioIdx.setStatus('current')
if mibBuilder.loadTexts: xpicChRadioIdx.setDescription('Xpic radio interface, corresponding to a radio interface \n             in radioTable, used to make up the given xpic radio interface.\n            ')
xpicChRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: xpicChRowstatus.setStatus('current')
if mibBuilder.loadTexts: xpicChRowstatus.setDescription('Status of this conceptual row in xpicChTable.\n            ')
linkAvailableIndex = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAvailableIndex.setStatus('current')
if mibBuilder.loadTexts: linkAvailableIndex.setDescription('Shows an index which is available for creation of a new link\n             in the system. It shows the smallest available index.\n             Any attempt to create a link with a different index results\n             in a failure.\n            ')
linkTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6), )
if mibBuilder.loadTexts: linkTable.setStatus('current')
if mibBuilder.loadTexts: linkTable.setDescription('A list of link entries. \n            ')
linkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkEntry.setStatus('current')
if mibBuilder.loadTexts: linkEntry.setDescription('An entry containing management information applicable to a\n             particular link.\n            ')
linkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIndex.setStatus('current')
if mibBuilder.loadTexts: linkIndex.setDescription('A unique value, greater than zero, for each link.\n             Manager must use the first available index, \n             suggested by linkAvailableIndex.\n            ')
linkType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("radio1p0", 1), ("radio1p1HS", 2), ("radio1p1FD", 3), ("radio2p0Xpic", 4), ("radio2p2XpicHS", 5), ("radio2p2XpicFD", 6), ("radioNp1", 7))).clone('radio1p0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkType.setStatus('current')
if mibBuilder.loadTexts: linkType.setDescription('This object identifies link type. Supported link types are:\n             single link, 1+1 Hot Standby, 1+1 Frequency Diversity, 2+0 XPIC,\n             2+2 XPIC Hot Standby, 2+2 XPIC Frequency Diversity and N+1.\n            ')
linkLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkLabel.setStatus('current')
if mibBuilder.loadTexts: linkLabel.setDescription('A textual string containing information about the link.\n             This string should give more details about link specific\n             parameters.\n            ')
linkIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIfIndex.setStatus('current')
if mibBuilder.loadTexts: linkIfIndex.setDescription('This object defines a greater than zero value \n             to identify a link in ifTable or a zero \n             value if ifTable is not supported.           \n            ')
linkRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRowstatus.setStatus('current')
if mibBuilder.loadTexts: linkRowstatus.setDescription('Status of this row of linkTable. This object is used to manage the\n             creation and deletion of conceptual rows in linkTable.\n             To create a row in this table, a manager should set rowstatus to \n             createAndWait(5) and choose a link type. Respective entries in \n             linkSettingsTable, linkStatusTable and tdmSettingsTable will be \n             created by agent.In case of protection links proper entries in \n             linkProtectionTable will be also created. \n             Until instances of all corresponding columns are appropriately \n             configured, the value of the corresponding instance of rowstatus\n             is notReady(3).\n             When there is sufficient information to (attempt to) make the \n             conceptual row available for use by the managed device, \n             then the rowstatus column turns into notInService(2); manager \n             must set rowstatus to active(1) to make the conceptual row\n             active.\n             The contents of linkSettingsTable and radioSettingsTable can be\n             changed only if this object is notInService(2).\n            ')
linkChTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7), )
if mibBuilder.loadTexts: linkChTable.setStatus('current')
if mibBuilder.loadTexts: linkChTable.setDescription('A list of link channel entries.\n            ')
linkChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkChIndex"))
if mibBuilder.loadTexts: linkChEntry.setStatus('current')
if mibBuilder.loadTexts: linkChEntry.setDescription('An entry containing management information applicable to a\n             particular link channel. \n            ')
linkChIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkChIndex.setStatus('current')
if mibBuilder.loadTexts: linkChIndex.setDescription('Link Channel Index.\n            ')
linkChRadioIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkChRadioIdx.setStatus('current')
if mibBuilder.loadTexts: linkChRadioIdx.setDescription('Radio channel index that corresponds to an\n             available radio interface in radioTable.\n            ')
linkChRadioSettingsIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkChRadioSettingsIdx.setStatus('current')
if mibBuilder.loadTexts: linkChRadioSettingsIdx.setDescription('Radio Settings Index. This object is a foreign\n             key for a corresponding radioSettingsTable entry, \n             which is automatically created by agent.\n            ')
linkChRowstatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkChRowstatus.setStatus('current')
if mibBuilder.loadTexts: linkChRowstatus.setDescription('Status of this row of linkChTable. This object is used \n             to manage the creation and deletion of conceptual rows in \n             linkChTable.\n             To create a row in this table, a manager should set rowstatus to \n             createAndWait(5). Until instances of all corresponding columns \n             are appropriately configured, the value of the corresponding \n             instance of rowstatus is notReady(3).\n             When there is sufficient information to (attempt to) make the \n             conceptual row available for use by the managed device, \n             then the rowstatus column turns into notInService(2); manager \n             must set rowstatus to active(1) to make the conceptual row\n             active.\n             The content of radioSettingsTable can be changed only if this\n             object is notInService(2).\n             ')
linkSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8), )
if mibBuilder.loadTexts: linkSettingsTable.setStatus('current')
if mibBuilder.loadTexts: linkSettingsTable.setDescription('Table with link settings entries. This table contains all\n             parameters of a radio frequency link. The content of this\n             table can be changed by a manager if linkRowStatus is \n             notInService(2).')
linkSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: linkSettingsEntry.setDescription('Radio link entry')
linkBandwidthAndModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkBandwidthAndModulation.setStatus('current')
if mibBuilder.loadTexts: linkBandwidthAndModulation.setDescription('Link Modulation and Bandwidth (channel spacing).\n              The value of this object value is computed by:\n                 65536*modulation+bandwidth\n               where bandwidth selection is:\n                 0 = 3.5Mhz\n                 1 = 7MHz\n                 2 = 14MHz\n                 3 = 28MHz\n                 4 = 56MHz\n                 5 = 10MHz\n                 6 = 20MHz\n                 7 = 30MHz\n                 8 = 40MHz\n                 9 = 50MHz\n                10 = 112Mhz\n                11 = 250Mhz\n                12 = 500Mhz\n                13 = 750Mhz\n                14 = 1Ghz\n                15 = 60MHz\n                16 = 80MHz\n               and modulation is in bit-per-symbol:\n                 1 = BPSK\n                 2 = 4QAM\n                 3 = 8PSK\n                 4 = 16QAM\n                 5 = 32QAM\n                 6 = 64QAM\n                 7 = 128QAM\n                 8 = 256QAM\n                 9 = 512QAM\n                10 = 1024QAM\n                11 = 2048QAM.\n                12 = 4096QAM.\n\n               Examples:\n               250Mhz-4QAM  (131083),\n               500Mhz-4QAM  (131084),\n               250Mhz-16QAM (262155),\n               500Mhz-64QAM (393228).\n\n               Note: 0 bit-per-symbol is not possible,\n               so value 0 is used for\n               BandwidthAndModulation unassigned.')
linkAcmEngineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkAcmEngineEnable.setStatus('current')
if mibBuilder.loadTexts: linkAcmEngineEnable.setDescription('This object is used to enable/disable the ACM engine')
linkTxUpperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTxUpperProfile.setStatus('current')
if mibBuilder.loadTexts: linkTxUpperProfile.setDescription('The object (and linkTxLowerProfile object) is used to \n              restrict the TX profile range when ACM is enabled.')
linkTxLowerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTxLowerProfile.setStatus('current')
if mibBuilder.loadTexts: linkTxLowerProfile.setDescription('The object (and linkTxUpperProfile object) is used to\n              restrict the TX profile range when ACM is enabled.')
linkId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkId.setStatus('current')
if mibBuilder.loadTexts: linkId.setDescription('Link Identification (value 0..255)')
linkTxPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 15)).clone(3)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTxPwrThresh.setStatus('current')
if mibBuilder.loadTexts: linkTxPwrThresh.setDescription('Threshold (value +3 , +15 dB) relative to nominal value of the TX power\n            below wich the related alarm is set.')
linkRxPwrThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-99, -40)).clone(-70)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkRxPwrThresh.setStatus('current')
if mibBuilder.loadTexts: linkRxPwrThresh.setDescription('Threshold (value -40 , -99 dBm) for RX power below wich the related\n            alarm is set.')
linkSynchSetupProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkSynchSetupProtocolEnable.setStatus('current')
if mibBuilder.loadTexts: linkSynchSetupProtocolEnable.setDescription('Synchronization Setup Protocol (SSP) control')
linkProfilesSetSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highThroughput", 1), ("highGain", 2))).clone('highThroughput')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProfilesSetSelection.setStatus('current')
if mibBuilder.loadTexts: linkProfilesSetSelection.setDescription('Selection of the working profile set between high gain\n             (max robustness) profile set and high throughput (max\n             capacity) profile set. The set of profiles high gain\n             features a greater robustness against to the set of\n             profiles high throughput.\n             For radio systems that do not have more sets of profiles,\n             this object becomes read only and its reading shows the \n             only one set of profiles supported.\n            ')
linkXpicControlProcedure = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 8, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkXpicControlProcedure.setStatus('current')
if mibBuilder.loadTexts: linkXpicControlProcedure.setDescription('Set by manager to enable\\disable XPIC alarm control procedure.\n             Only for XPIC configurations.')
radioSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9), )
if mibBuilder.loadTexts: radioSettingsTable.setStatus('current')
if mibBuilder.loadTexts: radioSettingsTable.setDescription('Table with radio settings entries. This table contains all\n             parameters of a radio terminal. The content of this table\n             can be changed only linkRowStatus is notInService(2)')
radioSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioSettingsIndex"))
if mibBuilder.loadTexts: radioSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: radioSettingsEntry.setDescription('Radio terminal entry')
radioSettingsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSettingsIndex.setStatus('current')
if mibBuilder.loadTexts: radioSettingsIndex.setDescription('Radio settings index.\n            ')
radioSettingsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioSettingsRowStatus.setStatus('current')
if mibBuilder.loadTexts: radioSettingsRowStatus.setDescription('Status of this row.\n            ')
radioSettingsLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioSettingsLabel.setStatus('current')
if mibBuilder.loadTexts: radioSettingsLabel.setDescription('A textual string containing information about the radio\n            interface.  \n            ')
radioTxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioTxFrequency.setStatus('current')
if mibBuilder.loadTexts: radioTxFrequency.setDescription('Transmitted frequency in KHz. Null value means invalid frequency.')
radioDuplexFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 5), Integer32().clone(-2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioDuplexFrequency.setStatus('current')
if mibBuilder.loadTexts: radioDuplexFrequency.setDescription('Value of duplex frequency in KHz. -2 means not set.')
radioTxAttenuation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioTxAttenuation.setStatus('current')
if mibBuilder.loadTexts: radioTxAttenuation.setDescription('Transmitter attenuation relative to nominal power (dBm).')
radioAtpcManual = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioAtpcManual.setStatus('current')
if mibBuilder.loadTexts: radioAtpcManual.setDescription('Enables/disables Atpc Manual operation.')
radioAtpcPwrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 8), Integer32().clone(-40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioAtpcPwrHigh.setStatus('current')
if mibBuilder.loadTexts: radioAtpcPwrHigh.setDescription('ATPC Control - Local Rx Power High (dBm range -30 to -80) -.')
radioAtpcPwrLow = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 9), Integer32().clone(-60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioAtpcPwrLow.setStatus('current')
if mibBuilder.loadTexts: radioAtpcPwrLow.setDescription('ATPC Control - Local Rx Power Low (dBm range -30 to -80) -.')
radioAtpcRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioAtpcRange.setStatus('current')
if mibBuilder.loadTexts: radioAtpcRange.setDescription('Defines the range of the ATPC regulation (expressed in dB) with respect\n             to the current value of maximum Tx output, that is intended as the upper\n             limit of the range. A null value means no limit: the lower limit\n             of the range is equal to minimum Ptx.')
radioFreqTableSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 9, 1, 11), ChannelSpacing()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radioFreqTableSelection.setStatus('current')
if mibBuilder.loadTexts: radioFreqTableSelection.setDescription('RadioFrequencyTable key (channel spacing & modulation) selection.')
tdmSettingsTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 10), )
if mibBuilder.loadTexts: tdmSettingsTable.setStatus('current')
if mibBuilder.loadTexts: tdmSettingsTable.setDescription('Table with tdm settings entries.\n           ')
tdmSettingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 10, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "tdmPolIndex"))
if mibBuilder.loadTexts: tdmSettingsEntry.setStatus('current')
if mibBuilder.loadTexts: tdmSettingsEntry.setDescription('An entry containing tdm parameters for a particular link.\n            ')
tdmPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tdmPolIndex.setStatus('current')
if mibBuilder.loadTexts: tdmPolIndex.setDescription('Polarization index.\n            ')
tdmE1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 10, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmE1Channel.setStatus('current')
if mibBuilder.loadTexts: tdmE1Channel.setDescription('Number of E1 channels. This object is used to define the capacity\n             of E1 tributaries assigned to a given radio link. The capacity is\n             changed in steps of E1 (2Mbit/s).    \n            ')
tdmE1Framer = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tdmE1Framer.setStatus('current')
if mibBuilder.loadTexts: tdmE1Framer.setDescription('This object is used to attach the framer to a given E1. \n            ')
radioCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11), )
if mibBuilder.loadTexts: radioCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesTable.setDescription('Table with RadioCapabilities entries: there is an entry for each \n             radioTable rows.')
radioCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesEntry.setDescription('RadioCapabilities entry.')
radioCapabilitiesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 1), RadioCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesCapability.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesCapability.setDescription('Bit map to describe the radio features.')
radioCapabilitiesTxMinFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesTxMinFrequency.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesTxMinFrequency.setDescription('Minimum of available channel frequency in KHz.')
radioCapabilitiesTxMaxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesTxMaxFrequency.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesTxMaxFrequency.setDescription('Maximum of available channel frequency in KHz.')
radioCapabilitiesStepFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesStepFrequency.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesStepFrequency.setDescription('Minimum frequency step in KHz.')
radioCapabilitiesMinPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesMinPtxNominalValue.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesMinPtxNominalValue.setDescription('Minimum nominal Ptx in dBm.')
radioCapabilitiesMaxPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesMaxPtxNominalValue.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesMaxPtxNominalValue.setDescription('Maximum nominal Ptx in dBm.')
radioCapabilitiesExtendedMinPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCapabilitiesExtendedMinPwr.setStatus('current')
if mibBuilder.loadTexts: radioCapabilitiesExtendedMinPwr.setDescription('Minimum extended Ptx power for fade margin.')
radioStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12), )
if mibBuilder.loadTexts: radioStatusTable.setStatus('current')
if mibBuilder.loadTexts: radioStatusTable.setDescription('Table with RadioStatus records: one record for 1+0 configuration and\n             two record for 1+1 configuration.')
radioStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioStatusEntry.setStatus('current')
if mibBuilder.loadTexts: radioStatusEntry.setDescription('RadioStatus record.')
radioCurrentDuplexFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCurrentDuplexFrequency.setStatus('current')
if mibBuilder.loadTexts: radioCurrentDuplexFrequency.setDescription('Spacing between transmitted and received frequency in KHz.')
radioTxChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: radioTxChannelSpacing.setDescription('Half of transmitted signal channel spacing in KHz.')
radioPrx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioPrx.setStatus('current')
if mibBuilder.loadTexts: radioPrx.setDescription('Received power level (dBm).')
radioPtx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioPtx.setStatus('current')
if mibBuilder.loadTexts: radioPtx.setDescription('Transmitted power level (dBm).')
radioNormalizedMse = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioNormalizedMse.setStatus('current')
if mibBuilder.loadTexts: radioNormalizedMse.setDescription("Normalized MSE (Mean Squared Error) is an indicator of the Signal\n             to Noise (S/N) ratio. It's in 0.1 dB steps")
radioRxActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxActiveStatus.setStatus('current')
if mibBuilder.loadTexts: radioRxActiveStatus.setDescription('Receiver Active status with associated Severity\n             In 1+1 Hot Standby radio system, only one RX is active.\n             RXs are active in other configurations of the radio system.\n            ')
radioTxActiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxActiveStatus.setStatus('current')
if mibBuilder.loadTexts: radioTxActiveStatus.setDescription('Transmitter Active status with associated Severity.\n             In 1+1 Hot Standby radio system, only one TX is active.\n             TXs are active in other configurations of the radio system.\n            ')
radioCableOpenAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 8), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCableOpenAlarm.setStatus('current')
if mibBuilder.loadTexts: radioCableOpenAlarm.setDescription('Cable connnecting ODU is open: alarm status with associated\n             severity.\n            ')
radioCableShortAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 9), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioCableShortAlarm.setStatus('current')
if mibBuilder.loadTexts: radioCableShortAlarm.setDescription('Cable connnecting ODU is in short-circuit: alarm status\n             with associated severity.\n            ')
radioInvalidFrequencyAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 10), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioInvalidFrequencyAlarm.setStatus('current')
if mibBuilder.loadTexts: radioInvalidFrequencyAlarm.setDescription('Invalid frequency alarm with associated severity.')
radioBaseBandRxAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 11), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioBaseBandRxAlarm.setStatus('current')
if mibBuilder.loadTexts: radioBaseBandRxAlarm.setDescription('Base Band Rx alarm status with associated severity.')
radioModulatorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 12), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioModulatorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: radioModulatorFailAlarm.setDescription('Modulator Fail Alarm status with associated severity.')
radioDemodulatorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 13), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDemodulatorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: radioDemodulatorFailAlarm.setDescription('Demodulator Fail Alarm status with associated severity.')
radioRxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 14), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: radioRxPowerLowAlarm.setDescription('Receiver power low alarm status with associated severity.')
radioTxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 15), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: radioTxPowerLowAlarm.setDescription('Transmitter power low alarm status with associated severity.')
radioRemDemodulatorFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 16), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRemDemodulatorFailAlarm.setStatus('current')
if mibBuilder.loadTexts: radioRemDemodulatorFailAlarm.setDescription('Remote Demodulator Fail Alarm status with associated severity.')
radioVcoFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 17), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioVcoFailAlarm.setStatus('current')
if mibBuilder.loadTexts: radioVcoFailAlarm.setDescription('RT VCO fail alarm status with associated severity.')
radioRxIFAgcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 18), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxIFAgcAlarm.setStatus('current')
if mibBuilder.loadTexts: radioRxIFAgcAlarm.setDescription('RT Rx IF AGC fail alarm status with associated severity.')
radioTxIFAgcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 19), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioTxIFAgcAlarm.setStatus('current')
if mibBuilder.loadTexts: radioTxIFAgcAlarm.setDescription('RT Tx IF AGC fail alarm status with associated severity.')
radioIduOduCommunicationAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 20), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioIduOduCommunicationAlarm.setStatus('current')
if mibBuilder.loadTexts: radioIduOduCommunicationAlarm.setDescription('Communication from IDU towards ODU is down')
radioOduIduCommunicationAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 21), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioOduIduCommunicationAlarm.setStatus('current')
if mibBuilder.loadTexts: radioOduIduCommunicationAlarm.setDescription('Communication from ODU towards IDU is down')
radioLocalOduAlarmSynthesis = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 22), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLocalOduAlarmSynthesis.setStatus('current')
if mibBuilder.loadTexts: radioLocalOduAlarmSynthesis.setDescription('Local ODU alarm synthesis with associated severity.')
radioRemoteOduAlarmSynthesis = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 23), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRemoteOduAlarmSynthesis.setStatus('current')
if mibBuilder.loadTexts: radioRemoteOduAlarmSynthesis.setDescription('Local ODU alarm synthesis alarm status with associated severity.')
radioConfigMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 24), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioConfigMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: radioConfigMismatchAlarm.setDescription('Config Mismatch alarm status with associated severity and related map.')
radioConfigAlarmReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 25), ConfigMismatchReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioConfigAlarmReason.setStatus('current')
if mibBuilder.loadTexts: radioConfigAlarmReason.setDescription('Bit map to describe the Config Mismatch Alarm')
radioRxQualityLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 26), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxQualityLowAlarm.setStatus('current')
if mibBuilder.loadTexts: radioRxQualityLowAlarm.setDescription('High BER Alarm status with associated severity.')
radioRxQualityWarningAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 27), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxQualityWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: radioRxQualityWarningAlarm.setDescription('The RX signal is close to cause errors on payload.')
radioXpd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 12, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioXpd.setStatus('current')
if mibBuilder.loadTexts: radioXpd.setDescription('Cross-Polarization Discrimination, in tenths of dB, is the\n             difference between the received signal power of the\n             co-polarized main beam, and it componemt received on the\n             cross-polarized signal.\n             This object shows an extimated value of the XPD performed by \n             the cross-polarization interference canceller (XPIC).\n             This means that the measure is reliable if:\n             - XPIC is on (linkType is radio2p0Xpic(4), or radio2p2XpicHS(5),\n                           or radio2p2XpicFD(6))\n             - Alarm radioDemodulatorFailAlarm is cleared.\n             - XPD is not too high, since without cross-polar interference\n               the canceller is not able to works well. Basically, in this\n               condition, the extimated XPD is greater than the real one.\n            ')
radioMaintTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13), )
if mibBuilder.loadTexts: radioMaintTable.setStatus('current')
if mibBuilder.loadTexts: radioMaintTable.setDescription('Table with Command for maintenance of radio branch.\n             Objects in this table is not persistent. An Instance of this\n             table is created on creation of radioBranchEntry')
radioMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioMaintEntry.setStatus('current')
if mibBuilder.loadTexts: radioMaintEntry.setDescription('Radio branch Maintenance record.')
radioTxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("transmitterOff", 1), ("transmitterOn", 2), ("permanentOff", 3))).clone('transmitterOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxStatus.setStatus('current')
if mibBuilder.loadTexts: radioTxStatus.setDescription('Transmitter status control.\n             The value transmitterOff(1) is related to a manual operation.\n             The value permanentOff(3) is persistent across restart.\n             ')
radioCarrierOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("carrierOnlyOff", 1), ("carrierOnlyOn", 2))).clone('carrierOnlyOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioCarrierOnly.setStatus('current')
if mibBuilder.loadTexts: radioCarrierOnly.setDescription('Carrier only transmission control.')
radioLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 6, 7, 8, 9))).clone(namedValues=NamedValues(("loopOff", 1), ("rfLoop", 2), ("iqLoop", 3), ("baseBandLoop", 4), ("rfLoopAtFixedMod", 6), ("baseBandLoopEthSquelch", 7), ("rfLoopAtFixedModEthSquelch", 8), ("iqloopEthSquelch", 9))).clone('loopOff')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioLoop.setStatus('current')
if mibBuilder.loadTexts: radioLoop.setDescription('Enables/disables the Radio Branch loops.')
radioRFLoopTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("testNone", 0), ("testRunning", 1), ("testNotPossible", 2), ("testPassed", 3), ("testFail", 4), ("testInterrupted", 5))).clone('testNone')).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRFLoopTestResult.setStatus('current')
if mibBuilder.loadTexts: radioRFLoopTestResult.setDescription('Radio branch RT loop test result.')
radioRFLoopTestPercTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRFLoopTestPercTime.setStatus('current')
if mibBuilder.loadTexts: radioRFLoopTestPercTime.setDescription('Radio branch RT loop test time percentage')
radioRtPsuOff = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rtPsuOff", 1), ("rtPsuOn", 2))).clone('rtPsuOn')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRtPsuOff.setStatus('current')
if mibBuilder.loadTexts: radioRtPsuOff.setDescription('It switches on/off the Rt power supply')
radioLom = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioLom.setStatus('current')
if mibBuilder.loadTexts: radioLom.setDescription('It is used to enable the IP packet forwarding towards Radio.')
radioXpic = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 13, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioXpic.setStatus('current')
if mibBuilder.loadTexts: radioXpic.setDescription('Enable of the cross polarization interference cancellation of this\n             radio.  The value disable is tied to a manual operation\n             (ManOpRecord). This object is applicable only if thiis radio\n             belongs to a 2+0 XPIC or 2+2 XPIC link.')
radioFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 14), )
if mibBuilder.loadTexts: radioFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: radioFrequencyTable.setDescription('Availables channels for selected channel spacing and modulation \n             (see leaf radioFreqTableSelection).')
radioFreqTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 14, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "radioFreqChannelId"))
if mibBuilder.loadTexts: radioFreqTabEntry.setStatus('current')
if mibBuilder.loadTexts: radioFreqTabEntry.setDescription('RadioFreqTab record.')
radioFreqChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFreqChannelId.setStatus('current')
if mibBuilder.loadTexts: radioFreqChannelId.setDescription('Index of the table')
radioFreqChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFreqChannelNum.setStatus('current')
if mibBuilder.loadTexts: radioFreqChannelNum.setDescription('Available channel number.')
radioFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 14, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioFreqValue.setStatus('current')
if mibBuilder.loadTexts: radioFreqValue.setDescription('Frequency related to radioFreqChannelNum.')
radioDuplexFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 15), )
if mibBuilder.loadTexts: radioDuplexFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: radioDuplexFrequencyTable.setDescription('Table with available duplex frequencies. Duplex frequency is\n             the absolute value of difference between RX and TX frequency.')
radioDuplexFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 15, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "radioDuplexFreqId"))
if mibBuilder.loadTexts: radioDuplexFreqEntry.setStatus('current')
if mibBuilder.loadTexts: radioDuplexFreqEntry.setDescription('Duplex Frequency entry. There is an entry for each available\n             duplex frequency.')
radioDuplexFreqId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDuplexFreqId.setStatus('current')
if mibBuilder.loadTexts: radioDuplexFreqId.setDescription('Index of the table.')
radioDuplexFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioDuplexFreqValue.setStatus('current')
if mibBuilder.loadTexts: radioDuplexFreqValue.setDescription('Duplex frequency in KHz.')
radioModulationTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 16), )
if mibBuilder.loadTexts: radioModulationTable.setStatus('current')
if mibBuilder.loadTexts: radioModulationTable.setDescription('List of modulations related to channel spacing.')
radioModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 16, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "radioChannelSpacing"))
if mibBuilder.loadTexts: radioModulationEntry.setStatus('current')
if mibBuilder.loadTexts: radioModulationEntry.setDescription('radioModulation record.')
radioChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 16, 1, 1), ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: radioChannelSpacing.setDescription('This object identifies the channel spacing.')
radioModulationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 16, 1, 2), ModulationMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioModulationMap.setStatus('current')
if mibBuilder.loadTexts: radioModulationMap.setDescription('List of modulations in the radioChanSpacing')
radioRefModulationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 16, 1, 3), ModulationMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRefModulationMap.setStatus('current')
if mibBuilder.loadTexts: radioRefModulationMap.setDescription('List of modulations that can be selected as reference\n             in the radioChanSpacingId')
linkStatusTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17), )
if mibBuilder.loadTexts: linkStatusTable.setStatus('current')
if mibBuilder.loadTexts: linkStatusTable.setDescription('Table with LinkStatusEntry.')
linkStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkStatusEntry.setStatus('current')
if mibBuilder.loadTexts: linkStatusEntry.setDescription('Link status entry')
linkPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkPolIndex.setStatus('current')
if mibBuilder.loadTexts: linkPolIndex.setDescription('This object identifies the radio polarization. In XPIC radio link\n             identifies one of the polarizations.')
linkAcmRxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmRxProfile.setStatus('current')
if mibBuilder.loadTexts: linkAcmRxProfile.setDescription('This object reports the ACM profile number in use in the radio Rx.\n             It is the linkAcmProfileId of linkAcmTable.\n             Label is linkAcmProfileLabel from linkAcmTable')
linkAcmTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmTxProfile.setStatus('current')
if mibBuilder.loadTexts: linkAcmTxProfile.setDescription('This object reports the ACM profile number in use in the radio Tx.\n             It is the linkAcmProfileId of linkAcmTable.\n             Label is linkAcmProfileLabel from linkAcmTable')
linkAcmRxProfileLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmRxProfileLabel.setStatus('current')
if mibBuilder.loadTexts: linkAcmRxProfileLabel.setDescription('ASCII string used to describe current acm rx profile')
linkAcmTxProfileLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmTxProfileLabel.setStatus('current')
if mibBuilder.loadTexts: linkAcmTxProfileLabel.setDescription('ASCII string used to describe current acm tx profile')
linkAcmRxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 6), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmRxModulation.setStatus('current')
if mibBuilder.loadTexts: linkAcmRxModulation.setDescription('This object is the type of modulation of the Rx profile in use.')
linkAcmTxModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 7), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmTxModulation.setStatus('current')
if mibBuilder.loadTexts: linkAcmTxModulation.setDescription('This object is the type of modulation of the Tx profile in use.')
linkAcmRxCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("strong", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmRxCode.setStatus('current')
if mibBuilder.loadTexts: linkAcmRxCode.setDescription('This object is the type of codificator of the Rx profile in use.')
linkAcmTxCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("normal", 1), ("strong", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmTxCode.setStatus('current')
if mibBuilder.loadTexts: linkAcmTxCode.setDescription('This object is the type of codificator of the Tx profile in use.')
linkTxETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxETHCapacity.setStatus('current')
if mibBuilder.loadTexts: linkTxETHCapacity.setDescription('This object reports (in Kbits/sec) the transmitted payload \n             capacity used by the Ethernet')
linkRxETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxETHCapacity.setStatus('current')
if mibBuilder.loadTexts: linkRxETHCapacity.setDescription('This object reports (in Kbits/sec) the received payload capacity\n             used by the Ethernet')
linkTxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTxTDMCapacity.setStatus('current')
if mibBuilder.loadTexts: linkTxTDMCapacity.setDescription('This object reports the capacity in kbit/sec reserved to TDM \n             tributaries in tx ACM profile.')
linkRxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRxTDMCapacity.setStatus('current')
if mibBuilder.loadTexts: linkRxTDMCapacity.setDescription('This object reports the capacity in kbit/sec reserved to TDM\n             tributaries in rx ACM profile.')
linkRescueModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 14), BitsPerSymbol().clone('bps4QAM')).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRescueModulation.setStatus('current')
if mibBuilder.loadTexts: linkRescueModulation.setDescription('This object is the modulation used when the remote terminal is\n             unreachable, ie traffic on radio link is down.')
linkReducedCapacityAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 15), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkReducedCapacityAlarm.setStatus('current')
if mibBuilder.loadTexts: linkReducedCapacityAlarm.setDescription('The equipment works in reduced capacity')
linkLinkTelemetryFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 16), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLinkTelemetryFailAlarm.setStatus('current')
if mibBuilder.loadTexts: linkLinkTelemetryFailAlarm.setDescription('Fail of link telemetry communication channel with associated\n             Severity')
linkIdMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 17), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkIdMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: linkIdMismatchAlarm.setDescription('Link Identification Alarm with associated Severity')
linkRadioEocAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 18), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRadioEocAlarm.setStatus('current')
if mibBuilder.loadTexts: linkRadioEocAlarm.setDescription('Fail of Radio Eoc link communication channel with associated\n             Severity')
linkSetupMismatchAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 19), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkSetupMismatchAlarm.setStatus('current')
if mibBuilder.loadTexts: linkSetupMismatchAlarm.setDescription("The local setup doesn't match the setup of remote terminal")
linkRescueSetupAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 20), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRescueSetupAlarm.setStatus('current')
if mibBuilder.loadTexts: linkRescueSetupAlarm.setDescription('The equipment is using the setup relative to the rescue modulation')
linkXpicProcedureBlockAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 21), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkXpicProcedureBlockAlarm.setStatus('current')
if mibBuilder.loadTexts: linkXpicProcedureBlockAlarm.setDescription('Only for XPIC equipment configurations.\n             Equipment Controller XPIC procedure Alarm control with associated\n             Severity')
linkXpicRemTxOffAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 22), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkXpicRemTxOffAlarm.setStatus('current')
if mibBuilder.loadTexts: linkXpicRemTxOffAlarm.setDescription('Only for XPIC equipment configurations.\n             Remote TX OFF command with associated Severity')
linkRemoteIduAlarmSynthesis = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 23), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRemoteIduAlarmSynthesis.setStatus('current')
if mibBuilder.loadTexts: linkRemoteIduAlarmSynthesis.setDescription('Synthesis of the remote IDU alarms')
linkNotMatchingRadiosAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 24), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkNotMatchingRadiosAlarm.setStatus('current')
if mibBuilder.loadTexts: linkNotMatchingRadiosAlarm.setDescription('Radios of the link does not have matched parameters.')
linkConfigurationInProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cleared", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkConfigurationInProgress.setStatus('current')
if mibBuilder.loadTexts: linkConfigurationInProgress.setDescription('The link is being configured and the table linkSettingsTable is\n             not available for modifying parameters.\n            ')
linkXpd = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 17, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkXpd.setStatus('deprecated')
if mibBuilder.loadTexts: linkXpd.setDescription('Cross-Polarization Discrimination, in tenths of dB, is the\n             difference between the received signal power of the\n             co-polarized main beam, and it componemt received on the\n             cross-polarized signal.\n             This object shows an extimated value of the XPD performed by \n             the cross-polarization interference canceller (XPIC).\n             This means that the measure is reliable if:\n             - XPIC is on (linkType is radio2p0Xpic(4), or radio2p2XpicHS(5),\n                           or radio2p2XpicFD(6))\n             - Alarm radioDemodulatorFailAlarm is cleared.\n             - XPD is not too high, since without cross-polar interference\n               the canceller is not able to works well. Basically, in this\n               condition, the extimated XPD is greater than the real one.\n            ')
linkTfcTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18), )
if mibBuilder.loadTexts: linkTfcTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcTable.setDescription("Transmitter Fail Check feature. In 1+1 HS configuration, the\n             radio terminal that doesn't receive signals on both receivers,\n             requests the remote transmitter switch.\n\n             This table was deprecated and replaced by linkTfcV2Table.\n             It is a view of the rows of the linkTfcV2Table with the same\n             linkIndex and linkPolIndex equal to 1, in order to ensure\n             compatibility with old SNMP managers.\n            ")
linkTfcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkTfcEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcEntry.setDescription('Radio link TFC entry.')
linkTfcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcAction.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcAction.setDescription('reset: to clear the forced switch generated by Trasmission Fail\n           Check algorithm (only if 1+1 configuration and ISO system).')
linkTfcControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcControl.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcControl.setDescription('It enables the Tx switch from remote equipment (only if 1+1\n             configuration and ISO system).')
linkTfcWatchWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcWatchWindow.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcWatchWindow.setDescription('Watch Window (in seconds) related to Trasmission Fail Check\n             algorithm (only if 1+1 configuration and ISO system).')
linkTfcAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcAlarmThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcAlarmThreshold.setDescription('Alarm Threshold (number of seconds with both remote RX in fail)\n             related to Trasmission Fail Check algorithm (only if 1+1\n             configuration and ISO system).')
linkTfcAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 5), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTfcAlarm.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcAlarm.setDescription('Transmission switch alarm generated by Trasmission Fail Check\n             algorithm (only if 1+1 configuration and ISO system).')
linkTfcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: linkTfcRowStatus.setDescription('Status of this conceptual row in linkTfcTable.')
linkMaintTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19), )
if mibBuilder.loadTexts: linkMaintTable.setStatus('current')
if mibBuilder.loadTexts: linkMaintTable.setDescription('Table with commands for maintenance of radio link.\n             Objects in this table is not persistent. An Instance of this\n             table is created on creation of linkStatusEntry')
linkMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkMaintEntry.setStatus('current')
if mibBuilder.loadTexts: linkMaintEntry.setDescription('Radio link maintenance entry.')
linkBerStart = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("stop", 2))).clone('stop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkBerStart.setStatus('current')
if mibBuilder.loadTexts: linkBerStart.setDescription('Stop, Start (resetting errors and counters) the pattern.\n             This item is linked to a manual operation (ManOpRecord) instance.')
linkBaseBandLom = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkBaseBandLom.setStatus('current')
if mibBuilder.loadTexts: linkBaseBandLom.setDescription('It is used to enable the IP packet forwarding towards modems.\n           This item is linked to a manual operation (ManOpRecord) instance.')
linkFadeMarginMeasure = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkFadeMarginMeasure.setStatus('deprecated')
if mibBuilder.loadTexts: linkFadeMarginMeasure.setDescription('Set by manager to start/stop fade margin measure.\n           This item is linked to a manual operation (ManOpRecord) instance.\n           This object is deprecated and replaced by fadeMarginMeasure.\n          ')
linkXpicControlProcedureReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 19, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("reset", 1))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkXpicControlProcedureReset.setStatus('current')
if mibBuilder.loadTexts: linkXpicControlProcedureReset.setDescription('Set by manager to reset the XPIC control procedure after a\n             blocking action.')
linkBerTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20), )
if mibBuilder.loadTexts: linkBerTable.setStatus('current')
if mibBuilder.loadTexts: linkBerTable.setDescription('Table with Command to estimate BER  of radio equipment.\n             Every objects in this table is not persistent. An Instance of this\n             table is created on creation of linkStatusEntry')
linkBerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkBerEntry.setStatus('current')
if mibBuilder.loadTexts: linkBerEntry.setDescription('Radio equipment BER estimate record.')
linkBerErrorCounterH = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerErrorCounterH.setStatus('current')
if mibBuilder.loadTexts: linkBerErrorCounterH.setDescription('High 32 bit part of the 64 bit error counter. Bit 32-63.')
linkBerErrorCounterL = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerErrorCounterL.setStatus('current')
if mibBuilder.loadTexts: linkBerErrorCounterL.setDescription('Low 32 bit part of the 64 bit error counter. Bit 0-31.')
linkBerDataCounterH = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerDataCounterH.setStatus('current')
if mibBuilder.loadTexts: linkBerDataCounterH.setDescription('High 32 bit part of the 64 bit data counter. Bit 32-63.')
linkBerDataCounterL = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerDataCounterL.setStatus('current')
if mibBuilder.loadTexts: linkBerDataCounterL.setDescription('Low 32 bit part of the 64 bit data counter. Bit 0-31.')
linkBerSyncLossAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 5), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerSyncLossAlarm.setStatus('current')
if mibBuilder.loadTexts: linkBerSyncLossAlarm.setDescription('BER sync loss alarm.')
linkBerSyncLossAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerSyncLossAlarmCounter.setStatus('current')
if mibBuilder.loadTexts: linkBerSyncLossAlarmCounter.setDescription('BER sync loss events counter.')
linkBerElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkBerElapsedTime.setStatus('current')
if mibBuilder.loadTexts: linkBerElapsedTime.setDescription('BER measure elapsed time.')
linkAcmTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21), )
if mibBuilder.loadTexts: linkAcmTable.setStatus('current')
if mibBuilder.loadTexts: linkAcmTable.setDescription('Table with link records.')
linkAcmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkAcmProfileId"))
if mibBuilder.loadTexts: linkAcmEntry.setStatus('current')
if mibBuilder.loadTexts: linkAcmEntry.setDescription('ACM entries.')
linkAcmProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmProfileId.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileId.setDescription('This object identifies the profile number for the radio selected\n             by the object linkAcmId.')
linkAcmProfileModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 2), BitsPerSymbol()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmProfileModulation.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileModulation.setDescription('This object is the modulation of the profile.')
linkAcmProfileCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("strong", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmProfileCode.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileCode.setDescription('This object is the type of codificator of the profile.')
linkAcmProfileCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmProfileCapacity.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileCapacity.setDescription('This object is used to contain total capacity of profile\n             (in kbits/sec).')
linkAcmProfileLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkAcmProfileLabel.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileLabel.setDescription('ASCII string used to assign a name to profile.')
linkAcmProfileEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('enable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmProfileEnable.setStatus('current')
if mibBuilder.loadTexts: linkAcmProfileEnable.setDescription('The object is used to contain if the use of this profile is\n             enabled or disabled')
linkAcmMaxTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmMaxTDMCapacity.setStatus('deprecated')
if mibBuilder.loadTexts: linkAcmMaxTDMCapacity.setDescription('This object reports the maximum capacity that can\n             be assigned to the TDM traffic.\n             The capacity is specified in number of E1 (2Mbit/s).\n\n             This object has been superseded by linkE1vsSTM1CapacityTable.\n            ')
linkAcmPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmPowerScaling.setStatus('deprecated')
if mibBuilder.loadTexts: linkAcmPowerScaling.setDescription('This object contains the difference (in eighth of dB) between the\n             TX power at this profile modulation and the TX power at the\n             reference modulation. The power scaling value is achieved from the\n             table linkPtxProfileTable.\n             This object is deprecated: see combinedRadioPowerScalingTable.')
linkAcmDownshiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmDownshiftThreshold.setStatus('current')
if mibBuilder.loadTexts: linkAcmDownshiftThreshold.setDescription('The object is used to contain the downshift threshold in dB/10.')
linkAcmUpshiftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmUpshiftThreshold.setStatus('current')
if mibBuilder.loadTexts: linkAcmUpshiftThreshold.setDescription('The object is used to contain the upshift threshold in dB/10.')
linkAcmActiveProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("cleared", 1), ("activeRx", 2), ("activeTx", 3), ("activeBoth", 4))).clone('cleared')).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmActiveProfile.setStatus('current')
if mibBuilder.loadTexts: linkAcmActiveProfile.setDescription('This object is used to contain the active status of this profile.\n             The value of the object is related to linkAcmRxProfile\n             and linkAcmTxProfile of the LinkStatusEntry.')
linkAcmTDMCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmTDMCapacity.setStatus('current')
if mibBuilder.loadTexts: linkAcmTDMCapacity.setDescription('This object reports current TDM capacity (in kbits/sec)\n             of the profile.')
linkAcmETHCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmETHCapacity.setStatus('current')
if mibBuilder.loadTexts: linkAcmETHCapacity.setDescription('This object reports current ETH capacity (in Kbits/sec) of\n             the profile.')
linkAcmAtpcRxPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmAtpcRxPowerScaling.setStatus('deprecated')
if mibBuilder.loadTexts: linkAcmAtpcRxPowerScaling.setDescription('This object contains the difference (in eighth of dB) between the\n             ATPC RX level thresholds at this profile modulation and the ATPC\n             RX level thresholds at the upper modulation.\n             This object is deprecated: see combinedRadioPowerScalingTable.')
linkAcmPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 21, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkAcmPowerRange.setStatus('deprecated')
if mibBuilder.loadTexts: linkAcmPowerRange.setDescription('This object contains (in dB) the current value of ATPC range.\n             This object is deprecated: see combinedRadioPowerScalingTable.')
linkProTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22), )
if mibBuilder.loadTexts: linkProTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkProTable.setDescription('A list of protection link entries.\n\n             This table was deprecated and replaced by linkProV2Table.\n             It is a view of the rows of the linkProV2Table with the same\n             linkIndex and linkPolIndex equal to 1, in order to ensure\n             compatibility with old SNMP managers\n            ')
linkProEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkProEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkProEntry.setDescription('An entry containing management information applicable to a\n             protected link.\n            ')
linkProProtectionTxChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProProtectionTxChIdx.setStatus('deprecated')
if mibBuilder.loadTexts: linkProProtectionTxChIdx.setDescription('This object identifies the tx protection channel \n             of a protected link. This object is not applicable \n             in case of not-revertive protection. For N+1 links \n             a value different from zero must be set.\n            ')
linkProProtectionRxChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProProtectionRxChIdx.setStatus('deprecated')
if mibBuilder.loadTexts: linkProProtectionRxChIdx.setDescription('This object identifies the rx protection channel \n             of a protected link. This object is not applicable \n             in case of not-revertive protection. For N+1 links \n             a value different from zero must be set.\n            ')
linkProTxWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProTxWtrTime.setStatus('deprecated')
if mibBuilder.loadTexts: linkProTxWtrTime.setDescription('It defines the Wait Time (in minutes) to Restore in transmission\n             when revertive protection is enabled. Zero value means no switch. \n             If switch is not supported or protection is not revertive, \n             a value different from zero cannot be set. \n            ')
linkProRxWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProRxWtrTime.setStatus('deprecated')
if mibBuilder.loadTexts: linkProRxWtrTime.setDescription('It defines the Wait Time (in minutes) to Restore in reception when\n             revertive protection is enabled. Zero value means no switch. \n             If switch is not supported or protection is not revertive, \n             a value different from zero cannot be set. \n            ')
linkProTxSwitchedChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkProTxSwitchedChIdx.setStatus('deprecated')
if mibBuilder.loadTexts: linkProTxSwitchedChIdx.setDescription('This object reports the index of tx channel switched to protection.\n             This object is applicable only for N+1 protection schema.\n            ')
linkProRxSwitchedChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkProRxSwitchedChIdx.setStatus('deprecated')
if mibBuilder.loadTexts: linkProRxSwitchedChIdx.setDescription('This object reports the index of rx channel switched to protection.\n             This object is applicable only for N+1 protection schema.\n            ')
linkProTxRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProTxRevertive.setStatus('deprecated')
if mibBuilder.loadTexts: linkProTxRevertive.setDescription('It defines if tx protection is revertive or not revertive.\n             In case of N+1 protection, protection is always revertive.\n            ')
linkProRxRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProRxRevertive.setStatus('deprecated')
if mibBuilder.loadTexts: linkProRxRevertive.setDescription('It defines if rx protection is revertive or not revertive.\n             In case of N+1 protection, protection is always revertive.\n            ')
linkProExtraTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProExtraTraffic.setStatus('deprecated')
if mibBuilder.loadTexts: linkProExtraTraffic.setDescription('This object enables or disables the transfer of extra traffic\n         on the protection channel in a N+1 link. This object must be \n         set to disabled in case of architectures different for N+1.\n         ')
linkProRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 22, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: linkProRowStatus.setDescription('Status of this conceptual row in linkProTable.\n            ')
linkProMaintTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23), )
if mibBuilder.loadTexts: linkProMaintTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintTable.setDescription('A list of maintenance commands for protected links.\n             A row in this table is added on creation of a row\n             in linkProTable.\n\n             This table was deprecated and replaced by linkProMaintV2Table.\n             It is a view of the rows of the linkProMaintV2Table with the same\n             linkIndex and linkPolIndex equal to 1, in order to ensure\n             compatibility with old SNMP managers\n            ')
linkProMaintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkProMaintEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintEntry.setDescription('An entry containing maintenance commands applicable to a\n             protected link.\n            ')
linkProMaintTxLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintTxLockout.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintTxLockout.setDescription('Command to enable/disable tx lockout. This object\n           is applicable only in case of N+1 protections.\n          ')
linkProMaintRxLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintRxLockout.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintRxLockout.setDescription('Command to enable/disable rx lockout. This object\n           is applicable only in case of N+1 protections.\n          ')
linkProMaintTxForced = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintTxForced.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintTxForced.setDescription('Command to force switch to a given \n           transmission channel. Zero value means no \n           switch.\n          ')
linkProMaintRxForced = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintRxForced.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintRxForced.setDescription('Command to force switch to a given \n           receiving channel. Zero value means no \n           switch.\n          ')
linkProMaintTxWtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("on", 2))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintTxWtrReset.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintTxWtrReset.setDescription('Clear wait time to restore making the revertive \n           path immediately available.\n          ')
linkProMaintRxWtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 23, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("on", 2))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintRxWtrReset.setStatus('deprecated')
if mibBuilder.loadTexts: linkProMaintRxWtrReset.setDescription('Clear wait time to restore making the revertive \n           path immediately available.\n          ')
linkCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24), )
if mibBuilder.loadTexts: linkCapabilitiesTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesTable.setDescription('Table with RadioCapabilities entries: there is an entry for each \n             linkTable row.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.\n             In 1+1 FD radio link, managers have to know the capabilities \n             of each channel. As such, this table is declared deprecated and\n             replaced by combinedRadioCapabilitiesTable.')
linkCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"))
if mibBuilder.loadTexts: linkCapabilitiesEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesEntry.setDescription('LinkCapabilities entry.')
linkCapabilitiesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 1), RadioCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesCapability.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesCapability.setDescription('Bit map to describe the radio features.')
linkCapabilitiesTxMinFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesTxMinFrequency.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesTxMinFrequency.setDescription('Minimum of available channel frequency in KHz.')
linkCapabilitiesTxMaxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesTxMaxFrequency.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesTxMaxFrequency.setDescription('Maximum of available channel frequency in KHz.')
linkCapabilitiesStepFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesStepFrequency.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesStepFrequency.setDescription('Minimum frequency step in KHz.')
linkCapabilitiesMinPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesMinPtxNominalValue.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesMinPtxNominalValue.setDescription('Minimum nominal Ptx in dBm.')
linkCapabilitiesMaxPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesMaxPtxNominalValue.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesMaxPtxNominalValue.setDescription('Maximum nominal Ptx in dBm.')
linkCapabilitiesExtendedMinPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 24, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkCapabilitiesExtendedMinPwr.setStatus('deprecated')
if mibBuilder.loadTexts: linkCapabilitiesExtendedMinPwr.setDescription('Minimum extended Ptx power for fade margin.')
linkFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 25), )
if mibBuilder.loadTexts: linkFrequencyTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkFrequencyTable.setDescription('Availables channels for selected channel spacing and modulation \n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.\n             In 1+1 FD radio link, managers have to know the allowable \n             frequencies of each channel. As such, this table is declared\n             deprecated and replaced by combinedRadioFrequencyTable.')
linkFreqTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 25, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkFreqChannelId"))
if mibBuilder.loadTexts: linkFreqTabEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkFreqTabEntry.setDescription('LinkFreqTab record.')
linkFreqChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 25, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFreqChannelId.setStatus('deprecated')
if mibBuilder.loadTexts: linkFreqChannelId.setDescription('Index of the table')
linkFreqChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 25, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFreqChannelNum.setStatus('deprecated')
if mibBuilder.loadTexts: linkFreqChannelNum.setDescription('Available channel number.')
linkFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 25, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkFreqValue.setStatus('deprecated')
if mibBuilder.loadTexts: linkFreqValue.setDescription('Frequency related to linkFreqChannelNum.')
linkDuplexFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 26), )
if mibBuilder.loadTexts: linkDuplexFrequencyTable.setStatus('deprecated')
if mibBuilder.loadTexts: linkDuplexFrequencyTable.setDescription('Table with available duplex frequencies. Duplex frequency is\n             the absolute value of difference between RX and TX frequency.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.\n             In 1+1 FD radio link, managers have to know the allowable \n             duplex frequencies of each channel. As such, this table is declared\n             deprecated and replaced by combinedRadioDuplexFrequencyTable.')
linkDuplexFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 26, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkDuplexFreqId"))
if mibBuilder.loadTexts: linkDuplexFreqEntry.setStatus('deprecated')
if mibBuilder.loadTexts: linkDuplexFreqEntry.setDescription('Duplex Frequency entry. For each available duplex frequency')
linkDuplexFreqId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 26, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDuplexFreqId.setStatus('deprecated')
if mibBuilder.loadTexts: linkDuplexFreqId.setDescription('Index of the table.')
linkDuplexFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 26, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkDuplexFreqValue.setStatus('deprecated')
if mibBuilder.loadTexts: linkDuplexFreqValue.setDescription('Duplex frequency in KHz.')
linkModulationTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 27), )
if mibBuilder.loadTexts: linkModulationTable.setStatus('current')
if mibBuilder.loadTexts: linkModulationTable.setDescription('List of modulation related to channel spacing.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.\n            ')
linkModulationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 27, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkChannelSpacing"))
if mibBuilder.loadTexts: linkModulationEntry.setStatus('current')
if mibBuilder.loadTexts: linkModulationEntry.setDescription('linkModulation record.')
linkChannelSpacing = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 27, 1, 1), ChannelSpacing()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkChannelSpacing.setStatus('current')
if mibBuilder.loadTexts: linkChannelSpacing.setDescription('This object identifies the channel spacing.')
linkModulationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 27, 1, 2), ModulationMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkModulationMap.setStatus('current')
if mibBuilder.loadTexts: linkModulationMap.setDescription('List of modulation in the linkChanSpacing')
linkRefModulationMap = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 27, 1, 3), ModulationMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkRefModulationMap.setStatus('current')
if mibBuilder.loadTexts: linkRefModulationMap.setDescription('List of modulations that can be selected as reference\n             in the linkChanSpacingId')
combinedRadioCapabilitiesTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28), )
if mibBuilder.loadTexts: combinedRadioCapabilitiesTable.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesTable.setDescription('Table with RadioCapabilities entries: there is an entry for each \n             radioSettingTable row.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios belonging to the link.\n             In 1+1 FD radio link, managers have to know the allowable \n             duplex frequencies of each channel. As such, this table is declared\n             deprecated and replaced by combinedRadioCapabilitiesTable.')
combinedRadioCapabilitiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioSettingsIndex"))
if mibBuilder.loadTexts: combinedRadioCapabilitiesEntry.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesEntry.setDescription('combinedRadioCapabilities entry.')
combinedRadioCapabilitiesCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 1), RadioCapability()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesCapability.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesCapability.setDescription('Bit map to describe the radio features.')
combinedRadioCapabilitiesTxMinFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesTxMinFrequency.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesTxMinFrequency.setDescription('Minimum of available channel frequency in KHz.')
combinedRadioCapabilitiesTxMaxFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesTxMaxFrequency.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesTxMaxFrequency.setDescription('Maximum of available channel frequency in KHz.')
combinedRadioCapabilitiesStepFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesStepFrequency.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesStepFrequency.setDescription('Minimum frequency step in KHz.')
combinedRadioCapabilitiesMinPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesMinPtxNominalValue.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesMinPtxNominalValue.setDescription('Minimum nominal Ptx in dBm.')
combinedRadioCapabilitiesMaxPtxNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesMaxPtxNominalValue.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesMaxPtxNominalValue.setDescription('Maximum nominal Ptx in dBm.')
combinedRadioCapabilitiesExtendedMinPwr = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 28, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioCapabilitiesExtendedMinPwr.setStatus('current')
if mibBuilder.loadTexts: combinedRadioCapabilitiesExtendedMinPwr.setDescription('Minimum extended Ptx power for fade margin.')
combinedRadioFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 29), )
if mibBuilder.loadTexts: combinedRadioFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: combinedRadioFrequencyTable.setDescription('Availables channels for selected channel spacing and modulation \n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.')
combinedRadioFreqTabEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 29, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioSettingsIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "combinedRadioFreqChannelId"))
if mibBuilder.loadTexts: combinedRadioFreqTabEntry.setStatus('current')
if mibBuilder.loadTexts: combinedRadioFreqTabEntry.setDescription('combinedRadioFreqTab record.')
combinedRadioFreqChannelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 29, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioFreqChannelId.setStatus('current')
if mibBuilder.loadTexts: combinedRadioFreqChannelId.setDescription('Index of the table')
combinedRadioFreqChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 29, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioFreqChannelNum.setStatus('current')
if mibBuilder.loadTexts: combinedRadioFreqChannelNum.setDescription('Available channel number.')
combinedRadioFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 29, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioFreqValue.setStatus('current')
if mibBuilder.loadTexts: combinedRadioFreqValue.setDescription('Frequency related to combinedRadioFreqChannelNum.')
combinedRadioDuplexFrequencyTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 30), )
if mibBuilder.loadTexts: combinedRadioDuplexFrequencyTable.setStatus('current')
if mibBuilder.loadTexts: combinedRadioDuplexFrequencyTable.setDescription('Table with available duplex frequencies. Duplex frequency is\n             the absolute value of difference between RX and TX frequency.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.')
combinedRadioDuplexFreqEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 30, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioSettingsIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "combinedRadioDuplexFreqId"))
if mibBuilder.loadTexts: combinedRadioDuplexFreqEntry.setStatus('current')
if mibBuilder.loadTexts: combinedRadioDuplexFreqEntry.setDescription('Duplex Frequency entry. There is an entry for each available\n             duplex frequency.')
combinedRadioDuplexFreqId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 30, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioDuplexFreqId.setStatus('current')
if mibBuilder.loadTexts: combinedRadioDuplexFreqId.setDescription('Index of the table.')
combinedRadioDuplexFreqValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioDuplexFreqValue.setStatus('current')
if mibBuilder.loadTexts: combinedRadioDuplexFreqValue.setDescription('Duplex frequency in KHz.')
combinedRadioPowerScalingTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 31), )
if mibBuilder.loadTexts: combinedRadioPowerScalingTable.setStatus('current')
if mibBuilder.loadTexts: combinedRadioPowerScalingTable.setDescription('List of modulation related to channel spacing.\n             In 1+1 HS and XPIC radio links, this table contains only values\n             supported by both radios.')
combinedRadioPowerScalingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 31, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioSettingsIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkAcmProfileId"))
if mibBuilder.loadTexts: combinedRadioPowerScalingEntry.setStatus('current')
if mibBuilder.loadTexts: combinedRadioPowerScalingEntry.setDescription('radioPowerScaling record.')
combinedRadioPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 31, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioPowerScaling.setStatus('current')
if mibBuilder.loadTexts: combinedRadioPowerScaling.setDescription('This object contains the difference (in eighth of dB) between the\n             TX power at this profile modulation and the TX power at the\n             reference modulation. The power scaling value is achieved from the\n             table linkPtxProfileTable.')
combinedRadioAtpcRxPowerScaling = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 31, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioAtpcRxPowerScaling.setStatus('current')
if mibBuilder.loadTexts: combinedRadioAtpcRxPowerScaling.setDescription('This object contains the difference (in eighth of dB) between the\n             ATPC RX level thresholds at this profile modulation and the ATPC\n             RX level thresholds at the upper modulation.')
combinedRadioPowerRange = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 31, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: combinedRadioPowerRange.setStatus('current')
if mibBuilder.loadTexts: combinedRadioPowerRange.setDescription('This object contains (in dB) the current value of ATPC range.')
stm1BulkMappingTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 32), )
if mibBuilder.loadTexts: stm1BulkMappingTable.setStatus('current')
if mibBuilder.loadTexts: stm1BulkMappingTable.setDescription('Table with entries containing stm-1 bulk transport parameters \n             for a particular link.\n             For each link are present as many rows as the STM-1 that the link\n             can carry in bulk mode.\n           ')
stm1BulkMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 32, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "stm1BulkPolIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "stm1BulkChanIndex"))
if mibBuilder.loadTexts: stm1BulkMappingEntry.setStatus('current')
if mibBuilder.loadTexts: stm1BulkMappingEntry.setDescription('An row in stm1BulkSettingsTable.\n            ')
stm1BulkPolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 32, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1BulkPolIndex.setStatus('current')
if mibBuilder.loadTexts: stm1BulkPolIndex.setDescription('Polarization index.\n            ')
stm1BulkChanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 32, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: stm1BulkChanIndex.setStatus('current')
if mibBuilder.loadTexts: stm1BulkChanIndex.setDescription('STM-1 channel index.\n             The range of this object is from 1 to N, where N is the number\n             of STM-1 that a link can carry in bulk mode.\n            ')
stm1BulkChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 32, 1, 3), Stm1IndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: stm1BulkChannel.setStatus('current')
if mibBuilder.loadTexts: stm1BulkChannel.setDescription('Index of the stm-1 in stm1Table.\n             The SNMP agent will accept only index of a STM-1 present in\n             stm1Table with stm1Structure set to opaque(4).\n            ')
linkE1vsSTM1CapacityTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 33), )
if mibBuilder.loadTexts: linkE1vsSTM1CapacityTable.setStatus('current')
if mibBuilder.loadTexts: linkE1vsSTM1CapacityTable.setDescription('Table with entries containing the E1 cpacity according to the\n             tributaries STM-1 configured to be carried in bulk mode.\n            ')
linkE1vsSTM1CapacityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 33, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkAcmProfileId"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkE1vsSTM1CapacityStm1"))
if mibBuilder.loadTexts: linkE1vsSTM1CapacityEntry.setStatus('current')
if mibBuilder.loadTexts: linkE1vsSTM1CapacityEntry.setDescription('An row in linkE1vsSTM1CapacityTable.\n            ')
linkE1vsSTM1CapacityStm1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: linkE1vsSTM1CapacityStm1.setStatus('current')
if mibBuilder.loadTexts: linkE1vsSTM1CapacityStm1.setDescription('Number of tributaries STM-1 configured to be transported in\n             bulk mode.\n            ')
linkE1vsSTM1CapacityE1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 33, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkE1vsSTM1CapacityE1.setStatus('current')
if mibBuilder.loadTexts: linkE1vsSTM1CapacityE1.setDescription('Number of E1 that can be carried by this profile according to the\n             the tributaries STM-1 carried in bulk mode.\n            ')
linkTfcV2Table = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34), )
if mibBuilder.loadTexts: linkTfcV2Table.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2Table.setDescription("Transmitter Fail Check feature. In 1+1 HS configuration, the\n             radio terminal that doesn't receive signals on both receivers,\n             requests the remote transmitter switch.")
linkTfcV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkTfcV2Entry.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2Entry.setDescription('Radio link TFC entry.')
linkTfcV2Action = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notActive", 0), ("reset", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcV2Action.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2Action.setDescription('reset: to clear the forced switch generated by Trasmission Fail\n           Check algorithm (only if 1+1 configuration and ISO system).')
linkTfcV2Control = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcV2Control.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2Control.setDescription('It enables the Tx switch from remote equipment (only if 1+1\n             configuration and ISO system).')
linkTfcV2WatchWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)).clone(60)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcV2WatchWindow.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2WatchWindow.setDescription('Watch Window (in seconds) related to Trasmission Fail Check\n             algorithm (only if 1+1 configuration and ISO system).')
linkTfcV2AlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(10)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcV2AlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2AlarmThreshold.setDescription('Alarm Threshold (number of seconds with both remote RX in fail)\n             related to Trasmission Fail Check algorithm (only if 1+1\n             configuration and ISO system).')
linkTfcV2Alarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 5), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkTfcV2Alarm.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2Alarm.setDescription('Transmission switch alarm generated by Trasmission Fail Check\n             algorithm (only if 1+1 configuration and ISO system).')
linkTfcV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 34, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkTfcV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: linkTfcV2RowStatus.setDescription('Status of this conceptual row in linkTfcV2Table.')
linkProV2Table = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35), )
if mibBuilder.loadTexts: linkProV2Table.setStatus('current')
if mibBuilder.loadTexts: linkProV2Table.setDescription('A list of protection link entries.\n            ')
linkProV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkProV2Entry.setStatus('current')
if mibBuilder.loadTexts: linkProV2Entry.setDescription('An entry containing management information applicable to a\n             protected link.\n            ')
linkProV2ProtectionTxChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2ProtectionTxChIdx.setStatus('current')
if mibBuilder.loadTexts: linkProV2ProtectionTxChIdx.setDescription('This object identifies the tx protection channel \n             of a protected link. This object is not applicable \n             in case of not-revertive protection. For N+1 links \n             a value different from zero must be set.\n            ')
linkProV2ProtectionRxChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2ProtectionRxChIdx.setStatus('current')
if mibBuilder.loadTexts: linkProV2ProtectionRxChIdx.setDescription('This object identifies the rx protection channel \n             of a protected link. This object is not applicable \n             in case of not-revertive protection. For N+1 links \n             a value different from zero must be set.\n            ')
linkProV2TxWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2TxWtrTime.setStatus('current')
if mibBuilder.loadTexts: linkProV2TxWtrTime.setDescription('It defines the Wait Time (in minutes) to Restore in transmission\n             when revertive protection is enabled. Zero value means no switch. \n             If switch is not supported or protection is not revertive, \n             a value different from zero cannot be set. \n            ')
linkProV2RxWtrTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2RxWtrTime.setStatus('current')
if mibBuilder.loadTexts: linkProV2RxWtrTime.setDescription('It defines the Wait Time (in minutes) to Restore in reception when\n             revertive protection is enabled. Zero value means no switch. \n             If switch is not supported or protection is not revertive, \n             a value different from zero cannot be set. \n            ')
linkProV2TxSwitchedChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkProV2TxSwitchedChIdx.setStatus('current')
if mibBuilder.loadTexts: linkProV2TxSwitchedChIdx.setDescription('This object reports the index of tx channel switched to protection.\n             This object is applicable only for N+1 protection schema.\n            ')
linkProV2RxSwitchedChIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkProV2RxSwitchedChIdx.setStatus('current')
if mibBuilder.loadTexts: linkProV2RxSwitchedChIdx.setDescription('This object reports the index of rx channel switched to protection.\n             This object is applicable only for N+1 protection schema.\n            ')
linkProV2TxRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2TxRevertive.setStatus('current')
if mibBuilder.loadTexts: linkProV2TxRevertive.setDescription('It defines if tx protection is revertive or not revertive.\n             In case of N+1 protection, protection is always revertive.\n            ')
linkProV2RxRevertive = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2RxRevertive.setStatus('current')
if mibBuilder.loadTexts: linkProV2RxRevertive.setDescription('It defines if rx protection is revertive or not revertive.\n             In case of N+1 protection, protection is always revertive.\n            ')
linkProV2ExtraTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2ExtraTraffic.setStatus('current')
if mibBuilder.loadTexts: linkProV2ExtraTraffic.setDescription('This object enables or disables the transfer of extra traffic\n         on the protection channel in a N+1 link. This object must be \n         set to disabled in case of architectures different for N+1.\n         ')
linkProV2RowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 35, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: linkProV2RowStatus.setStatus('current')
if mibBuilder.loadTexts: linkProV2RowStatus.setDescription('Status of this conceptual row in linkProV2Table.\n            ')
linkProMaintV2Table = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36), )
if mibBuilder.loadTexts: linkProMaintV2Table.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2Table.setDescription('A list of maintenance commands for protected links.\n             A row in this table is added on creation of a row\n             in linkProV2Table.\n            ')
linkProMaintV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"))
if mibBuilder.loadTexts: linkProMaintV2Entry.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2Entry.setDescription('An entry containing maintenance commands applicable to a\n             protected link.\n            ')
linkProMaintV2TxLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2TxLockout.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2TxLockout.setDescription('Command to enable/disable tx lockout. This object\n           is applicable only in case of N+1 protections.\n          ')
linkProMaintV2RxLockout = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2RxLockout.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2RxLockout.setDescription('Command to enable/disable rx lockout. This object\n           is applicable only in case of N+1 protections.\n          ')
linkProMaintV2TxForced = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2TxForced.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2TxForced.setDescription('Command to force switch to a given \n           transmission channel. Zero value means no \n           switch.\n          ')
linkProMaintV2RxForced = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2RxForced.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2RxForced.setDescription('Command to force switch to a given \n           receiving channel. Zero value means no \n           switch.\n          ')
linkProMaintV2TxWtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("on", 2))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2TxWtrReset.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2TxWtrReset.setDescription('Clear wait time to restore making the revertive \n           path immediately available.\n          ')
linkProMaintV2RxWtrReset = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 36, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notActive", 1), ("on", 2))).clone('notActive')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkProMaintV2RxWtrReset.setStatus('current')
if mibBuilder.loadTexts: linkProMaintV2RxWtrReset.setDescription('Clear wait time to restore making the revertive \n           path immediately available.\n          ')
sspTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37), )
if mibBuilder.loadTexts: sspTable.setStatus('current')
if mibBuilder.loadTexts: sspTable.setDescription('A list of operative and administrative set of parameters.\n             This table holds three row for every link (and its polarizations)\n             configured in the NE:\n              1) administative parameters of local NE\n              2) operative parameters of local NE\n              3) administative parameters of remote NE\n            ')
sspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "linkIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "linkPolIndex"), (0, "SIAE-RADIO-SYSTEM-MIB", "sspParameterType"))
if mibBuilder.loadTexts: sspEntry.setStatus('current')
if mibBuilder.loadTexts: sspEntry.setDescription('An entry containing SSP relevant parameters.\n            ')
sspParameterType = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("localAdminStatus", 1), ("localOperStatus", 2), ("remoteAdminStatus", 3))))
if mibBuilder.loadTexts: sspParameterType.setStatus('current')
if mibBuilder.loadTexts: sspParameterType.setDescription('This object identifies what parameters are for.\n            ')
sspLinkBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("sspBw3p5Mhz", 0), ("sspBw7MHz", 1), ("sspBw14MHz", 2), ("sspBw28MHz", 3), ("sspBw56MHz", 4), ("sspBw10MHz", 5), ("sspBw20MHz", 6), ("sspBw30MHz", 7), ("sspBw40MHz", 8), ("sspBw50MHz", 9), ("sspBw112Mhz", 10), ("sspBw250Mhz", 11), ("sspBw500Mhz", 12), ("sspBw750Mhz", 13), ("sspBw1Ghz", 14), ("sspBw60MHz", 15), ("sspBw80MHz", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkBandwidth.setStatus('current')
if mibBuilder.loadTexts: sspLinkBandwidth.setDescription('Link Bandwidth (channel spacing).\n            ')
sspLinkModulation = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("sspModBPSK", 1), ("sspMod4QAM", 2), ("sspMod8PSK", 3), ("sspMod16QAM", 4), ("sspMod32QAM", 5), ("sspMod64QAM", 6), ("sspMod128QAM", 7), ("sspMod256QAM", 8), ("sspMod512QAM", 9), ("sspMod1024QAM", 10), ("sspMod2048QAM", 11), ("sspMod4096QAM", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkModulation.setStatus('current')
if mibBuilder.loadTexts: sspLinkModulation.setDescription('Link reference modulation.\n            ')
sspLinkAcmEngineEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkAcmEngineEnable.setStatus('current')
if mibBuilder.loadTexts: sspLinkAcmEngineEnable.setDescription('This object is used to enable/disable the ACM engine.\n            ')
sspLinkTxUpperProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkTxUpperProfile.setStatus('current')
if mibBuilder.loadTexts: sspLinkTxUpperProfile.setDescription('The object (and linkTxLowerProfile object) is used to\n             restrict the TX profile range when ACM is enabled.\n            ')
sspLinkTxLowerProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkTxLowerProfile.setStatus('current')
if mibBuilder.loadTexts: sspLinkTxLowerProfile.setDescription('The object (and linkTxUpperProfile object) is used to\n             restrict the TX profile range when ACM is enabled.\n            ')
sspLinkSynchSetupProtocolEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkSynchSetupProtocolEnable.setStatus('current')
if mibBuilder.loadTexts: sspLinkSynchSetupProtocolEnable.setDescription('Synchronization Setup Protocol (SSP) control.\n            ')
sspLinkProfilesSetSelection = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highThroughput", 1), ("highGain", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspLinkProfilesSetSelection.setStatus('current')
if mibBuilder.loadTexts: sspLinkProfilesSetSelection.setDescription('Selection of the working profile set between high gain\n             (max robustness) profile set and high throughput (max\n             capacity) profile set. The set of profiles high gain\n             features a greater robustness against to the set of\n             profiles high throughput.\n             For radio systems that do not have more sets of profiles,\n             this object becomes read only and its reading shows the\n             only one set of profiles supported.\n            ')
sspTdmE1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspTdmE1Channel.setStatus('current')
if mibBuilder.loadTexts: sspTdmE1Channel.setDescription('Number of E1 channels. This object is used to define the capacity\n             of E1 tributaries assigned to a given radio link. The capacity is\n             changed in steps of E1 (2Mbit/s).\n            ')
sspTdmStm1Channel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 37, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sspTdmStm1Channel.setStatus('current')
if mibBuilder.loadTexts: sspTdmStm1Channel.setDescription('Number of STM-1 channels transported in bulk mode.\n            ')
radioLoopCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 38), )
if mibBuilder.loadTexts: radioLoopCapabilityTable.setStatus('current')
if mibBuilder.loadTexts: radioLoopCapabilityTable.setDescription('This table shows which group a radio loop belongs to.\n             Radios with the same group number (identifier) close loop\n             simultaneously.\n            ')
radioLoopCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 38, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioLoopCapabilityEntry.setStatus('current')
if mibBuilder.loadTexts: radioLoopCapabilityEntry.setDescription('An entry containing a group identifier for each radio loop type.\n            ')
radioLoopRfGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 38, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLoopRfGroup.setStatus('current')
if mibBuilder.loadTexts: radioLoopRfGroup.setDescription('The group to which the radio RF loop belong to.\n            ')
radioLoopIqGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 38, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLoopIqGroup.setStatus('current')
if mibBuilder.loadTexts: radioLoopIqGroup.setDescription('The group to which the radio IQ loop belong to.\n            ')
radioLoopBaseBandGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 38, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioLoopBaseBandGroup.setStatus('current')
if mibBuilder.loadTexts: radioLoopBaseBandGroup.setDescription('The group to which the radio base loop belong to.\n            ')
radioRxBerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 39), )
if mibBuilder.loadTexts: radioRxBerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: radioRxBerThresholdTable.setDescription('This table shows the nominal and measured values of RX power \n             at a bit error rate (BER) equal to 10e-6.\n            ')
radioRxBerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 39, 1), ).setIndexNames((0, "SIAE-RADIO-SYSTEM-MIB", "radioIndex"))
if mibBuilder.loadTexts: radioRxBerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: radioRxBerThresholdEntry.setDescription('An entry containing the RX power thresholds.\n            ')
radioRxBerThresholdStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 39, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonValid", 1), ("valid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioRxBerThresholdStatus.setStatus('current')
if mibBuilder.loadTexts: radioRxBerThresholdStatus.setDescription('This object shows whether the following objects are significant.\n            ')
radioNominalRxBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 39, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioNominalRxBerThreshold.setStatus('current')
if mibBuilder.loadTexts: radioNominalRxBerThreshold.setDescription('The nominal value of RX power @ BER equal to 10e-6\n            ')
radioMeasuredRxBerThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 39, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radioMeasuredRxBerThreshold.setStatus('current')
if mibBuilder.loadTexts: radioMeasuredRxBerThreshold.setDescription('The measured value of RX power @ BER equal to 10e-6.\n            ')
radioRemDemodulatorFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 50), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRemDemodulatorFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRemDemodulatorFailAlarmSeverityCode.setDescription('Defines the severity associated to the radioRemDemodulatorFailAlarm\n             and enables/disables the trap generation on status change event.')
radioRxActiveStatusTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRxActiveStatusTrapNotification.setStatus('current')
if mibBuilder.loadTexts: radioRxActiveStatusTrapNotification.setDescription('Enable/disables (statusTrapEnable or statusTrapDisable) the trap\n             generation on status change event for radioRxActivestatus')
radioTxActiveStatusTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxActiveStatusTrapNotification.setStatus('current')
if mibBuilder.loadTexts: radioTxActiveStatusTrapNotification.setDescription('Define the severity associated to the radioTxActivestatus and\n             enable/disable the trap generation on status change event.')
radioCableOpenAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 53), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioCableOpenAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioCableOpenAlarmSeverityCode.setDescription('Defines the severity associated to the  radioCableOpen\n             and enables/disables the trap generation on status change event.')
radioCableShortAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 54), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioCableShortAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioCableShortAlarmSeverityCode.setDescription('Defines the severity associated to the  radioCableShort\n             and enables/disables the trap generation on status change event.')
radioInvalidFrequencyAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 55), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioInvalidFrequencyAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioInvalidFrequencyAlarmSeverityCode.setDescription('Defines the severity associated to the radioInvalidFrequencyAlarm\n             and enables/disables the trap generation on status change event.')
radioBaseBandRxAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 56), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioBaseBandRxAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioBaseBandRxAlarmSeverityCode.setDescription('Defines the severity associated to the radioBaseBandRxAlarm\n             and enables/disables the trap generation on status change event.')
radioModulatorFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 57), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioModulatorFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioModulatorFailAlarmSeverityCode.setDescription('Defines the severity associated to the radioModulatorFailAlarm\n             and enables/disables the trap generation on status change event.')
radioDemodulatorFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 58), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioDemodulatorFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioDemodulatorFailAlarmSeverityCode.setDescription('Defines the severity associated to the radioDemodulatorFailAlarm\n             and enables/disables the trap generation on status change event.')
radioRxPowerLowAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 59), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRxPowerLowAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRxPowerLowAlarmSeverityCode.setDescription('Defines the severity associated to the radioRxPowerLowAlarm\n             and enables/disables the trap generation on status change event.')
radioTxPowerLowAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 60), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxPowerLowAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioTxPowerLowAlarmSeverityCode.setDescription('Defines the severity associated to the radioTxPowerLowAlarm\n             and enables/disables the trap generation on status change event.')
radioVcoFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 61), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioVcoFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioVcoFailAlarmSeverityCode.setDescription('Defines the severity associated to the radioVcoFailAlarm\n             and enables/disables the trap generation on status change event.')
radioRxIFAgcAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 62), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRxIFAgcAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRxIFAgcAlarmSeverityCode.setDescription('Defines the severity associated to the radioRxIFAgcAlarm\n             and enables/disables the trap generation on status change event.')
radioTxIFAgcAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 63), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioTxIFAgcAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioTxIFAgcAlarmSeverityCode.setDescription('Defines the severity associated to the radioTxIFAgcAlarm\n             and enables/disables the trap generation on status change event.')
radioIduOduCommunicationAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 64), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioIduOduCommunicationAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioIduOduCommunicationAlarmSeverityCode.setDescription('Define the severity associated to the radioIduOduCommunicationAlarm\n             and enable/disable the trap generation on status change event.')
radioOduIduCommunicationAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 65), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioOduIduCommunicationAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioOduIduCommunicationAlarmSeverityCode.setDescription('Define the severity associated to the radioOduIduCommunicationAlarm\n             and enable/disable the trap generation on status change event.')
radioLocalOduAlarmSynthesisSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 66), AlarmSeverityCode().clone('statusTrapDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioLocalOduAlarmSynthesisSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioLocalOduAlarmSynthesisSeverityCode.setDescription('Define the severity associated to the radioLocalOduAlarmSynthesis\n             and enable/disable the trap generation on status change event.')
radioRemoteOduAlarmSynthesisSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 67), AlarmSeverityCode().clone('statusTrapDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRemoteOduAlarmSynthesisSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRemoteOduAlarmSynthesisSeverityCode.setDescription('Define the severity associated to the radioRemoteOduAlarmSynthesis\n             and enable/disable the trap generation on status change event.')
radioConfigMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 68), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioConfigMismatchAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioConfigMismatchAlarmSeverityCode.setDescription('Defines the severity associated to the radioConfigMismatchAlarm\n             and enables/disables the trap generation on status change event.')
radioPrxHysteresisValue = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 69), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioPrxHysteresisValue.setStatus('current')
if mibBuilder.loadTexts: radioPrxHysteresisValue.setDescription('Defines the delta value associated to the radioPrx before\n             having a new trap generation (radioPtxChange TRAP).\n             The zero value is not allowed.')
radioPtxHysteresisValue = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 70), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioPtxHysteresisValue.setStatus('current')
if mibBuilder.loadTexts: radioPtxHysteresisValue.setDescription('Defines the delta value associated to the radioPtx before\n             having a new trap generation (radioPtxChange TRAP).\n             The zero value is not allowed.')
radioPrxHysteresisValueTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 71), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioPrxHysteresisValueTrapNotification.setStatus('current')
if mibBuilder.loadTexts: radioPrxHysteresisValueTrapNotification.setDescription('Enables/disables the Rx change trap generation on status change\n             event.')
radioPtxHysteresisValueTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioPtxHysteresisValueTrapNotification.setStatus('current')
if mibBuilder.loadTexts: radioPtxHysteresisValueTrapNotification.setDescription('Enables/disables the Tx change trap generation on status change\n             event.')
radioRxQualityLowAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 73), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRxQualityLowAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRxQualityLowAlarmSeverityCode.setDescription('Define the severity associated to the radioRxQualityLowAlarm\n             and enable/disable the trap generation on status change event.')
radioRxQualityWarningAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 74), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radioRxQualityWarningAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: radioRxQualityWarningAlarmSeverityCode.setDescription('Define the severity associated to the radioRxQualityWarningAlarm\n             and enable/disable the trap generation on status change event.')
linkReducedCapacityAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 75), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkReducedCapacityAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkReducedCapacityAlarmSeverityCode.setDescription('Define the severity associated to the linkReducedCapacityAlarm\n            and enable/disable the trap generation on status change event.')
linkLinkTelemetryFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 76), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkLinkTelemetryFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkLinkTelemetryFailAlarmSeverityCode.setDescription('Define the severity associated to the linkLinkTelemetryFailAlarm\n            and enable/disable the trap generation on status change event.')
linkIdMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 77), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkIdMismatchAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkIdMismatchAlarmSeverityCode.setDescription('Define the severity associated to the linkIdMismatchAlarm\n            and enable/disable the trap generation on status change event.')
linkRadioEocAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 78), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkRadioEocAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkRadioEocAlarmSeverityCode.setDescription('Define the severity associated to the linkRadioEocAlarm\n            and enable/disable the trap generation on status change event.')
linkSetupMismatchAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 79), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkSetupMismatchAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkSetupMismatchAlarmSeverityCode.setDescription('Define the severity associated to the linkSetupMismatchAlarm\n            and enable/disable the trap generation on status change event.')
linkRescueSetupAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 80), AlarmSeverityCode().clone('criticalTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkRescueSetupAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkRescueSetupAlarmSeverityCode.setDescription('Define the severity associated to the linkRescueSetupAlarm\n            and enable/disable the trap generation on status change event.')
linkXpicProcedureBlockAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 81), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkXpicProcedureBlockAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkXpicProcedureBlockAlarmSeverityCode.setDescription('Define the severity associated to the linkXpicProcedureBlockAlarm\n            and enable/disable the trap generation on status change event.')
linkXpicRemTxOffAlarmAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 82), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkXpicRemTxOffAlarmAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkXpicRemTxOffAlarmAlarmSeverityCode.setDescription('Define the severity associated to the linkXpicRemTxOffAlarm\n            and enable/disable the trap generation on status change event.')
linkLocalIduAlarmSynthesis = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 83), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: linkLocalIduAlarmSynthesis.setStatus('current')
if mibBuilder.loadTexts: linkLocalIduAlarmSynthesis.setDescription('Synthesis of the local IDU alarms')
linkLocalIduAlarmSynthesisSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 84), AlarmSeverityCode().clone('statusTrapDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkLocalIduAlarmSynthesisSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkLocalIduAlarmSynthesisSeverityCode.setDescription('Define the severity associated to the linkLocalIduAlarmSynthesis\n            and enable/disable the trap generation on status change event.')
linkRemoteIduAlarmSynthesisSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 85), AlarmSeverityCode().clone('statusTrapDisable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkRemoteIduAlarmSynthesisSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkRemoteIduAlarmSynthesisSeverityCode.setDescription('Define the severity associated to the linkLocalIduAlarmSynthesis\n            and enable/disable the trap generation on status change event.')
linkTfcAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 86), AlarmSeverityCode().clone('minorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkTfcAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkTfcAlarmSeverityCode.setDescription('Define the severity associated to the linkTfcV2Alarm (linkTfcAlarm)\n            and enable/disable the trap generation on status change event.')
linkBerSyncLossAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 87), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkBerSyncLossAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkBerSyncLossAlarmSeverityCode.setDescription('Define the severity associated to the linkBerSyncLossAlarm\n             and enable/disable the trap generation on status change event.')
linkNotMatchingRadiosAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 88), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkNotMatchingRadiosAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: linkNotMatchingRadiosAlarmSeverityCode.setDescription('Define the severity associated to the linkNotMatchingRadiosAlarm\n             and enable/disable the trap generation on status change event.')
channelSpacingSelection = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 89), Bits().clone(namedValues=NamedValues(("etsi", 0), ("fcc", 1))).clone(namedValues=NamedValues(("etsi", 0), ("fcc", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: channelSpacingSelection.setStatus('current')
if mibBuilder.loadTexts: channelSpacingSelection.setDescription('his object selects which channel spacings the radio link has to\n             support:\n             - etsi: Compliant with European Telecommunication Standards\n                     Institute\n             - fcc:  Compliant with Federal Communications Commission\n            ')
fadeMarginMeasure = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 90), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fadeMarginMeasure.setStatus('current')
if mibBuilder.loadTexts: fadeMarginMeasure.setDescription('Set by manager to start/stop fade margin measure.\n           This item is linked to a manual operation (ManOpRecord) instance.')
linkConfigurationInProgressTrapNotification = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 80, 91), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("trapDisable", 1), ("trapEnable", 2))).clone('trapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linkConfigurationInProgressTrapNotification.setStatus('current')
if mibBuilder.loadTexts: linkConfigurationInProgressTrapNotification.setDescription('Enable/disables (statusTrapEnable or statusTrapDisable) the trap\n             generation on status change event for linkConfigurationInProgress')
radioPrxChange = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 8001)).setObjects(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-RADIO-SYSTEM-MIB", "radioIndex"), ("SIAE-RADIO-SYSTEM-MIB", "radioSettingsLabel"), ("SIAE-RADIO-SYSTEM-MIB", "radioPrx"))
if mibBuilder.loadTexts: radioPrxChange.setStatus('current')
if mibBuilder.loadTexts: radioPrxChange.setDescription('This event is generated when radioPrx is changed, in\n            modulus, more than radioPtxHysteresisValue from last TRAP.\n            The data passed with the event are:\n            1) equipIpSnmpAgentAddress     - agent IP address\n            2) radioIndex                  - branch index\n            3) radioName                   - user assinged name\n            4) radioPrx                    - PRX value')
radioPtxChange = NotificationType((1, 3, 6, 1, 4, 1, 3373, 1103, 0, 8002)).setObjects(("SIAE-EQUIP-MIB", "equipIpSnmpAgentAddress"), ("SIAE-RADIO-SYSTEM-MIB", "radioIndex"), ("SIAE-RADIO-SYSTEM-MIB", "radioSettingsLabel"), ("SIAE-RADIO-SYSTEM-MIB", "radioPtx"))
if mibBuilder.loadTexts: radioPtxChange.setStatus('current')
if mibBuilder.loadTexts: radioPtxChange.setDescription('This event is generated when radioPtx is changed, in\n            modulus, more than radioPtxHysteresisValue from last TRAP.\n            The data passed with the event are:\n            1) equipIpSnmpAgentAddress     - agent IP address\n            2) radioIndex                  - branch index\n            3) radioName                   - user assigned name\n            4) radioPtx                    - PTX value')
mibBuilder.exportSymbols("SIAE-RADIO-SYSTEM-MIB", linkRowstatus=linkRowstatus, linkRxTDMCapacity=linkRxTDMCapacity, linkFreqChannelId=linkFreqChannelId, radioCurrentDuplexFrequency=radioCurrentDuplexFrequency, linkAvailableIndex=linkAvailableIndex, radioPtxChange=radioPtxChange, radioRxQualityLowAlarm=radioRxQualityLowAlarm, radioPrx=radioPrx, linkProMaintTxForced=linkProMaintTxForced, linkAcmUpshiftThreshold=linkAcmUpshiftThreshold, linkNotMatchingRadiosAlarm=linkNotMatchingRadiosAlarm, radioDuplexFreqEntry=radioDuplexFreqEntry, radioFreqValue=radioFreqValue, combinedRadioCapabilitiesEntry=combinedRadioCapabilitiesEntry, linkAcmTable=linkAcmTable, linkAcmProfileCode=linkAcmProfileCode, linkTfcEntry=linkTfcEntry, linkAcmPowerRange=linkAcmPowerRange, radioLoopBaseBandGroup=radioLoopBaseBandGroup, xpicChRadioIdx=xpicChRadioIdx, linkRadioEocAlarm=linkRadioEocAlarm, radioRxBerThresholdEntry=radioRxBerThresholdEntry, linkProRxRevertive=linkProRxRevertive, linkAcmRxModulation=linkAcmRxModulation, combinedRadioCapabilitiesStepFrequency=combinedRadioCapabilitiesStepFrequency, sspLinkBandwidth=sspLinkBandwidth, radioConfigMismatchAlarmSeverityCode=radioConfigMismatchAlarmSeverityCode, radioCapabilitiesTable=radioCapabilitiesTable, radioCapabilitiesCapability=radioCapabilitiesCapability, linkModulationMap=linkModulationMap, linkProProtectionTxChIdx=linkProProtectionTxChIdx, linkConfigurationInProgress=linkConfigurationInProgress, linkProV2RxSwitchedChIdx=linkProV2RxSwitchedChIdx, radioTable=radioTable, radioTxActiveStatus=radioTxActiveStatus, radioIfIndex=radioIfIndex, linkCapabilitiesTable=linkCapabilitiesTable, linkFreqTabEntry=linkFreqTabEntry, linkTfcV2Control=linkTfcV2Control, combinedRadioCapabilitiesCapability=combinedRadioCapabilitiesCapability, linkAcmProfileModulation=linkAcmProfileModulation, linkProMaintRxForced=linkProMaintRxForced, radioFreqTabEntry=radioFreqTabEntry, sspTdmStm1Channel=sspTdmStm1Channel, radioAtpcManual=radioAtpcManual, linkTfcAlarmSeverityCode=linkTfcAlarmSeverityCode, linkIndex=linkIndex, xpicChTable=xpicChTable, radioSettingsTable=radioSettingsTable, linkProTable=linkProTable, radioInvalidFrequencyAlarm=radioInvalidFrequencyAlarm, BitsPerSymbol=BitsPerSymbol, xpicRadioIdx=xpicRadioIdx, radioTxActiveStatusTrapNotification=radioTxActiveStatusTrapNotification, sspLinkModulation=sspLinkModulation, linkProV2RxWtrTime=linkProV2RxWtrTime, linkTfcV2Action=linkTfcV2Action, combinedRadioCapabilitiesMaxPtxNominalValue=combinedRadioCapabilitiesMaxPtxNominalValue, radioCableShortAlarmSeverityCode=radioCableShortAlarmSeverityCode, linkXpicControlProcedure=linkXpicControlProcedure, combinedRadioCapabilitiesTxMaxFrequency=combinedRadioCapabilitiesTxMaxFrequency, radioRemDemodulatorFailAlarmSeverityCode=radioRemDemodulatorFailAlarmSeverityCode, linkBerDataCounterL=linkBerDataCounterL, linkXpicRemTxOffAlarm=linkXpicRemTxOffAlarm, linkAcmAtpcRxPowerScaling=linkAcmAtpcRxPowerScaling, linkProMaintRxWtrReset=linkProMaintRxWtrReset, linkReducedCapacityAlarm=linkReducedCapacityAlarm, radioRemDemodulatorFailAlarm=radioRemDemodulatorFailAlarm, linkSynchSetupProtocolEnable=linkSynchSetupProtocolEnable, radioTxPowerLowAlarmSeverityCode=radioTxPowerLowAlarmSeverityCode, radioPrxHysteresisValue=radioPrxHysteresisValue, combinedRadioFreqTabEntry=combinedRadioFreqTabEntry, sspParameterType=sspParameterType, linkLocalIduAlarmSynthesis=linkLocalIduAlarmSynthesis, linkFadeMarginMeasure=linkFadeMarginMeasure, radioPrxHysteresisValueTrapNotification=radioPrxHysteresisValueTrapNotification, linkProMaintTable=linkProMaintTable, radioRFLoopTestResult=radioRFLoopTestResult, radioRxBerThresholdTable=radioRxBerThresholdTable, linkRadioEocAlarmSeverityCode=linkRadioEocAlarmSeverityCode, radioStatusTable=radioStatusTable, linkProMaintV2RxWtrReset=linkProMaintV2RxWtrReset, radioOduIduCommunicationAlarmSeverityCode=radioOduIduCommunicationAlarmSeverityCode, radioVcoFailAlarmSeverityCode=radioVcoFailAlarmSeverityCode, sspLinkTxLowerProfile=sspLinkTxLowerProfile, linkTfcRowStatus=linkTfcRowStatus, linkChRowstatus=linkChRowstatus, linkAcmRxProfileLabel=linkAcmRxProfileLabel, linkXpicRemTxOffAlarmAlarmSeverityCode=linkXpicRemTxOffAlarmAlarmSeverityCode, linkAcmTxProfileLabel=linkAcmTxProfileLabel, linkSettingsTable=linkSettingsTable, combinedRadioAtpcRxPowerScaling=combinedRadioAtpcRxPowerScaling, combinedRadioFreqChannelNum=combinedRadioFreqChannelNum, tdmSettingsEntry=tdmSettingsEntry, linkProMaintEntry=linkProMaintEntry, xpicRowstatus=xpicRowstatus, radioInvalidFrequencyAlarmSeverityCode=radioInvalidFrequencyAlarmSeverityCode, linkProMaintTxWtrReset=linkProMaintTxWtrReset, radioCapabilitiesEntry=radioCapabilitiesEntry, linkXpicControlProcedureReset=linkXpicControlProcedureReset, linkReducedCapacityAlarmSeverityCode=linkReducedCapacityAlarmSeverityCode, linkChIndex=linkChIndex, linkStatusTable=linkStatusTable, linkCapabilitiesEntry=linkCapabilitiesEntry, radioDuplexFreqValue=radioDuplexFreqValue, xpicEntry=xpicEntry, linkBaseBandLom=linkBaseBandLom, combinedRadioPowerRange=combinedRadioPowerRange, linkTxTDMCapacity=linkTxTDMCapacity, linkTfcControl=linkTfcControl, radioStorageType=radioStorageType, linkProV2ProtectionRxChIdx=linkProV2ProtectionRxChIdx, radioCarrierOnly=radioCarrierOnly, linkXpicProcedureBlockAlarm=linkXpicProcedureBlockAlarm, linkProV2RxRevertive=linkProV2RxRevertive, linkBerEntry=linkBerEntry, linkIfIndex=linkIfIndex, linkId=linkId, radioNormalizedMse=radioNormalizedMse, linkTxETHCapacity=linkTxETHCapacity, linkProV2TxRevertive=linkProV2TxRevertive, stm1BulkChannel=stm1BulkChannel, linkTxLowerProfile=linkTxLowerProfile, stm1BulkPolIndex=stm1BulkPolIndex, linkBerErrorCounterH=linkBerErrorCounterH, linkChTable=linkChTable, radioCableShortAlarm=radioCableShortAlarm, radioDuplexFrequency=radioDuplexFrequency, linkProRxWtrTime=linkProRxWtrTime, radioLocalOduAlarmSynthesisSeverityCode=radioLocalOduAlarmSynthesisSeverityCode, combinedRadioCapabilitiesExtendedMinPwr=combinedRadioCapabilitiesExtendedMinPwr, radioOduIduCommunicationAlarm=radioOduIduCommunicationAlarm, linkBerDataCounterH=linkBerDataCounterH, linkBerStart=linkBerStart, radioMaintTable=radioMaintTable, sspEntry=sspEntry, radioRemoteOduAlarmSynthesisSeverityCode=radioRemoteOduAlarmSynthesisSeverityCode, linkProTxRevertive=linkProTxRevertive, radioIduOduCommunicationAlarmSeverityCode=radioIduOduCommunicationAlarmSeverityCode, radioXpd=radioXpd, linkTfcV2RowStatus=linkTfcV2RowStatus, linkDuplexFreqEntry=linkDuplexFreqEntry, linkProMaintV2Entry=linkProMaintV2Entry, radioSettingsLabel=radioSettingsLabel, combinedRadioDuplexFreqEntry=combinedRadioDuplexFreqEntry, radioSettingsIndex=radioSettingsIndex, combinedRadioDuplexFrequencyTable=combinedRadioDuplexFrequencyTable, linkProMaintV2TxWtrReset=linkProMaintV2TxWtrReset, radioDuplexFreqId=radioDuplexFreqId, linkFrequencyTable=linkFrequencyTable, linkMaintTable=linkMaintTable, radioIndex=radioIndex, linkChRadioIdx=linkChRadioIdx, linkLocalIduAlarmSynthesisSeverityCode=linkLocalIduAlarmSynthesisSeverityCode, radioLabel=radioLabel, radioMeasuredRxBerThreshold=radioMeasuredRxBerThreshold, linkTfcAction=linkTfcAction, linkTfcWatchWindow=linkTfcWatchWindow, linkRefModulationMap=linkRefModulationMap, stm1BulkMappingEntry=stm1BulkMappingEntry, radioRxActiveStatus=radioRxActiveStatus, linkProTxWtrTime=linkProTxWtrTime, PYSNMP_MODULE_ID=radioSystem, radioLoopRfGroup=radioLoopRfGroup, sspLinkTxUpperProfile=sspLinkTxUpperProfile, combinedRadioFreqChannelId=combinedRadioFreqChannelId, radioTxStatus=radioTxStatus, linkBerSyncLossAlarmCounter=linkBerSyncLossAlarmCounter, radioRxQualityLowAlarmSeverityCode=radioRxQualityLowAlarmSeverityCode, radioDemodulatorFailAlarm=radioDemodulatorFailAlarm, linkDuplexFrequencyTable=linkDuplexFrequencyTable, linkCapabilitiesMaxPtxNominalValue=linkCapabilitiesMaxPtxNominalValue, radioRFLoopTestPercTime=radioRFLoopTestPercTime, radioVcoFailAlarm=radioVcoFailAlarm, linkStatusEntry=linkStatusEntry, radioFreqChannelId=radioFreqChannelId, radioRxPowerLowAlarm=radioRxPowerLowAlarm, Stm1IndexOrZero=Stm1IndexOrZero, linkProV2ExtraTraffic=linkProV2ExtraTraffic, linkLinkTelemetryFailAlarm=linkLinkTelemetryFailAlarm, radioRxIFAgcAlarmSeverityCode=radioRxIFAgcAlarmSeverityCode, radioCapabilitiesStepFrequency=radioCapabilitiesStepFrequency, linkAcmProfileLabel=linkAcmProfileLabel, linkNotMatchingRadiosAlarmSeverityCode=linkNotMatchingRadiosAlarmSeverityCode, radioTxChannelSpacing=radioTxChannelSpacing, linkProMaintRxLockout=linkProMaintRxLockout, radioModulationTable=radioModulationTable, linkE1vsSTM1CapacityE1=linkE1vsSTM1CapacityE1, linkDuplexFreqValue=linkDuplexFreqValue, radioDemodulatorFailAlarmSeverityCode=radioDemodulatorFailAlarmSeverityCode, radioRxIFAgcAlarm=radioRxIFAgcAlarm, linkE1vsSTM1CapacityTable=linkE1vsSTM1CapacityTable, sspLinkSynchSetupProtocolEnable=sspLinkSynchSetupProtocolEnable, radioModulatorFailAlarm=radioModulatorFailAlarm, stm1BulkMappingTable=stm1BulkMappingTable, linkCapabilitiesStepFrequency=linkCapabilitiesStepFrequency, radioAtpcPwrHigh=radioAtpcPwrHigh, radioSystem=radioSystem, xpicChRowstatus=xpicChRowstatus, linkAcmProfileEnable=linkAcmProfileEnable, radioTxIFAgcAlarmSeverityCode=radioTxIFAgcAlarmSeverityCode, linkEntry=linkEntry, linkCapabilitiesMinPtxNominalValue=linkCapabilitiesMinPtxNominalValue, radioTxFrequency=radioTxFrequency, ConfigMismatchReason=ConfigMismatchReason, radioStatusEntry=radioStatusEntry, linkBerErrorCounterL=linkBerErrorCounterL, tdmPolIndex=tdmPolIndex, radioRemoteOduAlarmSynthesis=radioRemoteOduAlarmSynthesis, radioLoop=radioLoop, linkProV2TxSwitchedChIdx=linkProV2TxSwitchedChIdx, linkDuplexFreqId=linkDuplexFreqId, radioAtpcPwrLow=radioAtpcPwrLow, linkSettingsEntry=linkSettingsEntry, linkTfcV2Entry=linkTfcV2Entry, linkProV2ProtectionTxChIdx=linkProV2ProtectionTxChIdx, linkLinkTelemetryFailAlarmSeverityCode=linkLinkTelemetryFailAlarmSeverityCode, radioDuplexFrequencyTable=radioDuplexFrequencyTable, radioTxAttenuation=radioTxAttenuation, linkAcmETHCapacity=linkAcmETHCapacity, radioType=radioType, radioCapabilitiesMinPtxNominalValue=radioCapabilitiesMinPtxNominalValue, linkTfcTable=linkTfcTable, combinedRadioCapabilitiesMinPtxNominalValue=combinedRadioCapabilitiesMinPtxNominalValue, linkAcmProfileId=linkAcmProfileId, sspLinkProfilesSetSelection=sspLinkProfilesSetSelection, linkTfcV2WatchWindow=linkTfcV2WatchWindow, linkProMaintV2RxForced=linkProMaintV2RxForced, radioConfigAlarmReason=radioConfigAlarmReason, linkTxUpperProfile=linkTxUpperProfile, linkProMaintV2TxLockout=linkProMaintV2TxLockout, radioLom=radioLom, combinedRadioDuplexFreqValue=combinedRadioDuplexFreqValue, radioXpic=radioXpic, linkXpd=linkXpd, radioSettingsEntry=radioSettingsEntry, sspTdmE1Channel=sspTdmE1Channel, linkProEntry=linkProEntry, linkLabel=linkLabel, radioRxActiveStatusTrapNotification=radioRxActiveStatusTrapNotification, linkRemoteIduAlarmSynthesis=linkRemoteIduAlarmSynthesis, linkChannelSpacing=linkChannelSpacing, channelSpacingSelection=channelSpacingSelection, radioModulatorFailAlarmSeverityCode=radioModulatorFailAlarmSeverityCode, linkProExtraTraffic=linkProExtraTraffic, sspLinkAcmEngineEnable=sspLinkAcmEngineEnable, combinedRadioCapabilitiesTable=combinedRadioCapabilitiesTable, linkTfcV2Alarm=linkTfcV2Alarm, linkIdMismatchAlarm=linkIdMismatchAlarm, radioCableOpenAlarm=radioCableOpenAlarm, combinedRadioCapabilitiesTxMinFrequency=combinedRadioCapabilitiesTxMinFrequency, fadeMarginMeasure=fadeMarginMeasure, radioRefModulationMap=radioRefModulationMap, combinedRadioPowerScaling=combinedRadioPowerScaling)
mibBuilder.exportSymbols("SIAE-RADIO-SYSTEM-MIB", tdmE1Framer=tdmE1Framer, combinedRadioDuplexFreqId=combinedRadioDuplexFreqId, radioRxPowerLowAlarmSeverityCode=radioRxPowerLowAlarmSeverityCode, linkAcmTDMCapacity=linkAcmTDMCapacity, linkProMaintV2Table=linkProMaintV2Table, linkCapabilitiesTxMaxFrequency=linkCapabilitiesTxMaxFrequency, radioBaseBandRxAlarm=radioBaseBandRxAlarm, xpicTable=xpicTable, linkConfigurationInProgressTrapNotification=linkConfigurationInProgressTrapNotification, radioCapabilitiesTxMaxFrequency=radioCapabilitiesTxMaxFrequency, xpicChEntry=xpicChEntry, linkAcmPowerScaling=linkAcmPowerScaling, ChannelSpacing=ChannelSpacing, radioPtxHysteresisValue=radioPtxHysteresisValue, linkProTxSwitchedChIdx=linkProTxSwitchedChIdx, linkRescueModulation=linkRescueModulation, radioLoopIqGroup=radioLoopIqGroup, linkTfcAlarmThreshold=linkTfcAlarmThreshold, combinedRadioPowerScalingEntry=combinedRadioPowerScalingEntry, radioNominalRxBerThreshold=radioNominalRxBerThreshold, linkRemoteIduAlarmSynthesisSeverityCode=linkRemoteIduAlarmSynthesisSeverityCode, linkE1vsSTM1CapacityStm1=linkE1vsSTM1CapacityStm1, linkChEntry=linkChEntry, linkFreqValue=linkFreqValue, radioMaintEntry=radioMaintEntry, linkProV2RowStatus=linkProV2RowStatus, combinedRadioPowerScalingTable=combinedRadioPowerScalingTable, sspTable=sspTable, radioRxQualityWarningAlarmSeverityCode=radioRxQualityWarningAlarmSeverityCode, radioChannelSpacing=radioChannelSpacing, linkTxPwrThresh=linkTxPwrThresh, linkProMaintTxLockout=linkProMaintTxLockout, linkChRadioSettingsIdx=linkChRadioSettingsIdx, linkProfilesSetSelection=linkProfilesSetSelection, radioEntry=radioEntry, radioRtPsuOff=radioRtPsuOff, linkAcmTxModulation=linkAcmTxModulation, stm1BulkChanIndex=stm1BulkChanIndex, linkMaintEntry=linkMaintEntry, linkE1vsSTM1CapacityEntry=linkE1vsSTM1CapacityEntry, radioTxIFAgcAlarm=radioTxIFAgcAlarm, radioIduOduCommunicationAlarm=radioIduOduCommunicationAlarm, linkRxETHCapacity=linkRxETHCapacity, radioPtx=radioPtx, linkProV2Entry=linkProV2Entry, combinedRadioFreqValue=combinedRadioFreqValue, ModulationMap=ModulationMap, radioModulationMap=radioModulationMap, radioRxQualityWarningAlarm=radioRxQualityWarningAlarm, radioAtpcRange=radioAtpcRange, linkBerElapsedTime=linkBerElapsedTime, linkIdMismatchAlarmSeverityCode=linkIdMismatchAlarmSeverityCode, radioFrequencyTable=radioFrequencyTable, radioSettingsRowStatus=radioSettingsRowStatus, linkAcmEngineEnable=linkAcmEngineEnable, linkProMaintV2TxForced=linkProMaintV2TxForced, linkAcmActiveProfile=linkAcmActiveProfile, linkAcmRxProfile=linkAcmRxProfile, linkTfcV2Table=linkTfcV2Table, radioPtxHysteresisValueTrapNotification=radioPtxHysteresisValueTrapNotification, linkXpicProcedureBlockAlarmSeverityCode=linkXpicProcedureBlockAlarmSeverityCode, linkModulationTable=linkModulationTable, tdmSettingsTable=tdmSettingsTable, linkCapabilitiesCapability=linkCapabilitiesCapability, linkSetupMismatchAlarm=linkSetupMismatchAlarm, radioBaseBandRxAlarmSeverityCode=radioBaseBandRxAlarmSeverityCode, linkAcmEntry=linkAcmEntry, linkBerSyncLossAlarm=linkBerSyncLossAlarm, xpicIndex=xpicIndex, linkProMaintV2RxLockout=linkProMaintV2RxLockout, linkBerSyncLossAlarmSeverityCode=linkBerSyncLossAlarmSeverityCode, radioFreqTableSelection=radioFreqTableSelection, linkTfcV2AlarmThreshold=linkTfcV2AlarmThreshold, linkBerTable=linkBerTable, xpicChPolIndex=xpicChPolIndex, linkCapabilitiesTxMinFrequency=linkCapabilitiesTxMinFrequency, linkPolIndex=linkPolIndex, linkTfcAlarm=linkTfcAlarm, linkProProtectionRxChIdx=linkProProtectionRxChIdx, radioLoopCapabilityEntry=radioLoopCapabilityEntry, radioCableOpenAlarmSeverityCode=radioCableOpenAlarmSeverityCode, linkAcmDownshiftThreshold=linkAcmDownshiftThreshold, radioLoopCapabilityTable=radioLoopCapabilityTable, linkSetupMismatchAlarmSeverityCode=linkSetupMismatchAlarmSeverityCode, radioCapabilitiesExtendedMinPwr=radioCapabilitiesExtendedMinPwr, linkAcmRxCode=linkAcmRxCode, linkRxPwrThresh=linkRxPwrThresh, linkFreqChannelNum=linkFreqChannelNum, linkAcmMaxTDMCapacity=linkAcmMaxTDMCapacity, linkAcmTxCode=linkAcmTxCode, linkRescueSetupAlarm=linkRescueSetupAlarm, linkAcmProfileCapacity=linkAcmProfileCapacity, radioFreqChannelNum=radioFreqChannelNum, linkTable=linkTable, radioModulationEntry=radioModulationEntry, combinedRadioFrequencyTable=combinedRadioFrequencyTable, linkType=linkType, radioCapabilitiesMaxPtxNominalValue=radioCapabilitiesMaxPtxNominalValue, linkProRxSwitchedChIdx=linkProRxSwitchedChIdx, linkCapabilitiesExtendedMinPwr=linkCapabilitiesExtendedMinPwr, linkProRowStatus=linkProRowStatus, linkBandwidthAndModulation=linkBandwidthAndModulation, radioPrxChange=radioPrxChange, tdmE1Channel=tdmE1Channel, linkAcmTxProfile=linkAcmTxProfile, radioCapabilitiesTxMinFrequency=radioCapabilitiesTxMinFrequency, linkProV2TxWtrTime=linkProV2TxWtrTime, radioConfigMismatchAlarm=radioConfigMismatchAlarm, radioSystemMibVersion=radioSystemMibVersion, radioLocalOduAlarmSynthesis=radioLocalOduAlarmSynthesis, radioRxBerThresholdStatus=radioRxBerThresholdStatus, RadioCapability=RadioCapability, linkProV2Table=linkProV2Table, linkRescueSetupAlarmSeverityCode=linkRescueSetupAlarmSeverityCode, radioTxPowerLowAlarm=radioTxPowerLowAlarm, linkModulationEntry=linkModulationEntry)
