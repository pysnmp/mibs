#
# PySNMP MIB module APSIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APSIP-MIB
# Produced by pysmi-1.1.12 at Tue May 28 14:02:19 2024
# On host fv-az529-55 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
ApRedundancyState, ApPresence, ApServerStatus, ApPhyPortType, ApSipMethod, ApHardwareModuleFamily = mibBuilder.importSymbols("ACMEPACKET-TC", "ApRedundancyState", "ApPresence", "ApServerStatus", "ApPhyPortType", "ApSipMethod", "ApHardwareModuleFamily")
apSysMgmtSipInterfaceRealmName, apSigRealmStatsEntry, apSysMgmtSipInterfaceIP, apSipSessionAgentStatsEntry = mibBuilder.importSymbols("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName", "apSigRealmStatsEntry", "apSysMgmtSipInterfaceIP", "apSipSessionAgentStatsEntry")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Gauge32, NotificationType, ModuleIdentity, Integer32, Counter32, MibIdentifier, Bits, ObjectIdentity, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Gauge32", "NotificationType", "ModuleIdentity", "Integer32", "Counter32", "MibIdentifier", "Bits", "ObjectIdentity", "Unsigned32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
apSipModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 15))
apSipModule.setRevisions(('2012-07-13 00:00', '2012-03-07 00:00', '2014-06-26 00:00', '2017-11-24 00:00', '2017-12-13 00:00', '2018-04-04 00:00', '2018-04-27 00:00', '2019-04-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apSipModule.setRevisionsDescriptions(('Updated contact info.', 'Initial version.', 'Updated Organization and Contact info.', 'Added MIB definitions for SRVCC Stats.', 'Added new table for sip method stats (apSipMethodStatsTable)', 'Added stats for SRVCC pre-alerting.', 'Added MIB definitions for SIP Reg Event Subscription Stats.', 'Added MIB definitions for MSRP Stats.',))
if mibBuilder.loadTexts: apSipModule.setLastUpdated('201904240000Z')
if mibBuilder.loadTexts: apSipModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apSipModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apSipModule.setDescription('SIP MIB for Oracle Communications Acme Packet SBCs')
apSipMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1))
apSipMIBGeneralObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1))
apSipMIBTabularObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2))
apSipNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2))
apSipConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3))
apSipObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1))
apSipNotificationGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 2))
apSipSecInterfaceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 1))
apSipAudioVideoCallsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 2))
apSipSRVCCStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3))
apSipRegEvtSubStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 4))
apSipMSRPStatsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5))
apSipSecInterfaceNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1))
apSipSecIntfNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1, 1))
apSipSecIntfNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1, 2))
apSipSecIntfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1, 2, 0))
apSipSecInterfaceTotalRegistrations = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSecInterfaceTotalRegistrations.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceTotalRegistrations.setDescription('The total number of registrations on all secondary SIP interfaces.')
apSipSecInterfaceRegThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSecInterfaceRegThreshold.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceRegThreshold.setDescription('The max threshold for registrations on all secondary SIP interfaces\n                 beyond which trap and alarm will be raised.')
apSipSecInterfaceClearThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSecInterfaceClearThreshold.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceClearThreshold.setDescription('The threshold for registrations on all secondary SIP interfaces\n                 below which if alarm was raised before, it will be cleared.')
apSIPVideoCallsActive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSIPVideoCallsActive.setStatus('current')
if mibBuilder.loadTexts: apSIPVideoCallsActive.setDescription('Number of current active SIP Video calls')
apSIPAudioCallsActive = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSIPAudioCallsActive.setStatus('current')
if mibBuilder.loadTexts: apSIPAudioCallsActive.setDescription('Number of current active SIP Audio calls')
apSipSRVCCStatsTotalSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsTotalSuccess.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsTotalSuccess.setDescription('Total successful SRVCC handovers')
apSipSRVCCStatsTotalFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsTotalFailed.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsTotalFailed.setDescription('Total failed SRVCC handovers')
apSipSRVCCStatsTotalCallsAfterAnswer = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsAfterAnswer.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsAfterAnswer.setDescription('Total calls subjected to SRVCC after answer')
apSipSRVCCStatsAfterAnswerSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsAfterAnswerSuccess.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsAfterAnswerSuccess.setDescription('Total successful SRVCC handovers after answer')
apSipSRVCCStatsAfterAnswerFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsAfterAnswerFailed.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsAfterAnswerFailed.setDescription('Total failed SRVCC handovers after answer')
apSipSRVCCStatsTotalCallsDuringAlerting = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsDuringAlerting.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsDuringAlerting.setDescription('Total calls subjected to SRVCC during alerting')
apSipSRVCCStatsDuringAlertingSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsDuringAlertingSuccess.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsDuringAlertingSuccess.setDescription('Total successful SRVCC handovers during alerting')
apSipSRVCCStatsDuringAlertingFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsDuringAlertingFailed.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsDuringAlertingFailed.setDescription('Total failed SRVCC handovers during alerting')
apSipSRVCCStatsAtcfCancel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsAtcfCancel.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsAtcfCancel.setDescription('Total number of atcf cancellations')
apSipSRVCCStatsEmergencySuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsEmergencySuccess.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsEmergencySuccess.setDescription('Total successful SRVCC handovers for emergency calls')
apSipSRVCCStatsEmergencyFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsEmergencyFailed.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsEmergencyFailed.setDescription('Total failed SRVCC handovers for emergency calls')
apSipSRVCCStatsEatfCancel = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsEatfCancel.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsEatfCancel.setDescription('Total number of eatf cancellations')
apSipSRVCCStatsTotalCallsDuringPreAlerting = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsDuringPreAlerting.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsTotalCallsDuringPreAlerting.setDescription('Total calls subjected to SRVCC during pre-alerting')
apSipSRVCCStatsDuringPreAlertingSuccess = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsDuringPreAlertingSuccess.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsDuringPreAlertingSuccess.setDescription('Total successful SRVCC handovers during pre-alerting')
apSipSRVCCStatsDuringPreAlertingFailed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 3, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSRVCCStatsDuringPreAlertingFailed.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsDuringPreAlertingFailed.setDescription('Total failed SRVCC handovers during pre-alerting')
apSipStatsActiveSubsRegEvt = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 4, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipStatsActiveSubsRegEvt.setStatus('current')
if mibBuilder.loadTexts: apSipStatsActiveSubsRegEvt.setDescription('Number of Active Reg Event Subscriptions in the SBC.')
apSipStatsPerMaxSubsRegEvt = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipStatsPerMaxSubsRegEvt.setStatus('current')
if mibBuilder.loadTexts: apSipStatsPerMaxSubsRegEvt.setDescription('Lifetime PerMax Reg Event Subscriptions count in the SBC.')
apSipStatsMaxActiveSubsRegEvt = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipStatsMaxActiveSubsRegEvt.setStatus('current')
if mibBuilder.loadTexts: apSipStatsMaxActiveSubsRegEvt.setDescription('Count of Lifetime Maximum Active Reg Event Subscriptions in the SBC.')
apSipStatsTotalSubsRegEvt = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipStatsTotalSubsRegEvt.setStatus('current')
if mibBuilder.loadTexts: apSipStatsTotalSubsRegEvt.setDescription('Count of Lifetime Total Reg Event Subscriptions in the SBC.')
apSipMSRPFdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableSize.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableSize.setDescription('The number of entries in the MSRP File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionIdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionIdTableSize.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionIdTableSize.setDescription('The number of entries in the MSRP Session-Id table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPActiveSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPActiveSessions.setDescription('The number of total Active MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPMaxActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPMaxActiveSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPMaxActiveSessions.setDescription('The number of max active MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPEstablishedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPEstablishedSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPEstablishedSessions.setDescription('Total number of MSRP Established Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPProvisionedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPProvisionedSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPProvisionedSessions.setDescription('Total number of MSRP Provisioned Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFinishedSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFinishedSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFinishedSessions.setDescription('Total number of MSRP Finished Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPAcceptedConnections = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPAcceptedConnections.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPAcceptedConnections.setDescription('Total number of Accepted Connections in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectedConnections = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectedConnections.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectedConnections.setDescription('Total number of Connected Connections in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReleasedConnections = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReleasedConnections.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReleasedConnections.setDescription('Total number of Released Connections in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamRequestReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamRequestReceived.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamRequestReceived.setDescription('Total number of Stream Requests Received in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamRequestSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamRequestSent.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamRequestSent.setDescription('Total number of stream Requests Sent in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamResponseReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamResponseReceived.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamResponseReceived.setDescription('Total number of Stream Responses Received in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamResponseSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamResponseSent.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamResponseSent.setDescription('Total number of Stream Responses Sent in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPGlobalBufferedData = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPGlobalBufferedData.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPGlobalBufferedData.setDescription('Current Global Buffer Data size for MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFlowAdd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFlowAdd.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFlowAdd.setDescription('Total number of MSRP Nat Flows Added.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFlowDelete = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFlowDelete.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFlowDelete.setDescription('Total number of MSRP Nat Flows Deleted.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedSessionsCannotRoute = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedSessionsCannotRoute.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedSessionsCannotRoute.setDescription('Total number of Failed MSRP Sessions due to No Session Route Failure.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedSessionsCannotConnect = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedSessionsCannotConnect.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedSessionsCannotConnect.setDescription('Total number of Failed MSRP Sessions that can not connect.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedSessionsFingerprintMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedSessionsFingerprintMismatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedSessionsFingerprintMismatch.setDescription('Total number of Falied MSRP Sessions due to Fingerprint Mismatches.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedMessagesCannotBeSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedMessagesCannotBeSent.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedMessagesCannotBeSent.setDescription('Total number of Message Send Failures in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedMessagesMalformed = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedMessagesMalformed.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedMessagesMalformed.setDescription('Total number of Malformed Messages Received in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSendQFullEvents = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSendQFullEvents.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSendQFullEvents.setDescription('Total number of TCP Send-Q Full Events in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSendQCongestedEvents = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSendQCongestedEvents.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSendQCongestedEvents.setDescription('Total number of TCP Send-Q Congested Events in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSendQCongestionRelievedEvents = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSendQCongestionRelievedEvents.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSendQCongestionRelievedEvents.setDescription('Total number of TCP Send-Q Relieved Events in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamErrorNoTransId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoTransId.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoTransId.setDescription('Total number of No Trans-Id Stream Errors in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamErrorNoMsgType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoMsgType.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoMsgType.setDescription('Total number of No Message Type Stream Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamErrorNoByteLength = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoByteLength.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamErrorNoByteLength.setDescription('Total number of No Byte Length stream Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPBufferLimitExceeded = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPBufferLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPBufferLimitExceeded.setDescription('Total number of Buffer Limit Exceeded Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFailedConnectionInit = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFailedConnectionInit.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFailedConnectionInit.setDescription('Total number of Connection Attempts Failed in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessReprovMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessReprovMismatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessReprovMismatch.setDescription('Total number of Session Reprovision Mismatches.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPTcpListenErrors = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPTcpListenErrors.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPTcpListenErrors.setDescription('Total number of TCP Listen Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPTcpConnectError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPTcpConnectError.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPTcpConnectError.setDescription('Total number of TCP Connect Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPTcpError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPTcpError.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPTcpError.setDescription('Total number of TCP Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoFromHeaderSessionID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoFromHeaderSessionID.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoFromHeaderSessionID.setDescription('Total number of FROM Header without a session-id in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoFromHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoFromHeader.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoFromHeader.setDescription('Total number of Messages without FROM Header in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFromHdrAddrParseError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFromHdrAddrParseError.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFromHdrAddrParseError.setDescription('Total number of FROM Header Parse errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoFromHdrAddr = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoFromHdrAddr.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoFromHdrAddr.setDescription('Total number of FROM Header with no Address in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoFromHdrPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoFromHdrPort.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoFromHdrPort.setDescription('Total number of FROM Header with no port in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoFromHdrAuthority = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoFromHdrAuthority.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoFromHdrAuthority.setDescription('Total number of From Header with no Authority in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFromHdrSrvMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFromHdrSrvMismatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFromHdrSrvMismatch.setDescription('Total number of FROM Header service type mismatches in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSendFailNoDestFd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSendFailNoDestFd.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSendFailNoDestFd.setDescription('Total number of send failures due to No Destination File Descriptor found in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSendFailedNoDstSession = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSendFailedNoDstSession.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSendFailedNoDstSession.setDescription('Total number of send failures due to No Destination Session found in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoToHeaderSessionID = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoToHeaderSessionID.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoToHeaderSessionID.setDescription('Total number of TO Headers without a session-id in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoToHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoToHeader.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoToHeader.setDescription('Total number of Messages without TO Header in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPToHdrAddrParseError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPToHdrAddrParseError.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPToHdrAddrParseError.setDescription('Total number of TO Headers Parse errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoToHdrAddr = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoToHdrAddr.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoToHdrAddr.setDescription('Total number of TO Headers with no Address in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoToHdrPort = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoToHdrPort.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoToHdrPort.setDescription('Total number of TO Headers with no port in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoToHdrAuthority = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoToHdrAuthority.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoToHdrAuthority.setDescription('Total number of TO Headers with no Authority in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPToHdrSrvMismatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPToHdrSrvMismatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPToHdrSrvMismatch.setDescription('Total number of TO Header service type mismatches in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNoDestFdEntry = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 51), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNoDestFdEntry.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNoDestFdEntry.setDescription('Total number of No Destination File Descriptor Entry Errors in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPTcpSendFailure = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 52), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPTcpSendFailure.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPTcpSendFailure.setDescription('Total number of TCP Send Failures in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFdTableInsertErrorCollision = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 53), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorCollision.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorCollision.setDescription('Total number of Insert Collisions errors in File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFdTableInsertErrorNoData = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorNoData.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorNoData.setDescription('Total number of No Data Insert Errors in File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFdTableInsertErrorMemory = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorMemory.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorMemory.setDescription('Total number of Memory Insert Errors in File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFdTableInsertErrorMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 56), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorMaxHops.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorMaxHops.setDescription('Total number of Max Hops Insert Errors in File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFdTableInsertErrorBad = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 57), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorBad.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFdTableInsertErrorBad.setDescription('Total number of Bad Insert Errors in File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionTableInsertErrorCollision = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorCollision.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorCollision.setDescription('Total number of Insert Collisions Errors in Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionTableInsertErrorNoData = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorNoData.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorNoData.setDescription('Total number of No Data Insert Errors in Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionTableInsertErrorMemory = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 60), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorMemory.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorMemory.setDescription('Total number of Memory Insert Errors in Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionTableInsertErrorMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorMaxHops.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorMaxHops.setDescription('Total number of Max Hops Insert Errors in Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionTableInsertErrorBad = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 62), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorBad.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionTableInsertErrorBad.setDescription('Total number of Bad Insert Errors in Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPFlowToSessionTableInsertError = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 63), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPFlowToSessionTableInsertError.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPFlowToSessionTableInsertError.setDescription('Total number of Insert Errors in Flow-To-Session Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumPreProvSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumPreProvSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumPreProvSessions.setDescription('Total number of PreProvisioned Sessions in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumPreProvMessages = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumPreProvMessages.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumPreProvMessages.setDescription('Total number of PreProvision RX Messages in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateNoSession = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 66), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateNoSession.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateNoSession.setDescription('Total number of Sockets in Initial State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateListening = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 67), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateListening.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateListening.setDescription('Total number of Sockets in Listening State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStatePending = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 68), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStatePending.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStatePending.setDescription('Total number of Sockets in Pending State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateConnecting = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 69), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateConnecting.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateConnecting.setDescription('Total number of Sockets in Connecting State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateConnected = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 70), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateConnected.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateConnected.setDescription('Total number of Sockets in Connected State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateEstablished = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 71), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateEstablished.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateEstablished.setDescription('Total number of Sockets in Established State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateFinished = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 72), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateFinished.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateFinished.setDescription('Total number of Sockets in Finished State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectionStateReleased = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 73), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectionStateReleased.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectionStateReleased.setDescription('Total number of Sockets in Released State in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPUnqualifiedConnections = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 74), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPUnqualifiedConnections.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPUnqualifiedConnections.setDescription('Total number of Sockets in Unqualified Status in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStateNone = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 75), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStateNone.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStateNone.setDescription('Total number of Sessions in Initial State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStateListening = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 76), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStateListening.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStateListening.setDescription('Total number of Sessions in Listening State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStatePreProvisioned = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 77), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStatePreProvisioned.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStatePreProvisioned.setDescription('Total number of Sessions in Pre-Provisioned State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStateProvisioned = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 78), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStateProvisioned.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStateProvisioned.setDescription('Total number of Sessions in Provisioned State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStateEstablished = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 79), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStateEstablished.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStateEstablished.setDescription('Total number of Sessions in Established State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPSessionStateFinished = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 80), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPSessionStateFinished.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPSessionStateFinished.setDescription('Total number of Sessions in Finished State.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPClosedFdTableSize = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 81), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPClosedFdTableSize.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPClosedFdTableSize.setDescription('Closed FD Table Size.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPClosedFdTableInsertErrors = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPClosedFdTableInsertErrors.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPClosedFdTableInsertErrors.setDescription('Total number of Insert Errors in Closed File Descriptor Table.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumFdForcedReleases = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumFdForcedReleases.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumFdForcedReleases.setDescription('Total number of Forced Release File Descriptor in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumForcedReleasedListenFdNotFound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumForcedReleasedListenFdNotFound.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumForcedReleasedListenFdNotFound.setDescription('Total number of Forced Release Listen File Descriptor Not Found in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumForcedReleasedForkedFdNotFound = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumForcedReleasedForkedFdNotFound.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumForcedReleasedForkedFdNotFound.setDescription('Total number of Forced Release Forked File Descriptor Not Found in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPNumListenFdForcedReleased = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPNumListenFdForcedReleased.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPNumListenFdForcedReleased.setDescription('Total number of Forced Release Listen File Descriptor in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPRequestBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPRequestBytesReceived.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPRequestBytesReceived.setDescription('Total number of Request Bytes Received in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPRequestBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPRequestBytesSent.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPRequestBytesSent.setDescription('Total number of Request Bytes Sent in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPResponseBytesReceived = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPResponseBytesReceived.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPResponseBytesReceived.setDescription('Total number of Response Bytes Received in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPResponseBytesSent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPResponseBytesSent.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPResponseBytesSent.setDescription('Total number of Response Bytes Sent in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPUnqualifiedClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPUnqualifiedClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPUnqualifiedClose.setDescription('Total number of Unqualified Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPUnconnectedClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPUnconnectedClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPUnconnectedClose.setDescription('Total number of File Descriptor did not get any connection in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPAcceptErrorClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPAcceptErrorClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPAcceptErrorClose.setDescription('Total number of Accept Error Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPPreProvisionClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPPreProvisionClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPPreProvisionClose.setDescription('Total number of Pre-provision Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReadErrorClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReadErrorClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReadErrorClose.setDescription('Total number of Read Error Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPStreamErrorClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPStreamErrorClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStreamErrorClose.setDescription('Total number of Stream Error Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPBufferClose = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPBufferClose.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPBufferClose.setDescription('Total number of Buffer Error Closes in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReleaseNotificationFailures = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationFailures.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationFailures.setDescription('Total number of Release Notification send failures.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReleaseNotificationUnsentNoId = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoId.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoId.setDescription('Total number of Unsent Release Notifications due to No session ID.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReleaseNotificationUnsentNoFd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoFd.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoFd.setDescription('Total number of Unsent Release Notifications due to invalid File Descriptor.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPReleaseNotificationUnsentNoListenFd = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoListenFd.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPReleaseNotificationUnsentNoListenFd.setDescription('Total number of Unsent Release Notifications due to No Listen File Descriptor.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPAcceptedConnectionsCema = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPAcceptedConnectionsCema.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPAcceptedConnectionsCema.setDescription('Total number of CEMA Accepted Connections.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPConnectedConnectionsCema = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPConnectedConnectionsCema.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPConnectedConnectionsCema.setDescription('Total number of CEMA Connected Connections.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPActiveCemaSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPActiveCemaSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPActiveCemaSessions.setDescription('Total number of Active CEMA Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPEstablishedSessionsSessmatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPEstablishedSessionsSessmatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPEstablishedSessionsSessmatch.setDescription('Total number of Established Sessmatch Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPProvisionedSessionsSessmatch = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPProvisionedSessionsSessmatch.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPProvisionedSessionsSessmatch.setDescription('Total number of Provisioned Sessmatch Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPActiveSessmatchSessions = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 107), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPActiveSessmatchSessions.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPActiveSessmatchSessions.setDescription('Total number of Active Sessmatch Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPMessageFromHost = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPMessageFromHost.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPMessageFromHost.setDescription('Total number of Messages Received from Host in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPMessageToHost = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPMessageToHost.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPMessageToHost.setDescription('Total number of Messages Sent to Host in MSRP Sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipMSRPMessageToHostFail = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 1, 5, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMSRPMessageToHostFail.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPMessageToHostFail.setDescription('Total number of Messages Sent to Host Failed in MSRP sessions.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.')
apSipSecInterfaceRegThresholdExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1, 2, 0, 1)).setObjects(("APSIP-MIB", "apSipSecInterfaceTotalRegistrations"), ("APSIP-MIB", "apSipSecInterfaceRegThreshold"))
if mibBuilder.loadTexts: apSipSecInterfaceRegThresholdExceededTrap.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceRegThresholdExceededTrap.setDescription(' The trap will be generated if the total number of registrations\n          on all secondary SIP interfaces exceed threshold.')
apSipSecInterfaceRegThresholdClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 1, 2, 0, 2)).setObjects(("APSIP-MIB", "apSipSecInterfaceTotalRegistrations"), ("APSIP-MIB", "apSipSecInterfaceClearThreshold"))
if mibBuilder.loadTexts: apSipSecInterfaceRegThresholdClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceRegThresholdClearTrap.setDescription(' The trap will be generated if the total number of registrations\n          on all secondary SIP interfaces go below clear threshold.')
apSipSurvivabilityNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2))
apSipSurvivabilityNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2, 1))
apSipSurvivabilityNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2, 2))
apSipSurvivabilityNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2, 2, 0))
apSipSurvivabilityModeEnter = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2, 2, 0, 1)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceIP"))
if mibBuilder.loadTexts: apSipSurvivabilityModeEnter.setStatus('current')
if mibBuilder.loadTexts: apSipSurvivabilityModeEnter.setDescription(' The trap will be generated when SIP interface enters Survivability Mode.')
apSipSurvivabilityModeExit = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 2, 2, 0, 2)).setObjects(("APSYSMGMT-MIB", "apSysMgmtSipInterfaceRealmName"), ("APSYSMGMT-MIB", "apSysMgmtSipInterfaceIP"))
if mibBuilder.loadTexts: apSipSurvivabilityModeExit.setStatus('current')
if mibBuilder.loadTexts: apSipSurvivabilityModeExit.setDescription(' The trap will be generated when SIP interface exits Survivability Mode and\n          resumes normal operation.')
apSipInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 1), )
if mibBuilder.loadTexts: apSipInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceTable.setDescription('The active SIP interface table.')
apSipInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 1, 1), ).setIndexNames((0, "APSIP-MIB", "apSipInterfaceIndex"))
if mibBuilder.loadTexts: apSipInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceEntry.setDescription('sip interface entry ')
apSipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apSipInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceIndex.setDescription('An integer for the sole purpose of indexing the DD interface.')
apSipInterfaceRealm = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipInterfaceRealm.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceRealm.setDescription('Realm name of the SIP interface.')
apSipRateIntfStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2), )
if mibBuilder.loadTexts: apSipRateIntfStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfStatsTable.setDescription('The table of sip message rate stats.')
apSipRateIntfStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1), ).setIndexNames((0, "APSIP-MIB", "apSipInterfaceIndex"), (0, "APSIP-MIB", "apSipRateIntfMethod"))
if mibBuilder.loadTexts: apSipRateIntfStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfStatsEntry.setDescription('SIP message rate per interface statistics ')
apSipRateIntfMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 1), ApSipMethod())
if mibBuilder.loadTexts: apSipRateIntfMethod.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfMethod.setDescription('Sip message method.')
apSipRateIntfMsgRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 5), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfMsgRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfMsgRcvd.setDescription('The rate of messages received.')
apSipRateIntfMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 6), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfMsgSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfMsgSent.setDescription('The rate of messages sent.')
apSipRateIntfReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 7), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfReqRcvd.setDescription('The rate of request messages received.')
apSipRateIntfReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 8), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfReqSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfReqSent.setDescription('The rate of request messages sent.')
apSipRateIntfRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 9), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfRspRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfRspRcvd.setDescription('The rate of response messages received.')
apSipRateIntfRspSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 2, 1, 10), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateIntfRspSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateIntfRspSent.setDescription('The rate of response messages sent.')
apSipAgentTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 3), )
if mibBuilder.loadTexts: apSipAgentTable.setStatus('current')
if mibBuilder.loadTexts: apSipAgentTable.setDescription('The active SIP agent table.')
apSipAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 3, 1), ).setIndexNames((0, "APSIP-MIB", "apSipAgentIndex"), (0, "APSIP-MIB", "apSipAgentStatsMethod"))
if mibBuilder.loadTexts: apSipAgentEntry.setStatus('current')
if mibBuilder.loadTexts: apSipAgentEntry.setDescription('SIP message rate per interface statistics ')
apSipAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: apSipAgentIndex.setStatus('current')
if mibBuilder.loadTexts: apSipAgentIndex.setDescription('An integer for the sole purpose of indexing the Sip agent.')
apSipAgentName = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipAgentName.setStatus('current')
if mibBuilder.loadTexts: apSipAgentName.setDescription('Name of the SIP agent.')
apSipRateAgentStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4), )
if mibBuilder.loadTexts: apSipRateAgentStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentStatsTable.setDescription('The table of codec statistics per-SIP Agent statistics.')
apSipRateAgentStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1), ).setIndexNames((0, "APSIP-MIB", "apSipAgentIndex"), (0, "APSIP-MIB", "apSipAgentStatsMethod"))
if mibBuilder.loadTexts: apSipRateAgentStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentStatsEntry.setDescription('SIP message rate per interface statistics ')
apSipAgentStatsMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 1), ApSipMethod())
if mibBuilder.loadTexts: apSipAgentStatsMethod.setStatus('current')
if mibBuilder.loadTexts: apSipAgentStatsMethod.setDescription('Sip message method.')
apSipRateAgentMsgRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 5), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentMsgRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentMsgRcvd.setDescription('The rate of messages received.')
apSipRateAgentMsgSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 6), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentMsgSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentMsgSent.setDescription('The rate of messages sent.')
apSipRateAgentReqRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 7), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentReqRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentReqRcvd.setDescription('The rate of request messages received.')
apSipRateAgentReqSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 8), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentReqSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentReqSent.setDescription('The rate of request messages sent.')
apSipRateAgentRspRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 9), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentRspRcvd.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentRspRcvd.setDescription('The rate of response messages received.')
apSipRateAgentRspSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 4, 1, 10), Gauge32()).setUnits('messages per 10 seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipRateAgentRspSent.setStatus('current')
if mibBuilder.loadTexts: apSipRateAgentRspSent.setDescription('The rate of response messages sent.')
apSipSecInterfaceRegNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 2, 1)).setObjects(("APSIP-MIB", "apSipSecInterfaceRegThresholdExceededTrap"), ("APSIP-MIB", "apSipSecInterfaceRegThresholdClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipSecInterfaceRegNotificationsGroup = apSipSecInterfaceRegNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceRegNotificationsGroup.setDescription('A collection of traps to extend reporting capabilities.')
apSipSurvivabilityNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 2, 2)).setObjects(("APSIP-MIB", "apSipSurvivabilityModeEnter"), ("APSIP-MIB", "apSipSurvivabilityModeExit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipSurvivabilityNotificationsGroup = apSipSurvivabilityNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipSurvivabilityNotificationsGroup.setDescription('Traps to monitor  SIP interface Survivability feature')
apSipSecInterfaceRegObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 1)).setObjects(("APSIP-MIB", "apSipSecInterfaceTotalRegistrations"), ("APSIP-MIB", "apSipSecInterfaceRegThreshold"), ("APSIP-MIB", "apSipSecInterfaceClearThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipSecInterfaceRegObjectsGroup = apSipSecInterfaceRegObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipSecInterfaceRegObjectsGroup.setDescription('A collection of objects providing the SIP MIB\n                for Secondary Interface Registrations.')
apSipRateStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 2)).setObjects(("APSIP-MIB", "apSipInterfaceRealm"), ("APSIP-MIB", "apSipRateIntfMsgRcvd"), ("APSIP-MIB", "apSipRateIntfMsgSent"), ("APSIP-MIB", "apSipRateIntfReqRcvd"), ("APSIP-MIB", "apSipRateIntfReqSent"), ("APSIP-MIB", "apSipRateIntfRspRcvd"), ("APSIP-MIB", "apSipRateIntfRspSent"), ("APSIP-MIB", "apSipAgentName"), ("APSIP-MIB", "apSipRateAgentMsgRcvd"), ("APSIP-MIB", "apSipRateAgentMsgSent"), ("APSIP-MIB", "apSipRateAgentReqRcvd"), ("APSIP-MIB", "apSipRateAgentReqSent"), ("APSIP-MIB", "apSipRateAgentRspRcvd"), ("APSIP-MIB", "apSipRateAgentRspSent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipRateStatsGroup = apSipRateStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipRateStatsGroup.setDescription('A collection of objects providing sip rate stats.')
apSipSaCacStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 5), )
if mibBuilder.loadTexts: apSipSaCacStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipSaCacStatsTable.setDescription('SIP Session Agent Connection Admission Control Stats Table.')
apSipSaCacStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 5, 1), )
apSipSessionAgentStatsEntry.registerAugmentions(("APSIP-MIB", "apSipSaCacStatsEntry"))
apSipSaCacStatsEntry.setIndexNames(*apSipSessionAgentStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSipSaCacStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipSaCacStatsEntry.setDescription('Connection Admission Control Statistics.')
apSipSaCacSessionUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 5, 1, 1), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSaCacSessionUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSipSaCacSessionUtilLevel.setDescription('Current session utilization level.')
apSipSaCacBurstRateUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 5, 1, 2), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSaCacBurstRateUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSipSaCacBurstRateUtilLevel.setDescription('Current burst rate utilization level.')
apSigRealmCacStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 6), )
if mibBuilder.loadTexts: apSigRealmCacStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCacStatsTable.setDescription('Realm Connection Admission Control Stats Table.')
apSigRealmCacStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 6, 1), )
apSigRealmStatsEntry.registerAugmentions(("APSIP-MIB", "apSigRealmCacStatsEntry"))
apSigRealmCacStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSigRealmCacStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCacStatsEntry.setDescription('Connection Admission Control Statistics.')
apSigRealmCacSessionUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 6, 1, 1), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmCacSessionUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCacSessionUtilLevel.setDescription('Current session utilization level.')
apSigRealmCacBurstRateUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 6, 1, 2), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmCacBurstRateUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCacBurstRateUtilLevel.setDescription('Current burst rate utilization level.')
apSipInterfaceCacStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 7), )
if mibBuilder.loadTexts: apSipInterfaceCacStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceCacStatsTable.setDescription('SIP Interface Connection Admission Control Stats Table.')
apSipInterfaceCacStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 7, 1), )
apSipInterfaceEntry.registerAugmentions(("APSIP-MIB", "apSipInterfaceCacStatsEntry"))
apSipInterfaceCacStatsEntry.setIndexNames(*apSipInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: apSipInterfaceCacStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceCacStatsEntry.setDescription('Connection Admission Control Statistics.')
apSipInterfaceCacSessionUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 7, 1, 1), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipInterfaceCacSessionUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceCacSessionUtilLevel.setDescription('Current session utilization level.')
apSipInterfaceCacBurstRateUtilLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 7, 1, 2), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipInterfaceCacBurstRateUtilLevel.setStatus('current')
if mibBuilder.loadTexts: apSipInterfaceCacBurstRateUtilLevel.setDescription('Current burst rate utilization level.')
apSipSaCallInfoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8), )
if mibBuilder.loadTexts: apSipSaCallInfoStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipSaCallInfoStatsTable.setDescription('SIP Session Agent Call Information Stats Table.')
apSipSaCallInfoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8, 1), )
apSipSessionAgentStatsEntry.registerAugmentions(("APSIP-MIB", "apSipSaCallInfoStatsEntry"))
apSipSaCallInfoStatsEntry.setIndexNames(*apSipSessionAgentStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSipSaCallInfoStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipSaCallInfoStatsEntry.setDescription('Call Information Statistics.')
apSipSAStatsTotalCallDurationInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalCallDurationInbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalCallDurationInbound.setDescription('Total Call Duration of Inbound Calls')
apSipSAStatsTotalCallDurationOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalCallDurationOutbound.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalCallDurationOutbound.setDescription('Total Call Duration of Outbound Calls')
apSipSAStatsTotalCallDropsNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalCallDropsNormal.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalCallDropsNormal.setDescription('Total Normal Call drops')
apSipSAStatsTotalCallDropsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 8, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipSAStatsTotalCallDropsLocal.setStatus('current')
if mibBuilder.loadTexts: apSipSAStatsTotalCallDropsLocal.setDescription('Total Local Call drops')
apSigRealmCallInfoStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9), )
if mibBuilder.loadTexts: apSigRealmCallInfoStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCallInfoStatsTable.setDescription('SIP Realm Call Information Stats Table.')
apSigRealmCallInfoStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9, 1), )
apSigRealmStatsEntry.registerAugmentions(("APSIP-MIB", "apSigRealmCallInfoStatsEntry"))
apSigRealmCallInfoStatsEntry.setIndexNames(*apSigRealmStatsEntry.getIndexNames())
if mibBuilder.loadTexts: apSigRealmCallInfoStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSigRealmCallInfoStatsEntry.setDescription('Call Information Statistics.')
apSigRealmStatsTotalCallDurationInbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDurationInbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDurationInbound.setDescription('Total Call Duration of Inbound Calls')
apSigRealmStatsTotalCallDurationOutbound = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDurationOutbound.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDurationOutbound.setDescription('Total Call Duration of Outbound Calls')
apSigRealmStatsTotalCallDropsNormal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDropsNormal.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDropsNormal.setDescription('Total Normal Call drops')
apSigRealmStatsTotalCallDropsLocal = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 9, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDropsLocal.setStatus('current')
if mibBuilder.loadTexts: apSigRealmStatsTotalCallDropsLocal.setDescription('Total Local Call drops')
apSipMethodStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10), )
if mibBuilder.loadTexts: apSipMethodStatsTable.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsTable.setDescription('A table to hold statistics information on SIP method \n\t\tstatistics, indexed by unique integers.\n\t\tThese are all read only.')
apSipMethodStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10, 1), ).setIndexNames((0, "APSIP-MIB", "apSipMethodStatsIndex"), (0, "APSIP-MIB", "apSipMethodStatsTransType"), (0, "APSIP-MIB", "apSipMethodStatsEventCode"))
if mibBuilder.loadTexts: apSipMethodStatsEntry.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsEntry.setDescription('A table entry designed to hold method statistics\n\t\tfor a single method')
apSipMethodStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("invite", 1), ("ack", 2), ("bye", 3), ("register", 4), ("cancel", 5), ("prack", 6), ("options", 7), ("info", 8), ("subscribe", 9), ("notify", 10), ("refer", 11), ("update", 12), ("message", 13), ("publish", 14), ("other", 15))))
if mibBuilder.loadTexts: apSipMethodStatsIndex.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsIndex.setDescription('A monotonically increasing integer for the sole\n\t\tpurpose of indexing sip methods.')
apSipMethodStatsTransType = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("serverTrans", 1), ("clientTrans", 2))))
if mibBuilder.loadTexts: apSipMethodStatsTransType.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsTransType.setDescription('Transaction type for each method')
apSipMethodStatsEventCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54))).clone(namedValues=NamedValues(("event100Trying", 1), ("event180Ringing", 2), ("event181Forwarded", 3), ("event182Queued", 4), ("event183Progress", 5), ("event1xxProvisional", 6), ("event200OK", 7), ("event202Accepted", 8), ("event2xxSuccess", 9), ("event30xMoved", 10), ("event305UseProxy", 11), ("event380Alternative", 12), ("event3xxRedirect", 13), ("event400BadRequest", 14), ("event401Unauthorized", 15), ("event403Forbidden", 16), ("event404NotFound", 17), ("event405NotAllowed", 18), ("event406NotAcceptable", 19), ("event407ProxyAuthReq", 20), ("event408RequestTimeout", 21), ("event415BadMediaType", 22), ("event420BadExtension", 23), ("event421ExtensionReqd", 24), ("event422TooShort", 25), ("event423TooBrief", 26), ("event480Unavailable", 27), ("event481DoesNotExist", 28), ("event482LoopDetected", 29), ("event483TooManyHops", 30), ("event484AddressIncompl", 31), ("event485Ambiguous", 32), ("event486BusyHere", 33), ("event487Terminated", 34), ("event488NotAcceptable", 35), ("event489BadEvent", 36), ("event491ReqPending", 37), ("event4xxClientError", 38), ("event500InternalError", 39), ("event501NotImplemented", 40), ("event502BadGateway", 41), ("event503ServiceUnavail", 42), ("event504GatewayTimeout", 43), ("event513MsgTooLarge", 44), ("event580PreconFailure", 45), ("event5xxServerError", 46), ("event600BusyEverywhere", 47), ("event603Decline", 48), ("event606NotAcceptable", 49), ("event6xxGlobalError", 50), ("eventRequests", 51), ("eventRetransmissions", 52), ("eventResponseRetrans", 53), ("eventTransactionTimeouts", 54))))
if mibBuilder.loadTexts: apSipMethodStatsEventCode.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsEventCode.setDescription('A monotonically increasing integer for all event codes')
apSipMethodStatsEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9148, 3, 15, 1, 2, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: apSipMethodStatsEventCount.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsEventCount.setDescription('The SIP event counter')
apSipCACUtilNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3))
apSipCACUtilNotifObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 1))
apSipCACUtilNotifPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 2))
apSipCACUtilNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 2, 0))
apSipCACUtilTrapType = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 1, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipCACUtilTrapType.setStatus('current')
if mibBuilder.loadTexts: apSipCACUtilTrapType.setDescription('The object ID of the item whose value exceeds its monitoring\n    threshold. It could be the OID of instances of\n    apSipSaCacSessionUtilLevel,\n    apSipSaCacBurstRateUtilLevel,\n    apSipInterfaceCacSessionUtilLevel,\n    apSipInterfaceCacBurstRateUtilLevel,\n    apSigRealmCacSessionUtilLevel, or\n    apSigRealmCacBurstRateUtilLevel.')
apSipCACUtilTrapValue = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 1, 2), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipCACUtilTrapValue.setStatus('current')
if mibBuilder.loadTexts: apSipCACUtilTrapValue.setDescription('The value of the object which causes the trap to occur.')
apSipCACUtilAlertTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 2, 0, 1)).setObjects(("APSIP-MIB", "apSipCACUtilTrapType"), ("APSIP-MIB", "apSipCACUtilTrapValue"))
if mibBuilder.loadTexts: apSipCACUtilAlertTrap.setStatus('current')
if mibBuilder.loadTexts: apSipCACUtilAlertTrap.setDescription(' The trap will be generated if the item indicated by\n          apSipCACUtilTrapType with value indicated by\n          apSipCACUtilTrapValue exceeds the monitoring threshold. ')
apSipCACUtilClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 2, 3, 2, 0, 2)).setObjects(("APSIP-MIB", "apSipCACUtilTrapType"), ("APSIP-MIB", "apSipCACUtilTrapValue"))
if mibBuilder.loadTexts: apSipCACUtilClearTrap.setStatus('current')
if mibBuilder.loadTexts: apSipCACUtilClearTrap.setDescription(' The trap will be generated if the item indicated by\n          apSipCACUtilTrapType with value indicated by\n          apSipCACUtilTrapValue is below the monitoring threshold. ')
apSipCACStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 3)).setObjects(("APSIP-MIB", "apSipSaCacSessionUtilLevel"), ("APSIP-MIB", "apSipSaCacBurstRateUtilLevel"), ("APSIP-MIB", "apSigRealmCacSessionUtilLevel"), ("APSIP-MIB", "apSigRealmCacBurstRateUtilLevel"), ("APSIP-MIB", "apSipInterfaceCacSessionUtilLevel"), ("APSIP-MIB", "apSipInterfaceCacBurstRateUtilLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipCACStatsGroup = apSipCACStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipCACStatsGroup.setDescription('A collection of objects providing sip rate stats.')
apSipCACStatsSubGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 4)).setObjects(("APSIP-MIB", "apSipSaCacSessionUtilLevel"), ("APSIP-MIB", "apSipSaCacBurstRateUtilLevel"), ("APSIP-MIB", "apSigRealmCacSessionUtilLevel"), ("APSIP-MIB", "apSigRealmCacBurstRateUtilLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipCACStatsSubGroup = apSipCACStatsSubGroup.setStatus('current')
if mibBuilder.loadTexts: apSipCACStatsSubGroup.setDescription('A collection of objects providing sip rate stats without\n\t\tobjects from apSipInterfaceCacStatsTable.')
apSipAudioVideoCallsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 5)).setObjects(("APSIP-MIB", "apSIPVideoCallsActive"), ("APSIP-MIB", "apSIPAudioCallsActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipAudioVideoCallsGroup = apSipAudioVideoCallsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipAudioVideoCallsGroup.setDescription('Objects for SIP Audio/Video calls.')
apSipSRVCCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 6)).setObjects(("APSIP-MIB", "apSipSRVCCStatsTotalSuccess"), ("APSIP-MIB", "apSipSRVCCStatsTotalFailed"), ("APSIP-MIB", "apSipSRVCCStatsTotalCallsAfterAnswer"), ("APSIP-MIB", "apSipSRVCCStatsAfterAnswerSuccess"), ("APSIP-MIB", "apSipSRVCCStatsAfterAnswerFailed"), ("APSIP-MIB", "apSipSRVCCStatsTotalCallsDuringAlerting"), ("APSIP-MIB", "apSipSRVCCStatsDuringAlertingSuccess"), ("APSIP-MIB", "apSipSRVCCStatsDuringAlertingFailed"), ("APSIP-MIB", "apSipSRVCCStatsAtcfCancel"), ("APSIP-MIB", "apSipSRVCCStatsEmergencySuccess"), ("APSIP-MIB", "apSipSRVCCStatsEmergencyFailed"), ("APSIP-MIB", "apSipSRVCCStatsEatfCancel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipSRVCCStatsGroup = apSipSRVCCStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCStatsGroup.setDescription('A collection of objects providing SIP SRVCC stats')
apSipCallDurationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 7)).setObjects(("APSIP-MIB", "apSipSAStatsTotalCallDurationInbound"), ("APSIP-MIB", "apSipSAStatsTotalCallDurationOutbound"), ("APSIP-MIB", "apSigRealmStatsTotalCallDurationInbound"), ("APSIP-MIB", "apSigRealmStatsTotalCallDurationOutbound"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipCallDurationGroup = apSipCallDurationGroup.setStatus('current')
if mibBuilder.loadTexts: apSipCallDurationGroup.setDescription('A collection of call duration statistics.')
apSipCallDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 8)).setObjects(("APSIP-MIB", "apSipSAStatsTotalCallDropsNormal"), ("APSIP-MIB", "apSipSAStatsTotalCallDropsLocal"), ("APSIP-MIB", "apSigRealmStatsTotalCallDropsNormal"), ("APSIP-MIB", "apSigRealmStatsTotalCallDropsLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipCallDropGroup = apSipCallDropGroup.setStatus('current')
if mibBuilder.loadTexts: apSipCallDropGroup.setDescription('A collection of call drop statistics.')
apSipMethodStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 9)).setObjects(("APSIP-MIB", "apSipMethodStatsEventCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipMethodStatsGroup = apSipMethodStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipMethodStatsGroup.setDescription('A collection of sip method statistics.')
apSipSRVCCPreAlertingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 10)).setObjects(("APSIP-MIB", "apSipSRVCCStatsTotalCallsDuringPreAlerting"), ("APSIP-MIB", "apSipSRVCCStatsDuringPreAlertingSuccess"), ("APSIP-MIB", "apSipSRVCCStatsDuringPreAlertingFailed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipSRVCCPreAlertingStatsGroup = apSipSRVCCPreAlertingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipSRVCCPreAlertingStatsGroup.setDescription('A collection of objects providing SIP SRVCC stats')
apSipRegEvtSubStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 11)).setObjects(("APSIP-MIB", "apSipStatsActiveSubsRegEvt"), ("APSIP-MIB", "apSipStatsPerMaxSubsRegEvt"), ("APSIP-MIB", "apSipStatsMaxActiveSubsRegEvt"), ("APSIP-MIB", "apSipStatsTotalSubsRegEvt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipRegEvtSubStatsGroup = apSipRegEvtSubStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipRegEvtSubStatsGroup.setDescription('A collection of objects providing SIP Reg Event Subscription stats.')
apSipMSRPStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 1, 12)).setObjects(("APSIP-MIB", "apSipMSRPFdTableSize"), ("APSIP-MIB", "apSipMSRPSessionIdTableSize"), ("APSIP-MIB", "apSipMSRPActiveSessions"), ("APSIP-MIB", "apSipMSRPMaxActiveSessions"), ("APSIP-MIB", "apSipMSRPEstablishedSessions"), ("APSIP-MIB", "apSipMSRPProvisionedSessions"), ("APSIP-MIB", "apSipMSRPFinishedSessions"), ("APSIP-MIB", "apSipMSRPAcceptedConnections"), ("APSIP-MIB", "apSipMSRPConnectedConnections"), ("APSIP-MIB", "apSipMSRPReleasedConnections"), ("APSIP-MIB", "apSipMSRPStreamRequestReceived"), ("APSIP-MIB", "apSipMSRPStreamRequestSent"), ("APSIP-MIB", "apSipMSRPStreamResponseReceived"), ("APSIP-MIB", "apSipMSRPStreamResponseSent"), ("APSIP-MIB", "apSipMSRPGlobalBufferedData"), ("APSIP-MIB", "apSipMSRPFlowAdd"), ("APSIP-MIB", "apSipMSRPFlowDelete"), ("APSIP-MIB", "apSipMSRPFailedSessionsCannotRoute"), ("APSIP-MIB", "apSipMSRPFailedSessionsCannotConnect"), ("APSIP-MIB", "apSipMSRPFailedSessionsFingerprintMismatch"), ("APSIP-MIB", "apSipMSRPFailedMessagesCannotBeSent"), ("APSIP-MIB", "apSipMSRPFailedMessagesMalformed"), ("APSIP-MIB", "apSipMSRPSendQFullEvents"), ("APSIP-MIB", "apSipMSRPSendQCongestedEvents"), ("APSIP-MIB", "apSipMSRPSendQCongestionRelievedEvents"), ("APSIP-MIB", "apSipMSRPStreamErrorNoTransId"), ("APSIP-MIB", "apSipMSRPStreamErrorNoMsgType"), ("APSIP-MIB", "apSipMSRPStreamErrorNoByteLength"), ("APSIP-MIB", "apSipMSRPBufferLimitExceeded"), ("APSIP-MIB", "apSipMSRPFailedConnectionInit"), ("APSIP-MIB", "apSipMSRPSessReprovMismatch"), ("APSIP-MIB", "apSipMSRPTcpListenErrors"), ("APSIP-MIB", "apSipMSRPTcpConnectError"), ("APSIP-MIB", "apSipMSRPTcpError"), ("APSIP-MIB", "apSipMSRPNoFromHeaderSessionID"), ("APSIP-MIB", "apSipMSRPNoFromHeader"), ("APSIP-MIB", "apSipMSRPFromHdrAddrParseError"), ("APSIP-MIB", "apSipMSRPNoFromHdrAddr"), ("APSIP-MIB", "apSipMSRPNoFromHdrPort"), ("APSIP-MIB", "apSipMSRPNoFromHdrAuthority"), ("APSIP-MIB", "apSipMSRPFromHdrSrvMismatch"), ("APSIP-MIB", "apSipMSRPSendFailNoDestFd"), ("APSIP-MIB", "apSipMSRPSendFailedNoDstSession"), ("APSIP-MIB", "apSipMSRPNoToHeaderSessionID"), ("APSIP-MIB", "apSipMSRPNoToHeader"), ("APSIP-MIB", "apSipMSRPToHdrAddrParseError"), ("APSIP-MIB", "apSipMSRPNoToHdrAddr"), ("APSIP-MIB", "apSipMSRPNoToHdrPort"), ("APSIP-MIB", "apSipMSRPNoToHdrAuthority"), ("APSIP-MIB", "apSipMSRPToHdrSrvMismatch"), ("APSIP-MIB", "apSipMSRPNoDestFdEntry"), ("APSIP-MIB", "apSipMSRPTcpSendFailure"), ("APSIP-MIB", "apSipMSRPFdTableInsertErrorCollision"), ("APSIP-MIB", "apSipMSRPFdTableInsertErrorNoData"), ("APSIP-MIB", "apSipMSRPFdTableInsertErrorMemory"), ("APSIP-MIB", "apSipMSRPFdTableInsertErrorMaxHops"), ("APSIP-MIB", "apSipMSRPFdTableInsertErrorBad"), ("APSIP-MIB", "apSipMSRPSessionTableInsertErrorCollision"), ("APSIP-MIB", "apSipMSRPSessionTableInsertErrorNoData"), ("APSIP-MIB", "apSipMSRPSessionTableInsertErrorMemory"), ("APSIP-MIB", "apSipMSRPSessionTableInsertErrorMaxHops"), ("APSIP-MIB", "apSipMSRPSessionTableInsertErrorBad"), ("APSIP-MIB", "apSipMSRPFlowToSessionTableInsertError"), ("APSIP-MIB", "apSipMSRPNumPreProvSessions"), ("APSIP-MIB", "apSipMSRPNumPreProvMessages"), ("APSIP-MIB", "apSipMSRPConnectionStateNoSession"), ("APSIP-MIB", "apSipMSRPConnectionStateListening"), ("APSIP-MIB", "apSipMSRPConnectionStatePending"), ("APSIP-MIB", "apSipMSRPConnectionStateConnecting"), ("APSIP-MIB", "apSipMSRPConnectionStateConnected"), ("APSIP-MIB", "apSipMSRPConnectionStateEstablished"), ("APSIP-MIB", "apSipMSRPConnectionStateFinished"), ("APSIP-MIB", "apSipMSRPConnectionStateReleased"), ("APSIP-MIB", "apSipMSRPUnqualifiedConnections"), ("APSIP-MIB", "apSipMSRPSessionStateNone"), ("APSIP-MIB", "apSipMSRPSessionStateListening"), ("APSIP-MIB", "apSipMSRPSessionStatePreProvisioned"), ("APSIP-MIB", "apSipMSRPSessionStateProvisioned"), ("APSIP-MIB", "apSipMSRPSessionStateEstablished"), ("APSIP-MIB", "apSipMSRPSessionStateFinished"), ("APSIP-MIB", "apSipMSRPClosedFdTableSize"), ("APSIP-MIB", "apSipMSRPClosedFdTableInsertErrors"), ("APSIP-MIB", "apSipMSRPNumFdForcedReleases"), ("APSIP-MIB", "apSipMSRPNumForcedReleasedListenFdNotFound"), ("APSIP-MIB", "apSipMSRPNumForcedReleasedForkedFdNotFound"), ("APSIP-MIB", "apSipMSRPNumListenFdForcedReleased"), ("APSIP-MIB", "apSipMSRPRequestBytesReceived"), ("APSIP-MIB", "apSipMSRPRequestBytesSent"), ("APSIP-MIB", "apSipMSRPResponseBytesReceived"), ("APSIP-MIB", "apSipMSRPResponseBytesSent"), ("APSIP-MIB", "apSipMSRPUnqualifiedClose"), ("APSIP-MIB", "apSipMSRPUnconnectedClose"), ("APSIP-MIB", "apSipMSRPAcceptErrorClose"), ("APSIP-MIB", "apSipMSRPPreProvisionClose"), ("APSIP-MIB", "apSipMSRPReadErrorClose"), ("APSIP-MIB", "apSipMSRPStreamErrorClose"), ("APSIP-MIB", "apSipMSRPBufferClose"), ("APSIP-MIB", "apSipMSRPReleaseNotificationFailures"), ("APSIP-MIB", "apSipMSRPReleaseNotificationUnsentNoId"), ("APSIP-MIB", "apSipMSRPReleaseNotificationUnsentNoFd"), ("APSIP-MIB", "apSipMSRPReleaseNotificationUnsentNoListenFd"), ("APSIP-MIB", "apSipMSRPAcceptedConnectionsCema"), ("APSIP-MIB", "apSipMSRPConnectedConnectionsCema"), ("APSIP-MIB", "apSipMSRPActiveCemaSessions"), ("APSIP-MIB", "apSipMSRPEstablishedSessionsSessmatch"), ("APSIP-MIB", "apSipMSRPProvisionedSessionsSessmatch"), ("APSIP-MIB", "apSipMSRPActiveSessmatchSessions"), ("APSIP-MIB", "apSipMSRPMessageFromHost"), ("APSIP-MIB", "apSipMSRPMessageToHost"), ("APSIP-MIB", "apSipMSRPMessageToHostFail"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipMSRPStatsGroup = apSipMSRPStatsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipMSRPStatsGroup.setDescription('A collection of objects providing MSRP stats.\n                 Please note that the actual object counter in PNF platform is 32-bit long \n                 while it is 64-bit long in VNF platform.\n                 To make object counter type uniform across PNF and VNF platforms\n                 it is defined as 64-bit long.')
apSipCACNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 2, 3)).setObjects(("APSIP-MIB", "apSipCACUtilAlertTrap"), ("APSIP-MIB", "apSipCACUtilClearTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipCACNotificationsGroup = apSipCACNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipCACNotificationsGroup.setDescription('Traps to monitor SIP CAC utilization.')
apSipRecModule = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4))
apSipRecNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1))
apSipRecNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 0))
apSipRecNotifyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1))
apSipRecRecDlgCallIdHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecRecDlgCallIdHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecRecDlgCallIdHeader.setDescription('Call-ID header value for Recording Dialog')
apSipRecRecDlgToHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecRecDlgToHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecRecDlgToHeader.setDescription('To header value for Recording Dialog')
apSipRecRecDlgFromHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecRecDlgFromHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecRecDlgFromHeader.setDescription('From header value for Recording Dialog')
apSipRecCommSessCallIdHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecCommSessCallIdHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecCommSessCallIdHeader.setDescription('Call-ID header value for Communications Session Server Dialog')
apSipRecCommSessToHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecCommSessToHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecCommSessToHeader.setDescription('To header value for Communications Session Server Dialog')
apSipRecCommSessFromHeader = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apSipRecCommSessFromHeader.setStatus('current')
if mibBuilder.loadTexts: apSipRecCommSessFromHeader.setDescription('From header value for Communications Session Server Dialog')
apSipRecRecDlgFailNotify = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 0, 1)).setObjects(("APSIP-MIB", "apSipRecRecDlgCallIdHeader"), ("APSIP-MIB", "apSipRecRecDlgToHeader"), ("APSIP-MIB", "apSipRecRecDlgFromHeader"))
if mibBuilder.loadTexts: apSipRecRecDlgFailNotify.setStatus('current')
if mibBuilder.loadTexts: apSipRecRecDlgFailNotify.setDescription(' This trap will be generated when a Recording Dialog fails to send a timely\n\t\tresponse to a requests, typically an in-dialog OPTIONS request.')
apSipRecCommSessionNotify = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 15, 4, 1, 0, 2)).setObjects(("APSIP-MIB", "apSipRecCommSessCallIdHeader"), ("APSIP-MIB", "apSipRecCommSessToHeader"), ("APSIP-MIB", "apSipRecCommSessFromHeader"))
if mibBuilder.loadTexts: apSipRecCommSessionNotify.setStatus('current')
if mibBuilder.loadTexts: apSipRecCommSessionNotify.setDescription(' This trap will be generated when a Communications Session is terminated\n\t\tbecause a recording dialog could not be established or prematurely terminated.')
apSipRecNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 15, 3, 2, 4)).setObjects(("APSIP-MIB", "apSipRecRecDlgFailNotify"), ("APSIP-MIB", "apSipRecCommSessionNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apSipRecNotificationsGroup = apSipRecNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apSipRecNotificationsGroup.setDescription(' This notification group contains traps specific to SIPREC recording.')
mibBuilder.exportSymbols("APSIP-MIB", apSipRateIntfMsgRcvd=apSipRateIntfMsgRcvd, apSipRecCommSessCallIdHeader=apSipRecCommSessCallIdHeader, apSipSAStatsTotalCallDropsLocal=apSipSAStatsTotalCallDropsLocal, apSipCACUtilAlertTrap=apSipCACUtilAlertTrap, apSipMSRPNoToHeader=apSipMSRPNoToHeader, apSipMSRPReleasedConnections=apSipMSRPReleasedConnections, apSipMSRPStreamResponseSent=apSipMSRPStreamResponseSent, apSipAudioVideoCallsObjects=apSipAudioVideoCallsObjects, apSipMSRPGlobalBufferedData=apSipMSRPGlobalBufferedData, apSipMSRPNoFromHeader=apSipMSRPNoFromHeader, apSipMSRPNoFromHdrPort=apSipMSRPNoFromHdrPort, apSipMSRPFlowDelete=apSipMSRPFlowDelete, apSipMSRPConnectionStateConnected=apSipMSRPConnectionStateConnected, apSipRateIntfRspSent=apSipRateIntfRspSent, apSipCallDropGroup=apSipCallDropGroup, apSipSRVCCStatsTotalFailed=apSipSRVCCStatsTotalFailed, apSigRealmCallInfoStatsEntry=apSigRealmCallInfoStatsEntry, apSipMSRPSessionStateFinished=apSipMSRPSessionStateFinished, apSipRateAgentRspSent=apSipRateAgentRspSent, apSipCACUtilNotifPrefix=apSipCACUtilNotifPrefix, apSipCACUtilTrapType=apSipCACUtilTrapType, apSipAgentStatsMethod=apSipAgentStatsMethod, apSipMSRPSessionTableInsertErrorBad=apSipMSRPSessionTableInsertErrorBad, apSipCACUtilNotif=apSipCACUtilNotif, apSipSRVCCStatsDuringAlertingFailed=apSipSRVCCStatsDuringAlertingFailed, apSipRateAgentRspRcvd=apSipRateAgentRspRcvd, apSipCACUtilNotifications=apSipCACUtilNotifications, apSipRecCommSessionNotify=apSipRecCommSessionNotify, apSipMSRPFdTableInsertErrorCollision=apSipMSRPFdTableInsertErrorCollision, apSipMSRPNoToHdrAddr=apSipMSRPNoToHdrAddr, apSipMSRPSessionTableInsertErrorMemory=apSipMSRPSessionTableInsertErrorMemory, apSipRegEvtSubStatsGroup=apSipRegEvtSubStatsGroup, apSipSRVCCStatsObjects=apSipSRVCCStatsObjects, apSipMSRPSessionIdTableSize=apSipMSRPSessionIdTableSize, apSipMSRPSendFailNoDestFd=apSipMSRPSendFailNoDestFd, apSipMSRPFdTableInsertErrorNoData=apSipMSRPFdTableInsertErrorNoData, apSipMSRPReadErrorClose=apSipMSRPReadErrorClose, apSipMSRPReleaseNotificationUnsentNoListenFd=apSipMSRPReleaseNotificationUnsentNoListenFd, apSipRateStatsGroup=apSipRateStatsGroup, apSipMSRPSendQCongestedEvents=apSipMSRPSendQCongestedEvents, apSipMSRPConnectionStatePending=apSipMSRPConnectionStatePending, apSipRateAgentReqSent=apSipRateAgentReqSent, apSipMSRPSessionStateProvisioned=apSipMSRPSessionStateProvisioned, apSipSAStatsTotalCallDurationOutbound=apSipSAStatsTotalCallDurationOutbound, apSipConformance=apSipConformance, apSipInterfaceTable=apSipInterfaceTable, apSipSRVCCStatsAfterAnswerFailed=apSipSRVCCStatsAfterAnswerFailed, apSipSRVCCStatsAfterAnswerSuccess=apSipSRVCCStatsAfterAnswerSuccess, apSipMethodStatsGroup=apSipMethodStatsGroup, apSipRateIntfMsgSent=apSipRateIntfMsgSent, apSipMSRPReleaseNotificationFailures=apSipMSRPReleaseNotificationFailures, apSipAgentName=apSipAgentName, apSipSRVCCStatsDuringPreAlertingFailed=apSipSRVCCStatsDuringPreAlertingFailed, apSipSurvivabilityNotifications=apSipSurvivabilityNotifications, apSipMSRPStreamRequestReceived=apSipMSRPStreamRequestReceived, apSipMSRPFinishedSessions=apSipMSRPFinishedSessions, apSipSRVCCStatsTotalCallsDuringAlerting=apSipSRVCCStatsTotalCallsDuringAlerting, apSipMSRPClosedFdTableSize=apSipMSRPClosedFdTableSize, apSipSRVCCStatsTotalCallsAfterAnswer=apSipSRVCCStatsTotalCallsAfterAnswer, apSipMSRPBufferClose=apSipMSRPBufferClose, apSipCACStatsSubGroup=apSipCACStatsSubGroup, apSipMSRPNumPreProvSessions=apSipMSRPNumPreProvSessions, apSipSRVCCStatsEmergencyFailed=apSipSRVCCStatsEmergencyFailed, apSipMSRPFailedSessionsFingerprintMismatch=apSipMSRPFailedSessionsFingerprintMismatch, apSipMSRPStreamErrorNoMsgType=apSipMSRPStreamErrorNoMsgType, apSipMSRPFromHdrSrvMismatch=apSipMSRPFromHdrSrvMismatch, apSipAgentTable=apSipAgentTable, apSipSaCacStatsEntry=apSipSaCacStatsEntry, apSipMSRPFdTableSize=apSipMSRPFdTableSize, apSipMSRPSessReprovMismatch=apSipMSRPSessReprovMismatch, apSipMSRPFlowToSessionTableInsertError=apSipMSRPFlowToSessionTableInsertError, apSipSRVCCPreAlertingStatsGroup=apSipSRVCCPreAlertingStatsGroup, apSipMSRPConnectedConnections=apSipMSRPConnectedConnections, apSipMSRPStatsObjects=apSipMSRPStatsObjects, apSIPVideoCallsActive=apSIPVideoCallsActive, apSipMSRPTcpListenErrors=apSipMSRPTcpListenErrors, apSipMSRPConnectionStateFinished=apSipMSRPConnectionStateFinished, PYSNMP_MODULE_ID=apSipModule, apSipStatsActiveSubsRegEvt=apSipStatsActiveSubsRegEvt, apSipSecInterfaceObjects=apSipSecInterfaceObjects, apSipMSRPReleaseNotificationUnsentNoId=apSipMSRPReleaseNotificationUnsentNoId, apSipMSRPReleaseNotificationUnsentNoFd=apSipMSRPReleaseNotificationUnsentNoFd, apSipMSRPActiveSessmatchSessions=apSipMSRPActiveSessmatchSessions, apSipSurvivabilityModeEnter=apSipSurvivabilityModeEnter, apSipStatsTotalSubsRegEvt=apSipStatsTotalSubsRegEvt, apSipSRVCCStatsDuringAlertingSuccess=apSipSRVCCStatsDuringAlertingSuccess, apSipMSRPStreamRequestSent=apSipMSRPStreamRequestSent, apSipMSRPSendQFullEvents=apSipMSRPSendQFullEvents, apSipMSRPFromHdrAddrParseError=apSipMSRPFromHdrAddrParseError, apSipMSRPProvisionedSessions=apSipMSRPProvisionedSessions, apSigRealmCacStatsTable=apSigRealmCacStatsTable, apSipMSRPStatsGroup=apSipMSRPStatsGroup, apSipRateIntfReqSent=apSipRateIntfReqSent, apSipRateIntfRspRcvd=apSipRateIntfRspRcvd, apSipSecInterfaceRegObjectsGroup=apSipSecInterfaceRegObjectsGroup, apSipInterfaceCacStatsTable=apSipInterfaceCacStatsTable, apSipMethodStatsEventCount=apSipMethodStatsEventCount, apSipMIBGeneralObjects=apSipMIBGeneralObjects, apSigRealmCacStatsEntry=apSigRealmCacStatsEntry, apSipSRVCCStatsTotalCallsDuringPreAlerting=apSipSRVCCStatsTotalCallsDuringPreAlerting, apSipMSRPNumForcedReleasedForkedFdNotFound=apSipMSRPNumForcedReleasedForkedFdNotFound, apSipMIBTabularObjects=apSipMIBTabularObjects, apSipRecModule=apSipRecModule, apSipMSRPSessionTableInsertErrorMaxHops=apSipMSRPSessionTableInsertErrorMaxHops, apSipSurvivabilityNotificationsGroup=apSipSurvivabilityNotificationsGroup, apSipMethodStatsEntry=apSipMethodStatsEntry, apSipMSRPRequestBytesSent=apSipMSRPRequestBytesSent, apSipMSRPConnectionStateNoSession=apSipMSRPConnectionStateNoSession, apSipMSRPMessageToHost=apSipMSRPMessageToHost, apSipMSRPClosedFdTableInsertErrors=apSipMSRPClosedFdTableInsertErrors, apSipMethodStatsIndex=apSipMethodStatsIndex, apSipSecInterfaceRegThresholdExceededTrap=apSipSecInterfaceRegThresholdExceededTrap, apSipRecRecDlgCallIdHeader=apSipRecRecDlgCallIdHeader, apSipInterfaceCacStatsEntry=apSipInterfaceCacStatsEntry, apSipMSRPNumListenFdForcedReleased=apSipMSRPNumListenFdForcedReleased, apSipNotificationObjects=apSipNotificationObjects, apSipSAStatsTotalCallDurationInbound=apSipSAStatsTotalCallDurationInbound, apSipMSRPSessionStatePreProvisioned=apSipMSRPSessionStatePreProvisioned, apSipSAStatsTotalCallDropsNormal=apSipSAStatsTotalCallDropsNormal, apSipRecNotificationPrefix=apSipRecNotificationPrefix, apSipRecCommSessFromHeader=apSipRecCommSessFromHeader, apSipMSRPStreamErrorClose=apSipMSRPStreamErrorClose, apSipMSRPAcceptedConnectionsCema=apSipMSRPAcceptedConnectionsCema, apSipMSRPUnconnectedClose=apSipMSRPUnconnectedClose, apSipRateAgentMsgSent=apSipRateAgentMsgSent, apSipMSRPSessionStateListening=apSipMSRPSessionStateListening, apSipRateAgentReqRcvd=apSipRateAgentReqRcvd, apSipMSRPFailedMessagesMalformed=apSipMSRPFailedMessagesMalformed, apSipRecNotifications=apSipRecNotifications, apSipSecInterfaceNotifications=apSipSecInterfaceNotifications, apSipMSRPUnqualifiedConnections=apSipMSRPUnqualifiedConnections, apSipMSRPSessionStateNone=apSipMSRPSessionStateNone, apSipMSRPFdTableInsertErrorMaxHops=apSipMSRPFdTableInsertErrorMaxHops, apSipRateIntfReqRcvd=apSipRateIntfReqRcvd, apSipMSRPNoFromHdrAddr=apSipMSRPNoFromHdrAddr, apSipMSRPFailedConnectionInit=apSipMSRPFailedConnectionInit, apSIPAudioCallsActive=apSIPAudioCallsActive, apSipRecNotificationsGroup=apSipRecNotificationsGroup, apSipMSRPToHdrAddrParseError=apSipMSRPToHdrAddrParseError, apSipMSRPActiveCemaSessions=apSipMSRPActiveCemaSessions, apSipMSRPFdTableInsertErrorBad=apSipMSRPFdTableInsertErrorBad, apSipRecRecDlgToHeader=apSipRecRecDlgToHeader, apSipMSRPSessionTableInsertErrorCollision=apSipMSRPSessionTableInsertErrorCollision, apSipMSRPNoDestFdEntry=apSipMSRPNoDestFdEntry, apSipMSRPEstablishedSessions=apSipMSRPEstablishedSessions, apSipSurvivabilityNotifObjects=apSipSurvivabilityNotifObjects, apSipSecInterfaceRegThreshold=apSipSecInterfaceRegThreshold, apSipMSRPSendQCongestionRelievedEvents=apSipMSRPSendQCongestionRelievedEvents, apSipMethodStatsTransType=apSipMethodStatsTransType, apSipMSRPTcpSendFailure=apSipMSRPTcpSendFailure, apSipRateIntfStatsTable=apSipRateIntfStatsTable, apSipMSRPPreProvisionClose=apSipMSRPPreProvisionClose, apSipAgentIndex=apSipAgentIndex, apSipRateAgentStatsEntry=apSipRateAgentStatsEntry, apSigRealmCallInfoStatsTable=apSigRealmCallInfoStatsTable, apSigRealmStatsTotalCallDropsLocal=apSigRealmStatsTotalCallDropsLocal, apSipMethodStatsEventCode=apSipMethodStatsEventCode, apSipMSRPFdTableInsertErrorMemory=apSipMSRPFdTableInsertErrorMemory, apSipMSRPStreamErrorNoByteLength=apSipMSRPStreamErrorNoByteLength, apSipMIBObjects=apSipMIBObjects, apSipSurvivabilityModeExit=apSipSurvivabilityModeExit, apSipSecInterfaceRegNotificationsGroup=apSipSecInterfaceRegNotificationsGroup, apSipMSRPResponseBytesReceived=apSipMSRPResponseBytesReceived, apSipSRVCCStatsEmergencySuccess=apSipSRVCCStatsEmergencySuccess, apSipMSRPNoToHdrAuthority=apSipMSRPNoToHdrAuthority, apSipMSRPStreamErrorNoTransId=apSipMSRPStreamErrorNoTransId, apSipMSRPMaxActiveSessions=apSipMSRPMaxActiveSessions, apSipMSRPNumForcedReleasedListenFdNotFound=apSipMSRPNumForcedReleasedListenFdNotFound, apSipMSRPAcceptErrorClose=apSipMSRPAcceptErrorClose, apSipSaCallInfoStatsEntry=apSipSaCallInfoStatsEntry, apSipStatsMaxActiveSubsRegEvt=apSipStatsMaxActiveSubsRegEvt, apSipNotificationGroups=apSipNotificationGroups, apSigRealmCacSessionUtilLevel=apSigRealmCacSessionUtilLevel, apSipMSRPSessionStateEstablished=apSipMSRPSessionStateEstablished, apSipMSRPTcpError=apSipMSRPTcpError, apSipSaCacBurstRateUtilLevel=apSipSaCacBurstRateUtilLevel, apSipSecIntfNotifObjects=apSipSecIntfNotifObjects, apSipCACUtilClearTrap=apSipCACUtilClearTrap, apSipMSRPNoToHdrPort=apSipMSRPNoToHdrPort, apSipSRVCCStatsEatfCancel=apSipSRVCCStatsEatfCancel, apSipInterfaceEntry=apSipInterfaceEntry, apSipMSRPNoToHeaderSessionID=apSipMSRPNoToHeaderSessionID, apSipObjectGroups=apSipObjectGroups, apSipSurvivabilityNotif=apSipSurvivabilityNotif, apSipMSRPStreamResponseReceived=apSipMSRPStreamResponseReceived, apSipInterfaceCacSessionUtilLevel=apSipInterfaceCacSessionUtilLevel, apSipMSRPFailedSessionsCannotRoute=apSipMSRPFailedSessionsCannotRoute, apSipMSRPNoFromHeaderSessionID=apSipMSRPNoFromHeaderSessionID, apSipMSRPMessageFromHost=apSipMSRPMessageFromHost, apSigRealmCacBurstRateUtilLevel=apSigRealmCacBurstRateUtilLevel, apSipMSRPRequestBytesReceived=apSipMSRPRequestBytesReceived, apSipSaCacSessionUtilLevel=apSipSaCacSessionUtilLevel, apSipCallDurationGroup=apSipCallDurationGroup, apSipMSRPUnqualifiedClose=apSipMSRPUnqualifiedClose, apSipMSRPConnectionStateEstablished=apSipMSRPConnectionStateEstablished, apSipMSRPToHdrSrvMismatch=apSipMSRPToHdrSrvMismatch, apSipMSRPFailedMessagesCannotBeSent=apSipMSRPFailedMessagesCannotBeSent, apSipInterfaceRealm=apSipInterfaceRealm, apSipRecNotifyObjects=apSipRecNotifyObjects, apSipMSRPActiveSessions=apSipMSRPActiveSessions, apSipRateAgentStatsTable=apSipRateAgentStatsTable, apSipMSRPBufferLimitExceeded=apSipMSRPBufferLimitExceeded, apSipRateIntfStatsEntry=apSipRateIntfStatsEntry, apSipMSRPFailedSessionsCannotConnect=apSipMSRPFailedSessionsCannotConnect, apSipSecIntfNotifPrefix=apSipSecIntfNotifPrefix, apSipCACStatsGroup=apSipCACStatsGroup, apSipMSRPNoFromHdrAuthority=apSipMSRPNoFromHdrAuthority, apSipMethodStatsTable=apSipMethodStatsTable, apSipInterfaceIndex=apSipInterfaceIndex, apSipSRVCCStatsGroup=apSipSRVCCStatsGroup, apSipSRVCCStatsDuringPreAlertingSuccess=apSipSRVCCStatsDuringPreAlertingSuccess, apSipSRVCCStatsAtcfCancel=apSipSRVCCStatsAtcfCancel, apSipSecInterfaceRegThresholdClearTrap=apSipSecInterfaceRegThresholdClearTrap, apSipAgentEntry=apSipAgentEntry, apSipSaCacStatsTable=apSipSaCacStatsTable, apSipCACNotificationsGroup=apSipCACNotificationsGroup, apSipMSRPConnectionStateReleased=apSipMSRPConnectionStateReleased, apSipMSRPMessageToHostFail=apSipMSRPMessageToHostFail, apSigRealmStatsTotalCallDurationInbound=apSigRealmStatsTotalCallDurationInbound, apSipMSRPNumFdForcedReleases=apSipMSRPNumFdForcedReleases, apSipMSRPSendFailedNoDstSession=apSipMSRPSendFailedNoDstSession, apSipSurvivabilityNotifPrefix=apSipSurvivabilityNotifPrefix, apSipStatsPerMaxSubsRegEvt=apSipStatsPerMaxSubsRegEvt, apSipSecIntfNotifications=apSipSecIntfNotifications, apSigRealmStatsTotalCallDurationOutbound=apSigRealmStatsTotalCallDurationOutbound, apSipRateIntfMethod=apSipRateIntfMethod, apSipMSRPNumPreProvMessages=apSipMSRPNumPreProvMessages, apSipMSRPAcceptedConnections=apSipMSRPAcceptedConnections, apSigRealmStatsTotalCallDropsNormal=apSigRealmStatsTotalCallDropsNormal, apSipModule=apSipModule, apSipMSRPFlowAdd=apSipMSRPFlowAdd, apSipMSRPConnectionStateConnecting=apSipMSRPConnectionStateConnecting, apSipRecRecDlgFailNotify=apSipRecRecDlgFailNotify, apSipMSRPConnectedConnectionsCema=apSipMSRPConnectedConnectionsCema, apSipSecInterfaceTotalRegistrations=apSipSecInterfaceTotalRegistrations, apSipMSRPEstablishedSessionsSessmatch=apSipMSRPEstablishedSessionsSessmatch, apSipAudioVideoCallsGroup=apSipAudioVideoCallsGroup, apSipSRVCCStatsTotalSuccess=apSipSRVCCStatsTotalSuccess, apSipCACUtilNotifObjects=apSipCACUtilNotifObjects, apSipMSRPResponseBytesSent=apSipMSRPResponseBytesSent, apSipRecRecDlgFromHeader=apSipRecRecDlgFromHeader, apSipRateAgentMsgRcvd=apSipRateAgentMsgRcvd, apSipMSRPSessionTableInsertErrorNoData=apSipMSRPSessionTableInsertErrorNoData, apSipInterfaceCacBurstRateUtilLevel=apSipInterfaceCacBurstRateUtilLevel, apSipSaCallInfoStatsTable=apSipSaCallInfoStatsTable, apSipSecInterfaceClearThreshold=apSipSecInterfaceClearThreshold, apSipMSRPTcpConnectError=apSipMSRPTcpConnectError, apSipCACUtilTrapValue=apSipCACUtilTrapValue, apSipRegEvtSubStatsObjects=apSipRegEvtSubStatsObjects, apSipRecCommSessToHeader=apSipRecCommSessToHeader, apSipMSRPProvisionedSessionsSessmatch=apSipMSRPProvisionedSessionsSessmatch, apSipMSRPConnectionStateListening=apSipMSRPConnectionStateListening)
