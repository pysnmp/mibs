#
# PySNMP MIB module PEAKFLOW-SP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/arbornet/ARBORNET-PEAKFLOW-SP-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 13:02:42 2024
# On host fv-az1249-950 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
arbornetworksProducts, = mibBuilder.importSymbols("ARBOR-SMI", "arbornetworksProducts")
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
pdosAnomalyDirection, pdosAnomalyClassification, pdosAnomalyDuration, pdosUrl, pdosAnomalyStart = mibBuilder.importSymbols("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection", "pdosAnomalyClassification", "pdosAnomalyDuration", "pdosUrl", "pdosAnomalyStart")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, Integer32, Bits, TimeTicks, Counter32, NotificationType, IpAddress, iso, ModuleIdentity, Counter64, MibIdentifier, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Bits", "TimeTicks", "Counter32", "NotificationType", "IpAddress", "iso", "ModuleIdentity", "Counter64", "MibIdentifier", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
peakflowSPMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9694, 1, 4))
peakflowSPMIB.setRevisions(('2016-12-06 00:00', '2016-01-11 00:00', '2015-11-20 00:00', '2014-04-04 00:00', '2013-12-04 00:00', '2013-10-03 00:00', '2013-08-19 00:00', '2013-01-15 00:00', '2012-07-30 00:00', '2012-05-13 00:00', '2011-06-03 00:00', '2010-06-08 00:00', '2010-05-20 00:00', '2009-09-24 00:00', '2009-04-01 00:00', '2009-03-30 00:00', '2009-02-02 00:00', '2008-12-16 00:00', '2008-11-13 00:00', '2008-05-19 00:00', '2008-02-19 00:00', '2008-02-11 00:00', '2007-08-07 00:00', '2006-04-26 00:00', '2006-03-23 00:00', '2005-11-14 00:00', '2005-10-19 00:00', '2005-09-12 00:00', '2005-08-23 00:00', '2005-05-17 01:00', '2005-05-17 00:00', '2005-02-11 00:00', '2004-12-10 00:00', '2004-03-30 00:00', '2002-08-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: peakflowSPMIB.setRevisionsDescriptions(('Added spTMSMultiDiversionPrefix.\n\t\t     Deprecated mitigationTMSStart trap and created a new trap\n\t\t     mitigationTMSStartV2 which includes a new\n\t\t     spTMSMultiDiversionPrefix object.', 'Increase SIZE of spLicenseErrDescription', 'Add trap for Cloud Signaling Fault', 'Add spGreTunnelName to greDown and greDownDone', 'Add spInterfaceSpeedHC, a 64-bit version\n\t\t\t\t of spInterfaceSpeed.\n\t\t\t\t Add spInterfaceUsageHC, a 64-bit version\n\t\t\t\t of spInterfaceUsage.', 'Add deviceTotalFlowsHC, a 64-bit version\n\t\t\t\t of deviceTotalFlows.\n\t\t\t\t Deprecate deviceTotalFlows.', 'Updated contact information', 'Add traps concerning license limits', 'Add spTMSMultiPrefix object type.\n\t\t     Update mitigationTMSStart trap to include\n\t\t     spTMSMultiPrefix object.', 'Add spDetector object type.\n\t\t     Update collectorDown trap to include spDetector object.', 'Added cloud signaling alert notification', 'Removed duration from trafficAutoMitigation', 'Add detected country data to Profiled network alert\n                     traps.\n\t\t     Add notifications for routing failover alerts.\n\t\t     Update max-access of notification related objects with\n\t\t     their proper status.', 'Add trap types for DoS Network Profiled and Host alerts.\n                     Import from INET-ADDRESS-MIB for using\n                     InetAddressType and InetAddress for Internet addresses.', 'Update obsolete traps.', 'Update contact group name.', 'Add trap types for service threshold alerts.', 'Add trap types for fingerprint threshold alerts.', 'Update company address.', 'Increased size of spTMSCommunity to 255 octets.', 'Add trap types for device system error alerts.', 'Add trap types for spcomm and gre alerts.', 'Use flowspec OBJECTS in mitigationFlowspecStart\n\t             instead of blackhole OBJECTS.\n\t\t     \n\t\t     Clean up MIB compilation errors.', 'Add trap type for DPI DNS baseline alerts.', 'Revise pollable SP device management types.', 'Add pollable SP device management types.', 'Add trap types for fingerprint sharing events.', 'Apply fixes from validation.', 'Change spHijackASPath references to spHijackAttr.', 'Change spAnomalyRouter references to spRouter.', 'Add trap type for hardware failure.', 'Add trap types for managed object usage alerts.', 'Add trap types bgpInstabilityDone and interfaceUsageDone\n\t\t     for ending bgp instability and interface usage alerts.', 'Increase spInterface name to 256 characters from 64.', 'Initial writing and import.',))
if mibBuilder.loadTexts: peakflowSPMIB.setLastUpdated('201612060000Z')
if mibBuilder.loadTexts: peakflowSPMIB.setOrganization('Arbor Networks, Inc.')
if mibBuilder.loadTexts: peakflowSPMIB.setContactInfo('\tArbor Networks, Inc.\n\t\t\tArbor Technical Assistance Center\n\n\t\t\tPostal: 76 Blanchard Road\n\t\t\t\tBurlington, MA 01803\n\t\t\t\tUSA\n\n\t\t\tTel: +1 866 212 7267 (toll free)\n\t\t\t     +1 781 362 4300\n\t\t\tEmail: support@arbor.net ')
if mibBuilder.loadTexts: peakflowSPMIB.setDescription('Peakflow SP MIB')
peakflowSPCMI = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1))
peakflowSPMgr = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2))
peakflowSPTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3))
spCollector = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCollector.setStatus('current')
if mibBuilder.loadTexts: spCollector.setDescription('SP Device name')
spRouter = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spRouter.setStatus('current')
if mibBuilder.loadTexts: spRouter.setDescription('Router name')
spInterface = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterface.setStatus('current')
if mibBuilder.loadTexts: spInterface.setDescription('Interface name')
spInterfaceIndex = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 4), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: spInterfaceIndex.setDescription('Interface SNMP Index')
spDuration = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 5), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDuration.setStatus('current')
if mibBuilder.loadTexts: spDuration.setDescription('Duration (in centi-seconds)')
spBGPEvent = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPEvent.setStatus('current')
if mibBuilder.loadTexts: spBGPEvent.setDescription('The event that caused a BGP transition')
spBGPInstability = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 7), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPInstability.setStatus('current')
if mibBuilder.loadTexts: spBGPInstability.setDescription('BGP instability update count')
spBGPTrapName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapName.setStatus('current')
if mibBuilder.loadTexts: spBGPTrapName.setDescription('The name of the triggered trap')
spBGPTrapEvent = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapEvent.setStatus('current')
if mibBuilder.loadTexts: spBGPTrapEvent.setDescription('The event that triggered the trap')
spBGPTrapPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapPrefix.setStatus('current')
if mibBuilder.loadTexts: spBGPTrapPrefix.setDescription('The prefix that experienced the trap event')
spBGPTrapOldAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapOldAttributes.setStatus('current')
if mibBuilder.loadTexts: spBGPTrapOldAttributes.setDescription('The old attributes for the affected prefix')
spBGPTrapNewAttributes = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBGPTrapNewAttributes.setStatus('current')
if mibBuilder.loadTexts: spBGPTrapNewAttributes.setDescription('The new attributes for the affected prefix')
spInterfaceSpeed = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceSpeed.setStatus('current')
if mibBuilder.loadTexts: spInterfaceSpeed.setDescription('Configured Interface Speed (bps)')
spInterfaceUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 14), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceUsage.setStatus('current')
if mibBuilder.loadTexts: spInterfaceUsage.setDescription('Actual interface usage (bps)')
spReportURL = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportURL.setStatus('current')
if mibBuilder.loadTexts: spReportURL.setDescription('URL to view/download a report')
spReportName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportName.setStatus('current')
if mibBuilder.loadTexts: spReportName.setDescription('The name of the report')
spReportID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spReportID.setStatus('current')
if mibBuilder.loadTexts: spReportID.setDescription('The queue id of the report')
spAlertID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 18), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spAlertID.setStatus('current')
if mibBuilder.loadTexts: spAlertID.setDescription('The id of the alert')
spHijackRoute = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackRoute.setStatus('current')
if mibBuilder.loadTexts: spHijackRoute.setDescription('The BGP route prefix of the hijacking announcement')
spHijackAttr = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackAttr.setStatus('current')
if mibBuilder.loadTexts: spHijackAttr.setDescription('BGP attributes of the hijacking announcement')
spHijackLocal = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHijackLocal.setStatus('current')
if mibBuilder.loadTexts: spHijackLocal.setDescription('The local prefix that matched the possibly-hijacked route')
spUsername = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsername.setStatus('current')
if mibBuilder.loadTexts: spUsername.setDescription('Name of a Peakflow SP user account.')
spVersion = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spVersion.setStatus('current')
if mibBuilder.loadTexts: spVersion.setDescription('Version number of the described object.')
spUsageType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsageType.setStatus('current')
if mibBuilder.loadTexts: spUsageType.setDescription('Type of resource usage (high/low).')
spManagedObject = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObject.setStatus('current')
if mibBuilder.loadTexts: spManagedObject.setDescription('Managed Object name')
spManagedObjectFamily = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObjectFamily.setStatus('current')
if mibBuilder.loadTexts: spManagedObjectFamily.setDescription('Managed Object family')
spThreshold = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 27), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThreshold.setStatus('current')
if mibBuilder.loadTexts: spThreshold.setDescription('Configured threshold')
spUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUsage.setStatus('current')
if mibBuilder.loadTexts: spUsage.setDescription('Observed per-object traffic usage')
spUnit = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spUnit.setStatus('current')
if mibBuilder.loadTexts: spUnit.setDescription('Unit of measurement (bps/pps)')
spHardwareFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spHardwareFailureDescription.setStatus('current')
if mibBuilder.loadTexts: spHardwareFailureDescription.setDescription('Description of hardware failure')
spFingerprintName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintName.setStatus('current')
if mibBuilder.loadTexts: spFingerprintName.setDescription('Fingerprint name')
spFingerprintFeedback = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintFeedback.setStatus('current')
if mibBuilder.loadTexts: spFingerprintFeedback.setDescription('Feedback regarding a shared fingerprint')
spFingerprintSender = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintSender.setStatus('current')
if mibBuilder.loadTexts: spFingerprintSender.setDescription('Sender of a shared fingerprint')
spFingerprintMessage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFingerprintMessage.setStatus('current')
if mibBuilder.loadTexts: spFingerprintMessage.setDescription('Message accompanying shared fingerprint')
spMitigationID = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 35), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationID.setStatus('current')
if mibBuilder.loadTexts: spMitigationID.setDescription('The ID of the mitigation event')
spDNSName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSName.setStatus('current')
if mibBuilder.loadTexts: spDNSName.setDescription('Domain name')
spDNSExpected = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 37), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSExpected.setStatus('current')
if mibBuilder.loadTexts: spDNSExpected.setDescription('Expected query count')
spDNSObserved = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 38), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObserved.setStatus('current')
if mibBuilder.loadTexts: spDNSObserved.setDescription('Observed query count')
spDNSObservedMean = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 39), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObservedMean.setStatus('current')
if mibBuilder.loadTexts: spDNSObservedMean.setDescription('Observed mean query count')
spDNSObservedMax = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 40), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDNSObservedMax.setStatus('current')
if mibBuilder.loadTexts: spDNSObservedMax.setDescription('Observed max query count')
spMitigationName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationName.setStatus('current')
if mibBuilder.loadTexts: spMitigationName.setDescription('Mitigation name')
spScriptCommand = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptCommand.setStatus('current')
if mibBuilder.loadTexts: spScriptCommand.setDescription('Alert script name')
spScriptHost = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptHost.setStatus('current')
if mibBuilder.loadTexts: spScriptHost.setDescription(' Host on which alert script runs ')
spScriptPort = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptPort.setStatus('current')
if mibBuilder.loadTexts: spScriptPort.setDescription(' Port to connect to spScriptHost on ')
spScriptStart = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spScriptStart.setStatus('current')
if mibBuilder.loadTexts: spScriptStart.setDescription('Textual description of the time the script started')
spTMSPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSPrefix.setStatus('current')
if mibBuilder.loadTexts: spTMSPrefix.setDescription('The offramp protection prefix associated with the TMS mitigation')
spTMSCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSCommunity.setStatus('current')
if mibBuilder.loadTexts: spTMSCommunity.setDescription('The offramp community associated with the TMS mitigation.\n\t\t In the event the string is longer than 255 octets, the number\n\t\t of communities in this object may be truncated.')
spTMSTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSTimeout.setStatus('current')
if mibBuilder.loadTexts: spTMSTimeout.setDescription('Textual representation of TMS timeout, in minutes')
spThirdPartyZone = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThirdPartyZone.setStatus('current')
if mibBuilder.loadTexts: spThirdPartyZone.setDescription('Third party mitigation destination zone ')
spThirdPartyAddr = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spThirdPartyAddr.setStatus('current')
if mibBuilder.loadTexts: spThirdPartyAddr.setDescription('Third party mitigation destination address ')
spMitigationStart = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spMitigationStart.setStatus('current')
if mibBuilder.loadTexts: spMitigationStart.setDescription('Textual representation of mitigation start time')
spBlackholeCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeCommunity.setStatus('current')
if mibBuilder.loadTexts: spBlackholeCommunity.setDescription('The offramp community associated with the blackhole mitigation')
spBlackholeTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeTimeout.setStatus('current')
if mibBuilder.loadTexts: spBlackholeTimeout.setDescription('Textual representation of blackhole timeout, in minutes')
spBlackholePrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholePrefix.setStatus('current')
if mibBuilder.loadTexts: spBlackholePrefix.setDescription('The offramp prefix associated with the blackhole mitigation')
spBlackholeNexthop = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spBlackholeNexthop.setStatus('current')
if mibBuilder.loadTexts: spBlackholeNexthop.setDescription('The offramp next hop associated with the blackhole mitigation')
spFlowspecCommunity = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFlowspecCommunity.setStatus('current')
if mibBuilder.loadTexts: spFlowspecCommunity.setDescription('The offramp community associated with flowspec mitigation')
spFlowspecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spFlowspecTimeout.setStatus('current')
if mibBuilder.loadTexts: spFlowspecTimeout.setDescription('Textual representation of flowspec timeout, in minutes')
spCommFailureDestination = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCommFailureDestination.setStatus('current')
if mibBuilder.loadTexts: spCommFailureDestination.setDescription('Destination of internal SP communication failure')
spCommFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCommFailureDescription.setStatus('current')
if mibBuilder.loadTexts: spCommFailureDescription.setDescription('Description of internal SP communication failure')
spGreTunnelDestination = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 60), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spGreTunnelDestination.setStatus('current')
if mibBuilder.loadTexts: spGreTunnelDestination.setDescription('GRE Tunnel destination')
spSystemErrorType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spSystemErrorType.setStatus('current')
if mibBuilder.loadTexts: spSystemErrorType.setDescription('Textual name of system error alert type')
spSystemErrorDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spSystemErrorDescription.setStatus('current')
if mibBuilder.loadTexts: spSystemErrorDescription.setDescription('Description of the system error alert')
spServiceName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spServiceName.setStatus('current')
if mibBuilder.loadTexts: spServiceName.setDescription('Service name')
spServiceElement = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spServiceElement.setStatus('current')
if mibBuilder.loadTexts: spServiceElement.setDescription('Service element')
spApplicationName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spApplicationName.setStatus('current')
if mibBuilder.loadTexts: spApplicationName.setDescription('Application')
spAlertDetectionSignatures = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spAlertDetectionSignatures.setStatus('current')
if mibBuilder.loadTexts: spAlertDetectionSignatures.setDescription('A comma separated string of all alert detection\n\t\tsignatures that make up a specific alert.  May be 1 or more\n\t\tset, depending on the alert type.')
spManagedObjects = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spManagedObjects.setStatus('current')
if mibBuilder.loadTexts: spManagedObjects.setDescription('A comma-separated list of managed object names.')
spInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 68), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInetAddressType.setStatus('current')
if mibBuilder.loadTexts: spInetAddressType.setDescription('An InetAddressType INTEGER value that specifies the\n\t\ttype of Internet address specific in an spInetAddress object.\n\t\tGenerally, this will be used by Peakflow SP to specify\n\t\tIPv4 (1) or IPv6 (2) addresses.  See RFC3291 for a detailed\n\t\tdescription.')
spInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 69), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInetAddress.setStatus('current')
if mibBuilder.loadTexts: spInetAddress.setDescription('An InetAddress string that specifies an Internet address,\n\t\tof a type specified by spInetAddressType.  See RFC3291 for a\n\t\tdetailed description.')
spImpactBps = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 70), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spImpactBps.setStatus('current')
if mibBuilder.loadTexts: spImpactBps.setDescription('The maximum observed bps of traffic for a given DoS alert\n\t\ttype.')
spImpactPps = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 71), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spImpactPps.setStatus('current')
if mibBuilder.loadTexts: spImpactPps.setDescription('The maximum observed pps of traffic for a given DoS alert\n\t\ttype.')
spDetectedCountries = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 152))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDetectedCountries.setStatus('current')
if mibBuilder.loadTexts: spDetectedCountries.setDescription("A comma separated string of ISO 3166 country codes that\n\t\thave been detected as part of the alert.  May be 0 to 50\n\t\tset.  If more than 50 countries have been detected, the\n\t\tstring will end in '...'.")
spRoutingFailoverInterfaces = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 73), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spRoutingFailoverInterfaces.setStatus('current')
if mibBuilder.loadTexts: spRoutingFailoverInterfaces.setDescription('A comma separated string of interfaces involved in failover\n\t\trouting.')
spPravail = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spPravail.setStatus('current')
if mibBuilder.loadTexts: spPravail.setDescription('Pravail device name')
spDetector = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spDetector.setStatus('current')
if mibBuilder.loadTexts: spDetector.setDescription('SP detector device name')
spTMSMultiPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSMultiPrefix.setStatus('current')
if mibBuilder.loadTexts: spTMSMultiPrefix.setDescription('A comma seperated list of the offramp protection prefixes associated with\n\t\t the TMS multi-prefix mitigation. This field does not include\n\t\t the first protection prefix which is included in spTMSPrefix.')
spLicenseErrType = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrType.setStatus('current')
if mibBuilder.loadTexts: spLicenseErrType.setDescription('Textual name of the license error alert type')
spLicenseErrCount = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 78), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrCount.setStatus('current')
if mibBuilder.loadTexts: spLicenseErrCount.setDescription('Deployment-wide License Device Count')
spLicenseErrLimit = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 79), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrLimit.setStatus('current')
if mibBuilder.loadTexts: spLicenseErrLimit.setDescription('Deployment-wide License Device Limit')
spLicenseErrDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 1023))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spLicenseErrDescription.setStatus('current')
if mibBuilder.loadTexts: spLicenseErrDescription.setDescription('Description of the License alert')
spInterfaceSpeedHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 81), CounterBasedGauge64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceSpeedHC.setStatus('current')
if mibBuilder.loadTexts: spInterfaceSpeedHC.setDescription('Configured Interface Speed (bps)\n\t\t The 64-bit version of spInterfaceSpeed')
spInterfaceUsageHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 82), CounterBasedGauge64()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spInterfaceUsageHC.setStatus('current')
if mibBuilder.loadTexts: spInterfaceUsageHC.setDescription('Actual interface usage (bps)\n\t\t The 64-bit version of spInterfaceUsage')
spGreTunnelName = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spGreTunnelName.setStatus('current')
if mibBuilder.loadTexts: spGreTunnelName.setDescription('GRE Tunnel name')
spCloudSignalFaultDescription = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spCloudSignalFaultDescription.setStatus('current')
if mibBuilder.loadTexts: spCloudSignalFaultDescription.setDescription('Description of cloud signaling fault')
spTMSMultiDiversionPrefix = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 1, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: spTMSMultiDiversionPrefix.setStatus('current')
if mibBuilder.loadTexts: spTMSMultiDiversionPrefix.setDescription('A comma seperated list of the offramp diversion prefixes associated with\n\t\t the TMS multi-prefix mitigation.')
deviceHealth = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1))
deviceCpuLoadAvg1min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg1min.setStatus('current')
if mibBuilder.loadTexts: deviceCpuLoadAvg1min.setDescription('Load average during last 1 minute. This value\n                 is calculated by taking the average number of\n                 processes in run queue during last 1 minute and\n                 multiplying by 100, then rounding the result into\n                 an integer.')
deviceCpuLoadAvg5min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg5min.setStatus('current')
if mibBuilder.loadTexts: deviceCpuLoadAvg5min.setDescription('Load average during last 5 minutes. This value\n                 is calculated by taking the average number of\n                 processes in run queue during last 5 minutes and\n                 multiplying by 100, then rounding the result into\n                 an integer.')
deviceCpuLoadAvg15min = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceCpuLoadAvg15min.setStatus('current')
if mibBuilder.loadTexts: deviceCpuLoadAvg15min.setDescription('Load average during last 15 minutes. This value\n                 is calculated by taking the average number of\n                 processes in run queue during last 15 minutes and\n                 multiplying by 100, then rounding the result into\n                 an integer.')
deviceDiskUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceDiskUsage.setStatus('current')
if mibBuilder.loadTexts: deviceDiskUsage.setDescription('Percentage of primary data partition used.')
devicePhysicalMemory = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemory.setStatus('current')
if mibBuilder.loadTexts: devicePhysicalMemory.setDescription('Total physical memeory installed (in KiB).')
devicePhysicalMemoryInUse = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemoryInUse.setStatus('current')
if mibBuilder.loadTexts: devicePhysicalMemoryInUse.setDescription('Physical memeory being used (in KiB).')
devicePhysicalMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: devicePhysicalMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: devicePhysicalMemoryUsage.setDescription('Percentage of physical memory used.')
deviceSwapSpace = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpace.setStatus('current')
if mibBuilder.loadTexts: deviceSwapSpace.setDescription('Total swap space available (in KiB).')
deviceSwapSpaceInUse = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpaceInUse.setStatus('current')
if mibBuilder.loadTexts: deviceSwapSpaceInUse.setDescription('Used swap space (in KiB).')
deviceSwapSpaceUsage = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceSwapSpaceUsage.setStatus('current')
if mibBuilder.loadTexts: deviceSwapSpaceUsage.setDescription('Percentage of swap space used.')
deviceTotalFlows = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalFlows.setStatus('deprecated')
if mibBuilder.loadTexts: deviceTotalFlows.setDescription('Accumulative flow count per SP device.\n\n\t\t This object is deprecated in favor of deviceTotalFlowsHC.')
deviceTotalFlowsHC = MibScalar((1, 3, 6, 1, 4, 1, 9694, 1, 4, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: deviceTotalFlowsHC.setStatus('current')
if mibBuilder.loadTexts: deviceTotalFlowsHC.setDescription('Accumulative flow count per SP device.\n\n\t\t The 64-bit version of deviceTotalFlows.')
peakflowSPTrapsEnumerate = MibIdentifier((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0))
flowDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 1)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: flowDown.setStatus('current')
if mibBuilder.loadTexts: flowDown.setDescription('Flow data has not been received from a Flow\n\t\ttransmitting router')
flowUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 2)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: flowUp.setStatus('current')
if mibBuilder.loadTexts: flowUp.setDescription('Flow data has resumed from a router which previously\n\t\twas not forwarding Flow data')
snmpDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 3)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: snmpDown.setStatus('current')
if mibBuilder.loadTexts: snmpDown.setDescription('SNMP requests are not being answered by the router')
snmpUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 4)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: snmpUp.setStatus('current')
if mibBuilder.loadTexts: snmpUp.setDescription('SNMP requests are again being answered by the router')
bgpDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 5)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpDown.setStatus('current')
if mibBuilder.loadTexts: bgpDown.setDescription('The BGP session with the router has transitioned down')
bgpUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 6)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpUp.setStatus('current')
if mibBuilder.loadTexts: bgpUp.setDescription('The BGP session with the router has transitioned up')
collectorDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 7)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDetector"))
if mibBuilder.loadTexts: collectorDown.setStatus('current')
if mibBuilder.loadTexts: collectorDown.setDescription('The SP device is down. Heartbeats are missing.')
collectorUp = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 8)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: collectorUp.setStatus('current')
if mibBuilder.loadTexts: collectorUp.setDescription('The SP device is up. Heartbeats have resumed.')
collectorStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 9)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: collectorStart.setStatus('obsolete')
if mibBuilder.loadTexts: collectorStart.setDescription('The SP device is started. Heartbeats have been received.')
bgpInstability = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 10)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spBGPInstability"))
if mibBuilder.loadTexts: bgpInstability.setStatus('current')
if mibBuilder.loadTexts: bgpInstability.setDescription('The BGP session with this router is exhibiting instability')
bgpInstabilityDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 11)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"))
if mibBuilder.loadTexts: bgpInstabilityDone.setStatus('current')
if mibBuilder.loadTexts: bgpInstabilityDone.setDescription('The BGP instability associated with this router has ended')
bgpTrap = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 12)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spBGPTrapName"), ("PEAKFLOW-SP-MIB", "spBGPTrapEvent"), ("PEAKFLOW-SP-MIB", "spBGPTrapPrefix"), ("PEAKFLOW-SP-MIB", "spBGPTrapOldAttributes"), ("PEAKFLOW-SP-MIB", "spBGPTrapNewAttributes"))
if mibBuilder.loadTexts: bgpTrap.setStatus('current')
if mibBuilder.loadTexts: bgpTrap.setDescription('A BGP event matching this trap definition has occurred.')
interfaceUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 13)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spInterface"), ("PEAKFLOW-SP-MIB", "spInterfaceIndex"), ("PEAKFLOW-SP-MIB", "spInterfaceSpeed"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spInterfaceUsage"), ("PEAKFLOW-SP-MIB", "spInterfaceSpeedHC"), ("PEAKFLOW-SP-MIB", "spInterfaceUsageHC"))
if mibBuilder.loadTexts: interfaceUsage.setStatus('current')
if mibBuilder.loadTexts: interfaceUsage.setDescription('The interface exceeded the configured traffic rate threshold.')
interfaceUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 14)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spInterface"), ("PEAKFLOW-SP-MIB", "spInterfaceIndex"), ("PEAKFLOW-SP-MIB", "spUsageType"))
if mibBuilder.loadTexts: interfaceUsageDone.setStatus('current')
if mibBuilder.loadTexts: interfaceUsageDone.setDescription('The interface is now within configured traffic thresholds')
autoclassifyStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 15)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spUsername"))
if mibBuilder.loadTexts: autoclassifyStart.setStatus('obsolete')
if mibBuilder.loadTexts: autoclassifyStart.setDescription('Autoclassification started on this Peakflow SP leader.')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 16)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spUsername"), ("PEAKFLOW-SP-MIB", "spVersion"))
if mibBuilder.loadTexts: configChange.setStatus('current')
if mibBuilder.loadTexts: configChange.setDescription('Configuration updated from this Peakflow SP leader.')
notificationLimit = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 17)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: notificationLimit.setStatus('obsolete')
if mibBuilder.loadTexts: notificationLimit.setDescription("Too many alerts have been generated by this Peakflow\n\t\tSP leader.  Alerts will be temporarily suppressed.\n\t\tFor more information about alerts that are being generated,\n\t\tplease go to the Alerts page in the leader's UI.")
reportDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 18)).setObjects(("PEAKFLOW-SP-MIB", "spReportName"), ("PEAKFLOW-SP-MIB", "spReportID"), ("PEAKFLOW-SP-MIB", "spReportURL"))
if mibBuilder.loadTexts: reportDone.setStatus('obsolete')
if mibBuilder.loadTexts: reportDone.setDescription('The indicated report is finished and available for viewing\n\t\tat the listed URL.')
bgpHijack = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 19)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spRouter"), ("PEAKFLOW-SP-MIB", "spHijackRoute"), ("PEAKFLOW-SP-MIB", "spHijackAttr"), ("PEAKFLOW-SP-MIB", "spHijackLocal"))
if mibBuilder.loadTexts: bgpHijack.setStatus('current')
if mibBuilder.loadTexts: bgpHijack.setDescription('A BGP announcement was seen for a prefix that is\n\t\tpart of the configured local address space.')
managedObjectUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 20)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spManagedObjectFamily"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: managedObjectUsage.setStatus('current')
if mibBuilder.loadTexts: managedObjectUsage.setDescription('The managed object exceeded the configured traffic rate threshold.')
managedObjectUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 21)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spManagedObjectFamily"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: managedObjectUsageDone.setStatus('current')
if mibBuilder.loadTexts: managedObjectUsageDone.setDescription('The manged object is no longer exceeding the traffic rate threshold.')
hardwareFailure = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 22)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spHardwareFailureDescription"))
if mibBuilder.loadTexts: hardwareFailure.setStatus('current')
if mibBuilder.loadTexts: hardwareFailure.setDescription('A hardware failure has been detected on an SP device.')
hardwareFailureDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 23)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spHardwareFailureDescription"))
if mibBuilder.loadTexts: hardwareFailureDone.setStatus('current')
if mibBuilder.loadTexts: hardwareFailureDone.setDescription('A hardware failure is no longer detected on an SP device.')
fingerprintFeedback = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 24)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spFingerprintFeedback"))
if mibBuilder.loadTexts: fingerprintFeedback.setStatus('current')
if mibBuilder.loadTexts: fingerprintFeedback.setDescription('Feedback received regarding a shared fingerprint.')
fingerprintReceive = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 25)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spFingerprintSender"), ("PEAKFLOW-SP-MIB", "spFingerprintMessage"))
if mibBuilder.loadTexts: fingerprintReceive.setStatus('current')
if mibBuilder.loadTexts: fingerprintReceive.setDescription('A shared fingerprint was received.')
dnsBaseline = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 26)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDNSName"), ("PEAKFLOW-SP-MIB", "spDNSExpected"), ("PEAKFLOW-SP-MIB", "spDNSObserved"))
if mibBuilder.loadTexts: dnsBaseline.setStatus('current')
if mibBuilder.loadTexts: dnsBaseline.setDescription('An excessive number of queries for a domain name detected.')
dnsBaselineDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 27)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spDNSName"), ("PEAKFLOW-SP-MIB", "spDNSExpected"), ("PEAKFLOW-SP-MIB", "spDNSObservedMean"), ("PEAKFLOW-SP-MIB", "spDNSObservedMax"))
if mibBuilder.loadTexts: dnsBaselineDone.setStatus('current')
if mibBuilder.loadTexts: dnsBaselineDone.setDescription('Query count for domain name has returned to normal levels.')
alertScript = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 28)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spScriptCommand"), ("PEAKFLOW-SP-MIB", "spScriptHost"), ("PEAKFLOW-SP-MIB", "spScriptPort"), ("PEAKFLOW-SP-MIB", "spScriptStart"))
if mibBuilder.loadTexts: alertScript.setStatus('current')
if mibBuilder.loadTexts: alertScript.setDescription('Alert script has been executed')
mitigationDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 29)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: mitigationDone.setStatus('current')
if mibBuilder.loadTexts: mitigationDone.setDescription('Mitigation has completed')
mitigationTMSStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 30)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spTMSPrefix"), ("PEAKFLOW-SP-MIB", "spTMSCommunity"), ("PEAKFLOW-SP-MIB", "spTMSTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"), ("PEAKFLOW-SP-MIB", "spTMSMultiPrefix"))
if mibBuilder.loadTexts: mitigationTMSStart.setStatus('deprecated')
if mibBuilder.loadTexts: mitigationTMSStart.setDescription('TMS Mitigation has started')
mitigationThirdPartyStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 31)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spThirdPartyZone"), ("PEAKFLOW-SP-MIB", "spThirdPartyAddr"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationThirdPartyStart.setStatus('current')
if mibBuilder.loadTexts: mitigationThirdPartyStart.setDescription('Third Party Mitigation has started')
mitigationBlackholeStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 32)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spBlackholeCommunity"), ("PEAKFLOW-SP-MIB", "spBlackholeTimeout"), ("PEAKFLOW-SP-MIB", "spBlackholePrefix"), ("PEAKFLOW-SP-MIB", "spBlackholeNexthop"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationBlackholeStart.setStatus('current')
if mibBuilder.loadTexts: mitigationBlackholeStart.setDescription('Blackhole Mitigation has started')
mitigationFlowspecStart = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 33)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFlowspecCommunity"), ("PEAKFLOW-SP-MIB", "spFlowspecTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"))
if mibBuilder.loadTexts: mitigationFlowspecStart.setStatus('current')
if mibBuilder.loadTexts: mitigationFlowspecStart.setDescription('Flowspec Mitigation has started')
spcommFailure = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 34)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spCommFailureDestination"), ("PEAKFLOW-SP-MIB", "spCommFailureDescription"))
if mibBuilder.loadTexts: spcommFailure.setStatus('current')
if mibBuilder.loadTexts: spcommFailure.setDescription('An SP internal communication failure has occurred.')
spcommFailureDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 35)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spCommFailureDestination"), ("PEAKFLOW-SP-MIB", "spCommFailureDescription"))
if mibBuilder.loadTexts: spcommFailureDone.setStatus('current')
if mibBuilder.loadTexts: spcommFailureDone.setDescription('An SP internal communication failure has ended.')
greDown = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 36)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spGreTunnelDestination"), ("PEAKFLOW-SP-MIB", "spGreTunnelName"))
if mibBuilder.loadTexts: greDown.setStatus('current')
if mibBuilder.loadTexts: greDown.setDescription('The GRE tunnel is down')
greDownDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 37)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spGreTunnelDestination"), ("PEAKFLOW-SP-MIB", "spGreTunnelName"))
if mibBuilder.loadTexts: greDownDone.setStatus('current')
if mibBuilder.loadTexts: greDownDone.setDescription('The GRE tunnel is back up')
deviceSystemError = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 38)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spSystemErrorType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spSystemErrorDescription"))
if mibBuilder.loadTexts: deviceSystemError.setStatus('current')
if mibBuilder.loadTexts: deviceSystemError.setDescription('An SP device system error alert has started.')
deviceSystemErrorDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 39)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spSystemErrorType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spSystemErrorDescription"))
if mibBuilder.loadTexts: deviceSystemErrorDone.setStatus('current')
if mibBuilder.loadTexts: deviceSystemErrorDone.setDescription('An SP device system error alert has ended.')
fingerprintUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 40)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: fingerprintUsage.setStatus('current')
if mibBuilder.loadTexts: fingerprintUsage.setDescription('The fingerprint exceeded the configured traffic rate threshold.')
fingerprintUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 41)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spFingerprintName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spUnit"))
if mibBuilder.loadTexts: fingerprintUsageDone.setStatus('current')
if mibBuilder.loadTexts: fingerprintUsageDone.setDescription('The fingerprint is no longer exceeding the traffic rate threshold.')
serviceUsage = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 42)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spServiceName"), ("PEAKFLOW-SP-MIB", "spUsageType"), ("PEAKFLOW-SP-MIB", "spApplicationName"), ("PEAKFLOW-SP-MIB", "spServiceElement"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spUsage"))
if mibBuilder.loadTexts: serviceUsage.setStatus('current')
if mibBuilder.loadTexts: serviceUsage.setDescription('The service exceeded the configured traffic rate threshold.')
serviceUsageDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 43)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spServiceName"))
if mibBuilder.loadTexts: serviceUsageDone.setStatus('current')
if mibBuilder.loadTexts: serviceUsageDone.setDescription('The service is no longer exceeding the traffic rate threshold.')
dosNetworkProfiledAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 44)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spDetectedCountries"))
if mibBuilder.loadTexts: dosNetworkProfiledAlert.setStatus('current')
if mibBuilder.loadTexts: dosNetworkProfiledAlert.setDescription('The managed object exceeded network and/or country\n\t\tbaseline thresholds.')
dosNetworkProfiledAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 45)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spDetectedCountries"))
if mibBuilder.loadTexts: dosNetworkProfiledAlertDone.setStatus('current')
if mibBuilder.loadTexts: dosNetworkProfiledAlertDone.setDescription('The managed object is no longer exceeding the network\n\t\tand/or country baseline thresholds.')
dosHostDetectionAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 46)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spAlertDetectionSignatures"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spInetAddress"), ("PEAKFLOW-SP-MIB", "spInetAddressType"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-SP-MIB", "spManagedObjects"))
if mibBuilder.loadTexts: dosHostDetectionAlert.setStatus('current')
if mibBuilder.loadTexts: dosHostDetectionAlert.setDescription('A Host alert was started after one or more signatures exceeded\n\t\ttheir thresholds.')
dosHostDetectionAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 47)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spAlertDetectionSignatures"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDirection"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyStart"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyDuration"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spInetAddress"), ("PEAKFLOW-SP-MIB", "spInetAddressType"), ("PEAKFLOW-SP-MIB", "spImpactBps"), ("PEAKFLOW-SP-MIB", "spImpactPps"), ("PEAKFLOW-DOS-MIB", "pdosAnomalyClassification"), ("PEAKFLOW-SP-MIB", "spManagedObjects"))
if mibBuilder.loadTexts: dosHostDetectionAlertDone.setStatus('current')
if mibBuilder.loadTexts: dosHostDetectionAlertDone.setDescription('The Host alert ended and is no longer exceeding signature\n\t\tthresholds.')
routingFailover = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 48)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: routingFailover.setStatus('current')
if mibBuilder.loadTexts: routingFailover.setDescription('A routing failover event occurred on a collector.')
routingFailoverInterfaceDownAlert = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 49)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"), ("PEAKFLOW-SP-MIB", "spRoutingFailoverInterfaces"))
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlert.setStatus('current')
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlert.setDescription('One or more interfaces involved in routing failover for a\n\t\tcollector are down.  The spRoutingFailoverInterfaces object\n\t \tdocuments the list of interfaces that are down.')
routingFailoverInterfaceDownAlertDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 50)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-DOS-MIB", "pdosUrl"), ("PEAKFLOW-SP-MIB", "spCollector"))
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlertDone.setStatus('current')
if mibBuilder.loadTexts: routingFailoverInterfaceDownAlertDone.setDescription('A previously started alert for down routing failover\n\t\tinterfaces has finished.')
trafficAutoMitigation = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 51)).setObjects(("PEAKFLOW-SP-MIB", "spManagedObject"))
if mibBuilder.loadTexts: trafficAutoMitigation.setStatus('current')
if mibBuilder.loadTexts: trafficAutoMitigation.setDescription('Traffic has been seen by a TMS for a Managed Object\n\t\twhich has been configured for traffic-based\n\t\tauto-mitigation.')
cloudSignalingMitigationRequest = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 52)).setObjects(("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spPravail"))
if mibBuilder.loadTexts: cloudSignalingMitigationRequest.setStatus('current')
if mibBuilder.loadTexts: cloudSignalingMitigationRequest.setDescription('A cloud signaling mitigation request has been seen and \n\t\tan alert created.')
licenseError = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 53)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spLicenseErrType"), ("PEAKFLOW-SP-MIB", "spLicenseErrCount"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spLicenseErrDescription"))
if mibBuilder.loadTexts: licenseError.setStatus('current')
if mibBuilder.loadTexts: licenseError.setDescription('An SP Deployment License error alert has started.')
licenseErrorDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 54)).setObjects(("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spLicenseErrType"), ("PEAKFLOW-SP-MIB", "spThreshold"), ("PEAKFLOW-SP-MIB", "spLicenseErrLimit"), ("PEAKFLOW-SP-MIB", "spLicenseErrDescription"))
if mibBuilder.loadTexts: licenseErrorDone.setStatus('current')
if mibBuilder.loadTexts: licenseErrorDone.setDescription('An SP Deployment License error alert has ended.')
cloudSignalingFault = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 55)).setObjects(("PEAKFLOW-SP-MIB", "spAlertId"), ("PEAKFLOW-SP-MIB", "spPravail"), ("PEAKFLOW-SP-MIB", "spCloudSignalFaultDescription"))
if mibBuilder.loadTexts: cloudSignalingFault.setStatus('current')
if mibBuilder.loadTexts: cloudSignalingFault.setDescription('A cloud signaling fault was detected.')
cloudSignalingFaultDone = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 56)).setObjects(("PEAKFLOW-SP-MIB", "spAlertId"), ("PEAKFLOW-SP-MIB", "spPravail"), ("PEAKFLOW-SP-MIB", "spCloudSignalFaultDescription"))
if mibBuilder.loadTexts: cloudSignalingFaultDone.setStatus('current')
if mibBuilder.loadTexts: cloudSignalingFaultDone.setDescription('A cloud signaling fault is no longer detected.')
mitigationTMSStartV2 = NotificationType((1, 3, 6, 1, 4, 1, 9694, 1, 4, 3, 0, 57)).setObjects(("PEAKFLOW-SP-MIB", "spMitigationID"), ("PEAKFLOW-SP-MIB", "spMitigationName"), ("PEAKFLOW-SP-MIB", "spAlertID"), ("PEAKFLOW-SP-MIB", "spManagedObject"), ("PEAKFLOW-SP-MIB", "spTMSPrefix"), ("PEAKFLOW-SP-MIB", "spTMSCommunity"), ("PEAKFLOW-SP-MIB", "spTMSTimeout"), ("PEAKFLOW-SP-MIB", "spMitigationStart"), ("PEAKFLOW-SP-MIB", "spTMSMultiPrefix"), ("PEAKFLOW-SP-MIB", "spTMSMultiDiversionPrefix"))
if mibBuilder.loadTexts: mitigationTMSStartV2.setStatus('current')
if mibBuilder.loadTexts: mitigationTMSStartV2.setDescription('TMS Mitigation has started')
mibBuilder.exportSymbols("PEAKFLOW-SP-MIB", spHijackAttr=spHijackAttr, spFingerprintMessage=spFingerprintMessage, deviceCpuLoadAvg5min=deviceCpuLoadAvg5min, spFingerprintSender=spFingerprintSender, spTMSPrefix=spTMSPrefix, mitigationTMSStart=mitigationTMSStart, spTMSCommunity=spTMSCommunity, bgpTrap=bgpTrap, interfaceUsageDone=interfaceUsageDone, spBGPInstability=spBGPInstability, flowUp=flowUp, peakflowSPMgr=peakflowSPMgr, spInetAddress=spInetAddress, mitigationTMSStartV2=mitigationTMSStartV2, peakflowSPCMI=peakflowSPCMI, mitigationFlowspecStart=mitigationFlowspecStart, collectorDown=collectorDown, reportDone=reportDone, spHijackLocal=spHijackLocal, peakflowSPTraps=peakflowSPTraps, spReportID=spReportID, deviceDiskUsage=deviceDiskUsage, dosNetworkProfiledAlertDone=dosNetworkProfiledAlertDone, spUsage=spUsage, spSystemErrorDescription=spSystemErrorDescription, bgpHijack=bgpHijack, spServiceElement=spServiceElement, cloudSignalingFaultDone=cloudSignalingFaultDone, hardwareFailure=hardwareFailure, spTMSTimeout=spTMSTimeout, mitigationDone=mitigationDone, deviceHealth=deviceHealth, mitigationBlackholeStart=mitigationBlackholeStart, peakflowSPTrapsEnumerate=peakflowSPTrapsEnumerate, spCollector=spCollector, spBGPTrapEvent=spBGPTrapEvent, spBGPEvent=spBGPEvent, spInterfaceSpeed=spInterfaceSpeed, spRoutingFailoverInterfaces=spRoutingFailoverInterfaces, spBGPTrapNewAttributes=spBGPTrapNewAttributes, cloudSignalingMitigationRequest=cloudSignalingMitigationRequest, licenseError=licenseError, spThirdPartyZone=spThirdPartyZone, spHardwareFailureDescription=spHardwareFailureDescription, spInterfaceUsageHC=spInterfaceUsageHC, spMitigationStart=spMitigationStart, spSystemErrorType=spSystemErrorType, spFlowspecCommunity=spFlowspecCommunity, spThreshold=spThreshold, spBlackholeNexthop=spBlackholeNexthop, fingerprintReceive=fingerprintReceive, fingerprintUsage=fingerprintUsage, spDNSExpected=spDNSExpected, routingFailover=routingFailover, bgpInstabilityDone=bgpInstabilityDone, routingFailoverInterfaceDownAlertDone=routingFailoverInterfaceDownAlertDone, spInetAddressType=spInetAddressType, managedObjectUsage=managedObjectUsage, flowDown=flowDown, spDuration=spDuration, spRouter=spRouter, spApplicationName=spApplicationName, serviceUsage=serviceUsage, spDNSName=spDNSName, spBGPTrapOldAttributes=spBGPTrapOldAttributes, spFingerprintFeedback=spFingerprintFeedback, spMitigationName=spMitigationName, bgpDown=bgpDown, spTMSMultiDiversionPrefix=spTMSMultiDiversionPrefix, routingFailoverInterfaceDownAlert=routingFailoverInterfaceDownAlert, spcommFailureDone=spcommFailureDone, spCommFailureDestination=spCommFailureDestination, spAlertID=spAlertID, fingerprintUsageDone=fingerprintUsageDone, spInterface=spInterface, spManagedObjectFamily=spManagedObjectFamily, spDNSObservedMean=spDNSObservedMean, spAlertDetectionSignatures=spAlertDetectionSignatures, spBGPTrapName=spBGPTrapName, spDNSObservedMax=spDNSObservedMax, trafficAutoMitigation=trafficAutoMitigation, configChange=configChange, spTMSMultiPrefix=spTMSMultiPrefix, spScriptHost=spScriptHost, spMitigationID=spMitigationID, deviceSystemErrorDone=deviceSystemErrorDone, spBGPTrapPrefix=spBGPTrapPrefix, spImpactPps=spImpactPps, fingerprintFeedback=fingerprintFeedback, interfaceUsage=interfaceUsage, spInterfaceSpeedHC=spInterfaceSpeedHC, deviceSystemError=deviceSystemError, devicePhysicalMemoryInUse=devicePhysicalMemoryInUse, snmpUp=snmpUp, spGreTunnelDestination=spGreTunnelDestination, spDetector=spDetector, spLicenseErrCount=spLicenseErrCount, greDown=greDown, dosNetworkProfiledAlert=dosNetworkProfiledAlert, spLicenseErrType=spLicenseErrType, deviceSwapSpaceUsage=deviceSwapSpaceUsage, spThirdPartyAddr=spThirdPartyAddr, managedObjectUsageDone=managedObjectUsageDone, cloudSignalingFault=cloudSignalingFault, spScriptStart=spScriptStart, spLicenseErrDescription=spLicenseErrDescription, deviceTotalFlowsHC=deviceTotalFlowsHC, spInterfaceUsage=spInterfaceUsage, spCloudSignalFaultDescription=spCloudSignalFaultDescription, spcommFailure=spcommFailure, licenseErrorDone=licenseErrorDone, spUnit=spUnit, spReportName=spReportName, dosHostDetectionAlertDone=dosHostDetectionAlertDone, devicePhysicalMemory=devicePhysicalMemory, spBlackholeTimeout=spBlackholeTimeout, peakflowSPMIB=peakflowSPMIB, bgpInstability=bgpInstability, greDownDone=greDownDone, deviceTotalFlows=deviceTotalFlows, spImpactBps=spImpactBps, devicePhysicalMemoryUsage=devicePhysicalMemoryUsage, dnsBaseline=dnsBaseline, spScriptPort=spScriptPort, spUsername=spUsername, spPravail=spPravail, spHijackRoute=spHijackRoute, deviceCpuLoadAvg1min=deviceCpuLoadAvg1min, spGreTunnelName=spGreTunnelName, collectorStart=collectorStart, mitigationThirdPartyStart=mitigationThirdPartyStart, spFlowspecTimeout=spFlowspecTimeout, dnsBaselineDone=dnsBaselineDone, serviceUsageDone=serviceUsageDone, spManagedObjects=spManagedObjects, bgpUp=bgpUp, spCommFailureDescription=spCommFailureDescription, spScriptCommand=spScriptCommand, spReportURL=spReportURL, spUsageType=spUsageType, deviceCpuLoadAvg15min=deviceCpuLoadAvg15min, spBlackholePrefix=spBlackholePrefix, dosHostDetectionAlert=dosHostDetectionAlert, notificationLimit=notificationLimit, spManagedObject=spManagedObject, spVersion=spVersion, spServiceName=spServiceName, deviceSwapSpace=deviceSwapSpace, alertScript=alertScript, PYSNMP_MODULE_ID=peakflowSPMIB, spDNSObserved=spDNSObserved, autoclassifyStart=autoclassifyStart, hardwareFailureDone=hardwareFailureDone, collectorUp=collectorUp, spInterfaceIndex=spInterfaceIndex, spLicenseErrLimit=spLicenseErrLimit, spFingerprintName=spFingerprintName, snmpDown=snmpDown, spBlackholeCommunity=spBlackholeCommunity, deviceSwapSpaceInUse=deviceSwapSpaceInUse, spDetectedCountries=spDetectedCountries)
