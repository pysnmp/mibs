#
# PySNMP MIB module F3-OSPF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-OSPF-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 10:42:55 2024
# On host fv-az1251-584 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ipManagementTunnelEntry, cmIpInterfaceEntry = mibBuilder.importSymbols("CM-IP-MIB", "ipManagementTunnelEntry", "cmIpInterfaceEntry")
DesignatedRouterPriority, RouterID, AreaID, OspfAuthenticationType, ospfNbrEntry, HelloRange = mibBuilder.importSymbols("OSPF-MIB", "DesignatedRouterPriority", "RouterID", "AreaID", "OspfAuthenticationType", "ospfNbrEntry", "HelloRange")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Unsigned32, ModuleIdentity, NotificationType, Gauge32, Integer32, IpAddress, ObjectIdentity, TimeTicks, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, iso, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "ModuleIdentity", "NotificationType", "Gauge32", "Integer32", "IpAddress", "ObjectIdentity", "TimeTicks", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "iso", "Counter64", "Counter32")
StorageType, TextualConvention, DisplayString, RowStatus, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "DisplayString", "RowStatus", "TruthValue")
f3OspfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35))
f3OspfMIB.setRevisions(('2014-10-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3OspfMIB.setRevisionsDescriptions(('\n         Notes from release 201410060000Z,\n         (1) MIB version ready for release FSP150CC 6.6.CC.',))
if mibBuilder.loadTexts: f3OspfMIB.setLastUpdated('201410060000Z')
if mibBuilder.loadTexts: f3OspfMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3OspfMIB.setContactInfo('        Jakub Nadolski\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 421\n             E-mail: jnadolski@advaoptical.com\n             Postal: ul. Slaska 35\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3OspfMIB.setDescription('This module defines the OSPF MIB definitions \n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
class OspfMetricType(TextualConvention, Integer32):
    description = 'The metric type can be specified to define\n          how the cost of redistributed routes are to be\n          calculated. A metric type of E1 means that \n          the redistribution cost plus the cost to the ASBR is          \n          used for the route while a metric type of E2 means \n          that only the redistributed cost is used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("e1", 1), ("e2", 2))

class OspfRedistributionType(TextualConvention, Integer32):
    description = 'Enables redistribution of routes of a specific\n          protocol or kind into OSPF. The only supported\n          type is RIP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("rip", 2))

class OspfState(TextualConvention, Integer32):
    description = 'Allows user configuration of the behavior associated \n          with the OSPF interface. \n            ENABLED - OSPF is enabled and the interface \n            will send HELLOs and form adjacencies.\n            DISABLED - the interface is not advertised \n            and does not participate in OSPF message exchanges.\n            PASSIVE - the interface will be advertised as a stub \n            link but will not participate in OSPF message exchange.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2), ("passive", 3))

class OspfAreaType(TextualConvention, Integer32):
    description = 'The OSPF area type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("stub", 2))

class OspfRole(TextualConvention, Integer32):
    description = 'The OSPF role of the neighbor router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("bdr", 1), ("dr", 2), ("drother", 3))

f3OspfConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1))
f3OspfConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2))
f3OspfRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1), )
if mibBuilder.loadTexts: f3OspfRouterTable.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterTable.setDescription('A list of entries corresponding to OSPF Router \n             instance for configuration purposes.')
f3OspfRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1), ).setIndexNames((0, "F3-OSPF-MIB", "f3OspfRouterIndex"))
if mibBuilder.loadTexts: f3OspfRouterEntry.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterEntry.setDescription('A conceptual row in the f3OspfRouterTable.')
f3OspfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 1), RouterID())
if mibBuilder.loadTexts: f3OspfRouterIndex.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterIndex.setDescription("A 32-bit integer uniquely identifying the \n         router in the Autonomous System.\n         By convention, to ensure uniqueness, this\n         should default to the value of one of the\n         router's IP interface addresses.")
f3OspfRouterMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 2), OspfMetricType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterMetricType.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterMetricType.setDescription('The metric type can be specified to define how the cost of \n         redistributed routes are to be calculated. This attribute must \n         be set to zero if f3OspfRouterMetric has been specified.')
f3OspfRouterMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777214))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterMetric.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterMetric.setDescription('The metric value to use as the default cost to be\n         associated with any redistributed routes. This attribute must be set\n         to zero if the f3OspfRouterMetricType has been specified')
f3OspfRouterRedistributionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 4), OspfRedistributionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterRedistributionType.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterRedistributionType.setDescription('The redistribution type is used to enable redistribution of routes of\n         a specified protocol.')
f3OspfRouterNumAttachedAreas = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3OspfRouterNumAttachedAreas.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterNumAttachedAreas.setDescription('Number of attached areas for the OSPF Router.')
f3OspfRouterAreaBdrRtrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterAreaBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterAreaBdrRtrStatus.setDescription('A flag to note whether this router is an Area\n         Border Router.')
f3OspfRouterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterStorageType.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterStorageType.setDescription('The type of storage configured for this entry.')
f3OspfRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n         active state unless all objects in the entry have an \n         appropriate value, as described\n         in the description clause for each writable object.\n\n         The values of f3OspfRouterRowStatus supported are\n         createAndGo(4) and destroy(6).  All mandatory attributes\n         must be specified in a single SNMP SET request with\n         f3OspfRouterRowStatus value as createAndGo(4).\n         Upon successful row creation, this object has a\n         value of active(1).\n         \n         The f3OspfRouterRowStatus object may be modified if\n         the associated instance of this object is equal to active(1).')
f3OspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2), )
if mibBuilder.loadTexts: f3OspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaTable.setDescription('A list of entries corresponding to OSPF Area\n            configuration purposes.')
f3OspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1), ).setIndexNames((0, "F3-OSPF-MIB", "f3OspfAreaId"))
if mibBuilder.loadTexts: f3OspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaEntry.setDescription('A conceptual row in the f3OspfAreaTable.')
f3OspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 1), AreaID())
if mibBuilder.loadTexts: f3OspfAreaId.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaId.setDescription('A 32-bit integer uniquely identifying an area.\n        Area ID 0.0.0.0 is used for the OSPF backbone.')
f3OspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 2), OspfAreaType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfAreaType.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaType.setDescription('The type of an area.')
f3OspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 3), OspfAuthenticationType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaAuthType.setDescription('The authentication type specifies whether no authentication, simple \n        authentication, or MD5 authentication is required for this area.  Keying\n        information must be configured on a per-interface basis.  This only \n        applies to non-stubby areas.')
f3OspfAreaDefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfAreaDefaultCost.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaDefaultCost.setDescription("The default cost for summary LSA's announced to stubby areas. This only\n        applies to stubby areas.")
f3OspfAreaSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3OspfAreaSpfRuns.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaSpfRuns.setDescription('A count of the number of times the Shortest Path algorithm has been\n        run for this area.')
f3OspfAreaLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3OspfAreaLsaCount.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaLsaCount.setDescription("The total number of link state advertisements\n        in this area's link state database, excluding\n        AS-external LSAs.")
f3OspfAreaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfAreaStorageType.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaStorageType.setDescription('The type of storage configured for this entry.')
f3OspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3OspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3OspfAreaRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3OspfAreaRowStatus value as createAndGo(4).  \n        Upon successful row creation, this object has a\n        value of active(1).\n        \n        The f3OspfAreaRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3OspfIpInterfaceExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3), )
if mibBuilder.loadTexts: f3OspfIpInterfaceExtTable.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtTable.setDescription('A list of entries corresponding to OSPF Interface\n            configuration purposes. This table extends cmIpInterfaceTable \n            from CM-IP-MIB.')
f3OspfIpInterfaceExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1), )
cmIpInterfaceEntry.registerAugmentions(("F3-OSPF-MIB", "f3OspfIpInterfaceExtEntry"))
f3OspfIpInterfaceExtEntry.setIndexNames(*cmIpInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: f3OspfIpInterfaceExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtEntry.setDescription('A conceptual row in the f3OspfIpInterfaceExtTable.')
f3OspfIpInterfaceExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 1), OspfState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtStatus.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtStatus.setDescription('The OSPF admin status for the IP Interface.')
f3OspfIpInterfaceExtAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 2), AreaID().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAreaId.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAreaId.setDescription('The Area ID with which this IP Interface is associated.')
f3OspfIpInterfaceExtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtIfType.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtIfType.setDescription('The OSPF interface type for the IP Interface.')
f3OspfIpInterfaceExtHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 4), HelloRange().clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtHelloInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtHelloInterval.setDescription('The number of seconds between OSPF Hello packets for the IP Interface.')
f3OspfIpInterfaceExtRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRtrDeadInterval.setDescription('The number of seconds that must pass from the last received Hello \n        packet before a neighbor router is declared down.')
f3OspfIpInterfaceExtRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRetransInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRetransInterval.setDescription('The number of seconds for the Retransmit Timer Interval value for \n        the IP Interface. The value is used when retransmitting Database \n        Description and Link State Request packets.')
f3OspfIpInterfaceExtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 7), DesignatedRouterPriority().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtRtrPriority.setDescription('The OSPF router priority for the IP Interface.  The router with the\n        highest priority will be more eligible to become Designated Router.\n        Setting the value to 0 makes the router ineligible to become the \n        Designated Router.')
f3OspfIpInterfaceExtCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtCost.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtCost.setDescription('The cost associated with the IP Interface for use in the Shortest\n        Path calculations.')
f3OspfIpInterfaceExtAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 9), OspfAuthenticationType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAuthType.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAuthType.setDescription('The OSPF authentication type for the IP Interface.  This value \n        supersedes the authentication type defined for the Area.')
f3OspfIpInterfaceExtAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 3, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtAuthKey.setDescription('The OSPF authentication key for the IP Interface.  \n        If the authentication type is Simple, the authentication key is \n        limited to 8 characters.  If the authentication type is MD5, the\n        authentication key is up to 16 characters.')
f3OspfIpMgmtTunnelExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4), )
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtTable.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtTable.setDescription('A list of entries corresponding to OSPF Interface\n            configuration purposes. This table extends ipManagementTunnelTable \n            from CM-IP-MIB.')
f3OspfIpMgmtTunnelExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1), )
ipManagementTunnelEntry.registerAugmentions(("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtEntry"))
f3OspfIpMgmtTunnelExtEntry.setIndexNames(*ipManagementTunnelEntry.getIndexNames())
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtEntry.setDescription('A conceptual row in the f3OspfIpMgmtTunnelExtTable.')
f3OspfIpMgmtTunnelExtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 1), OspfState().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtStatus.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtStatus.setDescription('The OSPF admin status for the IP Management Tunnel.')
f3OspfIpMgmtTunnelExtAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 2), AreaID().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAreaId.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAreaId.setDescription('The Area ID with which this IP Management Tunnel is associated.')
f3OspfIpMgmtTunnelExtIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("pointToMultipoint", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtIfType.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtIfType.setDescription('The OSPF interface type for the IP Management Tunnel.')
f3OspfIpMgmtTunnelExtHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 4), HelloRange().clone(10)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtHelloInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtHelloInterval.setDescription('The number of seconds between OSPF Hello packets\n        for the IP Management Tunnel.')
f3OspfIpMgmtTunnelExtRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(40)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRtrDeadInterval.setDescription('The number of seconds that must pass from the last received Hello \n        packet before a neighbor router is declared down.')
f3OspfIpMgmtTunnelExtRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(5)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRetransInterval.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRetransInterval.setDescription('The number of seconds for the Retransmit Timer Interval value for \n        the IP Interface. The value is used when retransmitting Database \n        Description and Link State Request packets.')
f3OspfIpMgmtTunnelExtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 7), DesignatedRouterPriority().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtRtrPriority.setDescription('The OSPF router priority for the IP Management Tunnel.\n        The router with the highest priority will be more eligible \n        to become Designated Router. Setting the value to 0 makes \n        the router ineligible to become the Designated Router.')
f3OspfIpMgmtTunnelExtCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtCost.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtCost.setDescription('The cost associated with the IP Management Tunnel for use in the \n        Shortest Path calculations.')
f3OspfIpMgmtTunnelExtAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 9), OspfAuthenticationType().clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAuthType.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAuthType.setDescription('The OSPF authentication type for the IP Management Tunnel.  This value \n        supersedes the authentication type defined for the Area.')
f3OspfIpMgmtTunnelExtAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 4, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16)).clone(hexValue="0000000000000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtAuthKey.setDescription('The OSPF authentication key for the IP Management Tunnel.  \n        If the authentication type is Simple, the authentication key is \n        limited to 8 characters.  If the authentication type is MD5, the\n        authentication key is up to 16 characters.')
f3OspfNbrExtTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 5), )
if mibBuilder.loadTexts: f3OspfNbrExtTable.setStatus('current')
if mibBuilder.loadTexts: f3OspfNbrExtTable.setDescription('This table extends ospfNbrTable from OSPF-MIB.')
f3OspfNbrExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 5, 1), )
ospfNbrEntry.registerAugmentions(("F3-OSPF-MIB", "f3OspfNbrExtEntry"))
f3OspfNbrExtEntry.setIndexNames(*ospfNbrEntry.getIndexNames())
if mibBuilder.loadTexts: f3OspfNbrExtEntry.setStatus('current')
if mibBuilder.loadTexts: f3OspfNbrExtEntry.setDescription('A conceptual row in the f3OspfNbrExtTable.')
f3OspfNbrExtRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 1, 5, 1, 1), OspfRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3OspfNbrExtRole.setStatus('current')
if mibBuilder.loadTexts: f3OspfNbrExtRole.setDescription('The OSPF role for this neighbor router.')
f3OspfCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 1))
f3OspfGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2))
f3OspfCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 1, 1)).setObjects(("F3-OSPF-MIB", "f3OspfRouterGroup"), ("F3-OSPF-MIB", "f3OspfAreaGroup"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtGroup"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtGroup"), ("F3-OSPF-MIB", "f3OspfNbrExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfCompliance = f3OspfCompliance.setStatus('current')
if mibBuilder.loadTexts: f3OspfCompliance.setDescription('Describes the requirements for conformance to the F3-OSPF-MIB compilance.')
f3OspfRouterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2, 1)).setObjects(("F3-OSPF-MIB", "f3OspfRouterMetricType"), ("F3-OSPF-MIB", "f3OspfRouterMetric"), ("F3-OSPF-MIB", "f3OspfRouterRedistributionType"), ("F3-OSPF-MIB", "f3OspfRouterNumAttachedAreas"), ("F3-OSPF-MIB", "f3OspfRouterAreaBdrRtrStatus"), ("F3-OSPF-MIB", "f3OspfRouterStorageType"), ("F3-OSPF-MIB", "f3OspfRouterRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfRouterGroup = f3OspfRouterGroup.setStatus('current')
if mibBuilder.loadTexts: f3OspfRouterGroup.setDescription('A collection of objects used to manage the OSPF Router.')
f3OspfAreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2, 2)).setObjects(("F3-OSPF-MIB", "f3OspfAreaType"), ("F3-OSPF-MIB", "f3OspfAreaAuthType"), ("F3-OSPF-MIB", "f3OspfAreaDefaultCost"), ("F3-OSPF-MIB", "f3OspfAreaSpfRuns"), ("F3-OSPF-MIB", "f3OspfAreaLsaCount"), ("F3-OSPF-MIB", "f3OspfAreaStorageType"), ("F3-OSPF-MIB", "f3OspfAreaRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfAreaGroup = f3OspfAreaGroup.setStatus('current')
if mibBuilder.loadTexts: f3OspfAreaGroup.setDescription('A collection of objects used to manage the OSPF Area.')
f3OspfIpInterfaceExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2, 3)).setObjects(("F3-OSPF-MIB", "f3OspfIpInterfaceExtStatus"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtAreaId"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtIfType"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtHelloInterval"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtRtrDeadInterval"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtRetransInterval"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtRtrPriority"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtCost"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtAuthType"), ("F3-OSPF-MIB", "f3OspfIpInterfaceExtAuthKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfIpInterfaceExtGroup = f3OspfIpInterfaceExtGroup.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpInterfaceExtGroup.setDescription('A collection of objects used to manage OSPF configuration\n              of IP Interface.')
f3OspfIpMgmtTunnelExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2, 4)).setObjects(("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtStatus"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtAreaId"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtIfType"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtHelloInterval"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtRtrDeadInterval"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtRetransInterval"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtRtrPriority"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtCost"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtAuthType"), ("F3-OSPF-MIB", "f3OspfIpMgmtTunnelExtAuthKey"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfIpMgmtTunnelExtGroup = f3OspfIpMgmtTunnelExtGroup.setStatus('current')
if mibBuilder.loadTexts: f3OspfIpMgmtTunnelExtGroup.setDescription('A collection of objects used to manage OSPF configuration\n              of IP Management Tunnel.')
f3OspfNbrExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 35, 2, 2, 5)).setObjects(("F3-OSPF-MIB", "f3OspfNbrExtRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3OspfNbrExtGroup = f3OspfNbrExtGroup.setStatus('current')
if mibBuilder.loadTexts: f3OspfNbrExtGroup.setDescription('A collection of objects used to manage OSPF configuration\n              of OSPF Neighbor.')
mibBuilder.exportSymbols("F3-OSPF-MIB", f3OspfNbrExtEntry=f3OspfNbrExtEntry, f3OspfIpMgmtTunnelExtRtrPriority=f3OspfIpMgmtTunnelExtRtrPriority, f3OspfRouterRowStatus=f3OspfRouterRowStatus, f3OspfIpMgmtTunnelExtTable=f3OspfIpMgmtTunnelExtTable, OspfState=OspfState, f3OspfIpMgmtTunnelExtIfType=f3OspfIpMgmtTunnelExtIfType, f3OspfRouterMetric=f3OspfRouterMetric, OspfRole=OspfRole, f3OspfIpInterfaceExtEntry=f3OspfIpInterfaceExtEntry, f3OspfIpInterfaceExtAreaId=f3OspfIpInterfaceExtAreaId, f3OspfIpMgmtTunnelExtCost=f3OspfIpMgmtTunnelExtCost, f3OspfIpInterfaceExtRtrPriority=f3OspfIpInterfaceExtRtrPriority, f3OspfMIB=f3OspfMIB, f3OspfIpMgmtTunnelExtHelloInterval=f3OspfIpMgmtTunnelExtHelloInterval, f3OspfIpMgmtTunnelExtGroup=f3OspfIpMgmtTunnelExtGroup, f3OspfIpInterfaceExtIfType=f3OspfIpInterfaceExtIfType, f3OspfRouterMetricType=f3OspfRouterMetricType, f3OspfAreaRowStatus=f3OspfAreaRowStatus, f3OspfIpMgmtTunnelExtAuthType=f3OspfIpMgmtTunnelExtAuthType, OspfRedistributionType=OspfRedistributionType, f3OspfRouterGroup=f3OspfRouterGroup, f3OspfIpInterfaceExtAuthType=f3OspfIpInterfaceExtAuthType, f3OspfIpInterfaceExtHelloInterval=f3OspfIpInterfaceExtHelloInterval, f3OspfCompliance=f3OspfCompliance, f3OspfIpMgmtTunnelExtStatus=f3OspfIpMgmtTunnelExtStatus, f3OspfNbrExtGroup=f3OspfNbrExtGroup, f3OspfNbrExtRole=f3OspfNbrExtRole, f3OspfIpInterfaceExtTable=f3OspfIpInterfaceExtTable, f3OspfRouterEntry=f3OspfRouterEntry, f3OspfRouterIndex=f3OspfRouterIndex, f3OspfAreaEntry=f3OspfAreaEntry, f3OspfIpInterfaceExtRtrDeadInterval=f3OspfIpInterfaceExtRtrDeadInterval, OspfAreaType=OspfAreaType, f3OspfIpInterfaceExtGroup=f3OspfIpInterfaceExtGroup, f3OspfNbrExtTable=f3OspfNbrExtTable, OspfMetricType=OspfMetricType, f3OspfRouterTable=f3OspfRouterTable, f3OspfAreaType=f3OspfAreaType, f3OspfRouterAreaBdrRtrStatus=f3OspfRouterAreaBdrRtrStatus, f3OspfGroups=f3OspfGroups, f3OspfRouterRedistributionType=f3OspfRouterRedistributionType, f3OspfAreaId=f3OspfAreaId, f3OspfIpInterfaceExtStatus=f3OspfIpInterfaceExtStatus, f3OspfAreaSpfRuns=f3OspfAreaSpfRuns, f3OspfConfigObjects=f3OspfConfigObjects, f3OspfAreaGroup=f3OspfAreaGroup, f3OspfIpMgmtTunnelExtAuthKey=f3OspfIpMgmtTunnelExtAuthKey, f3OspfIpMgmtTunnelExtEntry=f3OspfIpMgmtTunnelExtEntry, f3OspfConformance=f3OspfConformance, f3OspfAreaLsaCount=f3OspfAreaLsaCount, f3OspfAreaAuthType=f3OspfAreaAuthType, f3OspfIpInterfaceExtAuthKey=f3OspfIpInterfaceExtAuthKey, f3OspfIpMgmtTunnelExtRetransInterval=f3OspfIpMgmtTunnelExtRetransInterval, f3OspfAreaDefaultCost=f3OspfAreaDefaultCost, f3OspfCompliances=f3OspfCompliances, f3OspfRouterNumAttachedAreas=f3OspfRouterNumAttachedAreas, f3OspfAreaTable=f3OspfAreaTable, f3OspfIpInterfaceExtRetransInterval=f3OspfIpInterfaceExtRetransInterval, f3OspfRouterStorageType=f3OspfRouterStorageType, PYSNMP_MODULE_ID=f3OspfMIB, f3OspfIpInterfaceExtCost=f3OspfIpInterfaceExtCost, f3OspfIpMgmtTunnelExtRtrDeadInterval=f3OspfIpMgmtTunnelExtRtrDeadInterval, f3OspfAreaStorageType=f3OspfAreaStorageType, f3OspfIpMgmtTunnelExtAreaId=f3OspfIpMgmtTunnelExtAreaId)
