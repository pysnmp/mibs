#
# PySNMP MIB module ADVA-FSPR7-MODULE-ENCRYPTION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/ADVA-FSPR7-MODULE-ENCRYPTION-MIB
# Produced by pysmi-1.1.12 at Tue May 28 11:43:41 2024
# On host fv-az665-912 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
entityFacilityPortNo, entityFacilityExtNo, entityEqptPortNo, entityEqptShelfNo, entityFacilityClassName, entityFacilityShelfNo, entityEqptExtNo, entityFacilitySlotNo, entityEqptClassName, entityEqptSlotNo = mibBuilder.importSymbols("ADVA-FSPR7-MIB", "entityFacilityPortNo", "entityFacilityExtNo", "entityEqptPortNo", "entityEqptShelfNo", "entityFacilityClassName", "entityFacilityShelfNo", "entityEqptExtNo", "entityFacilitySlotNo", "entityEqptClassName", "entityEqptSlotNo")
FspR7RequestErrorType, FspR7RlsAction, FspR7Unsigned32Caps, FspR7SnmpHexString, FspR7RequestErrorTypeAes, FspR7RlsActionCaps = mibBuilder.importSymbols("ADVA-FSPR7-TC-MIB", "FspR7RequestErrorType", "FspR7RlsAction", "FspR7Unsigned32Caps", "FspR7SnmpHexString", "FspR7RequestErrorTypeAes", "FspR7RlsActionCaps")
EntityIndex, entityIndex, fspR7 = mibBuilder.importSymbols("ADVA-MIB", "EntityIndex", "entityIndex", "fspR7")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ModuleIdentity, Bits, ObjectIdentity, Integer32, NotificationType, MibIdentifier, Counter64, Counter32, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ModuleIdentity", "Bits", "ObjectIdentity", "Integer32", "NotificationType", "MibIdentifier", "Counter64", "Counter32", "Unsigned32", "TimeTicks")
TruthValue, TextualConvention, DateAndTime, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DateAndTime", "DisplayString")
moduleEncryptionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5))
moduleEncryptionMIB.setRevisions(('2018-05-28 00:00', '2018-04-17 00:00', '2018-03-15 00:00', '2017-12-07 00:00', '2016-04-01 00:00', '2015-12-10 00:00', '2013-08-20 00:00', '2011-02-16 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: moduleEncryptionMIB.setRevisionsDescriptions(('FSP3000 F7 Release 17.2.2 MIB.', 'FSP3000 F7 Release 17.2.1 MIB.', 'FSP3000 F7 Release 17.1.2 MIB.', 'FSP3000 F7 Release 17.1.1 MIB.', 'FSP3000 F7 Release 16.1.1 MIB.', 'FSP3000 F7 Release 15.2.1 MIB.', 'FSP3000 F7 Release 12.1.1 MIB.', 'FSP3000 F7 Release 10.3.1 MIB.',))
if mibBuilder.loadTexts: moduleEncryptionMIB.setLastUpdated('201805280000Z')
if mibBuilder.loadTexts: moduleEncryptionMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: moduleEncryptionMIB.setContactInfo('EMEA Support\n                  Phone : +49 89 89 0665 848\n                  Fax   : +49 89 89 0665 22848\n                  Email : support@advaoptical.com\n\n                  North American Support\n                  Phone : 886 442 ADVA (2382) (toll-free within the US, Canada and Mexico)\n                  Fax   : + 1 806 741 8529 (elsewhere)\n                  Email : support-usa@advaoptical.com\n\n                  Asia Pacific Support\n                  Phone : + 1 866 442 2382 (other toll-free numbers available in some countries)\n                  Email : support-asia@advaoptical.com')
if mibBuilder.loadTexts: moduleEncryptionMIB.setDescription('This is a MIB definition for ADVA AG Optical Networking module encryption management.')
encryptionMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1))
moduleEncryptionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2))
portEncryptionObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3))
encryptionPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4))
encryptionDiagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5))
class CryptoFspR7CryBoot(TextualConvention, Integer32):
    description = 'Encryption Restart'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("warmStart", 2), ("warmStartFwp", 3), ("coldStart", 4), ("coldStartFwp", 5))

class CryptoFspR7CryBootCaps(TextualConvention, Bits):
    description = 'Encryption Restart'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capWarmStart", 2), ("capWarmStartFwp", 3), ("capColdStart", 4), ("capColdStartFwp", 5))

class CryptoFspR7EnableDisable(TextualConvention, Integer32):
    description = 'Enable/Disable variable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("enable", 1), ("disable", 2))

class CryptoFspR7EnableDisableCaps(TextualConvention, Bits):
    description = 'Enable/Disable variable.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capEnable", 1), ("capDisable", 2))

class CryptoFspR7EncryptionCommunication(TextualConvention, Integer32):
    description = 'Embedded Communication Channel used to support Encryption'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("undefined", 0), ("tcm1", 1), ("tcm2", 2), ("tcm3", 3), ("tcm4", 4), ("tcm5", 5), ("tcm6", 6), ("gcc0", 7), ("gcc1", 8), ("gcc2", 9), ("gcc1gcc2", 10), ("res1", 11), ("res2", 12), ("tcm1tcm2", 13), ("tcm2tcm3", 14), ("tcm3tcm4", 15), ("tcm4tcm5", 16), ("tcm5tcm6", 17), ("none", 18))

class CryptoFspR7EncryptionCommunicationCaps(TextualConvention, Bits):
    description = 'Embedded Communication Channel used to support Encryption'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capTcm1", 1), ("capTcm2", 2), ("capTcm3", 3), ("capTcm4", 4), ("capTcm5", 5), ("capTcm6", 6), ("capGcc0", 7), ("capGcc1", 8), ("capGcc2", 9), ("capGcc1gcc2", 10), ("capRes1", 11), ("capRes2", 12), ("capTcm1tcm2", 13), ("capTcm2tcm3", 14), ("capTcm3tcm4", 15), ("capTcm4tcm5", 16), ("capTcm5tcm6", 17), ("capNone", 18))

class CryptoFspR7EncryptionReset(TextualConvention, Integer32):
    description = "Textual-Convention for module 'reset to factory' operation. The rls(1) value\n        means that 'reset to factory' is not happening. Choosing the rtf(2) value executes the\n        'reset to factory' operation immediately."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("rtf", 2))

class CryptoFspR7EncryptionResetCaps(TextualConvention, Bits):
    description = "Textual-Convention for module 'reset to factory' operation. The rls(1) value\n        means that 'reset to factory' is not happening. Choosing the rtf(2) value executes the\n        'reset to factory' operation immediately."
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capRtf", 2))

class CryptoFspR7EncryptionSwitch(TextualConvention, Integer32):
    description = 'Textual-Convention for disabling the encrypted mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprCryptoOff", 2))

class CryptoFspR7EncryptionSwitchCaps(TextualConvention, Bits):
    description = 'Textual-Convention for disabling the encrypted mode.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprCryptoOff", 2))

class CryptoFspR7ForceKeyExchange(TextualConvention, Integer32):
    description = 'Textual-Convention for forcing the key exchange process between\n        encryption-capable modules. Successful process startup does not mean that\n        whole operation succeeded.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprKeyExchg", 2))

class CryptoFspR7ForceKeyExchangeCaps(TextualConvention, Bits):
    description = 'Textual-Convention for forcing the key exchange process between\n        encryption-capable modules. Successful process startup does not mean that\n        whole operation succeeded.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprKeyExchg", 2))

class CryptoFspR7KeyExchangeForcedClear(TextualConvention, Integer32):
    description = 'Textual-Convention for reseting the key exchange failure status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("reset", 2))

class CryptoFspR7KeyExchangeForcedClearCaps(TextualConvention, Bits):
    description = 'Textual-Convention for reseting the key exchange failure status.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capReset", 2))

class CryptoFspR7SelfTestOperation(TextualConvention, Integer32):
    description = 'Encryption selftest'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("undefined", 0), ("rls", 1), ("oprSelfTest", 2))

class CryptoFspR7SelfTestOperationCaps(TextualConvention, Bits):
    description = 'Encryption selftest'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capRls", 1), ("capOprSelfTest", 2))

class CryptoFspR7SessionKeyLifetime(TextualConvention, Integer32):
    description = 'Textual-Convention presenting available key lifetime periods for an encrypted sessions.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("undefined", 0), ("lifetime30min", 1), ("lifetime1h", 2), ("lifetime2h", 3), ("lifetime3h", 4), ("lifetime6h", 5), ("lifetime12h", 6), ("lifetime1d", 7), ("lifetime2d", 8), ("lifetime3d", 9), ("lifetime1w", 10), ("lifetime2w", 11), ("lifetime3w", 12), ("lifetimeMax", 13), ("lifetime330min", 14), ("lifetime11h", 15))

class CryptoFspR7SessionKeyLifetimeCaps(TextualConvention, Bits):
    description = 'Textual-Convention presenting available key lifetime periods for an encrypted sessions.'
    status = 'current'
    namedValues = NamedValues(("capUndefined", 0), ("capLifetime30min", 1), ("capLifetime1h", 2), ("capLifetime2h", 3), ("capLifetime3h", 4), ("capLifetime6h", 5), ("capLifetime12h", 6), ("capLifetime1d", 7), ("capLifetime2d", 8), ("capLifetime3d", 9), ("capLifetime1w", 10), ("capLifetime2w", 11), ("capLifetime3w", 12), ("capLifetimeMax", 13), ("capLifetime330min", 14), ("capLifetime11h", 15))

cryptoOfficerPassword = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoOfficerPassword.setStatus('current')
if mibBuilder.loadTexts: cryptoOfficerPassword.setDescription('This object must be present in every set-request regarding encryption functionality.')
cryptoOfficerPasswordError = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("undefined", 0), ("passwdOk", 1), ("passwdInvalid", 2), ("passwdRejected", 3), ("passwdNotInit", 4), ("passwdTooSimple", 5), ("passwdValidationAborted", 6), ("none", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoOfficerPasswordError.setStatus('current')
if mibBuilder.loadTexts: cryptoOfficerPasswordError.setDescription('Last error related to set-request perform on that table.')
cryptoOfficerPasswordReqId = MibScalar((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoOfficerPasswordReqId.setStatus('current')
if mibBuilder.loadTexts: cryptoOfficerPasswordReqId.setDescription('Set-Request id for which cryptoOfficerPasswordError contains value.')
cryptoModuleConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10), )
if mibBuilder.loadTexts: cryptoModuleConfigTable.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigTable.setDescription('This table contains encryption-related writeable parameters defined per module.')
cryptoModuleConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigIndex"))
if mibBuilder.loadTexts: cryptoModuleConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigEntry.setDescription('Every row of this table represents an encryption-capable module.')
cryptoModuleConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoModuleConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigIndex.setDescription('Address of an encryption capable module.')
cryptoModuleConfigCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigCryptoOfficerPassword.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigCryptoOfficerPassword.setDescription('The current Crypto Officer password. It may be only modified, but cannot be read. Read attempt\n        of this object will result with noSuchName error.')
cryptoModuleConfigResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 3), CryptoFspR7EncryptionReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigResetToFactory.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigResetToFactory.setDescription("Executes 'reset to factory' action.")
cryptoModuleConfigFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 4), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareUpdateState.setDescription('Determines if it is allowed for a module to perform firmware upgrade.')
cryptoModuleConfigFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 5), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigFirmwareVersion.setDescription('Firmware package version designated for an upgrade.')
cryptoModuleConfigSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 10, 1, 6), CryptoFspR7SelfTestOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleConfigSelfTestOperation.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleConfigSelfTestOperation.setDescription('Starts self-tests.')
cryptoModuleStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11), )
if mibBuilder.loadTexts: cryptoModuleStatusTable.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusTable.setDescription('This table contains encryption-related readable parameters defined per module.')
cryptoModuleStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoModuleConfigIndex"))
if mibBuilder.loadTexts: cryptoModuleStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusEntry.setDescription('Every row of this table represents an encryption-capable module.')
cryptoModuleStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoModuleStatusIndex.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusIndex.setDescription('Address of an encryption capable module.')
cryptoModuleStatusFailureLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusFailureLoginCount.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusFailureLoginCount.setDescription('Number of unsuccessful Crypto Officer log-in attempts.')
cryptoModuleStatusSuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusSuccessfulLoginDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusSuccessfulLoginDateAndTime.setDescription('The date and time of a last successful Crypto Officer login.')
cryptoModuleStatusUnsuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusUnsuccessfulLoginDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusUnsuccessfulLoginDateAndTime.setDescription('The date and time of a last unsuccessful Crypto Officer login.')
cryptoModuleStatusResetToFactoryCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 11, 1, 5), CryptoFspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStatusResetToFactoryCapability.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStatusResetToFactoryCapability.setDescription('The status of possibility to perform Reset To Factory operation. If disable(2) then\n        cryptoModuleConfigResetToFactory cannot be used, otherwise operation will fail.')
cryptoModuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20), )
if mibBuilder.loadTexts: cryptoModuleTable.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleTable.setDescription('This table contains encryption-related parameters defined per module.')
cryptoModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: cryptoModuleEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleEntry.setDescription('Every row of this table represents an encryption-capable module.')
cryptoModuleCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleCryptoOfficerPassword.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCryptoOfficerPassword.setDescription('The current Crypto Officer password. It may be only modified, but cannot be read. Read attempt\n        of this object will result with noSuchName error.')
cryptoModuleResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 2), CryptoFspR7EncryptionReset()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleResetToFactory.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleResetToFactory.setDescription("Executes 'reset to factory' action.")
cryptoModuleFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 3), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleFirmwareUpdateState.setDescription('Determines if it is allowed for a module to perform firmware upgrade.')
cryptoModuleFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 4), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleFirmwareVersion.setDescription('Firmware package version designated for an upgrade.')
cryptoModuleSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 5), CryptoFspR7SelfTestOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleSelfTestOperation.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleSelfTestOperation.setDescription('Starts self-tests.')
cryptoModuleFailureLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleFailureLoginCount.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleFailureLoginCount.setDescription('Number of unsuccessful Crypto Officer log-in attempts.')
cryptoModuleSuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleSuccessfulLoginDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleSuccessfulLoginDateAndTime.setDescription('The date and time of a last successful Crypto Officer login.')
cryptoModuleUnsuccessfulLoginDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 8), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleUnsuccessfulLoginDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleUnsuccessfulLoginDateAndTime.setDescription('The date and time of a last unsuccessful Crypto Officer login.')
cryptoModuleFwpHash = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 9), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleFwpHash.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleFwpHash.setDescription('Hash value calculated for the firmware package using sha-256. Hash value is used to verify the firmware package has not been modified or corrupted.')
cryptoModuleCryBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 10), CryptoFspR7CryBoot()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoModuleCryBoot.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCryBoot.setDescription('Encryption Restart')
cryptoModuleStbyFwpHash = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 11), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleStbyFwpHash.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleStbyFwpHash.setDescription('Hash value calculated for the standby firmware package of the using sha-256. Hash value is used to verify the firmware package has not been modified or corrupted.')
cryptoModuleSelfTestExecute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleSelfTestExecute.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleSelfTestExecute.setDescription('Executed selftests')
cryptoModuleSelfTestResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 20, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleSelfTestResult.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleSelfTestResult.setDescription('Result of Selftest')
cryptoModuleCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21), )
if mibBuilder.loadTexts: cryptoModuleCapTable.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapTable.setDescription('This table contains encryption-related parameters defined per module.')
cryptoModuleCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityEqptShelfNo"), (0, "ADVA-FSPR7-MIB", "entityEqptSlotNo"), (0, "ADVA-FSPR7-MIB", "entityEqptPortNo"), (0, "ADVA-FSPR7-MIB", "entityEqptExtNo"), (0, "ADVA-FSPR7-MIB", "entityEqptClassName"))
if mibBuilder.loadTexts: cryptoModuleCapEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapEntry.setDescription('Every row of this table represents an encryption-capable module.')
cryptoModuleCapCryptoOfficerPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapCryptoOfficerPassword.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapCryptoOfficerPassword.setDescription('The current Crypto Officer password. It may be only modified, but cannot be read. Read attempt\n        of this object will result with noSuchName error.')
cryptoModuleCapResetToFactory = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 2), CryptoFspR7EncryptionResetCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapResetToFactory.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapResetToFactory.setDescription("Executes 'reset to factory' action.")
cryptoModuleCapFirmwareUpdateState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 3), CryptoFspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapFirmwareUpdateState.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapFirmwareUpdateState.setDescription('Determines if it is allowed for a module to perform firmware upgrade.')
cryptoModuleCapFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapFirmwareVersion.setDescription('Firmware package version designated for an upgrade.')
cryptoModuleCapSelfTestOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 5), CryptoFspR7SelfTestOperationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapSelfTestOperation.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapSelfTestOperation.setDescription('Starts self-tests.')
cryptoModuleCapCryBoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 2, 21, 1, 6), CryptoFspR7CryBootCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoModuleCapCryBoot.setStatus('current')
if mibBuilder.loadTexts: cryptoModuleCapCryBoot.setDescription('Encryption Restart')
cryptoPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12), )
if mibBuilder.loadTexts: cryptoPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigTable.setDescription('This table contains encryption-related writeable parameters defined per port.')
cryptoPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortConfigIndex"))
if mibBuilder.loadTexts: cryptoPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigEntry.setDescription('Every row of this table represents an encryption-capable port.')
cryptoPortConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoPortConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigIndex.setDescription('Address of an encryption capable port.')
cryptoPortConfigAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 2), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigAuthKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigAuthKey.setDescription('Encryption password being an input to generate an authentication key used to\n        traffic encryption between ports. This object can be write only. Read attempt\n        will fail with noSuchName error.')
cryptoPortConfigAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 3), CryptoFspR7SessionKeyLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigAuthKeyLifeTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigAuthKeyLifeTime.setDescription('Determines a life period of an introduced authentication key for a traffic encryption.')
cryptoPortConfigEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 4), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOffState.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOffState.setDescription('Enable/disable possibility of using encryption switch. This is an additional trigger required to\n        make a transition into transparent mode in two steps.')
cryptoPortConfigEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 5), CryptoFspR7EncryptionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOff.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigEncryptionOff.setDescription('Disable/enable encryption switch.')
cryptoPortConfigForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 6), CryptoFspR7ForceKeyExchange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigForceKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigForceKeyExchange.setDescription('Force key exchange.')
cryptoPortConfigKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 12, 1, 7), CryptoFspR7KeyExchangeForcedClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortConfigKeyExchangeForcedClear.setStatus('current')
if mibBuilder.loadTexts: cryptoPortConfigKeyExchangeForcedClear.setDescription('Clears on demand the alarmEncryptionPortKeyExchangeForced condition.')
cryptoPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13), )
if mibBuilder.loadTexts: cryptoPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusTable.setDescription('This table contains encryption-related readable parameters defined per port.')
cryptoPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoPortStatusIndex"))
if mibBuilder.loadTexts: cryptoPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusEntry.setDescription('Every row of this table represents an encryption-capable port.')
cryptoPortStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 1), EntityIndex())
if mibBuilder.loadTexts: cryptoPortStatusIndex.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusIndex.setDescription('Address of an encryption capable module.')
cryptoPortStatusEncryptionOffTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 2), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffTimeRemaining.setDescription('Informs about amount of minutes remaining to restore traffic encryption.')
cryptoPortStatusFailureKeyExchangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusFailureKeyExchangeCount.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusFailureKeyExchangeCount.setDescription('Numbers of unsuccessful encryption key exchanges since the successful one.')
cryptoPortStatusSuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusSuccessfulKeyExchangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusSuccessfulKeyExchangeDateAndTime.setDescription('The date and time of a recent successful encryption key exchange.')
cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime.setDescription('The date and time of a recent unsuccessful encryption key exchange.')
cryptoPortStatusAuthKeyLifeTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 6), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusAuthKeyLifeTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusAuthKeyLifeTimeRemaining.setDescription('Remaining time for cryptoPortConfigAuthKeyLifeTime timer to stop counting.')
cryptoPortStatusEncryptionOffCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 13, 1, 7), CryptoFspR7EnableDisable()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffCapability.setStatus('current')
if mibBuilder.loadTexts: cryptoPortStatusEncryptionOffCapability.setDescription('Capability for encryption switch.')
cryptoPortTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20), )
if mibBuilder.loadTexts: cryptoPortTable.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTable.setDescription('This table contains encryption-related parameters defined per port.')
cryptoPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryptoPortEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoPortEntry.setDescription('Every row of this table represents an encryption-capable port.')
cryptoPortAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 1), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortAuthKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortAuthKey.setDescription('Encryption password being an input to generate an authentication key used to\n        traffic encryption between ports. This object can be write only. Read attempt\n        will fail with noSuchName error.')
cryptoPortAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 2), CryptoFspR7SessionKeyLifetime()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTime.setDescription('Determines a life period of an introduced authentication key for a traffic encryption.')
cryptoPortEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 3), CryptoFspR7EnableDisable()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortEncryptionOffState.setStatus('current')
if mibBuilder.loadTexts: cryptoPortEncryptionOffState.setDescription('Enable/disable possibility of using encryption switch. This is an additional trigger required to\n        make a transition into transparent mode in two steps.')
cryptoPortEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 4), CryptoFspR7EncryptionSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortEncryptionOff.setStatus('current')
if mibBuilder.loadTexts: cryptoPortEncryptionOff.setDescription('Disable/enable encryption switch.')
cryptoPortForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 5), CryptoFspR7ForceKeyExchange()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortForceKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cryptoPortForceKeyExchange.setDescription('Force key exchange.')
cryptoPortKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 6), CryptoFspR7KeyExchangeForcedClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortKeyExchangeForcedClear.setStatus('current')
if mibBuilder.loadTexts: cryptoPortKeyExchangeForcedClear.setDescription('Clears on demand the alarmEncryptionPortKeyExchangeForced condition.')
cryptoPortEncryptionOffTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 7), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortEncryptionOffTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cryptoPortEncryptionOffTimeRemaining.setDescription('Informs about amount of minutes remaining to restore traffic encryption.')
cryptoPortFailureKeyExchangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 8), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortFailureKeyExchangeCount.setStatus('current')
if mibBuilder.loadTexts: cryptoPortFailureKeyExchangeCount.setDescription('Numbers of unsuccessful encryption key exchanges since the successful one.')
cryptoPortSuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 9), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortSuccessfulKeyExchangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortSuccessfulKeyExchangeDateAndTime.setDescription('The date and time of a recent successful encryption key exchange.')
cryptoPortUnsuccessfulKeyExchangeDateAndTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortUnsuccessfulKeyExchangeDateAndTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortUnsuccessfulKeyExchangeDateAndTime.setDescription('The date and time of a recent unsuccessful encryption key exchange.')
cryptoPortAuthKeyLifeTimeRemaining = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 11), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTimeRemaining.setStatus('current')
if mibBuilder.loadTexts: cryptoPortAuthKeyLifeTimeRemaining.setDescription('Remaining time for cryptoPortConfigAuthKeyLifeTime timer to stop counting.')
cryptoPortTagFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 12), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 100), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortTagFailureLimit.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTagFailureLimit.setDescription("Number of Ethernet packets received with a tag errors in the specified time window (TAGFAIL-TIMER) that causes the 'Tag Error-Limit Reached' (TAG-FAIL) alarm to be generated")
cryptoPortTagFailurePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 13), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 28800), ValueRangeConstraint(4294967295, 4294967295), ))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortTagFailurePeriod.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTagFailurePeriod.setDescription('Time window Ethernet packets with tag errors are counted/accumualted for alarm purposes')
cryptoPortTagReceiveFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 14), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 3), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortTagReceiveFailures.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTagReceiveFailures.setDescription('Count of Ethernet packets received with a tag error in the specified time window (TAGFAIL-TIMER)')
cryptoPortTagClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 15), CryptoFspR7KeyExchangeForcedClear()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortTagClear.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTagClear.setDescription('Allows the operator to reset (zero) the Ethernet packet tag error count for the current specified time window (TAGFAIL-TIME)')
cryptoPortEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 16), CryptoFspR7EncryptionCommunication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortEncryptionChannel.setStatus('current')
if mibBuilder.loadTexts: cryptoPortEncryptionChannel.setDescription('Embedded Communication Channel used to support Encryption')
cryptoPortTagFailTimeExpiration = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 17), Unsigned32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortTagFailTimeExpiration.setStatus('current')
if mibBuilder.loadTexts: cryptoPortTagFailTimeExpiration.setDescription('Count down of time window for Ethernet packets with tag errors for alarm purposes')
cryptoPortGenAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 18), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortGenAuthKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortGenAuthKey.setDescription('Generate new authentication key')
cryptoPortAcceptFpKeyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 19), FspR7RlsAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cryptoPortAcceptFpKeyRx.setStatus('current')
if mibBuilder.loadTexts: cryptoPortAcceptFpKeyRx.setDescription('Accept Authentication key received from far end')
cryptoPortFpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 20), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortFpKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortFpKey.setDescription('Authentication Key')
cryptoPortFpKeyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 20, 1, 21), FspR7SnmpHexString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortFpKeyRx.setStatus('current')
if mibBuilder.loadTexts: cryptoPortFpKeyRx.setDescription('Authentication key received from the far end')
cryptoPortCapTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21), )
if mibBuilder.loadTexts: cryptoPortCapTable.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapTable.setDescription('This table contains encryption-related parameters defined per port.')
cryptoPortCapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryptoPortCapEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapEntry.setDescription('Every row of this table represents an encryption-capable port.')
cryptoPortCapAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapAuthKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapAuthKey.setDescription('Encryption password being an input to generate an authentication key used to\n        traffic encryption between ports. This object can be write only. Read attempt\n        will fail with noSuchName error.')
cryptoPortCapAuthKeyLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 2), CryptoFspR7SessionKeyLifetimeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapAuthKeyLifeTime.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapAuthKeyLifeTime.setDescription('Determines a life period of an introduced authentication key for a traffic encryption.')
cryptoPortCapEncryptionOffState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 3), CryptoFspR7EnableDisableCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapEncryptionOffState.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapEncryptionOffState.setDescription('Enable/disable possibility of using encryption switch. This is an additional trigger required to\n        make a transition into transparent mode in two steps.')
cryptoPortCapEncryptionOff = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 4), CryptoFspR7EncryptionSwitchCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapEncryptionOff.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapEncryptionOff.setDescription('Disable/enable encryption switch.')
cryptoPortCapForceKeyExchange = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 5), CryptoFspR7ForceKeyExchangeCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapForceKeyExchange.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapForceKeyExchange.setDescription('Force key exchange.')
cryptoPortCapKeyExchangeForcedClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 6), CryptoFspR7KeyExchangeForcedClearCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapKeyExchangeForcedClear.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapKeyExchangeForcedClear.setDescription('Clears on demand the alarmEncryptionPortKeyExchangeForced condition.')
cryptoPortCapTagFailureLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 7), FspR7Unsigned32Caps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapTagFailureLimit.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapTagFailureLimit.setDescription("Number of Ethernet packets received with a tag errors in the specified time window (TAGFAIL-TIMER) that causes the 'Tag Error-Limit Reached' (TAG-FAIL) alarm to be generated")
cryptoPortCapTagFailurePeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 8), FspR7Unsigned32Caps()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapTagFailurePeriod.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapTagFailurePeriod.setDescription('Time window Ethernet packets with tag errors are counted/accumualted for alarm purposes')
cryptoPortCapTagClear = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 9), CryptoFspR7KeyExchangeForcedClearCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapTagClear.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapTagClear.setDescription('Allows the operator to reset (zero) the Ethernet packet tag error count for the current specified time window (TAGFAIL-TIME)')
cryptoPortCapEncryptionChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 10), CryptoFspR7EncryptionCommunicationCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapEncryptionChannel.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapEncryptionChannel.setDescription('Embedded Communication Channel used to support Encryption')
cryptoPortCapGenAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 11), FspR7RlsActionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapGenAuthKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapGenAuthKey.setDescription('Generate new authentication key')
cryptoPortCapAcceptAuthRxKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 3, 21, 1, 12), FspR7RlsActionCaps()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoPortCapAcceptAuthRxKey.setStatus('current')
if mibBuilder.loadTexts: cryptoPortCapAcceptAuthRxKey.setDescription('Accept Authentication key received from far end')
intervalEncryptionSublayerPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1), )
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTable.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTable.setDescription('This table contains encryption-related performance monitoring 15-min\n        values related to channel ports.')
intervalEncryptionSublayerPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm15minNumber"))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEntry.setDescription('Every row of this table represents performance monitoring entry.')
intervalEncryptionSublayerPm15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 15 minute\n        interval, and the interval identified by N is the interval\n        immediately preceding the one identified by N-1.')
intervalEncryptionSublayerPm15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunSeconds.setDescription('Informs about time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds.setDescription('Informs about errorous time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setDescription('Informs about degraded time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minValidFlag.setDescription('Valid Flag')
intervalEncryptionSublayerPm15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 1, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm15minTimeStamp.setDescription('Timestamp')
intervalEncryptionSublayerPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2), )
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTable.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTable.setDescription('This table contains interval encryption-related performance monitoring 15-min\n        values related to channel ports.')
intervalEncryptionSublayerPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "intervalEncryptionSublayerPm1dayNumber"))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEntry.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEntry.setDescription('Every row of this table represents performance monitoring entry.')
intervalEncryptionSublayerPm1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayNumber.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayNumber.setDescription('A number, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 1 day\n        interval.')
intervalEncryptionSublayerPm1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunSeconds.setDescription('Informs about time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setDescription('Informs about errorous time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setDescription('Informs about degraded time period (seconds) during encryption mode.')
intervalEncryptionSublayerPm1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayValidFlag.setDescription('Valid Flag')
intervalEncryptionSublayerPm1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 2, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: intervalEncryptionSublayerPm1dayTimeStamp.setDescription('Timestamp')
currentEncryptionSublayerPm15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3), )
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minTable.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minTable.setDescription('This table contains current encryption-related performance monitoring 15-min\n        values related to channel ports.')
currentEncryptionSublayerPm15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEntry.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEntry.setDescription('Every row of this table represents performance monitoring entry.')
currentEncryptionSublayerPm15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunSeconds.setDescription('Encryption running seconds')
currentEncryptionSublayerPm15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunErrorSeconds.setDescription('Encryption Errored Seconds')
currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds.setDescription('Encryption in degrade mode seconds')
currentEncryptionSublayerPm15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm15minElapsedTime.setDescription('Elapsed 15Min')
currentEncryptionSublayerPm1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4), )
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayTable.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayTable.setDescription('This table contains current encryption-related performance monitoring 1-day\n        values related to channel ports.')
currentEncryptionSublayerPm1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1), ).setIndexNames((0, "ADVA-MIB", "entityIndex"))
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEntry.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEntry.setDescription('Every row of this table represents performance monitoring entry.')
currentEncryptionSublayerPm1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunSeconds.setDescription('Encryption running seconds')
currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds.setDescription('Encryption Errored Seconds')
currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds.setDescription('Encryption in degrade mode seconds')
currentEncryptionSublayerPm1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: currentEncryptionSublayerPm1dayElapsedTime.setDescription('Elapsed 1Day')
cryFacilityCurrent15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10), )
if mibBuilder.loadTexts: cryFacilityCurrent15minTable.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minTable.setDescription('This table contains current encryption-related performance monitoring 15-min\n        values related to channel ports.')
cryFacilityCurrent15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryFacilityCurrent15minEntry.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minEntry.setDescription('Every row of this table represents performance monitoring entry.')
cryFacilityCurrent15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunSeconds.setDescription('Encryption running seconds')
cryFacilityCurrent15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunErrorSeconds.setDescription('Encryption Errored Seconds')
cryFacilityCurrent15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minEncryptionRunDegradeSeconds.setDescription('Encryption in degrade mode seconds')
cryFacilityCurrent15minElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 10, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 9000), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent15minElapsedTime.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent15minElapsedTime.setDescription('Elapsed 15Min')
cryFacilityCurrent1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11), )
if mibBuilder.loadTexts: cryFacilityCurrent1dayTable.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayTable.setDescription('This table contains current encryption-related performance monitoring 1-day\n        values related to channel ports.')
cryFacilityCurrent1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"))
if mibBuilder.loadTexts: cryFacilityCurrent1dayEntry.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayEntry.setDescription('Every row of this table represents performance monitoring entry.')
cryFacilityCurrent1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunSeconds.setDescription('Encryption running seconds')
cryFacilityCurrent1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunErrorSeconds.setDescription('Encryption Errored Seconds')
cryFacilityCurrent1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayEncryptionRunDegradeSeconds.setDescription('Encryption in degrade mode seconds')
cryFacilityCurrent1dayElapsedTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 11, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 86400), ValueRangeConstraint(-2147483648, -2147483648), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityCurrent1dayElapsedTime.setStatus('current')
if mibBuilder.loadTexts: cryFacilityCurrent1dayElapsedTime.setDescription('Elapsed 1Day')
cryFacilityHistorical15minTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12), )
if mibBuilder.loadTexts: cryFacilityHistorical15minTable.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minTable.setDescription('This table contains historical encryption-related performance monitoring 15-min\n        values related to channel ports.')
cryFacilityHistorical15minEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryFacilityHistorical15minNumber"))
if mibBuilder.loadTexts: cryFacilityHistorical15minEntry.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minEntry.setDescription('Every row of this table represents performance monitoring entry.')
cryFacilityHistorical15minNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: cryFacilityHistorical15minNumber.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minNumber.setDescription('A number between 1 and 96, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 15 minute\n        interval, and the interval identified by N is the interval\n        immediately preceding the one identified by N-1.')
cryFacilityHistorical15minEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunSeconds.setDescription('Informs about time period (seconds) during encryption mode.')
cryFacilityHistorical15minEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunErrorSeconds.setDescription('Informs about errorous time period (seconds) during encryption mode.')
cryFacilityHistorical15minEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minEncryptionRunDegradeSeconds.setDescription('Informs about degraded time period (seconds) during encryption mode.')
cryFacilityHistorical15minValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minValidFlag.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minValidFlag.setDescription('Valid Flag')
cryFacilityHistorical15minTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 12, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical15minTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical15minTimeStamp.setDescription('Timestamp')
cryFacilityHistorical1dayTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13), )
if mibBuilder.loadTexts: cryFacilityHistorical1dayTable.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayTable.setDescription('This table contains historical encryption-related performance monitoring 1-day\n        values related to channel ports.')
cryFacilityHistorical1dayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1), ).setIndexNames((0, "ADVA-FSPR7-MIB", "entityFacilityShelfNo"), (0, "ADVA-FSPR7-MIB", "entityFacilitySlotNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityPortNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityExtNo"), (0, "ADVA-FSPR7-MIB", "entityFacilityClassName"), (0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryFacilityHistorical1dayNumber"))
if mibBuilder.loadTexts: cryFacilityHistorical1dayEntry.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayEntry.setDescription('Every row of this table represents performance monitoring entry.')
cryFacilityHistorical1dayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31)))
if mibBuilder.loadTexts: cryFacilityHistorical1dayNumber.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayNumber.setDescription('A number, which identifies the interval for\n        which the set of statistics is available. The interval\n        identified by 1 is the most recently completed 1 day\n        interval.')
cryFacilityHistorical1dayEncryptionRunSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunSeconds.setDescription('Informs about time period (seconds) during encryption mode.')
cryFacilityHistorical1dayEncryptionRunErrorSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunErrorSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunErrorSeconds.setDescription('Informs about errorous time period (seconds) during encryption mode.')
cryFacilityHistorical1dayEncryptionRunDegradeSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunDegradeSeconds.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayEncryptionRunDegradeSeconds.setDescription('Informs about degraded time period (seconds) during encryption mode.')
cryFacilityHistorical1dayValidFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayValidFlag.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayValidFlag.setDescription('Valid Flag')
cryFacilityHistorical1dayTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 4, 13, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryFacilityHistorical1dayTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cryFacilityHistorical1dayTimeStamp.setDescription('Timestamp')
cryptoRequestErrorTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1), )
if mibBuilder.loadTexts: cryptoRequestErrorTable.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorTable.setDescription('This table shows a list of last 100 snmpset requests which failed.')
cryptoRequestErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1, 1), ).setIndexNames((0, "ADVA-FSPR7-MODULE-ENCRYPTION-MIB", "cryptoRequestErrorId"))
if mibBuilder.loadTexts: cryptoRequestErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorEntry.setDescription('Entry of cryptoRequestError')
cryptoRequestErrorId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoRequestErrorId.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorId.setDescription('Request ID')
cryptoRequestErrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1, 1, 2), FspR7RequestErrorType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoRequestErrorType.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorType.setDescription('Generic error code')
cryptoRequestErrorAesSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1, 1, 3), FspR7RequestErrorTypeAes()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoRequestErrorAesSpecific.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorAesSpecific.setDescription('Specific error code for Encryption Module')
cryptoRequestErrorTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 11, 5, 1, 5, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cryptoRequestErrorTimeStamp.setStatus('current')
if mibBuilder.loadTexts: cryptoRequestErrorTimeStamp.setDescription('Timestamp')
mibBuilder.exportSymbols("ADVA-FSPR7-MODULE-ENCRYPTION-MIB", currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds=currentEncryptionSublayerPm15minEncryptionRunDegradeSeconds, CryptoFspR7KeyExchangeForcedClear=CryptoFspR7KeyExchangeForcedClear, cryFacilityHistorical15minEncryptionRunDegradeSeconds=cryFacilityHistorical15minEncryptionRunDegradeSeconds, encryptionDiagnostics=encryptionDiagnostics, currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds=currentEncryptionSublayerPm1dayEncryptionRunDegradeSeconds, cryptoModuleTable=cryptoModuleTable, cryptoModuleCapFirmwareUpdateState=cryptoModuleCapFirmwareUpdateState, cryptoModuleCapSelfTestOperation=cryptoModuleCapSelfTestOperation, cryptoPortFpKey=cryptoPortFpKey, cryptoModuleConfigResetToFactory=cryptoModuleConfigResetToFactory, cryptoPortConfigEncryptionOff=cryptoPortConfigEncryptionOff, cryFacilityHistorical15minNumber=cryFacilityHistorical15minNumber, cryptoPortConfigForceKeyExchange=cryptoPortConfigForceKeyExchange, cryptoPortConfigKeyExchangeForcedClear=cryptoPortConfigKeyExchangeForcedClear, cryFacilityCurrent1dayTable=cryFacilityCurrent1dayTable, cryptoPortForceKeyExchange=cryptoPortForceKeyExchange, cryFacilityCurrent15minTable=cryFacilityCurrent15minTable, cryptoPortTagClear=cryptoPortTagClear, cryptoRequestErrorTimeStamp=cryptoRequestErrorTimeStamp, cryptoPortCapAuthKey=cryptoPortCapAuthKey, cryptoModuleSelfTestOperation=cryptoModuleSelfTestOperation, cryptoModuleConfigEntry=cryptoModuleConfigEntry, cryptoPortCapAcceptAuthRxKey=cryptoPortCapAcceptAuthRxKey, cryFacilityHistorical15minValidFlag=cryFacilityHistorical15minValidFlag, cryptoPortCapTable=cryptoPortCapTable, cryptoRequestErrorEntry=cryptoRequestErrorEntry, cryFacilityCurrent1dayEncryptionRunSeconds=cryFacilityCurrent1dayEncryptionRunSeconds, cryptoPortConfigAuthKey=cryptoPortConfigAuthKey, cryptoPortConfigEncryptionOffState=cryptoPortConfigEncryptionOffState, cryFacilityHistorical15minEntry=cryFacilityHistorical15minEntry, cryptoModuleStatusIndex=cryptoModuleStatusIndex, cryptoPortConfigIndex=cryptoPortConfigIndex, intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds=intervalEncryptionSublayerPm15minEncryptionRunErrorSeconds, cryFacilityCurrent15minEntry=cryFacilityCurrent15minEntry, cryptoModuleStatusSuccessfulLoginDateAndTime=cryptoModuleStatusSuccessfulLoginDateAndTime, currentEncryptionSublayerPm15minEntry=currentEncryptionSublayerPm15minEntry, currentEncryptionSublayerPm1dayEntry=currentEncryptionSublayerPm1dayEntry, cryFacilityCurrent15minEncryptionRunDegradeSeconds=cryFacilityCurrent15minEncryptionRunDegradeSeconds, cryptoRequestErrorTable=cryptoRequestErrorTable, CryptoFspR7SelfTestOperation=CryptoFspR7SelfTestOperation, CryptoFspR7SelfTestOperationCaps=CryptoFspR7SelfTestOperationCaps, CryptoFspR7EncryptionResetCaps=CryptoFspR7EncryptionResetCaps, CryptoFspR7CryBootCaps=CryptoFspR7CryBootCaps, currentEncryptionSublayerPm15minEncryptionRunErrorSeconds=currentEncryptionSublayerPm15minEncryptionRunErrorSeconds, cryptoPortStatusEntry=cryptoPortStatusEntry, cryFacilityHistorical15minTimeStamp=cryFacilityHistorical15minTimeStamp, CryptoFspR7EncryptionReset=CryptoFspR7EncryptionReset, CryptoFspR7EncryptionSwitchCaps=CryptoFspR7EncryptionSwitchCaps, cryptoModuleFwpHash=cryptoModuleFwpHash, cryptoOfficerPasswordError=cryptoOfficerPasswordError, cryptoModuleCryBoot=cryptoModuleCryBoot, cryptoModuleCapEntry=cryptoModuleCapEntry, cryptoPortEntry=cryptoPortEntry, cryptoModuleConfigFirmwareVersion=cryptoModuleConfigFirmwareVersion, cryptoModuleStatusEntry=cryptoModuleStatusEntry, cryptoPortAuthKey=cryptoPortAuthKey, CryptoFspR7KeyExchangeForcedClearCaps=CryptoFspR7KeyExchangeForcedClearCaps, currentEncryptionSublayerPm15minTable=currentEncryptionSublayerPm15minTable, cryptoPortUnsuccessfulKeyExchangeDateAndTime=cryptoPortUnsuccessfulKeyExchangeDateAndTime, cryptoPortTagFailurePeriod=cryptoPortTagFailurePeriod, cryptoPortCapEncryptionChannel=cryptoPortCapEncryptionChannel, currentEncryptionSublayerPm15minElapsedTime=currentEncryptionSublayerPm15minElapsedTime, cryptoPortStatusEncryptionOffCapability=cryptoPortStatusEncryptionOffCapability, cryptoPortEncryptionOffState=cryptoPortEncryptionOffState, cryptoModuleStatusFailureLoginCount=cryptoModuleStatusFailureLoginCount, cryptoPortCapAuthKeyLifeTime=cryptoPortCapAuthKeyLifeTime, cryptoPortFailureKeyExchangeCount=cryptoPortFailureKeyExchangeCount, cryptoModuleFailureLoginCount=cryptoModuleFailureLoginCount, cryptoModuleCapCryptoOfficerPassword=cryptoModuleCapCryptoOfficerPassword, CryptoFspR7EnableDisableCaps=CryptoFspR7EnableDisableCaps, cryptoPortStatusSuccessfulKeyExchangeDateAndTime=cryptoPortStatusSuccessfulKeyExchangeDateAndTime, CryptoFspR7SessionKeyLifetime=CryptoFspR7SessionKeyLifetime, currentEncryptionSublayerPm1dayElapsedTime=currentEncryptionSublayerPm1dayElapsedTime, cryptoPortStatusEncryptionOffTimeRemaining=cryptoPortStatusEncryptionOffTimeRemaining, cryptoOfficerPassword=cryptoOfficerPassword, cryptoPortStatusAuthKeyLifeTimeRemaining=cryptoPortStatusAuthKeyLifeTimeRemaining, cryptoModuleCapCryBoot=cryptoModuleCapCryBoot, cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime=cryptoPortStatusUnsuccessfulKeyExchangeDateAndTime, intervalEncryptionSublayerPm1dayValidFlag=intervalEncryptionSublayerPm1dayValidFlag, cryptoPortTable=cryptoPortTable, cryptoPortTagReceiveFailures=cryptoPortTagReceiveFailures, cryptoPortCapTagFailurePeriod=cryptoPortCapTagFailurePeriod, cryFacilityHistorical1dayTable=cryFacilityHistorical1dayTable, cryptoModuleSelfTestExecute=cryptoModuleSelfTestExecute, cryptoModuleResetToFactory=cryptoModuleResetToFactory, intervalEncryptionSublayerPm1dayTimeStamp=intervalEncryptionSublayerPm1dayTimeStamp, cryptoPortStatusIndex=cryptoPortStatusIndex, CryptoFspR7CryBoot=CryptoFspR7CryBoot, cryFacilityCurrent1dayEncryptionRunDegradeSeconds=cryFacilityCurrent1dayEncryptionRunDegradeSeconds, cryFacilityHistorical1dayEntry=cryFacilityHistorical1dayEntry, cryptoPortCapTagFailureLimit=cryptoPortCapTagFailureLimit, intervalEncryptionSublayerPm15minEncryptionRunSeconds=intervalEncryptionSublayerPm15minEncryptionRunSeconds, cryptoPortEncryptionOffTimeRemaining=cryptoPortEncryptionOffTimeRemaining, intervalEncryptionSublayerPm15minEntry=intervalEncryptionSublayerPm15minEntry, cryptoPortCapForceKeyExchange=cryptoPortCapForceKeyExchange, intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds=intervalEncryptionSublayerPm15minEncryptionRunDegradeSeconds, cryptoPortAuthKeyLifeTime=cryptoPortAuthKeyLifeTime, cryptoPortGenAuthKey=cryptoPortGenAuthKey, cryptoModuleFirmwareUpdateState=cryptoModuleFirmwareUpdateState, portEncryptionObjects=portEncryptionObjects, intervalEncryptionSublayerPm1dayNumber=intervalEncryptionSublayerPm1dayNumber, cryptoModuleUnsuccessfulLoginDateAndTime=cryptoModuleUnsuccessfulLoginDateAndTime, cryFacilityHistorical1dayTimeStamp=cryFacilityHistorical1dayTimeStamp, cryptoModuleSuccessfulLoginDateAndTime=cryptoModuleSuccessfulLoginDateAndTime, cryptoModuleSelfTestResult=cryptoModuleSelfTestResult, cryptoModuleStatusUnsuccessfulLoginDateAndTime=cryptoModuleStatusUnsuccessfulLoginDateAndTime, intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds=intervalEncryptionSublayerPm1dayEncryptionRunErrorSeconds, cryptoPortFpKeyRx=cryptoPortFpKeyRx, cryFacilityCurrent1dayEntry=cryFacilityCurrent1dayEntry, encryptionPerformanceMonitoring=encryptionPerformanceMonitoring, cryptoModuleStatusTable=cryptoModuleStatusTable, cryptoModuleConfigSelfTestOperation=cryptoModuleConfigSelfTestOperation, cryptoPortCapEncryptionOff=cryptoPortCapEncryptionOff, intervalEncryptionSublayerPm15minTimeStamp=intervalEncryptionSublayerPm15minTimeStamp, cryptoPortStatusTable=cryptoPortStatusTable, cryptoModuleCryptoOfficerPassword=cryptoModuleCryptoOfficerPassword, cryptoPortCapTagClear=cryptoPortCapTagClear, intervalEncryptionSublayerPm15minTable=intervalEncryptionSublayerPm15minTable, currentEncryptionSublayerPm15minEncryptionRunSeconds=currentEncryptionSublayerPm15minEncryptionRunSeconds, CryptoFspR7ForceKeyExchangeCaps=CryptoFspR7ForceKeyExchangeCaps, cryptoPortConfigAuthKeyLifeTime=cryptoPortConfigAuthKeyLifeTime, intervalEncryptionSublayerPm1dayEntry=intervalEncryptionSublayerPm1dayEntry, cryFacilityCurrent15minElapsedTime=cryFacilityCurrent15minElapsedTime, cryptoModuleStatusResetToFactoryCapability=cryptoModuleStatusResetToFactoryCapability, cryptoModuleCapResetToFactory=cryptoModuleCapResetToFactory, cryptoPortConfigTable=cryptoPortConfigTable, cryptoModuleEntry=cryptoModuleEntry, cryptoPortKeyExchangeForcedClear=cryptoPortKeyExchangeForcedClear, cryptoRequestErrorId=cryptoRequestErrorId, cryFacilityHistorical1dayEncryptionRunDegradeSeconds=cryFacilityHistorical1dayEncryptionRunDegradeSeconds, cryptoModuleConfigFirmwareUpdateState=cryptoModuleConfigFirmwareUpdateState, CryptoFspR7SessionKeyLifetimeCaps=CryptoFspR7SessionKeyLifetimeCaps, cryptoPortCapKeyExchangeForcedClear=cryptoPortCapKeyExchangeForcedClear, cryptoModuleConfigCryptoOfficerPassword=cryptoModuleConfigCryptoOfficerPassword, intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds=intervalEncryptionSublayerPm1dayEncryptionRunDegradeSeconds, CryptoFspR7EncryptionCommunication=CryptoFspR7EncryptionCommunication, intervalEncryptionSublayerPm1dayTable=intervalEncryptionSublayerPm1dayTable, cryFacilityHistorical1dayNumber=cryFacilityHistorical1dayNumber, cryFacilityHistorical1dayValidFlag=cryFacilityHistorical1dayValidFlag, PYSNMP_MODULE_ID=moduleEncryptionMIB, intervalEncryptionSublayerPm15minValidFlag=intervalEncryptionSublayerPm15minValidFlag, cryptoRequestErrorAesSpecific=cryptoRequestErrorAesSpecific, cryptoModuleConfigIndex=cryptoModuleConfigIndex, intervalEncryptionSublayerPm1dayEncryptionRunSeconds=intervalEncryptionSublayerPm1dayEncryptionRunSeconds, currentEncryptionSublayerPm1dayEncryptionRunSeconds=currentEncryptionSublayerPm1dayEncryptionRunSeconds, cryFacilityCurrent1dayEncryptionRunErrorSeconds=cryFacilityCurrent1dayEncryptionRunErrorSeconds, cryFacilityHistorical15minEncryptionRunSeconds=cryFacilityHistorical15minEncryptionRunSeconds, currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds=currentEncryptionSublayerPm1dayEncryptionRunErrorSeconds, cryptoPortConfigEntry=cryptoPortConfigEntry, cryptoPortTagFailTimeExpiration=cryptoPortTagFailTimeExpiration, cryptoPortEncryptionOff=cryptoPortEncryptionOff, cryptoModuleConfigTable=cryptoModuleConfigTable, CryptoFspR7ForceKeyExchange=CryptoFspR7ForceKeyExchange, cryptoPortEncryptionChannel=cryptoPortEncryptionChannel, cryptoPortCapEntry=cryptoPortCapEntry, moduleEncryptionMIB=moduleEncryptionMIB, cryptoPortCapEncryptionOffState=cryptoPortCapEncryptionOffState, cryptoModuleFirmwareVersion=cryptoModuleFirmwareVersion, cryptoPortTagFailureLimit=cryptoPortTagFailureLimit, cryFacilityCurrent15minEncryptionRunErrorSeconds=cryFacilityCurrent15minEncryptionRunErrorSeconds, cryFacilityHistorical15minEncryptionRunErrorSeconds=cryFacilityHistorical15minEncryptionRunErrorSeconds, cryptoPortAcceptFpKeyRx=cryptoPortAcceptFpKeyRx, encryptionMIB=encryptionMIB, cryptoModuleStbyFwpHash=cryptoModuleStbyFwpHash, cryFacilityHistorical1dayEncryptionRunSeconds=cryFacilityHistorical1dayEncryptionRunSeconds, currentEncryptionSublayerPm1dayTable=currentEncryptionSublayerPm1dayTable, cryFacilityCurrent15minEncryptionRunSeconds=cryFacilityCurrent15minEncryptionRunSeconds, cryptoModuleCapTable=cryptoModuleCapTable, cryptoPortSuccessfulKeyExchangeDateAndTime=cryptoPortSuccessfulKeyExchangeDateAndTime, cryptoRequestErrorType=cryptoRequestErrorType, intervalEncryptionSublayerPm15minNumber=intervalEncryptionSublayerPm15minNumber, CryptoFspR7EncryptionSwitch=CryptoFspR7EncryptionSwitch, cryptoPortAuthKeyLifeTimeRemaining=cryptoPortAuthKeyLifeTimeRemaining, cryFacilityHistorical15minTable=cryFacilityHistorical15minTable, CryptoFspR7EnableDisable=CryptoFspR7EnableDisable, cryptoModuleCapFirmwareVersion=cryptoModuleCapFirmwareVersion, cryptoOfficerPasswordReqId=cryptoOfficerPasswordReqId, cryFacilityHistorical1dayEncryptionRunErrorSeconds=cryFacilityHistorical1dayEncryptionRunErrorSeconds, moduleEncryptionObjects=moduleEncryptionObjects, cryptoPortStatusFailureKeyExchangeCount=cryptoPortStatusFailureKeyExchangeCount, cryptoPortCapGenAuthKey=cryptoPortCapGenAuthKey, cryFacilityCurrent1dayElapsedTime=cryFacilityCurrent1dayElapsedTime, CryptoFspR7EncryptionCommunicationCaps=CryptoFspR7EncryptionCommunicationCaps)
