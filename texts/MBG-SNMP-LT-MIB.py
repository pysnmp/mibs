#
# PySNMP MIB module MBG-SNMP-LT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/meinberg/MBG-SNMP-LT-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 15:42:03 2024
# On host fv-az973-242 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
mbgSnmpRoot, = mibBuilder.importSymbols("MBG-SNMP-ROOT-MIB", "mbgSnmpRoot")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Integer32, NotificationType, ModuleIdentity, Counter64, iso, MibIdentifier, ObjectIdentity, Counter32, Bits, Unsigned32, IpAddress, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "NotificationType", "ModuleIdentity", "Counter64", "iso", "MibIdentifier", "ObjectIdentity", "Counter32", "Bits", "Unsigned32", "IpAddress", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
mbgLantime = ModuleIdentity((1, 3, 6, 1, 4, 1, 5597, 3))
mbgLantime.setRevisions(('2012-01-25 07:45', '2011-03-30 00:00', '2011-03-29 00:00', '2010-01-19 00:00', '2009-12-03 00:00', '2008-09-10 00:00', '2008-07-15 00:00', '2008-06-15 00:00', '2006-08-23 00:00', '2006-03-20 00:00', '2005-07-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: mbgLantime.setRevisionsDescriptions((' Changed MIB module name.', ' Version 5.32l, added mbgLtPtp and PTP traps objects', ' Version 5.32c, added mbgLtPtp Branch with PTP information objects ', ' Revised edition (V5.30i), added NTP Sync Trap definition', ' Revised edition (V5.30g), added NTP Client Monitoring Trap definition', 'Revised edition (V5.26e), added MRS Objects and Traps', 'Revised edition (V5.26), added ReceiverSync Trap (14)', 'Revised edition (V5.25), changed postal address', 'Revised edition (V4.38), added mbgLtCmdSetRefTime', 'Revised edition (V4.36) with changed Trap OID base', 'Revised edition (V4.25)',))
if mibBuilder.loadTexts: mbgLantime.setLastUpdated('201201250745Z')
if mibBuilder.loadTexts: mbgLantime.setOrganization('www.meinberg.de')
if mibBuilder.loadTexts: mbgLantime.setContactInfo('postal:   Meinberg Funkuhren\n                    Lange Wand 9\n                    31812 Bad Pyrmont\n                    Germany\n\n          email:    info@meinberg.de')
if mibBuilder.loadTexts: mbgLantime.setDescription(' Meinberg SNMP Management Information Base ')
mbgLtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 0))
mbgLtFirmwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 0, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtFirmwareVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtFirmwareVersion.setDescription('shows the installed firmware version of your LANTIME')
mbgLtFirmwareVersionVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 0, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtFirmwareVersionVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtFirmwareVersionVal.setDescription('shows the installed firmware version of your LANTIME as an Integer32 value')
mbgLtNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 1))
mbgLtNtpCurrentState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpCurrentState.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpCurrentState.setDescription('actual state of the NTP as string')
mbgLtNtpCurrentStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 99))).clone(namedValues=NamedValues(("notSynchronized", 0), ("noGoodRefclock", 1), ("syncToExtRefclock", 2), ("syncToSerialRefclock", 3), ("normalOperationPPS", 4), ("normalOperationRefclock", 5), ("unknown", 99))).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpCurrentStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpCurrentStateVal.setDescription('current state of the NTP as Integer32 value')
mbgLtNtpStratum = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpStratum.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpStratum.setDescription('Stratum value of the NTP ')
mbgLtNtpActiveRefclockId = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 99))).clone(namedValues=NamedValues(("localClock", 0), ("serialRefclock", 1), ("pps", 2), ("externalRefclock", 3), ("notSync", 99))).clone(99)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockId.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockId.setDescription('Index of the current refclock selected by the NTP ')
mbgLtNtpActiveRefclockName = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockName.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockName.setDescription('Name of the current refclock selected by the NTP ')
mbgLtNtpActiveRefclockOffset = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockOffset.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockOffset.setDescription('Time offset between the current selected refclock and time of NTP as string')
mbgLtNtpActiveRefclockOffsetVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647)).clone(1024000000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockOffsetVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpActiveRefclockOffsetVal.setDescription('Time offset in micro seconds between the current selected refclock and time of NTP ')
mbgLtNtpNumberOfRefclocks = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpNumberOfRefclocks.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpNumberOfRefclocks.setDescription('Number of refclocks configured in the NTP ')
mbgLtNtpAuthKeyId = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpAuthKeyId.setDescription('Authentication Key ID of active refclock is active ')
mbgLtNtpVersion = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtNtpVersion.setStatus('current')
if mibBuilder.loadTexts: mbgLtNtpVersion.setDescription('integrated NTP version ')
mbgLtRefclock = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2))
mbgLtRefClockType = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefClockType.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefClockType.setDescription('Type of refclock connected to NTP time server ')
mbgLtRefClockTypeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22))).clone(namedValues=NamedValues(("notavailable", 0), ("mbgGPS167", 1), ("mbgGPS167BGTTGP", 2), ("mbgPZF509", 3), ("mbgPZF509BGTTGP", 4), ("mbgSHS", 5), ("mbgSHSBGT", 6), ("mbgSHSFRC", 7), ("mbgSHSFRCBGT", 8), ("mbgTCR509", 9), ("mbgTCR509BGTTGP", 10), ("mbgRDT", 11), ("mbgRDTBGTTGP", 12), ("mbgEDT", 13), ("mbgEDTBGTTGP", 14), ("mbgAHS", 15), ("mbgDHS", 16), ("mbgNDT167", 17), ("mbgNDT167BGT", 18), ("mbgDCT", 19), ("mbgDCTBGT", 20), ("mbgSHSTCR", 21), ("mbgSHSTCRBGT", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefClockTypeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefClockTypeVal.setDescription('Type of refclock connected to NTP time server as value')
mbgLtRefClockMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefClockMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefClockMode.setDescription('current mode of refclock connected to NTP time server ')
mbgLtRefClockModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notavailable", 0), ("normalOperation", 1), ("trackingSearching", 2), ("antennaFaulty", 3), ("warmBoot", 4), ("coldBoot", 5), ("antennaShortcircuit", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefClockModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefClockModeVal.setDescription('current mode of refclock connected to NTP time server as value')
mbgLtRefGpsState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsState.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsState.setDescription('current State of GPS refclock conneted to NTP time server ')
mbgLtRefGpsStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notavailable", 0), ("synchronized", 1), ("notsynchronized", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsStateVal.setDescription('current State of GPS refclock conneted to NTP time server as value')
mbgLtRefGpsPosition = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsPosition.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsPosition.setDescription('current Position of GPS refclock conneted to NTP time server ')
mbgLtRefGpsSatellites = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsSatellites.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsSatellites.setDescription('current Satellites in view and good of GPS refclock connected to NTP time server ')
mbgLtRefGpsSatellitesGood = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsSatellitesGood.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsSatellitesGood.setDescription('current good Satellites of GPS refclock connected to NTP time server as value')
mbgLtRefGpsSatellitesInView = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsSatellitesInView.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsSatellitesInView.setDescription('current Satellites in view of GPS refclock conneted to NTP time server as value')
mbgLtRefPzfState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfState.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfState.setDescription('current State of DCF77/PZF refclock connected to NTP time server ')
mbgLtRefPzfStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notavailable", 0), ("sync", 1), ("notsyncnow", 2), ("neversynced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfStateVal.setDescription('current State of DCF77/PZF refclock connected to NTP time server as value')
mbgLtRefPzfKorrelation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfKorrelation.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfKorrelation.setDescription('current Korrelation of DCF77/PZF refclock connected to NTP time server ')
mbgLtRefPzfField = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfField.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfField.setDescription('current strength of field of DCF77/PZF refclock connected to NTP time server ')
mbgLtRefGpsMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsMode.setDescription('current Mode of GPS refclock connected to NTP time server ')
mbgLtRefGpsModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notavailable", 0), ("normalOperation", 1), ("trackingSearching", 2), ("antennaFaulty", 3), ("warmBoot", 4), ("coldBoot", 5), ("antennaShortcircuit", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsModeVal.setDescription('current Mode of GPS refclock connected to NTP time server as value')
mbgLtRefIrigMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefIrigMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefIrigMode.setDescription('current Mode of IRIG refclock conneted to NTP time server ')
mbgLtRefIrigModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notavailable", 0), ("locked", 1), ("notlocked", 2), ("telegramError", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefIrigModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefIrigModeVal.setDescription('current Mode of IRIG refclock conneted to NTP time server as value')
mbgLtRefPzfMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfMode.setDescription('current Mode of PZF refclock connected to NTP time server ')
mbgLtRefPzfModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notavailable", 0), ("normalOperation", 1), ("antennaFaulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefPzfModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefPzfModeVal.setDescription('current Mode of PZF refclock connected to NTP time server as value')
mbgLtRefIrigState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefIrigState.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefIrigState.setDescription('current State of IRIG refclock connected to NTP time server ')
mbgLtRefIrigStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefIrigStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefIrigStateVal.setDescription('current State of IRIG refclock connected to NTP time server as value')
mbgLtRefSHSMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefSHSMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefSHSMode.setDescription('current Mode of SHS system connected to NTP time server ')
mbgLtRefSHSModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notavailable", 0), ("normalOperation", 1), ("stoppedTimeLimitError", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefSHSModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefSHSModeVal.setDescription('current Mode of SHS system connected to NTP time server as value')
mbgLtRefSHSTimeDiff = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefSHSTimeDiff.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefSHSTimeDiff.setDescription('current time difference between the two SHS reference time sources in miliseconds')
mbgLtRefDctState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefDctState.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefDctState.setDescription('current State of DCF77 refclock connected to NTP time server ')
mbgLtRefDctStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notavailable", 0), ("sync", 1), ("notsyncnow", 2), ("neversynced", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefDctStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefDctStateVal.setDescription('current State of DCF77 refclock connected to NTP time server as value')
mbgLtRefDctField = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 28), DisplayString().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefDctField.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefDctField.setDescription('current strength of field of DCF77 refclock connected to NTP time server ')
mbgLtRefDctMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefDctMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefDctMode.setDescription('current Mode of DCF77 refclock connected to NTP time server ')
mbgLtRefDctModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notavailable", 0), ("normalOperation", 1), ("antennaFaulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefDctModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefDctModeVal.setDescription('current Mode of DCF77 refclock connected to NTP time server as value')
mbgLtRefGpsLeapSecond = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 31), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsLeapSecond.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsLeapSecond.setDescription('Date and Time of leap second announcement received via GPS')
mbgLtRefGpsLeapCorrection = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefGpsLeapCorrection.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefGpsLeapCorrection.setDescription('Leap Second Correction received via GPS')
mbgLtMrs = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50))
mbgLtRefMrsRef = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefMrsRef.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefMrsRef.setDescription('ID of currently active reference source as a string')
mbgLtRefMrsRefVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 99))).clone(namedValues=NamedValues(("notavailable", 0), ("refGps", 1), ("refIrig", 2), ("refPps", 3), ("refFreq", 4), ("refPtp", 5), ("refNtp", 6), ("refFreeRun", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefMrsRefVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefMrsRefVal.setDescription('currently active reference as a value')
mbgLtRefMrsRefList = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefMrsRefList.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefMrsRefList.setDescription('List of all supported MRS references in a comma separated list')
mbgLtRefMrsPrioList = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtRefMrsPrioList.setStatus('current')
if mibBuilder.loadTexts: mbgLtRefMrsPrioList.setDescription('List of all active MRS references in a comma separated list sorted by priority')
mbgLtMrsRef = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10))
mbgLtMrsRefGps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1))
mbgLtMrsGpsOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsGpsOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsGpsOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsOffsBase.setDescription('base of the offset value shown in mbgLtMrsGpsOffsVal')
mbgLtMrsGpsPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsPrio.setDescription('the configured priority of this reference')
mbgLtMrsGpsState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsState.setDescription('the  current status of this reference as a string')
mbgLtMrsGpsStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsGpsStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsGpsPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsGpsPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsGpsPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtMrsRefIrig = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2))
mbgLtMrsIrigOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsIrigOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsIrigOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigOffsBase.setDescription('base of the offset value shown in mbgLtMrsIrigOffsVal')
mbgLtMrsIrigPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigPrio.setDescription('the configured priority of this reference')
mbgLtMrsIrigState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigState.setDescription('the  current status of this reference as a string')
mbgLtMrsIrigStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsIrigStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsIrigCorr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsIrigCorr.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigCorr.setDescription('Correction Value (Fixed Offset) of this reference in nanoseconds')
mbgLtMrsIrigOffsLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsIrigOffsLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigOffsLimit.setDescription('Offset Limit in nanoseconds, if exceeded this will trigger a notification')
mbgLtMrsIrigPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsIrigPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsIrigPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtMrsRefPps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3))
mbgLtMrsPpsOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsPpsOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsPpsOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsOffsBase.setDescription('base of the offset value shown in mbgLtMrsPpsOffsVal')
mbgLtMrsPpsPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsPrio.setDescription('the configured priority of this reference')
mbgLtMrsPpsState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsState.setDescription('the  current status of this reference as a string')
mbgLtMrsPpsStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPpsStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsPpsCorr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPpsCorr.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsCorr.setDescription('Correction Value (Fixed Offset) of this reference in nanoseconds')
mbgLtMrsPpsOffsLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPpsOffsLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsOffsLimit.setDescription('Offset Limit in nanoseconds, if exceeded this will trigger a notification')
mbgLtMrsPpsPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 3, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPpsPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPpsPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtMrsRefFreq = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4))
mbgLtMrsFreqOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsFreqOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsFreqOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqOffsBase.setDescription('base of the offset value shown in mbgLtMrsFreqOffsVal')
mbgLtMrsFreqPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqPrio.setDescription('the configured priority of this reference')
mbgLtMrsFreqState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqState.setDescription('the  current status of this reference as a string')
mbgLtMrsFreqStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsFreqStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsFreqCorr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsFreqCorr.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqCorr.setDescription('Correction Value (Fixed Offset) of this reference in nanoseconds')
mbgLtMrsFreqOffsLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsFreqOffsLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqOffsLimit.setDescription('Offset Limit in nanoseconds, if exceeded this will trigger a notification')
mbgLtMrsFreqPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 4, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsFreqPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsFreqPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtMrsRefPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5))
mbgLtMrsPtpOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsPtpOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsPtpOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpOffsBase.setDescription('base of the offset value shown in mbgLtMrsPtpOffsVal')
mbgLtMrsPtpPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpPrio.setDescription('the configured priority of this reference')
mbgLtMrsPtpState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpState.setDescription('the  current status of this reference as a string')
mbgLtMrsPtpStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsPtpStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsPtpCorr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPtpCorr.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpCorr.setDescription('Correction Value (Fixed Offset) of this reference in nanoseconds')
mbgLtMrsPtpOffsLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPtpOffsLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpOffsLimit.setDescription('Offset Limit in nanoseconds, if exceeded this will trigger a notification')
mbgLtMrsPtpPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 5, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsPtpPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsPtpPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtMrsRefNtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6))
mbgLtMrsNtpOffs = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpOffs.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpOffs.setDescription('Offset of this reference to the currently active reference, unit included in the string')
mbgLtMrsNtpOffsVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpOffsVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpOffsVal.setDescription('Offset of this reference to the currently active reference, unit see below')
mbgLtMrsNtpOffsBase = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 6, 9))).clone(namedValues=NamedValues(("baseSeconds", 0), ("baseMiliseconds", 3), ("baseMicroseconds", 6), ("baseNanoseconds", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpOffsBase.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpOffsBase.setDescription('base of the offset value shown in mbgLtMrsNtpOffsVal')
mbgLtMrsNtpPrio = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpPrio.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpPrio.setDescription('the configured priority of this reference')
mbgLtMrsNtpState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpState.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpState.setDescription('the  current status of this reference as a string')
mbgLtMrsNtpStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notAvailable", 0), ("notSupported", 1), ("notConnected", 2), ("noSignal", 3), ("hasLocked", 4), ("isAvailable", 5), ("isAccurate", 6), ("isMaster", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtMrsNtpStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpStateVal.setDescription('the  current status of this reference as an Integer value')
mbgLtMrsNtpCorr = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsNtpCorr.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpCorr.setDescription('Correction Value (Fixed Offset) of this reference in nanoseconds')
mbgLtMrsNtpOffsLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsNtpOffsLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpOffsLimit.setDescription('Offset Limit in nanoseconds, if exceeded this will trigger a notification')
mbgLtMrsNtpPrecision = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 2, 50, 10, 6, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtMrsNtpPrecision.setStatus('current')
if mibBuilder.loadTexts: mbgLtMrsNtpPrecision.setDescription('Precision Factor of this reference in nanoseconds')
mbgLtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 3))
mbgLtTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0))
mbgLtTrapNTPNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 1))
if mibBuilder.loadTexts: mbgLtTrapNTPNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNTPNotSync.setDescription('trap to be sent when NTP is not synchronised ')
mbgLtTrapNTPStopped = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 2))
if mibBuilder.loadTexts: mbgLtTrapNTPStopped.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNTPStopped.setDescription('trap to be sent when NTP is stopped ')
mbgLtTrapServerBoot = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 3))
if mibBuilder.loadTexts: mbgLtTrapServerBoot.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapServerBoot.setDescription('trap to be sent when time server has finished boot sequence ')
mbgLtTrapReceiverNotResponding = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 4))
if mibBuilder.loadTexts: mbgLtTrapReceiverNotResponding.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapReceiverNotResponding.setDescription('trap to be sent when receiver is not responding ')
mbgLtTrapReceiverNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 5))
if mibBuilder.loadTexts: mbgLtTrapReceiverNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapReceiverNotSync.setDescription('trap to be sent when receiver is not synchronised ')
mbgLtTrapAntennaFaulty = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 6))
if mibBuilder.loadTexts: mbgLtTrapAntennaFaulty.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapAntennaFaulty.setDescription('trap to be sent when connection to antenna is broken ')
mbgLtTrapAntennaReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 7))
if mibBuilder.loadTexts: mbgLtTrapAntennaReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapAntennaReconnect.setDescription('trap to be sent when antenna has been reconnected ')
mbgLtTrapConfigChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 8))
if mibBuilder.loadTexts: mbgLtTrapConfigChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapConfigChanged.setDescription('trap to be sent when timeserver reloaded its configuration ')
mbgLtTrapLeapSecondAnnounced = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 9))
if mibBuilder.loadTexts: mbgLtTrapLeapSecondAnnounced.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapLeapSecondAnnounced.setDescription('trap to be sent when a leap second has been announced ')
mbgLtTrapSHSTimeLimitError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 10))
if mibBuilder.loadTexts: mbgLtTrapSHSTimeLimitError.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapSHSTimeLimitError.setDescription('trap to be sent when SHS timelimit exceeded ')
mbgLtTrapSecondaryRecNotSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 11))
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecNotSync.setDescription('trap to be sent when secondary receiver in SHS system is not synchronised ')
mbgLtTrapPowerSupplyFailure = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 12))
if mibBuilder.loadTexts: mbgLtTrapPowerSupplyFailure.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPowerSupplyFailure.setDescription('trap to be sent when one of the redundant power supplies fails')
mbgLtTrapAntennaShortCircuit = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 13))
if mibBuilder.loadTexts: mbgLtTrapAntennaShortCircuit.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapAntennaShortCircuit.setDescription('trap to be sent when a connected antenna fails due to a short circuit')
mbgLtTrapReceiverSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 14))
if mibBuilder.loadTexts: mbgLtTrapReceiverSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapReceiverSync.setDescription('trap to be sent when receiver is synchronised ')
mbgLtTrapNTPClientAlarm = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 15))
if mibBuilder.loadTexts: mbgLtTrapNTPClientAlarm.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNTPClientAlarm.setDescription('trap to be sent when an NTP Client Monitoring alarm occurs, e.g. when a monitored client is not reachable. ')
mbgLtTrapPowerSupplyUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 16))
if mibBuilder.loadTexts: mbgLtTrapPowerSupplyUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPowerSupplyUp.setDescription('trap to be sent when a power supply returned to a healthy state. ')
mbgLtTrapNetworkDown = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 17))
if mibBuilder.loadTexts: mbgLtTrapNetworkDown.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNetworkDown.setDescription('trap to be sent when a monitored network port is down. ')
mbgLtTrapNetworkUp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 18))
if mibBuilder.loadTexts: mbgLtTrapNetworkUp.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNetworkUp.setDescription('trap to be sent when a monitored network port is up. ')
mbgLtTrapSecondaryRecNotResp = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 19))
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecNotResp.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecNotResp.setDescription('trap to be sent when secondary receiver is not responding ')
mbgLtTrapXmrLimitExceeded = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 30))
if mibBuilder.loadTexts: mbgLtTrapXmrLimitExceeded.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapXmrLimitExceeded.setDescription('trap to be sent when a reference offset exceeds the configured limit')
mbgLtTrapXmrRefDisconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 31))
if mibBuilder.loadTexts: mbgLtTrapXmrRefDisconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapXmrRefDisconnect.setDescription('trap to be sent when a reference signal has been lost')
mbgLtTrapXmrRefReconnect = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 32))
if mibBuilder.loadTexts: mbgLtTrapXmrRefReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapXmrRefReconnect.setDescription('trap to be sent when a reference signal recovered')
mbgLtTrapFdmError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 33))
if mibBuilder.loadTexts: mbgLtTrapFdmError.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapFdmError.setDescription('trap to be sent when the Fdm module generates an alarm ')
mbgLtTrapSHSTimeLimitWarning = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 34))
if mibBuilder.loadTexts: mbgLtTrapSHSTimeLimitWarning.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapSHSTimeLimitWarning.setDescription('trap to be sent when SHS warning limit exceeded ')
mbgLtTrapSecondaryRecSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 35))
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapSecondaryRecSync.setDescription('trap to be sent when secondary receiver is synchronised ')
mbgLtTrapNTPSync = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 36))
if mibBuilder.loadTexts: mbgLtTrapNTPSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNTPSync.setDescription('trap to be sent when NTP is synchronised ')
mbgLtTrapPtpPortDisconnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 37))
if mibBuilder.loadTexts: mbgLtTrapPtpPortDisconnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPtpPortDisconnected.setDescription('trap to be sent when PTP network port got disconnected')
mbgLtTrapPtpPortConnected = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 38))
if mibBuilder.loadTexts: mbgLtTrapPtpPortConnected.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPtpPortConnected.setDescription('trap to be sent when PTP network port got connected')
mbgLtTrapPtpStateChanged = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 39))
if mibBuilder.loadTexts: mbgLtTrapPtpStateChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPtpStateChanged.setDescription("trap to be sent when PTP state changed (e.g. from 'passive' to 'master')")
mbgLtTrapPtpError = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 40))
if mibBuilder.loadTexts: mbgLtTrapPtpError.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapPtpError.setDescription('trap to be sent when PTP raised an error')
mbgLtTrapNormalOperation = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 77))
if mibBuilder.loadTexts: mbgLtTrapNormalOperation.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapNormalOperation.setDescription('trap to be sent when the system returned to a healthy state ')
mbgLtTrapHeartbeat = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 88))
if mibBuilder.loadTexts: mbgLtTrapHeartbeat.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapHeartbeat.setDescription('trap to be sent periodically to indicate that time server is still alive ')
mbgLtTrapTestNotification = NotificationType((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 99))
if mibBuilder.loadTexts: mbgLtTrapTestNotification.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapTestNotification.setDescription('trap to be sent when a test notification has been requested ')
mbgLtTrapMessage = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 3, 0, 100), DisplayString().clone('no event')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtTrapMessage.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapMessage.setDescription('used as a payload object for all traps, holds a clear text event message')
mbgLtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4))
mbgLtCfgNetwork = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1))
mbgLtCfgHostname = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgHostname.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgHostname.setDescription('The hostname configured for this LANTIME')
mbgLtCfgDomainname = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgDomainname.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgDomainname.setDescription('The domainname configured for this LANTIME')
mbgLtCfgNameserver1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNameserver1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNameserver1.setDescription('The first nameserver used by this LANTIME')
mbgLtCfgNameserver2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNameserver2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNameserver2.setDescription('The second nameserver used this LANTIME')
mbgLtCfgSyslogserver1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSyslogserver1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSyslogserver1.setDescription('The first syslog server we are sending log entries to')
mbgLtCfgSyslogserver2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSyslogserver2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSyslogserver2.setDescription('The second syslog server we are sending log entries to')
mbgLtCfgTelnetAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgTelnetAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgTelnetAccess.setDescription('Is telnet administration enabled')
mbgLtCfgFTPAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgFTPAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgFTPAccess.setDescription('Is FTP administration enabled')
mbgLtCfgHTTPAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgHTTPAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgHTTPAccess.setDescription('Is web based administration enabled')
mbgLtCfgHTTPSAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgHTTPSAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgHTTPSAccess.setDescription('Is secure web based administration enabled')
mbgLtCfgSNMPAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPAccess.setDescription('Is SNMP administration enabled')
mbgLtCfgSambaAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSambaAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSambaAccess.setDescription('Is Samba administration enabled')
mbgLtCfgIPv6Access = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgIPv6Access.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgIPv6Access.setDescription('Is IPv6 support enabled')
mbgLtCfgSSHAccess = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSSHAccess.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSSHAccess.setDescription('Is SSH administration enabled')
mbgLtCfgNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2))
mbgLtCfgNTPServer1 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 1))
mbgLtCfgNTPServer2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 2))
mbgLtCfgNTPServer3 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 3))
mbgLtCfgNTPServer4 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 4))
mbgLtCfgNTPServer5 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 5))
mbgLtCfgNTPServer6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 6))
mbgLtCfgNTPServer7 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 7))
mbgLtCfgNTPServer1IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer1IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer1IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer1Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer1Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer1Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer1Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer2IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer2IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer2IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer2Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer2Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer2Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer2Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer3IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer3IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer3IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer3Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 3, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer3Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer3Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer3Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer4IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer4Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer4Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer4Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer4Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer5IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer5IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer5IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer5Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer5Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer5Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer5Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer6IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer6IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer6IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer6Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer6Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer6Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer6Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPServer7IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer7IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer7IP.setDescription('IP address for external NTP server')
mbgLtCfgNTPServer7Key = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Key.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Key.setDescription('Key for external NTP server')
mbgLtCfgNTPServer7Autokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Autokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Autokey.setDescription('Is autokey enabled for the external NTP server')
mbgLtCfgNTPServer7Prefer = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Prefer.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPServer7Prefer.setDescription('Is the preferred flag enabled for the external NTP server')
mbgLtCfgNTPStratumLocalClock = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPStratumLocalClock.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPStratumLocalClock.setDescription('The stratum value assigned to the local clock of the timeserver')
mbgLtCfgNTPTrustedKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPTrustedKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPTrustedKey.setDescription('The key used for the internal refclock of the timeserver')
mbgLtCfgNTPBroadcastIP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastIP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastIP.setDescription('NTP broadcast IP address')
mbgLtCfgNTPBroadcastKey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastKey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastKey.setDescription('Key used for NTP broadcasts')
mbgLtCfgNTPBroadcastAutokey = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastAutokey.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPBroadcastAutokey.setDescription('Is autokey generation used for NTP broadcasts')
mbgLtCfgNTPAutokeyFeature = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPAutokeyFeature.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPAutokeyFeature.setDescription('Is the NTP autokey feature enabled')
mbgLtCfgNTPAtomPPS = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNTPAtomPPS.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNTPAtomPPS.setDescription('Is the NTP atom pps feature enabled')
mbgLtCfgEMail = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 3))
mbgLtCfgEMailTo = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEMailTo.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEMailTo.setDescription('EMail address to send alerts etc. to (receiving address)')
mbgLtCfgEMailFrom = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEMailFrom.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEMailFrom.setDescription('EMail address to send alerts etc. from (sending address)')
mbgLtCfgEMailSmarthost = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEMailSmarthost.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEMailSmarthost.setDescription('SMTP smarthost used to send mail')
mbgLtCfgSNMP = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4))
mbgLtCfgSNMPTrapReceiver1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapReceiver1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapReceiver1.setDescription('First SNMP trap receiver host')
mbgLtCfgSNMPTrapReceiver2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapReceiver2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapReceiver2.setDescription('Second SNMP trap receiver host')
mbgLtCfgSNMPTrapRec1Community = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapRec1Community.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapRec1Community.setDescription('First SNMP trap receiver community')
mbgLtCfgSNMPTrapRec2Community = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapRec2Community.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPTrapRec2Community.setDescription('Second SNMP trap receiver community')
mbgLtCfgSNMPReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPReadOnlyCommunity.setDescription('SNMP community string for read-only access')
mbgLtCfgSNMPReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPReadWriteCommunity.setDescription('SNMP community string for read-write access')
mbgLtCfgSNMPContact = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPContact.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPContact.setDescription('SNMP contact string for Lantime')
mbgLtCfgSNMPLocation = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 4, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSNMPLocation.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSNMPLocation.setDescription('SNMP location string for Lantime')
mbgLtCfgWinpopup = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 5))
mbgLtCfgWMailAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgWMailAddress1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgWMailAddress1.setDescription('First windows popup alert receiver')
mbgLtCfgWMailAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgWMailAddress2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgWMailAddress2.setDescription('Second windows popup alert receiver')
mbgLtCfgWalldisplay = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 6))
mbgLtCfgVP100Display1IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgVP100Display1IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgVP100Display1IP.setDescription('IP address of first VP100 wall display')
mbgLtCfgVP100Display1SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgVP100Display1SN.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgVP100Display1SN.setDescription('Serial number of first VP100 wall display')
mbgLtCfgVP100Display2IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgVP100Display2IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgVP100Display2IP.setDescription('IP address of second VP100 wall display')
mbgLtCfgVP100Display2SN = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 6, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgVP100Display2SN.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgVP100Display2SN.setDescription('Serial number of second VP100 wall display')
mbgLtCfgNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7))
mbgLtCfgNotifyNTPNotSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyNTPNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyNTPNotSync.setDescription('Which alerts are sent in case of a NTP_not_sync event')
mbgLtCfgNotifyNTPStopped = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyNTPStopped.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyNTPStopped.setDescription('Which alerts are sent in case of a NTP_stopped event')
mbgLtCfgNotifyServerBoot = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyServerBoot.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyServerBoot.setDescription('Which alerts are sent in case of a server_boot event')
mbgLtCfgNotifyRefclkNoResponse = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyRefclkNoResponse.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyRefclkNoResponse.setDescription('Which alerts are sent in case of a refclock_not_responding event')
mbgLtCfgNotifyRefclockNotSync = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyRefclockNotSync.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyRefclockNotSync.setDescription('Which alerts are sent in case of a refclock_not_sync event')
mbgLtCfgNotifyAntennaFaulty = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyAntennaFaulty.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyAntennaFaulty.setDescription('Which alerts are sent in case of an antenna_faulty event')
mbgLtCfgNotifyAntennaReconnect = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyAntennaReconnect.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyAntennaReconnect.setDescription('Which alerts are sent in case of an antenna_reconnect event')
mbgLtCfgNotifyConfigChanged = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyConfigChanged.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyConfigChanged.setDescription('Which alerts are sent in case of a config_changed event')
mbgLtCfgNotifySHSTimeLimitError = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 9), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifySHSTimeLimitError.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifySHSTimeLimitError.setDescription('Which alerts are sent in case of a SHS_timelimiterror event')
mbgLtCfgNotifyLeapSecond = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 7, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgNotifyLeapSecond.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgNotifyLeapSecond.setDescription('Which alerts are sent in case of a Leap_Second_Announced event')
mbgLtCfgEthernet = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8))
mbgLtCfgEthernetIf0 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0))
mbgLtCfgEthernetIf1 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1))
mbgLtCfgEthernetIf2 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2))
mbgLtCfgEthernetIf3 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3))
mbgLtCfgEthernetIf4 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4))
mbgLtCfgEthernetIf5 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5))
mbgLtCfgEthernetIf6 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6))
mbgLtCfgEthernetIf7 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7))
mbgLtCfgEthernetIf8 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8))
mbgLtCfgEthernetIf9 = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9))
mbgLtCfgEthernetIf0IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4IP.setDescription('The IPv4 address of the first ethernet interface')
mbgLtCfgEthernetIf0IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4Netmask.setDescription('The IPv4 netmask of the first ethernet interface')
mbgLtCfgEthernetIf0IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv4Gateway.setDescription('The IPv4 gateway address of the first ethernet interface')
mbgLtCfgEthernetIf0DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf0IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP1.setDescription('The first IPv6 address of the first ethernet interface')
mbgLtCfgEthernetIf0IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP2.setDescription('The second IPv6 address of the first ethernet interface')
mbgLtCfgEthernetIf0IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6IP3.setDescription('The third IPv6 address of the first ethernet interface')
mbgLtCfgEthernetIf0IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf0NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 0, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf0NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf1IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4IP.setDescription('The IPv4 address of the second ethernet interface')
mbgLtCfgEthernetIf1IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4Netmask.setDescription('The IPv4 netmask of the second ethernet interface')
mbgLtCfgEthernetIf1IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv4Gateway.setDescription('The IPv4 gateway address of the second ethernet interface')
mbgLtCfgEthernetIf1DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf1IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP1.setDescription('The first IPv6 address of the second ethernet interface')
mbgLtCfgEthernetIf1IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP2.setDescription('The second IPv6 address of the second ethernet interface')
mbgLtCfgEthernetIf1IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6IP3.setDescription('The third IPv6 address of the second ethernet interface')
mbgLtCfgEthernetIf1IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf1NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf1NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf2IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4IP.setDescription('The IPv4 address of the third ethernet interface')
mbgLtCfgEthernetIf2IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4Netmask.setDescription('The IPv4 netmask of the third ethernet interface')
mbgLtCfgEthernetIf2IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv4Gateway.setDescription('The IPv4 gateway address of the third ethernet interface')
mbgLtCfgEthernetIf2DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf2IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP1.setDescription('The first IPv6 address of the third ethernet interface')
mbgLtCfgEthernetIf2IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP2.setDescription('The second IPv6 address of the third ethernet interface')
mbgLtCfgEthernetIf2IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6IP3.setDescription('The third IPv6 address of the third ethernet interface')
mbgLtCfgEthernetIf2IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf2NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf2NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf3IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4IP.setDescription('The IPv4 address of the fourth ethernet interface')
mbgLtCfgEthernetIf3IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4Netmask.setDescription('The IPv4 netmask of the fourth ethernet interface')
mbgLtCfgEthernetIf3IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv4Gateway.setDescription('The IPv4 gateway address of the fourth ethernet interface')
mbgLtCfgEthernetIf3DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf3IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP1.setDescription('The first IPv6 address of the fourth ethernet interface')
mbgLtCfgEthernetIf3IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP2.setDescription('The second IPv6 address of the fourth ethernet interface')
mbgLtCfgEthernetIf3IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6IP3.setDescription('The third IPv6 address of the fourth ethernet interface')
mbgLtCfgEthernetIf3IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf3NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf3NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf4IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4IP.setDescription('The IPv4 address of the fifth ethernet interface')
mbgLtCfgEthernetIf4IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4Netmask.setDescription('The IPv4 netmask of the fifth ethernet interface')
mbgLtCfgEthernetIf4IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv4Gateway.setDescription('The IPv4 gateway address of the fifth ethernet interface')
mbgLtCfgEthernetIf4DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf4IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP1.setDescription('The first IPv6 address of the fifth ethernet interface')
mbgLtCfgEthernetIf4IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP2.setDescription('The second IPv6 address of the fifth ethernet interface')
mbgLtCfgEthernetIf4IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6IP3.setDescription('The third IPv6 address of the fifth ethernet interface')
mbgLtCfgEthernetIf4IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf4NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf4NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf5IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4IP.setDescription('The IPv4 address of the sixth ethernet interface')
mbgLtCfgEthernetIf5IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4Netmask.setDescription('The IPv4 netmask of the sixth ethernet interface')
mbgLtCfgEthernetIf5IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv4Gateway.setDescription('The IPv4 gateway address of the sixth ethernet interface')
mbgLtCfgEthernetIf5DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf5IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP1.setDescription('The first IPv6 address of the sixth ethernet interface')
mbgLtCfgEthernetIf5IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP2.setDescription('The second IPv6 address of the sixth ethernet interface')
mbgLtCfgEthernetIf5IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6IP3.setDescription('The third IPv6 address of the sixth ethernet interface')
mbgLtCfgEthernetIf5IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf5NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf5NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf6IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4IP.setDescription('The IPv4 address of the seventh ethernet interface')
mbgLtCfgEthernetIf6IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4Netmask.setDescription('The IPv4 netmask of the seventh ethernet interface')
mbgLtCfgEthernetIf6IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv4Gateway.setDescription('The IPv4 gateway address of the seventh ethernet interface')
mbgLtCfgEthernetIf6DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf6IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP1.setDescription('The first IPv6 address of the seventh ethernet interface')
mbgLtCfgEthernetIf6IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP2.setDescription('The second IPv6 address of the seventh ethernet interface')
mbgLtCfgEthernetIf6IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6IP3.setDescription('The third IPv6 address of the seventh ethernet interface')
mbgLtCfgEthernetIf6IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf6NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 6, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf6NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf7IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4IP.setDescription('The IPv4 address of the eighth ethernet interface')
mbgLtCfgEthernetIf7IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4Netmask.setDescription('The IPv4 netmask of the eighth ethernet interface')
mbgLtCfgEthernetIf7IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv4Gateway.setDescription('The IPv4 gateway address of the eighth ethernet interface')
mbgLtCfgEthernetIf7DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf7IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP1.setDescription('The first IPv6 address of the eighth ethernet interface')
mbgLtCfgEthernetIf7IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP2.setDescription('The second IPv6 address of the eighth ethernet interface')
mbgLtCfgEthernetIf7IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6IP3.setDescription('The third IPv6 address of the eighth ethernet interface')
mbgLtCfgEthernetIf7IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf7NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 7, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf7NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf8IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4IP.setDescription('The IPv4 address of the nineth ethernet interface')
mbgLtCfgEthernetIf8IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4Netmask.setDescription('The IPv4 netmask of the nineth ethernet interface')
mbgLtCfgEthernetIf8IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv4Gateway.setDescription('The IPv4 gateway address of the nineth ethernet interface')
mbgLtCfgEthernetIf8DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf8IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP1.setDescription('The first IPv6 address of the nineth ethernet interface')
mbgLtCfgEthernetIf8IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP2.setDescription('The second IPv6 address of the nineth ethernet interface')
mbgLtCfgEthernetIf8IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6IP3.setDescription('The third IPv6 address of the nineth ethernet interface')
mbgLtCfgEthernetIf8IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf8NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 8, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf8NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgEthernetIf9IPv4IP = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4IP.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4IP.setDescription('The IPv4 address of the tenth ethernet interface')
mbgLtCfgEthernetIf9IPv4Netmask = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4Netmask.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4Netmask.setDescription('The IPv4 netmask of the tenth ethernet interface')
mbgLtCfgEthernetIf9IPv4Gateway = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4Gateway.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv4Gateway.setDescription('The IPv4 gateway address of the tenth ethernet interface')
mbgLtCfgEthernetIf9DHCPClient = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9DHCPClient.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9DHCPClient.setDescription('Is DHCP used to get IP parameters for this interface')
mbgLtCfgEthernetIf9IPv6IP1 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP1.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP1.setDescription('The first IPv6 address of the tenth ethernet interface')
mbgLtCfgEthernetIf9IPv6IP2 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP2.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP2.setDescription('The second IPv6 address of the tenth ethernet interface')
mbgLtCfgEthernetIf9IPv6IP3 = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP3.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6IP3.setDescription('The third IPv6 address of the tenth ethernet interface')
mbgLtCfgEthernetIf9IPv6Autoconf = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6Autoconf.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9IPv6Autoconf.setDescription('Is IPv6 Autoconf used for this interface')
mbgLtCfgEthernetIf9NetLinkMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 8, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("autosensing", 0), ("link10half", 1), ("link10full", 2), ("link100half", 3), ("link100full", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9NetLinkMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgEthernetIf9NetLinkMode.setDescription('Link mode for this interface')
mbgLtCfgSHS = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 9))
mbgLtCfgSHSCritLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSHSCritLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSHSCritLimit.setDescription('Max. number of milliseconds the two SHS references can differ before a SHS Critical Timelimit error is issued')
mbgLtCfgSHSWarnLimit = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgSHSWarnLimit.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgSHSWarnLimit.setDescription('Max. number of milliseconds the two SHS references can differ before a SHS Warning Timelimit error is issued')
mbgLtCfgMRS = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 4, 10))
mbgLtCfgMRSRefPriority = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 4, 10, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCfgMRSRefPriority.setStatus('current')
if mibBuilder.loadTexts: mbgLtCfgMRSRefPriority.setDescription('Priority of MRS Reference Sources, as a comma-separated list')
mbgLtCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 5))
mbgLtCmdExecute = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ready", 0), ("doReboot", 1), ("doFirmwareUpdate", 2), ("doReloadConfig", 3), ("doGenerateSSHKey", 4), ("doGenerateHTTPSKey", 5), ("doResetFactoryDefaults", 6), ("doGenerateNewNTPAutokeyCert", 7), ("doSendTestNotification", 8), ("doResetSHSTimeLimitError", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCmdExecute.setStatus('current')
if mibBuilder.loadTexts: mbgLtCmdExecute.setDescription('Send a command to the timeserver to be executed')
mbgLtCmdSetRefTime = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 5, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mbgLtCmdSetRefTime.setStatus('current')
if mibBuilder.loadTexts: mbgLtCmdSetRefTime.setDescription('Set the time of the reference clock and the LANTIME itself')
mbgLtPtp = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 10))
mbgLtPtpMode = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpMode.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpMode.setDescription('Display current PTPv2 modus as string')
mbgLtPtpModeVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("stopped", 0), ("master", 1), ("slave", 2), ("ordinary", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpModeVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpModeVal.setDescription('Display current PTPv2 modus as integer')
mbgLtPtpPortState = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpPortState.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpPortState.setDescription('Current PTPv2 port state as string')
mbgLtPtpPortStateVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("uncalibrated", 0), ("initializing", 1), ("listening", 2), ("master", 3), ("slave", 4), ("unicastmaster", 5), ("unicastslave", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpPortStateVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpPortStateVal.setDescription('Current PTPv2 port state as integer')
mbgLtPtpOffsetFromGM = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpOffsetFromGM.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpOffsetFromGM.setDescription('Current PTPv2 offset from grandmaster as string')
mbgLtPtpOffsetFromGMVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpOffsetFromGMVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpOffsetFromGMVal.setDescription('Current PTPv2 offset from grandmaster in nanoseconds')
mbgLtPtpDelay = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 7), DisplayString()).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpDelay.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpDelay.setDescription('shows the current network delay in nanoseconds as string')
mbgLtPtpDelayVal = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setUnits('ns').setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtPtpDelayVal.setStatus('current')
if mibBuilder.loadTexts: mbgLtPtpDelayVal.setDescription('shows the current network delay in nanoseconds')
mbgLtFdm = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 11))
mbgLtFdmPlFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 11, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtFdmPlFreq.setStatus('current')
if mibBuilder.loadTexts: mbgLtFdmPlFreq.setDescription('shows the current powerline frequency in mHz as an Integer32 value')
mbgLtFdmFreqDev = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtFdmFreqDev.setStatus('current')
if mibBuilder.loadTexts: mbgLtFdmFreqDev.setDescription('shows the current frequency deviation in mHz as an Integer32 value')
mbgLtFdmNomFreq = MibScalar((1, 3, 6, 1, 4, 1, 5597, 3, 11, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mbgLtFdmNomFreq.setStatus('current')
if mibBuilder.loadTexts: mbgLtFdmNomFreq.setDescription('shows the nominal frequency in mHz as an Integer32 value')
mbgLtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 90))
mbgLtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 90, 1))
mbgLtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5597, 3, 90, 2))
mbgLtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 5597, 3, 90, 1, 1)).setObjects(("MBG-SNMP-LT-MIB", "mbgLtObjectsGroup"), ("MBG-SNMP-LT-MIB", "mbgLtTrapsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtCompliance = mbgLtCompliance.setStatus('current')
if mibBuilder.loadTexts: mbgLtCompliance.setDescription('The compliance statement for SNMP entities which implement version 2\n                        of the LANTIME MIB')
mbgLtObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5597, 3, 90, 2, 1))
for _mbgLtObjectsGroup_obj in [[("MBG-SNMP-LT-MIB", "mbgLtFirmwareVersion"), ("MBG-SNMP-LT-MIB", "mbgLtFirmwareVersionVal"), ("MBG-SNMP-LT-MIB", "mbgLtNtpCurrentState"), ("MBG-SNMP-LT-MIB", "mbgLtNtpCurrentStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtNtpStratum"), ("MBG-SNMP-LT-MIB", "mbgLtNtpActiveRefclockId"), ("MBG-SNMP-LT-MIB", "mbgLtNtpActiveRefclockName"), ("MBG-SNMP-LT-MIB", "mbgLtNtpActiveRefclockOffset"), ("MBG-SNMP-LT-MIB", "mbgLtNtpActiveRefclockOffsetVal"), ("MBG-SNMP-LT-MIB", "mbgLtNtpNumberOfRefclocks"), ("MBG-SNMP-LT-MIB", "mbgLtNtpAuthKeyId"), ("MBG-SNMP-LT-MIB", "mbgLtNtpVersion"), ("MBG-SNMP-LT-MIB", "mbgLtRefClockType"), ("MBG-SNMP-LT-MIB", "mbgLtRefClockTypeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefClockMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefClockModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsState"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsPosition"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsSatellites"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsSatellitesGood"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsSatellitesInView"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfState"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfKorrelation"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfField"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefIrigMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefIrigModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefPzfModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefIrigState"), ("MBG-SNMP-LT-MIB", "mbgLtRefIrigStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefSHSMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefSHSModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefSHSTimeDiff"), ("MBG-SNMP-LT-MIB", "mbgLtRefDctState"), ("MBG-SNMP-LT-MIB", "mbgLtRefDctStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefDctField"), ("MBG-SNMP-LT-MIB", "mbgLtRefDctMode"), ("MBG-SNMP-LT-MIB", "mbgLtRefDctModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsLeapSecond"), ("MBG-SNMP-LT-MIB", "mbgLtRefGpsLeapCorrection"), ("MBG-SNMP-LT-MIB", "mbgLtRefMrsRef"), ("MBG-SNMP-LT-MIB", "mbgLtRefMrsRefVal"), ("MBG-SNMP-LT-MIB", "mbgLtRefMrsRefList"), ("MBG-SNMP-LT-MIB", "mbgLtRefMrsPrioList"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsGpsPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigCorr"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigOffsLimit"), ("MBG-SNMP-LT-MIB", "mbgLtMrsIrigPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsCorr"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsOffsLimit"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPpsPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqCorr"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqOffsLimit"), ("MBG-SNMP-LT-MIB", "mbgLtMrsFreqPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpCorr"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpOffsLimit"), ("MBG-SNMP-LT-MIB", "mbgLtMrsPtpPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpOffs"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpOffsVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpOffsBase"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpPrio"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpState"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpCorr"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpOffsLimit"), ("MBG-SNMP-LT-MIB", "mbgLtMrsNtpPrecision"), ("MBG-SNMP-LT-MIB", "mbgLtTrapMessage"), ("MBG-SNMP-LT-MIB", "mbgLtCfgHostname"), ("MBG-SNMP-LT-MIB", "mbgLtCfgDomainname"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNameserver1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNameserver2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSyslogserver1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSyslogserver2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgTelnetAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgFTPAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgHTTPAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgHTTPSAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSambaAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgIPv6Access"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSSHAccess"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer1IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer1Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer1Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer1Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer2IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer2Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer2Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer2Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer3IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer3Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer3Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer3Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer4Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer4Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer4Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer5IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer5Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer5Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer5Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer6IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer6Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer6Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer6Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer7IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer7Key"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer7Autokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPServer7Prefer"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPStratumLocalClock"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPTrustedKey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPBroadcastIP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPBroadcastKey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPBroadcastAutokey"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPAutokeyFeature"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNTPAtomPPS"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEMailTo"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEMailFrom"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEMailSmarthost"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPTrapReceiver1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPTrapReceiver2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPTrapRec1Community"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPTrapRec2Community"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPReadOnlyCommunity"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPReadWriteCommunity"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPContact"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSNMPLocation"), ("MBG-SNMP-LT-MIB", "mbgLtCfgWMailAddress1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgWMailAddress2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgVP100Display1IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgVP100Display1SN"), ("MBG-SNMP-LT-MIB", "mbgLtCfgVP100Display2IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgVP100Display2SN"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyNTPNotSync"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyNTPStopped"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyServerBoot"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyRefclkNoResponse"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyRefclockNotSync"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyAntennaFaulty"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyAntennaReconnect"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyConfigChanged"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifySHSTimeLimitError"), ("MBG-SNMP-LT-MIB", "mbgLtCfgNotifyLeapSecond"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf0NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf1NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf2NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf3NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf4NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf5NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf6NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf7NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv6IP2")], [("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf8NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv4IP"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv4Netmask"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv4Gateway"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9DHCPClient"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv6IP1"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv6IP2"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv6IP3"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9IPv6Autoconf"), ("MBG-SNMP-LT-MIB", "mbgLtCfgEthernetIf9NetLinkMode"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSHSCritLimit"), ("MBG-SNMP-LT-MIB", "mbgLtCfgSHSWarnLimit"), ("MBG-SNMP-LT-MIB", "mbgLtCfgMRSRefPriority"), ("MBG-SNMP-LT-MIB", "mbgLtCmdExecute"), ("MBG-SNMP-LT-MIB", "mbgLtCmdSetRefTime"), ("MBG-SNMP-LT-MIB", "mbgLtFdmPlFreq"), ("MBG-SNMP-LT-MIB", "mbgLtFdmFreqDev"), ("MBG-SNMP-LT-MIB", "mbgLtFdmNomFreq"), ("MBG-SNMP-LT-MIB", "mbgLtPtpMode"), ("MBG-SNMP-LT-MIB", "mbgLtPtpModeVal"), ("MBG-SNMP-LT-MIB", "mbgLtPtpPortState"), ("MBG-SNMP-LT-MIB", "mbgLtPtpPortStateVal"), ("MBG-SNMP-LT-MIB", "mbgLtPtpOffsetFromGM"), ("MBG-SNMP-LT-MIB", "mbgLtPtpOffsetFromGMVal"), ("MBG-SNMP-LT-MIB", "mbgLtPtpDelay"), ("MBG-SNMP-LT-MIB", "mbgLtPtpDelayVal")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mbgLtObjectsGroup = mbgLtObjectsGroup.setObjects(*_mbgLtObjectsGroup_obj)
    else:
        mbgLtObjectsGroup = mbgLtObjectsGroup.setObjects(*_mbgLtObjectsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtObjectsGroup = mbgLtObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgLtObjectsGroup.setDescription('The collection of objects for the LANTIME MIB')
mbgLtTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5597, 3, 90, 2, 2)).setObjects(("MBG-SNMP-LT-MIB", "mbgLtTrapNTPNotSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNTPStopped"), ("MBG-SNMP-LT-MIB", "mbgLtTrapServerBoot"), ("MBG-SNMP-LT-MIB", "mbgLtTrapReceiverNotResponding"), ("MBG-SNMP-LT-MIB", "mbgLtTrapReceiverNotSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapAntennaFaulty"), ("MBG-SNMP-LT-MIB", "mbgLtTrapAntennaReconnect"), ("MBG-SNMP-LT-MIB", "mbgLtTrapConfigChanged"), ("MBG-SNMP-LT-MIB", "mbgLtTrapLeapSecondAnnounced"), ("MBG-SNMP-LT-MIB", "mbgLtTrapSHSTimeLimitError"), ("MBG-SNMP-LT-MIB", "mbgLtTrapSecondaryRecNotSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPowerSupplyFailure"), ("MBG-SNMP-LT-MIB", "mbgLtTrapAntennaShortCircuit"), ("MBG-SNMP-LT-MIB", "mbgLtTrapReceiverSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNTPClientAlarm"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPowerSupplyUp"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNetworkDown"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNetworkUp"), ("MBG-SNMP-LT-MIB", "mbgLtTrapSecondaryRecNotResp"), ("MBG-SNMP-LT-MIB", "mbgLtTrapXmrLimitExceeded"), ("MBG-SNMP-LT-MIB", "mbgLtTrapXmrRefDisconnect"), ("MBG-SNMP-LT-MIB", "mbgLtTrapXmrRefReconnect"), ("MBG-SNMP-LT-MIB", "mbgLtTrapFdmError"), ("MBG-SNMP-LT-MIB", "mbgLtTrapSHSTimeLimitWarning"), ("MBG-SNMP-LT-MIB", "mbgLtTrapSecondaryRecSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNTPSync"), ("MBG-SNMP-LT-MIB", "mbgLtTrapNormalOperation"), ("MBG-SNMP-LT-MIB", "mbgLtTrapHeartbeat"), ("MBG-SNMP-LT-MIB", "mbgLtTrapTestNotification"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPtpPortDisconnected"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPtpPortConnected"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPtpStateChanged"), ("MBG-SNMP-LT-MIB", "mbgLtTrapPtpError"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mbgLtTrapsGroup = mbgLtTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: mbgLtTrapsGroup.setDescription('The collection of traps for the LANTIME MIB')
mibBuilder.exportSymbols("MBG-SNMP-LT-MIB", mbgLtCfgNTPServer3Prefer=mbgLtCfgNTPServer3Prefer, mbgLtCmdExecute=mbgLtCmdExecute, mbgLtTrapReceiverSync=mbgLtTrapReceiverSync, mbgLtCfgEthernetIf4=mbgLtCfgEthernetIf4, mbgLtCfgEthernetIf7DHCPClient=mbgLtCfgEthernetIf7DHCPClient, mbgLtRefGpsModeVal=mbgLtRefGpsModeVal, mbgLtMrsGpsOffsVal=mbgLtMrsGpsOffsVal, mbgLtGroups=mbgLtGroups, mbgLtRefPzfModeVal=mbgLtRefPzfModeVal, mbgLtCfgSNMPTrapRec2Community=mbgLtCfgSNMPTrapRec2Community, PYSNMP_MODULE_ID=mbgLantime, mbgLtCfgEthernetIf2IPv4Gateway=mbgLtCfgEthernetIf2IPv4Gateway, mbgLtConformance=mbgLtConformance, mbgLtCfgEthernetIf6=mbgLtCfgEthernetIf6, mbgLtCmd=mbgLtCmd, mbgLtTrapSHSTimeLimitError=mbgLtTrapSHSTimeLimitError, mbgLtCfgNTPServer1Prefer=mbgLtCfgNTPServer1Prefer, mbgLtCfgEthernetIf8IPv4Gateway=mbgLtCfgEthernetIf8IPv4Gateway, mbgLtMrsFreqStateVal=mbgLtMrsFreqStateVal, mbgLtCfgEthernetIf4IPv4Netmask=mbgLtCfgEthernetIf4IPv4Netmask, mbgLtRefDctState=mbgLtRefDctState, mbgLtMrsPtpCorr=mbgLtMrsPtpCorr, mbgLtCfgMRS=mbgLtCfgMRS, mbgLtCfgEthernetIf0IPv4Netmask=mbgLtCfgEthernetIf0IPv4Netmask, mbgLtRefGpsLeapCorrection=mbgLtRefGpsLeapCorrection, mbgLtCfgNTPServer5Autokey=mbgLtCfgNTPServer5Autokey, mbgLtCfgEthernetIf7NetLinkMode=mbgLtCfgEthernetIf7NetLinkMode, mbgLtCfgEthernetIf3=mbgLtCfgEthernetIf3, mbgLtCfgEthernetIf4IPv4IP=mbgLtCfgEthernetIf4IPv4IP, mbgLtMrsFreqOffsBase=mbgLtMrsFreqOffsBase, mbgLtCfgSNMPTrapReceiver2=mbgLtCfgSNMPTrapReceiver2, mbgLtMrsPtpOffs=mbgLtMrsPtpOffs, mbgLtCfgEthernetIf6NetLinkMode=mbgLtCfgEthernetIf6NetLinkMode, mbgLtCfgEthernetIf7IPv6IP2=mbgLtCfgEthernetIf7IPv6IP2, mbgLtPtpModeVal=mbgLtPtpModeVal, mbgLtCfgEthernetIf8IPv6IP2=mbgLtCfgEthernetIf8IPv6IP2, mbgLtMrsPpsOffsBase=mbgLtMrsPpsOffsBase, mbgLtCfgEthernetIf0NetLinkMode=mbgLtCfgEthernetIf0NetLinkMode, mbgLtCfgEMailFrom=mbgLtCfgEMailFrom, mbgLtMrsFreqPrecision=mbgLtMrsFreqPrecision, mbgLtMrsNtpOffs=mbgLtMrsNtpOffs, mbgLtCfgEthernetIf9IPv6IP1=mbgLtCfgEthernetIf9IPv6IP1, mbgLtCfgNTPServer5=mbgLtCfgNTPServer5, mbgLtRefSHSTimeDiff=mbgLtRefSHSTimeDiff, mbgLtMrsIrigOffsLimit=mbgLtMrsIrigOffsLimit, mbgLtCfgNTPBroadcastKey=mbgLtCfgNTPBroadcastKey, mbgLtCompliances=mbgLtCompliances, mbgLtRefGpsSatellites=mbgLtRefGpsSatellites, mbgLtCfgEthernetIf9IPv6IP3=mbgLtCfgEthernetIf9IPv6IP3, mbgLtCfgEthernetIf5IPv4Netmask=mbgLtCfgEthernetIf5IPv4Netmask, mbgLtCfgEthernetIf9DHCPClient=mbgLtCfgEthernetIf9DHCPClient, mbgLtMrsFreqOffs=mbgLtMrsFreqOffs, mbgLtCfgEthernetIf4IPv4Gateway=mbgLtCfgEthernetIf4IPv4Gateway, mbgLtRefIrigState=mbgLtRefIrigState, mbgLtMrsFreqState=mbgLtMrsFreqState, mbgLtMrsPtpState=mbgLtMrsPtpState, mbgLtCfgNTPServer6Prefer=mbgLtCfgNTPServer6Prefer, mbgLtCfgEthernetIf1DHCPClient=mbgLtCfgEthernetIf1DHCPClient, mbgLtCfgEthernetIf6IPv6IP2=mbgLtCfgEthernetIf6IPv6IP2, mbgLtCfgEthernetIf2IPv6IP3=mbgLtCfgEthernetIf2IPv6IP3, mbgLtCfgVP100Display2IP=mbgLtCfgVP100Display2IP, mbgLtCfgEthernetIf7IPv4Gateway=mbgLtCfgEthernetIf7IPv4Gateway, mbgLtMrsPpsOffsLimit=mbgLtMrsPpsOffsLimit, mbgLtCfgEthernetIf4IPv6IP3=mbgLtCfgEthernetIf4IPv6IP3, mbgLtCfgNTPServer3Autokey=mbgLtCfgNTPServer3Autokey, mbgLtCfgEthernetIf2=mbgLtCfgEthernetIf2, mbgLtMrsIrigOffsBase=mbgLtMrsIrigOffsBase, mbgLtCfgSNMPAccess=mbgLtCfgSNMPAccess, mbgLtCfgNTPAutokeyFeature=mbgLtCfgNTPAutokeyFeature, mbgLtCfgEthernetIf7IPv4Netmask=mbgLtCfgEthernetIf7IPv4Netmask, mbgLtCfgNameserver2=mbgLtCfgNameserver2, mbgLtCfgEthernetIf2IPv6IP2=mbgLtCfgEthernetIf2IPv6IP2, mbgLtCfgSHSWarnLimit=mbgLtCfgSHSWarnLimit, mbgLtRefGpsState=mbgLtRefGpsState, mbgLtCfgNTPServer7Autokey=mbgLtCfgNTPServer7Autokey, mbgLtTrapNetworkUp=mbgLtTrapNetworkUp, mbgLtRefClockMode=mbgLtRefClockMode, mbgLtMrsPtpOffsBase=mbgLtMrsPtpOffsBase, mbgLtRefSHSModeVal=mbgLtRefSHSModeVal, mbgLtMrsGpsStateVal=mbgLtMrsGpsStateVal, mbgLtCfgEthernetIf4IPv6IP2=mbgLtCfgEthernetIf4IPv6IP2, mbgLtCfgEthernetIf1IPv4IP=mbgLtCfgEthernetIf1IPv4IP, mbgLtRefClockType=mbgLtRefClockType, mbgLtCfgNTPAtomPPS=mbgLtCfgNTPAtomPPS, mbgLtNtpCurrentState=mbgLtNtpCurrentState, mbgLtCfgNTPBroadcastIP=mbgLtCfgNTPBroadcastIP, mbgLtRefDctModeVal=mbgLtRefDctModeVal, mbgLtTrapXmrRefReconnect=mbgLtTrapXmrRefReconnect, mbgLtCfgNTPServer6IP=mbgLtCfgNTPServer6IP, mbgLtCfgEthernetIf6IPv6IP1=mbgLtCfgEthernetIf6IPv6IP1, mbgLtCfgNotifyServerBoot=mbgLtCfgNotifyServerBoot, mbgLtNotifications=mbgLtNotifications, mbgLtTrapNormalOperation=mbgLtTrapNormalOperation, mbgLtCfgWalldisplay=mbgLtCfgWalldisplay, mbgLtCfgEthernetIf6IPv4Gateway=mbgLtCfgEthernetIf6IPv4Gateway, mbgLtRefGpsStateVal=mbgLtRefGpsStateVal, mbgLtCfgSSHAccess=mbgLtCfgSSHAccess, mbgLtMrsPpsCorr=mbgLtMrsPpsCorr, mbgLtCfgSyslogserver2=mbgLtCfgSyslogserver2, mbgLtPtp=mbgLtPtp, mbgLtMrsPpsPrecision=mbgLtMrsPpsPrecision, mbgLtMrs=mbgLtMrs, mbgLtCfgNTPServer3=mbgLtCfgNTPServer3, mbgLtTrapPtpPortDisconnected=mbgLtTrapPtpPortDisconnected, mbgLtMrsGpsState=mbgLtMrsGpsState, mbgLtCfgEthernetIf8IPv6IP3=mbgLtCfgEthernetIf8IPv6IP3, mbgLtCfgEthernetIf0IPv4Gateway=mbgLtCfgEthernetIf0IPv4Gateway, mbgLtRefDctMode=mbgLtRefDctMode, mbgLtCfgNotifyLeapSecond=mbgLtCfgNotifyLeapSecond, mbgLtNtpAuthKeyId=mbgLtNtpAuthKeyId, mbgLtCfgWMailAddress2=mbgLtCfgWMailAddress2, mbgLtMrsFreqOffsLimit=mbgLtMrsFreqOffsLimit, mbgLtMrsFreqPrio=mbgLtMrsFreqPrio, mbgLtTrapXmrRefDisconnect=mbgLtTrapXmrRefDisconnect, mbgLtTrapNTPSync=mbgLtTrapNTPSync, mbgLtMrsPpsOffsVal=mbgLtMrsPpsOffsVal, mbgLtTrapReceiverNotResponding=mbgLtTrapReceiverNotResponding, mbgLtNtpActiveRefclockOffset=mbgLtNtpActiveRefclockOffset, mbgLtCfgEthernetIf4IPv6IP1=mbgLtCfgEthernetIf4IPv6IP1, mbgLtCmdSetRefTime=mbgLtCmdSetRefTime, mbgLtMrsIrigCorr=mbgLtMrsIrigCorr, mbgLtCfgNTPServer7IP=mbgLtCfgNTPServer7IP, mbgLtRefclock=mbgLtRefclock, mbgLtCfgEthernetIf5IPv6IP1=mbgLtCfgEthernetIf5IPv6IP1, mbgLtRefGpsMode=mbgLtRefGpsMode, mbgLtCfgSambaAccess=mbgLtCfgSambaAccess, mbgLtMrsPpsPrio=mbgLtMrsPpsPrio, mbgLtCfgNTPServer7Key=mbgLtCfgNTPServer7Key, mbgLtCfgNTPServer2Prefer=mbgLtCfgNTPServer2Prefer, mbgLtRefPzfKorrelation=mbgLtRefPzfKorrelation, mbgLtRefMrsPrioList=mbgLtRefMrsPrioList, mbgLtCfgNTPServer4Key=mbgLtCfgNTPServer4Key, mbgLtMrsGpsPrecision=mbgLtMrsGpsPrecision, mbgLtFirmwareVersionVal=mbgLtFirmwareVersionVal, mbgLtCfgEthernetIf2NetLinkMode=mbgLtCfgEthernetIf2NetLinkMode, mbgLtTrapMessage=mbgLtTrapMessage, mbgLtCfgNTPTrustedKey=mbgLtCfgNTPTrustedKey, mbgLtMrsNtpOffsBase=mbgLtMrsNtpOffsBase, mbgLtPtpMode=mbgLtPtpMode, mbgLtTrapNetworkDown=mbgLtTrapNetworkDown, mbgLtCfgEthernetIf1NetLinkMode=mbgLtCfgEthernetIf1NetLinkMode, mbgLtCfgNTPServer2IP=mbgLtCfgNTPServer2IP, mbgLtCfgEthernetIf0IPv6IP3=mbgLtCfgEthernetIf0IPv6IP3, mbgLtCfgEMail=mbgLtCfgEMail, mbgLtCfgNTPStratumLocalClock=mbgLtCfgNTPStratumLocalClock, mbgLtFdm=mbgLtFdm, mbgLtCfgEMailSmarthost=mbgLtCfgEMailSmarthost, mbgLtCfg=mbgLtCfg, mbgLtCfgEthernetIf3IPv4IP=mbgLtCfgEthernetIf3IPv4IP, mbgLtCfgEthernetIf5IPv6IP2=mbgLtCfgEthernetIf5IPv6IP2, mbgLtCfgEthernetIf6IPv6Autoconf=mbgLtCfgEthernetIf6IPv6Autoconf, mbgLtCfgTelnetAccess=mbgLtCfgTelnetAccess, mbgLtRefGpsSatellitesGood=mbgLtRefGpsSatellitesGood, mbgLtCfgMRSRefPriority=mbgLtCfgMRSRefPriority, mbgLtCfgNTPServer3Key=mbgLtCfgNTPServer3Key, mbgLtMrsIrigState=mbgLtMrsIrigState, mbgLtCfgEthernetIf7IPv6IP3=mbgLtCfgEthernetIf7IPv6IP3, mbgLtCfgEthernetIf4IPv6Autoconf=mbgLtCfgEthernetIf4IPv6Autoconf, mbgLtCfgEthernetIf5IPv6IP3=mbgLtCfgEthernetIf5IPv6IP3, mbgLtCfgNTPServer4IP=mbgLtCfgNTPServer4IP, mbgLtCfgSNMP=mbgLtCfgSNMP, mbgLtCfgEthernetIf3NetLinkMode=mbgLtCfgEthernetIf3NetLinkMode, mbgLtCfgHTTPSAccess=mbgLtCfgHTTPSAccess, mbgLtPtpDelay=mbgLtPtpDelay, mbgLtCfgEthernetIf9=mbgLtCfgEthernetIf9, mbgLtCfgNTPServer1IP=mbgLtCfgNTPServer1IP, mbgLtTrapsGroup=mbgLtTrapsGroup, mbgLtRefDctField=mbgLtRefDctField, mbgLtRefMrsRef=mbgLtRefMrsRef, mbgLtTraps=mbgLtTraps, mbgLtCfgVP100Display2SN=mbgLtCfgVP100Display2SN, mbgLtCfgNTPBroadcastAutokey=mbgLtCfgNTPBroadcastAutokey, mbgLtCfgEthernetIf4DHCPClient=mbgLtCfgEthernetIf4DHCPClient, mbgLtCfgEthernetIf1IPv4Netmask=mbgLtCfgEthernetIf1IPv4Netmask, mbgLtMrsPpsState=mbgLtMrsPpsState, mbgLtTrapLeapSecondAnnounced=mbgLtTrapLeapSecondAnnounced, mbgLtCfgNetwork=mbgLtCfgNetwork, mbgLtMrsIrigPrio=mbgLtMrsIrigPrio, mbgLtCfgNTPServer4Autokey=mbgLtCfgNTPServer4Autokey, mbgLtRefPzfStateVal=mbgLtRefPzfStateVal, mbgLtMrsNtpStateVal=mbgLtMrsNtpStateVal, mbgLtCfgEthernetIf9IPv4IP=mbgLtCfgEthernetIf9IPv4IP, mbgLtTrapConfigChanged=mbgLtTrapConfigChanged, mbgLtCfgDomainname=mbgLtCfgDomainname, mbgLtCfgHostname=mbgLtCfgHostname, mbgLtRefGpsPosition=mbgLtRefGpsPosition, mbgLtMrsNtpPrio=mbgLtMrsNtpPrio, mbgLtCfgEthernetIf5DHCPClient=mbgLtCfgEthernetIf5DHCPClient, mbgLtCfgEthernetIf7IPv6Autoconf=mbgLtCfgEthernetIf7IPv6Autoconf, mbgLtRefDctStateVal=mbgLtRefDctStateVal, mbgLtCfgNotifyRefclockNotSync=mbgLtCfgNotifyRefclockNotSync, mbgLtCfgNotifyNTPNotSync=mbgLtCfgNotifyNTPNotSync, mbgLtCfgEthernetIf7=mbgLtCfgEthernetIf7, mbgLtCfgSNMPReadOnlyCommunity=mbgLtCfgSNMPReadOnlyCommunity, mbgLtMrsPtpOffsVal=mbgLtMrsPtpOffsVal, mbgLtCfgSNMPContact=mbgLtCfgSNMPContact, mbgLtCfgEthernetIf8DHCPClient=mbgLtCfgEthernetIf8DHCPClient, mbgLtMrsPpsOffs=mbgLtMrsPpsOffs, mbgLtNtpActiveRefclockOffsetVal=mbgLtNtpActiveRefclockOffsetVal, mbgLtFdmFreqDev=mbgLtFdmFreqDev, mbgLtMrsNtpPrecision=mbgLtMrsNtpPrecision, mbgLtRefClockTypeVal=mbgLtRefClockTypeVal, mbgLtMrsFreqOffsVal=mbgLtMrsFreqOffsVal, mbgLtCfgNTPServer6Key=mbgLtCfgNTPServer6Key, mbgLtCfgEthernetIf6IPv4Netmask=mbgLtCfgEthernetIf6IPv4Netmask, mbgLtCfgEthernetIf9IPv4Netmask=mbgLtCfgEthernetIf9IPv4Netmask, mbgLtCfgEthernetIf9NetLinkMode=mbgLtCfgEthernetIf9NetLinkMode, mbgLtPtpPortStateVal=mbgLtPtpPortStateVal, mbgLtCfgEthernetIf2DHCPClient=mbgLtCfgEthernetIf2DHCPClient, mbgLtCfgNotify=mbgLtCfgNotify, mbgLtTrapSecondaryRecNotSync=mbgLtTrapSecondaryRecNotSync, mbgLtTrapAntennaReconnect=mbgLtTrapAntennaReconnect, mbgLtRefGpsLeapSecond=mbgLtRefGpsLeapSecond, mbgLtCfgNotifyConfigChanged=mbgLtCfgNotifyConfigChanged, mbgLtFdmPlFreq=mbgLtFdmPlFreq, mbgLtCfgNTPServer6Autokey=mbgLtCfgNTPServer6Autokey, mbgLtCfgEthernetIf5=mbgLtCfgEthernetIf5, mbgLtCfgNotifyAntennaFaulty=mbgLtCfgNotifyAntennaFaulty, mbgLtTrapHeartbeat=mbgLtTrapHeartbeat, mbgLtCfgNTPServer7Prefer=mbgLtCfgNTPServer7Prefer, mbgLtRefSHSMode=mbgLtRefSHSMode, mbgLtCfgEthernetIf1=mbgLtCfgEthernetIf1, mbgLtCfgEthernetIf1IPv6Autoconf=mbgLtCfgEthernetIf1IPv6Autoconf, mbgLtCfgEthernetIf7IPv4IP=mbgLtCfgEthernetIf7IPv4IP, mbgLtCfgSHS=mbgLtCfgSHS, mbgLtCfgEthernetIf8IPv6IP1=mbgLtCfgEthernetIf8IPv6IP1, mbgLtCfgNTPServer2Autokey=mbgLtCfgNTPServer2Autokey, mbgLtCfgWMailAddress1=mbgLtCfgWMailAddress1, mbgLtMrsPtpStateVal=mbgLtMrsPtpStateVal, mbgLtTrapSHSTimeLimitWarning=mbgLtTrapSHSTimeLimitWarning, mbgLtCfgNTPServer4Prefer=mbgLtCfgNTPServer4Prefer, mbgLtRefPzfField=mbgLtRefPzfField, mbgLtRefIrigStateVal=mbgLtRefIrigStateVal, mbgLtMrsNtpOffsLimit=mbgLtMrsNtpOffsLimit, mbgLtCfgNTPServer3IP=mbgLtCfgNTPServer3IP, mbgLtNtp=mbgLtNtp, mbgLtCfgEthernetIf2IPv4Netmask=mbgLtCfgEthernetIf2IPv4Netmask, mbgLtCfgEthernetIf8IPv4IP=mbgLtCfgEthernetIf8IPv4IP, mbgLtTrapAntennaFaulty=mbgLtTrapAntennaFaulty, mbgLtMrsRefFreq=mbgLtMrsRefFreq, mbgLtCfgEthernetIf2IPv6Autoconf=mbgLtCfgEthernetIf2IPv6Autoconf, mbgLtNtpVersion=mbgLtNtpVersion, mbgLtRefClockModeVal=mbgLtRefClockModeVal, mbgLtCfgEthernetIf1IPv4Gateway=mbgLtCfgEthernetIf1IPv4Gateway, mbgLtMrsRef=mbgLtMrsRef, mbgLtTrapFdmError=mbgLtTrapFdmError, mbgLtMrsIrigStateVal=mbgLtMrsIrigStateVal, mbgLtRefGpsSatellitesInView=mbgLtRefGpsSatellitesInView, mbgLtMrsPtpOffsLimit=mbgLtMrsPtpOffsLimit, mbgLtFirmwareVersion=mbgLtFirmwareVersion, mbgLtCfgEthernetIf3DHCPClient=mbgLtCfgEthernetIf3DHCPClient, mbgLtMrsNtpState=mbgLtMrsNtpState, mbgLtCfgVP100Display1SN=mbgLtCfgVP100Display1SN, mbgLtTrapPowerSupplyFailure=mbgLtTrapPowerSupplyFailure)
mibBuilder.exportSymbols("MBG-SNMP-LT-MIB", mbgLtCfgNTPServer2=mbgLtCfgNTPServer2, mbgLtCfgNotifySHSTimeLimitError=mbgLtCfgNotifySHSTimeLimitError, mbgLtCfgVP100Display1IP=mbgLtCfgVP100Display1IP, mbgLtCfgEthernetIf5IPv6Autoconf=mbgLtCfgEthernetIf5IPv6Autoconf, mbgLtNtpActiveRefclockId=mbgLtNtpActiveRefclockId, mbgLtCfgNTPServer5Key=mbgLtCfgNTPServer5Key, mbgLtCfgSNMPLocation=mbgLtCfgSNMPLocation, mbgLtTrapNTPClientAlarm=mbgLtTrapNTPClientAlarm, mbgLtCfgEthernetIf1IPv6IP2=mbgLtCfgEthernetIf1IPv6IP2, mbgLtCfgNTPServer5Prefer=mbgLtCfgNTPServer5Prefer, mbgLtCfgNTPServer1Autokey=mbgLtCfgNTPServer1Autokey, mbgLtTrapPowerSupplyUp=mbgLtTrapPowerSupplyUp, mbgLtCfgNTPServer2Key=mbgLtCfgNTPServer2Key, mbgLtTrapXmrLimitExceeded=mbgLtTrapXmrLimitExceeded, mbgLtCfgEthernet=mbgLtCfgEthernet, mbgLtPtpDelayVal=mbgLtPtpDelayVal, mbgLtCfgSyslogserver1=mbgLtCfgSyslogserver1, mbgLtCfgEthernetIf4NetLinkMode=mbgLtCfgEthernetIf4NetLinkMode, mbgLtTrapSecondaryRecSync=mbgLtTrapSecondaryRecSync, mbgLtRefPzfState=mbgLtRefPzfState, mbgLtCfgEthernetIf0DHCPClient=mbgLtCfgEthernetIf0DHCPClient, mbgLtNtpStratum=mbgLtNtpStratum, mbgLtCfgEthernetIf0IPv6Autoconf=mbgLtCfgEthernetIf0IPv6Autoconf, mbgLtTrapPtpStateChanged=mbgLtTrapPtpStateChanged, mbgLtCfgSNMPTrapReceiver1=mbgLtCfgSNMPTrapReceiver1, mbgLtCfgEthernetIf0IPv6IP2=mbgLtCfgEthernetIf0IPv6IP2, mbgLtCfgEthernetIf0IPv4IP=mbgLtCfgEthernetIf0IPv4IP, mbgLtCfgFTPAccess=mbgLtCfgFTPAccess, mbgLtCfgEthernetIf8IPv6Autoconf=mbgLtCfgEthernetIf8IPv6Autoconf, mbgLtMrsFreqCorr=mbgLtMrsFreqCorr, mbgLtCfgEthernetIf8=mbgLtCfgEthernetIf8, mbgLtCfgEthernetIf3IPv4Netmask=mbgLtCfgEthernetIf3IPv4Netmask, mbgLtObjectsGroup=mbgLtObjectsGroup, mbgLtCfgNotifyRefclkNoResponse=mbgLtCfgNotifyRefclkNoResponse, mbgLtCfgNTPServer7=mbgLtCfgNTPServer7, mbgLtRefIrigModeVal=mbgLtRefIrigModeVal, mbgLtCfgEthernetIf3IPv6IP1=mbgLtCfgEthernetIf3IPv6IP1, mbgLtMrsGpsPrio=mbgLtMrsGpsPrio, mbgLtMrsIrigOffsVal=mbgLtMrsIrigOffsVal, mbgLtMrsPtpPrio=mbgLtMrsPtpPrio, mbgLtCfgHTTPAccess=mbgLtCfgHTTPAccess, mbgLtCfgEthernetIf0=mbgLtCfgEthernetIf0, mbgLtNtpCurrentStateVal=mbgLtNtpCurrentStateVal, mbgLtMrsRefIrig=mbgLtMrsRefIrig, mbgLtCfgEthernetIf8IPv4Netmask=mbgLtCfgEthernetIf8IPv4Netmask, mbgLtCfgEthernetIf2IPv4IP=mbgLtCfgEthernetIf2IPv4IP, mbgLtCfgEthernetIf6IPv4IP=mbgLtCfgEthernetIf6IPv4IP, mbgLtInfo=mbgLtInfo, mbgLtTrapPtpError=mbgLtTrapPtpError, mbgLtCfgEthernetIf8NetLinkMode=mbgLtCfgEthernetIf8NetLinkMode, mbgLtPtpPortState=mbgLtPtpPortState, mbgLtCfgEthernetIf5NetLinkMode=mbgLtCfgEthernetIf5NetLinkMode, mbgLtCfgSNMPTrapRec1Community=mbgLtCfgSNMPTrapRec1Community, mbgLtCfgEthernetIf6DHCPClient=mbgLtCfgEthernetIf6DHCPClient, mbgLtCfgNTPServer6=mbgLtCfgNTPServer6, mbgLtCfgNTPServer5IP=mbgLtCfgNTPServer5IP, mbgLtMrsRefPtp=mbgLtMrsRefPtp, mbgLtCfgEthernetIf7IPv6IP1=mbgLtCfgEthernetIf7IPv6IP1, mbgLtCfgEthernetIf1IPv6IP1=mbgLtCfgEthernetIf1IPv6IP1, mbgLtFdmNomFreq=mbgLtFdmNomFreq, mbgLtMrsRefPps=mbgLtMrsRefPps, mbgLtMrsRefNtp=mbgLtMrsRefNtp, mbgLtPtpOffsetFromGM=mbgLtPtpOffsetFromGM, mbgLtTrapTestNotification=mbgLtTrapTestNotification, mbgLtNtpNumberOfRefclocks=mbgLtNtpNumberOfRefclocks, mbgLtTrapServerBoot=mbgLtTrapServerBoot, mbgLtCfgEthernetIf5IPv4Gateway=mbgLtCfgEthernetIf5IPv4Gateway, mbgLtCfgEthernetIf5IPv4IP=mbgLtCfgEthernetIf5IPv4IP, mbgLtCfgEthernetIf3IPv6Autoconf=mbgLtCfgEthernetIf3IPv6Autoconf, mbgLtCfgEthernetIf3IPv6IP3=mbgLtCfgEthernetIf3IPv6IP3, mbgLtRefIrigMode=mbgLtRefIrigMode, mbgLtMrsPtpPrecision=mbgLtMrsPtpPrecision, mbgLtMrsRefGps=mbgLtMrsRefGps, mbgLtCfgEthernetIf6IPv6IP3=mbgLtCfgEthernetIf6IPv6IP3, mbgLtTrapPtpPortConnected=mbgLtTrapPtpPortConnected, mbgLtCfgNotifyAntennaReconnect=mbgLtCfgNotifyAntennaReconnect, mbgLtTrapReceiverNotSync=mbgLtTrapReceiverNotSync, mbgLtMrsIrigPrecision=mbgLtMrsIrigPrecision, mbgLtCfgEthernetIf2IPv6IP1=mbgLtCfgEthernetIf2IPv6IP1, mbgLtCfgEthernetIf3IPv6IP2=mbgLtCfgEthernetIf3IPv6IP2, mbgLtCfgNameserver1=mbgLtCfgNameserver1, mbgLtMrsGpsOffs=mbgLtMrsGpsOffs, mbgLtTrapAntennaShortCircuit=mbgLtTrapAntennaShortCircuit, mbgLtNtpActiveRefclockName=mbgLtNtpActiveRefclockName, mbgLtCfgNTP=mbgLtCfgNTP, mbgLtCfgEthernetIf9IPv6Autoconf=mbgLtCfgEthernetIf9IPv6Autoconf, mbgLantime=mbgLantime, mbgLtCfgWinpopup=mbgLtCfgWinpopup, mbgLtMrsGpsOffsBase=mbgLtMrsGpsOffsBase, mbgLtMrsNtpCorr=mbgLtMrsNtpCorr, mbgLtRefMrsRefList=mbgLtRefMrsRefList, mbgLtMrsIrigOffs=mbgLtMrsIrigOffs, mbgLtCfgEthernetIf0IPv6IP1=mbgLtCfgEthernetIf0IPv6IP1, mbgLtMrsPpsStateVal=mbgLtMrsPpsStateVal, mbgLtCfgEthernetIf9IPv4Gateway=mbgLtCfgEthernetIf9IPv4Gateway, mbgLtCfgEthernetIf3IPv4Gateway=mbgLtCfgEthernetIf3IPv4Gateway, mbgLtCfgEthernetIf1IPv6IP3=mbgLtCfgEthernetIf1IPv6IP3, mbgLtCfgSHSCritLimit=mbgLtCfgSHSCritLimit, mbgLtCfgNTPServer4=mbgLtCfgNTPServer4, mbgLtCfgIPv6Access=mbgLtCfgIPv6Access, mbgLtCfgSNMPReadWriteCommunity=mbgLtCfgSNMPReadWriteCommunity, mbgLtCompliance=mbgLtCompliance, mbgLtTrapNTPNotSync=mbgLtTrapNTPNotSync, mbgLtCfgNTPServer1Key=mbgLtCfgNTPServer1Key, mbgLtCfgNTPServer1=mbgLtCfgNTPServer1, mbgLtRefMrsRefVal=mbgLtRefMrsRefVal, mbgLtTrapSecondaryRecNotResp=mbgLtTrapSecondaryRecNotResp, mbgLtCfgEthernetIf9IPv6IP2=mbgLtCfgEthernetIf9IPv6IP2, mbgLtPtpOffsetFromGMVal=mbgLtPtpOffsetFromGMVal, mbgLtTrapNTPStopped=mbgLtTrapNTPStopped, mbgLtCfgEMailTo=mbgLtCfgEMailTo, mbgLtCfgNotifyNTPStopped=mbgLtCfgNotifyNTPStopped, mbgLtMrsNtpOffsVal=mbgLtMrsNtpOffsVal, mbgLtRefPzfMode=mbgLtRefPzfMode)
