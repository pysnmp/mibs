#
# PySNMP MIB module F3-L3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-L3-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 10:05:31 2024
# On host fv-az801-864 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
IpVersion, VlanId, OperationalState, VlanPriority, FlowSecState, TrafficDirection, PerfCounter64, AdminState, SecondaryState, F3DisplayString, CmPmBinAction, CmPmIntervalType = mibBuilder.importSymbols("CM-COMMON-MIB", "IpVersion", "VlanId", "OperationalState", "VlanPriority", "FlowSecState", "TrafficDirection", "PerfCounter64", "AdminState", "SecondaryState", "F3DisplayString", "CmPmBinAction", "CmPmIntervalType")
neIndex, slotIndex, shelfIndex = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex", "slotIndex", "shelfIndex")
PolicerAlgorithmType, AclNoMatchDispositionType, PolicerColorMode, ShapingType = mibBuilder.importSymbols("CM-FACILITY-MIB", "PolicerAlgorithmType", "AclNoMatchDispositionType", "PolicerColorMode", "ShapingType")
IpEntryType, DHCPHostNameType, CmDhcpRole, DHCPCIDType, IpMode = mibBuilder.importSymbols("CM-IP-MIB", "IpEntryType", "DHCPHostNameType", "CmDhcpRole", "DHCPCIDType", "IpMode")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
Ipv6Address, = mibBuilder.importSymbols("IPV6-TC", "Ipv6Address")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
TimeTicks, ObjectIdentity, IpAddress, Unsigned32, MibIdentifier, ModuleIdentity, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32, NotificationType, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "IpAddress", "Unsigned32", "MibIdentifier", "ModuleIdentity", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32", "NotificationType", "Gauge32", "Bits")
MacAddress, RowStatus, TruthValue, DateAndTime, VariablePointer, DisplayString, TextualConvention, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "RowStatus", "TruthValue", "DateAndTime", "VariablePointer", "DisplayString", "TextualConvention", "StorageType")
f3L3MIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37))
f3L3MIB.setRevisions(('2018-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3L3MIB.setRevisionsDescriptions(('\n        Notes from release 201908010000Z\n        (1) Added new objects to f3L3TrafficIPInterfaceTable:\n             f3L3TrafficIPIfMtu\n\n        Notes from release 201810250000Z\n        (1) Added new objects to cmL3FlowPointTable:\n             cmL3FlowPointEgressShapingType\n\n        Notes from release 201810240000Z\n        (1) Added new objects to cmL3FlowPointTable:\n             cmL3FlowPointWfqSegmentationCOS\n             cmL3FlowPointWfqGroupCOS\n             cmL3FlowPointWfqGroupEirLo\n             cmL3FlowPointWfqGroupEirHi\n        (2) Added new object to cmL3QosShaperTable:\n             cmL3QosShaperWfqWeight\n\n      Notes from release 201809060000Z\n        (1) Added new table:\n            f3L3TrafficIpv4AllRouteTable\n        (2) Deprecated table:\n            f3L3TrafficIpv4RouteTable\n        \n        Notes from release 201808010000Z\n        (1) Added new attribute:\n            f3L3TrafficBgpPeerLocalPreference\n            f3L3TrafficBgpPeerRouteReflectorClient\n            f3L3TrafficBgpPeerRouteReflectorClusterId\n\n        Notes from release 201807130000Z\n        (1) Added new attribute:\n            f3VrfOspfRouterVersion\n\n         Notes from release 201807130000Z\n        (1) Depreceted attribute:\n            f3L3TrafficOspfNeighborInterface\n        (2) Added new attribute:\n            f3L3TrafficOspfNeighborLocalInterfaceName\n\n        Notes from release 201807120000Z\n        (1) Depreceted attributes:\n            f3L3TrafficBgpRouterConnectedRoutesRedistControl\n            f3L3TrafficBgpRouterOspfRoutesRedistControl\n            f3L3TrafficBgpRouterStaticRoutesRedistControl\n            f3L3TrafficBgpRouterDhcpRoutesRedistControl \n        \n        Notes from release 201806260000Z\n        (1) Added new table:\n            f3L3TrafficBgpPeerAddressFamilyTable\n\n        Notes from release 201806200000Z\n          (1) Renamed OspfRole to TrafficOspfRole.\n          (2) Renamed OspfAreaType to TrafficOspfAreaType.\n\n         Notes from release 201802020000Z\n           (1) Added new tables:\n               f3L3TrafficBgpRouterTable,\n               f3L3TrafficBgpRouteTable,\n               f3L3TrafficBgpPeerTable,\n               f3VrfOspfRouterTable,\n               f3L3TrafficOspfAreaTable,\n               f3L3TrafficOspfAreaIfMemberTable,\n               f3VrfLoopbackInterfaceTable,\n               f3L3TrafficOspfAsLsDbTable,\n               f3L3TrafficOspfLsDbTable,\n               f3L3TrafficOspfNeighborTable,\n               f3L3TrafficIPInterfaceOspfTable,\n               f3L3TrafficIPv6InterfaceTable,\n               f3L3TrafficIPv6AddressTable,\n               f3L3TrafficIPv6PrefixTable,\n               f3L3TrafficIPv6NdpTable,\n               f3L3TrafficIpv6RouteTable,\n               f3DhcpV6RelayAgentTable,\n               f3DhcpV6RelayAgentClientTrafficIpIfMemberTable\n           (2) Deprecated f3VrfAction, added f3VrfActionX\n           (3) Deprecated f3L3TrafficIpv4RouteStatus, \n               added f3L3TrafficIpv4RouteStatusX\n           (4) Deprecated f3L3TrafficIPIfAction,\n               added f3L3TrafficIPIfActionX\n\n           Notes from release 201712140000Z\n            1) added cmL3FlowPointThresholdCrossingAlert, cmL3QosPolicerThresholdCrossingAlert, \n               cmL3QosShaperThresholdCrossingAlert\n            2) changed the range of f3L3TrafficIpInterfaceHistoryIndex from 1..4 to 1..65535\n            3) changed the range of f3L3AclRuleHistoryIndex from 1..4 to 1..65535\n            4) changed the range of cmL3FlowPointHistoryIndex from 1..4 to 1..65535\n\n          Notes from release 201711300000Z\n            a) added cmL3FlowPointAclNoMatchDisposition to CML3FlowPointEntry\n\n          Notes from release 201711270000Z\n            a) added cmL3FlowPointStatsAclDropNoMatch to CML3FlowPointStatsEntry\n            b) added cmL3FlowPointHistoryAclDropNoMatch to CML3FlowPointHistoryEntry\n\n          Notes from release 201711130000Z\n            a) added f3VrfActionIfName to f3VrfTable\n            b) moved the action flushArpCache from TrafficIpInterfaceActionType to VrfActionType\n\n          Notes from release 201711050000Z\n            a) marked f3VrfAccIsolationControlEnabled obsolete\n            b) added VrfActionType and deprecated VrfAction\n            c) deprecaed f3VrfAction and added f3VrfActionX\n            d) deprecated TrafficIpRouteStatus and added TrafficIpRouteStatusType\n            e) deprecated AffectiveArpActionType and added TrafficIpInterfaceActionType \n            f) mark f3L3TrafficIpv4RouteFlags obsolete\n            g) deprecated f3L3TrafficIpv4RouteStatus and added f3L3TrafficIpv4RouteStatusX\n            h) deprecated f3L3TrafficIPIfAction and added f3L3TrafficIPIfActionX\n\n          Notes from release 201709200000Z\n            a) change f3L3TrafficIPIfDhcpEnabled to read-write\n\n          Notes from release 201709150000Z\n            a) moved PointPolicingEnabled attribute from cmL3FlowPointTable to cmL3QosPolicerTable\n\n          Notes from release 201708150000Z\n            a) added the following tables to suport xgpro NIDs\n              cmL3FlowPointTable\n              cmL3QosPolicerTable\n              cmL3QosShaperTable\n              cmL3FlowPointStatsTable\n              cmL3FlowPointHistoryTable\n              cmL3FlowPointThresholdTable\n              cmL3QosPolicerStatsTable\n              cmL3QosPolicerHistoryTable\n              cmL3QosPolicerThresholdTable\n              cmL3QosShaperStatsTable\n              cmL3QosShaperHistoryTable\n              cmL3QosShaperThresholdTable\n\n           Notes from release 201703220000Z\n              (1) New f3L3AclRuleTable column:\n                  - f3L3AclRuleActive\n\n          Notes from release 201409120000Z',))
if mibBuilder.loadTexts: f3L3MIB.setLastUpdated('201810250000Z')
if mibBuilder.loadTexts: f3L3MIB.setOrganization('ADVA Optical Networking SE')
if mibBuilder.loadTexts: f3L3MIB.setContactInfo('Web URL: http://adva.com/\n        E-mail:  support@adva.com\n        Postal:  ADVA Optical Networking SE\n             Campus Martinsried\n             Fraunhoferstrasse 9a\n             82152 Martinsried/Munich\n             Germany\n        Phone: +49 089 89 06 65 0\n        Fax:  +49 089 89 06 65 199 ')
if mibBuilder.loadTexts: f3L3MIB.setDescription('This module defines the L3 MIB definitions used by \n             the F3 (FSP150CM/CC) product lines.\n             Copyright (C) ADVA.')
f3L3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1))
f3L3Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2))
f3L3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3))
f3L3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4))
cmL3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5))
class BgpGracefulRestartControlType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("enable", 1), ("disable", 2), ("helperOnly", 3))

class EcmpDistributionType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("l3", 1), ("l4", 2))

class BgpUpdateSourceType(TextualConvention, Integer32):
    description = 'The type to update source IP.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("ipv4Address", 2), ("ipv6Address", 3), ("interfaceName", 4))

class BgpRouteFilterDirection(TextualConvention, Integer32):
    description = 'Config parameters related to inbound or outbound route filter.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("in", 1), ("out", 2))

class IpPrefixDispositionType(TextualConvention, Integer32):
    description = 'IP Prefix Disposition Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("permit", 1), ("deny", 2))

class BgpRouterActionType(TextualConvention, Integer32):
    description = 'Describes the action on BGP Router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeBgpRouteRetrieve", 1), ("optimizeBgpInRouteRetrieve", 2))

class OspfRouterActionType(TextualConvention, Integer32):
    description = 'Describes the action on OSPF Router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeOspfAsLsDbRetrieve", 1), ("optimizeOspfLsDbRetrieve", 2), ("optimizeOspfNeighborRetrieve", 3), ("optimizeOspfLinkLsDbRetrieve", 4))

class Ipv6AddressAssignMode(TextualConvention, Integer32):
    description = 'Describes IPv6 address assignment mode.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("manual", 1), ("automatic", 2), ("external", 3))

class TrafficIpRouteOriginType(TextualConvention, Integer32):
    description = 'The origin type of IP Route.\n         bgp (1)       --  From BGP.\n         ospf (2)      --  From OSPF.\n         connected (3) --  Connected Route.\n         static (4)    --  Configured.\n         dhcp (5)       --  From DHCP Relay.\n         slaac (6)      --  From SLACC.\n         dhcp-relay (7) --  From DHCP.\n         isis (8)       --  From ISIS.\n         ti-lfa (9)     --  From TI-LFA.\n'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("bgp", 1), ("ospf", 2), ("connected", 3), ("static", 4), ("dhcp", 5), ("slaac", 6), ("dhcp-relay", 7), ("isis", 8), ("ti-lfa", 9))

class NdpNeighborReachabilityState(TextualConvention, Integer32):
    description = 'Reachability state of NDP entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("notApplicable", 0), ("incomplete", 1), ("reachable", 2), ("stale", 3), ("delay", 4), ("probe", 5))

class NdpRaDefaultRouterPreference(TextualConvention, Integer32):
    description = 'Describes Router preference.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("high", 2), ("medium", 3), ("low", 4))

class Ipv6LinkLocalAddressMode(TextualConvention, Integer32):
    description = 'IPv6 address shall be first 64 bits as configured in IPv6 unicast \n         address auto generation prefix followed by Interface ID.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("automatic", 1), ("manual", 2))

class IpInterfaceType(TextualConvention, Integer32):
    description = 'Describes IPv6 interface type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("host", 1), ("router", 2))

class OspfAuthType(TextualConvention, Integer32):
    description = 'This attribute is used to specify authentication type. \n         Simple: 64-bits clear password inserted into OSPF packets header.\n         None: No authentication is used.\n         Cryptographic: a shared secret which enables the generation/verification \n         of message digests which are appended to the OSPF protocol packets.\n         none (1)          --  No authentication.\n         simple (2)        --  64-bits clear password inserted into OSPF packets header.\n         cryptoGraphic (3) --  A shared secret which enables the generation/verification of \n                               message digests which are appended to the OSPF protocol packets.\n                               System level authentication key is used.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("none", 1), ("simple", 2), ("cryptoGraphic", 3))

class OspfInterfaceState(TextualConvention, Integer32):
    description = 'The OSPF state of interface.\n         down (1)          -- In this state, the lower-level protocols \n                              have indicated that the interface is unusable.\n         loopback (2)      -- The interface is looped back and unavailable \n                              for regular data traffic.\n         waiting (3),      -- In this state, the router is trying to determine \n                              the identity of the (Backup) Designated Router for the network. \n                              To do this, the router monitors the Hello Packets it receives. \n                              The router is not allowed to elect a Backup Designated Router nor \n                              a Designated Router until it transitions out of Waiting state. \n                              This prevents unnecessary changes of (Backup) Designated Router.\n         pointToPoint (4), -- In this state, the interface is operational, and connects \n                              either to a physical point-to-point network or to a virtual link. \n                              Upon entering this state, the router attempts to form an \n                              adjacency with the neighboring router. Hello Packets are sent \n                              to the neighbor every HelloInterval seconds.\n         drOther (5),      -- The interface is to a broadcast or NBMA network \n                              on which another router has been selected to be the Designated Router. \n                              In this state, the router itself has not been selected Backup \n                              Designated Router either. The router forms adjacencies to both the \n                              Designated Router and the Backup Designated Router (if they exist).\n         dr (6),           -- In this state, this router itself is the Designated Router \n                              on the attached network.\n         backup (7)        -- In this state, the router itself is the Backup Designated \n                              Router on the attached network.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("notApplicable", 0), ("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("drOther", 5), ("dr", 6), ("backup", 7))

class OspfIfType(TextualConvention, Integer32):
    description = 'The network type connected by interface.\n         broadcast (1)    --  Broadcast.\n         pointToPoint (2) --  Point to Point.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("broadcast", 1), ("pointToPoint", 2), ("loopback", 3))

class TrafficOspfRole(TextualConvention, Integer32):
    description = 'The role of router.\n         dr (1)      --  Designated Router.\n         bdr (2)     --  Backup DR.\n         drother (3) --  DR Other.\n         pointToPoint(4) -- Point to point'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("dr", 1), ("bdr", 2), ("drother", 3), ("pointToPoint", 4))

class OspfAdjacencyState(TextualConvention, Integer32):
    description = 'OSPF Interface Adjacency State.\n         down (1)     --  Neighbor down state.\n         attempt (2)  --  Neighbor attempt state.\n         init (3)     --  Neighbor init state.\n         twoWay (4)   --  Neighbor 2-Way state.\n         exStart (5)  --  Neighbor exchange start state.\n         exchange (6) --  Neighbor exchange state.\n         loading (7)  --  Neighbor loading state.\n         full (8)     --  Neighbor full state.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("notApplicable", 0), ("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8))

class OspfAsLsaType(TextualConvention, Integer32):
    description = 'Type of LSA from external AS.\n         asExternal (1)  --  Autonomous system external LSA.\n         asOpaque (2)    --  OSPF AS (Autonomous System) Scope Opaque LSA.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("asExternal", 1), ("asOpaque", 2))

class OspfLsaType(TextualConvention, Integer32):
    description = "Type of LSA from external AS.\n         router (1)     --  Router LSA: The Router LSA is generated by each \n                            router for each area it is located. In the link-state ID \n                            you will find the originating router's ID.\n         network (2)    --  Network LSA: Network LSAs are generated by the DR. \n                            The link-state ID will be the router ID of the DR.\n         summary (3)    --  Summary LSA: The summary LSA is created by the \n                            ABR and flooded into other areas.\n         asExternal (4) --  External LSA: Also known as autonomous system external LSA, \n                            the external LSAs are generated by the ASBR.\n         areaOpaque (5) --  Packets are used to flood OSPF information through other area routers \n                            even if these routers do not process this information in order to extend \n                            OSPF functionality, this LSA is used for traffic engineering to advertise \n                            MPLS and other protocols."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("notApplicable", 0), ("router", 1), ("network", 2), ("summary", 3), ("asExternal", 4), ("areaOpaque", 5), ("summaryNet", 6), ("summaryAsbr", 7), ("multicast", 8), ("nssaExternal", 9), ("interAreaPrefix", 10), ("interAreaRouter", 11), ("link", 12), ("intraAreaPrefix", 13))

class RoutesMetricType(TextualConvention, Integer32):
    description = 'Metric Type for routes exported from external autonomous system.\n         e1 (1) --  Type 1 external metrics are equivalent to the link-state metric, \n                    where the cost is equal to the sum of the internal costs plus the external \n                    cost. This means that Type 1 external metrics include the external cost \n                    to the destination as well as the cost (metric) to reach the AS boundary router.\n         e2 (2) --  Type 2 external metrics are greater than the cost of any path internal \n                    to the AS. Type 2 external metrics use only the external cost to the destination \n                    and ignore the cost (metric) to reach the AS boundary router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("e1", 1), ("e2", 2))

class TrafficOspfAreaType(TextualConvention, Integer32):
    description = 'Area Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("stub", 1), ("normal", 2))

class BgpSessionStateType(TextualConvention, Integer32):
    description = 'Operational state of the BGP peer.\n         idle (1)        --  Neighbor is down, and in the Idle state of the FSM.\n         connect (2)     --  Neighbor is down, and the session is waiting for\n                             the underlying transport session to be established.\n         active (3)      --  Neighbor is down, and the local system is awaiting\n                             a conncetion from the remote peer.\n         openSent (4)    --  Neighbor is in the process of being established.\n                             The local system has sent an OPEN message.\n         openConfirm (5) --  Neighbor is in the process of being established.\n                             The local system is awaiting a NOTIFICATION or\n                             KEEPALIVE message.\n         established (6) --  Neighbor is up - the BGP session with the peer is\n                             established.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("notApplicable", 0), ("idle", 1), ("connect", 2), ("active", 3), ("openSent", 4), ("openConfirm", 5), ("established", 6))

class BgpNextHopUpdateType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("default", 1), ("self", 2), ("ipv4", 3), ("ipv6", 4))

class BgpPeerAddressFamilyNameType(TextualConvention, Integer32):
    description = '.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("ipv4-unicast", 1), ("ipv6-unicast", 2))

class OspfVersion(TextualConvention, Integer32):
    description = 'Describes version of a Ospf Router.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("ospfv2", 1), ("ospfv3", 2))

class VrfAction(TextualConvention, Integer32):
    description = 'Describes the action on Vrf.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))
    namedValues = NamedValues(("notApplicable", 0), ("ping", 1), ("fluchARPCache", 2), ("traceRoute", 3), ("retrieveEffectiveRoutes", 4))

class VrfActionType(TextualConvention, Integer32):
    description = 'Describes the action on Vrf.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("notApplicable", 0), ("ping", 1), ("traceRoute", 2), ("optimizeRouteRetrieve", 3), ("flushArpCache", 4), ("pingV6", 5), ("traceRouteV6", 6), ("optimizeIpv6RouteRetrieve", 7), ("flushNDP", 8), ("optimizeBfdSessionRetrieve", 9))

class IfIpAddressSourceType(TextualConvention, Integer32):
    description = 'Describes the Ip Interface adress source type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("dhcp", 1), ("static", 2))

class DhcpRelayInterfaceSide(TextualConvention, Integer32):
    description = 'Describes the DHCP relay interface side.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("client", 1), ("server", 2))

class L3AclRuleOperation(TextualConvention, Integer32):
    description = 'Describes the acl rule operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("accept", 1), ("deny", 2))

class AclRuleL2Side(TextualConvention, Integer32):
    description = 'Describes the acl rule l2 side.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("access", 1), ("network", 2))

class TrafficIpRouteStatus(TextualConvention, Integer32):
    description = 'Describes the traffci ipv4 route status.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("nexthopUnresovled", 2), ("interfaceOutage", 3), ("noResources", 4), ("standby", 5), ("bfdSessDown", 6))

class RouteFlags(TextualConvention, Bits):
    description = 'Describes the traffci ipv4 route flags.'
    status = 'current'
    namedValues = NamedValues(("dDynamic", 0), ("gUseGW", 1), ("hFullMask", 2), ("mModifiedByIcmp", 3), ("oOutage", 4), ("uNormal", 5))

class TrafficIpRouteStatusType(TextualConvention, Integer32):
    description = 'Describes the traffci ipv4 route status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("active", 1), ("nexthopUnresolved", 2), ("interfaceOutage", 3), ("noResources", 4), ("standby", 5), ("bfdSessDown", 6))

class AffectiveArpActionType(TextualConvention, Integer32):
    description = 'Describes the retrieve effective arp action.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("notApplicable", 0), ("retrieveAffectiveArp", 1))

class TrafficIpInterfaceActionType(TextualConvention, Integer32):
    description = 'Describes interface action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeArpRetrieve", 1), ("optimizeNdpRetrieve", 2), ("optimizeIPv6AddressEntryRetrieve", 3))

class TrafficIpv6InterfaceActionType(TextualConvention, Integer32):
    description = 'Describes interface action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("notApplicable", 0), ("optimizeNdpRetrieve", 1), ("optimizeIPv6AddressEntryRetrieve", 2))

class SrSidType(TextualConvention, Integer32):
    description = 'SID Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("index", 1), ("label", 2), ("sid", 3))

class VrfTransportType(TextualConvention, Integer32):
    description = 'Transport Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ip", 1), ("sr", 2))

class TilfaProtectionType(TextualConvention, Integer32):
    description = 'TI-LFA Protection Type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("link-protection", 1), ("node-protection", 2))

f3DhcpRelayAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1), )
if mibBuilder.loadTexts: f3DhcpRelayAgentTable.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTable.setDescription('A list of entries for the Dhcp Relay Agent.')
f3DhcpRelayAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentIndex"))
if mibBuilder.loadTexts: f3DhcpRelayAgentEntry.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentEntry.setDescription('A conceptual row in the f3DhcpRelayAgentTable.')
f3DhcpRelayAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3DhcpRelayAgentIndex.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentIndex.setDescription('The index of the DHCP relay agent entry.')
f3DhcpRelayAgentAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentAlias.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentAlias.setDescription('The DHCP relay agent alias.')
f3DhcpRelayAgentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentAdminState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentAdminState.setDescription('The admin state of this DCHP relay agent.')
f3DhcpRelayAgentSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpRelayAgentSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentSecondaryState.setDescription('The secondary state of this DCHP relay agent.')
f3DhcpRelayAgentOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpRelayAgentOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentOperationalState.setDescription('The operational state of this DCHP relay agent.')
f3DhcpRelayAgentIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 6), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentIpVersion.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentIpVersion.setDescription('The Ip version of this DCHP relay agent.')
f3DhcpRelayAgentServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentServerIpAddress.setDescription('The Ipv4 address of this DCHP relay agent.')
f3DhcpRelayAgentOp82SubOp9ControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9ControlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9ControlEnabled.setDescription('This object describes the suboption9 of the option82 whether enabled.')
f3DhcpRelayAgentOp82SubOp9Value = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9Value.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentOp82SubOp9Value.setDescription('This object describes the vendor string if the suboption9 enabled.')
f3DhcpRelayAgentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentStorageType.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentStorageType.setDescription('The type of storage configured for this entry.')
f3DhcpRelayAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3DhcpRelayAgentRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3DhcpRelayAgentRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3DhcpRelayAgentRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3VrfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2), )
if mibBuilder.loadTexts: f3VrfTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfTable.setDescription('A list of entries for the VRF user.')
f3VrfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"))
if mibBuilder.loadTexts: f3VrfEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfEntry.setDescription('A conceptual row in the f3VrfTable.')
f3VrfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: f3VrfIndex.setStatus('current')
if mibBuilder.loadTexts: f3VrfIndex.setDescription('The vrf number.')
f3VrfAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAlias.setStatus('current')
if mibBuilder.loadTexts: f3VrfAlias.setDescription('This object describes the vrf alias.')
f3VrfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAdminState.setStatus('current')
if mibBuilder.loadTexts: f3VrfAdminState.setDescription('This object describes the vrf admin state.')
f3VrfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3VrfSecondaryState.setDescription('This object describes the vrf secondary state.')
f3VrfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3VrfOperationalState.setDescription('This object describes the vrf operational state.')
f3VrfAccIsolationControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 6), OperationalState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAccIsolationControlEnabled.setStatus('obsolete')
if mibBuilder.loadTexts: f3VrfAccIsolationControlEnabled.setDescription('This object is used to control traffic between L3 flowpoint\n           on Acc port.')
f3VrfPingIpv4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfPingIpv4Destination.setStatus('current')
if mibBuilder.loadTexts: f3VrfPingIpv4Destination.setDescription('This object allows user to specify the IP Address to which\n \t          ICMP Ping will be initiated.')
f3VrfTraceRouteIpv4Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfTraceRouteIpv4Destination.setStatus('current')
if mibBuilder.loadTexts: f3VrfTraceRouteIpv4Destination.setDescription('This object allows user to specify the IP Address to which\n          \tTrace Route will be initiated.')
f3VrfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 9), VrfAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfAction.setStatus('deprecated')
if mibBuilder.loadTexts: f3VrfAction.setDescription('The Vrf action, includes fluch ARP cache, ping, trace route.\n            DEPRECATED and new variable to use is f3VrfActionX.')
f3VrfPingResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 10), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfPingResult.setStatus('current')
if mibBuilder.loadTexts: f3VrfPingResult.setDescription('The Ping action result.')
f3VrfTraceRouteResult = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 11), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfTraceRouteResult.setStatus('current')
if mibBuilder.loadTexts: f3VrfTraceRouteResult.setDescription('The trace route action result.')
f3VrfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 12), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfStorageType.setStatus('current')
if mibBuilder.loadTexts: f3VrfStorageType.setDescription('The type of storage configured for this entry.')
f3VrfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3VrfRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3VrfRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3VrfRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3VrfRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3VrfDhcpRoutesControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfDhcpRoutesControl.setStatus('current')
if mibBuilder.loadTexts: f3VrfDhcpRoutesControl.setDescription('This object is used to control dynamic routes creation based on DHCP relay agent operation.\n            if it is disabled, the vrf should not use host ip addresses assigned by means of DHCP relay agent\n            for the dynamic routes creation.')
f3VrfActionX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 15), VrfActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfActionX.setStatus('current')
if mibBuilder.loadTexts: f3VrfActionX.setDescription('The Vrf action, includes ping, trace route and route retrieve')
f3VrfActionIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 16), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfActionIfName.setStatus('current')
if mibBuilder.loadTexts: f3VrfActionIfName.setDescription('Interface Name parameter for the VRF action. For example, to\n            flush ARP cache for a particular interface this variable shall\n            be set and then f3VrfActionX shall be set to flushArpCache.')
f3VrfIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 17), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfIpVersion.setStatus('current')
if mibBuilder.loadTexts: f3VrfIpVersion.setDescription('This object describes the vrf Ip version.')
f3VrfPingIpv6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 18), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfPingIpv6Destination.setStatus('current')
if mibBuilder.loadTexts: f3VrfPingIpv6Destination.setDescription('This object allows user to specify the IP Address to which\n \t          ICMP Ping will be initiated.')
f3VrfTraceRouteIpv6Destination = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 19), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfTraceRouteIpv6Destination.setStatus('current')
if mibBuilder.loadTexts: f3VrfTraceRouteIpv6Destination.setDescription('This object allows user to specify the IP Address to which\n          \tTrace Route will be initiated.')
f3VrfMaxFwdTableEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfMaxFwdTableEntries.setStatus('current')
if mibBuilder.loadTexts: f3VrfMaxFwdTableEntries.setDescription('This object defines the maximum forwarding \n            table entries that can be used by the vrf')
f3VrfFwdTableFull = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfFwdTableFull.setStatus('current')
if mibBuilder.loadTexts: f3VrfFwdTableFull.setDescription('This is a status variable that indicates \n            if the forwarding table for the vrf is full')
f3VrfEcmpDistribution = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 22), EcmpDistributionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfEcmpDistribution.setStatus('current')
if mibBuilder.loadTexts: f3VrfEcmpDistribution.setDescription('The fields in IP Packets used in hash lookup.')
f3VrfEcmpStaticRoutesMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfEcmpStaticRoutesMaximumPaths.setStatus('current')
if mibBuilder.loadTexts: f3VrfEcmpStaticRoutesMaximumPaths.setDescription('The maximum number of path used in ECMP for static routes.')
f3VrfTransportType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 2, 1, 24), VrfTransportType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTransportType.setStatus('current')
if mibBuilder.loadTexts: f3VrfTransportType.setDescription('The transport type of this entry.')
f3L3FlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3), )
if mibBuilder.loadTexts: f3L3FlowPointTable.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointTable.setDescription('A list of entries for the L3 flowpoint.')
f3L3FlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"))
if mibBuilder.loadTexts: f3L3FlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointEntry.setDescription('A conceptual row in the f3L3FlowPointTable.')
f3L3FlowPointPortTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointPortTypeIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointPortTypeIndex.setDescription('It specifies the port type, value 1 means Network Port, \n            value 2 means Access Port, value 3 means Mobile Traffic Port.')
f3L3FlowPointPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointPortIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointPortIndex.setDescription('The port number value.')
f3L3FlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 3), Integer32())
if mibBuilder.loadTexts: f3L3FlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointIndex.setDescription('The L3 flow point number.')
f3L3FlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 4), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointAlias.setDescription('This object describes the L3 flow point alias.')
f3L3FlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 5), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointAdminState.setDescription('This object describes the L3 flow point admin state.')
f3L3FlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 6), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointSecondaryState.setDescription('This object describes the L3 flow point secondary state.')
f3L3FlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 7), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointOperationalState.setDescription('This object describes the L3 flow point operational state.')
f3L3FlowPointMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointMultiCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointMultiCOSEnabled.setDescription('Control to enable or disable per-COS BWPs on a FlowPoint.\n            ENABLED:per-COS BWPs (CIR, EIR, CBS, EBS, CM, CF) are applied as a policing \n                     function for all ingress frames of this flowpoint.\n            DISABLED:per-Flow BWP (CIR, EIR, CBS, EBS, CM, CF) is applied as a policing \n                     function for all ingress frames of this flowpoint.\n            User must independently enable each COS BWP when ENABLED.')
f3L3FlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointCOS.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointCOS.setDescription('Identifies the internal COS applied to all ingress frames of the flowpoint.')
f3L3FlowPointUntaggedMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointUntaggedMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointUntaggedMemberShipEnabled.setDescription('This attribute controls untagged frames membership for the Flowpoint.\n            ENABLED: Ingress untagged frame matches Flowpoint membership.\n            DISABLED: Ingress untagged frame does not match Flowpoint membership.')
f3L3FlowPointOuterTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipEnabled.setDescription('This attribute controls outer tag membership for the Flowpoint whether enabled.')
f3L3FlowPointOuterTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 12), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipVlanId.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointOuterTagMemberShipVlanId.setDescription('This attribute controls outer tag VlanId membership for the Flowpoint.')
f3L3FlowPointInnerTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipEnabled.setDescription('This attribute controls inner tag membership for the Flowpoint whether enabled.')
f3L3FlowPointInnerTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 14), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipVlanId.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointInnerTagMemberShipVlanId.setDescription('This attribute controls inner tag VlanId membership for the Flowpoint.')
f3L3FlowPointFragmentedPktsFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointFragmentedPktsFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointFragmentedPktsFwdEnabled.setDescription('This attribute specifies whether received IP Packets with More Fragments\n            flag should be forwarded by the FlowPoint.')
f3L3FlowPointHCosMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMgmtEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHCosMgmtEnabled.setDescription('This attribute specifies whether the Hierarchical COS shaping enabled for this flow point.')
f3L3FlowPointHCosGuaranteedBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwHi.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwHi.setDescription('This attribute specifies the Hierarchical COS guarranteed bandwidth \n           high 32 bits for this flow point.')
f3L3FlowPointHCosGuaranteedBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwLo.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHCosGuaranteedBwLo.setDescription('This attribute specifies the Hierarchical COS guarranteed bandwidth \n           low 32 bits for this flow point.')
f3L3FlowPointHCosMaximumBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwHi.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwHi.setDescription('This attribute specifies the Hierarchical COS maximum bandwidth \n           high 32 bits for this flow point.')
f3L3FlowPointHCosMaximumBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 20), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwLo.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHCosMaximumBwLo.setDescription('This attribute specifies the Hierarchical COS maximum bandwidth \n           low 32 bits for this flow point.')
f3L3FlowPointPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointPolicingEnabled.setDescription('This attribute allows enable or disable policers of the flow point.')
f3L3FlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStorageType.setDescription('The type of storage configured for this entry.')
f3L3FlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3L3FlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3L3FlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The f3L3FlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3L3FlowPointDscpOverwriteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointDscpOverwriteControl.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointDscpOverwriteControl.setDescription('This attribute allows enable dscp value overwrite.')
f3L3FlowPointPriMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 25), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointPriMapProfile.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointPriMapProfile.setDescription('This attribute allows specify the priority map profile.')
f3L3FlowPointRefConnectGuardFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 26), VariablePointer()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointRefConnectGuardFlow.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointRefConnectGuardFlow.setDescription('This object specifies Mac Sec flow object OID.')
f3L3FlowPointSecureState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 27), FlowSecState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointSecureState.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointSecureState.setDescription('This object specifies the secure state of this flow.')
f3L3FlowPointSecureBlockingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 28), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointSecureBlockingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointSecureBlockingEnabled.setDescription('This object can be used to enable/disable secure block.')
f3L3FlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointWfqSegmentationCOS.setDescription('This object used to specify wfq segmentation COS value.')
f3L3FlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupCOS.setDescription('This object used to specify wfq group COS value.')
f3L3FlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirLo.setDescription('This object used to specify wfq group EIR low 32 bits value.')
f3L3FlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 32), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointWfqGroupEirHi.setDescription('This object used to specify wfq group EIR high 32 bits value.')
f3L3FlowPointOuterVlanEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointOuterVlanEthertype.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointOuterVlanEthertype.setDescription('.')
f3L3FlowPointInnerVlanEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointInnerVlanEthertype.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointInnerVlanEthertype.setDescription('.')
f3L3FlowPointIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 3, 1, 35), IpVersion()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3FlowPointIpVersion.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointIpVersion.setDescription('.')
f3L3AclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4), )
if mibBuilder.loadTexts: f3L3AclRuleTable.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleTable.setDescription('A list of entries for the L3 ACL rule.')
f3L3AclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"))
if mibBuilder.loadTexts: f3L3AclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleEntry.setDescription('A conceptual row in the f3L3AclRuleTable.')
f3L3AclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3AclRuleParentIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleParentIndex.setDescription('The ACL rule parent number, it could be flow index or L3 flow point index.')
f3L3AclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3AclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleIndex.setDescription('The ACL rule number.')
f3L3AclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleAlias.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleAlias.setDescription('The ACL rule alias.')
f3L3AclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressControl.setDescription('The ACL rule source IPv4 Adress control whether enabled.')
f3L3AclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcIpControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcIpControl.setDescription('The ACL rule dynamic source IPv4 or IPv6 Adress control whether enabled.')
f3L3AclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressLowLimit.setDescription('The ACL rule source IPv4 Adress low limit.')
f3L3AclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressControl.setDescription('The ACL rule Destination IPv4 Adress control whether enabled.')
f3L3AclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressLowLimit.setDescription('The ACL rule Destination IPv4 Adress low limit.')
f3L3AclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityControl.setDescription('The ACL rule IPv4 Priority control whether enabled.')
f3L3AclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityLowLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityLowLimit.setDescription('The ACL rule IPv4 priority low limit.')
f3L3AclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleProtocolControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleProtocolControl.setDescription('The ACL rule protocol control whether enabled.')
f3L3AclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleProtocolNumber.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleProtocolNumber.setDescription('The ACL rule protocol number.')
f3L3AclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcPortControl.setDescription('The ACL rule source port whether enabled.')
f3L3AclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcPortLowLimit.setDescription('The ACL rule source port low limit.')
f3L3AclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcPortHighLimit.setDescription('The ACL rule source port low limit.')
f3L3AclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstPortControl.setDescription('The ACL rule destination port whether enabled.')
f3L3AclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstPortLowLimit.setDescription('The ACL rule destination port low limit.')
f3L3AclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstPortHighLimit.setDescription('The ACL rule destination port low limit.')
f3L3AclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriority.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRulePriority.setDescription('The ACL rule priority.')
f3L3AclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleCOS.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleCOS.setDescription('The ACL rule class of service.')
f3L3AclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOperation.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOperation.setDescription('The ACL rule action.')
f3L3AclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleSummary.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSummary.setDescription('The ACL rule summary.')
f3L3AclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleCosOverrideControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleCosOverrideControl.setDescription('The ACL rule COS Override control.')
f3L3AclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressControl.setDescription('The ACL rule Source MAC address control.')
f3L3AclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDynamicSrcMacAddressControl.setDescription('The ACL rule dynamic Source MAC address control.')
f3L3AclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddress.setDescription('The ACL rule dynamic Source MAC address.')
f3L3AclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcMacAddressMask.setDescription('The ACL rule dynamic Source MAC address mask.')
f3L3AclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressControl.setDescription('The ACL rule dynamic Destination MAC address control.')
f3L3AclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddress.setDescription('The ACL rule dynamic Destination MAC address.')
f3L3AclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstMacAddressMask.setDescription('The ACL rule dynamic Destination MAC address mask.')
f3L3AclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDControl.setDescription('The ACL rule outer VID control.')
f3L3AclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDLowLimit.setDescription('The ACL rule outer Vlan ID low limit.')
f3L3AclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanVIDHighLimit.setDescription('The ACL rule outer Vlan ID high limit.')
f3L3AclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDControl.setDescription('The ACL rule inner VID control.')
f3L3AclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDLowLimit.setDescription('The ACL rule inner Vlan ID low limit.')
f3L3AclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanVIDHighLimit.setDescription('The ACL rule Inner Vlan ID high limit.')
f3L3AclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpControl.setDescription('The ACL rule outer vlan PCP control.')
f3L3AclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpLowLimit.setDescription('The ACL rule outer vlan PCP priority low limit.')
f3L3AclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanPcpHighLimit.setDescription('The ACL rule outer vlan PCP priority high limit.')
f3L3AclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpControl.setDescription('The ACL rule inner vlan PCP control.')
f3L3AclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpLowLimit.setDescription('The ACL rule inner vlan PCP priority low limit.')
f3L3AclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleInnerVlanPcpHighLimit.setDescription('The ACL rule inner vlan PCP priority high limit.')
f3L3AclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDeiControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDeiControl.setDescription('The ACL rule outer vlan DEI control.')
f3L3AclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDei.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleOuterVlanDei.setDescription('The ACL rule outer vlan DEI.')
f3L3AclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleEtherTypeControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleEtherTypeControl.setDescription('The ACL rule outer vlan ether type control.')
f3L3AclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleEtherType.setDescription('The ACL rule outer vlan ether type.')
f3L3AclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleTcpFlagsControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleTcpFlagsControl.setDescription('The ACL rule outer vlan TCP flags control.')
f3L3AclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleTcpFlags.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleTcpFlags.setDescription('The ACL rule outer vlan TCP flags.')
f3L3AclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpv4AddressHighLimit.setDescription('The ACL rule source ipv4 adress high limit.')
f3L3AclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpv4AddressHighLimit.setDescription('The ACL rule destination ipv4 adress high limit.')
f3L3AclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityHighLimit.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3AclRuleIpv4PriorityHighLimit.setDescription('The ACL rule ipv4 priority high limit.')
f3L3AclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3AclRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStorageType.setDescription('The type of storage configured for this entry.')
f3L3AclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3AclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L3AclRuleRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L3AclRuleRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L3AclRuleRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3AclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleAdminState.setDescription('This object allows user configure the Acl Rule in in-service or management state.')
f3L3AclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleActive.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleActive.setDescription('The ACL Rule Active activates/deactivates ACL Rule.')
f3L3AclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressControl.setDescription('The ACL rule source ipv6 adress control.')
f3L3AclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6Address.setDescription('The ACL rule source ipv6 adress.')
f3L3AclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleSrcIpV6AddressPrefixLen.setDescription('The ACL rule source ipv6 adress prefix length.')
f3L3AclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressControl.setDescription('The ACL rule destination ipv6 adress control.')
f3L3AclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6Address.setDescription('The ACL rule destination ipv6 adress.')
f3L3AclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 61), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleDstIpV6AddressPrefixLen.setDescription('The ACL rule destination ipv6 adress prefix length.')
f3L3AclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabelControl.setDescription('The ACL rule ipv6 Flow Label Control enables/disables Flow Label.')
f3L3AclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleIpV6FlowLabel.setDescription('The ACL rule ipv6 Flow Label.')
f3L3AclRulePriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 64), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityControl.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRulePriorityControl.setDescription('The ACL rule Priority control whether enabled.')
f3L3AclRulePriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 65), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRulePriorityLowLimit.setDescription('The ACL rule priority low limit.')
f3L3AclRulePriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 4, 1, 66), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRulePriorityHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRulePriorityHighLimit.setDescription('The ACL rule priority high limit.')
f3L2A2NAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5), )
if mibBuilder.loadTexts: f3L2A2NAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleTable.setDescription('A list of entries for the L2A2N ACL rule.')
f3L2A2NAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleEntry.setDescription('A conceptual row in the f3L2A2NAclRuleTable.')
f3L2A2NAclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L2A2NAclRuleParentIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleParentIndex.setDescription('The ACL rule parent number, it could be flow index')
f3L2A2NAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L2A2NAclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIndex.setDescription('The ACL rule number.')
f3L2A2NAclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleAlias.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleAlias.setDescription('The ACL rule alias.')
f3L2A2NAclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressControl.setDescription('The ACL rule source IPv4 Adress control whether enabled.')
f3L2A2NAclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcIpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcIpControl.setDescription('The ACL rule dynamic source IPv4 or IPv6 Adress control whether enabled.')
f3L2A2NAclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressLowLimit.setDescription('The ACL rule source IPv4 Adress low limit.')
f3L2A2NAclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressControl.setDescription('The ACL rule Destination IPv4 Adress control whether enabled.')
f3L2A2NAclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressLowLimit.setDescription('The ACL rule Destination IPv4 Adress low limit.')
f3L2A2NAclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityControl.setDescription('The ACL rule IPv4 Priority control whether enabled.')
f3L2A2NAclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityLowLimit.setDescription('The ACL rule IPv4 priority low limit.')
f3L2A2NAclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolControl.setDescription('The ACL rule protocol control whether enabled.')
f3L2A2NAclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolNumber.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleProtocolNumber.setDescription('The ACL rule protocol number.')
f3L2A2NAclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortControl.setDescription('The ACL rule source port whether enabled.')
f3L2A2NAclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortLowLimit.setDescription('The ACL rule source port low limit.')
f3L2A2NAclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcPortHighLimit.setDescription('The ACL rule source port low limit.')
f3L2A2NAclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortControl.setDescription('The ACL rule destination port whether enabled.')
f3L2A2NAclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortLowLimit.setDescription('The ACL rule destination port low limit.')
f3L2A2NAclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstPortHighLimit.setDescription('The ACL rule destination port low limit.')
f3L2A2NAclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRulePriority.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRulePriority.setDescription('The ACL rule priority.')
f3L2A2NAclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleCOS.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleCOS.setDescription('The ACL rule class of service.')
f3L2A2NAclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOperation.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOperation.setDescription('The ACL rule action.')
f3L2A2NAclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleSummary.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSummary.setDescription('The ACL rule summary.')
f3L2A2NAclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleCosOverrideControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleCosOverrideControl.setDescription('The ACL rule COS Override control.')
f3L2A2NAclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressControl.setDescription('The ACL rule Source MAC address control.')
f3L2A2NAclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDynamicSrcMacAddressControl.setDescription('The ACL rule dynamic Source MAC address control.')
f3L2A2NAclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddress.setDescription('The ACL rule dynamic Source MAC address.')
f3L2A2NAclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcMacAddressMask.setDescription('The ACL rule dynamic Source MAC address mask.')
f3L2A2NAclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressControl.setDescription('The ACL rule dynamic Destination MAC address control.')
f3L2A2NAclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddress.setDescription('The ACL rule dynamic Destination MAC address.')
f3L2A2NAclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstMacAddressMask.setDescription('The ACL rule dynamic Destination MAC address mask.')
f3L2A2NAclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDControl.setDescription('The ACL rule outer VID control.')
f3L2A2NAclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDLowLimit.setDescription('The ACL rule outer Vlan ID low limit.')
f3L2A2NAclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanVIDHighLimit.setDescription('The ACL rule outer Vlan ID high limit.')
f3L2A2NAclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDControl.setDescription('The ACL rule inner VID control.')
f3L2A2NAclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDLowLimit.setDescription('The ACL rule inner Vlan ID low limit.')
f3L2A2NAclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanVIDHighLimit.setDescription('The ACL rule Inner Vlan ID high limit.')
f3L2A2NAclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpControl.setDescription('The ACL rule outer vlan PCP control.')
f3L2A2NAclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpLowLimit.setDescription('The ACL rule outer vlan PCP priority low limit.')
f3L2A2NAclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanPcpHighLimit.setDescription('The ACL rule outer vlan PCP priority high limit.')
f3L2A2NAclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpControl.setDescription('The ACL rule inner vlan PCP control.')
f3L2A2NAclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpLowLimit.setDescription('The ACL rule inner vlan PCP priority low limit.')
f3L2A2NAclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleInnerVlanPcpHighLimit.setDescription('The ACL rule inner vlan PCP priority high limit.')
f3L2A2NAclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDeiControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDeiControl.setDescription('The ACL rule outer vlan DEI control.')
f3L2A2NAclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDei.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleOuterVlanDei.setDescription('The ACL rule outer vlan DEI.')
f3L2A2NAclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherTypeControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherTypeControl.setDescription('The ACL rule outer vlan ether type control.')
f3L2A2NAclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleEtherType.setDescription('The ACL rule outer vlan ether type.')
f3L2A2NAclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlagsControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlagsControl.setDescription('The ACL rule outer vlan TCP flags control.')
f3L2A2NAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlags.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleTcpFlags.setDescription('The ACL rule outer vlan TCP flags.')
f3L2A2NAclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpv4AddressHighLimit.setDescription('The ACL rule source ipv4 adress high limit.')
f3L2A2NAclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpv4AddressHighLimit.setDescription('The ACL rule destination ipv4 adress high limit.')
f3L2A2NAclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIpv4PriorityHighLimit.setDescription('The ACL rule ipv4 priority high limit.')
f3L2A2NAclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2A2NAclRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStorageType.setDescription('The type of storage configured for this entry.')
f3L2A2NAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2A2NAclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L2A2NAclRuleRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L2A2NAclRuleRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L2A2NAclRuleRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L2A2NAclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleAdminState.setDescription('This object allows user configure the Acl Rule in-service or management state.')
f3L2A2NAclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleActive.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleActive.setDescription('The ACL rule active control.')
f3L2A2NAclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressControl.setDescription('The ACL rule source ipv6 adress control.')
f3L2A2NAclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6Address.setDescription('The ACL rule source ipv6 adress.')
f3L2A2NAclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleSrcIpV6AddressPrefixLen.setDescription('The ACL rule source ipv6 adress prefix length.')
f3L2A2NAclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressControl.setDescription('The ACL rule destination ipv6 adress control.')
f3L2A2NAclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6Address.setDescription('The ACL rule destination ipv6 adress.')
f3L2A2NAclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleDstIpV6AddressPrefixLen.setDescription('The ACL rule destination ipv6 adress prefix length.')
f3L2A2NAclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabelControl.setDescription('The ACL rule IPv6 flow lable control.')
f3L2A2NAclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 5, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleIpV6FlowLabel.setDescription('The ACL rule IPv6 flow lable.')
f3L2N2AAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6), )
if mibBuilder.loadTexts: f3L2N2AAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleTable.setDescription('A list of entries for the L2N2A ACL rule.')
f3L2N2AAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleEntry.setDescription('A conceptual row in the f3L2N2AAclRuleTable.')
f3L2N2AAclRuleParentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L2N2AAclRuleParentIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleParentIndex.setDescription('The ACL rule parent number, it could be flow index')
f3L2N2AAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L2N2AAclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIndex.setDescription('The ACL rule number.')
f3L2N2AAclRuleAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleAlias.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleAlias.setDescription('The ACL rule alias.')
f3L2N2AAclRuleSrcIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressControl.setDescription('The ACL rule source IPv4 Adress control whether enabled.')
f3L2N2AAclRuleDynamicSrcIpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcIpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcIpControl.setDescription('The ACL rule dynamic source IPv4 or IPv6 Adress control whether enabled.')
f3L2N2AAclRuleSrcIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressLowLimit.setDescription('The ACL rule source IPv4 Adress low limit.')
f3L2N2AAclRuleDstIpv4AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressControl.setDescription('The ACL rule Destination IPv4 Adress control whether enabled.')
f3L2N2AAclRuleDstIpv4AddressLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressLowLimit.setDescription('The ACL rule Destination IPv4 Adress low limit.')
f3L2N2AAclRuleIpv4PriorityControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityControl.setDescription('The ACL rule IPv4 Priority control whether enabled.')
f3L2N2AAclRuleIpv4PriorityLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityLowLimit.setDescription('The ACL rule IPv4 priority low limit.')
f3L2N2AAclRuleProtocolControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 11), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolControl.setDescription('The ACL rule protocol control whether enabled.')
f3L2N2AAclRuleProtocolNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolNumber.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleProtocolNumber.setDescription('The ACL rule protocol number.')
f3L2N2AAclRuleSrcPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortControl.setDescription('The ACL rule source port whether enabled.')
f3L2N2AAclRuleSrcPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortLowLimit.setDescription('The ACL rule source port low limit.')
f3L2N2AAclRuleSrcPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcPortHighLimit.setDescription('The ACL rule source port low limit.')
f3L2N2AAclRuleDstPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortControl.setDescription('The ACL rule destination port whether enabled.')
f3L2N2AAclRuleDstPortLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortLowLimit.setDescription('The ACL rule destination port low limit.')
f3L2N2AAclRuleDstPortHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstPortHighLimit.setDescription('The ACL rule destination port low limit.')
f3L2N2AAclRulePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRulePriority.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRulePriority.setDescription('The ACL rule priority.')
f3L2N2AAclRuleCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleCOS.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleCOS.setDescription('The ACL rule class of service.')
f3L2N2AAclRuleOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 21), L3AclRuleOperation()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOperation.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOperation.setDescription('The ACL rule action.')
f3L2N2AAclRuleSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 22), F3DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleSummary.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSummary.setDescription('The ACL rule summary.')
f3L2N2AAclRuleCosOverrideControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleCosOverrideControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleCosOverrideControl.setDescription('The ACL rule COS Override control.')
f3L2N2AAclRuleSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressControl.setDescription('The ACL rule Source MAC address control.')
f3L2N2AAclRuleDynamicSrcMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDynamicSrcMacAddressControl.setDescription('The ACL rule dynamic Source MAC address control.')
f3L2N2AAclRuleSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 26), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddress.setDescription('The ACL rule dynamic Source MAC address.')
f3L2N2AAclRuleSrcMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 27), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcMacAddressMask.setDescription('The ACL rule dynamic Source MAC address mask.')
f3L2N2AAclRuleDstMacAddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressControl.setDescription('The ACL rule dynamic Destination MAC address control.')
f3L2N2AAclRuleDstMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 29), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddress.setDescription('The ACL rule dynamic Destination MAC address.')
f3L2N2AAclRuleDstMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 30), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstMacAddressMask.setDescription('The ACL rule dynamic Destination MAC address mask.')
f3L2N2AAclRuleOuterVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 31), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDControl.setDescription('The ACL rule outer VID control.')
f3L2N2AAclRuleOuterVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 32), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDLowLimit.setDescription('The ACL rule outer Vlan ID low limit.')
f3L2N2AAclRuleOuterVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 33), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanVIDHighLimit.setDescription('The ACL rule outer Vlan ID high limit.')
f3L2N2AAclRuleInnerVlanVIDControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 34), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDControl.setDescription('The ACL rule inner VID control.')
f3L2N2AAclRuleInnerVlanVIDLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 35), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDLowLimit.setDescription('The ACL rule inner Vlan ID low limit.')
f3L2N2AAclRuleInnerVlanVIDHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 36), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanVIDHighLimit.setDescription('The ACL rule Inner Vlan ID high limit.')
f3L2N2AAclRuleOuterVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 37), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpControl.setDescription('The ACL rule outer vlan PCP control.')
f3L2N2AAclRuleOuterVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 38), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpLowLimit.setDescription('The ACL rule outer vlan PCP priority low limit.')
f3L2N2AAclRuleOuterVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 39), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanPcpHighLimit.setDescription('The ACL rule outer vlan PCP priority high limit.')
f3L2N2AAclRuleInnerVlanPcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 40), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpControl.setDescription('The ACL rule inner vlan PCP control.')
f3L2N2AAclRuleInnerVlanPcpLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 41), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpLowLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpLowLimit.setDescription('The ACL rule inner vlan PCP priority low limit.')
f3L2N2AAclRuleInnerVlanPcpHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 42), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleInnerVlanPcpHighLimit.setDescription('The ACL rule inner vlan PCP priority high limit.')
f3L2N2AAclRuleOuterVlanDeiControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDeiControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDeiControl.setDescription('The ACL rule outer vlan DEI control.')
f3L2N2AAclRuleOuterVlanDei = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 44), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDei.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleOuterVlanDei.setDescription('The ACL rule outer vlan DEI.')
f3L2N2AAclRuleEtherTypeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 45), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherTypeControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherTypeControl.setDescription('The ACL rule outer vlan ether type control.')
f3L2N2AAclRuleEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 46), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherType.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleEtherType.setDescription('The ACL rule outer vlan ether type.')
f3L2N2AAclRuleTcpFlagsControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 47), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlagsControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlagsControl.setDescription('The ACL rule outer vlan TCP flags control.')
f3L2N2AAclRuleTcpFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 48), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlags.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleTcpFlags.setDescription('The ACL rule outer vlan TCP flags.')
f3L2N2AAclRuleSrcIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 49), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpv4AddressHighLimit.setDescription('The ACL rule source ipv4 adress high limit.')
f3L2N2AAclRuleDstIpv4AddressHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 50), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpv4AddressHighLimit.setDescription('The ACL rule destination ipv4 adress high limit.')
f3L2N2AAclRuleIpv4PriorityHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 51), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityHighLimit.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIpv4PriorityHighLimit.setDescription('The ACL rule ipv4 priority high limit.')
f3L2N2AAclRuleStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 52), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2N2AAclRuleStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStorageType.setDescription('The type of storage configured for this entry.')
f3L2N2AAclRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 53), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L2N2AAclRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L2N2AAclRuleRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L2N2AAclRuleRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L2N2AAclRuleRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L2N2AAclRuleAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 54), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleAdminState.setDescription('This object allows user configure the Acl Rule in-service or management state.')
f3L2N2AAclRuleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleActive.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleActive.setDescription('The ACL rule active control.')
f3L2N2AAclRuleSrcIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 56), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressControl.setDescription('The ACL rule source ipv6 adress control.')
f3L2N2AAclRuleSrcIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 57), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6Address.setDescription('The ACL rule source ipv6 adress.')
f3L2N2AAclRuleSrcIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleSrcIpV6AddressPrefixLen.setDescription('The ACL rule source ipv6 adress prefix length.')
f3L2N2AAclRuleDstIpV6AddressControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 59), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressControl.setDescription('The ACL rule destination ipv6 adress control.')
f3L2N2AAclRuleDstIpV6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 60), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6Address.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6Address.setDescription('The ACL rule destination ipv6 adress.')
f3L2N2AAclRuleDstIpV6AddressPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 61), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleDstIpV6AddressPrefixLen.setDescription('The ACL rule destination ipv6 adress prefix length.')
f3L2N2AAclRuleIpV6FlowLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 62), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabelControl.setDescription('The ACL rule IPv6 flow lable control.')
f3L2N2AAclRuleIpV6FlowLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 6, 1, 63), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabel.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleIpV6FlowLabel.setDescription('The ACL rule IPv6 flow lable.')
f3L3QosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7), )
if mibBuilder.loadTexts: f3L3QosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerTable.setDescription('A list of entries corresponding to Ethernet Quality of Service \n         Policer for configuration purposes.')
f3L3QosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEntry.setDescription('A conceptual row in the f3L3QosPolicerTable. \n          These entries represent a Quality of Service Policer.')
f3L3QosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerIndex.setDescription('The Policer Index that represents the COS level.  This\n             is applicable in case of a Multi COS flow. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on. \n\n             In release 5.6CC the range is extended to 1..16 to support duplicate\n             N2A policers on a Flow. The duplicate policers are created under a Flow \n             if network interface of the Flow is ERP Group or Split Horizon Group. \n             In case of multi-cos Flow indices 1..8 represent policers of COS 0..7 \n             going from Network 1 port; indices 9..16 represent policers for COS 0..7 \n             going from Network 2 port.\n             In case of single-cos Flow index 1 represents policer going from Network 1\n             port; index 9 represents policer going from Network 2 port.\n             ')
f3L3QosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerAdminState.setDescription('This object represents the Administrative State of \n             the QOS Flow Policer.')
f3L3QosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerOperationalState.setDescription('This object represents the Operational State of the QOS Flow Policer.')
f3L3QosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerSecondaryState.setDescription('This object represents the Secondary State of the QOS Flow Policer.')
f3L3QosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCIRLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the lower 32 bits of the\n          CIR.')
f3L3QosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCIRHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the upper 32 bits of the\n          CIR.')
f3L3QosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEIRLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the lower 32 bits\n          of the EIR.')
f3L3QosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEIRHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the upper 32 bits\n          of the EIR.')
f3L3QosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCBS.setDescription('This object allows specification of the Commited Burst Size\n          (CBS) on Policer.')
f3L3QosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEBS.setDescription('This object allows specification of the Excess Burst Size\n          (EBS) on the Policer.')
f3L3QosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerAlgorithm.setDescription("This object allows specification of Policer algorithm as\n           'srTCM' (Single Rate Triple Color Marking) or 'trTCM' (Two Rate\n           Triple Color Marking).")
f3L3QosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n           'color-aware' or 'color-blind'.")
f3L3QosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low.  Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
f3L3QosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 14), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStorageType.setDescription('The type of storage configured for this entry.')
f3L3QosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3L3QosPolicerRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3L3QosPolicerRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3L3QosPolicerRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3L3QosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the high 32 bits.')
f3L3QosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerCIRMaxLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the lower 32 bits.')
f3L3QosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the high 32 bits.')
f3L3QosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEIRMaxLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the lower 32 bits.')
f3L3QosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 20), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerEnvelopeObject.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerEnvelopeObject.setDescription('This object allows specification of envelope object.')
f3L3QosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerRank.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerRank.setDescription('This object allows specification of rank value.')
f3L3QosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 7, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerPolicingEnabled.setDescription('This object describes whether the policing is enabled.')
f3L3QosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8), )
if mibBuilder.loadTexts: f3L3QosShaperTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Quality of Service Shaper for configuration purposes.\n             These shapers can be managed when the Access Port is\n             in evpl mode and are relevant for traffic in the\n             network to access direction.')
f3L3QosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"))
if mibBuilder.loadTexts: f3L3QosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperEntry.setDescription('A conceptual row in the f3L3QosShaperTable. \n             These entries represent a Quality of Service Shaper.')
f3L3QosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperIndex.setDescription('The unique integer index value corresponding to a \n             Quality of Service Shaper.')
f3L3QosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
f3L3QosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperOperationalState.setDescription('This object represents the Operational State of the QOS Shaper.')
f3L3QosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS Shaper.')
f3L3QosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperCIRLo.setDescription('This object represents the Commited Information\n          Rate(CIR) (Lower 32 bits)of a Shaper.')
f3L3QosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) (Higher 32 bits) of a Shaper.')
f3L3QosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperEIRLo.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
f3L3QosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
f3L3QosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
f3L3QosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperCOS.setDescription('This object provides the COS (Class of Service)\n             value for the QOS Shaper.')
f3L3QosShaperWredGreenMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMinQueueThreshold.setDescription('This object represents the Wred green packet min queue threshold value.')
f3L3QosShaperWredGreenMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 12), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredGreenMaxQueueThreshold.setDescription('This object represents the Wred green packet max queue threshold value.')
f3L3QosShaperWredGreenDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 13), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredGreenDropProbability.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredGreenDropProbability.setDescription('This object represents the Wred green packet drop probability.')
f3L3QosShaperWredYellowMinQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 14), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMinQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMinQueueThreshold.setDescription('This object represents the Wred yellow packet min queue threshold value.')
f3L3QosShaperWredYellowMaxQueueThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 15), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMaxQueueThreshold.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredYellowMaxQueueThreshold.setDescription('This object represents the Wred yellow packet max queue threshold value.')
f3L3QosShaperWredYellowDropProbability = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 16), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperWredYellowDropProbability.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWredYellowDropProbability.setDescription('This object represents the Wred yellow packet drop probability.')
f3L3QosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 17), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStorageType.setDescription('The type of storage configured for this entry.')
f3L3QosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3QosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of f3L3QosShaperRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            f3L3QosShaperRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The f3L3QosShaperRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
f3L3QosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 8, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperWfqWeight.setDescription('This object represents wfq weight value.')
f3L3TrafficIPInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceTable.setDescription('A list of entries for the L3 Traffic IP Interface.')
f3L3TrafficIPInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceEntry.setDescription('A conceptual row in the f3L3TrafficIPInterfaceTable.')
f3L3TrafficIPIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPIfIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIndex.setDescription('It specifies the traffic IP interface number.')
f3L3TrafficIPIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfName.setDescription('It specifies the traffic IP interface name.')
f3L3TrafficIPIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfAdminState.setDescription('This object represents the Administrative State of the interface.')
f3L3TrafficIPIfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfSecondaryState.setDescription('This object represents the Secondary State of the interface.')
f3L3TrafficIPIfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOperationalState.setDescription('This object represents the Operational State of the interface.')
f3L3TrafficIPIfProxyArpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfProxyArpEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfProxyArpEnabled.setDescription('This attribute controls poxy ARP on this interface.')
f3L3TrafficIPIfIpAddressSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 7), IfIpAddressSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddressSourceType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddressSourceType.setDescription('This attribute represents the IP address source type.')
f3L3TrafficIPIfMgmtUseEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMgmtUseEnable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfMgmtUseEnable.setDescription('This attribute is used for controlling use of interface for management.\n            If enabled the NE can be managed through this interface.')
f3L3TrafficIPIfIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpAddress.setDescription('IP Address of the interface.')
f3L3TrafficIPIfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMask.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfMask.setDescription('IP Address mask of the interface.')
f3L3TrafficIPIfDhcpRelayInterfaceSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 11), DhcpRelayInterfaceSide()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInterfaceSide.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInterfaceSide.setDescription('This object represents interface side.')
f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60.setDescription('DHCP Option 60 value used for association of received\n            DHCP message with Traffic IP Interface.')
f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control.setDescription('This Attribute is used to control inspection of \n           DHCP option 60 presence in the DHCP messages received \n           on Client Side Traffic IP Interface.')
f3L3TrafficIPIfDhcpRelayUserClassOpt77 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77.setDescription('DHCP Option 77 value used for association of received\n            DHCP message with Traffic IP Interface .')
f3L3TrafficIPIfDhcpRelayUserClassOpt77Control = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77Control.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayUserClassOpt77Control.setDescription('This Attribute is used to control inspection of \n           DHCP option 77 presence in the DHCP messages received \n           on Client Side Traffic IP Interface.')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1.setDescription('DHCP Option 82 sub option 1 value.')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled.setDescription('This Attribute is used to control inspection of \n           DHCP option 82 sub option 1 presence in the DHCP messages received \n           on Client Side Traffic IP Interface.')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2.setDescription('DHCP Option 82 sub option 2 value.')
f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 19), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled.setDescription('This Attribute is used to control inspection of \n           DHCP option 82 sub option 2 presence in the DHCP messages received \n           on Client Side Traffic IP Interface.')
f3L3TrafficIPIfDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpEnabled.setDescription('Whether or not DHCP is enabled on this interface.')
f3L3TrafficIPIfDhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 21), CmDhcpRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRole.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRole.setDescription('Specify the DHCP role on this interface.')
f3L3TrafficIPIfDhcpClientIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdEnabled.setDescription('Whether or not DHCP client id enabled.')
f3L3TrafficIPIfDhcpClientId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientId.setDescription('Specify the DHCP Cliend ID value.')
f3L3TrafficIPIfDhcpClassIdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 24), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClassIdEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClassIdEnabled.setDescription('Whether or not DHCP class id enabled.')
f3L3TrafficIPIfDhcpHostNameEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 25), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameEnabled.setDescription('Whether or not DHCP host name enabled.')
f3L3TrafficIPIfDhcpHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostName.setDescription('DHCP host name value.')
f3L3TrafficIPIfDhcpClientIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 27), DHCPCIDType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpClientIdType.setDescription('This object describe whether the dhcp cid type.')
f3L3TrafficIPIfDhcpHostNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 28), DHCPHostNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpHostNameType.setDescription('This object describe whether the dhcp host name type.')
f3L3TrafficIPIfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficIPIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L3TrafficIPIfRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L3TrafficIPIfRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L3TrafficIPIfRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIPIfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 31), AffectiveArpActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfAction.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIPIfAction.setDescription('This objects describes action set on this traffic ip interface.\n            DEPRECATED and new variable to use is f3L3TrafficIPIfActionX.')
f3L3TrafficIPIfActionX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 32), TrafficIpInterfaceActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfActionX.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfActionX.setDescription('This objects describes action set on this traffic ip interface.')
f3L3TrafficIPIfUnnumberedControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 33), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfUnnumberedControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfUnnumberedControl.setDescription('This object specify IP interface whether is numbered.')
f3L3TrafficIPIfBorrowedIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 34), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPIfBorrowedIntf.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfBorrowedIntf.setDescription('This object specify IP interface name whose IP address\n         is borrowed from currect object.')
f3L3TrafficIPIfIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 35), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpMode.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpMode.setDescription('This object means the ip mode for the interface.')
f3L3TrafficIPIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 36), IpInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfType.setDescription('This object represents the type of the interface.')
f3L3TrafficIPIfIpv6LinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 37), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddr.setDescription('Link-local Address.')
f3L3TrafficIPIfIpv6LinkLocalAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 38), Ipv6LinkLocalAddressMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddrMode.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6LinkLocalAddrMode.setDescription('The assignment mode of IPv6 Link-Local Address, only manual and automatic are applicable.')
f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 39), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled.setDescription('This is the control to enable or disable stateless\n            address auto configuration.')
f3L3TrafficIPIfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 40), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDefaultGateway.setDescription('indicates active default GW of the interface.')
f3L3TrafficIPIfIcmpErrorMsgRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 41), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfIcmpErrorMsgRateLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfIcmpErrorMsgRateLimit.setDescription('limit originated ICMP error messages rate in number of messages per second.\n            The value 0xFFFF shall be used to indicate no error message limit.')
f3L3TrafficIPIfDhcpv6Role = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 42), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Role.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Role.setDescription('Allows setting the DHCPv6 role on this interface.')
f3L3TrafficIPIfDhcpv6Enabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 43), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Enabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpv6Enabled.setDescription('Allows enabling/disabling of DHCPv6 on this interface.')
f3L3TrafficIPIfDhcpRapidCommitControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 44), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRapidCommitControlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDhcpRapidCommitControlEnabled.setDescription('This is the control to enable or disable DHCP rapid commit.')
f3L3TrafficIPIfMaxRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 45), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMaxRAInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfMaxRAInterval.setDescription('Maximum time in seconds between generated RA messages.')
f3L3TrafficIPIfMinRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 46), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMinRAInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfMinRAInterval.setDescription('Minimum time in seconds between generated RA messages,\n            should be less than 0.75* max-ra-interval.')
f3L3TrafficIPIfRouterLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 47), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRouterLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRouterLifeTime.setDescription('Time in seconds the router can be used as a default router,\n            should be larger than max-ra-interval.')
f3L3TrafficIPIfReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 48), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfReachableTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfReachableTime.setDescription('time in milliseconds, that a node assumes a neighbor is reachable after having received\n            a reachability confirmation, 0 means unspecified.')
f3L3TrafficIPIfRaDhcpMoreConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 49), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDhcpMoreConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDhcpMoreConfigEnabled.setDescription('RA More configurations via DHCP.')
f3L3TrafficIPIfRaManagedAddressConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 50), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaManagedAddressConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaManagedAddressConfigEnabled.setDescription('RA Managed Address Config Control.')
f3L3TrafficIPIfRaRDNSSOptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 51), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSOptionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSOptionEnabled.setDescription('Control Recursive DNS server option presence in the RA messages.')
f3L3TrafficIPIfRaRDNSSLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 52), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaRDNSSLifeTime.setDescription('Set the Lifetime field of the RDNSS option.')
f3L3TrafficIPIfRaDNSSList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 53), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDNSSList.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDNSSList.setDescription('list of IPv6 addresses of DNS servers.')
f3L3TrafficIPIfRaDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 54), NdpRaDefaultRouterPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDefaultRouterPreference.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfRaDefaultRouterPreference.setDescription('Specifies Default Router preference field in RA according to RFC4191.')
f3L3TrafficIPIfDupAddrDetectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 55), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectControl.setDescription('Allows enabling/disabling of DAD on this interface.')
f3L3TrafficIPIfDupAddrDetectTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 56), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectTransmits.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectTransmits.setDescription('Specify number of consequent NS messages sent by this interface.')
f3L3TrafficIPIfDupAddrDetectRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 57), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectRetransTimer.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfDupAddrDetectRetransTimer.setDescription('Interval in ms between consecutive NS messages and  as well as the time a node\n            waits after sending the last NS  before ending the DAD.')
f3L3TrafficIPIfMTU = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 9, 1, 58), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfMTU.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfMTU.setDescription('MTU of a L3 Traffic IP Interface in bytes.')
f3DhcpRelayAgentTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10), )
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberTable.setDescription('A list of entries for the Dhcp Relay Agent Traffic Ip Interface member.')
f3DhcpRelayAgentTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentIndex"), (0, "F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberEntry.setDescription('A conceptual row in the f3DhcpRelayAgentTrafficIpIfMemberTable.')
f3DhcpRelayAgentTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberObject.setDescription('This object describes the traffic ip interface.')
f3DhcpRelayAgentTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberStorageType.setDescription('The type of storage configured for this entry.')
f3DhcpRelayAgentTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 10, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3DhcpRelayAgentTrafficIpIfMemberRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3DhcpRelayAgentTrafficIpIfMemberRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3DhcpRelayAgentTrafficIpIfMemberRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3DhcpRelayAgentTrafficIpIfMemberRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3VrfTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11), )
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberTable.setDescription('A list of entries for the Vrf Traffic Ip Interface member.')
f3VrfTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberEntry.setDescription('A conceptual row in the f3DhcpRelayAgentTrafficIpIfMemberTable.')
f3VrfTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberObject.setDescription('This object describes the traffic ip interface.')
f3VrfTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberStorageType.setDescription('The type of storage configured for this entry.')
f3VrfTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3VrfTrafficIpIfMemberRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3VrfTrafficIpIfMemberRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3VrfTrafficIpIfMemberRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3VrfTrafficIpIfMemberRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIpv4RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12), )
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteTable.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteTable.setDescription('A list of entries for the L3 Traffic Ipv4 route.\n             Must set f3VrfAction as retrieveEffectiveRoutes(4) before get data from this table.')
f3L3TrafficIpv4RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4RouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteEntry.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv4RouteTable.')
f3L3TrafficIpv4RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteDest.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteDest.setDescription('It specifies the traffic Ipv4 route destination.')
f3L3TrafficIpv4RouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMask.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMask.setDescription('It specifies the traffic Ipv4 route mask.')
f3L3TrafficIpv4RouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteNextHop.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteNextHop.setDescription('It specifies the traffic Ipv4 route next hop.')
f3L3TrafficIpv4RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMetric.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteMetric.setDescription('It specifies the traffic Ipv4 route metric.')
f3L3TrafficIpv4RouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteInterface.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteInterface.setDescription('It specifies the traffic Ipv4 route interface.')
f3L3TrafficIpv4RouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteAdvertise.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteAdvertise.setDescription('It specifies the traffic Ipv4 route advertise.')
f3L3TrafficIpv4RouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 7), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatus.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatus.setDescription('It specifies the traffic Ipv4 route status.\n            DEPRECATED and new attribute to use is\n            f3L3TrafficIpv4RouteStatusX.')
f3L3TrafficIpv4RouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteSourceForwardingEnable.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteSourceForwardingEnable.setDescription('It specifies the traffic Ipv4 route source forwarding whether enabled.')
f3L3TrafficIpv4RouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 9), RouteFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteFlags.setStatus('obsolete')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteFlags.setDescription('It specifies the traffic Ipv4 route flags.')
f3L3TrafficIpv4RouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStorageType.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficIpv4RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteRowStatus.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L3TrafficIpv4RouteRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L3TrafficIpv4RouteRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L3TrafficIpv4RouteRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIpv4RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 12), IpEntryType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteType.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteType.setDescription('It specifies the route is dynamic or static.')
f3L3TrafficIpv4RouteStatusX = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 13), TrafficIpRouteStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatusX.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteStatusX.setDescription('It specifies the traffic Ipv4 route status.')
f3L3TrafficIpv4RouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 12, 1, 14), TrafficIpRouteOriginType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteOrigin.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficIpv4RouteOrigin.setDescription('The origin of IP Route.')
f3L3TrafficArpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13), )
if mibBuilder.loadTexts: f3L3TrafficArpTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpTable.setDescription('A list of Traffic ARP entries on the NIDs.\n             Must set f3L3TrafficIPIfActionX as optimizeArpRetrieve (1) before getting data from this table.')
f3L3TrafficArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficArpIPAddress"))
if mibBuilder.loadTexts: f3L3TrafficArpEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpEntry.setDescription('A conceptual row in the f3L3TrafficArpTable. Entries can\n             be created/deleted in this table by management application action.')
f3L3TrafficArpIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficArpIPAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpIPAddress.setDescription('This object allows configuration of the ARP Entry IP Address.')
f3L3TrafficArpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 2), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficArpMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpMacAddress.setDescription('This object allows management of the ARP Entry MAC Address.')
f3L3TrafficArpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficArpInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpInterface.setDescription('This object allows management of the ARP Entry Interface.')
f3L3TrafficArpEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 4), IpEntryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficArpEntryType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpEntryType.setDescription('The type of ARP Entry. Note that static entries can be created.')
f3L3TrafficArpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficArpStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficArpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 13, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficArpRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficArpRowStatus.setDescription('The status of this row.\n             The f3L3TrafficArpRowStatus object may be modified if\n             the associated instance of this object is equal to active(1),\n             notInService(2), or notReady(3).')
f3L3TrafficBgpRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouterTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterTable.setDescription('Traffic BGP Router.')
f3L3TrafficBgpRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEntry.setDescription('A conceptual row in the f3L3TrafficBgpRouterTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIndex.setDescription('The ID of BGP router.')
f3L3TrafficBgpRouterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAdminState.setDescription('This object represents the Administrative State of the Traffic BGP Router.')
f3L3TrafficBgpRouterSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterSecondaryState.setDescription('This object represents the Secondary State of the Traffic BGP Router.')
f3L3TrafficBgpRouterOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOperationalState.setDescription('This object represents the Operational State of the Traffic BGP Router.')
f3L3TrafficBgpRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterId.setDescription('BGP Router Identifier.')
f3L3TrafficBgpRouterAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAsNumber.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAsNumber.setDescription('Local autonomous system number of the router.  Uses\n            the 32-bit as-number type from the model in RFC 6991.')
f3L3TrafficBgpRouterConnectedRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterConnectedRoutesRedistControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterConnectedRoutesRedistControl.setDescription('This attribute is used to control connected route redistribution into BGP.')
f3L3TrafficBgpRouterOspfRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOspfRoutesRedistControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterOspfRoutesRedistControl.setDescription('This attribute specifies OSPF route redistribution options \n            False - OSPF routes are not redistributed to the BGP \n            True - OSPF routes are redistributed to BGP.')
f3L3TrafficBgpRouterStaticRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaticRoutesRedistControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaticRoutesRedistControl.setDescription('This attribute is used to control static route redistribution into BGP.')
f3L3TrafficBgpRouterDhcpRoutesRedistControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterDhcpRoutesRedistControl.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterDhcpRoutesRedistControl.setDescription('This attribute is used to control DHCP route redistribution into BGP.')
f3L3TrafficBgpRouterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficBgpRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficBgpRouterRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficBgpRouterRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficBgpRouterRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficBgpRouterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 13), BgpRouterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterAction.setDescription('This object describes action set on this BGP Router.')
f3L3TrafficBgpRouterIBgpAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIBgpAdminDistance.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterIBgpAdminDistance.setDescription('Administrative distance for routes learned from internal\n            BGP (iBGP).')
f3L3TrafficBgpRouterEBgpAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEBgpAdminDistance.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEBgpAdminDistance.setDescription('Administrative distance for routes learned from external\n            BGP (eBGP).')
f3L3TrafficBgpRouterEcmpMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEcmpMaximumPaths.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterEcmpMaximumPaths.setDescription('The maximum number of path used in ECMP for BGP routes.')
f3L3TrafficBgpRouterRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRestartTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterRestartTime.setDescription('Estimated time (in seconds) for the local BGP speaker to \n            restart a session.This value is advertise in the graceful\n            restart BGP capability. This is a 12-bit value, referred to\n            as Restart Time in RFC4724. Per RFC4724, the suggested\n            default value is <= the hold-time value.')
f3L3TrafficBgpRouterStaleRoutesTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 14, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaleRoutesTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouterStaleRoutesTime.setDescription('An upper-bound on the time that stale routes will be\n            retained by a router after a session is restarted. \n            If an End-of-RIB (EOR) marker is received prior to this timer\n            expiring stale-routes will be flushed upon its \n            receipt - if no EOR is received, then when this timer \n            expires stale paths will be purged. This timer is referred \n            to as the Selection_Deferral_Timer in FC4724.')
f3L3TrafficBgpRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteTable.setDescription('BGP routes.\n             Must set f3L3TrafficBgpRouterAction as optimizeBgpRouteRetrieve(1) before get data from this table.')
f3L3TrafficBgpRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteNetwork"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteMetric"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteNextHop"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteEntry.setDescription('A conceptual row in the f3L3TrafficBgpRouteTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNetwork.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNetwork.setDescription('Network of destination. Key of the table.')
f3L3TrafficBgpRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 2), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteMetric.setDescription('Metric value of this route. Key of the table.')
f3L3TrafficBgpRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteNextHop.setDescription('IP address of next hop. Key of the table.')
f3L3TrafficBgpRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 15, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRoutePath.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRoutePath.setDescription('The list of AS numbers to the destination.')
f3L3TrafficBgpPeerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTable.setDescription('Traffic BGP peer.')
f3L3TrafficBgpPeerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerEntry.setDescription('A conceptual row in the f3L3TrafficBgpPeerTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpPeerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIndex.setDescription('The ID of BGP peer instance.')
f3L3TrafficBgpPeerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAdminState.setDescription('This object represents the Administrative State of the Traffic BGP Peer.')
f3L3TrafficBgpPeerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerSecondaryState.setDescription('This object represents the Secondary State of the Traffic BGP Peer.')
f3L3TrafficBgpPeerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerOperationalState.setDescription('This object represents the Operational State of the Traffic BGP Peer.')
f3L3TrafficBgpPeerIpv4Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv4Addr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv4Addr.setDescription('BGP Neighbor IP address.')
f3L3TrafficBgpPeerAsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAsNumber.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAsNumber.setDescription('AS number of the peer.')
f3L3TrafficBgpPeerDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerDescription.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerDescription.setDescription('An optional textual description intended primarily for use\n            with a peer or group.')
f3L3TrafficBgpPeerBgpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 8), BgpSessionStateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpSessionState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpSessionState.setDescription('This attribute indicates BGP session state.')
f3L3TrafficBgpPeerHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerHoldTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerHoldTime.setDescription('Time interval in seconds that a BGP session will be\n            considered active in the absence of keepalive or other\n            messages from the peer.  The hold-time is typically\n            set to 3x the keepalive-interval.')
f3L3TrafficBgpPeerStartupHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 10), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStartupHoldTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStartupHoldTime.setDescription('Value of the hold timer used before the routers have a \n            chance to exchange open messages and agree on the real value.')
f3L3TrafficBgpPeerKeepAliveTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 11), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerKeepAliveTime.setDescription('Time interval in seconds between transmission of keepalive\n            messages to the neighbor.  Typically set to 1/3 the\n            hold-time.')
f3L3TrafficBgpPeerConnectRetryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerConnectRetryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerConnectRetryTime.setDescription('Time interval in seconds between attempts to establish a\n            session with the peer.')
f3L3TrafficBgpPeerUpdateSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 13), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIp.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIp.setDescription('IP address used to update the source IP of BGP message transmitted.\n            Normally loopback interface IP may be used to support loadsharing/redundancy \n            between local and peer. Default value 0.0.0.0 implies no update.')
f3L3TrafficBgpPeerAuthenticationKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAuthenticationKey.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAuthenticationKey.setDescription('Authentication Key used with neighboring devices.')
f3L3TrafficBgpPeerTimeSinceUpTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceUpTransition.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceUpTransition.setDescription('Number of seconds since last transition to Established state.')
f3L3TrafficBgpPeerTimeSinceDownTransition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceDownTransition.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerTimeSinceDownTransition.setDescription('Number of seconds since last transition out of Established state.')
f3L3TrafficBgpPeerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 17), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficBgpPeerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficBgpPeerRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficBgpPeerRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficBgpPeerRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficBgpPeerIpVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 19), IpVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpVersion.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpVersion.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 20), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerIpv6Address.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerUpdateSourceIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 21), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIpv6.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceIpv6.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerMultihopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopControl.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerMultihopTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopTtl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerMultihopTtl.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerUpdateSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceInterface.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerUpdateSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 25), BgpUpdateSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerUpdateSourceType.setDescription('This attribute is supported on ge11x units.')
f3L3TrafficBgpPeerLocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 26), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerLocalPreference.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerLocalPreference.setDescription('This attribute is supported on ge11x/xgpro units.')
f3L3TrafficBgpPeerRouteReflectorClient = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 27), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClient.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClient.setDescription('This attribute is supported on ge11x/xgpro units.')
f3L3TrafficBgpPeerRouteReflectorClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 28), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClusterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerRouteReflectorClusterId.setDescription('This attribute is supported on ge11x/xgpro units.')
f3L3TrafficBgpPeerBgpRouteInboundFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 29), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteInboundFilter.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteInboundFilter.setDescription('This is the name of the IP Prefix List that is used as the filter for \n            Inbound. This is a read-write value. A null string implies there is no filter.')
f3L3TrafficBgpPeerBgpRouteOutboundFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 30), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteOutboundFilter.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpRouteOutboundFilter.setDescription('This is the name of the IP Prefix List that is used as the filter for Inbound. \n            This is a read-write value. A null string implies there is no filter.')
f3L3TrafficBgpPeerBgpGracefulRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 31), BgpGracefulRestartControlType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpGracefulRestart.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerBgpGracefulRestart.setDescription("Enable or disable the graceful restart capability. \n            Helper_only means the router does not support local restarting, \n            but able to assist remote peer's restart..")
f3L3TrafficBgpPeerPeerRestartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestartTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestartTime.setDescription('The period of time (advertised by the peer) that the peer \n            expects a restart of a BGP session to take..')
f3L3TrafficBgpPeerPeerRestarting = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 16, 1, 33), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestarting.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerPeerRestarting.setDescription('This flag indicates whether the remote neighbor is currently \n            in the process of restarting, and hence received routes are \n            currently stale.')
f3VrfOspfRouterTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17), )
if mibBuilder.loadTexts: f3VrfOspfRouterTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterTable.setDescription('OSPF Router.')
f3VrfOspfRouterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"))
if mibBuilder.loadTexts: f3VrfOspfRouterEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterEntry.setDescription('A conceptual row in f3VrfOspfRouterTable.')
f3VrfOspfRouterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3VrfOspfRouterIndex.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterIndex.setDescription('The ID of OSPF Router instance.')
f3VrfOspfRouterAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAdminState.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterAdminState.setDescription('This object represents the Administrative State of the Traffic OSPF Router.')
f3VrfOspfRouterSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 3), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterSecondaryState.setDescription('This object represents the Secondary State of the Traffic OSPF Router.')
f3VrfOspfRouterOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 4), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterOperationalState.setDescription('This object represents the Operational State of the Traffic OSPF Router.')
f3VrfOspfRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterId.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterId.setDescription('IP address used as Router ID for the OSPF protocol.')
f3VrfOspfRouterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDescription.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterDescription.setDescription('The description of OSPF router.')
f3VrfOspfRouterBgpRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesRedistributeToOspf.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesRedistributeToOspf.setDescription('This attribute is used to control redistribution of dynamic routes learnt \n         via BGP into OSPF.')
f3VrfOspfRouterBgpRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 8), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetricType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetricType.setDescription('Metric type of the BGP routes redistributed to OSPF.')
f3VrfOspfRouterBgpRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 9), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterBgpRoutesMetric.setDescription('Metric value of the BGP routes redistributed to OSPF.')
f3VrfOspfRouterStaticRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesRedistributeToOspf.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesRedistributeToOspf.setDescription('This attribute is used to control redistribution of static routes into OSPF.')
f3VrfOspfRouterStaticRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 11), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetricType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetricType.setDescription('Metric type of the static routes redistributed to OSPF.')
f3VrfOspfRouterStaticRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 12), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterStaticRoutesMetric.setDescription('Metric value of the static routes redistributed to OSPF.')
f3VrfOspfRouterConnectedRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesRedistributeToOspf.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesRedistributeToOspf.setDescription('This attribute is used to control redistribution of connected routes into OSPF.')
f3VrfOspfRouterConnectedRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 14), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetricType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetricType.setDescription('Metric type of the connected routes redistributed to OSPF.')
f3VrfOspfRouterConnectedRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterConnectedRoutesMetric.setDescription('Metric value of the connected routes redistributed to OSPF.')
f3VrfOspfRouterDhcpRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesRedistributeToOspf.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesRedistributeToOspf.setDescription('This attribute is used to control redistribution of dynamic routes learnt \n         via DHCP into OSPF.')
f3VrfOspfRouterDhcpRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 17), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetricType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetricType.setDescription('Metric type of the DHCP routes redistributed to OSPF.')
f3VrfOspfRouterDhcpRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterDhcpRoutesMetric.setDescription('Metric value of the DHCP routes redistributed to OSPF.')
f3VrfOspfRouterIsAbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterIsAbr.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterIsAbr.setDescription('.')
f3VrfOspfRouterIsAsbr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3VrfOspfRouterIsAsbr.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterIsAsbr.setDescription('.')
f3VrfOspfRouterStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 21), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfOspfRouterStorageType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterStorageType.setDescription('The storage type for this conceptual row.')
f3VrfOspfRouterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfOspfRouterRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3VrfOspfRouterRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3VrfOspfRouterRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3VrfOspfRouterRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3VrfOspfRouterAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 23), OspfRouterActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAction.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterAction.setDescription('The Ospf Router action.')
f3VrfOspfRouterVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 24), OspfVersion()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterVersion.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterVersion.setDescription('The version of the Ospf Router.')
f3VrfOspfRouterAdministrativeDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 25), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterAdministrativeDistance.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterAdministrativeDistance.setDescription('The Administrative Distance of the Ospf Router.')
f3VrfOspfRouterSlaacRoutesRedistributeToOspf = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesRedistributeToOspf.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesRedistributeToOspf.setDescription('This attribute is used to control redistribution of dynamic routes learnt \n         via SLAAC into OSPF.')
f3VrfOspfRouterSlaacRoutesMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 27), RoutesMetricType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetricType.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetricType.setDescription('Metric type of the SLAAC routes redistributed to OSPF.')
f3VrfOspfRouterSlaacRoutesMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetric.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterSlaacRoutesMetric.setDescription('Metric value of the SLAAC routes redistributed to OSPF.')
f3VrfOspfRouterEcmpMaximumPaths = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 29), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterEcmpMaximumPaths.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterEcmpMaximumPaths.setDescription('The maximum number of path used in ECMP for OSPF routes.')
f3VrfOspfRouterSrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterSrControl.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterSrControl.setDescription('Segment Routing Control.')
f3VrfOspfRouterConvergenceTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 17, 1, 31), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfOspfRouterConvergenceTime.setStatus('current')
if mibBuilder.loadTexts: f3VrfOspfRouterConvergenceTime.setDescription('Convergence Time.')
f3L3TrafficOspfAreaTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18), )
if mibBuilder.loadTexts: f3L3TrafficOspfAreaTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaTable.setDescription('Traffic OSPF Area.')
f3L3TrafficOspfAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"))
if mibBuilder.loadTexts: f3L3TrafficOspfAreaEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaEntry.setDescription('A conceptual row in f3L3TrafficOspfAreaTable.')
f3L3TrafficOspfAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIndex.setDescription('The ID of OSPF Area instance.')
f3L3TrafficOspfAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 2), TrafficOspfAreaType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaType.setDescription('OSPF Area Type.')
f3L3TrafficOspfAreaDefaultCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaDefaultCost.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaDefaultCost.setDescription('The cost of a default route propagated to stub area.')
f3L3TrafficOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaId.setDescription('The 32-bit number identifying the area.')
f3L3TrafficOspfAreaStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 5), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficOspfAreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficOspfAreaRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficOspfAreaRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficOspfAreaRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficOspfAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 7), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaAuthType.setDescription('This attribute is used to specify authentication type.')
f3L3TrafficOspfAreaSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaSimpleAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaSimpleAuthKey.setDescription('The attribute is used to specify simple authentication key.')
f3L3TrafficOspfAreaCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 18, 1, 9), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaCryptoKeyId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaCryptoKeyId.setDescription('Authentication Key Id.')
f3L3TrafficOspfAreaIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19), )
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberTable.setDescription('OSPF Area Interface Member.')
f3L3TrafficOspfAreaIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberObject"))
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberEntry.setDescription('A conceptual row in f3L3TrafficOspfAreaIfMemberTable.')
f3L3TrafficOspfAreaIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberObject.setDescription('OSPF Area Interface Member.')
f3L3TrafficOspfAreaIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficOspfAreaIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAreaIfMemberRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficOspfAreaIfMemberRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficOspfAreaIfMemberRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficOspfAreaIfMemberRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3VrfLoopbackInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20), )
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceTable.setDescription('.')
f3VrfLoopbackInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfLoopbackInterfaceIndex"))
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceEntry.setDescription('A conceptual row in f3VrfLoopbackInterfaceTable.')
f3VrfLoopbackInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIndex.setDescription('.')
f3VrfLoopbackInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceName.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceName.setDescription('.')
f3VrfLoopbackInterfaceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpAddress.setDescription('.')
f3VrfLoopbackInterfaceNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceNetMask.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceNetMask.setDescription('.')
f3VrfLoopbackInterfaceCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRLo.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRLo.setDescription('.')
f3VrfLoopbackInterfaceCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRHi.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceCIRHi.setDescription('.')
f3VrfLoopbackInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceStorageType.setDescription('The storage type for this conceptual row.')
f3VrfLoopbackInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3VrfLoopbackInterfaceRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3VrfLoopbackInterfaceRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3VrfLoopbackInterfaceRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3VrfLoopbackInterfaceIpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 9), IpMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpMode.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpMode.setDescription('This object means the ip mode for the interface.')
f3VrfLoopbackInterfaceIpv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 10), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6Address.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6Address.setDescription('This object means the ipv6 address for the interface.')
f3VrfLoopbackInterfaceIpv6AddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 20, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6AddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3VrfLoopbackInterfaceIpv6AddrPrefixLen.setDescription('This object means the ipv6 address prefix length for the interface.')
f3L3TrafficOspfAsLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21), )
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbTable.setDescription('OSPF AS Link State Database.\n             Must set f3VrfOspfRouterAction as optimizeOspfAsLsDbRetrieve(1) before get data from this table.')
f3L3TrafficOspfAsLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfAsLsDbRouterId"))
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbEntry.setDescription('A conceptual row in the f3L3TrafficOspfAsLsDbTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficOspfAsLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 1), OspfAsLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbType.setDescription('LSA Type.')
f3L3TrafficOspfAsLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbId.setDescription('Link State ID.')
f3L3TrafficOspfAsLsDbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbRouterId.setDescription('LSA advertising router.')
f3L3TrafficOspfAsLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbChecksum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbChecksum.setDescription('The checksum associated with Link State Advertisement.')
f3L3TrafficOspfAsLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbSeqNum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbSeqNum.setDescription('The Sequence Number associated with the last LSA.')
f3L3TrafficOspfAsLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 21, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbAge.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfAsLsDbAge.setDescription('The age, in seconds, since this LSA was last received.')
f3L3TrafficOspfLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22), )
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbTable.setDescription('OSPF Link State database.\n             Must set f3VrfOspfRouterAction as optimizeOspfLsDbRetrieve(2) before get data from this table.')
f3L3TrafficOspfLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLsDbAreaId"))
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbEntry.setDescription('A conceptual row in the f3L3TrafficOspfLsDbTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficOspfLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 1), OspfLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbType.setDescription('LSA Type.')
f3L3TrafficOspfLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbId.setDescription('Link State ID.')
f3L3TrafficOspfLsDbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbRouterId.setDescription('Advertising Router ID.')
f3L3TrafficOspfLsDbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 4), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAreaId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAreaId.setDescription('Area ID.')
f3L3TrafficOspfLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbChecksum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbChecksum.setDescription('The checksum associated with Link State Advertisement.')
f3L3TrafficOspfLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbSeqNum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbSeqNum.setDescription('The Sequence Number associated with the last LSA.')
f3L3TrafficOspfLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 22, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAge.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLsDbAge.setDescription('The age, in seconds, since this LSA was last received.')
f3L3TrafficOspfNeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23), )
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborTable.setDescription('OSPF neighbor table.\n             Must set f3VrfOspfRouterAction as optimizeOspfNeighborRetrieve(3) before get data from this table.')
f3L3TrafficOspfNeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfNeighborIpAddress"))
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborEntry.setDescription('A conceptual row in the f3L3TrafficOspfNeighborTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficOspfNeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborIpAddress.setDescription('Address of interface of neighbor.')
f3L3TrafficOspfNeighborInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 2), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborInterface.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborInterface.setDescription('The local interface which discovers the neighbor.')
f3L3TrafficOspfNeighborRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRouterId.setDescription('Router ID of the neighbor.')
f3L3TrafficOspfNeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 4), OspfAdjacencyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborState.setDescription('State of Link State Database synchronization with the neighbor.')
f3L3TrafficOspfNeighborRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 5), TrafficOspfRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRole.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborRole.setDescription('Role of the neighbor. DR, DR other and Backup are applicable.')
f3L3TrafficOspfNeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborPriority.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborPriority.setDescription('The priority of the neighbor.')
f3L3TrafficOspfNeighborDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborDeadTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborDeadTime.setDescription('The Dead Time field indicates the amount of time remaining that \n         the router waits to receive an OSPF hello packet from the \n         neighbor before declaring the neighbor down.')
f3L3TrafficOspfNeighborLocalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 23, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborLocalInterfaceName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfNeighborLocalInterfaceName.setDescription('The name of local interface which discovers the neighbor.')
f3L3TrafficIPInterfaceOspfTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfTable.setDescription('OSPF Traffic IP Interface Attributes.')
f3L3TrafficIPInterfaceOspfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1), )
f3L3TrafficIPInterfaceEntry.registerAugmentions(("F3-L3-MIB", "f3L3TrafficIPInterfaceOspfEntry"))
f3L3TrafficIPInterfaceOspfEntry.setIndexNames(*f3L3TrafficIPInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceOspfEntry.setDescription('A conceptual row in the f3L3TrafficIPInterfaceOspfTable.')
f3L3TrafficIPIfOspfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAreaId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAreaId.setDescription('A 32-bit number identifying the area.')
f3L3TrafficIPIfOspfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfCost.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfCost.setDescription('The cost of the route during the SPF calculation.')
f3L3TrafficIPIfOspfIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 3), OspfIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfIfType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfIfType.setDescription('Interface network type.')
f3L3TrafficIPIfOspfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRtrPriority.setDescription('An 8-bit unsigned integer, used for DR and BDR election, \n          may be default. 0 means not to attend DR election.')
f3L3TrafficIPIfOspfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfHelloInterval.setDescription('The interval in seconds between Hello Packets that \n          the router sends on the interface.')
f3L3TrafficIPIfOspfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDeadInterval.setDescription("The number of seconds before the router's neighbors will \n          declare it down, when they stop hearing the router's Hello Packets.")
f3L3TrafficIPIfOspfTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 7), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfTransmitDelay.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfTransmitDelay.setDescription('2~65535 Default 2s The estimated number of seconds it takes to\n          transmit a Link State Update Packet over this interface. \n          LSAs contained in the Link State update packet will have their \n          age incremented by this amount before transmission. This value \n          should take into account transmission and propagation delays; \n          it must be greater than 1.')
f3L3TrafficIPIfOspfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 8), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfRetransmitInterval.setDescription('The number of seconds between LSA retransmissions, for adjacencies \n          belonging to this interface. Also used when retransmitting \n          Database Description and Link State Request Packets.')
f3L3TrafficIPIfOspfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 9), OspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfState.setDescription('OSPF Interface state.')
f3L3TrafficIPIfOspfDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfDesignatedRouterId.setDescription('Designated Router IP interface on the Network.')
f3L3TrafficIPIfOspfBackupDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfBackupDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfBackupDesignatedRouterId.setDescription('Backup Designated Router IP interface on the Network.')
f3L3TrafficIPIfOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 12), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAuthType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfAuthType.setDescription('This attribute is used to specify authentication type. \n          Simple: 64-bits clear password inserted into OSPF packets header.\n          None: No authentication is used.\n          Cryptographic: a shared secret which enables the generation/verification \n          of message digests which are appended to the OSPF protocol packets.')
f3L3TrafficIPIfOspfSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfSimpleAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfOspfSimpleAuthKey.setDescription('Authentication key.')
f3L3TrafficIPIfospfCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 25, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPIfospfCryptoKeyId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPIfospfCryptoKeyId.setDescription('Crypto key Id.')
f3L3TrafficIPv6InterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceTable.setDescription('A list of entries for the L3 Traffic IPv6 Interface.')
f3L3TrafficIPv6InterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceEntry.setDescription('A conceptual row in the f3L3TrafficIPv6InterfaceTable.')
f3L3TrafficIPv6IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIndex.setDescription('It specifies the traffic IPv6 interface number.')
f3L3TrafficIPv6IfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfName.setDescription('It specifies the traffic IPv6 interface name.')
f3L3TrafficIPv6IfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAdminState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAdminState.setDescription('This object represents the Administrative State of the interface.')
f3L3TrafficIPv6IfSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfSecondaryState.setDescription('This object represents the Secondary State of the interface.')
f3L3TrafficIPv6IfOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfOperationalState.setDescription('This object represents the Operational State of the interface.')
f3L3TrafficIPv6IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 6), IpInterfaceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfType.setDescription('This object represents the type of the interface.')
f3L3TrafficIPv6IfLinkLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 7), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddr.setDescription('Link-local Address.')
f3L3TrafficIPv6IfLinkLocalAddrMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 8), Ipv6LinkLocalAddressMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddrMode.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfLinkLocalAddrMode.setDescription('The assignment mode of IPv6 Link-Local Address, only manual and automatic are applicable.')
f3L3TrafficIPv6IfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMtu.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMtu.setDescription('This is the MTU for IPv6 Traffic interface.')
f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled.setDescription('This is the control to enable or disable stateless\n            address auto configuration.')
f3L3TrafficIPv6IfDefaultGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDefaultGateway.setDescription('indicates active default GW of the interface.')
f3L3TrafficIPv6IfIcmpErrorMsgRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIcmpErrorMsgRateLimit.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfIcmpErrorMsgRateLimit.setDescription('limit originated ICMP error messages rate in number of messages per second.\n            The value 0xFFFF shall be used to indicate no error message limit.')
f3L3TrafficIPv6IfDhcpRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 13), CmDhcpRole()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRole.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRole.setDescription('Allows setting the DHCPv6 role on this interface.')
f3L3TrafficIPv6IfDhcpEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpEnabled.setDescription('Allows enabling/disabling of DHCPv6 on this interface.')
f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled.setDescription('This is the control to enable or disable DHCP rapid commit.')
f3L3TrafficIPv6IfMaxRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMaxRAInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMaxRAInterval.setDescription('Maximum time in seconds between generated RA messages.')
f3L3TrafficIPv6IfMinRAInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMinRAInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfMinRAInterval.setDescription('Minimum time in seconds between generated RA messages,\n            should be less than 0.75* max-ra-interval.')
f3L3TrafficIPv6IfRouterLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRouterLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRouterLifeTime.setDescription('Time in seconds the router can be used as a default router,\n            should be larger than max-ra-interval.')
f3L3TrafficIPv6IfReachableTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfReachableTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfReachableTime.setDescription('time in milliseconds, that a node assumes a neighbor is reachable after having received\n            a reachability confirmation, 0 means unspecified.')
f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled.setDescription('RA More configurations via DHCP.')
f3L3TrafficIPv6IfRaManagedAddressConfigEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaManagedAddressConfigEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaManagedAddressConfigEnabled.setDescription('RA Managed Address Config Control.')
f3L3TrafficIPv6IfRaRDNSSOptionEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSOptionEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSOptionEnabled.setDescription('Control Recursive DNS server option presence in the RA messages.')
f3L3TrafficIPv6IfRaRDNSSLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 23), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaRDNSSLifeTime.setDescription('Set the Lifetime field of the RDNSS option.')
f3L3TrafficIPv6IfRaDNSSList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDNSSList.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDNSSList.setDescription('list of IPv6 addresses of DNS servers.')
f3L3TrafficIPv6IfRaDefaultRouterPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 25), NdpRaDefaultRouterPreference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDefaultRouterPreference.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRaDefaultRouterPreference.setDescription('Specifies Default Router preference field in RA according to RFC4191.')
f3L3TrafficIPv6IfDupAddrDetectControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 26), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectControl.setDescription('Allows enabling/disabling of DAD on this interface.')
f3L3TrafficIPv6IfDupAddrDetectTransmits = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectTransmits.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectTransmits.setDescription('Specify number of consequent NS messages sent by this interface.')
f3L3TrafficIPv6IfDupAddrDetectRetransTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectRetransTimer.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfDupAddrDetectRetransTimer.setDescription('Interval in ms between consecutive NS messages and  as well as the time a node\n            waits after sending the last NS  before ending the DAD.')
f3L3TrafficIPv6IfStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 29), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPv6IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 30), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPv6IfRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPv6IfRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPv6IfRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPv6IfAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 26, 1, 31), TrafficIpv6InterfaceActionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6IfAction.setDescription('This objects describes action set on this traffic ip interface.')
f3L3TrafficIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27), )
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressTable.setDescription('Traffic IPv6 interface address table.')
f3L3TrafficIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6AddrIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddressEntry.setDescription('A conceptual row in the f3L3TrafficIPv6AddressTable.')
f3L3TrafficIPv6AddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrIndex.setDescription('The unique integer index value corresponding to a traffic ipv6 interface unicast address.')
f3L3TrafficIPv6AddrAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 2), Ipv6AddressAssignMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrAssignMode.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrAssignMode.setDescription('The assignment mode of IPv6 Unicast Address.')
f3L3TrafficIPv6AddrUnicastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddr.setDescription('This is IPv6 Unicast Address.')
f3L3TrafficIPv6AddrUnicastAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrPrefixLength.setDescription('This is prefix length of the unicast address.')
f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix.setDescription('This is prefix of the unicast address in automatic address assignment mode.')
f3L3TrafficIPv6AddrStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPv6AddrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 27, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6AddrRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPv6AddrRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPv6AddrRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPv6AddrRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPv6PrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28), )
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixTable.setDescription('Traffic IPv6 RA prefix table.')
f3L3TrafficIPv6PrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6PrefixIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixEntry.setDescription('A conceptual row in f3L3TrafficIPv6PrefixTable.')
f3L3TrafficIPv6PrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixIndex.setDescription('The unique integer index value corresponding to a traffic ipv6 interface ra prefix.')
f3L3TrafficIPv6PrefixRaPrefixAdvEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixAdvEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixAdvEnabled.setDescription('This attribute is to enable to Advertise prefix to link in router mode.')
f3L3TrafficIPv6PrefixRaPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefix.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefix.setDescription('This is the IPv6 Prefix to be dispatched to the link in Router mode.')
f3L3TrafficIPv6PrefixRaPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRaPrefixLength.setDescription('Prefix length.')
f3L3TrafficIPv6PrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixValidLifeTime.setDescription('This attribute is used to specify fixed Valid lifetime of distributed prefix in seconds\n            All ones may be set for unlimited lifetime.')
f3L3TrafficIPv6PrefixPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixPreferredLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixPreferredLifeTime.setDescription('This attribute is used to specify fixed time interval for unrestricted use of prefix.\n            When this time has been expired the address is considered as deprecated as specified\n            in RFC4862 Preferred lifetime shall not be greater than the Valid Lifetime. All\n            ones may be set for unlimited lifetime.')
f3L3TrafficIPv6PrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPv6PrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 28, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6PrefixRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPv6PrefixRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPv6PrefixRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPv6PrefixRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPv6NdpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29), )
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpTable.setDescription('Traffic IPv6 NDP table.')
f3L3TrafficIPv6NdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"))
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpEntry.setDescription('A conceptual row in f3L3TrafficIPv6NdpTable.')
f3L3TrafficIPv6NdpIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpIPv6Addr.setDescription('This is the IP address of the NDP Entry.')
f3L3TrafficIPv6NdpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpInterface.setDescription('This is the IP interface for the NDP Entry.')
f3L3TrafficIPv6NdpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpMacAddress.setDescription('This is the MAC address of the NDP Entry.')
f3L3TrafficIPv6NdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 4), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpType.setDescription('The type of NDP Entry.\n         Note that static entries can be created.')
f3L3TrafficIPv6NdpReachabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 5), NdpNeighborReachabilityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpReachabilityState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpReachabilityState.setDescription('This is the reachability state of the NDP Entry.')
f3L3TrafficIPv6NdpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpAge.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpAge.setDescription('Indicates entry age in seconds.')
f3L3TrafficIPv6NdpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPv6NdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 29, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6NdpRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPv6NdpRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPv6NdpRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPv6NdpRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIpv6RouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30), )
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteTable.setDescription('A list of entries for the L3 Traffic Ipv6 route.\n             Must set f3VrfActionX as optimizeIpv6RouteRetrieve(7) before get data from this table.')
f3L3TrafficIpv6RouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteGateway"), (0, "F3-L3-MIB", "f3L3TrafficIpv6RouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv6RouteTable.')
f3L3TrafficIpv6RouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteDest.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteDest.setDescription('The destination IP address of this route. This object\n         may not take a Multicast (Class  D) address value.\n         Any assignment (implicit or otherwise) of an instance\n         of  this  object to a value x must be rejected if\n         the bitwise logical-AND of x with the value of the\n         corresponding instance of the static-route-mask\n         attribute is not equal to x.')
f3L3TrafficIpv6RoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6RoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RoutePrefixLength.setDescription('Indicate the mask to be logically ANDed with the\n         destination  address before being compared to\n         the value in the cmStaticRouteDest field. For\n         those systems that do not support arbitrary\n         subnet masks, an agent constructs the value  of\n         the static route mask by reference to the\n         IP Address Class. Any assignment (implicit or\n         otherwise) of an instance of this object to a\n         value x must be rejected if the bitwise logical AND\n         of x with the value of the corresponding instance\n         of the static-route-dest attribute is not\n         equal to static route destination.')
f3L3TrafficIpv6RouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 3), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteGateway.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteGateway.setDescription('The address of the next router en route.')
f3L3TrafficIpv6RouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteInterface.setDescription('Name of the IP interface for the interface\n         static route.')
f3L3TrafficIpv6RouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteMetric.setDescription("The primary routing  metric for this route.\n         The semantics of this metric are determined by\n         the routing-protocol specified in the route's\n         cmStaticRouteProto value. If  this metric is not\n         used, its value should be set to 1.")
f3L3TrafficIpv6RouteType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 6), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteType.setDescription('Indicates it is dynamic or static route.')
f3L3TrafficIpv6RouteAdvertise = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteAdvertise.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteAdvertise.setDescription('Indicates whether this static route will be\n         advertised via routing protocol.')
f3L3TrafficIpv6RouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 8), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStatus.setDescription('It specifies the traffic Ipv6 route status.')
f3L3TrafficIpv6RouteFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 9), RouteFlags()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteFlags.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteFlags.setDescription('It specifies the traffic Ipv6 route flags.')
f3L3TrafficIpv6RouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 10), TrafficIpRouteOriginType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteOrigin.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteOrigin.setDescription('The origin of IP Route.')
f3L3TrafficIpv6RouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIpv6RouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 30, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6RouteRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIpv6RouteRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIpv6RouteRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIpv6RouteRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3DhcpV6RelayAgentTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31), )
if mibBuilder.loadTexts: f3DhcpV6RelayAgentTable.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentTable.setDescription('A list of entries for the Dhcp V6 Relay Agent.')
f3DhcpV6RelayAgentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentIndex"))
if mibBuilder.loadTexts: f3DhcpV6RelayAgentEntry.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentEntry.setDescription('A conceptual row in the f3DhcpV6RelayAgentTable.')
f3DhcpV6RelayAgentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 1), Integer32())
if mibBuilder.loadTexts: f3DhcpV6RelayAgentIndex.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentIndex.setDescription('The integer index value describes the dhcp-relay-agent index.')
f3DhcpV6RelayAgentAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 2), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAlias.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAlias.setDescription('The DHCP relay agent alias.')
f3DhcpV6RelayAgentAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 3), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAdminState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentAdminState.setDescription('This object represents the Administrative State of the agent.')
f3DhcpV6RelayAgentSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentSecondaryState.setDescription('This object represents the Secondary State of the agent.')
f3DhcpV6RelayAgentOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 5), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentOperationalState.setDescription('This object represents the Operational State of the agent.')
f3DhcpV6RelayAgentServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 6), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpAddress.setDescription('The Ipv6 address of this DCHP relay agent.')
f3DhcpV6RelayAgentServerIpInteface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 7), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpInteface.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentServerIpInteface.setDescription('This object describes the server Ip Interface.')
f3DhcpV6RelayAgentStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 8), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentStorageType.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentStorageType.setDescription('The storage type for this conceptual row.')
f3DhcpV6RelayAgentRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 31, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3DhcpV6RelayAgentRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3DhcpV6RelayAgentRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3DhcpV6RelayAgentRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3DhcpV6RelayAgentClientTrafficIpIfMemberTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32), )
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberTable.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberTable.setDescription('A list of entries for the Dhcp V6 Relay Agent Client Traffic Ip Interface member.')
f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentIndex"), (0, "F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberObject"))
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry.setDescription('A conceptual row in the f3DhcpV6RelayAgentClientTrafficIpIfMemberTable.')
f3DhcpV6RelayAgentClientTrafficIpIfMemberObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 1), VariablePointer())
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberObject.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberObject.setDescription('This object describes the Client traffic ip interface.')
f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType.setDescription('The type of storage configured for this entry.')
f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 32, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
cmL3FlowPointTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33), )
if mibBuilder.loadTexts: cmL3FlowPointTable.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointTable.setDescription('A list of entries for the L3 flowpoint.')
cmL3FlowPointEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"))
if mibBuilder.loadTexts: cmL3FlowPointEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointEntry.setDescription('A conceptual row in the cmL3FlowPointTable.')
cmL3FlowPointPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 1), Integer32())
if mibBuilder.loadTexts: cmL3FlowPointPortIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointPortIndex.setDescription('The port number value.')
cmL3FlowPointIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 2), Integer32())
if mibBuilder.loadTexts: cmL3FlowPointIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointIndex.setDescription('The L3 flow point number.')
cmL3FlowPointAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 3), F3DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAlias.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointAlias.setDescription('This object describes the L3 flow point alias.')
cmL3FlowPointAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 4), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAdminState.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointAdminState.setDescription('This object describes the L3 flow point admin state.')
cmL3FlowPointSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 5), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointSecondaryState.setDescription('This object describes the L3 flow point secondary state.')
cmL3FlowPointOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 6), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointOperationalState.setDescription('This object describes the L3 flow point operational state.')
cmL3FlowPointMultiCOSEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointMultiCOSEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointMultiCOSEnabled.setDescription('Control to enable or disable per-COS BWPs on a FlowPoint.\n            ENABLED:per-COS BWPs (CIR, EIR, CBS, EBS, CM, CF) are applied as a policing \n                     function for all ingress frames of this flowpoint.\n            DISABLED:per-Flow BWP (CIR, EIR, CBS, EBS, CM, CF) is applied as a policing \n                     function for all ingress frames of this flowpoint.\n            User must independently enable each COS BWP when ENABLED.')
cmL3FlowPointCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointCOS.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointCOS.setDescription('Identifies the internal COS applied to all ingress frames of the flowpoint.')
cmL3FlowPointUntaggedMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointUntaggedMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointUntaggedMemberShipEnabled.setDescription('This attribute controls untagged frames membership for the Flowpoint.\n            ENABLED: Ingress untagged frame matches Flowpoint membership.\n            DISABLED: Ingress untagged frame does not match Flowpoint membership.')
cmL3FlowPointOuterTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 10), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipEnabled.setDescription('This attribute controls outer tag membership for the Flowpoint whether enabled.')
cmL3FlowPointOuterTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 11), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipVlanId.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointOuterTagMemberShipVlanId.setDescription('This attribute controls outer tag VlanId membership for the Flowpoint.')
cmL3FlowPointInnerTagMemberShipEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipEnabled.setDescription('This attribute controls inner tag membership for the Flowpoint whether enabled.')
cmL3FlowPointInnerTagMemberShipVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 13), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipVlanId.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointInnerTagMemberShipVlanId.setDescription('This attribute controls inner tag VlanId membership for the Flowpoint.')
cmL3FlowPointFragmentedPktsFwdEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointFragmentedPktsFwdEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointFragmentedPktsFwdEnabled.setDescription('This attribute specifies whether received IP Packets with More Fragments\n            flag should be forwarded by the FlowPoint.')
cmL3FlowPointHCosMgmtEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMgmtEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHCosMgmtEnabled.setDescription('This attribute specifies whether the Hierarchical COS shaping enabled for this flow point.')
cmL3FlowPointHCosGuaranteedBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwHi.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwHi.setDescription('This attribute specifies the Hierarchical COS guarranteed bandwidth \n           high 32 bits for this flow point.')
cmL3FlowPointHCosGuaranteedBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwLo.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHCosGuaranteedBwLo.setDescription('This attribute specifies the Hierarchical COS guarranteed bandwidth \n           low 32 bits for this flow point.')
cmL3FlowPointHCosMaximumBwHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 18), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwHi.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwHi.setDescription('This attribute specifies the Hierarchical COS maximum bandwidth \n           high 32 bits for this flow point.')
cmL3FlowPointHCosMaximumBwLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 19), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwLo.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHCosMaximumBwLo.setDescription('This attribute specifies the Hierarchical COS maximum bandwidth \n           low 32 bits for this flow point.')
cmL3FlowPointDscpOverwriteControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointDscpOverwriteControl.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointDscpOverwriteControl.setDescription('This attribute allows enable dscp value overwrite.')
cmL3FlowPointPriMapProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 21), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointPriMapProfile.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointPriMapProfile.setDescription('This attribute allows specify the priority map profile.')
cmL3FlowPointStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 22), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3FlowPointStorageType.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStorageType.setDescription('The type of storage configured for this entry.')
cmL3FlowPointRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 23), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3FlowPointRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmL3FlowPointRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmL3FlowPointRowStatus value as createAndGo(4).\n            Upon successful row creation, this variable has a\n            value of active(1).\n\n            The cmL3FlowPointRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmL3FlowPointAclNoMatchDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 24), AclNoMatchDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointAclNoMatchDisposition.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointAclNoMatchDisposition.setDescription('This attribute allows specify ACL no match disposition type')
cmL3FlowPointWfqSegmentationCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqSegmentationCOS.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointWfqSegmentationCOS.setDescription('This object is used to specify wfq segmentation COS value.')
cmL3FlowPointWfqGroupCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupCOS.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupCOS.setDescription('This object is used to specify wfq group COS value.')
cmL3FlowPointWfqGroupEirLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 27), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirLo.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirLo.setDescription('This object is used to specify wfq group EIR low 32 bits value.')
cmL3FlowPointWfqGroupEirHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 28), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirHi.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointWfqGroupEirHi.setDescription('This object is used to specify wfq group EIR high 32 bits value.')
cmL3FlowPointEgressShapingType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 33, 1, 29), ShapingType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointEgressShapingType.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointEgressShapingType.setDescription('This object allows specification of Shaping Type for Flow Point')
cmL3QosPolicerTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34), )
if mibBuilder.loadTexts: cmL3QosPolicerTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerTable.setDescription('A list of entries corresponding to Ethernet Quality of Service \n         Policer for configuration purposes.')
cmL3QosPolicerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEntry.setDescription('A conceptual row in the cmL3QosPolicerTable. \n          These entries represent a Quality of Service Policer.')
cmL3QosPolicerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerIndex.setDescription('The Policer Index that represents the COS level.  This\n             is applicable in case of a Multi COS flow. Index 1\n             represents COS 0; Index 2 represents COS 1 and so on. \n\n             In release 5.6CC the range is extended to 1..16 to support duplicate\n             N2A policers on a Flow. The duplicate policers are created under a Flow \n             if network interface of the Flow is ERP Group or Split Horizon Group. \n             In case of multi-cos Flow indices 1..8 represent policers of COS 0..7 \n             going from Network 1 port; indices 9..16 represent policers for COS 0..7 \n             going from Network 2 port.\n             In case of single-cos Flow index 1 represents policer going from Network 1\n             port; index 9 represents policer going from Network 2 port.\n             ')
cmL3QosPolicerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerAdminState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerAdminState.setDescription('This object represents the Administrative State of \n             the QOS Flow Policer.')
cmL3QosPolicerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerOperationalState.setDescription('This object represents the Operational State of the QOS Flow Policer.')
cmL3QosPolicerSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerSecondaryState.setDescription('This object represents the Secondary State of the QOS Flow Policer.')
cmL3QosPolicerCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCIRLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the lower 32 bits of the\n          CIR.')
cmL3QosPolicerCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCIRHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) on Policer.  This represents the upper 32 bits of the\n          CIR.')
cmL3QosPolicerEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEIRLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the lower 32 bits\n          of the EIR.')
cmL3QosPolicerEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEIRHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) on the Policer.  This represents the upper 32 bits\n          of the EIR.')
cmL3QosPolicerCBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCBS.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCBS.setDescription('This object allows specification of the Commited Burst Size\n          (CBS) on Policer.')
cmL3QosPolicerEBS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 10), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerEBS.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEBS.setDescription('This object allows specification of the Excess Burst Size\n          (EBS) on the Policer.')
cmL3QosPolicerAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 11), PolicerAlgorithmType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerAlgorithm.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerAlgorithm.setDescription("This object allows specification of Policer algorithm as\n           'srTCM' (Single Rate Triple Color Marking) or 'trTCM' (Two Rate\n           Triple Color Marking).")
cmL3QosPolicerColorMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 12), PolicerColorMode()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerColorMode.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerColorMode.setDescription("This object allows specification of Policer Color Mode as\n           'color-aware' or 'color-blind'.")
cmL3QosPolicerCouplingFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerCouplingFlag.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCouplingFlag.setDescription('This object allows specification of Policer Coupling Flag.\n        When coupling is enabled, tokens that would normally be \n        added to the C-bucket are passed to the E-bucket only once the CIR\n        bucket has reached its CBS level. Therefore under this condition\n        the E-bucket is being filled at the rate of CIR + EIR. \n        Normally the long term average of frames declared yellow is \n        bounded by the EIR. Coupling is a function to allow the \n        long term average of frames declared yellow to be bounded by \n        CIR + EIR. This allows a higher volume of yellow frames \n        to be delivered/received if the arrival of green marked frames \n        is low.  Tokens from the E-bucket do NOT get passed to the \n        C-bucket once the EBS level has been reached.\n        Enabling coupling in combination with a provisioned EIR of 0 \n        allows for a single rate three color marking (srTCM) algorithm \n        to be established.  In this situation the E-bucket is filled at the \n        CIR rate in the case the C-bucket is filled to its CBS level.')
cmL3QosPolicerCIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 14), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxHi.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the high 32 bits.')
cmL3QosPolicerCIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerCIRMaxLo.setDescription('This object allows specification of the Commited Information\n          Rate(CIR) MAX on Policer.  This represents the lower 32 bits.')
cmL3QosPolicerEIRMaxHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxHi.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the high 32 bits.')
cmL3QosPolicerEIRMaxLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 17), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEIRMaxLo.setDescription('This object allows specification of the Excess Information\n          Rate(EIR) MAX on the Policer.  This represents the lower 32 bits.')
cmL3QosPolicerEnvelopeObject = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 18), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerEnvelopeObject.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerEnvelopeObject.setDescription('This object allows specification of envelope object.')
cmL3QosPolicerRank = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerRank.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerRank.setDescription('This object allows specification of rank value.')
cmL3QosPolicerPolicingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 20), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerPolicingEnabled.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerPolicingEnabled.setDescription('This attribute allows enable or disable policers.')
cmL3QosPolicerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 21), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerStorageType.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStorageType.setDescription('The type of storage configured for this entry.')
cmL3QosPolicerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 34, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosPolicerRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmL3QosPolicerRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmL3QosPolicerRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmL3QosPolicerRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmL3QosShaperTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35), )
if mibBuilder.loadTexts: cmL3QosShaperTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperTable.setDescription('A list of entries corresponding to Ethernet Access Port \n             Quality of Service Shaper for configuration purposes.\n             These shapers can be managed when the Access Port is\n             in evpl mode and are relevant for traffic in the\n             network to access direction.')
cmL3QosShaperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"))
if mibBuilder.loadTexts: cmL3QosShaperEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperEntry.setDescription('A conceptual row in the cmL3QosShaperTable. \n             These entries represent a Quality of Service Shaper.')
cmL3QosShaperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperIndex.setDescription('The unique integer index value corresponding to a \n             Quality of Service Shaper.')
cmL3QosShaperAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 2), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperAdminState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperAdminState.setDescription('This object represents the Administrative State of \n             the QOS Shaper.')
cmL3QosShaperOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 3), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperOperationalState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperOperationalState.setDescription('This object represents the Operational State of the QOS Shaper.')
cmL3QosShaperSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 4), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperSecondaryState.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperSecondaryState.setDescription('This object represents the Secondary State of the QOS Shaper.')
cmL3QosShaperCIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperCIRLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperCIRLo.setDescription('This object represents the Commited Information\n          Rate(CIR) (Lower 32 bits)of a Shaper.')
cmL3QosShaperCIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperCIRHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperCIRHi.setDescription('This object represents the Commited Information\n          Rate(CIR) (Higher 32 bits) of a Shaper.')
cmL3QosShaperEIRLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperEIRLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperEIRLo.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
cmL3QosShaperEIRHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperEIRHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperEIRHi.setDescription('This object represents the Excess Information\n          Rate(EIR) (Higher 32 bits) on the Shaper.')
cmL3QosShaperBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 9), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperBufferSize.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperBufferSize.setDescription('This object represents the Buffer Size of the Shaper.')
cmL3QosShaperCOS = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperCOS.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperCOS.setDescription('This object provides the COS (Class of Service)\n             value for the QOS Shaper.')
cmL3QosShaperStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 11), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperStorageType.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStorageType.setDescription('The type of storage configured for this entry.')
cmL3QosShaperRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cmL3QosShaperRowStatus.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperRowStatus.setDescription('The status of this row.\n            An entry MUST NOT exist in the active state unless all\n            objects in the entry have an appropriate value, as described\n            in the description clause for each writable object.\n\n            The values of cmL3QosShaperRowStatus supported are\n            createAndGo(4) and destroy(6).  All mandatory attributes\n            must be specified in a single SNMP SET request with\n            cmL3QosShaperRowStatus value as createAndGo(4).\n            Upon successful row creation, this object has a\n            value of active(1).\n\n            The cmL3QosShaperRowStatus object may be modified if\n            the associated instance of this object is equal to active(1).')
cmL3QosShaperWfqWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 35, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperWfqWeight.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperWfqWeight.setDescription('This object represents the wfq weight of the QoS Shaper.')
f3L3TrafficOspfInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36), )
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTable.setDescription('A list of entries for the Traffic OSPF Interface.')
f3L3TrafficOspfInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfInterfaceIndex"))
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceEntry.setDescription('A conceptual row in the f3L3TrafficOspfInterfaceTable.')
f3L3TrafficOspfInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceIndex.setDescription('The index of the Traffic OSPF Interface entry.')
f3L3TrafficOspfInterfaceOspfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCost.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCost.setDescription('The cost of the route during the SPF calculation.')
f3L3TrafficOspfInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 3), OspfIfType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceType.setDescription('Interface network type.')
f3L3TrafficOspfInterfaceOspfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRtrPriority.setDescription('An 8-bit unsigned integer, used for DR and BDR election,\n             may be default. 0 means not to attend DR election.')
f3L3TrafficOspfInterfaceOspfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfHelloInterval.setDescription('The interval in seconds between Hello Packets\n             that the router sends on the interface.')
f3L3TrafficOspfInterfaceOspfDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDeadInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDeadInterval.setDescription("The number of seconds before the router's neighbors\n             will declare it down, when they stop hearing\n             the router's Hello Packets.")
f3L3TrafficOspfInterfaceOspfTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfTransmitDelay.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfTransmitDelay.setDescription('The estimated number of seconds it takes to\n             transmit a Link State Update Packet over this\n             interface. LSAs contained in the Link State\n             update packet will have their age incremented\n             by this amount before transmission. This value\n             should take into account transmission and\n             propagation delays; it must be greater than zero.')
f3L3TrafficOspfInterfaceOspfRetransmitInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRetransmitInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfRetransmitInterval.setDescription('The number of seconds between LSA retransmissions,\n            for adjacencies belonging to this interface.\n            Also used when retransmitting Database Description\n            and Link State Request Packets.')
f3L3TrafficOspfInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 9), OspfInterfaceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceState.setDescription('The State of Interface in running OSPF protocol.')
f3L3TrafficOspfInterfaceOspfDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfDesignatedRouterId.setDescription('Designated Router IP interface on the Network.')
f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId.setDescription('Backup Designated Router IP interface on the Network.')
f3L3TrafficOspfInterfaceOspfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 12), OspfAuthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfAuthType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfAuthType.setDescription("This attribute is used to specify authentication type.\n                Simple: 64-bits clear password inserted into ospf packets header.\n                None: No authentication is used.\n                Cryptographic: a shared secret which enables the\n                    generation/verification of message digests which are\n                    appended to the OSPF protocol packets.\n                IPsec: use IP layer's IPSec to support authentication,\n                    rather than OSPF header..")
f3L3TrafficOspfInterfaceOspfSimpleAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfSimpleAuthKey.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfSimpleAuthKey.setDescription('Simple Authentication type authentication key (8 Bytes length).')
f3L3TrafficOspfInterfaceOspfCryptoKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 14), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCryptoKeyId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfCryptoKeyId.setDescription('Key id from the keys configured in the Authentication keys table.\n             This key is used if Authentication Type is cryptographic.')
f3L3TrafficOspfInterfaceOspfInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 15), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfInstanceId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceOspfInstanceId.setDescription('OSPFv3 Instance ID.  Instance ID allows multiple OSPF protocol\n             instances to be run on a single link.  Default value is 0.\n             It is only necessary to assign a value other than 0\n             on those links that will contain multiple separate\n             communities of OSPF routers.  Only Applicable to ospfv3.')
f3L3TrafficOspfInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 16), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceId.setDescription("32-bit number uniquely identifying this interface among the\n             collection of this router's interfaces.  Shall be unique\n             per router. Default vlaue shall be the last number of EID.\n             Only applicable to OSPFv3.")
f3L3TrafficOspfInterfaceLinkLsaSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceLinkLsaSuppression.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceLinkLsaSuppression.setDescription('Indicates whether or not origination of a link-LSA is suppressed.\n             In OSPFv3, link LSAs are generated for each link, announcing\n             link-local IPv6 address of the router to its local neighbors.\n             These are useless on PtP or PtMP networks and this option allows\n             to suppress the link LSA origination for such interfaces.\n             The attribute is ignored on other than PtP or PtMP interfaces.\n             Default value is disbaled.  Only applicable to OSPFv3.')
f3L3TrafficOspfInterfacePassiveControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 18), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfacePassiveControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfacePassiveControl.setDescription("Enable/Disable passive interface - a passive interface's prefix\n             will be advertised but no neighbor adjacencies will be formed\n             on the interface..")
f3L3TrafficOspfInterfaceAssociatedIpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 19), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceAssociatedIpInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceAssociatedIpInterface.setDescription('The reference of Traffic IP Interface or loopback interface.\n             It is the name of interface.')
f3L3TrafficOspfInterfaceStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 20), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficOspfInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceRowStatus.setDescription('The status of this row.\n                An entry MUST NOT exist in the active state unless all\n                objects in the entry have an appropriate value, as described\n                in the description clause for each writable object.\n\n                The values of f3L3TrafficOspfInterfaceRowStatus supported are\n                createAndGo(4) and destroy(6).  All mandatory attributes\n                must be specified in a single SNMP SET request with\n                f3L3TrafficOspfInterfaceRowStatus value as createAndGo(4).\n                Upon successful row creation, this object has a\n                value of active(1).\n\n                The f3L3TrafficOspfInterfaceRowStatus object may be modified if\n                the associated instance of this object is equal to active(1).')
f3L3TrafficOspfInterfaceTilfaControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 22), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaControl.setDescription('TI-LFA Control.')
f3L3TrafficOspfInterfaceTilfaProtectionType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 36, 1, 23), TilfaProtectionType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaProtectionType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfInterfaceTilfaProtectionType.setDescription('TI-LFA Protection Type.')
f3L3TrafficBgpPeerAddressFamilyTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyTable.setDescription('A list of entries for the Traffic BGP Peer Address Family.')
f3L3TrafficBgpPeerAddressFamilyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyEntry.setDescription('A conceptual row in the f3L3TrafficBgpPeerAddressFamilyTable.')
f3L3TrafficBgpPeerAddressFamilyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyIndex.setDescription('The index of the Traffic BGP Peer Address Family entry.')
f3L3TrafficBgpPeerAddressFamilyName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 2), BgpPeerAddressFamilyNameType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyName.setDescription('Address Family Name.')
f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute.setDescription('If set to true, redistribute the connected route to the neighbour.')
f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute.setDescription('If set to true, redistribute the connected route to the neighbour.')
f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute.setDescription('If set to true, redistribute the static route to the neighbour.')
f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute.setDescription('If set to true, redistribute the dhcproute to the neighbour.')
f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute.setDescription('If set to true, redistribute the default route to the neighbour.\n            This attribute is only applicable to IPv6 address family.')
f3L3TrafficBgpPeerAddressFamilySendDefaultRoute = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 8), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilySendDefaultRoute.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilySendDefaultRoute.setDescription('If set to true, send the default route to the neighbour.')
f3L3TrafficBgpPeerAddressFamilyNextHopType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 9), BgpNextHopUpdateType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopType.setDescription("The mechanism to update NEXT HOP attribute in update message:\n            1. DEFAULT: Update next hop according the rules in RFC4271\n            2. SELF: Use transmitting interface's as the next hop\n            3. IPv4 Address: Configure IPv4 address as next hop explicitly\n            4. IPv6 Address: Configure IPv6 address as next hop explicitly")
f3L3TrafficBgpPeerAddressFamilyNextHopIpv4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv4.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv4.setDescription('The IPv4 address used to override NEXT HOP attribute.')
f3L3TrafficBgpPeerAddressFamilyNextHopIpv6 = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 11), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv6.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyNextHopIpv6.setDescription('The IPv4 address used to override NEXT HOP attribute.')
f3L3TrafficBgpPeerAddressFamilyExtNextHopControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 12), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyExtNextHopControl.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyExtNextHopControl.setDescription('Whether to support Extended Next Hop\n            Encoding Capability. E.g Allowing\n            advertising IPV4 route with a Next Hop\n            address of IPv6..')
f3L3TrafficBgpPeerAddressFamilyStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 13), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficBgpPeerAddressFamilyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 37, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyRowStatus.setDescription('The status of this row.\n                An entry MUST NOT exist in the active state unless all\n                objects in the entry have an appropriate value, as described\n                in the description clause for each writable object.\n\n                The values of f3L3TrafficBgpPeerAddressFamilyRowStatus supported are\n                createAndGo(4) and destroy(6).  All mandatory attributes\n                must be specified in a single SNMP SET request with\n                f3L3TrafficBgpPeerAddressFamilyRowStatus value as createAndGo(4).\n                Upon successful row creation, this object has a\n                value of active(1).\n\n                The f3L3TrafficBgpPeerAddressFamilyRowStatus object may be modified if\n                the associated instance of this object is equal to active(1).')
f3L3TrafficBgpRIBRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38), )
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteTable.setDescription('A list of entries for the Traffic BGP RIB routes.')
f3L3TrafficBgpRIBRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRIBRouteIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteEntry.setDescription('A conceptual row in the f3L3TrafficBgpRouteTable.')
f3L3TrafficBgpRIBRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteIndex.setDescription('The index of the Traffic BGP RIB Route entry.')
f3L3TrafficBgpRIBRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNetwork.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNetwork.setDescription("Traffic BGP RIB Route's destination network address.")
f3L3TrafficBgpRIBRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteNextHop.setDescription("Traffic BGP RIB Route's next hop interface address.")
f3L3TrafficBgpRIBRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRouteMetric.setDescription("List of AS numbers in the path to route's destination network")
f3L3TrafficBgpRIBRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 38, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRoutePath.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRIBRoutePath.setDescription('The index of the Traffic BGP RIB Route entry.')
f3L3TrafficBgpInRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39), )
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteTable.setDescription('BGP In routes.\n             Must set f3L3TrafficBgpRouterAction as optimizeBgpInRouteRetrieve(2) before get data from this table.')
f3L3TrafficBgpInRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpInRouteIndex"))
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteEntry.setDescription('A conceptual row in the f3L3TrafficBgpInRouteTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpInRouteIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteIndex.setDescription('Index of this route. Key of the table.')
f3L3TrafficBgpInRouteNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNetwork.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNetwork.setDescription('Network of destination.')
f3L3TrafficBgpInRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteNextHop.setDescription('Address of next hop.')
f3L3TrafficBgpInRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteMetric.setDescription('Metric value of this route.')
f3L3TrafficBgpInRoutePath = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRoutePath.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRoutePath.setDescription('The list of AS numbers to the destination.')
f3L3TrafficBgpInRouteLocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 39, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteLocalPreference.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpInRouteLocalPreference.setDescription('Local Preference Value received from iBGP.')
f3L3TrafficBgpRouteV2Table = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40), )
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Table.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Table.setDescription('BGP routes.\n             Must set f3L3TrafficBgpRouterAction as optimizeBgpRouteRetrieve(1) before get data from this table.')
f3L3TrafficBgpRouteV2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouteV2Index"))
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Entry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Entry.setDescription('A conceptual row in the f3L3TrafficBgpRouteV2Table. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpRouteV2Index = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 1), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Index.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Index.setDescription('Index of this route. Key of the table.')
f3L3TrafficBgpRouteV2Network = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Network.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Network.setDescription('Network of destination.')
f3L3TrafficBgpRouteV2NextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2NextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2NextHop.setDescription('Address of next hop.')
f3L3TrafficBgpRouteV2Metric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Metric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Metric.setDescription('Metric value of this route.')
f3L3TrafficBgpRouteV2Path = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Path.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2Path.setDescription('The list of AS numbers to the destination.')
f3L3TrafficBgpRouteV2LocalPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 40, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2LocalPreference.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpRouteV2LocalPreference.setDescription('Local Preference Value received from iBGP.')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41), )
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable.setDescription('Advertising Prefix of BGP Peer Address Family.')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"), (0, "F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefix"))
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry.setDescription('A conceptual row in the f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficBgpPeerAddressFamilyAdvPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 1), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefix.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefix.setDescription('Advertising Prefix of a BGP Peer Address Family. Key of the table.')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 2), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 41, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficOspfV3NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42), )
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborTable.setDescription('OSPF v3 neighbor table.\n             Must set f3VrfOspfRouterAction as optimizeOspfNeighborRetrieve(3) before get data from this table.')
f3L3TrafficOspfV3NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfV3NeighborRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfV3NeighborInterfaceId"))
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborEntry.setDescription('A conceptual row in the f3L3TrafficOspfV3NeighborTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficOspfV3NeighborRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRouterId.setDescription('Router ID of the neighbor.')
f3L3TrafficOspfV3NeighborInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborInterfaceId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborInterfaceId.setDescription('ID of the interface of neighbor.')
f3L3TrafficOspfV3NeighborPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborPriority.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborPriority.setDescription('The priority of the neighbor.')
f3L3TrafficOspfV3NeighborDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborDeadTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborDeadTime.setDescription('The Dead Time field indicates the amount of time remaining \n        that the router waits to receive an OSPF hello packet from \n        the neighbor before declaring the neighbor down.')
f3L3TrafficOspfV3NeighborLocalInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborLocalInterfaceName.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborLocalInterfaceName.setDescription('The name of local interface which discovers the neighbor.')
f3L3TrafficOspfV3NeighborState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 6), OspfAdjacencyState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborState.setDescription('State of Link State Database synchronization with the neighbor.')
f3L3TrafficOspfV3NeighborRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 7), TrafficOspfRole()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRole.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborRole.setDescription('Role of the neighbor. DR, DR other and Backup are applicable.')
f3L3TrafficOspfV3NeighborIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 42, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborIpAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfV3NeighborIpAddress.setDescription('Link-local Address of interface of neighbor.')
f3L3TrafficOspfLinkLsDbTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43), )
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbTable.setDescription('OSPF Link State database.\n             Must set f3VrfOspfRouterAction as optimizeOspfLinkLinkLsDbRetrieve(4) before get data from this table.')
f3L3TrafficOspfLinkLsDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3VrfOspfRouterIndex"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbType"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAdvRouterId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterfaceId"), (0, "F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterface"))
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbEntry.setDescription('A conceptual row in the f3L3TrafficOspfLinkLsDbTable. Entries can\n            be created/deleted in this table by management application action.')
f3L3TrafficOspfLinkLsDbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 1), OspfLsaType())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbType.setDescription('LSA Type.')
f3L3TrafficOspfLinkLsDbId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbId.setDescription('Link State ID.')
f3L3TrafficOspfLinkLsDbAdvRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 3), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAdvRouterId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAdvRouterId.setDescription('Advertising Router ID.')
f3L3TrafficOspfLinkLsDbInterfaceId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 4), Unsigned32())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterfaceId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterfaceId.setDescription('The interface id of the interface instance from which the LSA was received.')
f3L3TrafficOspfLinkLsDbInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 5), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbInterface.setDescription('The local interface name from which the LSA was received.')
f3L3TrafficOspfLinkLsDbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAreaId.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAreaId.setDescription('Area ID.')
f3L3TrafficOspfLinkLsDbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbChecksum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbChecksum.setDescription('The checksum associated with Link State Advertisement.')
f3L3TrafficOspfLinkLsDbSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbSeqNum.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbSeqNum.setDescription('The Sequence Number associated with the last LSA.')
f3L3TrafficOspfLinkLsDbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAge.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbAge.setDescription('The age, in seconds, since this LSA was last received.')
f3L3TrafficOspfLinkLsDbRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbRtrPriority.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbRtrPriority.setDescription('Router priority for the interface.')
f3L3TrafficOspfLinkLsDbLinkLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbLinkLocalAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbLinkLocalAddress.setDescription("The originating router's linklocal interface address for the link.")
f3L3TrafficOspfLinkLsDbPrefixList = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 43, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbPrefixList.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfLinkLsDbPrefixList.setDescription('List of Prefixes associated with the link. \n         In maximum, up to 16 prefixes are supported.')
f3L3TrafficIpv4StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44), )
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteTable.setDescription('A list of entries for the L3 Traffic Ipv4 Static route.')
f3L3TrafficIpv4StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4StaticRouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv4StaticRouteTable.')
f3L3TrafficIpv4StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteDest.setDescription('It specifies the traffic Ipv4 Static route destination.')
f3L3TrafficIpv4StaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMask.setDescription('It specifies the traffic Ipv4 Static route mask.')
f3L3TrafficIpv4StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteNextHop.setDescription('It specifies the traffic Ipv4 Static route next hop.')
f3L3TrafficIpv4StaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 4), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteInterface.setDescription('It specifies the traffic Ipv4 Static route interface.')
f3L3TrafficIpv4StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteMetric.setDescription('It specifies the traffic Ipv4 Static route metric.')
f3L3TrafficIpv4StaticRouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteSourceForwardingEnable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteSourceForwardingEnable.setDescription('It specifies the traffic Ipv4 static route source forwarding whether enabled.')
f3L3TrafficIpv4StaticRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficIpv4StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 44, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4StaticRouteRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L3TrafficIpv4StaticRouteRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L3TrafficIpv4StaticRouteRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L3TrafficIpv4StaticRouteRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIpv4AllRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45), )
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteTable.setDescription('A list of entries for the L3 Traffic Ipv4 route.\n             Must set f3VrfActionX as optimizeRouteRetrieve(3) before get data from this table.')
f3L3TrafficIpv4AllRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteMask"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteInterface"), (0, "F3-L3-MIB", "f3L3TrafficIpv4AllRouteOrigin"))
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv4AllRouteTable.')
f3L3TrafficIpv4AllRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 1), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteDest.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteDest.setDescription('It specifies the traffic Ipv4 route destination.')
f3L3TrafficIpv4AllRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 2), IpAddress())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMask.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMask.setDescription('It specifies the traffic Ipv4 route mask.')
f3L3TrafficIpv4AllRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteNextHop.setDescription('It specifies the traffic Ipv4 route next hop.')
f3L3TrafficIpv4AllRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 4), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteInterface.setDescription('It specifies the traffic Ipv4 route interface.')
f3L3TrafficIpv4AllRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 5), TrafficIpRouteOriginType())
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteOrigin.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteOrigin.setDescription('The origin of IP Route.')
f3L3TrafficIpv4AllRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteMetric.setDescription('It specifies the traffic Ipv4 route metric.')
f3L3TrafficIpv4AllRouteSourceForwardingEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteSourceForwardingEnable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteSourceForwardingEnable.setDescription('It specifies the traffic Ipv4 route source forwarding whether enabled.')
f3L3TrafficIpv4AllRouteAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteAdminDistance.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteAdminDistance.setDescription('The Administrative Distance of IP Route.')
f3L3TrafficIpv4AllRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 9), TrafficIpRouteStatusType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStatus.setDescription('It specifies the traffic Ipv4 route status.')
f3L3TrafficIpv4AllRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 10), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteStorageType.setDescription('The type of storage configured for this entry.')
f3L3TrafficIpv4AllRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 45, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv4AllRouteRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3L3TrafficIpv4AllRouteRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3L3TrafficIpv4AllRouteRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3L3TrafficIpv4AllRouteRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3L3TrafficIpv6StaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46), )
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteTable.setDescription('A list of entries for the L3 Traffic Ipv6 static route.')
f3L3TrafficIpv6StaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv6StaticRouteInterface"))
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv6StaticRouteTable.')
f3L3TrafficIpv6StaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteDest.setDescription('The destination IP address of this route. This object\n         may not take a Multicast (Class  D) address value.\n         Any assignment (implicit or otherwise) of an instance\n         of  this  object to a value x must be rejected if\n         the bitwise logical-AND of x with the value of the\n         corresponding instance of the static-route-mask\n         attribute is not equal to x.')
f3L3TrafficIpv6StaticRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRoutePrefixLength.setDescription('Indicate the mask to be logically ANDed with the\n         destination  address before being compared to\n         the value in the cmStaticRouteDest field. For\n         those systems that do not support arbitrary\n         subnet masks, an agent constructs the value  of\n         the static route mask by reference to the\n         IP Address Class. Any assignment (implicit or\n         otherwise) of an instance of this object to a\n         value x must be rejected if the bitwise logical AND\n         of x with the value of the corresponding instance\n         of the static-route-dest attribute is not\n         equal to static route destination.')
f3L3TrafficIpv6StaticRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteNextHop.setDescription('The address of the next router en route.')
f3L3TrafficIpv6StaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteInterface.setDescription('Name of the IP interface for the interface\n         static route.')
f3L3TrafficIpv6StaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteMetric.setDescription("The primary routing  metric for this route.\n         The semantics of this metric are determined by\n         the routing-protocol specified in the route's\n         cmStaticRouteProto value. If  this metric is not\n         used, its value should be set to 1.")
f3L3TrafficIpv6StaticRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIpv6StaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 46, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6StaticRouteRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIpv6StaticRouteRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIpv6StaticRouteRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIpv6StaticRouteRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIpv6AllRouteTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47), )
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteTable.setDescription('A list of entries for the L3 Traffic Ipv6 route.\n             Must set f3VrfActionX as optimizeIpv6RouteRetrieve(7) before get data from this table.')
f3L3TrafficIpv6AllRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteDest"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRoutePrefixLength"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteNextHop"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteInterface"), (0, "F3-L3-MIB", "f3L3TrafficIpv6AllRouteOrigin"))
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteEntry.setDescription('A conceptual row in the f3L3TrafficIpv6AllRouteTable.')
f3L3TrafficIpv6AllRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteDest.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteDest.setDescription('The destination IP address of this route. This object\n         may not take a Multicast (Class  D) address value.\n         Any assignment (implicit or otherwise) of an instance\n         of  this  object to a value x must be rejected if\n         the bitwise logical-AND of x with the value of the\n         corresponding instance of the static-route-mask\n         attribute is not equal to x.')
f3L3TrafficIpv6AllRoutePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 2), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRoutePrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRoutePrefixLength.setDescription('Indicate the mask to be logically ANDed with the\n         destination  address before being compared to\n         the value in the cmStaticRouteDest field. For\n         those systems that do not support arbitrary\n         subnet masks, an agent constructs the value  of\n         the static route mask by reference to the\n         IP Address Class. Any assignment (implicit or\n         otherwise) of an instance of this object to a\n         value x must be rejected if the bitwise logical AND\n         of x with the value of the corresponding instance\n         of the static-route-dest attribute is not\n         equal to static route destination.')
f3L3TrafficIpv6AllRouteNextHop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 3), DisplayString())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteNextHop.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteNextHop.setDescription('The address of the next router en route.')
f3L3TrafficIpv6AllRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteInterface.setDescription('Name of the IP interface for the interface\n         static route.')
f3L3TrafficIpv6AllRouteOrigin = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 5), TrafficIpRouteOriginType())
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteOrigin.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteOrigin.setDescription('The origin of IP Route.')
f3L3TrafficIpv6AllRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteMetric.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteMetric.setDescription("The primary routing  metric for this route.\n         The semantics of this metric are determined by\n         the routing-protocol specified in the route's\n         cmStaticRouteProto value. If  this metric is not\n         used, its value should be set to 1.")
f3L3TrafficIpv6AllRouteAdminDistance = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteAdminDistance.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteAdminDistance.setDescription('The Administrative Distance of IP Route.')
f3L3TrafficIpv6AllRouteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 8), TrafficIpRouteStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStatus.setDescription('It specifies the traffic Ipv6 route status.')
f3L3TrafficIpv6AllRouteStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 9), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIpv6AllRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 47, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpv6AllRouteRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIpv6AllRouteRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIpv6AllRouteRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIpv6AllRouteRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3IpPrefixListTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48), )
if mibBuilder.loadTexts: f3IpPrefixListTable.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListTable.setDescription('IP Prefix List table.')
f3IpPrefixListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3IpPrefixListIndex"))
if mibBuilder.loadTexts: f3IpPrefixListEntry.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListEntry.setDescription('A conceptual row in the f3IpPrefixListTable. Entries can\n            be created/deleted in this table by management application action.')
f3IpPrefixListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 1), Integer32())
if mibBuilder.loadTexts: f3IpPrefixListIndex.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListIndex.setDescription('An integer index value used to uniquely identify\n             this IP Prefix List within a VRF.')
f3IpPrefixListName = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListName.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListName.setDescription('The name of IP Prefix List.')
f3IpPrefixListDefaultDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 3), IpPrefixDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixListDefaultDisposition.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListDefaultDisposition.setDescription('This indicates the default disposition for the\n             prefix that does not match any prefix in the prefix\n             list..')
f3IpPrefixListStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 4), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListStorageType.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListStorageType.setDescription('The storage type for this conceptual row.')
f3IpPrefixListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 48, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixListRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixListRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3IpPrefixListRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3IpPrefixListRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3IpPrefixListRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3IpPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49), )
if mibBuilder.loadTexts: f3IpPrefixTable.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixTable.setDescription('IP Prefix table.')
f3IpPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-L3-MIB", "f3VrfIndex"), (0, "F3-L3-MIB", "f3IpPrefixListIndex"), (0, "F3-L3-MIB", "f3IpPrefixIndex"))
if mibBuilder.loadTexts: f3IpPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixEntry.setDescription('A conceptual row in the f3IpPrefixTable. Entries can\n            be created/deleted in this table by management application action.')
f3IpPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 1), Integer32())
if mibBuilder.loadTexts: f3IpPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixIndex.setDescription('An integer index value used to uniquely identify\n             this IP Prefix entry within a IP Prefix List.')
f3IpPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefix.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefix.setDescription('The IP Prefix.  The length is up to 64 characters.')
f3IpPrefixPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixPriority.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixPriority.setDescription('This dictates the order in which this entry is applied \n             relative to the IP Prefix List. These values need not \n             be sequential and can have gaps. The priority of \n             the IP Prefix Entry within a list shall be unique. \n             Higher the value lower the priority.')
f3IpPrefixDisposition = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 4), IpPrefixDispositionType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixDisposition.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixDisposition.setDescription('This indicates whether to permit or deny the prefix.')
f3IpPrefixLessOrEqualPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixLessOrEqualPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixLessOrEqualPrefixLen.setDescription('This allows specifying a prefix length which allows \n            filtering networks with more specific prefixes within\n             this Prefix attribute. For example, if this value \n             is 16 and the Prefix attribute is <10.0.0.0/8>, \n             then all the networks in 10.0.0.0/8 that have prefix \n             that is 16 or less will be filtered. A specific value \n             of Prefix 0.0.0.0/0 with a value of 32 for this attribute \n             implies all the networks and it could be used for the \n             rule with highest priority value (lowest priority) \n             that permits all networks that have not been filtered \n             by higher priority entries.')
f3IpPrefixGreaterOrEqualPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3IpPrefixGreaterOrEqualPrefixLen.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixGreaterOrEqualPrefixLen.setDescription('This allows specifying a prefix length which allows \n            filtering all networks in the specified Prefix that \n            are at least the length specified for this attribute. \n            This attribute value shall be greater than the Prefix \n            Length of the Prefix attribute. For example, if this \n            value is 16 and the Prefix attribute is <10.0.0.0/8>, \n            then all the networks in 10.0.0.0/8 with a prefix \n            greater than or equal to 16 are filtered.')
f3IpPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixStorageType.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixStorageType.setDescription('The storage type for this conceptual row.')
f3IpPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 49, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3IpPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3IpPrefixRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3IpPrefixRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3IpPrefixRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3IpPrefixRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPInterfaceRAPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixTable.setDescription('Traffic IP interface RAP prefix table.')
f3L3TrafficIPInterfaceRAPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixEntry.setDescription('A conceptual row in f3L3TrafficIPInterfaceRAPrefixTable.')
f3L3TrafficIPInterfaceRAPrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixIndex.setDescription('The unique integer index value corresponding to a traffic IP interface RA prefix.')
f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled.setDescription('This attribute is to enable to Advertise prefix to link in router mode.')
f3L3TrafficIPInterfaceRAPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefix.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefix.setDescription('This is the IPv6 Prefix to be dispatched to the link in Router mode.')
f3L3TrafficIPInterfaceRAPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixLength.setDescription('Prefix length.')
f3L3TrafficIPInterfaceRAPrefixValidLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixValidLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixValidLifeTime.setDescription('This attribute is used to specify fixed Valid lifetime of distributed prefix in seconds\n            All ones may be set for unlimited lifetime.')
f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 6), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime.setDescription('This attribute is used to specify fixed time interval for unrestricted use of prefix.\n            When this time has been expired the address is considered as deprecated as specified\n            in RFC4862 Preferred lifetime shall not be greater than the Valid Lifetime. All\n            ones may be set for unlimited lifetime.')
f3L3TrafficIPInterfaceRAPrefixStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPInterfaceRAPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 50, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceRAPrefixRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPInterfaceRAPrefixRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPInterfaceRAPrefixRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPInterfaceRAPrefixRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPInterfaceNdpTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpTable.setDescription('Traffic IPv6 NDP table.\n         Must set f3L3TrafficIPIfActionX as optimizeNdpRetrieve(2) before get data from this table.')
f3L3TrafficIPInterfaceNdpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpEntry.setDescription('A conceptual row in f3L3TrafficIPInterfaceNdpTable.')
f3L3TrafficIPInterfaceNdpIPv6Addr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 1), Ipv6Address())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpIPv6Addr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpIPv6Addr.setDescription('This is the IP address of the NDP Entry.')
f3L3TrafficIPInterfaceNdpInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpInterface.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpInterface.setDescription('This is the IP interface for the NDP Entry.')
f3L3TrafficIPInterfaceNdpMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpMacAddress.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpMacAddress.setDescription('This is the MAC address of the NDP Entry.')
f3L3TrafficIPInterfaceNdpType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 4), IpEntryType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpType.setDescription('The type of NDP Entry.\n         Note that static entries can be created.')
f3L3TrafficIPInterfaceNdpReachabilityState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 5), NdpNeighborReachabilityState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpReachabilityState.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpReachabilityState.setDescription('This is the reachability state of the NDP Entry.')
f3L3TrafficIPInterfaceNdpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpAge.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpAge.setDescription('Indicates entry age in seconds.')
f3L3TrafficIPInterfaceNdpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 7), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPInterfaceNdpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 51, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceNdpRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPInterfaceNdpRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPInterfaceNdpRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPInterfaceNdpRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3TrafficIPInterfaceIPv6AddressTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52), )
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressTable.setDescription('Traffic interface IPv6 address table.\n             Must set f3L3TrafficIPIfActionX as optimizeIPv6AddressEntryRetrieve(3) before get data from this table.')
f3L3TrafficIPInterfaceIPv6AddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressEntry.setDescription('A conceptual row in the f3L3TrafficIPInterfaceIPv6AddressTable.')
f3L3TrafficIPInterfaceIPv6AddressIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 1), Integer32())
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressIndex.setDescription('The unique integer index value corresponding to a traffic IP interface IPv6 unicast address.')
f3L3TrafficIPInterfaceIPv6AddressAssignMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 2), Ipv6AddressAssignMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressAssignMode.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressAssignMode.setDescription('The assignment mode of IPv6 Unicast Address.')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 3), Ipv6Address()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddr.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddr.setDescription('This is IPv6 Unicast Address.')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength.setDescription('This is prefix length of the unicast address.')
f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix.setDescription('This is prefix of the unicast address in automatic address assignment mode.')
f3L3TrafficIPInterfaceIPv6AddressStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 6), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressStorageType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressStorageType.setDescription('The storage type for this conceptual row.')
f3L3TrafficIPInterfaceIPv6AddressRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 1, 52, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPInterfaceIPv6AddressRowStatus.setDescription('The status of this row.  An entry MUST NOT exist in the \n        active state unless all objects in the entry have an \n        appropriate value, as described\n        in the description clause for each writable object.\n\n        The values of f3L3TrafficIPInterfaceIPv6AddressRowStatus supported are\n        createAndGo(4) and destroy(6).  All mandatory attributes\n        must be specified in a single SNMP SET request with\n        f3L3TrafficIPInterfaceIPv6AddressRowStatus value as createAndGo(4).\n        Upon successful row creation, this object has a\n        value of active(1).\n\n        The f3L3TrafficIPInterfaceIPv6AddressRowStatus object may be modified if\n        the associated instance of this object is equal to active(1).')
f3L3FlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1), )
if mibBuilder.loadTexts: f3L3FlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsTable.setDescription('A collection of L3 Flow Point related statistics.  \n             These reflect the current data.')
f3L3FlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"))
if mibBuilder.loadTexts: f3L3FlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsEntry.setDescription('A conceptual row in the f3L3FlowPointStatsTable.\n             Entries exist in this table for each L3 flow point.')
f3L3FlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3FlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3FlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsValid.setDescription('Indicates the validity of the bin.')
f3L3FlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3FlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFMG.setDescription('The number of Frames Marked Green.')
f3L3FlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFMY.setDescription('The number of Frames Marked Yellow.')
f3L3FlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3L3FlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFTD.setDescription('The number of Frames Tail Dropped.')
f3L3FlowPointStatsFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFragmentedDropAcl.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFragmentedDropAcl.setDescription('The number of dropped fragmented packets.')
f3L3FlowPointStatsAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsAclRuleDrop.setDescription('The number of dropped packets due to ACL rule.')
f3L3FlowPointStatsTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsTtlEqual1Drop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsTtlEqual1Drop.setDescription(" the number of dropped packets due to ttl's value is 1.")
f3L3FlowPointStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameTx.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameTx.setDescription('The number of total transmitted frames.')
f3L3FlowPointStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameRx.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsFrameRx.setDescription(' The number of total received frames.')
f3L3FlowPointStatsNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsNoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsNoRouteDrop.setDescription(' The number of frames drop due to no route.')
f3L3FlowPointStatsHopLimitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 1, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointStatsHopLimitDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointStatsHopLimitDrop.setDescription(' The number of frames drop due to hop limit.')
f3L3FlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2), )
if mibBuilder.loadTexts: f3L3FlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryTable.setDescription('A collection of L3 Flow Point related statistics.  \n             These reflect the current data.')
f3L3FlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"), (0, "F3-L3-MIB", "f3L3FlowPointHistoryIndex"))
if mibBuilder.loadTexts: f3L3FlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryEntry.setDescription('A conceptual row in the f3L3FlowPointHistoryTable.\n             Entries exist in this table for each L3 flow point.')
f3L3FlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3FlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3FlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3FlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3FlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMG.setDescription('The number of Frames Marked Green.')
f3L3FlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMY.setDescription('The number of Frames Marked Yellow.')
f3L3FlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFMRD.setDescription('The number of Frames Marked Red and Discarded.')
f3L3FlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFTD.setDescription('The number of Frames Tail Dropped.')
f3L3FlowPointHistoryFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFragmentedDropAcl.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFragmentedDropAcl.setDescription('The number of dropped fragmented packets.')
f3L3FlowPointHistoryAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryAclRuleDrop.setDescription('The number of dropped packets due to ACL rule.')
f3L3FlowPointHistoryTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryTtlEqual1Drop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryTtlEqual1Drop.setDescription(" the number of dropped packets due to ttl's value is 1.")
f3L3FlowPointHistoryFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameTx.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameTx.setDescription('The number of total transmitted frames.')
f3L3FlowPointHistoryFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameRx.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryFrameRx.setDescription(' the number of total recieved frames.')
f3L3FlowPointHistoryNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryNoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryNoRouteDrop.setDescription(' the number of frames dropped due to no route.')
f3L3FlowPointHistoryHopLimitDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 2, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointHistoryHopLimitDrop.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointHistoryHopLimitDrop.setDescription(' the number of frames dropped due to hop limit.')
f3L3FlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3), )
if mibBuilder.loadTexts: f3L3FlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdTable.setDescription('A table of entries that allow manageability of L3 Flow Point Thresholds.')
f3L3FlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3FlowPointStatsIndex"), (0, "F3-L3-MIB", "f3L3FlowPointThresholdIndex"))
if mibBuilder.loadTexts: f3L3FlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdEntry.setDescription('A conceptual row in the f3L3FlowPointThresholdTable.')
f3L3FlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3FlowPointThresholdTable.')
f3L3FlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3FlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3FlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3FlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3FlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3FlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdMonValue.setDescription('Monitored value corresponding to f3L3FlowPointThresholdVariable.')
f3L3TrafficIpInterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsTable.setDescription('A collection of L3 traffic ip interface related statistics.  \n             These reflect the current data.')
f3L3TrafficIpInterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsEntry.setDescription('A conceptual row in the f3L3TrafficIpInterfaceStatsTable.\n             Entries exist in this table for each L3 traffic ip interface.')
f3L3TrafficIpInterfaceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3TrafficIpInterfaceStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3TrafficIpInterfaceStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsValid.setDescription('Indicates the validity of the bin.')
f3L3TrafficIpInterfaceStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3TrafficIpInterfaceStatsDhcpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpTx.setDescription('The number of packets DHCP Transmit.')
f3L3TrafficIpInterfaceStatsDhcpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpRx.setDescription('The number of packets DHCP Recieved.')
f3L3TrafficIpInterfaceStatsIcmpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpTx.setDescription('The number of packets Icmp protocol transmit.')
f3L3TrafficIpInterfaceStatsIcmpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpRx.setDescription('The number of packets Icmp protocol recieved.')
f3L3TrafficIpInterfaceStatsArpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqTx.setDescription('The number of transmit packets due to ARP request.')
f3L3TrafficIpInterfaceStatsArpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReqRx.setDescription('The number of recieved packets due to ARP request.')
f3L3TrafficIpInterfaceStatsArpReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyTx.setDescription('The number of transmit packets due to ARP reply.')
f3L3TrafficIpInterfaceStatsArpReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsArpReplyRx.setDescription('The number of recieved packets due to ARP reply.')
f3L3TrafficIpInterfaceStatsDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Tx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Tx.setDescription('The number of packets DHCPv6 Transmit.')
f3L3TrafficIpInterfaceStatsDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Rx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsDhcpV6Rx.setDescription('The number of packets DHCPv6 Recieved.')
f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx.setDescription('The number of packets Icmpv6 protocol transmit.')
f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx.setDescription('The number of packets Icmpv6 protocol recieved.')
f3L3TrafficIpInterfaceStatsNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSTx.setDescription('The number of transmit NS message.')
f3L3TrafficIpInterfaceStatsNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNSRx.setDescription('The number of recieved NS message.')
f3L3TrafficIpInterfaceStatsNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNATx.setDescription('The number of transmit NA message.')
f3L3TrafficIpInterfaceStatsNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpNARx.setDescription('The number of recieved NA message.')
f3L3TrafficIpInterfaceStatsNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRATx.setDescription('The number of transmit RA message.')
f3L3TrafficIpInterfaceStatsNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRARx.setDescription('The number of recieved RA message.')
f3L3TrafficIpInterfaceStatsNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSTx.setDescription('The number of transmit RS message.')
f3L3TrafficIpInterfaceStatsNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 4, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceStatsNdpRSRx.setDescription('The number of recieved RS message.')
f3L3TrafficIpInterfaceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTable.setDescription('A collection of L3 traffic ip interface related history statistics.  \n             These reflect the history data.')
f3L3TrafficIpInterfaceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryEntry.setDescription('A conceptual row in the f3L3TrafficIpInterfaceHistoryTable.\n             Entries exist in this table for each L3 traffic ip interface.')
f3L3TrafficIpInterfaceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            the history bin')
f3L3TrafficIpInterfaceHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3TrafficIpInterfaceHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3TrafficIpInterfaceHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3TrafficIpInterfaceHistoryDhcpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpTx.setDescription('The number of packets DHCP Transmit.')
f3L3TrafficIpInterfaceHistoryDhcpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpRx.setDescription('The number of packets DHCP Recieved.')
f3L3TrafficIpInterfaceHistoryIcmpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpTx.setDescription('The number of packets Icmp protocol transmit.')
f3L3TrafficIpInterfaceHistoryIcmpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpRx.setDescription('The number of packets Icmp protocol recieved.')
f3L3TrafficIpInterfaceHistoryArpReqTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqTx.setDescription('The number of transmit packets due to ARP request.')
f3L3TrafficIpInterfaceHistoryArpReqRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReqRx.setDescription(' the number of recieved packets due to ARP request.')
f3L3TrafficIpInterfaceHistoryArpReplyTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyTx.setDescription('The number of transmit packets due to ARP reply.')
f3L3TrafficIpInterfaceHistoryArpReplyRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryArpReplyRx.setDescription(' the number of recieved packets due to ARP reply.')
f3L3TrafficIpInterfaceHistoryDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Tx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Tx.setDescription('The number of packets DHCPv6 Transmit.')
f3L3TrafficIpInterfaceHistoryDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Rx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryDhcpV6Rx.setDescription('The number of packets DHCPv6 Recieved.')
f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx.setDescription('The number of packets Icmpv6 protocol transmit.')
f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx.setDescription('The number of packets Icmpv6 protocol recieved.')
f3L3TrafficIpInterfaceHistoryNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 17), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSTx.setDescription('The number of transmit NS message.')
f3L3TrafficIpInterfaceHistoryNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 18), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNSRx.setDescription('The number of recieved NS message.')
f3L3TrafficIpInterfaceHistoryNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 19), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNATx.setDescription('The number of transmit NA message.')
f3L3TrafficIpInterfaceHistoryNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 20), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpNARx.setDescription('The number of recieved NA message.')
f3L3TrafficIpInterfaceHistoryNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 21), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRATx.setDescription('The number of transmit RA message.')
f3L3TrafficIpInterfaceHistoryNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 22), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRARx.setDescription('The number of recieved RA message.')
f3L3TrafficIpInterfaceHistoryNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 23), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSTx.setDescription('The number of transmit RS message.')
f3L3TrafficIpInterfaceHistoryNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 5, 1, 24), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceHistoryNdpRSRx.setDescription('The number of recieved RS message.')
f3L3TrafficIpInterfaceThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6), )
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdTable.setDescription('A table of entries that allow manageability of L3 traffic ip interface Thresholds.')
f3L3TrafficIpInterfaceThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPIfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdEntry.setDescription('A conceptual row in the f3L3TrafficIpInterfaceThresholdTable.')
f3L3TrafficIpInterfaceThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3TrafficIpInterfaceThresholdTable.')
f3L3TrafficIpInterfaceThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3TrafficIpInterfaceThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3TrafficIpInterfaceThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3TrafficIpInterfaceThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3TrafficIpInterfaceThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdMonValue.setDescription('Monitored value corresponding to f3L3TrafficIpInterfaceThresholdVariable.')
f3L3AclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7), )
if mibBuilder.loadTexts: f3L3AclRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsTable.setDescription('A collection of L3 acl rule related statistics.  \n             These reflect the current data.')
f3L3AclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L3AclRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsEntry.setDescription('A conceptual row in the f3L3AclRuleStatsTable.\n             Entries exist in this table for each Acl rule.')
f3L3AclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3AclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3AclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsValid.setDescription('Indicates the validity of the bin.')
f3L3AclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3AclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 7, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleStatsRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleStatsRuleMatch.setDescription('The number of packets matching the ACL rule.')
f3L3AclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8), )
if mibBuilder.loadTexts: f3L3AclRuleHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryTable.setDescription('A collection of L3 acl rule related history statistics.  \n             These reflect the history data.')
f3L3AclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L3AclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L3AclRuleHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryEntry.setDescription('A conceptual row in the f3L3AclRuleHistoryTable.\n             Entries exist in this table for each L3 acl rule.')
f3L3AclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            the history bin.')
f3L3AclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3AclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3AclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3AclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 8, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleHistoryRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleHistoryRuleMatch.setDescription('The number of packets matching acl rule.')
f3L3AclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9), )
if mibBuilder.loadTexts: f3L3AclRuleThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdTable.setDescription('A table of entries that allow manageability of L3 acl rule Thresholds.')
f3L3AclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3AclRuleParentIndex"), (0, "F3-L3-MIB", "f3L3AclRuleIndex"), (0, "F3-L3-MIB", "f3L3AclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L3AclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L3AclRuleThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdEntry.setDescription('A conceptual row in the f3L3AclRuleThresholdTable.')
f3L3AclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3AclRuleThresholdTable.')
f3L3AclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3AclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3AclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3AclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3AclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 9, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3AclRuleThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdMonValue.setDescription('Monitored value corresponding to f3L3AclRuleThresholdVariable.')
f3L3QosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10), )
if mibBuilder.loadTexts: f3L3QosPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
f3L3QosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsEntry.setDescription('A conceptual row in the f3L3QosPolicerStatsTable.\n             Entries exist in this table for each l3 flow point policer.')
f3L3QosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3QosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3QosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsValid.setDescription('Indicates the validity of the bin.')
f3L3QosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3QosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMG.setDescription('Frames Marked Green.')
f3L3QosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMY.setDescription('Frames Marked Yellow.')
f3L3QosPolicerStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMYD.setDescription('Frames Marked Yellow and Dropped.')
f3L3QosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
f3L3QosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
f3L3QosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3L3QosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 10, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
f3L3QosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11), )
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
f3L3QosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerHistoryIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryEntry.setDescription('A conceptual row in the f3L3QosPolicerHistoryTable.\n             Entries exist in this table for each flow point policer.')
f3L3QosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
f3L3QosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3QosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3QosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3QosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMG.setDescription('Frames Marked Green.')
f3L3QosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
f3L3QosPolicerHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMYD.setDescription('Frames Marked Yellow and Dropped.')
f3L3QosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
f3L3QosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
f3L3QosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
f3L3QosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 11, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
f3L3QosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12), )
if mibBuilder.loadTexts: f3L3QosPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
f3L3QosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "f3L3QosPolicerThresholdIndex"))
if mibBuilder.loadTexts: f3L3QosPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdEntry.setDescription('A conceptual row in the f3L3QosPolicerThresholdTable.')
f3L3QosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3QosPolicerThresholdTable.')
f3L3QosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3QosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3QosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3QosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3QosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 12, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdMonValue.setDescription('Monitored value corresponding to f3L3QosPolicerThresholdVariable.')
f3L3QosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13), )
if mibBuilder.loadTexts: f3L3QosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsTable.setDescription('A collection of L3 flow point Level QOS Shaper statistics.  \n             These reflect the current data.')
f3L3QosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"))
if mibBuilder.loadTexts: f3L3QosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsEntry.setDescription('A conceptual row in the f3L3QosShaperStatsTable.\n             Entries exist in this table for each QOS Shaper per L3 flow point.')
f3L3QosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3QosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3QosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsValid.setDescription('Indicates the validity of the bin.')
f3L3QosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3QosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsBT.setDescription('Bytes Transmitted.')
f3L3QosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
f3L3QosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsFD.setDescription('Frames Dequeued.')
f3L3QosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsFTD.setDescription('Frames Tail Dropped.')
f3L3QosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsBR.setDescription('Bytes Replicated.')
f3L3QosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsFR.setDescription('Frames Replicated.')
f3L3QosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3L3QosShaperStatsABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRLR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
f3L3QosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3L3QosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 13, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3L3QosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14), )
if mibBuilder.loadTexts: f3L3QosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryTable.setDescription('A collection of l3 flow point Level QOS Shaper statistics.\n             These reflect the history data.')
f3L3QosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"), (0, "F3-L3-MIB", "f3L3QosShaperHistoryIndex"))
if mibBuilder.loadTexts: f3L3QosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryEntry.setDescription('A conceptual row in the f3L3QosShaperHistoryTable.\n             Entries exist in this table for each Shaper per l3 flow point.')
f3L3QosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
f3L3QosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3QosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3QosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3QosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryBT.setDescription('Bytes Transmitted.')
f3L3QosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
f3L3QosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryFD.setDescription('Frames Dequeued.')
f3L3QosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
f3L3QosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryBR.setDescription('Bytes Replicated.')
f3L3QosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryFR.setDescription('Frames Replicated.')
f3L3QosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
f3L3QosShaperHistoryABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRLR.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
f3L3QosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
f3L3QosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 14, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
f3L3QosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15), )
if mibBuilder.loadTexts: f3L3QosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Shaper Thresholds.')
f3L3QosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3QosShaperIndex"), (0, "F3-L3-MIB", "f3L3QosShaperStatsIndex"), (0, "F3-L3-MIB", "f3L3QosShaperThresholdIndex"))
if mibBuilder.loadTexts: f3L3QosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdEntry.setDescription('A conceptual row in the f3L3QosShaperThresholdTable.')
f3L3QosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3QosShaperThresholdTable.')
f3L3QosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3QosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3QosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3QosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3QosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 15, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3QosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdMonValue.setDescription('Monitored value corresponding to f3L3QosShaperThresholdVariable.')
f3L2A2NAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16), )
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsTable.setDescription('A collection of L3 acl rule related statistics.  \n             These reflect the current data.')
f3L2A2NAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsEntry.setDescription('A conceptual row in the f3L2A2NAclRuleStatsTable.\n             Entries exist in this table for each Acl rule.')
f3L2A2NAclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L2A2NAclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L2A2NAclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsValid.setDescription('Indicates the validity of the bin.')
f3L2A2NAclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L2A2NAclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 16, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleStatsRuleMatch.setDescription('The number of packets matching the ACL rule.')
f3L2A2NAclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17), )
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTable.setDescription('A collection of L3 acl rule related history statistics.  \n             These reflect the history data.')
f3L2A2NAclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryEntry.setDescription('A conceptual row in the f3L2A2NAclRuleHistoryTable.\n             Entries exist in this table for each L3 acl rule.')
f3L2A2NAclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L2A2NAclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L2A2NAclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryValid.setDescription('Indicates the validity of the bin.')
f3L2A2NAclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L2A2NAclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 17, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleHistoryRuleMatch.setDescription('The number of packets matching acl rule.')
f3L2A2NAclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18), )
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdTable.setDescription('A table of entries that allow manageability of L3 acl rule Thresholds.')
f3L2A2NAclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdEntry.setDescription('A conceptual row in the f3L2A2NAclRuleThresholdTable.')
f3L2A2NAclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L2A2NAclRuleThresholdTable.')
f3L2A2NAclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L2A2NAclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L2A2NAclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L2A2NAclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L2A2NAclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 18, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdMonValue.setDescription('Monitored value corresponding to f3L2A2NAclRuleThresholdVariable.')
f3L2N2AAclRuleStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19), )
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsTable.setDescription('A collection of L3 acl rule related statistics.  \n             These reflect the current data.')
f3L2N2AAclRuleStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsEntry.setDescription('A conceptual row in the f3L2N2AAclRuleStatsTable.\n             Entries exist in this table for each Acl rule.')
f3L2N2AAclRuleStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L2N2AAclRuleStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L2N2AAclRuleStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsValid.setDescription('Indicates the validity of the bin.')
f3L2N2AAclRuleStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L2N2AAclRuleStatsRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 19, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleStatsRuleMatch.setDescription('The number of packets matching the ACL rule.')
f3L2N2AAclRuleHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20), )
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTable.setDescription('A collection of L3 acl rule related history statistics.  \n             These reflect the history data.')
f3L2N2AAclRuleHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleHistoryIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryEntry.setDescription('A conceptual row in the f3L2N2AAclRuleHistoryTable.\n             Entries exist in this table for each L3 acl rule.')
f3L2N2AAclRuleHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L2N2AAclRuleHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L2N2AAclRuleHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryValid.setDescription('Indicates the validity of the bin.')
f3L2N2AAclRuleHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L2N2AAclRuleHistoryRuleMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 20, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryRuleMatch.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleHistoryRuleMatch.setDescription('The number of packets matching acl rule.')
f3L2N2AAclRuleThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21), )
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdTable.setDescription('A table of entries that allow manageability of L3 acl rule Thresholds.')
f3L2N2AAclRuleThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), (0, "F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"))
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdEntry.setDescription('A conceptual row in the f3L2N2AAclRuleThresholdTable.')
f3L2N2AAclRuleThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L2N2AAclRuleThresholdTable.')
f3L2N2AAclRuleThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L2N2AAclRuleThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L2N2AAclRuleThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L2N2AAclRuleThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L2N2AAclRuleThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 21, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdMonValue.setDescription('Monitored value corresponding to f3L2N2AAclRuleThresholdVariable.')
f3L3TrafficIPv6InterfaceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsTable.setDescription('A collection of L3 traffic ipv6 interface related statistics.  \n             These reflect the current data.')
f3L3TrafficIPv6InterfaceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsEntry.setDescription('A conceptual row in the f3L3TrafficIPv6InterfaceStatsTable.\n             Entries exist in this table for each L3 traffic ipv6 interface.')
f3L3TrafficIPv6InterfaceStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 Traffic IPv6 interface statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3TrafficIPv6InterfaceStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3L3TrafficIPv6InterfaceStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsValid.setDescription('Indicates the validity of the bin.')
f3L3TrafficIPv6InterfaceStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsAction.setDescription('Allows the Manager to clear the bin.')
f3L3TrafficIPv6InterfaceStatsDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Tx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Tx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Rx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsDhcpV6Rx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSTx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNSRx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNATx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpNARx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRATx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRARx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSTx.setDescription('.')
f3L3TrafficIPv6InterfaceStatsNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 22, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceStatsNdpRSRx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTable.setDescription('A collection of L3 traffic ipv6 interface related statistics.  \n             These reflect the current data.')
f3L3TrafficIPv6InterfaceHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceHistoryIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryEntry.setDescription('A conceptual row in the f3L3TrafficIPv6InterfaceHistoryTable.\n             Entries exist in this table for each L3 traffic ipv6 interface.')
f3L3TrafficIPv6InterfaceHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 Traffic IPv6 interface statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3L3TrafficIPv6InterfaceHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryTime.setDescription('Indicates the time of history bin creation.')
f3L3TrafficIPv6InterfaceHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryValid.setDescription('Indicates the validity of the bin.')
f3L3TrafficIPv6InterfaceHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpNSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSTx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpNSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNSRx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpNATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNATx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpNARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpNARx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpRATx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRATx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRATx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpRARx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRARx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRARx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpRSTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSTx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSTx.setDescription('.')
f3L3TrafficIPv6InterfaceHistoryNdpRSRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 23, 1, 16), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSRx.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceHistoryNdpRSRx.setDescription('.')
f3L3TrafficIPv6InterfaceThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24), )
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdTable.setDescription('A table of entries that allow manageability of L3 traffic ipv6 interface Thresholds.')
f3L3TrafficIPv6InterfaceThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "f3L3FlowPointPortIndex"), (0, "F3-L3-MIB", "f3L3FlowPointIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceStatsIndex"), (0, "F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdIndex"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdEntry.setDescription('A conceptual row in the f3L3TrafficIPv6InterfaceThresholdTable.')
f3L3TrafficIPv6InterfaceThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3L3TrafficIPv6InterfaceThresholdTable.')
f3L3TrafficIPv6InterfaceThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3L3TrafficIPv6InterfaceThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3L3TrafficIPv6InterfaceThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3L3TrafficIPv6InterfaceThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3L3TrafficIPv6InterfaceThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 24, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdMonValue.setDescription('Monitored value corresponding to f3L3TrafficIPv6InterfaceThresholdVariable.')
cmL3FlowPointStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25), )
if mibBuilder.loadTexts: cmL3FlowPointStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsTable.setDescription('A collection of L3 Flow Point related statistics.  \n             These reflect the current data.')
cmL3FlowPointStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"))
if mibBuilder.loadTexts: cmL3FlowPointStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsEntry.setDescription('A conceptual row in the cmL3FlowPointStatsTable.\n             Entries exist in this table for each L3 flow point.')
cmL3FlowPointStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmL3FlowPointStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmL3FlowPointStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsValid.setDescription('Indicates the validity of the bin.')
cmL3FlowPointStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsAction.setDescription('Allows the Manager to clear the bin.')
cmL3FlowPointStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMG.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFMG.setDescription('The number of Frames Marked Green.')
cmL3FlowPointStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMY.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFMY.setDescription('The number of Frames Marked Yellow.')
cmL3FlowPointStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFMRD.setDescription('The number of Frames Marked Red and Discarded.')
cmL3FlowPointStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFTD.setDescription('The number of Frames Tail Dropped.')
cmL3FlowPointStatsFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFragmentedDropAcl.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFragmentedDropAcl.setDescription('The number of dropped fragmented packets.')
cmL3FlowPointStatsAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsAclRuleDrop.setDescription('The number of dropped packets due to ACL rule.')
cmL3FlowPointStatsTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsTtlEqual1Drop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsTtlEqual1Drop.setDescription(" the number of dropped packets due to ttl's value is 1.")
cmL3FlowPointStatsFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameTx.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameTx.setDescription('The number of total transmitted frames.')
cmL3FlowPointStatsFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameRx.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsFrameRx.setDescription(' The number of total received frames.')
cmL3FlowPointStatsNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsNoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsNoRouteDrop.setDescription(' The number of frames drop due to no route.')
cmL3FlowPointStatsAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 25, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointStatsAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointStatsAclDropNoMatch.setDescription('The number of dropped packets due to no match in ACL rule.')
cmL3FlowPointHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26), )
if mibBuilder.loadTexts: cmL3FlowPointHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryTable.setDescription('A collection of L3 Flow Point related statistics.  \n             These reflect the current data.')
cmL3FlowPointHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"), (0, "F3-L3-MIB", "cmL3FlowPointHistoryIndex"))
if mibBuilder.loadTexts: cmL3FlowPointHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryEntry.setDescription('A conceptual row in the cmL3FlowPointHistoryTable.\n             Entries exist in this table for each L3 flow point.')
cmL3FlowPointHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            the history bin.')
cmL3FlowPointHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryTime.setDescription('Indicates the time of history bin creation.')
cmL3FlowPointHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryValid.setDescription('Indicates the validity of the bin.')
cmL3FlowPointHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmL3FlowPointHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMG.setDescription('The number of Frames Marked Green.')
cmL3FlowPointHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMY.setDescription('The number of Frames Marked Yellow.')
cmL3FlowPointHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFMRD.setDescription('The number of Frames Marked Red and Discarded.')
cmL3FlowPointHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFTD.setDescription('The number of Frames Tail Dropped.')
cmL3FlowPointHistoryFragmentedDropAcl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFragmentedDropAcl.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFragmentedDropAcl.setDescription('The number of dropped fragmented packets.')
cmL3FlowPointHistoryAclRuleDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclRuleDrop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclRuleDrop.setDescription('The number of dropped packets due to ACL rule.')
cmL3FlowPointHistoryTtlEqual1Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryTtlEqual1Drop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryTtlEqual1Drop.setDescription(" the number of dropped packets due to ttl's value is 1.")
cmL3FlowPointHistoryFrameTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameTx.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameTx.setDescription('The number of total transmitted frames.')
cmL3FlowPointHistoryFrameRx = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameRx.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryFrameRx.setDescription(' the number of total recieved frames.')
cmL3FlowPointHistoryNoRouteDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryNoRouteDrop.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryNoRouteDrop.setDescription(' the number of frames dropped due to no route.')
cmL3FlowPointHistoryAclDropNoMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 26, 1, 15), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclDropNoMatch.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointHistoryAclDropNoMatch.setDescription('The number of dropped packets due to no match in ACL rule.')
cmL3FlowPointThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27), )
if mibBuilder.loadTexts: cmL3FlowPointThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdTable.setDescription('A table of entries that allow manageability of L3 Flow Point Thresholds.')
cmL3FlowPointThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3FlowPointStatsIndex"), (0, "F3-L3-MIB", "cmL3FlowPointThresholdIndex"))
if mibBuilder.loadTexts: cmL3FlowPointThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdEntry.setDescription('A conceptual row in the cmL3FlowPointThresholdTable.')
cmL3FlowPointThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmL3FlowPointThresholdTable.')
cmL3FlowPointThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmL3FlowPointThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmL3FlowPointThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmL3FlowPointThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmL3FlowPointThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 27, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3FlowPointThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdMonValue.setDescription('Monitored value corresponding to cmL3FlowPointThresholdVariable.')
cmL3QosPolicerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28), )
if mibBuilder.loadTexts: cmL3QosPolicerStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmL3QosPolicerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsEntry.setDescription('A conceptual row in the cmL3QosPolicerStatsTable.\n             Entries exist in this table for each l3 flow point policer.')
cmL3QosPolicerStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsIndex.setDescription('An integer index value used to uniquely identify\n            this QOS Policer statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmL3QosPolicerStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmL3QosPolicerStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsValid.setDescription('Indicates the validity of the bin.')
cmL3QosPolicerStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsAction.setDescription('Allows the Manager to clear the bin.')
cmL3QosPolicerStatsFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMG.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMG.setDescription('Frames Marked Green.')
cmL3QosPolicerStatsFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMY.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMY.setDescription('Frames Marked Yellow.')
cmL3QosPolicerStatsFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmL3QosPolicerStatsFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMRD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsFMRD.setDescription('Frames Marked Red and Discarded.')
cmL3QosPolicerStatsBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesIn.setDescription('Number of bytes received by the Policer.')
cmL3QosPolicerStatsBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmL3QosPolicerStatsABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 28, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerStatsABR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerStatsABR.setDescription('Average Bit Rate  on the Policer.')
cmL3QosPolicerHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29), )
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTable.setDescription('A collection of QOS Policer statistics.  \n             These reflect the current data.')
cmL3QosPolicerHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerHistoryIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryEntry.setDescription('A conceptual row in the cmL3QosPolicerHistoryTable.\n             Entries exist in this table for each flow point policer.')
cmL3QosPolicerHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Policer history entry.')
cmL3QosPolicerHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryTime.setDescription('Indicates the time of history bin creation.')
cmL3QosPolicerHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryValid.setDescription('Indicates the validity of the bin.')
cmL3QosPolicerHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmL3QosPolicerHistoryFMG = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMG.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMG.setDescription('Frames Marked Green.')
cmL3QosPolicerHistoryFMY = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMY.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMY.setDescription('Frames Marked Yellow.')
cmL3QosPolicerHistoryFMYD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMYD.setStatus('deprecated')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMYD.setDescription('Frames Marked Yellow and Dropped.')
cmL3QosPolicerHistoryFMRD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMRD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryFMRD.setDescription('Frames Marked Red and Discarded.')
cmL3QosPolicerHistoryBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesIn.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesIn.setDescription('Number of bytes received by the Policer.')
cmL3QosPolicerHistoryBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesOut.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryBytesOut.setDescription('Number of bytes transmitted by the Policer.')
cmL3QosPolicerHistoryABR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 29, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerHistoryABR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerHistoryABR.setDescription('Average Bit Rate  on the Policer.')
cmL3QosPolicerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30), )
if mibBuilder.loadTexts: cmL3QosPolicerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Policer Thresholds.')
cmL3QosPolicerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerStatsIndex"), (0, "F3-L3-MIB", "cmL3QosPolicerThresholdIndex"))
if mibBuilder.loadTexts: cmL3QosPolicerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdEntry.setDescription('A conceptual row in the cmL3QosPolicerThresholdTable.')
cmL3QosPolicerThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmL3QosPolicerThresholdTable.')
cmL3QosPolicerThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmL3QosPolicerThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmL3QosPolicerThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmL3QosPolicerThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmL3QosPolicerThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 30, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosPolicerThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdMonValue.setDescription('Monitored value corresponding to cmL3QosPolicerThresholdVariable.')
cmL3QosShaperStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31), )
if mibBuilder.loadTexts: cmL3QosShaperStatsTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsTable.setDescription('A collection of L3 flow point Level QOS Shaper statistics.  \n             These reflect the current data.')
cmL3QosShaperStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"))
if mibBuilder.loadTexts: cmL3QosShaperStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsEntry.setDescription('A conceptual row in the cmL3QosShaperStatsTable.\n             Entries exist in this table for each QOS Shaper per L3 flow point.')
cmL3QosShaperStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.\n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
cmL3QosShaperStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
cmL3QosShaperStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsValid.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsValid.setDescription('Indicates the validity of the bin.')
cmL3QosShaperStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperStatsAction.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsAction.setDescription('Allows the Manager to clear the bin.')
cmL3QosShaperStatsBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBT.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsBT.setDescription('Bytes Transmitted.')
cmL3QosShaperStatsBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBTD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsBTD.setDescription('Bytes Tail Dropped.')
cmL3QosShaperStatsFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsFD.setDescription('Frames Dequeued.')
cmL3QosShaperStatsFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFTD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsFTD.setDescription('Frames Tail Dropped.')
cmL3QosShaperStatsBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsBR.setDescription('Bytes Replicated.')
cmL3QosShaperStatsFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsFR.setDescription('Frames Replicated.')
cmL3QosShaperStatsABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRL.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmL3QosShaperStatsABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRLR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
cmL3QosShaperStatsBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsBREDD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmL3QosShaperStatsFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 31, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperStatsFREDD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperStatsFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmL3QosShaperHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32), )
if mibBuilder.loadTexts: cmL3QosShaperHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryTable.setDescription('A collection of l3 flow point Level QOS Shaper statistics.\n             These reflect the history data.')
cmL3QosShaperHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"), (0, "F3-L3-MIB", "cmL3QosShaperHistoryIndex"))
if mibBuilder.loadTexts: cmL3QosShaperHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryEntry.setDescription('A conceptual row in the cmL3QosShaperHistoryTable.\n             Entries exist in this table for each Shaper per l3 flow point.')
cmL3QosShaperHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this QOS Shaper statistics entry.')
cmL3QosShaperHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryTime.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryTime.setDescription('Indicates the time of history bin creation.')
cmL3QosShaperHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryValid.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryValid.setDescription('Indicates the validity of the bin.')
cmL3QosShaperHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperHistoryAction.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryAction.setDescription('Allows the Manager to clear the bin.')
cmL3QosShaperHistoryBT = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBT.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryBT.setDescription('Bytes Transmitted.')
cmL3QosShaperHistoryBTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 6), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBTD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryBTD.setDescription('Bytes Tail Dropped.')
cmL3QosShaperHistoryFD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 7), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryFD.setDescription('Frames Dequeued.')
cmL3QosShaperHistoryFTD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 8), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFTD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryFTD.setDescription('Frames Tail Dropped.')
cmL3QosShaperHistoryBR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 9), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryBR.setDescription('Bytes Replicated.')
cmL3QosShaperHistoryFR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 10), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryFR.setDescription('Frames Replicated.')
cmL3QosShaperHistoryABRRL = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 11), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRL.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRL.setDescription('Average Bit Rate - Rate Limited.')
cmL3QosShaperHistoryABRRLR = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 12), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRLR.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryABRRLR.setDescription('Average Bit Rate - Rate Limited, Replicated.')
cmL3QosShaperHistoryBREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 13), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryBREDD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryBREDD.setDescription('Bytes Random Early Discard, Dropped.')
cmL3QosShaperHistoryFREDD = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 32, 1, 14), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperHistoryFREDD.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperHistoryFREDD.setDescription('Frames Random Early Discard, Dropped.')
cmL3QosShaperThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33), )
if mibBuilder.loadTexts: cmL3QosShaperThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdTable.setDescription('A table of entries that allow manageability of QOS\n             Shaper Thresholds.')
cmL3QosShaperThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "CM-ENTITY-MIB", "shelfIndex"), (0, "CM-ENTITY-MIB", "slotIndex"), (0, "F3-L3-MIB", "cmL3FlowPointPortIndex"), (0, "F3-L3-MIB", "cmL3FlowPointIndex"), (0, "F3-L3-MIB", "cmL3QosShaperIndex"), (0, "F3-L3-MIB", "cmL3QosShaperStatsIndex"), (0, "F3-L3-MIB", "cmL3QosShaperThresholdIndex"))
if mibBuilder.loadTexts: cmL3QosShaperThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdEntry.setDescription('A conceptual row in the cmL3QosShaperThresholdTable.')
cmL3QosShaperThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        cmL3QosShaperThresholdTable.')
cmL3QosShaperThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
cmL3QosShaperThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
cmL3QosShaperThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
cmL3QosShaperThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
cmL3QosShaperThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 2, 33, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cmL3QosShaperThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdMonValue.setDescription('Monitored value corresponding to cmL3QosShaperThresholdVariable.')
f3L3FlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 1)).setObjects(("F3-L3-MIB", "f3L3FlowPointThresholdIndex"), ("F3-L3-MIB", "f3L3FlowPointThresholdInterval"), ("F3-L3-MIB", "f3L3FlowPointThresholdVariable"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueLo"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueHi"), ("F3-L3-MIB", "f3L3FlowPointThresholdMonValue"))
if mibBuilder.loadTexts: f3L3FlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3FlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 flow point is crossed.')
f3L3QosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 2)).setObjects(("F3-L3-MIB", "f3L3QosPolicerThresholdIndex"), ("F3-L3-MIB", "f3L3QosPolicerThresholdInterval"), ("F3-L3-MIB", "f3L3QosPolicerThresholdVariable"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "f3L3QosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: f3L3QosPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3QosPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 Qos Policer is crossed.')
f3L3QosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 3)).setObjects(("F3-L3-MIB", "f3L3QosShaperThresholdIndex"), ("F3-L3-MIB", "f3L3QosShaperThresholdInterval"), ("F3-L3-MIB", "f3L3QosShaperThresholdVariable"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueLo"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueHi"), ("F3-L3-MIB", "f3L3QosShaperThresholdMonValue"))
if mibBuilder.loadTexts: f3L3QosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3QosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 Qos Shaper is crossed.')
f3L3TrafficIpInterfaceThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 4)).setObjects(("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdMonValue"))
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIpInterfaceThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 traffic ip interface is crossed.')
f3L3AclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 5)).setObjects(("F3-L3-MIB", "f3L3AclRuleThresholdIndex"), ("F3-L3-MIB", "f3L3AclRuleThresholdInterval"), ("F3-L3-MIB", "f3L3AclRuleThresholdVariable"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L3AclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L3AclRuleThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3AclRuleThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 acl rule is crossed.')
f3L2A2NAclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 6)).setObjects(("F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L2A2NAclRuleThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L2 A2N acl rule is crossed.')
f3L2N2AAclRuleThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 7)).setObjects(("F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdMonValue"))
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L2N2AAclRuleThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L2 N2A acl rule is crossed.')
f3L3TrafficIPv6InterfaceThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 3, 8)).setObjects(("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIPv6InterfaceThresholdMonValue"))
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6InterfaceThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 traffic ipv6 interface is crossed.')
cmL3FlowPointThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 9)).setObjects(("F3-L3-MIB", "cmL3FlowPointThresholdIndex"), ("F3-L3-MIB", "cmL3FlowPointThresholdInterval"), ("F3-L3-MIB", "cmL3FlowPointThresholdVariable"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueLo"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueHi"), ("F3-L3-MIB", "cmL3FlowPointThresholdMonValue"))
if mibBuilder.loadTexts: cmL3FlowPointThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmL3FlowPointThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 flow point is crossed.')
cmL3QosPolicerThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 10)).setObjects(("F3-L3-MIB", "cmL3QosPolicerThresholdIndex"), ("F3-L3-MIB", "cmL3QosPolicerThresholdInterval"), ("F3-L3-MIB", "cmL3QosPolicerThresholdVariable"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "cmL3QosPolicerThresholdMonValue"))
if mibBuilder.loadTexts: cmL3QosPolicerThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmL3QosPolicerThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 Qos Policer is crossed.')
cmL3QosShaperThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 5, 11)).setObjects(("F3-L3-MIB", "cmL3QosShaperThresholdIndex"), ("F3-L3-MIB", "cmL3QosShaperThresholdInterval"), ("F3-L3-MIB", "cmL3QosShaperThresholdVariable"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueLo"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueHi"), ("F3-L3-MIB", "cmL3QosShaperThresholdMonValue"))
if mibBuilder.loadTexts: cmL3QosShaperThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: cmL3QosShaperThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an L3 Qos Shaper is crossed.')
f3L3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 1))
f3L3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2))
f3L3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 1, 1)).setObjects(("F3-L3-MIB", "f3L3ObjectsGroup"), ("F3-L3-MIB", "f3L3PerfGroup"), ("F3-L3-MIB", "f3L3TrafficOspfGroup"), ("F3-L3-MIB", "f3L3TrafficIPv6Group"), ("F3-L3-MIB", "f3L3TrafficBgpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3Compliance = f3L3Compliance.setStatus('current')
if mibBuilder.loadTexts: f3L3Compliance.setDescription('Describes the requirements for conformance to the L3.')
f3L3ObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 1))
for _f3L3ObjectsGroup_obj in [[("F3-L3-MIB", "f3DhcpRelayAgentIndex"), ("F3-L3-MIB", "f3DhcpRelayAgentAlias"), ("F3-L3-MIB", "f3DhcpRelayAgentAdminState"), ("F3-L3-MIB", "f3DhcpRelayAgentSecondaryState"), ("F3-L3-MIB", "f3DhcpRelayAgentOperationalState"), ("F3-L3-MIB", "f3DhcpRelayAgentIpVersion"), ("F3-L3-MIB", "f3DhcpRelayAgentServerIpAddress"), ("F3-L3-MIB", "f3DhcpRelayAgentOp82SubOp9ControlEnabled"), ("F3-L3-MIB", "f3DhcpRelayAgentOp82SubOp9Value"), ("F3-L3-MIB", "f3DhcpRelayAgentStorageType"), ("F3-L3-MIB", "f3DhcpRelayAgentRowStatus"), ("F3-L3-MIB", "f3VrfIndex"), ("F3-L3-MIB", "f3VrfAlias"), ("F3-L3-MIB", "f3VrfAdminState"), ("F3-L3-MIB", "f3VrfSecondaryState"), ("F3-L3-MIB", "f3VrfTraceRouteIpv4Destination"), ("F3-L3-MIB", "f3VrfOperationalState"), ("F3-L3-MIB", "f3VrfAccIsolationControlEnabled"), ("F3-L3-MIB", "f3VrfPingResult"), ("F3-L3-MIB", "f3VrfPingIpv4Destination"), ("F3-L3-MIB", "f3VrfTraceRouteResult"), ("F3-L3-MIB", "f3VrfAction"), ("F3-L3-MIB", "f3VrfStorageType"), ("F3-L3-MIB", "f3VrfTransportType"), ("F3-L3-MIB", "f3VrfRowStatus"), ("F3-L3-MIB", "f3VrfDhcpRoutesControl"), ("F3-L3-MIB", "f3VrfActionX"), ("F3-L3-MIB", "f3VrfActionIfName"), ("F3-L3-MIB", "f3VrfIpVersion"), ("F3-L3-MIB", "f3VrfPingIpv6Destination"), ("F3-L3-MIB", "f3VrfTraceRouteIpv6Destination"), ("F3-L3-MIB", "f3L3FlowPointPortTypeIndex"), ("F3-L3-MIB", "f3L3FlowPointPortIndex"), ("F3-L3-MIB", "f3L3FlowPointIndex"), ("F3-L3-MIB", "f3L3FlowPointAlias"), ("F3-L3-MIB", "f3L3FlowPointAdminState"), ("F3-L3-MIB", "f3L3FlowPointSecondaryState"), ("F3-L3-MIB", "f3L3FlowPointOperationalState"), ("F3-L3-MIB", "f3L3FlowPointMultiCOSEnabled"), ("F3-L3-MIB", "f3L3FlowPointCOS"), ("F3-L3-MIB", "f3L3FlowPointUntaggedMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointOuterTagMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointOuterTagMemberShipVlanId"), ("F3-L3-MIB", "f3L3FlowPointInnerTagMemberShipEnabled"), ("F3-L3-MIB", "f3L3FlowPointInnerTagMemberShipVlanId"), ("F3-L3-MIB", "f3L3FlowPointFragmentedPktsFwdEnabled"), ("F3-L3-MIB", "f3L3FlowPointHCosMgmtEnabled"), ("F3-L3-MIB", "f3L3FlowPointHCosGuaranteedBwHi"), ("F3-L3-MIB", "f3L3FlowPointHCosGuaranteedBwLo"), ("F3-L3-MIB", "f3L3FlowPointHCosMaximumBwHi"), ("F3-L3-MIB", "f3L3FlowPointHCosMaximumBwLo"), ("F3-L3-MIB", "f3L3FlowPointPolicingEnabled"), ("F3-L3-MIB", "f3L3FlowPointStorageType"), ("F3-L3-MIB", "f3L3FlowPointRowStatus"), ("F3-L3-MIB", "f3L3FlowPointDscpOverwriteControl"), ("F3-L3-MIB", "f3L3FlowPointPriMapProfile"), ("F3-L3-MIB", "f3L3FlowPointRefConnectGuardFlow"), ("F3-L3-MIB", "f3L3FlowPointSecureState"), ("F3-L3-MIB", "f3L3FlowPointSecureBlockingEnabled"), ("F3-L3-MIB", "f3L3FlowPointWfqSegmentationCOS"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupCOS"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupEirLo"), ("F3-L3-MIB", "f3L3FlowPointWfqGroupEirHi"), ("F3-L3-MIB", "f3L3FlowPointOuterVlanEthertype"), ("F3-L3-MIB", "f3L3FlowPointInnerVlanEthertype"), ("F3-L3-MIB", "f3L3FlowPointIpVersion"), ("F3-L3-MIB", "f3L3AclRuleParentIndex"), ("F3-L3-MIB", "f3L3AclRuleIndex"), ("F3-L3-MIB", "f3L3AclRuleAlias"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L3AclRuleProtocolControl"), ("F3-L3-MIB", "f3L3AclRuleProtocolNumber"), ("F3-L3-MIB", "f3L3AclRuleSrcPortControl"), ("F3-L3-MIB", "f3L3AclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L3AclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L3AclRuleDstPortControl"), ("F3-L3-MIB", "f3L3AclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L3AclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L3AclRulePriority"), ("F3-L3-MIB", "f3L3AclRuleCOS"), ("F3-L3-MIB", "f3L3AclRuleOperation"), ("F3-L3-MIB", "f3L3AclRuleSummary"), ("F3-L3-MIB", "f3L3AclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L3AclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddress"), ("F3-L3-MIB", "f3L3AclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L3AclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L3AclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L3AclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L3AclRuleEtherType"), ("F3-L3-MIB", "f3L3AclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L3AclRuleTcpFlags"), ("F3-L3-MIB", "f3L3AclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L3AclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L3AclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L3AclRuleStorageType"), ("F3-L3-MIB", "f3L3AclRuleRowStatus"), ("F3-L3-MIB", "f3L3AclRuleAdminState"), ("F3-L3-MIB", "f3L3AclRuleActive"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L3AclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6AddressControl"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L3AclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3AclRulePriorityControl"), ("F3-L3-MIB", "f3L3AclRulePriorityLowLimit"), ("F3-L3-MIB", "f3L3AclRulePriorityHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleParentIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleAlias"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleProtocolControl"), ("F3-L3-MIB", "f3L2A2NAclRuleProtocolNumber"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRulePriority"), ("F3-L3-MIB", "f3L2A2NAclRuleCOS"), ("F3-L3-MIB", "f3L2A2NAclRuleOperation"), ("F3-L3-MIB", "f3L2A2NAclRuleSummary"), ("F3-L3-MIB", "f3L2A2NAclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddress"), ("F3-L3-MIB", "f3L2A2NAclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L2A2NAclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L2A2NAclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L2A2NAclRuleEtherType"), ("F3-L3-MIB", "f3L2A2NAclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L2A2NAclRuleTcpFlags"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L2A2NAclRuleStorageType"), ("F3-L3-MIB", "f3L2A2NAclRuleRowStatus"), ("F3-L3-MIB", "f3L2A2NAclRuleAdminState"), ("F3-L3-MIB", "f3L2A2NAclRuleActive"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L2A2NAclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6AddressControl"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L2A2NAclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2A2NAclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L2A2NAclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L2N2AAclRuleParentIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleAlias"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDynamicSrcIpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityControl"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleProtocolControl"), ("F3-L3-MIB", "f3L2N2AAclRuleProtocolNumber"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcPortHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstPortHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRulePriority"), ("F3-L3-MIB", "f3L2N2AAclRuleCOS"), ("F3-L3-MIB", "f3L2N2AAclRuleOperation"), ("F3-L3-MIB", "f3L2N2AAclRuleSummary"), ("F3-L3-MIB", "f3L2N2AAclRuleCosOverrideControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDynamicSrcMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddress"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcMacAddressMask"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddress"), ("F3-L3-MIB", "f3L2N2AAclRuleDstMacAddressMask"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDControl"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanVIDHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpControl"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpLowLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleInnerVlanPcpHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanDeiControl"), ("F3-L3-MIB", "f3L2N2AAclRuleOuterVlanDei"), ("F3-L3-MIB", "f3L2N2AAclRuleEtherTypeControl"), ("F3-L3-MIB", "f3L2N2AAclRuleEtherType"), ("F3-L3-MIB", "f3L2N2AAclRuleTcpFlagsControl"), ("F3-L3-MIB", "f3L2N2AAclRuleTcpFlags"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpv4AddressHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleIpv4PriorityHighLimit"), ("F3-L3-MIB", "f3L2N2AAclRuleStorageType"), ("F3-L3-MIB", "f3L2N2AAclRuleRowStatus"), ("F3-L3-MIB", "f3L2N2AAclRuleAdminState"), ("F3-L3-MIB", "f3L2N2AAclRuleActive"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6AddressControl"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6Address"), ("F3-L3-MIB", "f3L2N2AAclRuleSrcIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6AddressControl")], [("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6Address"), ("F3-L3-MIB", "f3L2N2AAclRuleDstIpV6AddressPrefixLen"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabelControl"), ("F3-L3-MIB", "f3L3AclRuleIpV6FlowLabel"), ("F3-L3-MIB", "f3L3QosPolicerIndex"), ("F3-L3-MIB", "f3L3QosPolicerAdminState"), ("F3-L3-MIB", "f3L3QosPolicerOperationalState"), ("F3-L3-MIB", "f3L3QosPolicerSecondaryState"), ("F3-L3-MIB", "f3L3QosPolicerCIRLo"), ("F3-L3-MIB", "f3L3QosPolicerCIRHi"), ("F3-L3-MIB", "f3L3QosPolicerEIRLo"), ("F3-L3-MIB", "f3L3QosPolicerEIRHi"), ("F3-L3-MIB", "f3L3QosPolicerCBS"), ("F3-L3-MIB", "f3L3QosPolicerEBS"), ("F3-L3-MIB", "f3L3QosPolicerAlgorithm"), ("F3-L3-MIB", "f3L3QosPolicerColorMode"), ("F3-L3-MIB", "f3L3QosPolicerCouplingFlag"), ("F3-L3-MIB", "f3L3QosPolicerStorageType"), ("F3-L3-MIB", "f3L3QosPolicerRowStatus"), ("F3-L3-MIB", "f3L3QosPolicerCIRMaxHi"), ("F3-L3-MIB", "f3L3QosPolicerCIRMaxLo"), ("F3-L3-MIB", "f3L3QosPolicerEIRMaxHi"), ("F3-L3-MIB", "f3L3QosPolicerEIRMaxLo"), ("F3-L3-MIB", "f3L3QosPolicerEnvelopeObject"), ("F3-L3-MIB", "f3L3QosPolicerRank"), ("F3-L3-MIB", "f3L3QosPolicerPolicingEnabled"), ("F3-L3-MIB", "f3L3QosShaperIndex"), ("F3-L3-MIB", "f3L3QosShaperAdminState"), ("F3-L3-MIB", "f3L3QosShaperOperationalState"), ("F3-L3-MIB", "f3L3QosShaperSecondaryState"), ("F3-L3-MIB", "f3L3QosShaperCIRLo"), ("F3-L3-MIB", "f3L3QosShaperCIRHi"), ("F3-L3-MIB", "f3L3QosShaperEIRLo"), ("F3-L3-MIB", "f3L3QosShaperEIRHi"), ("F3-L3-MIB", "f3L3QosShaperBufferSize"), ("F3-L3-MIB", "f3L3QosShaperCOS"), ("F3-L3-MIB", "f3L3QosShaperWredGreenMinQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredGreenMaxQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredGreenDropProbability"), ("F3-L3-MIB", "f3L3QosShaperWredYellowMinQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredYellowMaxQueueThreshold"), ("F3-L3-MIB", "f3L3QosShaperWredYellowDropProbability"), ("F3-L3-MIB", "f3L3QosShaperStorageType"), ("F3-L3-MIB", "f3L3QosShaperRowStatus"), ("F3-L3-MIB", "f3L3QosShaperWfqWeight"), ("F3-L3-MIB", "f3L3TrafficIPIfIndex"), ("F3-L3-MIB", "f3L3TrafficIPIfName"), ("F3-L3-MIB", "f3L3TrafficIPIfAdminState"), ("F3-L3-MIB", "f3L3TrafficIPIfSecondaryState"), ("F3-L3-MIB", "f3L3TrafficIPIfOperationalState"), ("F3-L3-MIB", "f3L3TrafficIPIfProxyArpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfIpAddressSourceType"), ("F3-L3-MIB", "f3L3TrafficIPIfMgmtUseEnable"), ("F3-L3-MIB", "f3L3TrafficIPIfIpAddress"), ("F3-L3-MIB", "f3L3TrafficIPIfMask"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInterfaceSide"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayUserClassOpt77"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayUserClassOpt77Control"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRole"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientIdEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientId"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClassIdEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostNameEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostName"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpClientIdType"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpHostNameType"), ("F3-L3-MIB", "f3L3TrafficIPIfStorageType"), ("F3-L3-MIB", "f3L3TrafficIPIfRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPIfAction"), ("F3-L3-MIB", "f3L3TrafficIPIfActionX"), ("F3-L3-MIB", "f3L3TrafficIPIfUnnumberedControl"), ("F3-L3-MIB", "f3L3TrafficIPIfBorrowedIntf"), ("F3-L3-MIB", "f3L3TrafficIPIfIpMode"), ("F3-L3-MIB", "f3L3TrafficIPIfType"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6LinkLocalAddr"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6LinkLocalAddrMode"), ("F3-L3-MIB", "f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDefaultGateway"), ("F3-L3-MIB", "f3L3TrafficIPIfIcmpErrorMsgRateLimit"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpv6Role"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpv6Enabled"), ("F3-L3-MIB", "f3L3TrafficIPIfDhcpRapidCommitControlEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfMaxRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfMinRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfRouterLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPIfReachableTime"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDhcpMoreConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaManagedAddressConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaRDNSSOptionEnabled"), ("F3-L3-MIB", "f3L3TrafficIPIfRaRDNSSLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDNSSList"), ("F3-L3-MIB", "f3L3TrafficIPIfRaDefaultRouterPreference"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectControl"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectTransmits"), ("F3-L3-MIB", "f3L3TrafficIPIfDupAddrDetectRetransTimer"), ("F3-L3-MIB", "f3L3TrafficIPIfMTU"), ("F3-L3-MIB", "f3VrfActionIfName"), ("F3-L3-MIB", "f3VrfIpVersion"), ("F3-L3-MIB", "f3VrfPingIpv6Destination"), ("F3-L3-MIB", "f3VrfTraceRouteIpv6Destination"), ("F3-L3-MIB", "f3VrfMaxFwdTableEntries"), ("F3-L3-MIB", "f3VrfFwdTableFull"), ("F3-L3-MIB", "f3VrfEcmpDistribution"), ("F3-L3-MIB", "f3VrfEcmpStaticRoutesMaximumPaths"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3DhcpRelayAgentTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3VrfTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteAdvertise"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatusX"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteFlags"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteType"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteStatusX"), ("F3-L3-MIB", "f3L3TrafficIpv4RouteOrigin"), ("F3-L3-MIB", "f3L3TrafficArpIPAddress"), ("F3-L3-MIB", "f3L3TrafficArpMacAddress"), ("F3-L3-MIB", "f3L3TrafficArpInterface"), ("F3-L3-MIB", "f3L3TrafficArpEntryType"), ("F3-L3-MIB", "f3L3TrafficArpStorageType"), ("F3-L3-MIB", "f3L3TrafficArpRowStatus"), ("F3-L3-MIB", "cmL3FlowPointPortIndex"), ("F3-L3-MIB", "cmL3FlowPointIndex"), ("F3-L3-MIB", "cmL3FlowPointAlias"), ("F3-L3-MIB", "cmL3FlowPointAdminState"), ("F3-L3-MIB", "cmL3FlowPointSecondaryState"), ("F3-L3-MIB", "cmL3FlowPointOperationalState"), ("F3-L3-MIB", "cmL3FlowPointMultiCOSEnabled"), ("F3-L3-MIB", "cmL3FlowPointCOS"), ("F3-L3-MIB", "cmL3FlowPointUntaggedMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointOuterTagMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointOuterTagMemberShipVlanId"), ("F3-L3-MIB", "cmL3FlowPointInnerTagMemberShipEnabled"), ("F3-L3-MIB", "cmL3FlowPointInnerTagMemberShipVlanId"), ("F3-L3-MIB", "cmL3FlowPointFragmentedPktsFwdEnabled"), ("F3-L3-MIB", "cmL3FlowPointHCosMgmtEnabled"), ("F3-L3-MIB", "cmL3FlowPointHCosGuaranteedBwHi"), ("F3-L3-MIB", "cmL3FlowPointHCosGuaranteedBwLo"), ("F3-L3-MIB", "cmL3FlowPointHCosMaximumBwHi"), ("F3-L3-MIB", "cmL3FlowPointHCosMaximumBwLo"), ("F3-L3-MIB", "cmL3FlowPointDscpOverwriteControl"), ("F3-L3-MIB", "cmL3FlowPointPriMapProfile"), ("F3-L3-MIB", "cmL3FlowPointStorageType"), ("F3-L3-MIB", "cmL3FlowPointRowStatus"), ("F3-L3-MIB", "cmL3FlowPointAclNoMatchDisposition"), ("F3-L3-MIB", "cmL3FlowPointWfqSegmentationCOS"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupCOS"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupEirLo"), ("F3-L3-MIB", "cmL3FlowPointWfqGroupEirHi"), ("F3-L3-MIB", "cmL3FlowPointEgressShapingType"), ("F3-L3-MIB", "cmL3QosPolicerIndex"), ("F3-L3-MIB", "cmL3QosPolicerAdminState"), ("F3-L3-MIB", "cmL3QosPolicerOperationalState"), ("F3-L3-MIB", "cmL3QosPolicerSecondaryState"), ("F3-L3-MIB", "cmL3QosPolicerCIRLo"), ("F3-L3-MIB", "cmL3QosPolicerCIRHi"), ("F3-L3-MIB", "cmL3QosPolicerEIRLo"), ("F3-L3-MIB", "cmL3QosPolicerEIRHi"), ("F3-L3-MIB", "cmL3QosPolicerCBS"), ("F3-L3-MIB", "cmL3QosPolicerEBS"), ("F3-L3-MIB", "cmL3QosPolicerAlgorithm"), ("F3-L3-MIB", "cmL3QosPolicerColorMode"), ("F3-L3-MIB", "cmL3QosPolicerCouplingFlag"), ("F3-L3-MIB", "cmL3QosPolicerCIRMaxHi"), ("F3-L3-MIB", "cmL3QosPolicerCIRMaxLo"), ("F3-L3-MIB", "cmL3QosPolicerEIRMaxHi"), ("F3-L3-MIB", "cmL3QosPolicerEIRMaxLo"), ("F3-L3-MIB", "cmL3QosPolicerEnvelopeObject"), ("F3-L3-MIB", "cmL3QosPolicerRank"), ("F3-L3-MIB", "cmL3QosPolicerPolicingEnabled"), ("F3-L3-MIB", "cmL3QosPolicerStorageType"), ("F3-L3-MIB", "cmL3QosPolicerRowStatus"), ("F3-L3-MIB", "cmL3QosShaperIndex"), ("F3-L3-MIB", "cmL3QosShaperAdminState"), ("F3-L3-MIB", "cmL3QosShaperOperationalState"), ("F3-L3-MIB", "cmL3QosShaperSecondaryState"), ("F3-L3-MIB", "cmL3QosShaperCIRLo"), ("F3-L3-MIB", "cmL3QosShaperCIRHi"), ("F3-L3-MIB", "cmL3QosShaperEIRLo"), ("F3-L3-MIB", "cmL3QosShaperEIRHi"), ("F3-L3-MIB", "cmL3QosShaperBufferSize"), ("F3-L3-MIB", "cmL3QosShaperCOS"), ("F3-L3-MIB", "cmL3QosShaperStorageType"), ("F3-L3-MIB", "cmL3QosShaperRowStatus"), ("F3-L3-MIB", "cmL3QosShaperWfqWeight"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4StaticRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteMask"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteSourceForwardingEnable"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteAdminDistance"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv4AllRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6StaticRouteRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteAdminDistance"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6AllRouteRowStatus"), ("F3-L3-MIB", "f3IpPrefixListIndex"), ("F3-L3-MIB", "f3IpPrefixListName"), ("F3-L3-MIB", "f3IpPrefixListDefaultDisposition"), ("F3-L3-MIB", "f3IpPrefixListStorageType"), ("F3-L3-MIB", "f3IpPrefixListRowStatus"), ("F3-L3-MIB", "f3IpPrefixIndex"), ("F3-L3-MIB", "f3IpPrefix"), ("F3-L3-MIB", "f3IpPrefixPriority"), ("F3-L3-MIB", "f3IpPrefixDisposition"), ("F3-L3-MIB", "f3IpPrefixLessOrEqualPrefixLen"), ("F3-L3-MIB", "f3IpPrefixGreaterOrEqualPrefixLen"), ("F3-L3-MIB", "f3IpPrefixStorageType"), ("F3-L3-MIB", "f3IpPrefixRowStatus")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3L3ObjectsGroup = f3L3ObjectsGroup.setObjects(*_f3L3ObjectsGroup_obj)
    else:
        f3L3ObjectsGroup = f3L3ObjectsGroup.setObjects(*_f3L3ObjectsGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3ObjectsGroup = f3L3ObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: f3L3ObjectsGroup.setDescription('A collection of objects used to manage the L3 functionality.')
f3L3PerfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 2))
for _f3L3PerfGroup_obj in [[("F3-L3-MIB", "f3L3FlowPointStatsIndex"), ("F3-L3-MIB", "f3L3FlowPointStatsIntervalType"), ("F3-L3-MIB", "f3L3FlowPointStatsValid"), ("F3-L3-MIB", "f3L3FlowPointStatsAction"), ("F3-L3-MIB", "f3L3FlowPointStatsFMG"), ("F3-L3-MIB", "f3L3FlowPointStatsFMY"), ("F3-L3-MIB", "f3L3FlowPointStatsFMRD"), ("F3-L3-MIB", "f3L3FlowPointStatsFTD"), ("F3-L3-MIB", "f3L3FlowPointStatsFragmentedDropAcl"), ("F3-L3-MIB", "f3L3FlowPointStatsAclRuleDrop"), ("F3-L3-MIB", "f3L3FlowPointStatsTtlEqual1Drop"), ("F3-L3-MIB", "f3L3FlowPointStatsFrameTx"), ("F3-L3-MIB", "f3L3FlowPointStatsFrameRx"), ("F3-L3-MIB", "f3L3FlowPointStatsNoRouteDrop"), ("F3-L3-MIB", "f3L3FlowPointStatsHopLimitDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryIndex"), ("F3-L3-MIB", "f3L3FlowPointHistoryTime"), ("F3-L3-MIB", "f3L3FlowPointHistoryValid"), ("F3-L3-MIB", "f3L3FlowPointHistoryAction"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMG"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMY"), ("F3-L3-MIB", "f3L3FlowPointHistoryFMRD"), ("F3-L3-MIB", "f3L3FlowPointHistoryFTD"), ("F3-L3-MIB", "f3L3FlowPointHistoryFragmentedDropAcl"), ("F3-L3-MIB", "f3L3FlowPointHistoryAclRuleDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryTtlEqual1Drop"), ("F3-L3-MIB", "f3L3FlowPointHistoryFrameTx"), ("F3-L3-MIB", "f3L3FlowPointHistoryFrameRx"), ("F3-L3-MIB", "f3L3FlowPointHistoryNoRouteDrop"), ("F3-L3-MIB", "f3L3FlowPointHistoryHopLimitDrop"), ("F3-L3-MIB", "f3L3FlowPointThresholdIndex"), ("F3-L3-MIB", "f3L3FlowPointThresholdInterval"), ("F3-L3-MIB", "f3L3FlowPointThresholdVariable"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueLo"), ("F3-L3-MIB", "f3L3FlowPointThresholdValueHi"), ("F3-L3-MIB", "f3L3FlowPointThresholdMonValue"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIntervalType"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsValid"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsAction"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReqTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReqRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReplyTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsArpReplyRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpV6Tx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsDhcpV6Rx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpNARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceStatsNdpRSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryTime"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryValid"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryAction"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReqTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReqRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReplyTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryArpReplyRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpV6Tx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryDhcpV6Rx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpNARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRATx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRARx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRSTx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceHistoryNdpRSRx"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdIndex"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdInterval"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdVariable"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueLo"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdValueHi"), ("F3-L3-MIB", "f3L3TrafficIpInterfaceThresholdMonValue"), ("F3-L3-MIB", "f3L3AclRuleStatsIndex"), ("F3-L3-MIB", "f3L3AclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L3AclRuleStatsValid"), ("F3-L3-MIB", "f3L3AclRuleStatsAction"), ("F3-L3-MIB", "f3L3AclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L3AclRuleHistoryIndex"), ("F3-L3-MIB", "f3L3AclRuleHistoryTime"), ("F3-L3-MIB", "f3L3AclRuleHistoryValid"), ("F3-L3-MIB", "f3L3AclRuleHistoryAction"), ("F3-L3-MIB", "f3L3AclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L3AclRuleThresholdIndex"), ("F3-L3-MIB", "f3L3AclRuleThresholdInterval"), ("F3-L3-MIB", "f3L3AclRuleThresholdVariable"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L3AclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L3AclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsValid"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsAction"), ("F3-L3-MIB", "f3L2A2NAclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryTime"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryValid"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryAction"), ("F3-L3-MIB", "f3L2A2NAclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2A2NAclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsIntervalType"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsValid"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsAction"), ("F3-L3-MIB", "f3L2N2AAclRuleStatsRuleMatch"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryTime"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryValid"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryAction"), ("F3-L3-MIB", "f3L2N2AAclRuleHistoryRuleMatch"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdIndex"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdInterval"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdVariable"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueLo"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdValueHi"), ("F3-L3-MIB", "f3L2N2AAclRuleThresholdMonValue"), ("F3-L3-MIB", "f3L3QosPolicerStatsIndex"), ("F3-L3-MIB", "f3L3QosPolicerStatsIntervalType"), ("F3-L3-MIB", "f3L3QosPolicerStatsValid"), ("F3-L3-MIB", "f3L3QosPolicerStatsAction"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMG"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMY"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMYD"), ("F3-L3-MIB", "f3L3QosPolicerStatsFMRD"), ("F3-L3-MIB", "f3L3QosPolicerStatsBytesIn"), ("F3-L3-MIB", "f3L3QosPolicerStatsBytesOut"), ("F3-L3-MIB", "f3L3QosPolicerStatsABR"), ("F3-L3-MIB", "f3L3QosPolicerHistoryIndex"), ("F3-L3-MIB", "f3L3QosPolicerHistoryTime"), ("F3-L3-MIB", "f3L3QosPolicerHistoryValid"), ("F3-L3-MIB", "f3L3QosPolicerHistoryAction"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMG"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMY"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMYD"), ("F3-L3-MIB", "f3L3QosPolicerHistoryFMRD"), ("F3-L3-MIB", "f3L3QosPolicerHistoryBytesIn"), ("F3-L3-MIB", "f3L3QosPolicerHistoryBytesOut"), ("F3-L3-MIB", "f3L3QosPolicerHistoryABR"), ("F3-L3-MIB", "f3L3QosPolicerThresholdIndex"), ("F3-L3-MIB", "f3L3QosPolicerThresholdInterval"), ("F3-L3-MIB", "f3L3QosPolicerThresholdVariable"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "f3L3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "f3L3QosPolicerThresholdMonValue"), ("F3-L3-MIB", "f3L3QosShaperStatsIndex"), ("F3-L3-MIB", "f3L3QosShaperStatsIntervalType"), ("F3-L3-MIB", "f3L3QosShaperStatsValid"), ("F3-L3-MIB", "f3L3QosShaperStatsAction"), ("F3-L3-MIB", "f3L3QosShaperStatsBT"), ("F3-L3-MIB", "f3L3QosShaperStatsBTD"), ("F3-L3-MIB", "f3L3QosShaperStatsFD"), ("F3-L3-MIB", "f3L3QosShaperStatsFTD"), ("F3-L3-MIB", "f3L3QosShaperStatsBR"), ("F3-L3-MIB", "f3L3QosShaperStatsFR"), ("F3-L3-MIB", "f3L3QosShaperStatsABRRL"), ("F3-L3-MIB", "f3L3QosShaperStatsBREDD"), ("F3-L3-MIB", "f3L3QosShaperStatsFREDD"), ("F3-L3-MIB", "f3L3QosShaperHistoryIndex"), ("F3-L3-MIB", "f3L3QosShaperHistoryTime"), ("F3-L3-MIB", "f3L3QosShaperHistoryValid"), ("F3-L3-MIB", "f3L3QosShaperHistoryAction"), ("F3-L3-MIB", "f3L3QosShaperHistoryBT"), ("F3-L3-MIB", "f3L3QosShaperHistoryBTD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFTD"), ("F3-L3-MIB", "f3L3QosShaperHistoryBR"), ("F3-L3-MIB", "f3L3QosShaperHistoryFR"), ("F3-L3-MIB", "f3L3QosShaperHistoryABRRL"), ("F3-L3-MIB", "f3L3QosShaperHistoryBREDD"), ("F3-L3-MIB", "f3L3QosShaperHistoryFREDD"), ("F3-L3-MIB", "f3L3QosShaperThresholdIndex"), ("F3-L3-MIB", "f3L3QosShaperThresholdInterval"), ("F3-L3-MIB", "f3L3QosShaperThresholdVariable"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueLo"), ("F3-L3-MIB", "f3L3QosShaperThresholdValueHi"), ("F3-L3-MIB", "f3L3QosShaperThresholdMonValue"), ("F3-L3-MIB", "cmL3FlowPointStatsIndex"), ("F3-L3-MIB", "cmL3FlowPointStatsIntervalType"), ("F3-L3-MIB", "cmL3FlowPointStatsValid"), ("F3-L3-MIB", "cmL3FlowPointStatsAction"), ("F3-L3-MIB", "cmL3FlowPointStatsFMG"), ("F3-L3-MIB", "cmL3FlowPointStatsFMY"), ("F3-L3-MIB", "cmL3FlowPointStatsFMRD"), ("F3-L3-MIB", "cmL3FlowPointStatsFTD"), ("F3-L3-MIB", "cmL3FlowPointStatsFragmentedDropAcl"), ("F3-L3-MIB", "cmL3FlowPointStatsAclRuleDrop"), ("F3-L3-MIB", "cmL3FlowPointStatsTtlEqual1Drop"), ("F3-L3-MIB", "cmL3FlowPointStatsFrameTx"), ("F3-L3-MIB", "cmL3FlowPointStatsFrameRx"), ("F3-L3-MIB", "cmL3FlowPointStatsNoRouteDrop"), ("F3-L3-MIB", "cmL3FlowPointStatsAclDropNoMatch"), ("F3-L3-MIB", "cmL3FlowPointHistoryIndex"), ("F3-L3-MIB", "cmL3FlowPointHistoryTime"), ("F3-L3-MIB", "cmL3FlowPointHistoryValid"), ("F3-L3-MIB", "cmL3FlowPointHistoryAction"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMG"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMY"), ("F3-L3-MIB", "cmL3FlowPointHistoryFMRD"), ("F3-L3-MIB", "cmL3FlowPointHistoryFTD"), ("F3-L3-MIB", "cmL3FlowPointHistoryFragmentedDropAcl"), ("F3-L3-MIB", "cmL3FlowPointHistoryAclRuleDrop"), ("F3-L3-MIB", "cmL3FlowPointHistoryTtlEqual1Drop"), ("F3-L3-MIB", "cmL3FlowPointHistoryFrameTx"), ("F3-L3-MIB", "cmL3FlowPointHistoryFrameRx"), ("F3-L3-MIB", "cmL3FlowPointHistoryNoRouteDrop"), ("F3-L3-MIB", "cmL3FlowPointHistoryAclDropNoMatch"), ("F3-L3-MIB", "cmL3FlowPointThresholdIndex"), ("F3-L3-MIB", "cmL3FlowPointThresholdInterval"), ("F3-L3-MIB", "cmL3FlowPointThresholdVariable"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueLo"), ("F3-L3-MIB", "cmL3FlowPointThresholdValueHi"), ("F3-L3-MIB", "cmL3FlowPointThresholdMonValue"), ("F3-L3-MIB", "cmL3QosPolicerStatsIndex"), ("F3-L3-MIB", "cmL3QosPolicerStatsIntervalType"), ("F3-L3-MIB", "cmL3QosPolicerStatsValid"), ("F3-L3-MIB", "cmL3QosPolicerStatsAction"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMG"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMY"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMYD"), ("F3-L3-MIB", "cmL3QosPolicerStatsFMRD"), ("F3-L3-MIB", "cmL3QosPolicerStatsBytesIn"), ("F3-L3-MIB", "cmL3QosPolicerStatsBytesOut"), ("F3-L3-MIB", "cmL3QosPolicerStatsABR"), ("F3-L3-MIB", "cmL3QosPolicerHistoryIndex"), ("F3-L3-MIB", "cmL3QosPolicerHistoryTime"), ("F3-L3-MIB", "cmL3QosPolicerHistoryValid"), ("F3-L3-MIB", "cmL3QosPolicerHistoryAction"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMG"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMY"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMYD"), ("F3-L3-MIB", "cmL3QosPolicerHistoryFMRD"), ("F3-L3-MIB", "cmL3QosPolicerHistoryBytesIn"), ("F3-L3-MIB", "cmL3QosPolicerHistoryBytesOut")], [("F3-L3-MIB", "cmL3QosPolicerHistoryABR"), ("F3-L3-MIB", "cmL3QosPolicerThresholdIndex"), ("F3-L3-MIB", "cmL3QosPolicerThresholdInterval"), ("F3-L3-MIB", "cmL3QosPolicerThresholdVariable"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueLo"), ("F3-L3-MIB", "cmL3QosPolicerThresholdValueHi"), ("F3-L3-MIB", "cmL3QosPolicerThresholdMonValue"), ("F3-L3-MIB", "cmL3QosShaperStatsIndex"), ("F3-L3-MIB", "cmL3QosShaperStatsIntervalType"), ("F3-L3-MIB", "cmL3QosShaperStatsValid"), ("F3-L3-MIB", "cmL3QosShaperStatsAction"), ("F3-L3-MIB", "cmL3QosShaperStatsBT"), ("F3-L3-MIB", "cmL3QosShaperStatsBTD"), ("F3-L3-MIB", "cmL3QosShaperStatsFD"), ("F3-L3-MIB", "cmL3QosShaperStatsFTD"), ("F3-L3-MIB", "cmL3QosShaperStatsBR"), ("F3-L3-MIB", "cmL3QosShaperStatsFR"), ("F3-L3-MIB", "cmL3QosShaperStatsABRRL"), ("F3-L3-MIB", "cmL3QosShaperStatsABRRLR"), ("F3-L3-MIB", "cmL3QosShaperStatsBREDD"), ("F3-L3-MIB", "cmL3QosShaperStatsFREDD"), ("F3-L3-MIB", "cmL3QosShaperHistoryFTD"), ("F3-L3-MIB", "cmL3QosShaperHistoryBR"), ("F3-L3-MIB", "cmL3QosShaperHistoryFR"), ("F3-L3-MIB", "cmL3QosShaperHistoryABRRL"), ("F3-L3-MIB", "cmL3QosShaperHistoryABRRLR"), ("F3-L3-MIB", "cmL3QosShaperHistoryBREDD"), ("F3-L3-MIB", "cmL3QosShaperHistoryFREDD"), ("F3-L3-MIB", "cmL3QosShaperThresholdIndex"), ("F3-L3-MIB", "cmL3QosShaperThresholdInterval"), ("F3-L3-MIB", "cmL3QosShaperThresholdVariable"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueLo"), ("F3-L3-MIB", "cmL3QosShaperThresholdValueHi"), ("F3-L3-MIB", "cmL3QosShaperThresholdMonValue")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        f3L3PerfGroup = f3L3PerfGroup.setObjects(*_f3L3PerfGroup_obj)
    else:
        f3L3PerfGroup = f3L3PerfGroup.setObjects(*_f3L3PerfGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3PerfGroup = f3L3PerfGroup.setStatus('current')
if mibBuilder.loadTexts: f3L3PerfGroup.setDescription('A collection of objects performance used to manage the L3 functionality.')
f3L3TrafficOspfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 3)).setObjects(("F3-L3-MIB", "f3VrfOspfRouterIndex"), ("F3-L3-MIB", "f3VrfOspfRouterAdminState"), ("F3-L3-MIB", "f3VrfOspfRouterSecondaryState"), ("F3-L3-MIB", "f3VrfOspfRouterOperationalState"), ("F3-L3-MIB", "f3VrfOspfRouterId"), ("F3-L3-MIB", "f3VrfOspfRouterDescription"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterBgpRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterStaticRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterConnectedRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterDhcpRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterStorageType"), ("F3-L3-MIB", "f3VrfOspfRouterRowStatus"), ("F3-L3-MIB", "f3VrfOspfRouterAction"), ("F3-L3-MIB", "f3VrfOspfRouterVersion"), ("F3-L3-MIB", "f3VrfOspfRouterAdministrativeDistance"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesRedistributeToOspf"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesMetricType"), ("F3-L3-MIB", "f3VrfOspfRouterSlaacRoutesMetric"), ("F3-L3-MIB", "f3VrfOspfRouterEcmpMaximumPaths"), ("F3-L3-MIB", "f3VrfOspfRouterSrControl"), ("F3-L3-MIB", "f3VrfOspfRouterConvergenceTime"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIndex"), ("F3-L3-MIB", "f3L3TrafficOspfAreaType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaDefaultCost"), ("F3-L3-MIB", "f3L3TrafficOspfAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfAreaStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaRowStatus"), ("F3-L3-MIB", "f3L3TrafficOspfAreaAuthType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficOspfAreaCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberObject"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfAreaIfMemberRowStatus"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIndex"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceName"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpAddress"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceNetMask"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceCIRLo"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceCIRHi"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceStorageType"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceRowStatus"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpMode"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpv6Address"), ("F3-L3-MIB", "f3VrfLoopbackInterfaceIpv6AddrPrefixLen"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfAsLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborIpAddress"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborInterface"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborState"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborRole"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborPriority"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborDeadTime"), ("F3-L3-MIB", "f3L3TrafficOspfNeighborLocalInterfaceName"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfAreaId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfCost"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfIfType"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfRtrPriority"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfHelloInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfDeadInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfTransmitDelay"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfRetransmitInterval"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfState"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfBackupDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfAuthType"), ("F3-L3-MIB", "f3L3TrafficIPIfOspfSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficIPIfospfCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceIndex"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfCost"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfRtrPriority"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfHelloInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfDeadInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfTransmitDelay"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfRetransmitInterval"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceState"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfAuthType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfSimpleAuthKey"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfCryptoKeyId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceOspfInstanceId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceLinkLsaSuppression"), ("F3-L3-MIB", "f3L3TrafficOspfInterfacePassiveControl"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceAssociatedIpInterface"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceStorageType"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceRowStatus"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceTilfaControl"), ("F3-L3-MIB", "f3L3TrafficOspfInterfaceTilfaProtectionType"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborPriority"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborDeadTime"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborLocalInterfaceName"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborState"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborRole"), ("F3-L3-MIB", "f3L3TrafficOspfV3NeighborIpAddress"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterfaceId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbInterface"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbType"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAdvRouterId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAreaId"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbChecksum"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbSeqNum"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbAge"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbRtrPriority"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbLinkLocalAddress"), ("F3-L3-MIB", "f3L3TrafficOspfLinkLsDbPrefixList"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficOspfGroup = f3L3TrafficOspfGroup.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficOspfGroup.setDescription('A collection of objects used to manage the L3 Ospf functionality.')
f3L3TrafficIPv6Group = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 4)).setObjects(("F3-L3-MIB", "f3L3TrafficIPv6IfIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6IfName"), ("F3-L3-MIB", "f3L3TrafficIPv6IfAdminState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfSecondaryState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfOperationalState"), ("F3-L3-MIB", "f3L3TrafficIPv6IfType"), ("F3-L3-MIB", "f3L3TrafficIPv6IfLinkLocalAddr"), ("F3-L3-MIB", "f3L3TrafficIPv6IfLinkLocalAddrMode"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMtu"), ("F3-L3-MIB", "f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDefaultGateway"), ("F3-L3-MIB", "f3L3TrafficIPv6IfIcmpErrorMsgRateLimit"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpRole"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMaxRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6IfMinRAInterval"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRouterLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfReachableTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaManagedAddressConfigEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaRDNSSOptionEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaRDNSSLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDNSSList"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRaDefaultRouterPreference"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectControl"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectTransmits"), ("F3-L3-MIB", "f3L3TrafficIPv6IfDupAddrDetectRetransTimer"), ("F3-L3-MIB", "f3L3TrafficIPv6IfStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6IfRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6IfAction"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrAssignMode"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddr"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddrPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6AddrRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixIndex"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefixAdvEnabled"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefix"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRaPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixValidLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixPreferredLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6PrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpIPv6Addr"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpInterface"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpMacAddress"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpType"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpReachabilityState"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpAge"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpStorageType"), ("F3-L3-MIB", "f3L3TrafficIPv6NdpRowStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteDest"), ("F3-L3-MIB", "f3L3TrafficIpv6RoutePrefixLength"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteGateway"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteInterface"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteMetric"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteType"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteAdvertise"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteStatus"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteFlags"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteOrigin"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteStorageType"), ("F3-L3-MIB", "f3L3TrafficIpv6RouteRowStatus"), ("F3-L3-MIB", "f3DhcpV6RelayAgentIndex"), ("F3-L3-MIB", "f3DhcpV6RelayAgentAlias"), ("F3-L3-MIB", "f3DhcpV6RelayAgentAdminState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentSecondaryState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentOperationalState"), ("F3-L3-MIB", "f3DhcpV6RelayAgentServerIpAddress"), ("F3-L3-MIB", "f3DhcpV6RelayAgentServerIpInteface"), ("F3-L3-MIB", "f3DhcpV6RelayAgentStorageType"), ("F3-L3-MIB", "f3DhcpV6RelayAgentRowStatus"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberObject"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType"), ("F3-L3-MIB", "f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressIndex"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressAssignMode"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddr"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceIPv6AddressRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixIndex"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefix"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixLength"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixValidLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceRAPrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpIPv6Addr"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpInterface"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpMacAddress"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpReachabilityState"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpAge"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpStorageType"), ("F3-L3-MIB", "f3L3TrafficIPInterfaceNdpRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficIPv6Group = f3L3TrafficIPv6Group.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficIPv6Group.setDescription('A collection of objects used to manage the traffic ipv6 functionality.')
f3L3TrafficBgpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 37, 4, 2, 5)).setObjects(("F3-L3-MIB", "f3L3TrafficBgpRouterIndex"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAdminState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterSecondaryState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterOperationalState"), ("F3-L3-MIB", "f3L3TrafficBgpRouterId"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAsNumber"), ("F3-L3-MIB", "f3L3TrafficBgpRouterConnectedRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterOspfRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStaticRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterDhcpRoutesRedistControl"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpRouterRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpRouterAction"), ("F3-L3-MIB", "f3L3TrafficBgpRouterIBgpAdminDistance"), ("F3-L3-MIB", "f3L3TrafficBgpRouterEBgpAdminDistance"), ("F3-L3-MIB", "f3L3TrafficBgpRouterEcmpMaximumPaths"), ("F3-L3-MIB", "f3L3TrafficBgpRouterRestartTime"), ("F3-L3-MIB", "f3L3TrafficBgpRouterStaleRoutesTime"), ("F3-L3-MIB", "f3L3TrafficBgpRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIndex"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAdminState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerSecondaryState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerOperationalState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpv4Addr"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAsNumber"), ("F3-L3-MIB", "f3L3TrafficBgpPeerDescription"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpSessionState"), ("F3-L3-MIB", "f3L3TrafficBgpPeerHoldTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerStartupHoldTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerKeepAliveTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerConnectRetryTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceIp"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAuthenticationKey"), ("F3-L3-MIB", "f3L3TrafficBgpPeerTimeSinceUpTransition"), ("F3-L3-MIB", "f3L3TrafficBgpPeerTimeSinceDownTransition"), ("F3-L3-MIB", "f3L3TrafficBgpPeerStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpVersion"), ("F3-L3-MIB", "f3L3TrafficBgpPeerIpv6Address"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceIpv6"), ("F3-L3-MIB", "f3L3TrafficBgpPeerMultihopControl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerMultihopTtl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceInterface"), ("F3-L3-MIB", "f3L3TrafficBgpPeerUpdateSourceType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerLocalPreference"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRouteReflectorClient"), ("F3-L3-MIB", "f3L3TrafficBgpPeerRouteReflectorClusterId"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpRouteInboundFilter"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpRouteOutboundFilter"), ("F3-L3-MIB", "f3L3TrafficBgpPeerBgpGracefulRestart"), ("F3-L3-MIB", "f3L3TrafficBgpPeerPeerRestartTime"), ("F3-L3-MIB", "f3L3TrafficBgpPeerPeerRestarting"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyIndex"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyName"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilySendDefaultRoute"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopIpv4"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyNextHopIpv6"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyExtNextHopControl"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteIndex"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpRIBRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Network"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2NextHop"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Metric"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2Path"), ("F3-L3-MIB", "f3L3TrafficBgpRouteV2LocalPreference"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefix"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType"), ("F3-L3-MIB", "f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteIndex"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteNetwork"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteNextHop"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteMetric"), ("F3-L3-MIB", "f3L3TrafficBgpInRoutePath"), ("F3-L3-MIB", "f3L3TrafficBgpInRouteLocalPreference"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3L3TrafficBgpGroup = f3L3TrafficBgpGroup.setStatus('current')
if mibBuilder.loadTexts: f3L3TrafficBgpGroup.setDescription('A collection of objects used to manage the traffic BGP functionality.')
mibBuilder.exportSymbols("F3-L3-MIB", f3L3TrafficBgpRouterStaticRoutesRedistControl=f3L3TrafficBgpRouterStaticRoutesRedistControl, cmL3QosPolicerCIRMaxHi=cmL3QosPolicerCIRMaxHi, f3L2N2AAclRuleInnerVlanVIDControl=f3L2N2AAclRuleInnerVlanVIDControl, f3L3AclRuleOuterVlanPcpHighLimit=f3L3AclRuleOuterVlanPcpHighLimit, f3L3TrafficIpInterfaceStatsArpReqTx=f3L3TrafficIpInterfaceStatsArpReqTx, f3L3TrafficIPv6IfName=f3L3TrafficIPv6IfName, f3L2N2AAclRuleAlias=f3L2N2AAclRuleAlias, f3L3QosShaperSecondaryState=f3L3QosShaperSecondaryState, f3L3TrafficIpv6AllRouteAdminDistance=f3L3TrafficIpv6AllRouteAdminDistance, f3L3TrafficOspfInterfaceTable=f3L3TrafficOspfInterfaceTable, f3L3TrafficIpv6AllRouteOrigin=f3L3TrafficIpv6AllRouteOrigin, f3VrfLoopbackInterfaceCIRHi=f3VrfLoopbackInterfaceCIRHi, f3L3QosPolicerEIRMaxHi=f3L3QosPolicerEIRMaxHi, f3L3TrafficIpInterfaceStatsDhcpV6Tx=f3L3TrafficIpInterfaceStatsDhcpV6Tx, f3L3FlowPointHCosMgmtEnabled=f3L3FlowPointHCosMgmtEnabled, f3L2A2NAclRuleInnerVlanVIDLowLimit=f3L2A2NAclRuleInnerVlanVIDLowLimit, f3L3TrafficIPv6InterfaceTable=f3L3TrafficIPv6InterfaceTable, f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled=f3L3TrafficIPv6IfStatelessAddrAutoconfigEnabled, f3L3AclRuleSrcIpv4AddressHighLimit=f3L3AclRuleSrcIpv4AddressHighLimit, f3L2N2AAclRuleIpV6FlowLabelControl=f3L2N2AAclRuleIpV6FlowLabelControl, f3L3TrafficIPv6IfRowStatus=f3L3TrafficIPv6IfRowStatus, f3L3TrafficIPIfRaDefaultRouterPreference=f3L3TrafficIPIfRaDefaultRouterPreference, f3L3TrafficIPv6PrefixStorageType=f3L3TrafficIPv6PrefixStorageType, f3L3QosPolicerHistoryValid=f3L3QosPolicerHistoryValid, f3L3AclRuleDstPortControl=f3L3AclRuleDstPortControl, f3L3TrafficIPInterfaceRAPrefixRowStatus=f3L3TrafficIPInterfaceRAPrefixRowStatus, f3L2N2AAclRuleIndex=f3L2N2AAclRuleIndex, cmL3FlowPointAclNoMatchDisposition=cmL3FlowPointAclNoMatchDisposition, OspfInterfaceState=OspfInterfaceState, f3L2A2NAclRuleDstIpV6AddressPrefixLen=f3L2A2NAclRuleDstIpV6AddressPrefixLen, f3L3TrafficIPv6NdpTable=f3L3TrafficIPv6NdpTable, f3L3QosShaperWredYellowDropProbability=f3L3QosShaperWredYellowDropProbability, f3L2N2AAclRuleHistoryIndex=f3L2N2AAclRuleHistoryIndex, f3L3TrafficIpv6StaticRoutePrefixLength=f3L3TrafficIpv6StaticRoutePrefixLength, f3L2A2NAclRuleIpv4PriorityLowLimit=f3L2A2NAclRuleIpv4PriorityLowLimit, f3L3QosPolicerStatsBytesIn=f3L3QosPolicerStatsBytesIn, f3L3AclRuleTcpFlagsControl=f3L3AclRuleTcpFlagsControl, cmL3FlowPointPortIndex=cmL3FlowPointPortIndex, f3L3TrafficIPIfOspfAuthType=f3L3TrafficIPIfOspfAuthType, f3L3QosShaperHistoryEntry=f3L3QosShaperHistoryEntry, cmL3QosPolicerStatsFMY=cmL3QosPolicerStatsFMY, f3L3TrafficIPIfDupAddrDetectRetransTimer=f3L3TrafficIPIfDupAddrDetectRetransTimer, f3L3FlowPointUntaggedMemberShipEnabled=f3L3FlowPointUntaggedMemberShipEnabled, f3L3TrafficIpv6StaticRouteInterface=f3L3TrafficIpv6StaticRouteInterface, f3IpPrefixListName=f3IpPrefixListName, f3L3TrafficIPIfSecondaryState=f3L3TrafficIPIfSecondaryState, f3L3TrafficBgpRouterStaleRoutesTime=f3L3TrafficBgpRouterStaleRoutesTime, f3DhcpV6RelayAgentServerIpAddress=f3DhcpV6RelayAgentServerIpAddress, f3DhcpV6RelayAgentStorageType=f3DhcpV6RelayAgentStorageType, f3L3TrafficIPv6InterfaceEntry=f3L3TrafficIPv6InterfaceEntry, f3L3TrafficIPIfDhcpRelayInterfaceSide=f3L3TrafficIPIfDhcpRelayInterfaceSide, f3L3TrafficIPv6IfAdminState=f3L3TrafficIPv6IfAdminState, f3L3TrafficIPv6NdpRowStatus=f3L3TrafficIPv6NdpRowStatus, f3L3TrafficIpv4RouteRowStatus=f3L3TrafficIpv4RouteRowStatus, f3L2N2AAclRuleDstIpV6AddressPrefixLen=f3L2N2AAclRuleDstIpV6AddressPrefixLen, f3L3TrafficIPInterfaceIPv6AddressTable=f3L3TrafficIPInterfaceIPv6AddressTable, f3L3TrafficBgpRouteNetwork=f3L3TrafficBgpRouteNetwork, f3L3TrafficIPInterfaceOspfEntry=f3L3TrafficIPInterfaceOspfEntry, f3L3TrafficIPIfospfCryptoKeyId=f3L3TrafficIPIfospfCryptoKeyId, f3L3TrafficOspfAreaIfMemberEntry=f3L3TrafficOspfAreaIfMemberEntry, f3L3FlowPointAdminState=f3L3FlowPointAdminState, f3VrfLoopbackInterfaceName=f3VrfLoopbackInterfaceName, f3L3TrafficIpInterfaceThresholdInterval=f3L3TrafficIpInterfaceThresholdInterval, f3L2A2NAclRuleSrcMacAddressMask=f3L2A2NAclRuleSrcMacAddressMask, f3L3TrafficIpv4RouteOrigin=f3L3TrafficIpv4RouteOrigin, f3VrfLoopbackInterfaceIndex=f3VrfLoopbackInterfaceIndex, f3L3TrafficIPIfOspfTransmitDelay=f3L3TrafficIPIfOspfTransmitDelay, f3DhcpRelayAgentTrafficIpIfMemberRowStatus=f3DhcpRelayAgentTrafficIpIfMemberRowStatus, f3L3TrafficIpInterfaceStatsIcmpRx=f3L3TrafficIpInterfaceStatsIcmpRx, f3VrfTraceRouteIpv4Destination=f3VrfTraceRouteIpv4Destination, f3L2A2NAclRuleHistoryRuleMatch=f3L2A2NAclRuleHistoryRuleMatch, f3L3QosShaperWredGreenDropProbability=f3L3QosShaperWredGreenDropProbability, f3L2A2NAclRuleThresholdValueLo=f3L2A2NAclRuleThresholdValueLo, cmL3QosShaperStatsEntry=cmL3QosShaperStatsEntry, OspfIfType=OspfIfType, f3L2N2AAclRuleOuterVlanVIDControl=f3L2N2AAclRuleOuterVlanVIDControl, f3DhcpV6RelayAgentIndex=f3DhcpV6RelayAgentIndex, f3L3TrafficOspfLsDbTable=f3L3TrafficOspfLsDbTable, cmL3QosShaperEntry=cmL3QosShaperEntry, f3L3TrafficIpv4RouteMetric=f3L3TrafficIpv4RouteMetric, f3L3TrafficIpv6RouteDest=f3L3TrafficIpv6RouteDest, f3L3TrafficBgpRIBRouteNextHop=f3L3TrafficBgpRIBRouteNextHop, f3L3TrafficBgpRouterAsNumber=f3L3TrafficBgpRouterAsNumber, f3L3TrafficArpEntryType=f3L3TrafficArpEntryType, f3L2N2AAclRuleHistoryRuleMatch=f3L2N2AAclRuleHistoryRuleMatch, f3DhcpV6RelayAgentTable=f3DhcpV6RelayAgentTable, OspfLsaType=OspfLsaType, cmL3FlowPointStatsFTD=cmL3FlowPointStatsFTD, f3VrfIpVersion=f3VrfIpVersion, VrfActionType=VrfActionType, f3L3QosShaperHistoryFREDD=f3L3QosShaperHistoryFREDD, f3L3TrafficOspfAsLsDbType=f3L3TrafficOspfAsLsDbType, DhcpRelayInterfaceSide=DhcpRelayInterfaceSide, cmL3QosPolicerThresholdIndex=cmL3QosPolicerThresholdIndex, f3L3TrafficBgpPeerAddressFamilyName=f3L3TrafficBgpPeerAddressFamilyName, cmL3QosPolicerHistoryFMG=cmL3QosPolicerHistoryFMG, cmL3QosShaperStatsTable=cmL3QosShaperStatsTable, f3L3AclRuleDstIpv4AddressLowLimit=f3L3AclRuleDstIpv4AddressLowLimit, f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx=f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpTx, f3L3TrafficOspfNeighborRouterId=f3L3TrafficOspfNeighborRouterId, f3L3TrafficIpInterfaceStatsDhcpV6Rx=f3L3TrafficIpInterfaceStatsDhcpV6Rx, f3L3TrafficIPv6InterfaceThresholdIndex=f3L3TrafficIPv6InterfaceThresholdIndex, f3L3TrafficIPv6IfDupAddrDetectTransmits=f3L3TrafficIPv6IfDupAddrDetectTransmits, f3L3TrafficBgpPeerBgpGracefulRestart=f3L3TrafficBgpPeerBgpGracefulRestart, f3L3QosShaperThresholdMonValue=f3L3QosShaperThresholdMonValue, f3L3TrafficIPv6PrefixRaPrefix=f3L3TrafficIPv6PrefixRaPrefix, f3L3TrafficIpv6StaticRouteStorageType=f3L3TrafficIpv6StaticRouteStorageType, f3L3TrafficIpInterfaceHistoryNdpRARx=f3L3TrafficIpInterfaceHistoryNdpRARx, f3L3TrafficIPv6InterfaceHistoryTime=f3L3TrafficIPv6InterfaceHistoryTime, f3VrfActionIfName=f3VrfActionIfName, f3L2N2AAclRuleTcpFlags=f3L2N2AAclRuleTcpFlags, f3L3QosPolicerHistoryTime=f3L3QosPolicerHistoryTime, f3L3AclRuleProtocolControl=f3L3AclRuleProtocolControl, f3DhcpRelayAgentTrafficIpIfMemberEntry=f3DhcpRelayAgentTrafficIpIfMemberEntry, f3VrfLoopbackInterfaceStorageType=f3VrfLoopbackInterfaceStorageType, cmL3FlowPointTable=cmL3FlowPointTable, f3L3TrafficIpInterfaceHistoryNdpNATx=f3L3TrafficIpInterfaceHistoryNdpNATx, f3L3QosPolicerPolicingEnabled=f3L3QosPolicerPolicingEnabled, f3L3TrafficOspfAsLsDbRouterId=f3L3TrafficOspfAsLsDbRouterId, f3L3QosPolicerEntry=f3L3QosPolicerEntry, f3L3TrafficArpIPAddress=f3L3TrafficArpIPAddress, f3L3AclRuleStatsTable=f3L3AclRuleStatsTable, f3L3TrafficIPIfDhcpClientIdEnabled=f3L3TrafficIPIfDhcpClientIdEnabled, f3L3TrafficIPIfRaRDNSSLifeTime=f3L3TrafficIPIfRaRDNSSLifeTime, f3L3QosShaperWfqWeight=f3L3QosShaperWfqWeight, cmL3FlowPointThresholdVariable=cmL3FlowPointThresholdVariable, AclRuleL2Side=AclRuleL2Side, cmL3QosShaperStatsBR=cmL3QosShaperStatsBR, f3L3TrafficIPInterfaceIPv6AddressRowStatus=f3L3TrafficIPInterfaceIPv6AddressRowStatus, cmL3FlowPointWfqGroupCOS=cmL3FlowPointWfqGroupCOS, f3L3TrafficBgpRouteV2Path=f3L3TrafficBgpRouteV2Path, f3L2A2NAclRuleInnerVlanPcpControl=f3L2A2NAclRuleInnerVlanPcpControl, f3L3TrafficIpv4RouteTable=f3L3TrafficIpv4RouteTable, f3L3ObjectsGroup=f3L3ObjectsGroup, f3L3QosPolicerIndex=f3L3QosPolicerIndex, f3L3TrafficArpEntry=f3L3TrafficArpEntry, f3L3TrafficOspfNeighborEntry=f3L3TrafficOspfNeighborEntry, f3L3TrafficIPv6PrefixRaPrefixLength=f3L3TrafficIPv6PrefixRaPrefixLength, f3L3TrafficIPv6InterfaceThresholdEntry=f3L3TrafficIPv6InterfaceThresholdEntry, f3L3TrafficIpInterfaceStatsNdpRATx=f3L3TrafficIpInterfaceStatsNdpRATx, f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx=f3L3TrafficIPv6InterfaceHistoryDhcpV6Rx, f3L3TrafficIPIfRaRDNSSOptionEnabled=f3L3TrafficIPIfRaRDNSSOptionEnabled, f3L3QosPolicerStatsIndex=f3L3QosPolicerStatsIndex, f3L3TrafficBgpPeerTimeSinceUpTransition=f3L3TrafficBgpPeerTimeSinceUpTransition, f3L3TrafficBgpRouterEntry=f3L3TrafficBgpRouterEntry, f3L3TrafficIPv6IfRaRDNSSOptionEnabled=f3L3TrafficIPv6IfRaRDNSSOptionEnabled, cmL3QosShaperRowStatus=cmL3QosShaperRowStatus, f3L3TrafficIpv4RouteEntry=f3L3TrafficIpv4RouteEntry, cmL3QosPolicerStatsFMRD=cmL3QosPolicerStatsFMRD, f3L3TrafficIPv6InterfaceThresholdVariable=f3L3TrafficIPv6InterfaceThresholdVariable, f3L2A2NAclRuleProtocolNumber=f3L2A2NAclRuleProtocolNumber, cmL3QosPolicerCIRMaxLo=cmL3QosPolicerCIRMaxLo, f3L3TrafficOspfInterfaceOspfRtrPriority=f3L3TrafficOspfInterfaceOspfRtrPriority, f3L3TrafficIpInterfaceHistoryEntry=f3L3TrafficIpInterfaceHistoryEntry, cmL3QosPolicerStatsBytesIn=cmL3QosPolicerStatsBytesIn, f3L3AclRuleStatsValid=f3L3AclRuleStatsValid, cmL3QosPolicerHistoryFMY=cmL3QosPolicerHistoryFMY, f3L3AclRuleSrcMacAddressMask=f3L3AclRuleSrcMacAddressMask, f3L3TrafficOspfInterfaceOspfTransmitDelay=f3L3TrafficOspfInterfaceOspfTransmitDelay, cmL3FlowPointStatsAclDropNoMatch=cmL3FlowPointStatsAclDropNoMatch, f3L3AclRuleOuterVlanPcpLowLimit=f3L3AclRuleOuterVlanPcpLowLimit, TrafficOspfRole=TrafficOspfRole, f3L3TrafficBgpPeerRouteReflectorClient=f3L3TrafficBgpPeerRouteReflectorClient, f3L2N2AAclRuleOuterVlanDeiControl=f3L2N2AAclRuleOuterVlanDeiControl, f3L3FlowPointAlias=f3L3FlowPointAlias, f3L3FlowPointStatsTtlEqual1Drop=f3L3FlowPointStatsTtlEqual1Drop, BgpNextHopUpdateType=BgpNextHopUpdateType, f3L3TrafficOspfV3NeighborState=f3L3TrafficOspfV3NeighborState, f3L2A2NAclRuleRowStatus=f3L2A2NAclRuleRowStatus, f3L3FlowPointWfqGroupEirHi=f3L3FlowPointWfqGroupEirHi, f3L3TrafficIpv4AllRouteStorageType=f3L3TrafficIpv4AllRouteStorageType, f3L3TrafficIPIfIndex=f3L3TrafficIPIfIndex, f3L3TrafficBgpRouterId=f3L3TrafficBgpRouterId, f3L3TrafficOspfLinkLsDbAdvRouterId=f3L3TrafficOspfLinkLsDbAdvRouterId, f3L3TrafficIPv6InterfaceHistoryNdpRSRx=f3L3TrafficIPv6InterfaceHistoryNdpRSRx, f3VrfOspfRouterDhcpRoutesMetric=f3VrfOspfRouterDhcpRoutesMetric, f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx=f3L3TrafficIpInterfaceStatsIcmpV6WONdpRx, f3L2N2AAclRuleDstMacAddressMask=f3L2N2AAclRuleDstMacAddressMask, f3L3QosShaperStatsIndex=f3L3QosShaperStatsIndex, cmL3FlowPointHistoryFMG=cmL3FlowPointHistoryFMG, OspfRouterActionType=OspfRouterActionType, cmL3QosShaperHistoryIndex=cmL3QosShaperHistoryIndex, f3L2A2NAclRuleEntry=f3L2A2NAclRuleEntry, f3L2N2AAclRulePriority=f3L2N2AAclRulePriority, f3L2N2AAclRuleStatsValid=f3L2N2AAclRuleStatsValid, cmL3QosPolicerHistoryBytesOut=cmL3QosPolicerHistoryBytesOut, f3L3QosPolicerThresholdCrossingAlert=f3L3QosPolicerThresholdCrossingAlert, f3L3QosPolicerThresholdMonValue=f3L3QosPolicerThresholdMonValue, f3L3QosShaperHistoryIndex=f3L3QosShaperHistoryIndex, f3L3TrafficIpv6AllRouteInterface=f3L3TrafficIpv6AllRouteInterface, f3L3TrafficIPInterfaceRAPrefixStorageType=f3L3TrafficIPInterfaceRAPrefixStorageType, f3L2N2AAclRuleHistoryTime=f3L2N2AAclRuleHistoryTime, f3L3TrafficIPIfDhcpRapidCommitControlEnabled=f3L3TrafficIPIfDhcpRapidCommitControlEnabled, cmL3QosShaperStatsAction=cmL3QosShaperStatsAction, TrafficIpInterfaceActionType=TrafficIpInterfaceActionType, f3L2A2NAclRuleSrcMacAddress=f3L2A2NAclRuleSrcMacAddress, cmL3QosPolicerStatsAction=cmL3QosPolicerStatsAction, cmL3FlowPointStatsTable=cmL3FlowPointStatsTable, f3L2A2NAclRuleDstPortHighLimit=f3L2A2NAclRuleDstPortHighLimit, f3L3TrafficOspfAreaIndex=f3L3TrafficOspfAreaIndex, f3L3TrafficIPInterfaceEntry=f3L3TrafficIPInterfaceEntry, f3L3TrafficIPInterfaceNdpRowStatus=f3L3TrafficIPInterfaceNdpRowStatus, f3L3TrafficOspfInterfaceTilfaControl=f3L3TrafficOspfInterfaceTilfaControl, f3L3TrafficOspfAreaIfMemberTable=f3L3TrafficOspfAreaIfMemberTable, cmL3FlowPointHCosGuaranteedBwLo=cmL3FlowPointHCosGuaranteedBwLo, f3L3TrafficOspfAreaTable=f3L3TrafficOspfAreaTable, f3L3AclRuleInnerVlanVIDHighLimit=f3L3AclRuleInnerVlanVIDHighLimit, f3VrfAlias=f3VrfAlias, f3VrfTrafficIpIfMemberStorageType=f3VrfTrafficIpIfMemberStorageType, f3L3TrafficIpInterfaceThresholdTable=f3L3TrafficIpInterfaceThresholdTable, cmL3QosShaperHistoryTime=cmL3QosShaperHistoryTime, f3L3TrafficIpv6AllRouteEntry=f3L3TrafficIpv6AllRouteEntry, TrafficIpv6InterfaceActionType=TrafficIpv6InterfaceActionType, f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix=f3L3TrafficIPv6AddrUnicastAddrAutoGenPrefix, cmL3QosPolicerStatsIndex=cmL3QosPolicerStatsIndex, f3L3TrafficOspfInterfaceIndex=f3L3TrafficOspfInterfaceIndex, f3L3FlowPointHCosGuaranteedBwHi=f3L3FlowPointHCosGuaranteedBwHi, f3L3TrafficBgpPeerAddressFamilyTable=f3L3TrafficBgpPeerAddressFamilyTable, f3L3TrafficOspfNeighborPriority=f3L3TrafficOspfNeighborPriority, f3L2N2AAclRuleStatsIndex=f3L2N2AAclRuleStatsIndex, f3L2A2NAclRuleHistoryValid=f3L2A2NAclRuleHistoryValid, cmL3QosShaperHistoryABRRL=cmL3QosShaperHistoryABRRL, f3VrfFwdTableFull=f3VrfFwdTableFull, f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType=f3DhcpV6RelayAgentClientTrafficIpIfMemberStorageType, f3L3TrafficIpv6RoutePrefixLength=f3L3TrafficIpv6RoutePrefixLength, f3L3TrafficOspfInterfaceOspfDeadInterval=f3L3TrafficOspfInterfaceOspfDeadInterval, f3L2N2AAclRuleCOS=f3L2N2AAclRuleCOS, f3L3TrafficIPIfOspfDesignatedRouterId=f3L3TrafficIPIfOspfDesignatedRouterId, f3L3TrafficBgpPeerAddressFamilySendDefaultRoute=f3L3TrafficBgpPeerAddressFamilySendDefaultRoute, f3L3TrafficBgpInRouteMetric=f3L3TrafficBgpInRouteMetric, f3L3AclRuleStatsEntry=f3L3AclRuleStatsEntry, f3VrfIndex=f3VrfIndex, f3L3TrafficIpInterfaceStatsAction=f3L3TrafficIpInterfaceStatsAction, f3L3TrafficOspfLinkLsDbPrefixList=f3L3TrafficOspfLinkLsDbPrefixList, L3AclRuleOperation=L3AclRuleOperation, cmL3FlowPointThresholdMonValue=cmL3FlowPointThresholdMonValue, f3L3TrafficBgpRouterStorageType=f3L3TrafficBgpRouterStorageType, OspfVersion=OspfVersion, f3L3TrafficIPv6InterfaceStatsNdpNSRx=f3L3TrafficIPv6InterfaceStatsNdpNSRx, cmL3QosPolicerHistoryEntry=cmL3QosPolicerHistoryEntry, f3L3QosShaperEntry=f3L3QosShaperEntry, f3L3TrafficArpInterface=f3L3TrafficArpInterface, f3L2A2NAclRuleSrcPortLowLimit=f3L2A2NAclRuleSrcPortLowLimit, f3L3TrafficIPIfDupAddrDetectTransmits=f3L3TrafficIPIfDupAddrDetectTransmits, BgpUpdateSourceType=BgpUpdateSourceType, cmL3QosPolicerOperationalState=cmL3QosPolicerOperationalState, cmL3QosPolicerThresholdCrossingAlert=cmL3QosPolicerThresholdCrossingAlert, f3L3QosPolicerHistoryBytesOut=f3L3QosPolicerHistoryBytesOut, f3L3TrafficBgpRIBRouteIndex=f3L3TrafficBgpRIBRouteIndex, f3L3TrafficOspfV3NeighborIpAddress=f3L3TrafficOspfV3NeighborIpAddress, f3DhcpRelayAgentTrafficIpIfMemberStorageType=f3DhcpRelayAgentTrafficIpIfMemberStorageType, f3L3TrafficOspfV3NeighborEntry=f3L3TrafficOspfV3NeighborEntry, f3L3FlowPointFragmentedPktsFwdEnabled=f3L3FlowPointFragmentedPktsFwdEnabled, f3L3TrafficOspfInterfaceState=f3L3TrafficOspfInterfaceState)
mibBuilder.exportSymbols("F3-L3-MIB", f3VrfDhcpRoutesControl=f3VrfDhcpRoutesControl, f3L3TrafficIPIfOspfState=f3L3TrafficIPIfOspfState, f3L3TrafficIPIfAdminState=f3L3TrafficIPIfAdminState, f3L3QosPolicerHistoryFMY=f3L3QosPolicerHistoryFMY, f3L3FlowPointMultiCOSEnabled=f3L3FlowPointMultiCOSEnabled, f3L3TrafficIpv4StaticRouteDest=f3L3TrafficIpv4StaticRouteDest, f3L3AclRuleHistoryTable=f3L3AclRuleHistoryTable, f3L3QosPolicerStatsBytesOut=f3L3QosPolicerStatsBytesOut, f3L3TrafficIpv6AllRouteMetric=f3L3TrafficIpv6AllRouteMetric, f3L2N2AAclRuleParentIndex=f3L2N2AAclRuleParentIndex, f3DhcpV6RelayAgentClientTrafficIpIfMemberObject=f3DhcpV6RelayAgentClientTrafficIpIfMemberObject, f3L3FlowPointStatsFTD=f3L3FlowPointStatsFTD, f3L3TrafficIPIfDhcpRelayUserClassOpt77Control=f3L3TrafficIPIfDhcpRelayUserClassOpt77Control, f3L2A2NAclRuleSrcIpv4AddressHighLimit=f3L2A2NAclRuleSrcIpv4AddressHighLimit, cmL3FlowPointHistoryAclRuleDrop=cmL3FlowPointHistoryAclRuleDrop, f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute=f3L3TrafficBgpPeerAddressFamilyRedistStaticRoute, f3L3FlowPointStatsFMRD=f3L3FlowPointStatsFMRD, f3L2A2NAclRuleHistoryTime=f3L2A2NAclRuleHistoryTime, cmL3QosPolicerStatsBytesOut=cmL3QosPolicerStatsBytesOut, f3L3TrafficBgpPeerTable=f3L3TrafficBgpPeerTable, f3L3TrafficIPv6InterfaceThresholdValueHi=f3L3TrafficIPv6InterfaceThresholdValueHi, f3L3AclRuleHistoryIndex=f3L3AclRuleHistoryIndex, f3L3AclRuleIpv4PriorityHighLimit=f3L3AclRuleIpv4PriorityHighLimit, f3L3TrafficIPInterfaceNdpIPv6Addr=f3L3TrafficIPInterfaceNdpIPv6Addr, f3VrfLoopbackInterfaceCIRLo=f3VrfLoopbackInterfaceCIRLo, f3L3TrafficBgpRoutePath=f3L3TrafficBgpRoutePath, f3L2A2NAclRuleDstIpv4AddressHighLimit=f3L2A2NAclRuleDstIpv4AddressHighLimit, f3L3TrafficOspfLsDbChecksum=f3L3TrafficOspfLsDbChecksum, f3L3AclRuleDynamicSrcMacAddressControl=f3L3AclRuleDynamicSrcMacAddressControl, f3L3QosPolicerHistoryFMYD=f3L3QosPolicerHistoryFMYD, f3L3TrafficOspfLinkLsDbAreaId=f3L3TrafficOspfLinkLsDbAreaId, f3L3QosPolicerThresholdValueHi=f3L3QosPolicerThresholdValueHi, cmL3QosShaperEIRLo=cmL3QosShaperEIRLo, f3L3TrafficIPv6NdpMacAddress=f3L3TrafficIPv6NdpMacAddress, f3L3Performance=f3L3Performance, cmL3FlowPointWfqGroupEirHi=cmL3FlowPointWfqGroupEirHi, f3L3AclRuleEtherType=f3L3AclRuleEtherType, f3L2A2NAclRuleHistoryIndex=f3L2A2NAclRuleHistoryIndex, f3L3AclRuleOuterVlanVIDControl=f3L3AclRuleOuterVlanVIDControl, BgpRouterActionType=BgpRouterActionType, f3L2N2AAclRuleProtocolNumber=f3L2N2AAclRuleProtocolNumber, f3L3TrafficIPv6InterfaceHistoryNdpNATx=f3L3TrafficIPv6InterfaceHistoryNdpNATx, f3VrfOspfRouterIndex=f3VrfOspfRouterIndex, VrfAction=VrfAction, f3L3TrafficOspfInterfaceOspfCost=f3L3TrafficOspfInterfaceOspfCost, NdpRaDefaultRouterPreference=NdpRaDefaultRouterPreference, f3L2N2AAclRuleStorageType=f3L2N2AAclRuleStorageType, BgpPeerAddressFamilyNameType=BgpPeerAddressFamilyNameType, f3L3TrafficIPv6IfMtu=f3L3TrafficIPv6IfMtu, f3L3TrafficIpInterfaceStatsArpReqRx=f3L3TrafficIpInterfaceStatsArpReqRx, f3L3QosShaperHistoryFR=f3L3QosShaperHistoryFR, f3L3TrafficIPv6PrefixRaPrefixAdvEnabled=f3L3TrafficIPv6PrefixRaPrefixAdvEnabled, f3L3TrafficOspfInterfaceStorageType=f3L3TrafficOspfInterfaceStorageType, f3L3TrafficIPInterfaceRAPrefixValidLifeTime=f3L3TrafficIPInterfaceRAPrefixValidLifeTime, cmL3QosShaperThresholdVariable=cmL3QosShaperThresholdVariable, cmL3QosPolicerColorMode=cmL3QosPolicerColorMode, f3L3AclRuleDstIpv4AddressControl=f3L3AclRuleDstIpv4AddressControl, f3L3QosPolicerEBS=f3L3QosPolicerEBS, f3L3QosShaperThresholdTable=f3L3QosShaperThresholdTable, f3DhcpRelayAgentSecondaryState=f3DhcpRelayAgentSecondaryState, f3L3TrafficArpMacAddress=f3L3TrafficArpMacAddress, f3L3AclRuleThresholdValueHi=f3L3AclRuleThresholdValueHi, f3L3AclRuleDstPortLowLimit=f3L3AclRuleDstPortLowLimit, f3L3TrafficIPInterfaceRAPrefixLength=f3L3TrafficIPInterfaceRAPrefixLength, cmL3QosShaperStatsFTD=cmL3QosShaperStatsFTD, f3L3TrafficOspfAreaCryptoKeyId=f3L3TrafficOspfAreaCryptoKeyId, f3L3TrafficOspfAsLsDbAge=f3L3TrafficOspfAsLsDbAge, f3L3TrafficIPInterfaceIPv6AddressAssignMode=f3L3TrafficIPInterfaceIPv6AddressAssignMode, f3L3FlowPointDscpOverwriteControl=f3L3FlowPointDscpOverwriteControl, f3L3TrafficBgpRouterDhcpRoutesRedistControl=f3L3TrafficBgpRouterDhcpRoutesRedistControl, f3L3TrafficBgpRouteV2NextHop=f3L3TrafficBgpRouteV2NextHop, cmL3QosShaperCOS=cmL3QosShaperCOS, f3L3TrafficOspfV3NeighborRole=f3L3TrafficOspfV3NeighborRole, f3L3AclRuleOperation=f3L3AclRuleOperation, f3L3AclRuleHistoryValid=f3L3AclRuleHistoryValid, f3L3AclRulePriorityLowLimit=f3L3AclRulePriorityLowLimit, f3L3QosPolicerStatsIntervalType=f3L3QosPolicerStatsIntervalType, f3L2N2AAclRuleProtocolControl=f3L2N2AAclRuleProtocolControl, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1Enabled, f3L3TrafficIPIfMinRAInterval=f3L3TrafficIPIfMinRAInterval, f3L3TrafficIPInterfaceRAPrefix=f3L3TrafficIPInterfaceRAPrefix, f3L3TrafficOspfAreaDefaultCost=f3L3TrafficOspfAreaDefaultCost, f3L3FlowPointSecureState=f3L3FlowPointSecureState, f3L2N2AAclRuleSrcMacAddressMask=f3L2N2AAclRuleSrcMacAddressMask, f3L3QosPolicerStatsAction=f3L3QosPolicerStatsAction, cmL3FlowPointInnerTagMemberShipEnabled=cmL3FlowPointInnerTagMemberShipEnabled, f3VrfOspfRouterRowStatus=f3VrfOspfRouterRowStatus, cmL3FlowPointAlias=cmL3FlowPointAlias, f3L3FlowPointHistoryTime=f3L3FlowPointHistoryTime, f3L3TrafficIPIfAction=f3L3TrafficIPIfAction, f3VrfMaxFwdTableEntries=f3VrfMaxFwdTableEntries, f3L3FlowPointThresholdMonValue=f3L3FlowPointThresholdMonValue, f3L3AclRuleDstMacAddress=f3L3AclRuleDstMacAddress, cmL3FlowPointThresholdCrossingAlert=cmL3FlowPointThresholdCrossingAlert, f3DhcpRelayAgentServerIpAddress=f3DhcpRelayAgentServerIpAddress, f3L3TrafficOspfInterfaceOspfDesignatedRouterId=f3L3TrafficOspfInterfaceOspfDesignatedRouterId, f3VrfOspfRouterBgpRoutesRedistributeToOspf=f3VrfOspfRouterBgpRoutesRedistributeToOspf, AffectiveArpActionType=AffectiveArpActionType, f3L3TrafficIPInterfaceNdpReachabilityState=f3L3TrafficIPInterfaceNdpReachabilityState, f3L2N2AAclRuleStatsRuleMatch=f3L2N2AAclRuleStatsRuleMatch, f3L3TrafficIPIfBorrowedIntf=f3L3TrafficIPIfBorrowedIntf, cmL3QosShaperHistoryFD=cmL3QosShaperHistoryFD, f3L3TrafficIpv6AllRouteTable=f3L3TrafficIpv6AllRouteTable, f3L3TrafficIpv4AllRouteEntry=f3L3TrafficIpv4AllRouteEntry, cmL3QosPolicerHistoryFMRD=cmL3QosPolicerHistoryFMRD, f3L3TrafficBgpPeerBgpRouteOutboundFilter=f3L3TrafficBgpPeerBgpRouteOutboundFilter, f3VrfTraceRouteIpv6Destination=f3VrfTraceRouteIpv6Destination, f3L3QosPolicerEIRLo=f3L3QosPolicerEIRLo, f3L3TrafficIPIfName=f3L3TrafficIPIfName, f3L3TrafficIPIfDhcpv6Role=f3L3TrafficIPIfDhcpv6Role, f3L2A2NAclRuleSrcMacAddressControl=f3L2A2NAclRuleSrcMacAddressControl, f3L3TrafficIpv4RouteInterface=f3L3TrafficIpv4RouteInterface, f3L3TrafficIpInterfaceThresholdMonValue=f3L3TrafficIpInterfaceThresholdMonValue, cmL3FlowPointMultiCOSEnabled=cmL3FlowPointMultiCOSEnabled, f3L3FlowPointInnerVlanEthertype=f3L3FlowPointInnerVlanEthertype, f3L3TrafficIPIfDhcpEnabled=f3L3TrafficIPIfDhcpEnabled, f3L3TrafficBgpPeerAddressFamilyNextHopIpv4=f3L3TrafficBgpPeerAddressFamilyNextHopIpv4, f3L3TrafficOspfLinkLsDbAge=f3L3TrafficOspfLinkLsDbAge, f3L3QosPolicerHistoryAction=f3L3QosPolicerHistoryAction, f3L2A2NAclRuleTcpFlags=f3L2A2NAclRuleTcpFlags, f3L3TrafficBgpPeerSecondaryState=f3L3TrafficBgpPeerSecondaryState, cmL3QosPolicerHistoryTime=cmL3QosPolicerHistoryTime, f3L3TrafficIpv6StaticRouteRowStatus=f3L3TrafficIpv6StaticRouteRowStatus, f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx=f3L3TrafficIpInterfaceHistoryIcmpV6WONdpRx, f3L3FlowPointStatsAction=f3L3FlowPointStatsAction, f3L3TrafficIPv6AddrStorageType=f3L3TrafficIPv6AddrStorageType, f3L3TrafficIPv6InterfaceHistoryAction=f3L3TrafficIPv6InterfaceHistoryAction, cmL3QosShaperStatsBREDD=cmL3QosShaperStatsBREDD, f3L3QosPolicerHistoryIndex=f3L3QosPolicerHistoryIndex, f3L3TrafficIPIfActionX=f3L3TrafficIPIfActionX, f3L3QosPolicerStatsFMYD=f3L3QosPolicerStatsFMYD, f3L3TrafficIPv6IfDupAddrDetectControl=f3L3TrafficIPv6IfDupAddrDetectControl, f3L2N2AAclRuleThresholdVariable=f3L2N2AAclRuleThresholdVariable, f3L3TrafficOspfLinkLsDbId=f3L3TrafficOspfLinkLsDbId, f3L3TrafficIpv6RouteStatus=f3L3TrafficIpv6RouteStatus, f3L3QosPolicerThresholdIndex=f3L3QosPolicerThresholdIndex, f3VrfOspfRouterSlaacRoutesMetric=f3VrfOspfRouterSlaacRoutesMetric, f3L3TrafficIpInterfaceStatsNdpRSRx=f3L3TrafficIpInterfaceStatsNdpRSRx, f3VrfOspfRouterConvergenceTime=f3VrfOspfRouterConvergenceTime, cmL3FlowPointHistoryFrameRx=cmL3FlowPointHistoryFrameRx, f3IpPrefixListRowStatus=f3IpPrefixListRowStatus, f3L3TrafficBgpRouterTable=f3L3TrafficBgpRouterTable, cmL3QosPolicerStatsValid=cmL3QosPolicerStatsValid, f3L3FlowPointInnerTagMemberShipVlanId=f3L3FlowPointInnerTagMemberShipVlanId, f3L3QosShaperThresholdValueLo=f3L3QosShaperThresholdValueLo, f3L3TrafficIPv6InterfaceHistoryIndex=f3L3TrafficIPv6InterfaceHistoryIndex, f3L3FlowPointRefConnectGuardFlow=f3L3FlowPointRefConnectGuardFlow, f3L3FlowPointTable=f3L3FlowPointTable, f3L3TrafficBgpPeerAdminState=f3L3TrafficBgpPeerAdminState, cmL3FlowPointHistoryNoRouteDrop=cmL3FlowPointHistoryNoRouteDrop, f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType=f3L3TrafficBgpPeerAddressFamilyAdvPrefixStorageType, f3L2A2NAclRuleOuterVlanVIDLowLimit=f3L2A2NAclRuleOuterVlanVIDLowLimit, f3L3TrafficBgpPeerBgpSessionState=f3L3TrafficBgpPeerBgpSessionState, f3L3TrafficOspfAsLsDbChecksum=f3L3TrafficOspfAsLsDbChecksum, f3L3TrafficIPv6NdpStorageType=f3L3TrafficIPv6NdpStorageType, f3L3TrafficBgpRouteV2Table=f3L3TrafficBgpRouteV2Table, f3L3AclRuleRowStatus=f3L3AclRuleRowStatus, cmL3FlowPointFragmentedPktsFwdEnabled=cmL3FlowPointFragmentedPktsFwdEnabled, cmL3QosPolicerCIRHi=cmL3QosPolicerCIRHi, f3L3AclRuleActive=f3L3AclRuleActive, f3L2N2AAclRuleCosOverrideControl=f3L2N2AAclRuleCosOverrideControl, f3L3TrafficIPv6NdpIPv6Addr=f3L3TrafficIPv6NdpIPv6Addr, f3L3TrafficBgpPeerAddressFamilyRowStatus=f3L3TrafficBgpPeerAddressFamilyRowStatus, f3L2A2NAclRuleInnerVlanVIDControl=f3L2A2NAclRuleInnerVlanVIDControl, IfIpAddressSourceType=IfIpAddressSourceType, OspfAdjacencyState=OspfAdjacencyState, f3L3TrafficOspfV3NeighborRouterId=f3L3TrafficOspfV3NeighborRouterId, cmL3QosPolicerStatsTable=cmL3QosPolicerStatsTable, cmL3QosShaperBufferSize=cmL3QosShaperBufferSize, f3VrfTransportType=f3VrfTransportType, f3L2A2NAclRuleStatsIndex=f3L2A2NAclRuleStatsIndex, f3L2N2AAclRuleThresholdMonValue=f3L2N2AAclRuleThresholdMonValue, f3VrfOspfRouterSrControl=f3VrfOspfRouterSrControl, f3L3FlowPointHistoryFragmentedDropAcl=f3L3FlowPointHistoryFragmentedDropAcl, f3DhcpRelayAgentRowStatus=f3DhcpRelayAgentRowStatus, f3VrfStorageType=f3VrfStorageType, f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx=f3L3TrafficIpInterfaceStatsIcmpV6WONdpTx, cmL3QosShaperHistoryFTD=cmL3QosShaperHistoryFTD, f3L3TrafficBgpPeerKeepAliveTime=f3L3TrafficBgpPeerKeepAliveTime, f3L3QosShaperEIRLo=f3L3QosShaperEIRLo, f3L3TrafficIPv6InterfaceStatsNdpRATx=f3L3TrafficIPv6InterfaceStatsNdpRATx, f3L3QosShaperWredGreenMinQueueThreshold=f3L3QosShaperWredGreenMinQueueThreshold, f3L3TrafficOspfAreaType=f3L3TrafficOspfAreaType, f3L3TrafficIPInterfaceTable=f3L3TrafficIPInterfaceTable, f3L3TrafficIpInterfaceThresholdCrossingAlert=f3L3TrafficIpInterfaceThresholdCrossingAlert, f3L3TrafficOspfLinkLsDbChecksum=f3L3TrafficOspfLinkLsDbChecksum, f3L3TrafficOspfInterfaceOspfAuthType=f3L3TrafficOspfInterfaceOspfAuthType, f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60=f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60, f3L3TrafficBgpRouteTable=f3L3TrafficBgpRouteTable, f3L3TrafficIPv6InterfaceThresholdTable=f3L3TrafficIPv6InterfaceThresholdTable, f3L3QosPolicerTable=f3L3QosPolicerTable, f3VrfEcmpStaticRoutesMaximumPaths=f3VrfEcmpStaticRoutesMaximumPaths, f3L3AclRuleCosOverrideControl=f3L3AclRuleCosOverrideControl, f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx=f3L3TrafficIPv6InterfaceStatsIcmpV6WONdpRx, cmL3QosPolicerRank=cmL3QosPolicerRank, f3L2N2AAclRuleDstMacAddressControl=f3L2N2AAclRuleDstMacAddressControl, f3L3FlowPointHCosMaximumBwLo=f3L3FlowPointHCosMaximumBwLo, cmL3FlowPointStatsValid=cmL3FlowPointStatsValid, cmL3FlowPointWfqGroupEirLo=cmL3FlowPointWfqGroupEirLo, f3L3TrafficIPv6InterfaceHistoryNdpRSTx=f3L3TrafficIPv6InterfaceHistoryNdpRSTx, f3L3FlowPointStatsHopLimitDrop=f3L3FlowPointStatsHopLimitDrop, cmL3QosPolicerRowStatus=cmL3QosPolicerRowStatus, f3L3TrafficIpv6RouteGateway=f3L3TrafficIpv6RouteGateway, f3DhcpRelayAgentOperationalState=f3DhcpRelayAgentOperationalState, f3L3QosShaperCIRLo=f3L3QosShaperCIRLo, f3VrfOspfRouterSecondaryState=f3VrfOspfRouterSecondaryState, f3L3FlowPointWfqGroupEirLo=f3L3FlowPointWfqGroupEirLo, f3L3TrafficIpInterfaceHistoryValid=f3L3TrafficIpInterfaceHistoryValid, f3L3TrafficIPv6InterfaceStatsNdpRSTx=f3L3TrafficIPv6InterfaceStatsNdpRSTx, f3L3AclRuleStorageType=f3L3AclRuleStorageType, cmL3QosPolicerTable=cmL3QosPolicerTable, f3L3QosShaperBufferSize=f3L3QosShaperBufferSize, f3L3FlowPointWfqGroupCOS=f3L3FlowPointWfqGroupCOS, f3L2N2AAclRuleDynamicSrcIpControl=f3L2N2AAclRuleDynamicSrcIpControl, f3L3TrafficOspfLsDbEntry=f3L3TrafficOspfLsDbEntry, f3DhcpRelayAgentEntry=f3DhcpRelayAgentEntry, f3L3QosShaperStatsEntry=f3L3QosShaperStatsEntry, f3L3TrafficIPv6InterfaceHistoryNdpNSRx=f3L3TrafficIPv6InterfaceHistoryNdpNSRx, f3L3FlowPointThresholdValueHi=f3L3FlowPointThresholdValueHi, f3L3TrafficIPv6IfAction=f3L3TrafficIPv6IfAction, f3L2A2NAclRuleThresholdCrossingAlert=f3L2A2NAclRuleThresholdCrossingAlert, f3L3FlowPointWfqSegmentationCOS=f3L3FlowPointWfqSegmentationCOS, f3L3TrafficBgpPeerOperationalState=f3L3TrafficBgpPeerOperationalState, f3L3TrafficBgpRouterIBgpAdminDistance=f3L3TrafficBgpRouterIBgpAdminDistance, f3L3TrafficIpInterfaceStatsIntervalType=f3L3TrafficIpInterfaceStatsIntervalType, f3L2A2NAclRuleDstMacAddress=f3L2A2NAclRuleDstMacAddress, f3L3TrafficOspfLinkLsDbTable=f3L3TrafficOspfLinkLsDbTable, f3L3TrafficBgpPeerAddressFamilyNextHopIpv6=f3L3TrafficBgpPeerAddressFamilyNextHopIpv6, f3L3AclRuleThresholdEntry=f3L3AclRuleThresholdEntry, cmL3FlowPointHistoryTtlEqual1Drop=cmL3FlowPointHistoryTtlEqual1Drop, cmL3QosShaperHistoryAction=cmL3QosShaperHistoryAction, f3L3FlowPointHistoryAclRuleDrop=f3L3FlowPointHistoryAclRuleDrop, f3VrfOspfRouterBgpRoutesMetric=f3VrfOspfRouterBgpRoutesMetric, f3L3AclRuleSrcIpV6AddressPrefixLen=f3L3AclRuleSrcIpV6AddressPrefixLen, f3L3TrafficIpv6AllRouteNextHop=f3L3TrafficIpv6AllRouteNextHop, f3L2N2AAclRuleSrcIpV6Address=f3L2N2AAclRuleSrcIpV6Address, f3L3TrafficIPIfReachableTime=f3L3TrafficIPIfReachableTime, f3L3TrafficBgpRouteMetric=f3L3TrafficBgpRouteMetric, f3L3TrafficIPv6IfLinkLocalAddr=f3L3TrafficIPv6IfLinkLocalAddr, f3L3FlowPointStatsEntry=f3L3FlowPointStatsEntry, f3VrfLoopbackInterfaceEntry=f3VrfLoopbackInterfaceEntry, f3L3AclRuleDstMacAddressMask=f3L3AclRuleDstMacAddressMask, f3L3AclRuleSrcIpV6Address=f3L3AclRuleSrcIpV6Address, f3L2N2AAclRuleSrcMacAddressControl=f3L2N2AAclRuleSrcMacAddressControl, f3L3QosShaperHistoryFTD=f3L3QosShaperHistoryFTD, cmL3FlowPointStatsAclRuleDrop=cmL3FlowPointStatsAclRuleDrop, f3L3TrafficBgpGroup=f3L3TrafficBgpGroup, f3L3FlowPointOuterTagMemberShipEnabled=f3L3FlowPointOuterTagMemberShipEnabled, f3L3MIB=f3L3MIB, f3IpPrefixListIndex=f3IpPrefixListIndex, f3L3QosShaperStatsABRRL=f3L3QosShaperStatsABRRL, f3L3TrafficIpInterfaceHistoryNdpRSRx=f3L3TrafficIpInterfaceHistoryNdpRSRx, f3L3TrafficOspfInterfaceOspfInstanceId=f3L3TrafficOspfInterfaceOspfInstanceId, f3L2A2NAclRuleDstMacAddressControl=f3L2A2NAclRuleDstMacAddressControl)
mibBuilder.exportSymbols("F3-L3-MIB", OspfAsLsaType=OspfAsLsaType, f3L3TrafficOspfV3NeighborDeadTime=f3L3TrafficOspfV3NeighborDeadTime, f3L3TrafficIPv6AddrUnicastAddrPrefixLength=f3L3TrafficIPv6AddrUnicastAddrPrefixLength, f3L3TrafficIpInterfaceStatsNdpRARx=f3L3TrafficIpInterfaceStatsNdpRARx, f3L3TrafficBgpPeerDescription=f3L3TrafficBgpPeerDescription, f3L3TrafficBgpPeerUpdateSourceIp=f3L3TrafficBgpPeerUpdateSourceIp, f3L3TrafficIPv6IfMaxRAInterval=f3L3TrafficIPv6IfMaxRAInterval, f3VrfOspfRouterStaticRoutesRedistributeToOspf=f3VrfOspfRouterStaticRoutesRedistributeToOspf, f3L2N2AAclRuleInnerVlanPcpHighLimit=f3L2N2AAclRuleInnerVlanPcpHighLimit, f3VrfOspfRouterDhcpRoutesRedistributeToOspf=f3VrfOspfRouterDhcpRoutesRedistributeToOspf, f3VrfPingIpv4Destination=f3VrfPingIpv4Destination, f3L3FlowPointRowStatus=f3L3FlowPointRowStatus, f3L3TrafficBgpInRouteTable=f3L3TrafficBgpInRouteTable, f3L3TrafficIpv4StaticRouteMetric=f3L3TrafficIpv4StaticRouteMetric, f3IpPrefixListTable=f3IpPrefixListTable, f3L3TrafficIpv4RouteStatusX=f3L3TrafficIpv4RouteStatusX, f3L3TrafficIPInterfaceNdpType=f3L3TrafficIPInterfaceNdpType, f3L3QosShaperHistoryAction=f3L3QosShaperHistoryAction, f3L2A2NAclRuleSrcIpV6AddressPrefixLen=f3L2A2NAclRuleSrcIpV6AddressPrefixLen, cmL3QosPolicerCBS=cmL3QosPolicerCBS, f3L3FlowPointStatsIndex=f3L3FlowPointStatsIndex, f3L3TrafficOspfInterfaceTilfaProtectionType=f3L3TrafficOspfInterfaceTilfaProtectionType, cmL3QosPolicerHistoryIndex=cmL3QosPolicerHistoryIndex, f3L3TrafficIpv4AllRouteInterface=f3L3TrafficIpv4AllRouteInterface, f3L3TrafficBgpPeerConnectRetryTime=f3L3TrafficBgpPeerConnectRetryTime, f3L3TrafficIPv6InterfaceHistoryNdpRARx=f3L3TrafficIPv6InterfaceHistoryNdpRARx, f3L2A2NAclRuleDstPortControl=f3L2A2NAclRuleDstPortControl, f3L2N2AAclRuleEntry=f3L2N2AAclRuleEntry, f3L3TrafficOspfAreaIfMemberStorageType=f3L3TrafficOspfAreaIfMemberStorageType, f3L3TrafficBgpRouterEBgpAdminDistance=f3L3TrafficBgpRouterEBgpAdminDistance, f3L2A2NAclRuleStatsRuleMatch=f3L2A2NAclRuleStatsRuleMatch, f3L3TrafficIPv6IfDhcpEnabled=f3L3TrafficIPv6IfDhcpEnabled, f3L3AclRuleOuterVlanDeiControl=f3L3AclRuleOuterVlanDeiControl, f3VrfOspfRouterStorageType=f3VrfOspfRouterStorageType, f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute=f3L3TrafficBgpPeerAddressFamilyRedistDhcpRoute, f3L3TrafficIpInterfaceThresholdValueHi=f3L3TrafficIpInterfaceThresholdValueHi, f3L3PerfGroup=f3L3PerfGroup, f3L3TrafficIPv6IfDupAddrDetectRetransTimer=f3L3TrafficIPv6IfDupAddrDetectRetransTimer, f3DhcpV6RelayAgentAdminState=f3DhcpV6RelayAgentAdminState, cmL3FlowPointStatsFMY=cmL3FlowPointStatsFMY, TrafficIpRouteStatusType=TrafficIpRouteStatusType, f3L3AclRuleDynamicSrcIpControl=f3L3AclRuleDynamicSrcIpControl, f3L2N2AAclRuleDstPortLowLimit=f3L2N2AAclRuleDstPortLowLimit, f3L3QosShaperHistoryABRRL=f3L3QosShaperHistoryABRRL, cmL3FlowPointStatsFrameRx=cmL3FlowPointStatsFrameRx, PYSNMP_MODULE_ID=f3L3MIB, f3L3TrafficBgpRouteV2LocalPreference=f3L3TrafficBgpRouteV2LocalPreference, f3L3TrafficIPIfDefaultGateway=f3L3TrafficIPIfDefaultGateway, f3L3FlowPointInnerTagMemberShipEnabled=f3L3FlowPointInnerTagMemberShipEnabled, cmL3FlowPointHistoryAction=cmL3FlowPointHistoryAction, f3L3TrafficIpInterfaceStatsNdpRSTx=f3L3TrafficIpInterfaceStatsNdpRSTx, f3L3TrafficOspfAsLsDbId=f3L3TrafficOspfAsLsDbId, f3L3TrafficIpInterfaceThresholdEntry=f3L3TrafficIpInterfaceThresholdEntry, f3L2N2AAclRuleDstPortControl=f3L2N2AAclRuleDstPortControl, f3VrfOspfRouterTable=f3VrfOspfRouterTable, f3L3TrafficIpv6RouteTable=f3L3TrafficIpv6RouteTable, f3L3TrafficBgpPeerAddressFamilyIndex=f3L3TrafficBgpPeerAddressFamilyIndex, f3L3TrafficIpInterfaceStatsNdpNSRx=f3L3TrafficIpInterfaceStatsNdpNSRx, f3L3TrafficBgpRouteNextHop=f3L3TrafficBgpRouteNextHop, f3DhcpRelayAgentStorageType=f3DhcpRelayAgentStorageType, cmL3FlowPointThresholdValueHi=cmL3FlowPointThresholdValueHi, cmL3QosShaperThresholdMonValue=cmL3QosShaperThresholdMonValue, f3L3QosPolicerThresholdVariable=f3L3QosPolicerThresholdVariable, f3L2A2NAclRuleIpV6FlowLabelControl=f3L2A2NAclRuleIpV6FlowLabelControl, f3L3Groups=f3L3Groups, f3L2A2NAclRuleThresholdTable=f3L2A2NAclRuleThresholdTable, f3L3TrafficIPv6AddressEntry=f3L3TrafficIPv6AddressEntry, f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute=f3L3TrafficBgpPeerAddressFamilyRedistSlaacRoute, f3L2A2NAclRuleDstIpV6AddressControl=f3L2A2NAclRuleDstIpV6AddressControl, f3DhcpV6RelayAgentServerIpInteface=f3DhcpV6RelayAgentServerIpInteface, f3DhcpRelayAgentAdminState=f3DhcpRelayAgentAdminState, f3L3QosShaperStatsIntervalType=f3L3QosShaperStatsIntervalType, cmL3FlowPointHistoryIndex=cmL3FlowPointHistoryIndex, RouteFlags=RouteFlags, f3VrfPingIpv6Destination=f3VrfPingIpv6Destination, f3L3QosShaperAdminState=f3L3QosShaperAdminState, f3VrfOspfRouterBgpRoutesMetricType=f3VrfOspfRouterBgpRoutesMetricType, f3L3AclRuleStatsRuleMatch=f3L3AclRuleStatsRuleMatch, f3L3TrafficIPv6InterfaceStatsIndex=f3L3TrafficIPv6InterfaceStatsIndex, f3L3QosPolicerStatsABR=f3L3QosPolicerStatsABR, cmL3QosPolicerThresholdVariable=cmL3QosPolicerThresholdVariable, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2Enabled, f3L3TrafficIpInterfaceStatsValid=f3L3TrafficIpInterfaceStatsValid, cmL3QosPolicerStatsEntry=cmL3QosPolicerStatsEntry, f3L3AclRuleThresholdIndex=f3L3AclRuleThresholdIndex, f3L3TrafficIPIfOspfRtrPriority=f3L3TrafficIPIfOspfRtrPriority, f3L3QosPolicerStatsFMY=f3L3QosPolicerStatsFMY, f3L3FlowPointStatsFragmentedDropAcl=f3L3FlowPointStatsFragmentedDropAcl, cmL3FlowPointHCosGuaranteedBwHi=cmL3FlowPointHCosGuaranteedBwHi, f3L3TrafficBgpRouterConnectedRoutesRedistControl=f3L3TrafficBgpRouterConnectedRoutesRedistControl, cmL3FlowPointHistoryValid=cmL3FlowPointHistoryValid, f3L2A2NAclRuleThresholdMonValue=f3L2A2NAclRuleThresholdMonValue, cmL3FlowPointInnerTagMemberShipVlanId=cmL3FlowPointInnerTagMemberShipVlanId, f3L3TrafficIpInterfaceThresholdVariable=f3L3TrafficIpInterfaceThresholdVariable, f3L3TrafficIpInterfaceThresholdValueLo=f3L3TrafficIpInterfaceThresholdValueLo, f3L3QosShaperCIRHi=f3L3QosShaperCIRHi, f3L3TrafficIpv6StaticRouteMetric=f3L3TrafficIpv6StaticRouteMetric, f3L3TrafficIPv6NdpInterface=f3L3TrafficIPv6NdpInterface, f3L3TrafficIPIfMTU=f3L3TrafficIPIfMTU, f3L2A2NAclRuleIpv4PriorityControl=f3L2A2NAclRuleIpv4PriorityControl, f3L3FlowPointHistoryFrameRx=f3L3FlowPointHistoryFrameRx, f3L2N2AAclRuleInnerVlanPcpLowLimit=f3L2N2AAclRuleInnerVlanPcpLowLimit, f3L3AclRuleThresholdInterval=f3L3AclRuleThresholdInterval, cmL3QosPolicerEIRLo=cmL3QosPolicerEIRLo, BgpSessionStateType=BgpSessionStateType, cmL3QosPolicerEntry=cmL3QosPolicerEntry, f3L3QosPolicerRank=f3L3QosPolicerRank, f3L3QosShaperThresholdIndex=f3L3QosShaperThresholdIndex, f3L2N2AAclRuleIpv4PriorityLowLimit=f3L2N2AAclRuleIpv4PriorityLowLimit, f3L2A2NAclRuleOuterVlanPcpControl=f3L2A2NAclRuleOuterVlanPcpControl, f3L2N2AAclRuleOuterVlanVIDLowLimit=f3L2N2AAclRuleOuterVlanVIDLowLimit, cmL3QosShaperStatsValid=cmL3QosShaperStatsValid, f3L3AclRuleHistoryRuleMatch=f3L3AclRuleHistoryRuleMatch, f3L3TrafficIPv6PrefixValidLifeTime=f3L3TrafficIPv6PrefixValidLifeTime, f3L3TrafficIPInterfaceNdpStorageType=f3L3TrafficIPInterfaceNdpStorageType, f3L3FlowPointHistoryHopLimitDrop=f3L3FlowPointHistoryHopLimitDrop, f3L3QosPolicerStatsTable=f3L3QosPolicerStatsTable, f3L3QosPolicerColorMode=f3L3QosPolicerColorMode, f3L2A2NAclRuleIndex=f3L2A2NAclRuleIndex, f3L3QosShaperThresholdInterval=f3L3QosShaperThresholdInterval, f3L2N2AAclRuleOuterVlanPcpLowLimit=f3L2N2AAclRuleOuterVlanPcpLowLimit, f3L3TrafficIPInterfaceNdpTable=f3L3TrafficIPInterfaceNdpTable, f3VrfOspfRouterAdministrativeDistance=f3VrfOspfRouterAdministrativeDistance, f3L3TrafficBgpRouterIndex=f3L3TrafficBgpRouterIndex, f3L3TrafficIPIfIpv6LinkLocalAddrMode=f3L3TrafficIPIfIpv6LinkLocalAddrMode, f3L3TrafficIpv6AllRouteDest=f3L3TrafficIpv6AllRouteDest, f3L3TrafficBgpPeerAddressFamilyExtNextHopControl=f3L3TrafficBgpPeerAddressFamilyExtNextHopControl, f3L3TrafficBgpRouteV2Index=f3L3TrafficBgpRouteV2Index, f3L3TrafficIpInterfaceHistoryNdpRSTx=f3L3TrafficIpInterfaceHistoryNdpRSTx, f3L2A2NAclRuleDstMacAddressMask=f3L2A2NAclRuleDstMacAddressMask, cmL3QosPolicerThresholdTable=cmL3QosPolicerThresholdTable, f3L2A2NAclRuleOuterVlanDei=f3L2A2NAclRuleOuterVlanDei, f3VrfTrafficIpIfMemberTable=f3VrfTrafficIpIfMemberTable, f3L3AclRuleEntry=f3L3AclRuleEntry, cmL3QosShaperThresholdIndex=cmL3QosShaperThresholdIndex, f3L2N2AAclRuleThresholdEntry=f3L2N2AAclRuleThresholdEntry, cmL3FlowPointStatsIndex=cmL3FlowPointStatsIndex, f3L3TrafficBgpPeerUpdateSourceType=f3L3TrafficBgpPeerUpdateSourceType, f3L3QosPolicerHistoryABR=f3L3QosPolicerHistoryABR, cmL3FlowPointHistoryFMRD=cmL3FlowPointHistoryFMRD, f3L3TrafficBgpRouteV2Metric=f3L3TrafficBgpRouteV2Metric, cmL3QosShaperHistoryFR=cmL3QosShaperHistoryFR, f3L3TrafficIPv6AddrAssignMode=f3L3TrafficIPv6AddrAssignMode, f3L3QosShaperThresholdVariable=f3L3QosShaperThresholdVariable, f3L3AclRuleThresholdMonValue=f3L3AclRuleThresholdMonValue, f3L3QosShaperStatsFD=f3L3QosShaperStatsFD, f3L2A2NAclRuleHistoryAction=f3L2A2NAclRuleHistoryAction, f3L3TrafficBgpPeerRowStatus=f3L3TrafficBgpPeerRowStatus, f3L2N2AAclRuleRowStatus=f3L2N2AAclRuleRowStatus, f3L2A2NAclRuleSrcPortControl=f3L2A2NAclRuleSrcPortControl, f3L3AclRuleOuterVlanVIDHighLimit=f3L3AclRuleOuterVlanVIDHighLimit, f3VrfOspfRouterIsAsbr=f3VrfOspfRouterIsAsbr, f3L3FlowPointThresholdValueLo=f3L3FlowPointThresholdValueLo, f3L3TrafficIPIfOspfDeadInterval=f3L3TrafficIPIfOspfDeadInterval, f3L3TrafficIPv6InterfaceStatsNdpRSRx=f3L3TrafficIPv6InterfaceStatsNdpRSRx, f3L3TrafficIPv6IfRaManagedAddressConfigEnabled=f3L3TrafficIPv6IfRaManagedAddressConfigEnabled, f3L3TrafficIPIfDhcpRole=f3L3TrafficIPIfDhcpRole, f3L3FlowPointOperationalState=f3L3FlowPointOperationalState, f3L3TrafficIpv4RouteNextHop=f3L3TrafficIpv4RouteNextHop, cmL3FlowPointStatsFMRD=cmL3FlowPointStatsFMRD, cmL3QosShaperStatsABRRLR=cmL3QosShaperStatsABRRLR, f3L3FlowPointStatsIntervalType=f3L3FlowPointStatsIntervalType, cmL3QosShaperStatsIndex=cmL3QosShaperStatsIndex, cmL3QosShaperStatsFD=cmL3QosShaperStatsFD, f3L3FlowPointStatsFMY=f3L3FlowPointStatsFMY, f3L3TrafficIPv6InterfaceStatsDhcpV6Rx=f3L3TrafficIPv6InterfaceStatsDhcpV6Rx, f3L3AclRuleHistoryTime=f3L3AclRuleHistoryTime, f3L3TrafficBgpRIBRouteMetric=f3L3TrafficBgpRIBRouteMetric, f3L3FlowPointOuterVlanEthertype=f3L3FlowPointOuterVlanEthertype, f3L2A2NAclRuleIpV6FlowLabel=f3L2A2NAclRuleIpV6FlowLabel, f3L3TrafficBgpRouterRestartTime=f3L3TrafficBgpRouterRestartTime, f3L3TrafficIpv6RouteAdvertise=f3L3TrafficIpv6RouteAdvertise, f3L3TrafficIPInterfaceRAPrefixEntry=f3L3TrafficIPInterfaceRAPrefixEntry, cmL3FlowPointHistoryFragmentedDropAcl=cmL3FlowPointHistoryFragmentedDropAcl, cmL3Notifications=cmL3Notifications, f3L3FlowPointStatsFrameRx=f3L3FlowPointStatsFrameRx, f3L3QosPolicerStatsEntry=f3L3QosPolicerStatsEntry, f3VrfOspfRouterEcmpMaximumPaths=f3VrfOspfRouterEcmpMaximumPaths, f3L3AclRuleIpV6FlowLabel=f3L3AclRuleIpV6FlowLabel, EcmpDistributionType=EcmpDistributionType, f3L3AclRulePriorityHighLimit=f3L3AclRulePriorityHighLimit, f3L3TrafficIpv6RouteRowStatus=f3L3TrafficIpv6RouteRowStatus, f3L3TrafficIpv4AllRouteStatus=f3L3TrafficIpv4AllRouteStatus, f3L3TrafficIPv6NdpAge=f3L3TrafficIPv6NdpAge, f3L2A2NAclRuleDynamicSrcIpControl=f3L2A2NAclRuleDynamicSrcIpControl, f3VrfAccIsolationControlEnabled=f3VrfAccIsolationControlEnabled, f3L3TrafficOspfNeighborLocalInterfaceName=f3L3TrafficOspfNeighborLocalInterfaceName, f3L3FlowPointHCosMaximumBwHi=f3L3FlowPointHCosMaximumBwHi, f3L3TrafficOspfLinkLsDbInterfaceId=f3L3TrafficOspfLinkLsDbInterfaceId, f3L3TrafficIPv6InterfaceStatsValid=f3L3TrafficIPv6InterfaceStatsValid, cmL3FlowPointHCosMaximumBwLo=cmL3FlowPointHCosMaximumBwLo, f3L3TrafficIPInterfaceIPv6AddressUnicastAddr=f3L3TrafficIPInterfaceIPv6AddressUnicastAddr, f3L3TrafficOspfLsDbRouterId=f3L3TrafficOspfLsDbRouterId, cmL3QosPolicerEBS=cmL3QosPolicerEBS, f3L3TrafficIPIfDhcpHostNameEnabled=f3L3TrafficIPIfDhcpHostNameEnabled, cmL3FlowPointThresholdTable=cmL3FlowPointThresholdTable, f3L3TrafficIPv6IfDefaultGateway=f3L3TrafficIPv6IfDefaultGateway, f3L3TrafficBgpPeerAsNumber=f3L3TrafficBgpPeerAsNumber, f3L2N2AAclRuleSrcIpV6AddressPrefixLen=f3L2N2AAclRuleSrcIpV6AddressPrefixLen, f3L2N2AAclRuleSrcIpv4AddressLowLimit=f3L2N2AAclRuleSrcIpv4AddressLowLimit, f3L3TrafficIpv4StaticRouteStorageType=f3L3TrafficIpv4StaticRouteStorageType, f3L2A2NAclRuleProtocolControl=f3L2A2NAclRuleProtocolControl, cmL3FlowPointHistoryTime=cmL3FlowPointHistoryTime, cmL3QosPolicerHistoryValid=cmL3QosPolicerHistoryValid, f3L3TrafficBgpRIBRouteNetwork=f3L3TrafficBgpRIBRouteNetwork, f3L3TrafficIpv4RouteAdvertise=f3L3TrafficIpv4RouteAdvertise, f3L3QosShaperStatsBTD=f3L3QosShaperStatsBTD, cmL3FlowPointHistoryFMY=cmL3FlowPointHistoryFMY, cmL3QosShaperThresholdValueLo=cmL3QosShaperThresholdValueLo, f3L3TrafficIPv6IfSecondaryState=f3L3TrafficIPv6IfSecondaryState, f3L3TrafficIPv6IfReachableTime=f3L3TrafficIPv6IfReachableTime, OspfAuthType=OspfAuthType, f3L3TrafficIPIfDhcpClassIdEnabled=f3L3TrafficIPIfDhcpClassIdEnabled, f3L3TrafficOspfAreaId=f3L3TrafficOspfAreaId, f3L2A2NAclRuleOuterVlanDeiControl=f3L2A2NAclRuleOuterVlanDeiControl, f3L3QosPolicerEIRMaxLo=f3L3QosPolicerEIRMaxLo, f3L2N2AAclRuleHistoryValid=f3L2N2AAclRuleHistoryValid, f3VrfOspfRouterStaticRoutesMetric=f3VrfOspfRouterStaticRoutesMetric, f3L3TrafficIpInterfaceStatsIndex=f3L3TrafficIpInterfaceStatsIndex, f3L3QosPolicerHistoryEntry=f3L3QosPolicerHistoryEntry, f3L3AclRuleIpv4PriorityControl=f3L3AclRuleIpv4PriorityControl, f3L3TrafficIpInterfaceHistoryDhcpTx=f3L3TrafficIpInterfaceHistoryDhcpTx, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub2, f3L3TrafficIpv4RouteDest=f3L3TrafficIpv4RouteDest, f3L3AclRuleParentIndex=f3L3AclRuleParentIndex, f3L3TrafficIpInterfaceThresholdIndex=f3L3TrafficIpInterfaceThresholdIndex, f3L3QosShaperStatsBREDD=f3L3QosShaperStatsBREDD, f3L3AclRuleSrcPortLowLimit=f3L3AclRuleSrcPortLowLimit, cmL3FlowPointDscpOverwriteControl=cmL3FlowPointDscpOverwriteControl, f3VrfEcmpDistribution=f3VrfEcmpDistribution, f3L3AclRuleDstMacAddressControl=f3L3AclRuleDstMacAddressControl, f3L3TrafficIPIfDhcpHostName=f3L3TrafficIPIfDhcpHostName, f3L3QosPolicerThresholdEntry=f3L3QosPolicerThresholdEntry, f3L3QosShaperHistoryTime=f3L3QosShaperHistoryTime, f3L3TrafficIpInterfaceHistoryIndex=f3L3TrafficIpInterfaceHistoryIndex, cmL3FlowPointPriMapProfile=cmL3FlowPointPriMapProfile, f3L3TrafficBgpRouteEntry=f3L3TrafficBgpRouteEntry, f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry=f3DhcpV6RelayAgentClientTrafficIpIfMemberEntry, f3L3TrafficIPv6PrefixIndex=f3L3TrafficIPv6PrefixIndex, f3L2N2AAclRuleSrcMacAddress=f3L2N2AAclRuleSrcMacAddress, f3L3TrafficOspfLinkLsDbType=f3L3TrafficOspfLinkLsDbType, f3L3QosShaperWredYellowMaxQueueThreshold=f3L3QosShaperWredYellowMaxQueueThreshold, cmL3QosShaperEIRHi=cmL3QosShaperEIRHi, cmL3FlowPointHistoryTable=cmL3FlowPointHistoryTable, cmL3QosShaperHistoryBT=cmL3QosShaperHistoryBT, f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute=f3L3TrafficBgpPeerAddressFamilyRedistConnectedRoute, f3DhcpRelayAgentIpVersion=f3DhcpRelayAgentIpVersion, TrafficIpRouteStatus=TrafficIpRouteStatus, f3VrfAction=f3VrfAction, f3L3QosShaperStatsABRRLR=f3L3QosShaperStatsABRRLR, f3L2N2AAclRuleEtherType=f3L2N2AAclRuleEtherType, f3L3TrafficBgpPeerUpdateSourceIpv6=f3L3TrafficBgpPeerUpdateSourceIpv6, cmL3FlowPointThresholdEntry=cmL3FlowPointThresholdEntry, f3L3TrafficIpInterfaceHistoryNdpNARx=f3L3TrafficIpInterfaceHistoryNdpNARx)
mibBuilder.exportSymbols("F3-L3-MIB", f3IpPrefixRowStatus=f3IpPrefixRowStatus, f3L3TrafficIPIfDupAddrDetectControl=f3L3TrafficIPIfDupAddrDetectControl, cmL3QosPolicerThresholdValueHi=cmL3QosPolicerThresholdValueHi, f3L3TrafficIPv6IfOperationalState=f3L3TrafficIPv6IfOperationalState, f3IpPrefixPriority=f3IpPrefixPriority, f3L3TrafficIPInterfaceNdpMacAddress=f3L3TrafficIPInterfaceNdpMacAddress, f3L3QosPolicerStatsFMG=f3L3QosPolicerStatsFMG, cmL3QosPolicerStatsFMG=cmL3QosPolicerStatsFMG, f3L3TrafficIpv4AllRouteMetric=f3L3TrafficIpv4AllRouteMetric, f3L3TrafficIPv6Group=f3L3TrafficIPv6Group, f3L3AclRulePriorityControl=f3L3AclRulePriorityControl, Ipv6AddressAssignMode=Ipv6AddressAssignMode, f3L2A2NAclRuleDynamicSrcMacAddressControl=f3L2A2NAclRuleDynamicSrcMacAddressControl, f3L3FlowPointStorageType=f3L3FlowPointStorageType, f3L3TrafficOspfInterfaceId=f3L3TrafficOspfInterfaceId, f3L2A2NAclRuleStatsIntervalType=f3L2A2NAclRuleStatsIntervalType, cmL3FlowPointOuterTagMemberShipEnabled=cmL3FlowPointOuterTagMemberShipEnabled, f3L3TrafficIPIfOspfAreaId=f3L3TrafficIPIfOspfAreaId, f3L3TrafficIpv4StaticRouteTable=f3L3TrafficIpv4StaticRouteTable, f3L2N2AAclRuleDynamicSrcMacAddressControl=f3L2N2AAclRuleDynamicSrcMacAddressControl, f3VrfActionX=f3VrfActionX, f3L3TrafficIPv6InterfaceThresholdCrossingAlert=f3L3TrafficIPv6InterfaceThresholdCrossingAlert, f3L3AclRuleThresholdVariable=f3L3AclRuleThresholdVariable, f3L3TrafficBgpRIBRouteEntry=f3L3TrafficBgpRIBRouteEntry, f3L3TrafficOspfInterfacePassiveControl=f3L3TrafficOspfInterfacePassiveControl, cmL3QosShaperCIRLo=cmL3QosShaperCIRLo, f3L3TrafficIPv6IfDhcpRole=f3L3TrafficIPv6IfDhcpRole, f3L3TrafficIPIfDhcpHostNameType=f3L3TrafficIPIfDhcpHostNameType, f3L3TrafficOspfAreaRowStatus=f3L3TrafficOspfAreaRowStatus, f3L3TrafficIPv6PrefixRowStatus=f3L3TrafficIPv6PrefixRowStatus, cmL3QosShaperHistoryEntry=cmL3QosShaperHistoryEntry, cmL3QosPolicerEIRHi=cmL3QosPolicerEIRHi, f3L3TrafficOspfLinkLsDbRtrPriority=f3L3TrafficOspfLinkLsDbRtrPriority, f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled=f3L3TrafficIPIfIpv6StatelessAddrAutoconfigEnabled, f3L3AclRuleOuterVlanPcpControl=f3L3AclRuleOuterVlanPcpControl, f3L3TrafficOspfLsDbAge=f3L3TrafficOspfLsDbAge, f3L3FlowPointHistoryIndex=f3L3FlowPointHistoryIndex, f3L3TrafficIPv6IfRaDefaultRouterPreference=f3L3TrafficIPv6IfRaDefaultRouterPreference, cmL3FlowPointIndex=cmL3FlowPointIndex, f3L3TrafficArpRowStatus=f3L3TrafficArpRowStatus, f3L3AclRuleStatsAction=f3L3AclRuleStatsAction, f3L2N2AAclRuleIpV6FlowLabel=f3L2N2AAclRuleIpV6FlowLabel, f3L3TrafficOspfV3NeighborTable=f3L3TrafficOspfV3NeighborTable, f3L3TrafficIpv4AllRouteDest=f3L3TrafficIpv4AllRouteDest, f3L3FlowPointStatsFrameTx=f3L3FlowPointStatsFrameTx, f3DhcpRelayAgentTable=f3DhcpRelayAgentTable, f3VrfOspfRouterConnectedRoutesMetric=f3VrfOspfRouterConnectedRoutesMetric, f3L3TrafficBgpRouterRowStatus=f3L3TrafficBgpRouterRowStatus, f3L3TrafficBgpPeerAddressFamilyAdvPrefix=f3L3TrafficBgpPeerAddressFamilyAdvPrefix, cmL3FlowPointRowStatus=cmL3FlowPointRowStatus, f3L3TrafficIpv6StaticRouteTable=f3L3TrafficIpv6StaticRouteTable, f3L3TrafficIPv6PrefixPreferredLifeTime=f3L3TrafficIPv6PrefixPreferredLifeTime, cmL3QosShaperThresholdTable=cmL3QosShaperThresholdTable, f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime=f3L3TrafficIPInterfaceRAPrefixPreferredLifeTime, f3L3TrafficIPIfStorageType=f3L3TrafficIPIfStorageType, f3L3QosShaperStatsBT=f3L3QosShaperStatsBT, f3VrfOperationalState=f3VrfOperationalState, f3L3TrafficIPv6IfIndex=f3L3TrafficIPv6IfIndex, cmL3QosShaperAdminState=cmL3QosShaperAdminState, f3DhcpV6RelayAgentAlias=f3DhcpV6RelayAgentAlias, cmL3QosShaperStatsIntervalType=cmL3QosShaperStatsIntervalType, f3L3AclRuleThresholdTable=f3L3AclRuleThresholdTable, f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled=f3L3TrafficIPv6IfRaDhcpMoreConfigEnabled, f3L3FlowPointIndex=f3L3FlowPointIndex, f3L3QosPolicerHistoryTable=f3L3QosPolicerHistoryTable, f3L3TrafficIpv4StaticRouteNextHop=f3L3TrafficIpv4StaticRouteNextHop, f3L3TrafficBgpRIBRouteTable=f3L3TrafficBgpRIBRouteTable, f3L3QosShaperStorageType=f3L3QosShaperStorageType, f3L3TrafficIPv6NdpEntry=f3L3TrafficIPv6NdpEntry, f3L2A2NAclRuleSrcPortHighLimit=f3L2A2NAclRuleSrcPortHighLimit, f3L2N2AAclRuleTcpFlagsControl=f3L2N2AAclRuleTcpFlagsControl, f3L3TrafficOspfV3NeighborLocalInterfaceName=f3L3TrafficOspfV3NeighborLocalInterfaceName, f3L2N2AAclRuleThresholdValueHi=f3L2N2AAclRuleThresholdValueHi, f3L3AclRuleIpV6FlowLabelControl=f3L3AclRuleIpV6FlowLabelControl, cmL3FlowPointEntry=cmL3FlowPointEntry, f3L3TrafficIPIfProxyArpEnabled=f3L3TrafficIPIfProxyArpEnabled, f3L3TrafficOspfAreaSimpleAuthKey=f3L3TrafficOspfAreaSimpleAuthKey, cmL3FlowPointWfqSegmentationCOS=cmL3FlowPointWfqSegmentationCOS, f3L3TrafficOspfInterfaceEntry=f3L3TrafficOspfInterfaceEntry, f3L3FlowPointIpVersion=f3L3FlowPointIpVersion, f3VrfPingResult=f3VrfPingResult, f3L2N2AAclRuleOuterVlanVIDHighLimit=f3L2N2AAclRuleOuterVlanVIDHighLimit, f3VrfSecondaryState=f3VrfSecondaryState, f3L3TrafficIPv6AddrIndex=f3L3TrafficIPv6AddrIndex, f3L3TrafficIPInterfaceNdpEntry=f3L3TrafficIPInterfaceNdpEntry, f3L3TrafficIPv6InterfaceStatsNdpRARx=f3L3TrafficIPv6InterfaceStatsNdpRARx, f3L3QosShaperTable=f3L3QosShaperTable, f3L2A2NAclRuleCosOverrideControl=f3L2A2NAclRuleCosOverrideControl, f3L2N2AAclRuleStatsTable=f3L2N2AAclRuleStatsTable, IpInterfaceType=IpInterfaceType, f3L2A2NAclRuleDstPortLowLimit=f3L2A2NAclRuleDstPortLowLimit, f3L3TrafficOspfAreaIfMemberRowStatus=f3L3TrafficOspfAreaIfMemberRowStatus, f3L3QosPolicerStorageType=f3L3QosPolicerStorageType, f3L3FlowPointEntry=f3L3FlowPointEntry, f3L3TrafficBgpPeerTimeSinceDownTransition=f3L3TrafficBgpPeerTimeSinceDownTransition, f3L3QosShaperStatsTable=f3L3QosShaperStatsTable, f3L3TrafficOspfLsDbAreaId=f3L3TrafficOspfLsDbAreaId, f3L2N2AAclRuleInnerVlanVIDLowLimit=f3L2N2AAclRuleInnerVlanVIDLowLimit, f3L3TrafficOspfNeighborTable=f3L3TrafficOspfNeighborTable, f3L3TrafficOspfAreaIfMemberObject=f3L3TrafficOspfAreaIfMemberObject, TilfaProtectionType=TilfaProtectionType, f3L3TrafficIPv6IfRouterLifeTime=f3L3TrafficIPv6IfRouterLifeTime, f3L3TrafficIpv6AllRouteStatus=f3L3TrafficIpv6AllRouteStatus, f3L3TrafficIPIfOspfIfType=f3L3TrafficIPIfOspfIfType, f3L3TrafficIPv6NdpReachabilityState=f3L3TrafficIPv6NdpReachabilityState, f3L3AclRuleStatsIndex=f3L3AclRuleStatsIndex, f3L3FlowPointHistoryFrameTx=f3L3FlowPointHistoryFrameTx, f3L3AclRuleHistoryAction=f3L3AclRuleHistoryAction, f3L3TrafficIPv6InterfaceHistoryNdpNARx=f3L3TrafficIPv6InterfaceHistoryNdpNARx, cmL3QosPolicerThresholdMonValue=cmL3QosPolicerThresholdMonValue, f3VrfOspfRouterOperationalState=f3VrfOspfRouterOperationalState, f3L3TrafficArpStorageType=f3L3TrafficArpStorageType, f3L3TrafficIPIfOspfCost=f3L3TrafficIPIfOspfCost, f3L2A2NAclRuleInnerVlanPcpHighLimit=f3L2A2NAclRuleInnerVlanPcpHighLimit, f3L3Compliances=f3L3Compliances, f3L3TrafficIPv6PrefixEntry=f3L3TrafficIPv6PrefixEntry, f3IpPrefixDisposition=f3IpPrefixDisposition, f3L3TrafficIpInterfaceStatsEntry=f3L3TrafficIpInterfaceStatsEntry, f3L3QosPolicerAlgorithm=f3L3QosPolicerAlgorithm, f3L3TrafficBgpPeerMultihopTtl=f3L3TrafficBgpPeerMultihopTtl, f3L2A2NAclRuleThresholdVariable=f3L2A2NAclRuleThresholdVariable, f3L3TrafficBgpPeerPeerRestarting=f3L3TrafficBgpPeerPeerRestarting, f3L2N2AAclRuleOuterVlanDei=f3L2N2AAclRuleOuterVlanDei, f3L3AclRuleIndex=f3L3AclRuleIndex, cmL3QosPolicerHistoryABR=cmL3QosPolicerHistoryABR, f3L3TrafficBgpPeerLocalPreference=f3L3TrafficBgpPeerLocalPreference, f3L3QosShaperEIRHi=f3L3QosShaperEIRHi, f3L3TrafficIPIfOperationalState=f3L3TrafficIPIfOperationalState, TrafficOspfAreaType=TrafficOspfAreaType, f3VrfOspfRouterConnectedRoutesRedistributeToOspf=f3VrfOspfRouterConnectedRoutesRedistributeToOspf, f3L2N2AAclRuleThresholdCrossingAlert=f3L2N2AAclRuleThresholdCrossingAlert, f3L3TrafficIpInterfaceHistoryIcmpTx=f3L3TrafficIpInterfaceHistoryIcmpTx, cmL3QosPolicerHistoryAction=cmL3QosPolicerHistoryAction, f3L3TrafficIpInterfaceHistoryTime=f3L3TrafficIpInterfaceHistoryTime, f3VrfAdminState=f3VrfAdminState, f3L3TrafficOspfNeighborRole=f3L3TrafficOspfNeighborRole, cmL3FlowPointHistoryAclDropNoMatch=cmL3FlowPointHistoryAclDropNoMatch, f3L2N2AAclRuleStatsIntervalType=f3L2N2AAclRuleStatsIntervalType, f3L3QosPolicerCIRMaxHi=f3L3QosPolicerCIRMaxHi, f3L2A2NAclRuleStorageType=f3L2A2NAclRuleStorageType, f3L3TrafficBgpPeerIpVersion=f3L3TrafficBgpPeerIpVersion, SrSidType=SrSidType, f3L3TrafficIpInterfaceHistoryDhcpRx=f3L3TrafficIpInterfaceHistoryDhcpRx, f3L3QosPolicerEnvelopeObject=f3L3QosPolicerEnvelopeObject, f3L3TrafficIpv6RouteType=f3L3TrafficIpv6RouteType, cmL3QosShaperHistoryValid=cmL3QosShaperHistoryValid, cmL3QosPolicerEnvelopeObject=cmL3QosPolicerEnvelopeObject, f3L3QosPolicerStatsValid=f3L3QosPolicerStatsValid, f3L3TrafficIPInterfaceRAPrefixIndex=f3L3TrafficIPInterfaceRAPrefixIndex, f3L3FlowPointHistoryFMG=f3L3FlowPointHistoryFMG, f3L3TrafficIpInterfaceStatsIcmpTx=f3L3TrafficIpInterfaceStatsIcmpTx, f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute=f3L3TrafficBgpPeerAddressFamilyRedistOspfRoute, f3L3AclRuleSummary=f3L3AclRuleSummary, f3L2N2AAclRuleOperation=f3L2N2AAclRuleOperation, f3L3TrafficBgpRouterAdminState=f3L3TrafficBgpRouterAdminState, f3L3AclRuleSrcPortHighLimit=f3L3AclRuleSrcPortHighLimit, f3L3QosShaperStatsFTD=f3L3QosShaperStatsFTD, f3L3AclRuleOuterVlanDei=f3L3AclRuleOuterVlanDei, f3VrfOspfRouterAdminState=f3VrfOspfRouterAdminState, f3L3TrafficIpInterfaceHistoryArpReqTx=f3L3TrafficIpInterfaceHistoryArpReqTx, f3L3TrafficOspfV3NeighborInterfaceId=f3L3TrafficOspfV3NeighborInterfaceId, Ipv6LinkLocalAddressMode=Ipv6LinkLocalAddressMode, f3L2N2AAclRuleDstIpv4AddressLowLimit=f3L2N2AAclRuleDstIpv4AddressLowLimit, f3L3TrafficIPInterfaceIPv6AddressStorageType=f3L3TrafficIPInterfaceIPv6AddressStorageType, f3L3TrafficIpv4RouteType=f3L3TrafficIpv4RouteType, f3L3QosShaperHistoryBR=f3L3QosShaperHistoryBR, f3L3TrafficIPIfRaManagedAddressConfigEnabled=f3L3TrafficIPIfRaManagedAddressConfigEnabled, cmL3FlowPointHCosMaximumBwHi=cmL3FlowPointHCosMaximumBwHi, f3L2N2AAclRuleDstIpv4AddressHighLimit=f3L2N2AAclRuleDstIpv4AddressHighLimit, f3L3TrafficIPIfRaDhcpMoreConfigEnabled=f3L3TrafficIPIfRaDhcpMoreConfigEnabled, f3DhcpRelayAgentTrafficIpIfMemberTable=f3DhcpRelayAgentTrafficIpIfMemberTable, cmL3QosPolicerThresholdInterval=cmL3QosPolicerThresholdInterval, f3L3TrafficIpInterfaceStatsNdpNARx=f3L3TrafficIpInterfaceStatsNdpNARx, f3L3TrafficIpv4StaticRouteInterface=f3L3TrafficIpv4StaticRouteInterface, f3L3TrafficIpv4StaticRouteSourceForwardingEnable=f3L3TrafficIpv4StaticRouteSourceForwardingEnable, f3L3FlowPointHistoryTtlEqual1Drop=f3L3FlowPointHistoryTtlEqual1Drop, IpPrefixDispositionType=IpPrefixDispositionType, f3IpPrefixEntry=f3IpPrefixEntry, f3L3TrafficIPIfMask=f3L3TrafficIPIfMask, f3L3FlowPointStatsFMG=f3L3FlowPointStatsFMG, f3L3QosShaperHistoryBTD=f3L3QosShaperHistoryBTD, f3DhcpV6RelayAgentRowStatus=f3DhcpV6RelayAgentRowStatus, f3L2N2AAclRuleSrcIpv4AddressHighLimit=f3L2N2AAclRuleSrcIpv4AddressHighLimit, f3L3AclRuleProtocolNumber=f3L3AclRuleProtocolNumber, f3L3FlowPointPriMapProfile=f3L3FlowPointPriMapProfile, f3L3QosPolicerThresholdTable=f3L3QosPolicerThresholdTable, f3L3FlowPointStatsValid=f3L3FlowPointStatsValid, cmL3FlowPointHistoryEntry=cmL3FlowPointHistoryEntry, f3L3TrafficIpv4RouteSourceForwardingEnable=f3L3TrafficIpv4RouteSourceForwardingEnable, f3L2N2AAclRuleOuterVlanPcpHighLimit=f3L2N2AAclRuleOuterVlanPcpHighLimit, cmL3QosPolicerThresholdEntry=cmL3QosPolicerThresholdEntry, f3L2N2AAclRuleEtherTypeControl=f3L2N2AAclRuleEtherTypeControl, cmL3FlowPointStatsEntry=cmL3FlowPointStatsEntry, cmL3QosShaperCIRHi=cmL3QosShaperCIRHi, f3L2N2AAclRuleSrcPortControl=f3L2N2AAclRuleSrcPortControl, cmL3QosShaperStatsABRRL=cmL3QosShaperStatsABRRL, f3L3TrafficOspfInterfaceOspfRetransmitInterval=f3L3TrafficOspfInterfaceOspfRetransmitInterval, f3IpPrefixListDefaultDisposition=f3IpPrefixListDefaultDisposition, cmL3FlowPointEgressShapingType=cmL3FlowPointEgressShapingType, f3L2A2NAclRuleStatsAction=f3L2A2NAclRuleStatsAction, BgpGracefulRestartControlType=BgpGracefulRestartControlType, f3L3TrafficBgpPeerAuthenticationKey=f3L3TrafficBgpPeerAuthenticationKey, f3L3TrafficIpv6StaticRouteEntry=f3L3TrafficIpv6StaticRouteEntry, f3VrfOspfRouterSlaacRoutesMetricType=f3VrfOspfRouterSlaacRoutesMetricType, cmL3FlowPointAdminState=cmL3FlowPointAdminState, f3L3FlowPointThresholdInterval=f3L3FlowPointThresholdInterval, f3L2N2AAclRuleIpv4PriorityHighLimit=f3L2N2AAclRuleIpv4PriorityHighLimit, cmL3QosPolicerStatsIntervalType=cmL3QosPolicerStatsIntervalType, f3L3QosPolicerCIRMaxLo=f3L3QosPolicerCIRMaxLo, f3L3AclRulePriority=f3L3AclRulePriority, f3L3TrafficIPInterfaceNdpInterface=f3L3TrafficIPInterfaceNdpInterface, f3L3TrafficIpInterfaceStatsDhcpTx=f3L3TrafficIpInterfaceStatsDhcpTx, f3L3FlowPointHistoryFMY=f3L3FlowPointHistoryFMY, f3L3TrafficIPv6IfLinkLocalAddrMode=f3L3TrafficIPv6IfLinkLocalAddrMode, f3L2A2NAclRuleOuterVlanVIDHighLimit=f3L2A2NAclRuleOuterVlanVIDHighLimit, f3L3TrafficIPIfIpMode=f3L3TrafficIPIfIpMode, f3L3TrafficIPv6InterfaceStatsTable=f3L3TrafficIPv6InterfaceStatsTable, f3L3QosShaperCOS=f3L3QosShaperCOS, f3L3TrafficIpInterfaceHistoryNdpRATx=f3L3TrafficIpInterfaceHistoryNdpRATx, f3L2N2AAclRuleThresholdInterval=f3L2N2AAclRuleThresholdInterval, f3L3TrafficIpv4StaticRouteMask=f3L3TrafficIpv4StaticRouteMask, f3L3TrafficIPv6InterfaceHistoryValid=f3L3TrafficIPv6InterfaceHistoryValid, f3L3TrafficIPIfOspfBackupDesignatedRouterId=f3L3TrafficIPIfOspfBackupDesignatedRouterId, f3L3TrafficIPIfRouterLifeTime=f3L3TrafficIPIfRouterLifeTime, f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx=f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpRx, cmL3QosShaperWfqWeight=cmL3QosShaperWfqWeight, f3L3FlowPointThresholdTable=f3L3FlowPointThresholdTable, f3L2N2AAclRuleDstIpV6Address=f3L2N2AAclRuleDstIpV6Address, f3L3AclRuleThresholdValueLo=f3L3AclRuleThresholdValueLo, f3L3Compliance=f3L3Compliance, f3L2A2NAclRulePriority=f3L2A2NAclRulePriority, f3L2N2AAclRuleStatsEntry=f3L2N2AAclRuleStatsEntry, f3L3TrafficBgpPeerEntry=f3L3TrafficBgpPeerEntry, cmL3FlowPointSecondaryState=cmL3FlowPointSecondaryState, f3L3AclRuleCOS=f3L3AclRuleCOS, f3L3QosShaperStatsFR=f3L3QosShaperStatsFR, f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable=f3L3TrafficBgpPeerAddressFamilyAdvPrefixTable, f3L3TrafficIPv6InterfaceThresholdMonValue=f3L3TrafficIPv6InterfaceThresholdMonValue, f3L3QosShaperThresholdCrossingAlert=f3L3QosShaperThresholdCrossingAlert, f3L3TrafficIpInterfaceHistoryNdpNSTx=f3L3TrafficIpInterfaceHistoryNdpNSTx, f3L3AclRuleSrcPortControl=f3L3AclRuleSrcPortControl, f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled=f3L3TrafficIPv6IfDhcpRapidCommitControlEnabled, f3L3TrafficOspfAsLsDbTable=f3L3TrafficOspfAsLsDbTable, f3L3AclRuleStatsIntervalType=f3L3AclRuleStatsIntervalType, f3L3AclRuleInnerVlanPcpHighLimit=f3L3AclRuleInnerVlanPcpHighLimit, f3L3TrafficBgpPeerUpdateSourceInterface=f3L3TrafficBgpPeerUpdateSourceInterface, f3L3QosPolicerEIRHi=f3L3QosPolicerEIRHi, f3L3AclRuleSrcIpV6AddressControl=f3L3AclRuleSrcIpV6AddressControl, f3L3TrafficArpTable=f3L3TrafficArpTable, f3IpPrefixListEntry=f3IpPrefixListEntry, f3L3QosPolicerThresholdValueLo=f3L3QosPolicerThresholdValueLo, f3L3FlowPointCOS=f3L3FlowPointCOS, f3L3TrafficIPIfIcmpErrorMsgRateLimit=f3L3TrafficIPIfIcmpErrorMsgRateLimit, f3VrfRowStatus=f3VrfRowStatus)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3TrafficOspfV3NeighborPriority=f3L3TrafficOspfV3NeighborPriority, f3L3TrafficIPIfOspfSimpleAuthKey=f3L3TrafficIPIfOspfSimpleAuthKey, f3L2N2AAclRuleSrcIpV6AddressControl=f3L2N2AAclRuleSrcIpV6AddressControl, f3L3QosShaperStatsValid=f3L3QosShaperStatsValid, f3L3TrafficIpInterfaceHistoryArpReqRx=f3L3TrafficIpInterfaceHistoryArpReqRx, f3L3TrafficOspfInterfaceRowStatus=f3L3TrafficOspfInterfaceRowStatus, cmL3QosShaperThresholdValueHi=cmL3QosShaperThresholdValueHi, f3L3TrafficIPIfOspfHelloInterval=f3L3TrafficIPIfOspfHelloInterval, f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control=f3L3TrafficIPIfDhcpRelayVendorClassiDOpt60Control, f3L3TrafficIpInterfaceStatsArpReplyRx=f3L3TrafficIpInterfaceStatsArpReplyRx, f3L3FlowPointHistoryTable=f3L3FlowPointHistoryTable, f3L2N2AAclRuleDstPortHighLimit=f3L2N2AAclRuleDstPortHighLimit, f3VrfOspfRouterDhcpRoutesMetricType=f3VrfOspfRouterDhcpRoutesMetricType, f3L2A2NAclRuleHistoryTable=f3L2A2NAclRuleHistoryTable, f3L3TrafficIPIfMaxRAInterval=f3L3TrafficIPIfMaxRAInterval, f3L3TrafficIPInterfaceIPv6AddressIndex=f3L3TrafficIPInterfaceIPv6AddressIndex, cmL3QosPolicerPolicingEnabled=cmL3QosPolicerPolicingEnabled, f3L2A2NAclRuleThresholdInterval=f3L2A2NAclRuleThresholdInterval, f3L3TrafficOspfInterfaceLinkLsaSuppression=f3L3TrafficOspfInterfaceLinkLsaSuppression, f3L3TrafficOspfNeighborState=f3L3TrafficOspfNeighborState, f3L3AclRuleInnerVlanPcpControl=f3L3AclRuleInnerVlanPcpControl, f3L3TrafficOspfLinkLsDbLinkLocalAddress=f3L3TrafficOspfLinkLsDbLinkLocalAddress, f3L3QosPolicerThresholdInterval=f3L3QosPolicerThresholdInterval, f3L2A2NAclRuleSrcIpv4AddressLowLimit=f3L2A2NAclRuleSrcIpv4AddressLowLimit, cmL3QosShaperThresholdInterval=cmL3QosShaperThresholdInterval, f3L3FlowPointPortIndex=f3L3FlowPointPortIndex, f3L2N2AAclRuleSrcIpv4AddressControl=f3L2N2AAclRuleSrcIpv4AddressControl, f3L3TrafficIPv6InterfaceThresholdValueLo=f3L3TrafficIPv6InterfaceThresholdValueLo, f3VrfOspfRouterStaticRoutesMetricType=f3VrfOspfRouterStaticRoutesMetricType, f3L3TrafficIpv4StaticRouteEntry=f3L3TrafficIpv4StaticRouteEntry, f3IpPrefixTable=f3IpPrefixTable, f3L3QosShaperHistoryBREDD=f3L3QosShaperHistoryBREDD, f3L3QosShaperStatsBR=f3L3QosShaperStatsBR, f3VrfEntry=f3VrfEntry, f3L3QosShaperHistoryFD=f3L3QosShaperHistoryFD, f3L3FlowPointPortTypeIndex=f3L3FlowPointPortTypeIndex, f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus=f3L3TrafficBgpPeerAddressFamilyAdvPrefixRowStatus, f3L2N2AAclRuleDstIpV6AddressControl=f3L2N2AAclRuleDstIpV6AddressControl, cmL3FlowPointHistoryFTD=cmL3FlowPointHistoryFTD, f3L2A2NAclRuleParentIndex=f3L2A2NAclRuleParentIndex, f3L3TrafficIPIfOspfRetransmitInterval=f3L3TrafficIPIfOspfRetransmitInterval, cmL3QosPolicerCouplingFlag=cmL3QosPolicerCouplingFlag, f3L3TrafficBgpRIBRoutePath=f3L3TrafficBgpRIBRoutePath, f3L3QosShaperHistoryValid=f3L3QosShaperHistoryValid, f3L3AclRuleAlias=f3L3AclRuleAlias, f3L3TrafficBgpPeerStorageType=f3L3TrafficBgpPeerStorageType, f3L3TrafficIPIfMgmtUseEnable=f3L3TrafficIPIfMgmtUseEnable, cmL3QosPolicerStatsFMYD=cmL3QosPolicerStatsFMYD, f3L3TrafficIPv6InterfaceStatsIntervalType=f3L3TrafficIPv6InterfaceStatsIntervalType, cmL3QosPolicerEIRMaxHi=cmL3QosPolicerEIRMaxHi, f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx=f3L3TrafficIPv6InterfaceHistoryDhcpV6Tx, cmL3QosShaperHistoryABRRLR=cmL3QosShaperHistoryABRRLR, f3L3QosPolicerCBS=f3L3QosPolicerCBS, f3L2A2NAclRuleThresholdIndex=f3L2A2NAclRuleThresholdIndex, f3L2A2NAclRuleOuterVlanPcpHighLimit=f3L2A2NAclRuleOuterVlanPcpHighLimit, f3VrfLoopbackInterfaceIpv6AddrPrefixLen=f3VrfLoopbackInterfaceIpv6AddrPrefixLen, cmL3QosPolicerAlgorithm=cmL3QosPolicerAlgorithm, cmL3QosShaperHistoryBREDD=cmL3QosShaperHistoryBREDD, f3L2N2AAclRuleThresholdIndex=f3L2N2AAclRuleThresholdIndex, f3L3FlowPointSecondaryState=f3L3FlowPointSecondaryState, f3L3QosShaperStatsFREDD=f3L3QosShaperStatsFREDD, f3VrfOspfRouterAction=f3VrfOspfRouterAction, BgpRouteFilterDirection=BgpRouteFilterDirection, f3L3TrafficIpInterfaceHistoryDhcpV6Tx=f3L3TrafficIpInterfaceHistoryDhcpV6Tx, cmL3FlowPointStorageType=cmL3FlowPointStorageType, cmL3QosShaperHistoryBR=cmL3QosShaperHistoryBR, f3L3FlowPointSecureBlockingEnabled=f3L3FlowPointSecureBlockingEnabled, f3L3QosShaperOperationalState=f3L3QosShaperOperationalState, f3VrfOspfRouterDescription=f3VrfOspfRouterDescription, f3L3TrafficBgpRouteV2Entry=f3L3TrafficBgpRouteV2Entry, f3L3TrafficIpv4AllRouteNextHop=f3L3TrafficIpv4AllRouteNextHop, f3L2N2AAclRuleActive=f3L2N2AAclRuleActive, f3L3FlowPointHistoryNoRouteDrop=f3L3FlowPointHistoryNoRouteDrop, f3L3TrafficOspfLsDbId=f3L3TrafficOspfLsDbId, cmL3QosPolicerIndex=cmL3QosPolicerIndex, f3L2N2AAclRuleStatsAction=f3L2N2AAclRuleStatsAction, f3L3TrafficBgpInRouteEntry=f3L3TrafficBgpInRouteEntry, f3L3AclRuleInnerVlanVIDLowLimit=f3L3AclRuleInnerVlanVIDLowLimit, f3L3TrafficOspfNeighborInterface=f3L3TrafficOspfNeighborInterface, cmL3FlowPointStatsNoRouteDrop=cmL3FlowPointStatsNoRouteDrop, f3L2A2NAclRuleStatsEntry=f3L2A2NAclRuleStatsEntry, f3L3TrafficBgpPeerAddressFamilyNextHopType=f3L3TrafficBgpPeerAddressFamilyNextHopType, cmL3QosShaperHistoryFREDD=cmL3QosShaperHistoryFREDD, f3IpPrefixStorageType=f3IpPrefixStorageType, cmL3QosPolicerStatsABR=cmL3QosPolicerStatsABR, cmL3QosShaperStorageType=cmL3QosShaperStorageType, f3L3TrafficIpInterfaceHistoryAction=f3L3TrafficIpInterfaceHistoryAction, f3L3TrafficIpv6AllRoutePrefixLength=f3L3TrafficIpv6AllRoutePrefixLength, f3L3AclRuleDstPortHighLimit=f3L3AclRuleDstPortHighLimit, f3L3TrafficIpv4StaticRouteRowStatus=f3L3TrafficIpv4StaticRouteRowStatus, f3L3QosPolicerStatsFMRD=f3L3QosPolicerStatsFMRD, f3L3FlowPointThresholdVariable=f3L3FlowPointThresholdVariable, f3L3TrafficIPv6AddrUnicastAddr=f3L3TrafficIPv6AddrUnicastAddr, f3L3FlowPointThresholdCrossingAlert=f3L3FlowPointThresholdCrossingAlert, f3L3TrafficIpv4AllRouteMask=f3L3TrafficIpv4AllRouteMask, f3L3TrafficIPIfUnnumberedControl=f3L3TrafficIPIfUnnumberedControl, f3L3TrafficBgpInRouteNextHop=f3L3TrafficBgpInRouteNextHop, f3L3AclRuleHistoryEntry=f3L3AclRuleHistoryEntry, f3L3QosPolicerHistoryBytesIn=f3L3QosPolicerHistoryBytesIn, f3L3TrafficIpInterfaceHistoryDhcpV6Rx=f3L3TrafficIpInterfaceHistoryDhcpV6Rx, f3L3QosShaperHistoryABRRLR=f3L3QosShaperHistoryABRRLR, f3VrfLoopbackInterfaceIpAddress=f3VrfLoopbackInterfaceIpAddress, f3L3TrafficBgpPeerHoldTime=f3L3TrafficBgpPeerHoldTime, f3L3TrafficBgpRouterSecondaryState=f3L3TrafficBgpRouterSecondaryState, f3VrfOspfRouterVersion=f3VrfOspfRouterVersion, cmL3QosShaperStatsBTD=cmL3QosShaperStatsBTD, f3L3TrafficBgpRouterEcmpMaximumPaths=f3L3TrafficBgpRouterEcmpMaximumPaths, f3L3TrafficOspfNeighborIpAddress=f3L3TrafficOspfNeighborIpAddress, f3L3QosShaperRowStatus=f3L3QosShaperRowStatus, f3L3TrafficBgpPeerAddressFamilyStorageType=f3L3TrafficBgpPeerAddressFamilyStorageType, f3VrfTable=f3VrfTable, f3L3TrafficIPIfDhcpRelayUserClassOpt77=f3L3TrafficIPIfDhcpRelayUserClassOpt77, f3L2N2AAclRuleThresholdTable=f3L2N2AAclRuleThresholdTable, f3L3QosShaperIndex=f3L3QosShaperIndex, f3L3QosShaperThresholdEntry=f3L3QosShaperThresholdEntry, f3L2N2AAclRuleThresholdValueLo=f3L2N2AAclRuleThresholdValueLo, f3L3AclRuleDstIpV6AddressControl=f3L3AclRuleDstIpV6AddressControl, f3L3TrafficIPv6InterfaceThresholdInterval=f3L3TrafficIPv6InterfaceThresholdInterval, f3L3TrafficIPInterfaceOspfTable=f3L3TrafficIPInterfaceOspfTable, f3L3TrafficOspfLinkLsDbSeqNum=f3L3TrafficOspfLinkLsDbSeqNum, cmL3FlowPointThresholdIndex=cmL3FlowPointThresholdIndex, VrfTransportType=VrfTransportType, f3L3TrafficOspfAreaStorageType=f3L3TrafficOspfAreaStorageType, f3L3TrafficIpv6RouteOrigin=f3L3TrafficIpv6RouteOrigin, f3L3QosShaperWredYellowMinQueueThreshold=f3L3QosShaperWredYellowMinQueueThreshold, f3L3TrafficBgpPeerIpv6Address=f3L3TrafficBgpPeerIpv6Address, f3L3QosPolicerOperationalState=f3L3QosPolicerOperationalState, f3L2N2AAclRuleSummary=f3L2N2AAclRuleSummary, cmL3QosPolicerEIRMaxLo=cmL3QosPolicerEIRMaxLo, cmL3QosShaperStatsFR=cmL3QosShaperStatsFR, f3L3QosPolicerRowStatus=f3L3QosPolicerRowStatus, f3L3TrafficIPIfDhcpClientId=f3L3TrafficIPIfDhcpClientId, f3L3FlowPointHistoryValid=f3L3FlowPointHistoryValid, f3DhcpRelayAgentIndex=f3DhcpRelayAgentIndex, f3L3TrafficIPv6IfIcmpErrorMsgRateLimit=f3L3TrafficIPv6IfIcmpErrorMsgRateLimit, f3L3QosShaperHistoryBT=f3L3QosShaperHistoryBT, f3L3TrafficBgpRouterAction=f3L3TrafficBgpRouterAction, f3L3TrafficIpInterfaceHistoryNdpNSRx=f3L3TrafficIpInterfaceHistoryNdpNSRx, f3L3Conformance=f3L3Conformance, f3L3FlowPointThresholdIndex=f3L3FlowPointThresholdIndex, f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix=f3L3TrafficIPInterfaceIPv6AddressUnicastAddrAutoGenPrefix, f3VrfOspfRouterIsAbr=f3VrfOspfRouterIsAbr, f3L3TrafficBgpPeerIndex=f3L3TrafficBgpPeerIndex, f3L3TrafficIpv4AllRouteAdminDistance=f3L3TrafficIpv4AllRouteAdminDistance, f3L3TrafficIPv6IfType=f3L3TrafficIPv6IfType, f3L3TrafficIPv6InterfaceStatsAction=f3L3TrafficIPv6InterfaceStatsAction, f3L3TrafficBgpInRouteIndex=f3L3TrafficBgpInRouteIndex, f3DhcpV6RelayAgentOperationalState=f3DhcpV6RelayAgentOperationalState, cmL3QosShaperHistoryTable=cmL3QosShaperHistoryTable, f3L3AclRuleThresholdCrossingAlert=f3L3AclRuleThresholdCrossingAlert, f3L2N2AAclRuleInnerVlanVIDHighLimit=f3L2N2AAclRuleInnerVlanVIDHighLimit, f3L2A2NAclRuleSummary=f3L2A2NAclRuleSummary, f3DhcpRelayAgentTrafficIpIfMemberObject=f3DhcpRelayAgentTrafficIpIfMemberObject, f3L2A2NAclRuleStatsTable=f3L2A2NAclRuleStatsTable, f3L3FlowPointOuterTagMemberShipVlanId=f3L3FlowPointOuterTagMemberShipVlanId, f3L3TrafficBgpPeerMultihopControl=f3L3TrafficBgpPeerMultihopControl, f3DhcpV6RelayAgentEntry=f3DhcpV6RelayAgentEntry, cmL3FlowPointUntaggedMemberShipEnabled=cmL3FlowPointUntaggedMemberShipEnabled, f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry=f3L3TrafficBgpPeerAddressFamilyAdvPrefixEntry, f3L3TrafficIpInterfaceHistoryArpReplyRx=f3L3TrafficIpInterfaceHistoryArpReplyRx, f3L3TrafficIpv6AllRouteStorageType=f3L3TrafficIpv6AllRouteStorageType, f3L3TrafficIPv6IfRaRDNSSLifeTime=f3L3TrafficIPv6IfRaRDNSSLifeTime, f3L3AclRuleEtherTypeControl=f3L3AclRuleEtherTypeControl, f3L3AclRuleDstIpV6Address=f3L3AclRuleDstIpV6Address, f3L3TrafficIPv6InterfaceStatsNdpNARx=f3L3TrafficIPv6InterfaceStatsNdpNARx, f3L2N2AAclRuleHistoryTable=f3L2N2AAclRuleHistoryTable, f3L3Notifications=f3L3Notifications, f3L3TrafficIpInterfaceHistoryArpReplyTx=f3L3TrafficIpInterfaceHistoryArpReplyTx, f3L3TrafficIpInterfaceHistoryIcmpRx=f3L3TrafficIpInterfaceHistoryIcmpRx, f3L3TrafficIpv6StaticRouteNextHop=f3L3TrafficIpv6StaticRouteNextHop, f3IpPrefixListStorageType=f3IpPrefixListStorageType, f3L3TrafficOspfInterfaceType=f3L3TrafficOspfInterfaceType, f3L3TrafficIpv6RouteInterface=f3L3TrafficIpv6RouteInterface, f3L3TrafficOspfAreaEntry=f3L3TrafficOspfAreaEntry, cmL3FlowPointThresholdValueLo=cmL3FlowPointThresholdValueLo, cmL3QosShaperTable=cmL3QosShaperTable, f3L3AclRuleDstIpv4AddressHighLimit=f3L3AclRuleDstIpv4AddressHighLimit, f3L2A2NAclRuleSrcIpv4AddressControl=f3L2A2NAclRuleSrcIpv4AddressControl, f3L2N2AAclRuleHistoryEntry=f3L2N2AAclRuleHistoryEntry, f3L3FlowPointHistoryFTD=f3L3FlowPointHistoryFTD, f3L3TrafficBgpPeerPeerRestartTime=f3L3TrafficBgpPeerPeerRestartTime, f3VrfOspfRouterId=f3VrfOspfRouterId, f3L3QosShaperThresholdValueHi=f3L3QosShaperThresholdValueHi, f3L3QosPolicerHistoryFMRD=f3L3QosPolicerHistoryFMRD, f3L3FlowPointHCosGuaranteedBwLo=f3L3FlowPointHCosGuaranteedBwLo, f3L3AclRuleTable=f3L3AclRuleTable, f3L3TrafficIPv6AddressTable=f3L3TrafficIPv6AddressTable, f3L3TrafficBgpInRoutePath=f3L3TrafficBgpInRoutePath, f3L3TrafficIpInterfaceStatsDhcpRx=f3L3TrafficIpInterfaceStatsDhcpRx, cmL3QosShaperThresholdEntry=cmL3QosShaperThresholdEntry, f3L3AclRuleDstIpV6AddressPrefixLen=f3L3AclRuleDstIpV6AddressPrefixLen, f3L3TrafficIpInterfaceHistoryTable=f3L3TrafficIpInterfaceHistoryTable, f3L3TrafficBgpPeerAddressFamilyEntry=f3L3TrafficBgpPeerAddressFamilyEntry, f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus=f3DhcpV6RelayAgentClientTrafficIpIfMemberRowStatus, cmL3QosShaperThresholdCrossingAlert=cmL3QosShaperThresholdCrossingAlert, f3L3TrafficOspfLsDbSeqNum=f3L3TrafficOspfLsDbSeqNum, f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx=f3L3TrafficIpInterfaceHistoryIcmpV6WONdpTx, cmL3FlowPointThresholdInterval=cmL3FlowPointThresholdInterval, f3L3TrafficIPIfDhcpv6Enabled=f3L3TrafficIPIfDhcpv6Enabled, cmL3FlowPointHCosMgmtEnabled=cmL3FlowPointHCosMgmtEnabled, f3L3TrafficOspfAsLsDbSeqNum=f3L3TrafficOspfAsLsDbSeqNum, f3L3FlowPointHistoryEntry=f3L3FlowPointHistoryEntry, f3IpPrefix=f3IpPrefix, f3L3TrafficBgpPeerRouteReflectorClusterId=f3L3TrafficBgpPeerRouteReflectorClusterId, f3VrfLoopbackInterfaceTable=f3VrfLoopbackInterfaceTable, f3L2A2NAclRuleIpv4PriorityHighLimit=f3L2A2NAclRuleIpv4PriorityHighLimit, f3VrfOspfRouterConnectedRoutesMetricType=f3VrfOspfRouterConnectedRoutesMetricType, f3L3QosShaperStatsAction=f3L3QosShaperStatsAction, f3L3FlowPointStatsAclRuleDrop=f3L3FlowPointStatsAclRuleDrop, f3L3TrafficIpv6RouteEntry=f3L3TrafficIpv6RouteEntry, cmL3FlowPointHistoryFrameTx=cmL3FlowPointHistoryFrameTx, cmL3QosPolicerSecondaryState=cmL3QosPolicerSecondaryState, f3L2N2AAclRuleIpv4PriorityControl=f3L2N2AAclRuleIpv4PriorityControl, cmL3QosPolicerHistoryTable=cmL3QosPolicerHistoryTable, f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx=f3L3TrafficIPv6InterfaceHistoryIcmpV6WONdpTx, f3L3QosShaperWredGreenMaxQueueThreshold=f3L3QosShaperWredGreenMaxQueueThreshold, f3L3TrafficIpv6RouteStorageType=f3L3TrafficIpv6RouteStorageType, f3L3TrafficBgpPeerIpv4Addr=f3L3TrafficBgpPeerIpv4Addr, f3L3TrafficIPv6InterfaceHistoryNdpRATx=f3L3TrafficIPv6InterfaceHistoryNdpRATx, f3L3FlowPointStatsTable=f3L3FlowPointStatsTable, f3L2A2NAclRuleOuterVlanVIDControl=f3L2A2NAclRuleOuterVlanVIDControl, cmL3QosPolicerThresholdValueLo=cmL3QosPolicerThresholdValueLo, f3VrfLoopbackInterfaceNetMask=f3VrfLoopbackInterfaceNetMask, f3L2N2AAclRuleSrcPortHighLimit=f3L2N2AAclRuleSrcPortHighLimit, f3L3AclRuleIpv4PriorityLowLimit=f3L3AclRuleIpv4PriorityLowLimit, f3L2N2AAclRuleDstIpv4AddressControl=f3L2N2AAclRuleDstIpv4AddressControl, f3L3TrafficIPv6InterfaceHistoryNdpNSTx=f3L3TrafficIPv6InterfaceHistoryNdpNSTx, f3L3AclRuleSrcMacAddressControl=f3L3AclRuleSrcMacAddressControl, f3L3TrafficIPv6InterfaceStatsEntry=f3L3TrafficIPv6InterfaceStatsEntry, f3L2A2NAclRuleSrcIpV6AddressControl=f3L2A2NAclRuleSrcIpV6AddressControl, f3L3TrafficIpInterfaceStatsTable=f3L3TrafficIpInterfaceStatsTable, f3L2A2NAclRuleTcpFlagsControl=f3L2A2NAclRuleTcpFlagsControl, f3L3TrafficOspfInterfaceOspfSimpleAuthKey=f3L3TrafficOspfInterfaceOspfSimpleAuthKey, f3L3TrafficBgpRouterOperationalState=f3L3TrafficBgpRouterOperationalState, f3L2A2NAclRuleThresholdEntry=f3L2A2NAclRuleThresholdEntry, f3L3TrafficBgpInRouteNetwork=f3L3TrafficBgpInRouteNetwork, f3IpPrefixLessOrEqualPrefixLen=f3IpPrefixLessOrEqualPrefixLen, cmL3QosPolicerAdminState=cmL3QosPolicerAdminState, cmL3QosShaperStatsFREDD=cmL3QosShaperStatsFREDD, f3L3Objects=f3L3Objects, f3L2A2NAclRuleOuterVlanPcpLowLimit=f3L2A2NAclRuleOuterVlanPcpLowLimit, f3VrfTrafficIpIfMemberEntry=f3VrfTrafficIpIfMemberEntry, f3DhcpV6RelayAgentSecondaryState=f3DhcpV6RelayAgentSecondaryState, f3L2A2NAclRuleThresholdValueHi=f3L2A2NAclRuleThresholdValueHi, f3DhcpRelayAgentAlias=f3DhcpRelayAgentAlias, f3L2A2NAclRuleDstIpV6Address=f3L2A2NAclRuleDstIpV6Address, f3L3TrafficIpv6RouteFlags=f3L3TrafficIpv6RouteFlags, f3VrfLoopbackInterfaceIpMode=f3VrfLoopbackInterfaceIpMode, cmL3QosShaperStatsBT=cmL3QosShaperStatsBT, f3VrfTraceRouteResult=f3VrfTraceRouteResult, f3L3TrafficOspfInterfaceAssociatedIpInterface=f3L3TrafficOspfInterfaceAssociatedIpInterface, cmL3FlowPointStatsAction=cmL3FlowPointStatsAction, f3L2N2AAclRuleDstMacAddress=f3L2N2AAclRuleDstMacAddress, f3L3TrafficBgpPeerStartupHoldTime=f3L3TrafficBgpPeerStartupHoldTime)
mibBuilder.exportSymbols("F3-L3-MIB", f3L3TrafficOspfLinkLsDbInterface=f3L3TrafficOspfLinkLsDbInterface, cmL3QosPolicerCIRLo=cmL3QosPolicerCIRLo, f3L3TrafficIpv4AllRouteTable=f3L3TrafficIpv4AllRouteTable, f3L2A2NAclRuleDstIpv4AddressControl=f3L2A2NAclRuleDstIpv4AddressControl, f3L2N2AAclRuleSrcPortLowLimit=f3L2N2AAclRuleSrcPortLowLimit, f3L3QosPolicerCIRHi=f3L3QosPolicerCIRHi, f3L3TrafficIPv6IfStorageType=f3L3TrafficIPv6IfStorageType, NdpNeighborReachabilityState=NdpNeighborReachabilityState, f3L3QosPolicerHistoryFMG=f3L3QosPolicerHistoryFMG, cmL3FlowPointStatsIntervalType=cmL3FlowPointStatsIntervalType, f3L2A2NAclRuleEtherType=f3L2A2NAclRuleEtherType, f3L3TrafficIPv6IfRaDNSSList=f3L3TrafficIPv6IfRaDNSSList, f3L2N2AAclRuleHistoryAction=f3L2N2AAclRuleHistoryAction, f3L3TrafficIpv4RouteMask=f3L3TrafficIpv4RouteMask, f3L3TrafficIpv6RouteMetric=f3L3TrafficIpv6RouteMetric, f3L3TrafficIpInterfaceStatsNdpNSTx=f3L3TrafficIpInterfaceStatsNdpNSTx, TrafficIpRouteOriginType=TrafficIpRouteOriginType, f3L3FlowPointStatsNoRouteDrop=f3L3FlowPointStatsNoRouteDrop, f3VrfOspfRouterEntry=f3VrfOspfRouterEntry, cmL3QosShaperIndex=cmL3QosShaperIndex, f3L3FlowPointThresholdEntry=f3L3FlowPointThresholdEntry, f3L2A2NAclRuleAdminState=f3L2A2NAclRuleAdminState, f3L3QosShaperHistoryTable=f3L3QosShaperHistoryTable, f3L3TrafficBgpPeerBgpRouteInboundFilter=f3L3TrafficBgpPeerBgpRouteInboundFilter, f3L3QosPolicerCouplingFlag=f3L3QosPolicerCouplingFlag, f3L3TrafficIPInterfaceIPv6AddressEntry=f3L3TrafficIPInterfaceIPv6AddressEntry, f3L3QosPolicerCIRLo=f3L3QosPolicerCIRLo, f3L3AclRuleSrcIpv4AddressControl=f3L3AclRuleSrcIpv4AddressControl, f3L3QosPolicerAdminState=f3L3QosPolicerAdminState, f3L3TrafficIPInterfaceNdpAge=f3L3TrafficIPInterfaceNdpAge, f3L3TrafficOspfAsLsDbEntry=f3L3TrafficOspfAsLsDbEntry, f3L2A2NAclRuleEtherTypeControl=f3L2A2NAclRuleEtherTypeControl, f3L3TrafficIpv4RouteStatus=f3L3TrafficIpv4RouteStatus, f3L3TrafficBgpInRouteLocalPreference=f3L3TrafficBgpInRouteLocalPreference, f3L3TrafficIpv4AllRouteRowStatus=f3L3TrafficIpv4AllRouteRowStatus, f3L3FlowPointHistoryFMRD=f3L3FlowPointHistoryFMRD, f3L3TrafficIPIfRaDNSSList=f3L3TrafficIPIfRaDNSSList, cmL3FlowPointStatsFMG=cmL3FlowPointStatsFMG, f3L3AclRuleInnerVlanVIDControl=f3L3AclRuleInnerVlanVIDControl, cmL3FlowPointStatsFrameTx=cmL3FlowPointStatsFrameTx, f3L3TrafficIPInterfaceRAPrefixTable=f3L3TrafficIPInterfaceRAPrefixTable, f3L3QosPolicerSecondaryState=f3L3QosPolicerSecondaryState, f3L2A2NAclRuleStatsValid=f3L2A2NAclRuleStatsValid, f3L3TrafficIpv6StaticRouteDest=f3L3TrafficIpv6StaticRouteDest, f3L3AclRuleInnerVlanPcpLowLimit=f3L3AclRuleInnerVlanPcpLowLimit, f3L3TrafficIPv6NdpType=f3L3TrafficIPv6NdpType, f3L3TrafficIPv6InterfaceStatsNdpNSTx=f3L3TrafficIPv6InterfaceStatsNdpNSTx, f3L2A2NAclRuleHistoryEntry=f3L2A2NAclRuleHistoryEntry, f3L3AclRuleOuterVlanVIDLowLimit=f3L3AclRuleOuterVlanVIDLowLimit, f3L3TrafficIPIfIpv6LinkLocalAddr=f3L3TrafficIPIfIpv6LinkLocalAddr, f3L3TrafficIpv4RouteFlags=f3L3TrafficIpv4RouteFlags, f3L3TrafficIpv6AllRouteRowStatus=f3L3TrafficIpv6AllRouteRowStatus, cmL3FlowPointOuterTagMemberShipVlanId=cmL3FlowPointOuterTagMemberShipVlanId, f3L3TrafficIPv6AddrRowStatus=f3L3TrafficIPv6AddrRowStatus, f3IpPrefixIndex=f3IpPrefixIndex, f3L3TrafficBgpRouteV2Network=f3L3TrafficBgpRouteV2Network, f3DhcpRelayAgentOp82SubOp9Value=f3DhcpRelayAgentOp82SubOp9Value, f3L3TrafficIPIfRowStatus=f3L3TrafficIPIfRowStatus, f3L3TrafficIPIfType=f3L3TrafficIPIfType, f3L3TrafficOspfAreaAuthType=f3L3TrafficOspfAreaAuthType, f3L2N2AAclRuleTable=f3L2N2AAclRuleTable, f3L3TrafficOspfInterfaceOspfHelloInterval=f3L3TrafficOspfInterfaceOspfHelloInterval, f3VrfLoopbackInterfaceIpv6Address=f3VrfLoopbackInterfaceIpv6Address, cmL3FlowPointOperationalState=cmL3FlowPointOperationalState, f3L3TrafficIPv6InterfaceHistoryEntry=f3L3TrafficIPv6InterfaceHistoryEntry, f3L3TrafficIPv6PrefixTable=f3L3TrafficIPv6PrefixTable, f3L3TrafficIPv6InterfaceHistoryTable=f3L3TrafficIPv6InterfaceHistoryTable, f3VrfTrafficIpIfMemberRowStatus=f3VrfTrafficIpIfMemberRowStatus, cmL3FlowPointStatsFragmentedDropAcl=cmL3FlowPointStatsFragmentedDropAcl, f3DhcpRelayAgentOp82SubOp9ControlEnabled=f3DhcpRelayAgentOp82SubOp9ControlEnabled, f3L2A2NAclRuleActive=f3L2A2NAclRuleActive, f3L3TrafficIPIfIpAddress=f3L3TrafficIPIfIpAddress, cmL3QosShaperOperationalState=cmL3QosShaperOperationalState, f3L2N2AAclRuleAdminState=f3L2N2AAclRuleAdminState, cmL3QosShaperHistoryBTD=cmL3QosShaperHistoryBTD, f3L2A2NAclRuleAlias=f3L2A2NAclRuleAlias, f3L3TrafficBgpRouterOspfRoutesRedistControl=f3L3TrafficBgpRouterOspfRoutesRedistControl, f3DhcpV6RelayAgentClientTrafficIpIfMemberTable=f3DhcpV6RelayAgentClientTrafficIpIfMemberTable, f3L3TrafficIpv4RouteStorageType=f3L3TrafficIpv4RouteStorageType, f3L3FlowPointPolicingEnabled=f3L3FlowPointPolicingEnabled, f3L2A2NAclRuleCOS=f3L2A2NAclRuleCOS, f3L2A2NAclRuleOperation=f3L2A2NAclRuleOperation, cmL3FlowPointCOS=cmL3FlowPointCOS, f3L2A2NAclRuleInnerVlanPcpLowLimit=f3L2A2NAclRuleInnerVlanPcpLowLimit, f3L3AclRuleAdminState=f3L3AclRuleAdminState, f3IpPrefixGreaterOrEqualPrefixLen=f3IpPrefixGreaterOrEqualPrefixLen, f3L3TrafficIPIfDhcpClientIdType=f3L3TrafficIPIfDhcpClientIdType, f3L3TrafficOspfGroup=f3L3TrafficOspfGroup, f3L3TrafficOspfLsDbType=f3L3TrafficOspfLsDbType, f3L3AclRuleSrcMacAddress=f3L3AclRuleSrcMacAddress, f3L2A2NAclRuleInnerVlanVIDHighLimit=f3L2A2NAclRuleInnerVlanVIDHighLimit, f3L3TrafficIpInterfaceStatsArpReplyTx=f3L3TrafficIpInterfaceStatsArpReplyTx, f3L3TrafficIPv6InterfaceStatsNdpNATx=f3L3TrafficIPv6InterfaceStatsNdpNATx, f3L3TrafficIpv4AllRouteOrigin=f3L3TrafficIpv4AllRouteOrigin, f3L3TrafficOspfNeighborDeadTime=f3L3TrafficOspfNeighborDeadTime, f3L2N2AAclRuleInnerVlanPcpControl=f3L2N2AAclRuleInnerVlanPcpControl, f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled=f3L3TrafficIPInterfaceRAPrefixAdvertiseEnabled, f3L3AclRuleTcpFlags=f3L3AclRuleTcpFlags, f3L3TrafficOspfLinkLsDbEntry=f3L3TrafficOspfLinkLsDbEntry, f3L2N2AAclRuleOuterVlanPcpControl=f3L2N2AAclRuleOuterVlanPcpControl, f3L2A2NAclRuleTable=f3L2A2NAclRuleTable, cmL3QosPolicerStorageType=cmL3QosPolicerStorageType, cmL3FlowPointStatsTtlEqual1Drop=cmL3FlowPointStatsTtlEqual1Drop, f3L2A2NAclRuleDstIpv4AddressLowLimit=f3L2A2NAclRuleDstIpv4AddressLowLimit, f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength=f3L3TrafficIPInterfaceIPv6AddressUnicastAddrPrefixLength, cmL3QosShaperSecondaryState=cmL3QosShaperSecondaryState, f3VrfOspfRouterSlaacRoutesRedistributeToOspf=f3VrfOspfRouterSlaacRoutesRedistributeToOspf, f3L3TrafficOspfInterfaceOspfCryptoKeyId=f3L3TrafficOspfInterfaceOspfCryptoKeyId, f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1=f3L3TrafficIPIfDhcpRelayInfoOpt82Sub1, f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId=f3L3TrafficOspfInterfaceOspfBackupDesignatedRouterId, f3L3AclRuleSrcIpv4AddressLowLimit=f3L3AclRuleSrcIpv4AddressLowLimit, f3VrfTrafficIpIfMemberObject=f3VrfTrafficIpIfMemberObject, f3L3TrafficIpInterfaceStatsNdpNATx=f3L3TrafficIpInterfaceStatsNdpNATx, cmL3QosPolicerHistoryFMYD=cmL3QosPolicerHistoryFMYD, f3L3TrafficIPv6IfMinRAInterval=f3L3TrafficIPv6IfMinRAInterval, f3L2A2NAclRuleSrcIpV6Address=f3L2A2NAclRuleSrcIpV6Address, f3VrfLoopbackInterfaceRowStatus=f3VrfLoopbackInterfaceRowStatus, f3L3FlowPointHistoryAction=f3L3FlowPointHistoryAction, f3L3TrafficIpv4AllRouteSourceForwardingEnable=f3L3TrafficIpv4AllRouteSourceForwardingEnable, RoutesMetricType=RoutesMetricType, f3L3TrafficIPIfIpAddressSourceType=f3L3TrafficIPIfIpAddressSourceType, cmL3QosPolicerHistoryBytesIn=cmL3QosPolicerHistoryBytesIn, f3L3TrafficIPv6InterfaceStatsDhcpV6Tx=f3L3TrafficIPv6InterfaceStatsDhcpV6Tx)
