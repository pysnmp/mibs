#
# PySNMP MIB module TAIT-TN9300-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/tait/TAIT-TN9300-MIB
# Produced by pysmi-1.1.12 at Wed Jul  3 12:08:44 2024
# On host fv-az768-763 platform Linux version 6.5.0-1022-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, Counter64, ModuleIdentity, ObjectIdentity, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, NotificationType, enterprises, Integer32, IpAddress, Unsigned32, Counter32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "NotificationType", "enterprises", "Integer32", "IpAddress", "Unsigned32", "Counter32", "iso")
TruthValue, TextualConvention, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "DateAndTime")
taitModules, taitProducts = mibBuilder.importSymbols("TAIT-COMMON-MIB", "taitModules", "taitProducts")
RemoteNodeState, UnitAuthentication, RemoteNodeSyncState, ChannelState, SipLineIncomingType, NetworkCheckState, SipCallSpeechVotingPriority, NodeRequestedState, Mpt1327LinkState, NodeState, Mpt1327ChannelState, NgwLinkState, SipLineRegistrationType, DipLineState, LicenseValidity, UnitStatusMessageId, SipLineState, EventSeverity = mibBuilder.importSymbols("TAIT-TN9300-TC", "RemoteNodeState", "UnitAuthentication", "RemoteNodeSyncState", "ChannelState", "SipLineIncomingType", "NetworkCheckState", "SipCallSpeechVotingPriority", "NodeRequestedState", "Mpt1327LinkState", "NodeState", "Mpt1327ChannelState", "NgwLinkState", "SipLineRegistrationType", "DipLineState", "LicenseValidity", "UnitStatusMessageId", "SipLineState", "EventSeverity")
tn9300MibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3570, 1, 1, 11))
tn9300MibModule.setRevisions(('2019-03-18 14:00', '2019-01-28 16:30', '2019-01-09 12:00', '2018-12-04 12:00', '2018-11-23 12:00', '2018-11-21 12:00', '2018-10-25 12:00', '2018-07-31 12:00', '2018-07-17 10:05', '2018-05-29 12:00', '2018-04-23 12:00', '2018-04-17 12:00', '2018-03-18 22:03', '2018-03-08 12:00', '2018-03-05 12:00', '2018-01-26 00:00', '2017-11-22 00:00', '2017-05-24 00:00', '2017-03-16 00:54', '2016-08-22 12:00', '2015-10-30 12:00', '2015-03-17 22:08', '2014-04-04 23:07', '2012-11-29 22:01', '2012-06-28 22:28', '2012-06-27 09:02', '2012-05-28 23:17',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tn9300MibModule.setRevisionsDescriptions(('Added four new site and channel objects for the alternate channel.', 'Defined a new tn9300ChannelBaseStationNumber object then added it as a channel table index.\n                Also updated some of the description text.', 'Added the description for tn9300LicenseValidity.', 'Defined a new set of events, 19 in total, and its corresponding groups and objects.\n                These new events are intended to be an alternative to the original set.', 'Defined the channel stuck mute event.', 'Created a new tn9300EventBaseStationNumber object and added it to the channel jammed/unjammed traps.\n                For the other channel traps, the channel number object previously added was replaced with this.', 'Replaced the added site number in site failure/ok events with site name.\n                Added the site name and channel number to all of the channel related events.\n                Defined tn9300EventChannelNumber to serve as the channel number object specifically for events.\n                Changed the OID of tn9300EventUnitAddress to use the tn9300ObjectsForEvents subtree instead.\n                Defined a new group for event objects and added the two mentioned above.\n                Fixed some errors and warnings, and corrected some descriptions.', 'Added the site number to the site failure event and the channel number to the channel failure event', 'Changed to Tait International Limited', 'Added dual CC and syscode for dynamic adjacent site', 'Fixed range restriction for tn9300UnitAddress.\n            Removed tn9300UnitAddress from tn9300UnitAddressGroup.', 'Fixed identifier for tn9300UnitGroup.\n            Fixed ranage restriction for tn9300AdjSiteSendOrder and tn9300UnitAddress.\n            Changed to use tn9300EventIUnitAddress in the tn9300UnitStatusMessageEvent.\n            Changed to accessible-for-notify for tn9300UnitAddress\n            Set tn9300EventIUnitAddress to tn9300UnitGroup ', "Added identifiers to conformance group.\n            Fixed inconsistency in type of 'tn9300SipLineProxyAddress'.\n            Changed some naming conventions.", 'Added table for adjacent site and added site alias in site table', 'Added traps for deregistration by system', 'Added traps for remote node database sync', 'Fixed format and description for dual control channel', 'Added CPU and memory utilization monitoring.', 'Fixed uppercase/lowercase inconsistencies.', 'Added 3 Terminal alarm descriptions', 'Added SipLine objects and changed the term FxoLine to SipLine.\n                Changed some descriptions.', 'added Unit object, table and status notification', 'Added authentication ok and failure notifications.', 'Object descriptions updated.', 'Removed digital io tables and notifications.\n                Changed format of notifications to include a newline between the DESCRIPTION\n                tag and the description text.', 'Changed type of the syscode value to string', 'Initial revision of this module',))
if mibBuilder.loadTexts: tn9300MibModule.setLastUpdated('201903181400Z')
if mibBuilder.loadTexts: tn9300MibModule.setOrganization('www.taitworld.com')
if mibBuilder.loadTexts: tn9300MibModule.setContactInfo('postal:   Tait International Limited\n                 558 Wairakei Road\n                 Christchurch\n                 PO Box 1645\n                 Christchurch\n                 New Zealand\n\n       phone:    +64 3358 3399\n       email:    support@taitworld.com')
if mibBuilder.loadTexts: tn9300MibModule.setDescription('TaitNet TN9300 DMR Node Controller Module')
tn9300MIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6))
tn9300Confs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1))
tn9300Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1))
tn9300Compl = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 2))
tn9300Objs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2))
tn9300NodeObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1))
tn9300SiteObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2))
tn9300SipLineObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3))
tn9300DipLineObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4))
tn9300Mpt1327Objs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5))
tn9300Mpt1327ChObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6))
tn9300RemoteNodeObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7))
tn9300MobileIpObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8))
tn9300UnitObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9))
tn9300NetworkGwObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10))
tn9300EventObjs = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99))
tn9300Events = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3))
tn9300EventsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0))
tn9300ObjectsForEvents = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 99))
tn9300CgmMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 3570, 3, 6, 4))
tn9300Version = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Version.setStatus('current')
if mibBuilder.loadTexts: tn9300Version.setDescription('The version of software running on the node controller.')
tn9300Name = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Name.setStatus('current')
if mibBuilder.loadTexts: tn9300Name.setDescription('Name:\n                Represents the name of this node controller.')
tn9300Priority = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Priority.setStatus('current')
if mibBuilder.loadTexts: tn9300Priority.setDescription('Priority:\n                Represents the priority of this node. On multi-node systems the lowest priority node\n                assumes control of the network.')
tn9300RequestedState = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 4), NodeRequestedState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RequestedState.setStatus('current')
if mibBuilder.loadTexts: tn9300RequestedState.setDescription('Requested state:\n                Represents the state in which this node has been instructed to operate. Status types are Unknown (0), Offline (1), Program (2) or Online (3).')
tn9300State = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 5), NodeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300State.setStatus('current')
if mibBuilder.loadTexts: tn9300State.setDescription('State:\n                Represents the state in which this node is operating. Status types are Unknown (0), Offline (1), Program (2), Switching (3) or Control (4).')
tn9300NetCheckAddressAType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 7), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckAddressAType.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckAddressAType.setDescription('The type of internet address for network check A.')
tn9300NetCheckAddressA = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 8), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckAddressA.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckAddressA.setDescription('The IP address for network check A.')
tn9300NetCheckStateA = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 9), NetworkCheckState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckStateA.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckStateA.setDescription('The status of network check A. Status types are Not Configured (0), OK (1) or Failed (2).')
tn9300NetCheckAddressBType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 10), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckAddressBType.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckAddressBType.setDescription('The type of internet address for network check B.')
tn9300NetCheckAddressB = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 11), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckAddressB.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckAddressB.setDescription('The IP address for network check B.')
tn9300NetCheckStateB = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 12), NetworkCheckState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300NetCheckStateB.setStatus('current')
if mibBuilder.loadTexts: tn9300NetCheckStateB.setDescription('The status of network check B. Status types are Not Configured (0), OK (1) or Failed (2).')
tn9300CallsSwitching = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300CallsSwitching.setStatus('current')
if mibBuilder.loadTexts: tn9300CallsSwitching.setDescription('The number of calls being switched by this node.')
tn9300ConnectionsSwitching = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ConnectionsSwitching.setStatus('current')
if mibBuilder.loadTexts: tn9300ConnectionsSwitching.setDescription('The number of connections being switched by this node.')
tn9300MemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MemoryUsage.setStatus('current')
if mibBuilder.loadTexts: tn9300MemoryUsage.setDescription('The total physical memory used by all node processes (percent)')
tn9300CpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300CpuUsage.setStatus('current')
if mibBuilder.loadTexts: tn9300CpuUsage.setDescription('The current total CPU load of all node processes (percent)')
tn9300DiskSpaceOk = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DiskSpaceOk.setStatus('current')
if mibBuilder.loadTexts: tn9300DiskSpaceOk.setDescription('Indicates whether the available disk space is above or below threshold.')
tn9300LicenseValidity = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 1, 18), LicenseValidity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300LicenseValidity.setStatus('current')
if mibBuilder.loadTexts: tn9300LicenseValidity.setDescription('The current validity of the license. Types are as follows:\n                Valid (0),\n                File not found (1),\n                Invalid host ID (2),\n                Invalid product code (3),\n                Invalid version (4),\n                Invalid expiry date (5),\n                Expired (6),\n                Corrupt signature (7),\n                Conflicting features (8),\n                Invalid tier mode (9),\n                Invalid license format (10)')
tn9300SiteTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1), )
if mibBuilder.loadTexts: tn9300SiteTable.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteTable.setDescription('This table stores the status of the sites connected to this node controller.')
tn9300SiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300SiteNumber"))
if mibBuilder.loadTexts: tn9300SiteEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteEntry.setDescription('The table entry index specification, just the site number.')
tn9300SiteNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250)))
if mibBuilder.loadTexts: tn9300SiteNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNumber.setDescription('Site Number:\n                Represents a unique identifier for this site.')
tn9300SiteName = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteName.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteName.setDescription('Site Name:\n                The name of this site.')
tn9300SiteSyscode = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteSyscode.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteSyscode.setDescription('Syscode:\n                The syscode of this site.')
tn9300SiteEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteEnabled.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteEnabled.setDescription('Enabled:\n                 Boolean value, true if this site is enabled.')
tn9300SiteOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteOk.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteOk.setDescription('Enabled:\n                 Boolean value, true if this site is OK.')
tn9300SiteAutoQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteAutoQueueDepth.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteAutoQueueDepth.setDescription('Automatic Queue Depth:\n                 Boolean value, if true, the queue depth is set to twice the number of traffic\n                 channels at this site with a minimum value of 3 and a maximum of 20.')
tn9300SiteQueueDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteQueueDepth.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteQueueDepth.setDescription('Queue Depth:\n                Represents the maximum number of calls that are allowed to be queued at this site.')
tn9300SiteZone = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteZone.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteZone.setDescription('Zone:\n                The ID of the zone to which this site belongs.\n                When a call is placed to a radio that is registered on a site with a\n                zone ID the network will attempt to contact the radio on all sites\n                with the same zone ID.\n\n                This reduces registration traffic but increases individual call\n                request traffic. It is useful on systems with large numbers of radios\n                and few individual calls. These systems often only make group calls.\n\n                This feature is not recommended if registration based group calls are used.')
tn9300SiteExtraWaitSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteExtraWaitSlots.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteExtraWaitSlots.setDescription('Extra Wait Slots:\n                Represents the number of extra slots that the site should wait for a radio\n                to reply to a control channel poll (i.e. an AHOY).\n\n                This feature is used at sites where there is an extra delay in the\n                transmission/reception of on-air codewords that puts it outside of the MPT timing\n                specifications, e.g. a cell extender site, which can add in 1 or more slots of delay.\n\n                Disadvantages:\n                1. To stop conflicts, the site will withdraw the extra slots when waiting. This\n                means other radios will be unable to make call requests during this time.\n\n                2. As a site can only process one outgoing call (site to radio) at a time, it will\n                not be able to process as many calls.\n\n                3. As a rule of thumb, each extra wait slot added to the site will halve the maximum\n                call rate the site can handle.')
tn9300SiteCCReassignTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteCCReassignTimeout.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteCCReassignTimeout.setDescription('Control Channel Reassignment Timeout:\n                Represents the time (in minutes), between switching the control channel from\n                one channel to another.\n\n                Control channel reassignment should be used only when there is a compelling\n                (i.e. regulatory) reason to move the control channel at intervals.\n\n                If this feature is used it is recommended that jammed channels are inhibited\n                from becoming control channels.\n\n                If set to 0, the lowest numbered, uninhibited channel becomes the control\n                channel and remains so unless it fails. If it fails the node will reassign\n                the next lowest numbered channel.\n\n                Immediately before reassignment, the control channel issues a MOVE command to\n                all radios to transfer them to the new control channel frequency.')
tn9300SiteTCRotation = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteTCRotation.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteTCRotation.setDescription('Traffic Channel Rotation:\n                 If traffic channel rotation is enabled, the node will allocate a new traffic channel\n                 to each call. The traffic channels are chosen based on the channel number with lower\n                 numbers being used first. Only idle channels that are configured to be traffic channels\n                 are used in the selection process. When all the channels at the site have been used, the\n                 selection process starts again with the lowest channel number.')
tn9300SiteRxActivityTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteRxActivityTimeout.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteRxActivityTimeout.setDescription('Site Receiver Activity Timeout:\n                Represents a number of slots (each of duration 106ms). If interference is detected in\n                each consecutive slot for this number of slots, the channel is deemed to be jammed.')
tn9300SiteRxInactiveTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteRxInactiveTimeout.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteRxInactiveTimeout.setDescription('Site Receiver Activity Timeout:\n                Represents a number of slots (each of duration 106ms). If no interference is detected in\n                each consecutive slot for this number of slots, the channel is deemed to be not jammed.')
tn9300SiteFramelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteFramelength.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteFramelength.setDescription('Framelength:\n                Represents the number of slots in a frame. Bigger framelengths reduce the probability of\n                two radios selecting the same slot and failing. However call setup is slower when retries\n                occur.\n\n                A value of zero represents dynamic framelength. In this case the node will use an\n                algorithm, based on codeword statistics, to determine the most appropriate framelength\n                between the limits set by the maximum and minimum dynamic framelength.')
tn9300SiteMinFramelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteMinFramelength.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteMinFramelength.setDescription('Minimum Dynamic Framelength:\n                Represents the minimum number of slots in a frame when using dynamic framelength.')
tn9300SiteMaxFramelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteMaxFramelength.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteMaxFramelength.setDescription('Maximum Dynamic Framelength:\n                Represents the maximum number of slots in a frame when using dynamic framelength.')
tn9300SiteDualCC = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteDualCC.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteDualCC.setDescription('Dual Control Channels:\n                 Allows for a second control channel on this site. Both control channels\n                 share the other channels for traffic use.\n\n                 This is useful at sites with lots of traffic channels and/or a large quantity of\n                 data communications. In addition to the primary control channel the next lowest\n                 numbered channel will be used as the second control channel (so long as it is\n                 correctly configured and not inhibited.)\n\n                 When this feature is enabled and a radio registers on the primary control channel:\n\n                 1. The node determines if it is allowed to used the second control channel.\n                 2. If it is, the node instructs the radio to register on the second control channel.\n\n                 When using dual control channels, you can have them with the same syscode\n                 or with complementary syscodes that have different PAR values\n\n                 Single (0), Dual-same syscode(1), Dual-different PAR(2)')
tn9300SiteOpenMuteTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteOpenMuteTimeout.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteOpenMuteTimeout.setDescription("Open Mute Timeout:\n                Represents the time (seconds) that a traffic channel will wait for the receiver\n                to go idle before sending clear messages.\n\n                The traffic channel waits for the receiver to go idle as parties transmitting on\n                the channel may miss the clear messages.\n\n                On some systems the receiver may get jammed from noise (stuck mute) and therefore\n                the channel may not go 'idle'. This timeout is used to force the sending of clear\n                messages in these circumstances.")
tn9300SiteManAdjSiteRF = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteManAdjSiteRF.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteManAdjSiteRF.setDescription('Manual Adjacent Site RF:\n                Represents the RF number of a manual adjacent control channel. Used for a cell extender.')
tn9300SiteManAdjSiteSyscode = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteManAdjSiteSyscode.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteManAdjSiteSyscode.setDescription('Manual Adjacent Site Syscode:\n                Represents the syscode of a manual adjacent control channel. Used for a cell extender.')
tn9300SiteNChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNChannels.setDescription('Number of channels:\n                Represents the number of channels installed at this site.')
tn9300SiteNControlChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNControlChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNControlChannels.setDescription('Number of control channels:\n                Represents the number of channels operating as control channels at this site.')
tn9300SiteNTrafficChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNTrafficChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNTrafficChannels.setDescription('Number of traffic channels:\n                Represents the number of channels operating as traffic channels at this site.')
tn9300SiteNIdleChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 24), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNIdleChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNIdleChannels.setDescription('Number of idle channels:\n                Represents the number of idle channels at this site.')
tn9300SiteNDisabledChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 25), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNDisabledChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNDisabledChannels.setDescription('Number of disabled channels:\n                Represents the number of disabled channels at this site.')
tn9300SiteNFailedChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNFailedChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNFailedChannels.setDescription('Number of failed channels:\n                Represents the number of failed channels at this site.')
tn9300SiteNOnAirCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 27), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNOnAirCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNOnAirCalls.setDescription('Number of on-air calls:\n                Represents the number of calls currently on-air at this site.')
tn9300SiteNRingingCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 28), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNRingingCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNRingingCalls.setDescription('Number of ringing calls:\n                Represents the number of calls waiting to be answered at this site.')
tn9300SiteNQueuedCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 29), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNQueuedCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNQueuedCalls.setDescription('Number of queued calls:\n                Represents the number of calls that are queued at this site.')
tn9300SiteTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteTotalCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteTotalCalls.setDescription('Total calls:\n                Represents the total number of calls at this site since the node started.')
tn9300SiteTotalChannelCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteTotalChannelCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteTotalChannelCalls.setDescription('Total channel calls:\n                Represents the total number of calls that required a traffic channel at this site since the node started.')
tn9300SiteTotalQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteTotalQueueTime.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteTotalQueueTime.setDescription('Total queue time:\n                Represents the total queue time in seconds of all calls at this site since the node started.')
tn9300SiteChannelTimeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteChannelTimeFailed.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteChannelTimeFailed.setDescription('Channel time failed:\n                Represents the total time in seconds that channels at this site have spent in the failed state since the node started.')
tn9300SiteChannelTimeTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteChannelTimeTraffic.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteChannelTimeTraffic.setDescription('Channel time traffic:\n                Represents the total time in seconds that channels at this site have spent as traffic channels since the node started.')
tn9300SiteChannelTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteChannelTimeControl.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteChannelTimeControl.setDescription('Channel time control:\n                Represents the total time in seconds that channels at this site have spent as control channels since the node started.')
tn9300SiteChannelTimeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteChannelTimeIdle.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteChannelTimeIdle.setDescription('Channel time idle:\n                Represents the total time in seconds that channels at this site have spent in the idle state since the node started.')
tn9300SiteCallsQueuedUnder5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteCallsQueuedUnder5.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteCallsQueuedUnder5.setDescription('The number of calls that have been queued under 5 seconds at this site since the node started.')
tn9300SiteCallsQueued5To10 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteCallsQueued5To10.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteCallsQueued5To10.setDescription('The number of calls that have been queued between 5 and 10 seconds at this site since the node started.')
tn9300SiteCallsQueued10To20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteCallsQueued10To20.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteCallsQueued10To20.setDescription('The number of calls that have been queued between 10 and 20 seconds at this site since the node started.')
tn9300SiteCallsQueuedOver20 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteCallsQueuedOver20.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteCallsQueuedOver20.setDescription('The number of calls that have been queued for longer than 20 seconds at this site since the node started.')
tn9300SiteAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 41), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteAlias.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteAlias.setDescription('Site alias:\n                The short name of this site.')
tn9300SiteControlChCountOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteControlChCountOk.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteControlChCountOk.setDescription('Indicates whether the actual number of control channel for the site matches the required.')
tn9300SiteNAlternateChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 43), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteNAlternateChannels.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteNAlternateChannels.setDescription('Number of alternate channels:\n               Represents the number of channels operating as alternate channels at this site.')
tn9300SiteChannelTimeAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SiteChannelTimeAlternate.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteChannelTimeAlternate.setDescription('Channel time alternate:\n               Represents the total time in seconds that channels at this site have spent as alternate channels since the node started.')
tn9300ChannelTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2), )
if mibBuilder.loadTexts: tn9300ChannelTable.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTable.setDescription('This table stores the details of the channels.')
tn9300ChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300SiteNumber"), (0, "TAIT-TN9300-MIB", "tn9300ChannelBaseStationNumber"), (0, "TAIT-TN9300-MIB", "tn9300ChannelNumber"))
if mibBuilder.loadTexts: tn9300ChannelEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelEntry.setDescription('The table entry index specification, the site number and the channel number.')
tn9300ChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: tn9300ChannelNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelNumber.setDescription('The number of this channel.')
tn9300ChannelIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelIpAddressType.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelIpAddressType.setDescription('The type of internet address for this channel.')
tn9300ChannelIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelIpAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelIpAddress.setDescription('The IP address for this channel.')
tn9300ChannelPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelPort.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelPort.setDescription('The port number of this channel.')
tn9300ChannelRf = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRf.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRf.setDescription('The radio frequency of this channel.')
tn9300ChannelEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelEnabled.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelEnabled.setDescription('Boolean value, true if this channel is enabled.')
tn9300ChannelControlAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelControlAllowed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelControlAllowed.setDescription('Boolean value, true if this channel is allowed to become a control channel.')
tn9300ChannelTrafficAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTrafficAllowed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTrafficAllowed.setDescription('Boolean value, true if this channel is allowed to become a traffic channel.')
tn9300ChannelInhibitIfJammed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelInhibitIfJammed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelInhibitIfJammed.setDescription('Boolean value, true if this channel is configured to be inhibited if it is jammed.')
tn9300ChannelState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 10), ChannelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelState.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelState.setDescription('The state of this channel. Status types are Unknown (0), Disabled (1), Idle (2), Control (3), Traffic (4), Data (5) or Failed (6).')
tn9300ChannelJammed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelJammed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelJammed.setDescription('Boolean value, true if this channel is jammed.')
tn9300ChannelMinorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelMinorAlarm.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelMinorAlarm.setDescription('Boolean value, true if this channel has a minor alarm.')
tn9300ChannelMajorAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelMajorAlarm.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelMajorAlarm.setDescription('Boolean value, true if this channel has a major alarm.')
tn9300ChannelAParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelAParty.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelAParty.setDescription('The MPT1327 number of the A party (if a call is in progress on the channel).')
tn9300ChannelBParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelBParty.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelBParty.setDescription('The MPT1327 number of the B party (if a call is in progress on the channel).')
tn9300ChannelBspRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelBspRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelBspRxPackets.setDescription('The number of BSP packets received from this channel.')
tn9300ChannelBspTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelBspTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelBspTxPackets.setDescription('The number of BSP packets transmitted to this channel.')
tn9300ChannelBspLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelBspLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelBspLostPackets.setDescription('The number of BSP packets which were lost in transmission to this channel.')
tn9300ChannelRtpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRtpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRtpRxPackets.setDescription('The number of RTP packets received from this channel.')
tn9300ChannelRtpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRtpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRtpTxPackets.setDescription('The number of RTP packets transmitted to this channel.')
tn9300ChannelRtpLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRtpLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRtpLostPackets.setDescription('The number of RTP packets which were lost in transmission to this channel.')
tn9300ChannelRtpRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRtpRtt.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRtpRtt.setDescription('The round trip time for RTP pings.')
tn9300ChannelRtpRttJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelRtpRttJitter.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelRtpRttJitter.setDescription('The round trip time jitter for RTP pings.')
tn9300ChannelTimeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTimeFailed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTimeFailed.setDescription('The total time in seconds that this channel has spent in the failed state since the node started.')
tn9300ChannelTimeTraffic = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTimeTraffic.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTimeTraffic.setDescription('The total time in seconds that this channel has spent as a traffic channel since the node started.')
tn9300ChannelTimeControl = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTimeControl.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTimeControl.setDescription('The total time in seconds that this channel has spent as a control channel since the node started.')
tn9300ChannelTimeIdle = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTimeIdle.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTimeIdle.setDescription('The total time in seconds that this channel has spent in the idle state since the node started.')
tn9300ChannelAlternateAllowed = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 28), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelAlternateAllowed.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelAlternateAllowed.setDescription('Boolean value, true if this channel is allowed to become an alternate channel.')
tn9300ChannelTimeAlternate = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300ChannelTimeAlternate.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelTimeAlternate.setDescription('The total time in seconds that this channel has spent as an alternate channel since the node started.')
tn9300ChannelBaseStationNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 2, 1, 99), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: tn9300ChannelBaseStationNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelBaseStationNumber.setDescription('The number of the base station this channel belongs to.')
tn9300AdjacentSiteTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5), )
if mibBuilder.loadTexts: tn9300AdjacentSiteTable.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjacentSiteTable.setDescription('This table stores the details of the adjacent sites.')
tn9300AdjacentSiteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300SiteNumber"), (0, "TAIT-TN9300-MIB", "tn9300AdjSiteSendOrder"))
if mibBuilder.loadTexts: tn9300AdjacentSiteEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjacentSiteEntry.setDescription('The table entry index specification, the site number and the adjacent site number.')
tn9300AdjSiteSendOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: tn9300AdjSiteSendOrder.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteSendOrder.setDescription('The send order of this adjacent site.')
tn9300AdjSiteAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300AdjSiteAlias.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteAlias.setDescription('Site alias:\n                The short name of this site.')
tn9300AdjSiteSyscode1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300AdjSiteSyscode1.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteSyscode1.setDescription('Adjacent Site Syscode1:\n                Represents the first syscode of a this adjacent control channel. Used for a cell extender.')
tn9300AdjSiteRF1 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300AdjSiteRF1.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteRF1.setDescription('Adjacent Site RF1:\n                Represents the first RF number of this adjacent control channel. Used for a cell extender.')
tn9300AdjSiteSyscode2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300AdjSiteSyscode2.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteSyscode2.setDescription('Adjacent Site Syscode2:\n                Represents the second syscode of a this adjacent control channel. Used for a cell extender.')
tn9300AdjSiteRF2 = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 2, 5, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300AdjSiteRF2.setStatus('current')
if mibBuilder.loadTexts: tn9300AdjSiteRF2.setDescription('Adjacent Site RF2:\n                Represents the second RF number of this adjacent control channel. Used for a cell extender.')
tn9300Mpt1327IpAddressType = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327IpAddressType.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327IpAddressType.setDescription('The type of internet address for the MPT1327 Gateway.')
tn9300Mpt1327IpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 2), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327IpAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327IpAddress.setDescription('The IP address of the MPT1327 Gateway.')
tn9300Mpt1327Port = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327Port.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327Port.setDescription('The port number for the MPT1327 Gateway.')
tn9300Mpt1327State = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 4), Mpt1327LinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327State.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327State.setDescription('The state in which the MPT1327 gateway is operating. Status types are Unknown (0), OK (1) or Failed (2).')
tn9300Mpt1327RxBytes = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327RxBytes.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327RxBytes.setDescription('The number of bytes received from the MPT1327 Gateway.')
tn9300Mpt1327TxBytes = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327TxBytes.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327TxBytes.setDescription('The number of bytes transmitted to the MPT1327 Gateway.')
tn9300Mpt1327LinkErrors = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327LinkErrors.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327LinkErrors.setDescription('The number of errors detected on the link to the MPT1327 Gateway.')
tn9300Mpt1327Connections = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327Connections.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327Connections.setDescription('The number of connections established to the MPT1327 Gateway.')
tn9300Mpt1327ChTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1), )
if mibBuilder.loadTexts: tn9300Mpt1327ChTable.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChTable.setDescription('This table stores the details of the MPT1327 gateway channels.')
tn9300Mpt1327ChEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300Mpt1327ChNumber"))
if mibBuilder.loadTexts: tn9300Mpt1327ChEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChEntry.setDescription('The table entry index specification, the MPT1327 gateway channel number.')
tn9300Mpt1327ChNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24)))
if mibBuilder.loadTexts: tn9300Mpt1327ChNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChNumber.setDescription('MPT1327 gateway channel number:\n                The number of this channel.')
tn9300Mpt1327ChIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChIpAddressType.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChIpAddressType.setDescription('MPT1327 gateway channel IP address type:\n                The type of internet address for the network gateway used by this channel.')
tn9300Mpt1327ChIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 3), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChIpAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChIpAddress.setDescription('MPT1327 gateway channel IP address:\n                The IP address of the network gateway used by this channel.')
tn9300Mpt1327ChPort = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChPort.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChPort.setDescription('MPT1327 gateway channel port:\n                The port on the network gateway used by this channel.')
tn9300Mpt1327ChState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 5), Mpt1327ChannelState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChState.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChState.setDescription('MPT1327 gateway channel state:\n                The state in which this channel is operating. Status types are Unknown (0), Idle (1), Traffic (2), Control (3) or Failed (4).')
tn9300Mpt1327ChLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 6), NgwLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChLinkState.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChLinkState.setDescription('MPT1327 gateway channel link state:\n                The state of the link between this channel and its associated network gateway. Status types are Unknown (0), OK (1) or Failed (2).')
tn9300Mpt1327ChAParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChAParty.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChAParty.setDescription('MPT1327 gateway channel A party:\n                The MPT1327 number of the A party (if a call is in progress on this channel).')
tn9300Mpt1327ChBParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChBParty.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChBParty.setDescription('MPT1327 gateway channel B party:\n                The MPT1327 number of the B party (if a call is in progress on this channel).')
tn9300Mpt1327ChNgpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpRxPackets.setDescription('MPT1327 gateway channel NGP rx packets:\n                The number of NGP packets received on this channel from its associated\n                network gateway.')
tn9300Mpt1327ChNgpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpTxPackets.setDescription('MPT1327 gateway channel NGP tx packets:\n                The number of NGP packets transmitted from this channel to its associated\n                network gateway.')
tn9300Mpt1327ChNgpLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChNgpLostPackets.setDescription('MPT1327 gateway channel NGP lost packets:\n                The number of NGP packets lost in transmission from this channel to its associated\n                network gateway.')
tn9300Mpt1327ChRtpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpRxPackets.setDescription('MPT1327 gateway channel RTP rx packets:\n                The number of RTP packets received on this channel from its associated\n                network gateway.')
tn9300Mpt1327ChRtpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpTxPackets.setDescription('MPT1327 gateway channel RTP tx packets:\n                The number of RTP packets transmitted from this channel to its associated\n                network gateway.')
tn9300Mpt1327ChRtpLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpLostPackets.setDescription('MPT1327 gateway channel RTP lost packets:\n                The number of RTP packets lost in transmission from this channel to its associated\n                network gateway.')
tn9300Mpt1327ChRtpRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpRtt.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpRtt.setDescription('MPT1327 gateway channel RTP round trip time:\n                The round trip time for RTP pings.')
tn9300Mpt1327ChRtpJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 6, 1, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpJitter.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChRtpJitter.setDescription('MPT1327 gateway channel RTP round trip time jitter:\n                The round trip time jitter for RTP pings.')
tn9300SipLineTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1), )
if mibBuilder.loadTexts: tn9300SipLineTable.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineTable.setDescription('This table stores the details of the SIP lines.')
tn9300SipLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300SipLineNumber"))
if mibBuilder.loadTexts: tn9300SipLineEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineEntry.setDescription('The table entry index specification, the SIP line number.')
tn9300SipLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)))
if mibBuilder.loadTexts: tn9300SipLineNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineNumber.setDescription('SIP line number:\n                The number of this SIP line.')
tn9300SipLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineName.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineName.setDescription('SIP line name:\n                The name of this SIP line.')
tn9300SipLineRegistrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 3), SipLineRegistrationType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineRegistrationType.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineRegistrationType.setDescription('SIP line type:\n                The registration type configured on this SIP line. Registration types are Unknown (0), Outbound (1), Inbound (2) or AIS (3).')
tn9300SipLineUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineUserName.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineUserName.setDescription('SIP line user name:\n                The user name of this SIP line.')
tn9300SipLineEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineEnabled.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineEnabled.setDescription('Enabled:\n                Boolean value, true if this SIP line is enabled.')
tn9300SipLineSpchVotePri = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 6), SipCallSpeechVotingPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineSpchVotePri.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineSpchVotePri.setDescription('SIP line speech voting priority:\n                Priorities are Unknown (0), Normal (1) or Override (2).')
tn9300SipLineAisMultipartContents = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineAisMultipartContents.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineAisMultipartContents.setDescription('Multipart contents on AIS INVITE message:\n                Boolean value, true if the multipart contents are supported.')
tn9300SipLineAisMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineAisMonitor.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineAisMonitor.setDescription('Registration of AIS call monitor:\n                Boolean value, true if an AIS console is permitted to register as a call monitor.')
tn9300SipLineSipGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineSipGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineSipGroup.setDescription('SIP group name:\n                The SIP group name for this SIP line.')
tn9300SipLineInphoneTable = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineInphoneTable.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineInphoneTable.setDescription('Inphone table name:\n                The Inphone table name for this SIP line.')
tn9300SipLineIncomingType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 11), SipLineIncomingType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineIncomingType.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineIncomingType.setDescription('SIP line A party ID:\n                The ident of the A party for incoming calls on this SIP line (if any). Ident types are Unknown (0), PSTNI (1) or PABXI (2).')
tn9300SipLineProxyAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineProxyAddressType.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineProxyAddressType.setDescription('SIP line outgoing proxy IP address type:\n                The type of internet address for the outgoing proxy used by this SIP line.')
tn9300SipLineProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 13), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineProxyAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineProxyAddress.setDescription('SIP line outgoing proxy IP address:\n                The IP address for the outgoing proxy used by this SIP line.')
tn9300SipLineIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 14), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineIpAddressType.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineIpAddressType.setDescription('SIP gateway IP address type:\n                The type of internet address for the SIP gateway connected this SIP line.')
tn9300SipLineIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 15), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineIpAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineIpAddress.setDescription('SIP gateway IP address:\n                The IP address of the SIP gateway connected by this SIP line.')
tn9300SipLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 16), SipLineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineState.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineState.setDescription('SIP line state:\n                The state in which this SIP line is operating. Status types are Unknown (0), Disabled (1), Up (2) or Down (3).')
tn9300SipLineUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineUptime.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineUptime.setDescription('SIP line uptime:\n                The length of time (in days hh:mm:ss) that the connection between the SIP gateway and the node has been established since its last reset.')
tn9300SipLineConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineConnects.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineConnects.setDescription('SIP line connects:\n                The number of times that the connection between the node and the SIP gateway has been re-established.')
tn9300SipLineCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 3, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300SipLineCalls.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineCalls.setDescription('SIP line calls:\n                The number of calls in progress on the SIP line.')
tn9300DipLineTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1), )
if mibBuilder.loadTexts: tn9300DipLineTable.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineTable.setDescription('This table stores the details of the DIP connection channels.')
tn9300DipLineEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300DipLineNumber"))
if mibBuilder.loadTexts: tn9300DipLineEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineEntry.setDescription('The table entry index specification, the DIP connection channel number.')
tn9300DipLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 300)))
if mibBuilder.loadTexts: tn9300DipLineNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNumber.setDescription('DIP connection number:\n                The number of this DIP connection.')
tn9300DipLineName = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineName.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineName.setDescription('DIP connection name:\n                The name of this DIP connection.')
tn9300DipLineNgwIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgwIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgwIpAddrType.setDescription('DIP connection NGW IP address type:\n                The type of internet address for the network gateway used by this DIP connection.')
tn9300DipLineNgwIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgwIpAddr.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgwIpAddr.setDescription('DIP connection NGW IP address:\n                The IP address of the network gateway used by this DIP connection.')
tn9300DipLineAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineAddress.setDescription('DIP connection Address:\n                The MPT1327 address used for this DIP connection.')
tn9300DipLinePilotAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLinePilotAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLinePilotAddress.setDescription('DIP connection Address:\n                The MPT1327 pilot address used for this DIP connection.')
tn9300DipLineSpchVotePri = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 7), SipCallSpeechVotingPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineSpchVotePri.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineSpchVotePri.setDescription("DIP connection speech voting priority:\n                How the node's packet switch handles incoming speech from the DIP connection. Unknown (0). Normal (1) - speech is handled in the same way as speech from a radio. Override (2) - speech will pre-empt existing speech from a radio, the dispatcher can interrupt any radio in a group call.")
tn9300DipLineState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 8), DipLineState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineState.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineState.setDescription('DIP connection state:\n                The state in which this DIP connection is operating. Status types are Unknown (0), Unconfigured (1), Idle (2), Active (3) or Failed (4).')
tn9300DipLineNgwLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 9), NgwLinkState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgwLinkState.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgwLinkState.setDescription('DIP connection NGW link state:\n                The state of the link between this DIP connection and its associated network gateway. Status types are Unknown (0), OK (1) or Failed (2).')
tn9300DipLineAParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineAParty.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineAParty.setDescription('DIP connection A party:\n                The MPT1327 number of the A party (if a call is in progress on this DIP connection).')
tn9300DipLineBParty = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineBParty.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineBParty.setDescription('DIP connection channel B party:\n                The MPT1327 number of the B party (if a call is in progress on this DIP connection).')
tn9300DipLnClientIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 12), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLnClientIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLnClientIpAddrType.setDescription('DIP connection client IP address type:\n                The type of internet address for the client connected to this DIP connection.')
tn9300DipLnClientIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 13), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLnClientIpAddr.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLnClientIpAddr.setDescription('DIP connection client IP address:\n                The IP address of the client connected to this DIP connection.')
tn9300DipLineClientUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineClientUptime.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineClientUptime.setDescription('DIP connection client uptime:\n                The time that the client has been connected to this DIP connection.')
tn9300DipLineClientConnects = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineClientConnects.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineClientConnects.setDescription('DIP connection client connects:\n                The number of client connections on this DIP connection since this node was last started.')
tn9300DipLineNgpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgpRxPackets.setDescription('DIP connection NGP rx packets:\n                The number of NGP packets received on this DIP connection from its associated network gateway.')
tn9300DipLineNgpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgpTxPackets.setDescription('DIP connection NGP tx packets:\n                The number of NGP packets transmitted from this DIP connection to its associated network gateway.')
tn9300DipLineNgpLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineNgpLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineNgpLostPackets.setDescription('DIP connection NGP lost packets:\n                The number of NGP packets lost in transmission from this DIP connection to its associated network gateway.')
tn9300DipLineRtpRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineRtpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineRtpRxPackets.setDescription('DIP connection RTP rx packets:\n                The number of RTP packets received on this DIP connection from its associated network gateway.')
tn9300DipLineRtpTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineRtpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineRtpTxPackets.setDescription('DIP connection RTP tx packets:\n                The number of RTP packets transmitted from this DIP connection to its associated network gateway.')
tn9300DipLineRtpLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineRtpLostPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineRtpLostPackets.setDescription('DIP connection RTP lost packets:\n                The number of RTP packets lost in transmission from this DIP connection to its associated network gateway.')
tn9300DipLineRtpRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 22), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineRtpRtt.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineRtpRtt.setDescription('DIP connection RTP round trip time:\n                The round trip time for RTP pings between this DIP connection and its associated network gateway.')
tn9300DipLineRtpJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 4, 1, 1, 23), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300DipLineRtpJitter.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineRtpJitter.setDescription('DIP connection RTP round trip time jitter:\n                The round trip time jitter for RTP pings between this DIP connection and its associated network gateway.')
tn9300RemoteNodeTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1), )
if mibBuilder.loadTexts: tn9300RemoteNodeTable.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeTable.setDescription('This table stores the details of the remote nodes.')
tn9300RemoteNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300RemoteNodeNumber"))
if mibBuilder.loadTexts: tn9300RemoteNodeEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeEntry.setDescription('The table entry index specification, the node number.')
tn9300RemoteNodeNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)))
if mibBuilder.loadTexts: tn9300RemoteNodeNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeNumber.setDescription('Remote node number:\n                The number of this remote node.')
tn9300RemoteNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeName.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeName.setDescription('Remote node name.')
tn9300RemoteNodeIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeIpAddrType.setDescription('Remote node IP address type:\n                The type of internet address for this remote node.')
tn9300RemoteNodeIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeIpAddr.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeIpAddr.setDescription('Remote node IP address:\n                The IP address of this remote node.')
tn9300RemoteNodePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodePriority.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodePriority.setDescription('Remote node priority.')
tn9300RemoteNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 6), RemoteNodeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeState.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeState.setDescription('Remote node state:\n                The state in which the this remote node is operating. Status types are Unknown (0), Offline (1), Program (2), Switching (3), Control (4), Failed (5) or Graceful Shutdown (6).')
tn9300RemoteNodeCallSw = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeCallSw.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeCallSw.setDescription('Number of calls being switched on this remote node.')
tn9300RemoteNodeConnectSw = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeConnectSw.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeConnectSw.setDescription('Number of connections being switched on this remote node.')
tn9300RemoteNodeSynced = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 7, 1, 1, 9), RemoteNodeSyncState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300RemoteNodeSynced.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeSynced.setDescription('The state of synchronisation between the control and a remote node. Types are OK (0), Failed (1), Unknown (2), or None (3).')
tn9300UnitTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 1), )
if mibBuilder.loadTexts: tn9300UnitTable.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitTable.setDescription('This table stores the details of the units.')
tn9300UnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300UnitAddress"))
if mibBuilder.loadTexts: tn9300UnitEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitEntry.setDescription('The table entry index specification, the unit address.')
tn9300UnitAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: tn9300UnitAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitAddress.setDescription('Unit address: The unit number, in the format of the DMR raw address.')
tn9300UnitAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300UnitAlias.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitAlias.setDescription('Unit alias: a 7 bit ASCII character unique identifier.')
tn9300UnitAuthentication = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 1, 1, 3), UnitAuthentication()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300UnitAuthentication.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitAuthentication.setDescription('The authentication state of a unit. Types are as follows:\n                Not Polled (0),\n                Polling (1),\n                Not Home (2),\n                Busy (3),\n                Bad Authentication (4),\n                Bad CRC Received (5),\n                Good Authentication Received (6),\n                Rejected (7),\n                Not Registered (8)')
tn9300UnitStatusMessageId = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 9, 2), UnitStatusMessageId()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300UnitStatusMessageId.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitStatusMessageId.setDescription('Unit alarm status message IDs:\n        PPP link to MPC down (1),\n        GPS signal lost (2),\n        GPS signal regained (after loss) (3),\n        Unit antenna connection failure (VSWR out of range) (4),\n        Unit supply voltage out of range (5),\n        Unit temperature T0 (normal range) (6),\n        Unit temperature T1 (over temp) (7),\n        Unit temperature T2 (over temp) (8),\n        Unit temperature T3 (over temp) (9),\n        Unit loss of service (10),\n        Radio frequency out of lock (service regained) (11),\n        MCP configuration error (12)')
tn9300MipRegistered = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipRegistered.setStatus('current')
if mibBuilder.loadTexts: tn9300MipRegistered.setDescription('The number of units registered on the mobile home agent.')
tn9300MipFailing = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipFailing.setStatus('current')
if mibBuilder.loadTexts: tn9300MipFailing.setDescription('The number of units failing to register on the mobile home agent.')
tn9300MipTimeouts = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipTimeouts.setStatus('current')
if mibBuilder.loadTexts: tn9300MipTimeouts.setDescription('The number of home agent registration timeouts that have occured.')
tn9300MipRejections = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipRejections.setStatus('current')
if mibBuilder.loadTexts: tn9300MipRejections.setDescription('The number of home agent registration rejections that have occured.')
tn9300MipIcmpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipIcmpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300MipIcmpRxPackets.setDescription('The number of ICMP packets that have been received over mobile IP.')
tn9300MipIcmpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipIcmpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300MipIcmpTxPackets.setDescription('The number of ICMP packets that have been sent over mobile IP.')
tn9300MipUdpRxPackets = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipUdpRxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300MipUdpRxPackets.setDescription('The number of UDP packets that have been received over mobile IP.')
tn9300MipUdpTxPackets = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipUdpTxPackets.setStatus('current')
if mibBuilder.loadTexts: tn9300MipUdpTxPackets.setDescription('The number of UDP packets that have been sent over mobile IP.')
tn9300MipRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipRxBytes.setStatus('current')
if mibBuilder.loadTexts: tn9300MipRxBytes.setDescription('The number of bytes that have been received over mobile IP.')
tn9300MipTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 8, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn9300MipTxBytes.setStatus('current')
if mibBuilder.loadTexts: tn9300MipTxBytes.setDescription('The number of bytes that have been sent over mobile IP.')
tn9300NetworkGwTable = MibTable((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1), )
if mibBuilder.loadTexts: tn9300NetworkGwTable.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwTable.setDescription('This table stores the details of network gateways.')
tn9300NetworkGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1, 1), ).setIndexNames((0, "TAIT-TN9300-MIB", "tn9300NetworkGwId"))
if mibBuilder.loadTexts: tn9300NetworkGwEntry.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwEntry.setDescription('The table entry index specification, the network gateway ID.')
tn9300NetworkGwId = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: tn9300NetworkGwId.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwId.setDescription('The ID of a network gateway.')
tn9300NetworkGwConnOk = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1, 1, 2), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300NetworkGwConnOk.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwConnOk.setDescription('Indicates whether the network gateway connection is up or not.')
tn9300NetworkGwIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1, 1, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300NetworkGwIpAddrType.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwIpAddrType.setDescription('The type of internet address for this network gateway.')
tn9300NetworkGwIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 10, 1, 1, 4), InetAddress().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(4, 4), ValueSizeConstraint(8, 8), ValueSizeConstraint(16, 16), ValueSizeConstraint(20, 20), ))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300NetworkGwIpAddr.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwIpAddr.setDescription('The IP address for this network gateway.')
tn9300EventSeverity = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99, 2), EventSeverity()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300EventSeverity.setStatus('current')
if mibBuilder.loadTexts: tn9300EventSeverity.setDescription('The severity of an event. Types are OK (0), Minor (1), or Major (2).')
tn9300EventUnitAddress = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99, 3), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300EventUnitAddress.setStatus('current')
if mibBuilder.loadTexts: tn9300EventUnitAddress.setDescription('The unit number, in the format of the DMR raw address. Corresponds to tn9300UnitAddress.')
tn9300EventBaseStationNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300EventBaseStationNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300EventBaseStationNumber.setDescription('The number of the base station the channel belongs to. Corresponds to tn9300ChannelBaseStationNumber.')
tn9300EventChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300EventChannelNumber.setStatus('current')
if mibBuilder.loadTexts: tn9300EventChannelNumber.setDescription('The number of this channel. Corresponds to tn9300ChannelNumber.')
tn9300EventNetworkGwId = MibScalar((1, 3, 6, 1, 4, 1, 3570, 3, 6, 2, 99, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: tn9300EventNetworkGwId.setStatus('current')
if mibBuilder.loadTexts: tn9300EventNetworkGwId.setDescription('The ID of this network gateway. Corresponds to tn9300NetworkGwId.')
tn9300NodeActivationEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 1)).setObjects(("TAIT-TN9300-MIB", "tn9300State"))
if mibBuilder.loadTexts: tn9300NodeActivationEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeActivationEvent.setDescription('Node activated:\n                The node has entered the active state.')
tn9300SiteFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 2)).setObjects(("TAIT-TN9300-MIB", "tn9300SiteOk"), ("TAIT-TN9300-MIB", "tn9300SiteName"))
if mibBuilder.loadTexts: tn9300SiteFailureEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteFailureEvent.setDescription('Site failure:\n                A site has failed.')
tn9300SiteOkEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 3)).setObjects(("TAIT-TN9300-MIB", "tn9300SiteOk"), ("TAIT-TN9300-MIB", "tn9300SiteName"))
if mibBuilder.loadTexts: tn9300SiteOkEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteOkEvent.setDescription('Site OK:\n                A site has recovered.')
tn9300ChannelMinorAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 4)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelMinorAlarm"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300ChannelMinorAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelMinorAlarmEvent.setDescription('Channel minor alarm:\n                A channel has raised a minor alarm.')
tn9300ChannelMajorAlarmEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 5)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelMajorAlarm"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300ChannelMajorAlarmEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelMajorAlarmEvent.setDescription('Channel major alarm:\n                A channel has raised a major alarm.')
tn9300ChannelFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 6)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelState"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300ChannelFailureEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelFailureEvent.setDescription('Channel failure:\n                A channel has failed.')
tn9300ChannelOkEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 7)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelState"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300ChannelOkEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelOkEvent.setDescription('Channel OK:\n                A channel has recovered.')
tn9300ChannelJammedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 8)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelJammed"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"), ("TAIT-TN9300-MIB", "tn9300EventChannelNumber"))
if mibBuilder.loadTexts: tn9300ChannelJammedEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelJammedEvent.setDescription('A channel is jammed.')
tn9300ChannelUnjammedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 9)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelJammed"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"), ("TAIT-TN9300-MIB", "tn9300EventChannelNumber"))
if mibBuilder.loadTexts: tn9300ChannelUnjammedEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelUnjammedEvent.setDescription('A channel is no longer jammed.')
tn9300SipLinkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 14)).setObjects(("TAIT-TN9300-MIB", "tn9300SipLineState"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddressType"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddress"))
if mibBuilder.loadTexts: tn9300SipLinkUpEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLinkUpEvent.setDescription('SIP link up.')
tn9300SipLinkDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 15)).setObjects(("TAIT-TN9300-MIB", "tn9300SipLineState"))
if mibBuilder.loadTexts: tn9300SipLinkDownEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLinkDownEvent.setDescription('SIP link down.')
tn9300DipLinkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 16)).setObjects(("TAIT-TN9300-MIB", "tn9300DipLineState"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddrType"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddr"), ("TAIT-TN9300-MIB", "tn9300DipLineAddress"))
if mibBuilder.loadTexts: tn9300DipLinkUpEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLinkUpEvent.setDescription('DIP link up.')
tn9300DipLinkDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 17)).setObjects(("TAIT-TN9300-MIB", "tn9300DipLineState"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddrType"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddr"), ("TAIT-TN9300-MIB", "tn9300DipLineAddress"))
if mibBuilder.loadTexts: tn9300DipLinkDownEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLinkDownEvent.setDescription('DIP link down.')
tn9300ControlChannelEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 18)).setObjects(("TAIT-TN9300-MIB", "tn9300SiteNControlChannels"), ("TAIT-TN9300-MIB", "tn9300SiteName"))
if mibBuilder.loadTexts: tn9300ControlChannelEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ControlChannelEvent.setDescription('Too few control channels:\n                The number of control channels at a site is less than required.')
tn9300NetworkErrorEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 19)).setObjects(("TAIT-TN9300-MIB", "tn9300NetCheckStateA"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressAType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressA"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateB"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressBType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressB"))
if mibBuilder.loadTexts: tn9300NetworkErrorEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkErrorEvent.setDescription('One or both of the network checks failed.')
tn9300RemoteNodeUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 20)).setObjects(("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeUpEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeUpEvent.setDescription('A remote node is up.')
tn9300RemoteNodeDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 21)).setObjects(("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeDownEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeDownEvent.setDescription('A remote node is down.')
tn9300LowDiskSpaceEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 22))
if mibBuilder.loadTexts: tn9300LowDiskSpaceEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300LowDiskSpaceEvent.setDescription('The node is low on available disk space.')
tn9300LicenseCheckFailedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 23))
if mibBuilder.loadTexts: tn9300LicenseCheckFailedEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300LicenseCheckFailedEvent.setDescription('The node does not have a valid license installed.')
tn9300NetworkGatewayUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 24))
if mibBuilder.loadTexts: tn9300NetworkGatewayUpEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGatewayUpEvent.setDescription('A network gateway connection has been established.')
tn9300NetworkGatewayDownEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 25))
if mibBuilder.loadTexts: tn9300NetworkGatewayDownEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGatewayDownEvent.setDescription('A network gateway has been disconnected.')
tn9300NodeFailedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 26)).setObjects(("TAIT-TN9300-MIB", "tn9300NetCheckStateA"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressAType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressA"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateB"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressBType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressB"))
if mibBuilder.loadTexts: tn9300NodeFailedEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeFailedEvent.setDescription('All network checks have failed.')
tn9300NetworkUpEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 27)).setObjects(("TAIT-TN9300-MIB", "tn9300NetCheckStateA"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressAType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressA"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateB"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressBType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressB"))
if mibBuilder.loadTexts: tn9300NetworkUpEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkUpEvent.setDescription('A network check has succeeded.')
tn9300AuthenticationOkEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 28))
if mibBuilder.loadTexts: tn9300AuthenticationOkEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300AuthenticationOkEvent.setDescription('A radio has passed an authentication check.')
tn9300AuthenticationFailureEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 29))
if mibBuilder.loadTexts: tn9300AuthenticationFailureEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300AuthenticationFailureEvent.setDescription('A radio has failed an authentication check.')
tn9300UnitStatusMessageEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 30)).setObjects(("TAIT-TN9300-MIB", "tn9300UnitStatusMessageId"), ("TAIT-TN9300-MIB", "tn9300EventUnitAddress"))
if mibBuilder.loadTexts: tn9300UnitStatusMessageEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitStatusMessageEvent.setDescription('Terminal alarm notification (UnitStatusMessageId) from <unit address>. Terminal alarm status message IDs:\n        PPP link to MPC down (1),\n        GPS signal lost (2),\n        GPS signal regained (after loss) (3),\n        Terminal antenna connection failure (VSWR out of range) (4),\n        Terminal supply voltage out of range (5),\n        Terminal temperature T0 (normal range) (6),\n        Terminal temperature T1 (over temp) (7),\n        Terminal temperature T2 (over temp) (8),\n        Terminal temperature T3 (over temp) (9),\n        Terminal loss of service (10),\n        Radio frequency out of lock (service regained) (11),\n        MCP configuration error (12),\n        Terminal antenna connection good (13),\n        Terminal unsolicited reset (14),\n        Terminal gained service (15)')
tn9300RemoteNodeSyncFailedEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 31)).setObjects(("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeSyncFailedEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeSyncFailedEvent.setDescription('A remote node database is out of sync.')
tn9300RemoteNodeSyncOkEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 32)).setObjects(("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeSyncOkEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeSyncOkEvent.setDescription('A remote node database is synced with this node.')
tn9300UnitDeregisteredBySystemEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 33)).setObjects(("TAIT-TN9300-MIB", "tn9300EventUnitAddress"))
if mibBuilder.loadTexts: tn9300UnitDeregisteredBySystemEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitDeregisteredBySystemEvent.setDescription('A unit was deregistered by system (timed-out).')
tn9300NodeStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 34)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300State"))
if mibBuilder.loadTexts: tn9300NodeStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeStateEvent.setDescription('The node has changed state.')
tn9300NodeIpNetworkStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 35)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateA"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressAType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressA"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateB"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressBType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressB"))
if mibBuilder.loadTexts: tn9300NodeIpNetworkStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeIpNetworkStateEvent.setDescription('At least one of the network check results have changed.')
tn9300NodeDiskSpaceEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 36)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300DiskSpaceOk"))
if mibBuilder.loadTexts: tn9300NodeDiskSpaceEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeDiskSpaceEvent.setDescription('The available disk space has either went below or above threshold.')
tn9300NodeLicenseEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 37)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300LicenseValidity"))
if mibBuilder.loadTexts: tn9300NodeLicenseEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NodeLicenseEvent.setDescription('The validity of the license has changed.')
tn9300SiteStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 38)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300SiteOk"), ("TAIT-TN9300-MIB", "tn9300SiteName"))
if mibBuilder.loadTexts: tn9300SiteStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteStateEvent.setDescription('A site has changed state.')
tn9300SiteControlChCountEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 39)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300SiteControlChCountOk"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300SiteNControlChannels"))
if mibBuilder.loadTexts: tn9300SiteControlChCountEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteControlChCountEvent.setDescription('The number of control channels for a site has either went below or equal the required.')
tn9300BSMinorAlarmStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 40)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300ChannelMinorAlarm"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300BSMinorAlarmStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300BSMinorAlarmStateEvent.setDescription("A base station's minor alarm state has changed.")
tn9300BSMajorAlarmStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 41)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300ChannelMajorAlarm"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300BSMajorAlarmStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300BSMajorAlarmStateEvent.setDescription("A base station's major alarm state has changed.")
tn9300BSStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 42)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300ChannelState"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"))
if mibBuilder.loadTexts: tn9300BSStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300BSStateEvent.setDescription('A base station has changed state.')
tn9300ChannelJammedStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 43)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300ChannelJammed"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"), ("TAIT-TN9300-MIB", "tn9300EventChannelNumber"))
if mibBuilder.loadTexts: tn9300ChannelJammedStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelJammedStateEvent.setDescription("A channel's jammed state has changed.")
tn9300ChannelStuckMuteEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 44)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"), ("TAIT-TN9300-MIB", "tn9300EventChannelNumber"))
if mibBuilder.loadTexts: tn9300ChannelStuckMuteEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelStuckMuteEvent.setDescription("A channel has reached its site's open mute timeout.")
tn9300SipLinkStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 45)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300SipLineState"), ("TAIT-TN9300-MIB", "tn9300SipLineName"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddressType"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddress"))
if mibBuilder.loadTexts: tn9300SipLinkStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLinkStateEvent.setDescription('A SIP link has changed state.')
tn9300DipLinkStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 46)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300DipLineState"), ("TAIT-TN9300-MIB", "tn9300DipLineName"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddrType"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddr"), ("TAIT-TN9300-MIB", "tn9300DipLineAddress"))
if mibBuilder.loadTexts: tn9300DipLinkStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLinkStateEvent.setDescription('A DIP link has changed state.')
tn9300RemoteNodeStateEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 47)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeName"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeStateEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeStateEvent.setDescription('A remote node has changed state.')
tn9300RemoteNodeSyncEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 48)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeSynced"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeName"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"))
if mibBuilder.loadTexts: tn9300RemoteNodeSyncEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeSyncEvent.setDescription("A remote node's sync state has changed.")
tn9300NetworkGwConnEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 49)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300NetworkGwConnOk"), ("TAIT-TN9300-MIB", "tn9300EventNetworkGwId"), ("TAIT-TN9300-MIB", "tn9300NetworkGwIpAddrType"), ("TAIT-TN9300-MIB", "tn9300NetworkGwIpAddr"))
if mibBuilder.loadTexts: tn9300NetworkGwConnEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwConnEvent.setDescription('A network gateway has changed state.')
tn9300UnitAuthenticationEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 50)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300UnitAuthentication"), ("TAIT-TN9300-MIB", "tn9300EventUnitAddress"))
if mibBuilder.loadTexts: tn9300UnitAuthenticationEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitAuthenticationEvent.setDescription("A unit's authentication state has changed.")
tn9300UnitStatusMsgEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 51)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300UnitStatusMessageId"), ("TAIT-TN9300-MIB", "tn9300EventUnitAddress"))
if mibBuilder.loadTexts: tn9300UnitStatusMsgEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitStatusMsgEvent.setDescription('A status message from a unit was received.')
tn9300UnitRegTimeoutEvent = NotificationType((1, 3, 6, 1, 4, 1, 3570, 3, 6, 3, 0, 52)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300EventUnitAddress"))
if mibBuilder.loadTexts: tn9300UnitRegTimeoutEvent.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitRegTimeoutEvent.setDescription('A unit has reached the registration time limit and was deregistered by the system.')
tn9300StatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 1)).setObjects(("TAIT-TN9300-MIB", "tn9300Version"), ("TAIT-TN9300-MIB", "tn9300Name"), ("TAIT-TN9300-MIB", "tn9300Priority"), ("TAIT-TN9300-MIB", "tn9300RequestedState"), ("TAIT-TN9300-MIB", "tn9300State"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressAType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressA"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateA"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressBType"), ("TAIT-TN9300-MIB", "tn9300NetCheckAddressB"), ("TAIT-TN9300-MIB", "tn9300NetCheckStateB"), ("TAIT-TN9300-MIB", "tn9300CallsSwitching"), ("TAIT-TN9300-MIB", "tn9300ConnectionsSwitching"), ("TAIT-TN9300-MIB", "tn9300MemoryUsage"), ("TAIT-TN9300-MIB", "tn9300CpuUsage"), ("TAIT-TN9300-MIB", "tn9300DiskSpaceOk"), ("TAIT-TN9300-MIB", "tn9300LicenseValidity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300StatusGroup = tn9300StatusGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300StatusGroup.setDescription('The objects that describe the status of the node controller.')
tn9300SiteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 2)).setObjects(("TAIT-TN9300-MIB", "tn9300SiteName"), ("TAIT-TN9300-MIB", "tn9300SiteSyscode"), ("TAIT-TN9300-MIB", "tn9300SiteEnabled"), ("TAIT-TN9300-MIB", "tn9300SiteOk"), ("TAIT-TN9300-MIB", "tn9300SiteAutoQueueDepth"), ("TAIT-TN9300-MIB", "tn9300SiteQueueDepth"), ("TAIT-TN9300-MIB", "tn9300SiteZone"), ("TAIT-TN9300-MIB", "tn9300SiteExtraWaitSlots"), ("TAIT-TN9300-MIB", "tn9300SiteCCReassignTimeout"), ("TAIT-TN9300-MIB", "tn9300SiteTCRotation"), ("TAIT-TN9300-MIB", "tn9300SiteRxActivityTimeout"), ("TAIT-TN9300-MIB", "tn9300SiteRxInactiveTimeout"), ("TAIT-TN9300-MIB", "tn9300SiteFramelength"), ("TAIT-TN9300-MIB", "tn9300SiteMinFramelength"), ("TAIT-TN9300-MIB", "tn9300SiteMaxFramelength"), ("TAIT-TN9300-MIB", "tn9300SiteDualCC"), ("TAIT-TN9300-MIB", "tn9300SiteOpenMuteTimeout"), ("TAIT-TN9300-MIB", "tn9300SiteManAdjSiteRF"), ("TAIT-TN9300-MIB", "tn9300SiteManAdjSiteSyscode"), ("TAIT-TN9300-MIB", "tn9300SiteNChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNControlChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNTrafficChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNIdleChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNDisabledChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNFailedChannels"), ("TAIT-TN9300-MIB", "tn9300SiteNOnAirCalls"), ("TAIT-TN9300-MIB", "tn9300SiteNRingingCalls"), ("TAIT-TN9300-MIB", "tn9300SiteNQueuedCalls"), ("TAIT-TN9300-MIB", "tn9300SiteTotalCalls"), ("TAIT-TN9300-MIB", "tn9300SiteTotalChannelCalls"), ("TAIT-TN9300-MIB", "tn9300SiteTotalQueueTime"), ("TAIT-TN9300-MIB", "tn9300SiteChannelTimeFailed"), ("TAIT-TN9300-MIB", "tn9300SiteChannelTimeTraffic"), ("TAIT-TN9300-MIB", "tn9300SiteChannelTimeControl"), ("TAIT-TN9300-MIB", "tn9300SiteChannelTimeIdle"), ("TAIT-TN9300-MIB", "tn9300SiteCallsQueuedUnder5"), ("TAIT-TN9300-MIB", "tn9300SiteCallsQueued5To10"), ("TAIT-TN9300-MIB", "tn9300SiteCallsQueued10To20"), ("TAIT-TN9300-MIB", "tn9300SiteCallsQueuedOver20"), ("TAIT-TN9300-MIB", "tn9300SiteAlias"), ("TAIT-TN9300-MIB", "tn9300AdjSiteAlias"), ("TAIT-TN9300-MIB", "tn9300AdjSiteSyscode1"), ("TAIT-TN9300-MIB", "tn9300AdjSiteSyscode2"), ("TAIT-TN9300-MIB", "tn9300AdjSiteRF1"), ("TAIT-TN9300-MIB", "tn9300AdjSiteRF2"), ("TAIT-TN9300-MIB", "tn9300SiteControlChCountOk"), ("TAIT-TN9300-MIB", "tn9300SiteNAlternateChannels"), ("TAIT-TN9300-MIB", "tn9300SiteChannelTimeAlternate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300SiteGroup = tn9300SiteGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300SiteGroup.setDescription('The objects that describe the status of a site.')
tn9300ChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 3)).setObjects(("TAIT-TN9300-MIB", "tn9300ChannelIpAddressType"), ("TAIT-TN9300-MIB", "tn9300ChannelIpAddress"), ("TAIT-TN9300-MIB", "tn9300ChannelPort"), ("TAIT-TN9300-MIB", "tn9300ChannelRf"), ("TAIT-TN9300-MIB", "tn9300ChannelEnabled"), ("TAIT-TN9300-MIB", "tn9300ChannelControlAllowed"), ("TAIT-TN9300-MIB", "tn9300ChannelTrafficAllowed"), ("TAIT-TN9300-MIB", "tn9300ChannelInhibitIfJammed"), ("TAIT-TN9300-MIB", "tn9300ChannelState"), ("TAIT-TN9300-MIB", "tn9300ChannelJammed"), ("TAIT-TN9300-MIB", "tn9300ChannelMinorAlarm"), ("TAIT-TN9300-MIB", "tn9300ChannelMajorAlarm"), ("TAIT-TN9300-MIB", "tn9300ChannelAParty"), ("TAIT-TN9300-MIB", "tn9300ChannelBParty"), ("TAIT-TN9300-MIB", "tn9300ChannelBspRxPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelBspTxPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelBspLostPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelRtpRxPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelRtpTxPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelRtpLostPackets"), ("TAIT-TN9300-MIB", "tn9300ChannelRtpRtt"), ("TAIT-TN9300-MIB", "tn9300ChannelRtpRttJitter"), ("TAIT-TN9300-MIB", "tn9300ChannelTimeFailed"), ("TAIT-TN9300-MIB", "tn9300ChannelTimeTraffic"), ("TAIT-TN9300-MIB", "tn9300ChannelTimeControl"), ("TAIT-TN9300-MIB", "tn9300ChannelTimeIdle"), ("TAIT-TN9300-MIB", "tn9300ChannelAlternateAllowed"), ("TAIT-TN9300-MIB", "tn9300ChannelTimeAlternate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300ChannelGroup = tn9300ChannelGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300ChannelGroup.setDescription('The objects that describe the status of a channel.')
tn9300Mpt1327Group = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 6)).setObjects(("TAIT-TN9300-MIB", "tn9300Mpt1327IpAddressType"), ("TAIT-TN9300-MIB", "tn9300Mpt1327IpAddress"), ("TAIT-TN9300-MIB", "tn9300Mpt1327Port"), ("TAIT-TN9300-MIB", "tn9300Mpt1327State"), ("TAIT-TN9300-MIB", "tn9300Mpt1327RxBytes"), ("TAIT-TN9300-MIB", "tn9300Mpt1327TxBytes"), ("TAIT-TN9300-MIB", "tn9300Mpt1327LinkErrors"), ("TAIT-TN9300-MIB", "tn9300Mpt1327Connections"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300Mpt1327Group = tn9300Mpt1327Group.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327Group.setDescription('The objects that describe the status of the MPT1327 Gateway.')
tn9300Mpt1327ChGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 7)).setObjects(("TAIT-TN9300-MIB", "tn9300Mpt1327ChIpAddressType"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChIpAddress"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChPort"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChState"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChLinkState"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChAParty"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChBParty"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChNgpRxPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChNgpTxPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChNgpLostPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChRtpRxPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChRtpTxPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChRtpLostPackets"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChRtpRtt"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChRtpJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300Mpt1327ChGroup = tn9300Mpt1327ChGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300Mpt1327ChGroup.setDescription('The objects that describe the status of an MPT1327 gateway channel.')
tn9300SipLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 8)).setObjects(("TAIT-TN9300-MIB", "tn9300SipLineName"), ("TAIT-TN9300-MIB", "tn9300SipLineIncomingType"), ("TAIT-TN9300-MIB", "tn9300SipLineSpchVotePri"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddressType"), ("TAIT-TN9300-MIB", "tn9300SipLineIpAddress"), ("TAIT-TN9300-MIB", "tn9300SipLineState"), ("TAIT-TN9300-MIB", "tn9300SipLineUptime"), ("TAIT-TN9300-MIB", "tn9300SipLineConnects"), ("TAIT-TN9300-MIB", "tn9300SipLineRegistrationType"), ("TAIT-TN9300-MIB", "tn9300SipLineUserName"), ("TAIT-TN9300-MIB", "tn9300SipLineEnabled"), ("TAIT-TN9300-MIB", "tn9300SipLineAisMultipartContents"), ("TAIT-TN9300-MIB", "tn9300SipLineAisMonitor"), ("TAIT-TN9300-MIB", "tn9300SipLineSipGroup"), ("TAIT-TN9300-MIB", "tn9300SipLineInphoneTable"), ("TAIT-TN9300-MIB", "tn9300SipLineProxyAddressType"), ("TAIT-TN9300-MIB", "tn9300SipLineProxyAddress"), ("TAIT-TN9300-MIB", "tn9300SipLineCalls"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300SipLineGroup = tn9300SipLineGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300SipLineGroup.setDescription('The objects that describe the status of a SIP line.')
tn9300DipLineGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 9)).setObjects(("TAIT-TN9300-MIB", "tn9300DipLineName"), ("TAIT-TN9300-MIB", "tn9300DipLineNgwIpAddrType"), ("TAIT-TN9300-MIB", "tn9300DipLineNgwIpAddr"), ("TAIT-TN9300-MIB", "tn9300DipLineAddress"), ("TAIT-TN9300-MIB", "tn9300DipLinePilotAddress"), ("TAIT-TN9300-MIB", "tn9300DipLineSpchVotePri"), ("TAIT-TN9300-MIB", "tn9300DipLineState"), ("TAIT-TN9300-MIB", "tn9300DipLineNgwLinkState"), ("TAIT-TN9300-MIB", "tn9300DipLineAParty"), ("TAIT-TN9300-MIB", "tn9300DipLineBParty"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddrType"), ("TAIT-TN9300-MIB", "tn9300DipLnClientIpAddr"), ("TAIT-TN9300-MIB", "tn9300DipLineClientUptime"), ("TAIT-TN9300-MIB", "tn9300DipLineClientConnects"), ("TAIT-TN9300-MIB", "tn9300DipLineNgpRxPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineNgpTxPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineNgpLostPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineRtpRxPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineRtpTxPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineRtpLostPackets"), ("TAIT-TN9300-MIB", "tn9300DipLineRtpRtt"), ("TAIT-TN9300-MIB", "tn9300DipLineRtpJitter"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300DipLineGroup = tn9300DipLineGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300DipLineGroup.setDescription('The objects that describe the status of a DIP connection.')
tn9300RemoteNodeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 10)).setObjects(("TAIT-TN9300-MIB", "tn9300RemoteNodeName"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddrType"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeIpAddr"), ("TAIT-TN9300-MIB", "tn9300RemoteNodePriority"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeState"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeCallSw"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeConnectSw"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeSynced"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300RemoteNodeGroup = tn9300RemoteNodeGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300RemoteNodeGroup.setDescription('The objects that describe the status of a remote node.')
tn9300EventGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 12)).setObjects(("TAIT-TN9300-MIB", "tn9300NodeActivationEvent"), ("TAIT-TN9300-MIB", "tn9300SiteFailureEvent"), ("TAIT-TN9300-MIB", "tn9300SiteOkEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelMinorAlarmEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelMajorAlarmEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelFailureEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelOkEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelJammedEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelUnjammedEvent"), ("TAIT-TN9300-MIB", "tn9300SipLinkUpEvent"), ("TAIT-TN9300-MIB", "tn9300SipLinkDownEvent"), ("TAIT-TN9300-MIB", "tn9300DipLinkUpEvent"), ("TAIT-TN9300-MIB", "tn9300DipLinkDownEvent"), ("TAIT-TN9300-MIB", "tn9300ControlChannelEvent"), ("TAIT-TN9300-MIB", "tn9300NetworkErrorEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeUpEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeDownEvent"), ("TAIT-TN9300-MIB", "tn9300LowDiskSpaceEvent"), ("TAIT-TN9300-MIB", "tn9300LicenseCheckFailedEvent"), ("TAIT-TN9300-MIB", "tn9300NetworkGatewayUpEvent"), ("TAIT-TN9300-MIB", "tn9300NetworkGatewayDownEvent"), ("TAIT-TN9300-MIB", "tn9300NodeFailedEvent"), ("TAIT-TN9300-MIB", "tn9300NetworkUpEvent"), ("TAIT-TN9300-MIB", "tn9300AuthenticationOkEvent"), ("TAIT-TN9300-MIB", "tn9300AuthenticationFailureEvent"), ("TAIT-TN9300-MIB", "tn9300UnitStatusMessageEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeSyncFailedEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeSyncOkEvent"), ("TAIT-TN9300-MIB", "tn9300UnitDeregisteredBySystemEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300EventGroup = tn9300EventGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300EventGroup.setDescription('The notification group.')
tn9300MobileIpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 13)).setObjects(("TAIT-TN9300-MIB", "tn9300MipRegistered"), ("TAIT-TN9300-MIB", "tn9300MipFailing"), ("TAIT-TN9300-MIB", "tn9300MipTimeouts"), ("TAIT-TN9300-MIB", "tn9300MipRejections"), ("TAIT-TN9300-MIB", "tn9300MipIcmpRxPackets"), ("TAIT-TN9300-MIB", "tn9300MipIcmpTxPackets"), ("TAIT-TN9300-MIB", "tn9300MipUdpRxPackets"), ("TAIT-TN9300-MIB", "tn9300MipUdpTxPackets"), ("TAIT-TN9300-MIB", "tn9300MipRxBytes"), ("TAIT-TN9300-MIB", "tn9300MipTxBytes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300MobileIpGroup = tn9300MobileIpGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300MobileIpGroup.setDescription('The objects that describe the counters for mobile IP.')
tn9300UnitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 14)).setObjects(("TAIT-TN9300-MIB", "tn9300UnitAlias"), ("TAIT-TN9300-MIB", "tn9300UnitStatusMessageId"), ("TAIT-TN9300-MIB", "tn9300UnitAuthentication"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300UnitGroup = tn9300UnitGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300UnitGroup.setDescription('The objects that describe the status of a unit.')
tn9300EventObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 15)).setObjects(("TAIT-TN9300-MIB", "tn9300EventSeverity"), ("TAIT-TN9300-MIB", "tn9300EventUnitAddress"), ("TAIT-TN9300-MIB", "tn9300EventBaseStationNumber"), ("TAIT-TN9300-MIB", "tn9300EventChannelNumber"), ("TAIT-TN9300-MIB", "tn9300EventNetworkGwId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300EventObjectGroup = tn9300EventObjectGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300EventObjectGroup.setDescription('The objects that are used specifically for events.')
tn9300EventGroupV2 = NotificationGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 16)).setObjects(("TAIT-TN9300-MIB", "tn9300NodeStateEvent"), ("TAIT-TN9300-MIB", "tn9300NodeIpNetworkStateEvent"), ("TAIT-TN9300-MIB", "tn9300NodeDiskSpaceEvent"), ("TAIT-TN9300-MIB", "tn9300NodeLicenseEvent"), ("TAIT-TN9300-MIB", "tn9300SiteStateEvent"), ("TAIT-TN9300-MIB", "tn9300SiteControlChCountEvent"), ("TAIT-TN9300-MIB", "tn9300BSMinorAlarmStateEvent"), ("TAIT-TN9300-MIB", "tn9300BSMajorAlarmStateEvent"), ("TAIT-TN9300-MIB", "tn9300BSStateEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelJammedStateEvent"), ("TAIT-TN9300-MIB", "tn9300ChannelStuckMuteEvent"), ("TAIT-TN9300-MIB", "tn9300SipLinkStateEvent"), ("TAIT-TN9300-MIB", "tn9300DipLinkStateEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeStateEvent"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeSyncEvent"), ("TAIT-TN9300-MIB", "tn9300NetworkGwConnEvent"), ("TAIT-TN9300-MIB", "tn9300UnitAuthenticationEvent"), ("TAIT-TN9300-MIB", "tn9300UnitStatusMsgEvent"), ("TAIT-TN9300-MIB", "tn9300UnitRegTimeoutEvent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300EventGroupV2 = tn9300EventGroupV2.setStatus('current')
if mibBuilder.loadTexts: tn9300EventGroupV2.setDescription('The new set of notification objects.')
tn9300NetworkGwGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 1, 17)).setObjects(("TAIT-TN9300-MIB", "tn9300NetworkGwConnOk"), ("TAIT-TN9300-MIB", "tn9300NetworkGwIpAddrType"), ("TAIT-TN9300-MIB", "tn9300NetworkGwIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300NetworkGwGroup = tn9300NetworkGwGroup.setStatus('current')
if mibBuilder.loadTexts: tn9300NetworkGwGroup.setDescription('The objects that describe the status of a network gateway.')
tn9300ComplianceV1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 3570, 3, 6, 1, 2, 1)).setObjects(("TAIT-TN9300-MIB", "tn9300StatusGroup"), ("TAIT-TN9300-MIB", "tn9300SiteGroup"), ("TAIT-TN9300-MIB", "tn9300ChannelGroup"), ("TAIT-TN9300-MIB", "tn9300SipLineGroup"), ("TAIT-TN9300-MIB", "tn9300DipLineGroup"), ("TAIT-TN9300-MIB", "tn9300Mpt1327Group"), ("TAIT-TN9300-MIB", "tn9300Mpt1327ChGroup"), ("TAIT-TN9300-MIB", "tn9300RemoteNodeGroup"), ("TAIT-TN9300-MIB", "tn9300EventGroup"), ("TAIT-TN9300-MIB", "tn9300MobileIpGroup"), ("TAIT-TN9300-MIB", "tn9300UnitGroup"), ("TAIT-TN9300-MIB", "tn9300EventObjectGroup"), ("TAIT-TN9300-MIB", "tn9300EventGroupV2"), ("TAIT-TN9300-MIB", "tn9300NetworkGwGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn9300ComplianceV1 = tn9300ComplianceV1.setStatus('current')
if mibBuilder.loadTexts: tn9300ComplianceV1.setDescription('The implementation requirements for the Tait TN9300 MIB')
mibBuilder.exportSymbols("TAIT-TN9300-MIB", tn9300ChannelMinorAlarm=tn9300ChannelMinorAlarm, tn9300Version=tn9300Version, tn9300SipLineUptime=tn9300SipLineUptime, tn9300Mpt1327IpAddressType=tn9300Mpt1327IpAddressType, tn9300SiteNFailedChannels=tn9300SiteNFailedChannels, tn9300DipLineClientConnects=tn9300DipLineClientConnects, tn9300RemoteNodeTable=tn9300RemoteNodeTable, tn9300SiteEntry=tn9300SiteEntry, tn9300UnitAuthentication=tn9300UnitAuthentication, tn9300SipLineInphoneTable=tn9300SipLineInphoneTable, tn9300SipLineEntry=tn9300SipLineEntry, tn9300ComplianceV1=tn9300ComplianceV1, tn9300ChannelAlternateAllowed=tn9300ChannelAlternateAllowed, tn9300ConnectionsSwitching=tn9300ConnectionsSwitching, tn9300NetworkGatewayDownEvent=tn9300NetworkGatewayDownEvent, tn9300Mpt1327IpAddress=tn9300Mpt1327IpAddress, tn9300DipLineNgwIpAddrType=tn9300DipLineNgwIpAddrType, tn9300NodeLicenseEvent=tn9300NodeLicenseEvent, tn9300ChannelTrafficAllowed=tn9300ChannelTrafficAllowed, tn9300ChannelFailureEvent=tn9300ChannelFailureEvent, tn9300Objs=tn9300Objs, tn9300LicenseValidity=tn9300LicenseValidity, tn9300Mpt1327Group=tn9300Mpt1327Group, tn9300RemoteNodeUpEvent=tn9300RemoteNodeUpEvent, PYSNMP_MODULE_ID=tn9300MibModule, tn9300Mpt1327Objs=tn9300Mpt1327Objs, tn9300NetCheckAddressB=tn9300NetCheckAddressB, tn9300SipLineSpchVotePri=tn9300SipLineSpchVotePri, tn9300SipLineEnabled=tn9300SipLineEnabled, tn9300DipLineBParty=tn9300DipLineBParty, tn9300UnitEntry=tn9300UnitEntry, tn9300ChannelInhibitIfJammed=tn9300ChannelInhibitIfJammed, tn9300NodeStateEvent=tn9300NodeStateEvent, tn9300SiteRxInactiveTimeout=tn9300SiteRxInactiveTimeout, tn9300Priority=tn9300Priority, tn9300State=tn9300State, tn9300SiteName=tn9300SiteName, tn9300ChannelRtpRtt=tn9300ChannelRtpRtt, tn9300Mpt1327ChTable=tn9300Mpt1327ChTable, tn9300ChannelRtpLostPackets=tn9300ChannelRtpLostPackets, tn9300DipLineNgpTxPackets=tn9300DipLineNgpTxPackets, tn9300RemoteNodeCallSw=tn9300RemoteNodeCallSw, tn9300NodeDiskSpaceEvent=tn9300NodeDiskSpaceEvent, tn9300Mpt1327ChGroup=tn9300Mpt1327ChGroup, tn9300ChannelMinorAlarmEvent=tn9300ChannelMinorAlarmEvent, tn9300SiteMaxFramelength=tn9300SiteMaxFramelength, tn9300StatusGroup=tn9300StatusGroup, tn9300Mpt1327ChIpAddressType=tn9300Mpt1327ChIpAddressType, tn9300EventObjectGroup=tn9300EventObjectGroup, tn9300ChannelRtpRxPackets=tn9300ChannelRtpRxPackets, tn9300Mpt1327ChLinkState=tn9300Mpt1327ChLinkState, tn9300DipLineSpchVotePri=tn9300DipLineSpchVotePri, tn9300CgmMIB=tn9300CgmMIB, tn9300SipLineProxyAddressType=tn9300SipLineProxyAddressType, tn9300NetworkGwTable=tn9300NetworkGwTable, tn9300DipLinkDownEvent=tn9300DipLinkDownEvent, tn9300ObjectsForEvents=tn9300ObjectsForEvents, tn9300CpuUsage=tn9300CpuUsage, tn9300NetworkGwIpAddr=tn9300NetworkGwIpAddr, tn9300SiteTotalChannelCalls=tn9300SiteTotalChannelCalls, tn9300RequestedState=tn9300RequestedState, tn9300ChannelBParty=tn9300ChannelBParty, tn9300NetworkGwConnOk=tn9300NetworkGwConnOk, tn9300RemoteNodeSynced=tn9300RemoteNodeSynced, tn9300SiteChannelTimeAlternate=tn9300SiteChannelTimeAlternate, tn9300ChannelJammedEvent=tn9300ChannelJammedEvent, tn9300SiteStateEvent=tn9300SiteStateEvent, tn9300SiteChannelTimeControl=tn9300SiteChannelTimeControl, tn9300RemoteNodeState=tn9300RemoteNodeState, tn9300Mpt1327ChState=tn9300Mpt1327ChState, tn9300SiteEnabled=tn9300SiteEnabled, tn9300SiteManAdjSiteSyscode=tn9300SiteManAdjSiteSyscode, tn9300Mpt1327ChBParty=tn9300Mpt1327ChBParty, tn9300Mpt1327State=tn9300Mpt1327State, tn9300SiteOkEvent=tn9300SiteOkEvent, tn9300DipLineRtpJitter=tn9300DipLineRtpJitter, tn9300AdjSiteAlias=tn9300AdjSiteAlias, tn9300UnitStatusMessageEvent=tn9300UnitStatusMessageEvent, tn9300DipLineEntry=tn9300DipLineEntry, tn9300RemoteNodePriority=tn9300RemoteNodePriority, tn9300EventSeverity=tn9300EventSeverity, tn9300EventChannelNumber=tn9300EventChannelNumber, tn9300RemoteNodeDownEvent=tn9300RemoteNodeDownEvent, tn9300MipRegistered=tn9300MipRegistered, tn9300Mpt1327ChRtpRtt=tn9300Mpt1327ChRtpRtt, tn9300MipRejections=tn9300MipRejections, tn9300Groups=tn9300Groups, tn9300SiteNRingingCalls=tn9300SiteNRingingCalls, tn9300DipLineNumber=tn9300DipLineNumber, tn9300SiteSyscode=tn9300SiteSyscode, tn9300UnitAlias=tn9300UnitAlias, tn9300DipLineObjs=tn9300DipLineObjs, tn9300SiteCCReassignTimeout=tn9300SiteCCReassignTimeout, tn9300Mpt1327ChRtpLostPackets=tn9300Mpt1327ChRtpLostPackets, tn9300ChannelEntry=tn9300ChannelEntry, tn9300SipLineSipGroup=tn9300SipLineSipGroup, tn9300AdjSiteRF1=tn9300AdjSiteRF1, tn9300DipLinePilotAddress=tn9300DipLinePilotAddress, tn9300BSMinorAlarmStateEvent=tn9300BSMinorAlarmStateEvent, tn9300Confs=tn9300Confs, tn9300BSMajorAlarmStateEvent=tn9300BSMajorAlarmStateEvent, tn9300AdjSiteSyscode1=tn9300AdjSiteSyscode1, tn9300NetCheckStateB=tn9300NetCheckStateB, tn9300NodeFailedEvent=tn9300NodeFailedEvent, tn9300MipUdpTxPackets=tn9300MipUdpTxPackets, tn9300EventObjs=tn9300EventObjs, tn9300NetCheckAddressAType=tn9300NetCheckAddressAType, tn9300ChannelAParty=tn9300ChannelAParty, tn9300SipLineName=tn9300SipLineName, tn9300UnitStatusMsgEvent=tn9300UnitStatusMsgEvent, tn9300SiteChannelTimeFailed=tn9300SiteChannelTimeFailed, tn9300SiteAlias=tn9300SiteAlias, tn9300DipLineName=tn9300DipLineName, tn9300ChannelGroup=tn9300ChannelGroup, tn9300AdjSiteSendOrder=tn9300AdjSiteSendOrder, tn9300UnitGroup=tn9300UnitGroup, tn9300Mpt1327ChObjs=tn9300Mpt1327ChObjs, tn9300SiteTCRotation=tn9300SiteTCRotation, tn9300UnitObjs=tn9300UnitObjs, tn9300ChannelBspLostPackets=tn9300ChannelBspLostPackets, tn9300MibModule=tn9300MibModule, tn9300Mpt1327ChRtpTxPackets=tn9300Mpt1327ChRtpTxPackets, tn9300ChannelJammed=tn9300ChannelJammed, tn9300Mpt1327TxBytes=tn9300Mpt1327TxBytes, tn9300DipLineTable=tn9300DipLineTable, tn9300DipLineRtpRtt=tn9300DipLineRtpRtt, tn9300MobileIpGroup=tn9300MobileIpGroup, tn9300ChannelRf=tn9300ChannelRf, tn9300SipLineIpAddress=tn9300SipLineIpAddress, tn9300DipLineNgwLinkState=tn9300DipLineNgwLinkState, tn9300Mpt1327ChNgpTxPackets=tn9300Mpt1327ChNgpTxPackets, tn9300SiteTotalCalls=tn9300SiteTotalCalls, tn9300SiteOk=tn9300SiteOk, tn9300SiteTotalQueueTime=tn9300SiteTotalQueueTime, tn9300EventNetworkGwId=tn9300EventNetworkGwId, tn9300SiteOpenMuteTimeout=tn9300SiteOpenMuteTimeout, tn9300Mpt1327ChAParty=tn9300Mpt1327ChAParty, tn9300ChannelStuckMuteEvent=tn9300ChannelStuckMuteEvent, tn9300AdjacentSiteEntry=tn9300AdjacentSiteEntry, tn9300MIB=tn9300MIB, tn9300Mpt1327ChRtpJitter=tn9300Mpt1327ChRtpJitter, tn9300Events=tn9300Events, tn9300ChannelTable=tn9300ChannelTable, tn9300Mpt1327ChEntry=tn9300Mpt1327ChEntry, tn9300NodeObjs=tn9300NodeObjs, tn9300ControlChannelEvent=tn9300ControlChannelEvent, tn9300SiteNAlternateChannels=tn9300SiteNAlternateChannels, tn9300ChannelTimeTraffic=tn9300ChannelTimeTraffic, tn9300NetworkGwObjs=tn9300NetworkGwObjs, tn9300AuthenticationFailureEvent=tn9300AuthenticationFailureEvent, tn9300RemoteNodeSyncFailedEvent=tn9300RemoteNodeSyncFailedEvent, tn9300ChannelMajorAlarmEvent=tn9300ChannelMajorAlarmEvent, tn9300Compl=tn9300Compl, tn9300NetworkErrorEvent=tn9300NetworkErrorEvent, tn9300LowDiskSpaceEvent=tn9300LowDiskSpaceEvent, tn9300DipLineAParty=tn9300DipLineAParty, tn9300SipLineAisMultipartContents=tn9300SipLineAisMultipartContents, tn9300DipLineRtpTxPackets=tn9300DipLineRtpTxPackets, tn9300SiteCallsQueued10To20=tn9300SiteCallsQueued10To20, tn9300SipLineProxyAddress=tn9300SipLineProxyAddress, tn9300CallsSwitching=tn9300CallsSwitching, tn9300ChannelJammedStateEvent=tn9300ChannelJammedStateEvent, tn9300EventGroup=tn9300EventGroup, tn9300AdjacentSiteTable=tn9300AdjacentSiteTable, tn9300SipLineConnects=tn9300SipLineConnects, tn9300SiteNQueuedCalls=tn9300SiteNQueuedCalls, tn9300NetworkUpEvent=tn9300NetworkUpEvent, tn9300RemoteNodeIpAddrType=tn9300RemoteNodeIpAddrType, tn9300MipIcmpRxPackets=tn9300MipIcmpRxPackets, tn9300ChannelState=tn9300ChannelState, tn9300DipLnClientIpAddr=tn9300DipLnClientIpAddr, tn9300DipLineNgpLostPackets=tn9300DipLineNgpLostPackets, tn9300NetCheckStateA=tn9300NetCheckStateA, tn9300SiteNControlChannels=tn9300SiteNControlChannels, tn9300ChannelTimeIdle=tn9300ChannelTimeIdle, tn9300SipLineTable=tn9300SipLineTable, tn9300Mpt1327LinkErrors=tn9300Mpt1327LinkErrors, tn9300SipLineRegistrationType=tn9300SipLineRegistrationType, tn9300SiteMinFramelength=tn9300SiteMinFramelength, tn9300AdjSiteRF2=tn9300AdjSiteRF2, tn9300NodeIpNetworkStateEvent=tn9300NodeIpNetworkStateEvent, tn9300ChannelPort=tn9300ChannelPort, tn9300UnitDeregisteredBySystemEvent=tn9300UnitDeregisteredBySystemEvent, tn9300NetCheckAddressA=tn9300NetCheckAddressA, tn9300ChannelIpAddress=tn9300ChannelIpAddress, tn9300SiteControlChCountOk=tn9300SiteControlChCountOk, tn9300RemoteNodeName=tn9300RemoteNodeName, tn9300MipRxBytes=tn9300MipRxBytes, tn9300DipLinkUpEvent=tn9300DipLinkUpEvent, tn9300SipLineGroup=tn9300SipLineGroup, tn9300SiteQueueDepth=tn9300SiteQueueDepth, tn9300SipLineObjs=tn9300SipLineObjs, tn9300SiteManAdjSiteRF=tn9300SiteManAdjSiteRF, tn9300SiteObjs=tn9300SiteObjs, tn9300NetworkGwId=tn9300NetworkGwId, tn9300MipUdpRxPackets=tn9300MipUdpRxPackets, tn9300ChannelRtpRttJitter=tn9300ChannelRtpRttJitter, tn9300DipLineNgpRxPackets=tn9300DipLineNgpRxPackets, tn9300ChannelIpAddressType=tn9300ChannelIpAddressType, tn9300SiteDualCC=tn9300SiteDualCC, tn9300MipIcmpTxPackets=tn9300MipIcmpTxPackets, tn9300SipLinkUpEvent=tn9300SipLinkUpEvent, tn9300SiteRxActivityTimeout=tn9300SiteRxActivityTimeout, tn9300Mpt1327ChNumber=tn9300Mpt1327ChNumber, tn9300RemoteNodeSyncEvent=tn9300RemoteNodeSyncEvent, tn9300UnitStatusMessageId=tn9300UnitStatusMessageId, tn9300DipLineGroup=tn9300DipLineGroup, tn9300NetCheckAddressBType=tn9300NetCheckAddressBType, tn9300EventsV2=tn9300EventsV2, tn9300RemoteNodeStateEvent=tn9300RemoteNodeStateEvent, tn9300ChannelTimeControl=tn9300ChannelTimeControl, tn9300Mpt1327ChPort=tn9300Mpt1327ChPort, tn9300Mpt1327ChNgpLostPackets=tn9300Mpt1327ChNgpLostPackets, tn9300RemoteNodeGroup=tn9300RemoteNodeGroup, tn9300SipLineIncomingType=tn9300SipLineIncomingType, tn9300SipLineCalls=tn9300SipLineCalls, tn9300RemoteNodeSyncOkEvent=tn9300RemoteNodeSyncOkEvent, tn9300NetworkGwGroup=tn9300NetworkGwGroup, tn9300SiteNChannels=tn9300SiteNChannels, tn9300SiteFramelength=tn9300SiteFramelength, tn9300UnitTable=tn9300UnitTable, tn9300Mpt1327Connections=tn9300Mpt1327Connections, tn9300UnitRegTimeoutEvent=tn9300UnitRegTimeoutEvent, tn9300MipTimeouts=tn9300MipTimeouts, tn9300RemoteNodeIpAddr=tn9300RemoteNodeIpAddr, tn9300RemoteNodeObjs=tn9300RemoteNodeObjs, tn9300UnitAddress=tn9300UnitAddress, tn9300Mpt1327Port=tn9300Mpt1327Port, tn9300SiteCallsQueuedUnder5=tn9300SiteCallsQueuedUnder5, tn9300NetworkGwIpAddrType=tn9300NetworkGwIpAddrType, tn9300DipLinkStateEvent=tn9300DipLinkStateEvent, tn9300ChannelEnabled=tn9300ChannelEnabled, tn9300ChannelControlAllowed=tn9300ChannelControlAllowed, tn9300NetworkGwEntry=tn9300NetworkGwEntry, tn9300SipLineUserName=tn9300SipLineUserName, tn9300ChannelMajorAlarm=tn9300ChannelMajorAlarm, tn9300ChannelRtpTxPackets=tn9300ChannelRtpTxPackets, tn9300MobileIpObjs=tn9300MobileIpObjs, tn9300SiteExtraWaitSlots=tn9300SiteExtraWaitSlots, tn9300ChannelBspTxPackets=tn9300ChannelBspTxPackets, tn9300SipLineState=tn9300SipLineState, tn9300ChannelTimeFailed=tn9300ChannelTimeFailed, tn9300SiteZone=tn9300SiteZone, tn9300Name=tn9300Name, tn9300SipLineAisMonitor=tn9300SipLineAisMonitor, tn9300MipTxBytes=tn9300MipTxBytes, tn9300ChannelBaseStationNumber=tn9300ChannelBaseStationNumber, tn9300ChannelOkEvent=tn9300ChannelOkEvent, tn9300ChannelUnjammedEvent=tn9300ChannelUnjammedEvent, tn9300DipLineRtpRxPackets=tn9300DipLineRtpRxPackets, tn9300SiteNOnAirCalls=tn9300SiteNOnAirCalls, tn9300ChannelNumber=tn9300ChannelNumber, tn9300SipLinkStateEvent=tn9300SipLinkStateEvent, tn9300DipLineClientUptime=tn9300DipLineClientUptime)
mibBuilder.exportSymbols("TAIT-TN9300-MIB", tn9300SiteGroup=tn9300SiteGroup, tn9300NodeActivationEvent=tn9300NodeActivationEvent, tn9300Mpt1327ChNgpRxPackets=tn9300Mpt1327ChNgpRxPackets, tn9300SiteAutoQueueDepth=tn9300SiteAutoQueueDepth, tn9300SiteTable=tn9300SiteTable, tn9300SiteCallsQueuedOver20=tn9300SiteCallsQueuedOver20, tn9300SiteNIdleChannels=tn9300SiteNIdleChannels, tn9300SiteChannelTimeTraffic=tn9300SiteChannelTimeTraffic, tn9300MipFailing=tn9300MipFailing, tn9300MemoryUsage=tn9300MemoryUsage, tn9300EventBaseStationNumber=tn9300EventBaseStationNumber, tn9300DiskSpaceOk=tn9300DiskSpaceOk, tn9300LicenseCheckFailedEvent=tn9300LicenseCheckFailedEvent, tn9300NetworkGatewayUpEvent=tn9300NetworkGatewayUpEvent, tn9300AdjSiteSyscode2=tn9300AdjSiteSyscode2, tn9300SiteChannelTimeIdle=tn9300SiteChannelTimeIdle, tn9300Mpt1327ChRtpRxPackets=tn9300Mpt1327ChRtpRxPackets, tn9300EventUnitAddress=tn9300EventUnitAddress, tn9300SiteCallsQueued5To10=tn9300SiteCallsQueued5To10, tn9300SipLinkDownEvent=tn9300SipLinkDownEvent, tn9300UnitAuthenticationEvent=tn9300UnitAuthenticationEvent, tn9300SiteNumber=tn9300SiteNumber, tn9300ChannelBspRxPackets=tn9300ChannelBspRxPackets, tn9300DipLnClientIpAddrType=tn9300DipLnClientIpAddrType, tn9300DipLineRtpLostPackets=tn9300DipLineRtpLostPackets, tn9300AuthenticationOkEvent=tn9300AuthenticationOkEvent, tn9300DipLineNgwIpAddr=tn9300DipLineNgwIpAddr, tn9300SiteNDisabledChannels=tn9300SiteNDisabledChannels, tn9300SipLineIpAddressType=tn9300SipLineIpAddressType, tn9300BSStateEvent=tn9300BSStateEvent, tn9300RemoteNodeConnectSw=tn9300RemoteNodeConnectSw, tn9300NetworkGwConnEvent=tn9300NetworkGwConnEvent, tn9300RemoteNodeEntry=tn9300RemoteNodeEntry, tn9300DipLineState=tn9300DipLineState, tn9300SiteControlChCountEvent=tn9300SiteControlChCountEvent, tn9300RemoteNodeNumber=tn9300RemoteNodeNumber, tn9300SiteNTrafficChannels=tn9300SiteNTrafficChannels, tn9300Mpt1327ChIpAddress=tn9300Mpt1327ChIpAddress, tn9300SiteFailureEvent=tn9300SiteFailureEvent, tn9300EventGroupV2=tn9300EventGroupV2, tn9300ChannelTimeAlternate=tn9300ChannelTimeAlternate, tn9300DipLineAddress=tn9300DipLineAddress, tn9300Mpt1327RxBytes=tn9300Mpt1327RxBytes, tn9300SipLineNumber=tn9300SipLineNumber)
