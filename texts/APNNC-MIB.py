#
# PySNMP MIB module APNNC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/oracle/APNNC-MIB
# Produced by pysmi-1.1.12 at Wed Dec  4 21:19:04 2024
# On host fv-az585-169 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
acmepacketMgmt, = mibBuilder.importSymbols("ACMEPACKET-SMI", "acmepacketMgmt")
apEMSModule, = mibBuilder.importSymbols("APEMS-MIB", "apEMSModule")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
MibIdentifier, ModuleIdentity, Unsigned32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, NotificationType, Integer32, ObjectIdentity, iso, TimeTicks, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ModuleIdentity", "Unsigned32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "NotificationType", "Integer32", "ObjectIdentity", "iso", "TimeTicks", "IpAddress")
TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention")
apNNCModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5))
apNNCModule.setRevisions(('2012-08-20 00:00', '2012-07-16 00:00', '2013-10-11 00:00', '2013-10-14 00:00', '2014-02-27 00:00', '2014-06-26 00:00', '2015-09-15 00:00', '2017-02-15 00:00', '2017-07-07 00:00', '2018-04-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: apNNCModule.setRevisionsDescriptions(('Added apNNCReportingHdrDetectionFailure trap', 'Updated contact info', 'Added apNNCReportingHdrAggregationFailure and apNNCReportingHdrAggregationFailureClear traps', 'ADJUSTED OBJECTS ADDED ON REVISION 201310110000Z', 'Added apNNCReportingHdrAggregationLagFailure and apNNCReportingHdrAggregationLagFailureClear traps', 'Add new traps: apOCSDMServerHeartbeatReachable', 'Updated Organization and Contact info.', 'Add traps:apEMPluginFailedInstall,apEMPluginFailedInstallClear,apEMPluginFailedUninstall,apEMPluginFailedUninstallClear and apEMPluginDuplicatedRestPrefixName', 'Added traps apNNCReportingPswdExpiration, apNNCReportingPswdExpirationClear and added objects apNNCReportingUser, apNNCReportingPswdExpiryDate', 'Added fraud detection trap apOCSDMFPLSizeExceedLimit',))
if mibBuilder.loadTexts: apNNCModule.setLastUpdated('201804250000Z')
if mibBuilder.loadTexts: apNNCModule.setOrganization('Oracle Communications')
if mibBuilder.loadTexts: apNNCModule.setContactInfo('           \tCustomer Service\n\t\t \tPostal:\t\tOracle Communications\n\t\t\t\t\t100 Crosby Drive \n\t\t\t\t\tBedford, MA 01730\n\t\t\t\t\tUS\n\t\t    \tTel:\t\t1-800-633-0738\n\t\t\tUrl:\t\twww.oracle.com\n\t\t \tE-mail:\t\tsupport@oracle.com')
if mibBuilder.loadTexts: apNNCModule.setDescription('The Net-Net NNC MIB for Oracle Communications Acme Packet SBCs')
apNNCMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 1))
apNNCNotificationObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2))
apNNCServerAddressRemote = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCServerAddressRemote.setStatus('current')
if mibBuilder.loadTexts: apNNCServerAddressRemote.setDescription('The address of a Net-Net Central server, whose reachability status has changed.')
apNNCServerNameRemote = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 2), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCServerNameRemote.setStatus('current')
if mibBuilder.loadTexts: apNNCServerNameRemote.setDescription('The name of a Net-Net Central server (if available), whose \n\treachability status has changed and detected by a peer local NNC server.')
apNNCServerAddressLocal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCServerAddressLocal.setStatus('current')
if mibBuilder.loadTexts: apNNCServerAddressLocal.setDescription('The address of the local Net-Net Central server in the cluster.')
apNNCServerNameLocal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCServerNameLocal.setStatus('current')
if mibBuilder.loadTexts: apNNCServerNameLocal.setDescription('The name (if available) of the local Net-Net Central server in the cluster.')
apNNCFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCFailureReason.setStatus('current')
if mibBuilder.loadTexts: apNNCFailureReason.setDescription('The reason for failure.')
apNNCAggregationTimePercent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 6), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCAggregationTimePercent.setStatus('deprecated')
if mibBuilder.loadTexts: apNNCAggregationTimePercent.setDescription('THIS OBJECT IS BEING DEPRECATED IN FAVOR OF MORE ACCURATE OBJECT apNNCAggregationLagPercent.\n\t     The percent of time lag of the local Net-Net Central server, which is lagging behing \n    \t     in the process of aggrgation of HDR data in the cluster.')
apNNCAggregationLagPercent = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 7), Integer32()).setUnits('%').setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCAggregationLagPercent.setStatus('current')
if mibBuilder.loadTexts: apNNCAggregationLagPercent.setDescription('The percent of time lag of the local Net-Net Central server, which is lagging behing \n    \t     in the process of aggrgation of HDR data in the cluster.')
apOCSDMServerMasterAddress = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 8), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apOCSDMServerMasterAddress.setStatus('current')
if mibBuilder.loadTexts: apOCSDMServerMasterAddress.setDescription('The address (if available) of the master Oracle Communication  Session Delivery Manager server in the cluster.')
apOCSDMServerMasterName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 9), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apOCSDMServerMasterName.setStatus('current')
if mibBuilder.loadTexts: apOCSDMServerMasterName.setDescription('The name (if available) of the master Oracle Communication  Session Delivery Manager server in the cluster.')
apOCSDMServerTrapInterval = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 10), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apOCSDMServerTrapInterval.setStatus('current')
if mibBuilder.loadTexts: apOCSDMServerTrapInterval.setDescription('The interval of generating the trap periodically by master Oracle Communication  Session Delivery Manager server')
apEMPluginNameLocal = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 11), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEMPluginNameLocal.setStatus('current')
if mibBuilder.loadTexts: apEMPluginNameLocal.setDescription('The plugin name')
apEMPluginRestPrefixName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 12), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apEMPluginRestPrefixName.setStatus('current')
if mibBuilder.loadTexts: apEMPluginRestPrefixName.setDescription('The plugin REST prefix name')
apNNCReportingUser = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 13), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCReportingUser.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingUser.setDescription('The name of the reporting user.')
apNNCReportingPswdExpiryDate = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 14), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCReportingPswdExpiryDate.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingPswdExpiryDate.setDescription('The password expiry date for the reporting user. The date format is dd-MMM-yy. For example, 14-JUL-17')
apNNCFraudProtectionListName = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 15), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCFraudProtectionListName.setStatus('current')
if mibBuilder.loadTexts: apNNCFraudProtectionListName.setDescription('The name of the fraud protection list managed by the OCSDM')
apNNCFraudProtectionListSizeLimit = MibScalar((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 2, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: apNNCFraudProtectionListSizeLimit.setStatus('current')
if mibBuilder.loadTexts: apNNCFraudProtectionListSizeLimit.setDescription('The maximum size of the fraud protection list for pushing to the device')
apNNCNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3))
apNNCServerHealthNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1))
apNNCServerHealthNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0))
apNNCServerUnreachable = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 1)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCServerAddressRemote"), ("APNNC-MIB", "apNNCServerNameRemote"))
if mibBuilder.loadTexts: apNNCServerUnreachable.setStatus('current')
if mibBuilder.loadTexts: apNNCServerUnreachable.setDescription('The notification will be generated whenever a Net-Net Central Server is\n            determined to be unreachable by another the Net-Net Central server configured in the same cluster. ')
apNNCServerUnreachableClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 2)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCServerAddressRemote"), ("APNNC-MIB", "apNNCServerNameRemote"))
if mibBuilder.loadTexts: apNNCServerUnreachableClear.setStatus('current')
if mibBuilder.loadTexts: apNNCServerUnreachableClear.setDescription('The notification will be generated whenever a previously\n            unreachable Net-Net Central Server is determined to be reachable\n            by another Net-Net Central server configured in the same cluster. ')
apNNCTrapRelayNotAliveNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 3)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"))
if mibBuilder.loadTexts: apNNCTrapRelayNotAliveNotification.setStatus('current')
if mibBuilder.loadTexts: apNNCTrapRelayNotAliveNotification.setDescription('The notification will be generated when the main Net-Net Central Server has determined that the trap relay process is not alive during the Server start up process')
apNNCTrapRelayAliveNotification = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 4)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"))
if mibBuilder.loadTexts: apNNCTrapRelayAliveNotification.setStatus('current')
if mibBuilder.loadTexts: apNNCTrapRelayAliveNotification.setDescription('The notification will be generated when the main Net-Net Central Server has determined that the trap relay process is alive during Server start up process')
apOCSDMSeverHeartbeatReachable = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 5)).setObjects(("APNNC-MIB", "apOCSDMServerMasterAddress"), ("APNNC-MIB", "apOCSDMServerMasterName"), ("APNNC-MIB", "apOCSDMServerTrapInterval"))
if mibBuilder.loadTexts: apOCSDMSeverHeartbeatReachable.setStatus('current')
if mibBuilder.loadTexts: apOCSDMSeverHeartbeatReachable.setDescription('The notification will be periodically generated by Oracle communication session delivery manager master server at configured interval ')
apEMPluginFailedInstall = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 6)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apEMPluginNameLocal"))
if mibBuilder.loadTexts: apEMPluginFailedInstall.setStatus('current')
if mibBuilder.loadTexts: apEMPluginFailedInstall.setDescription('The notification will be generated whenever an EMS-Plugin failed install.')
apEMPluginFailedInstallClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 7)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apEMPluginNameLocal"))
if mibBuilder.loadTexts: apEMPluginFailedInstallClear.setStatus('current')
if mibBuilder.loadTexts: apEMPluginFailedInstallClear.setDescription('The notification will be generated whenever an EMS-Plugin failed install status is recovered.')
apEMPluginFailedUninstall = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 8)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apEMPluginNameLocal"))
if mibBuilder.loadTexts: apEMPluginFailedUninstall.setStatus('current')
if mibBuilder.loadTexts: apEMPluginFailedUninstall.setDescription('The notification will be generated whenever an EMS-Plugin failed uninstall.')
apEMPluginFailedUninstallClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 9)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apEMPluginNameLocal"))
if mibBuilder.loadTexts: apEMPluginFailedUninstallClear.setStatus('current')
if mibBuilder.loadTexts: apEMPluginFailedUninstallClear.setDescription('The notification will be generated whenever an EMS-Plugin failed uninstall status is recovered.')
apEMPluginDuplicatedRestPrefixName = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 1, 0, 10)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apEMPluginNameLocal"), ("APNNC-MIB", "apEMPluginRestPrefixName"))
if mibBuilder.loadTexts: apEMPluginDuplicatedRestPrefixName.setStatus('current')
if mibBuilder.loadTexts: apEMPluginDuplicatedRestPrefixName.setDescription('The notification will be generated when attempting to install a plugin with exixting REST prefix name in the system.')
apNNCReportingNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2))
apNNCReportingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0))
apNNCReportingHdrDetectionFailure = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 1)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"))
if mibBuilder.loadTexts: apNNCReportingHdrDetectionFailure.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingHdrDetectionFailure.setDescription('The notification will be generated whenever a Net-Net Central Reporting HDR detection task failed. ')
apNNCReportingHdrAggregationFailure = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 2)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"), ("APNNC-MIB", "apNNCAggregationTimePercent"))
if mibBuilder.loadTexts: apNNCReportingHdrAggregationFailure.setStatus('deprecated')
if mibBuilder.loadTexts: apNNCReportingHdrAggregationFailure.setDescription('THIS TRAP IS BEING DEPRECATED IN FAVOR of A NEW TRAP apNNCReportingHdrAggregationLagFailure.\n\t\t    The notification will be generated when a \n                    Net-Net Central Reporting HDR aggregation task fails\n                    to keep up with incoming HDR data. ')
apNNCReportingHdrAggregationFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 3)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"), ("APNNC-MIB", "apNNCAggregationTimePercent"))
if mibBuilder.loadTexts: apNNCReportingHdrAggregationFailureClear.setStatus('deprecated')
if mibBuilder.loadTexts: apNNCReportingHdrAggregationFailureClear.setDescription('THIS TRAP IS BEING DEPRECATED IN FAVOR of A NEW TRAP apNNCReportingHdrAggregationLagFailureClear.\n\t\t\tThe notification will be generated when a \n                        previosly failed Net-Net Central Reporting HDR aggregation task \n                        is now able to keep up with incoming HDR data. ')
apNNCReportingHdrAggregationLagFailure = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 4)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"), ("APNNC-MIB", "apNNCAggregationLagPercent"))
if mibBuilder.loadTexts: apNNCReportingHdrAggregationLagFailure.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingHdrAggregationLagFailure.setDescription('The notification will be generated when a \n                    Net-Net Central Reporting HDR aggregation task fails\n                    to keep up with incoming HDR data. ')
apNNCReportingHdrAggregationLagFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 5)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"), ("APNNC-MIB", "apNNCAggregationLagPercent"))
if mibBuilder.loadTexts: apNNCReportingHdrAggregationLagFailureClear.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingHdrAggregationLagFailureClear.setDescription('The notification will be generated when a \n                        previosly failed Net-Net Central Reporting HDR aggregation task \n                        is now able to keep up with incoming HDR data. ')
apNNCReportingPswdExpiration = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 6)).setObjects(("APNNC-MIB", "apNNCReportingUser"), ("APNNC-MIB", "apNNCReportingPswdExpiryDate"), ("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"))
if mibBuilder.loadTexts: apNNCReportingPswdExpiration.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingPswdExpiration.setDescription("The notification will be generated when a \n                    Net-Net Central Reporting user's password is near\n                    to expiry date. ")
apNNCReportingPswdExpirationClear = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 2, 0, 7)).setObjects(("APNNC-MIB", "apNNCReportingUser"), ("APNNC-MIB", "apNNCReportingPswdExpiryDate"), ("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCFailureReason"))
if mibBuilder.loadTexts: apNNCReportingPswdExpirationClear.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingPswdExpirationClear.setDescription("The notification will be generated to clear \n                        previous Net-Net Central Reporting user's password \n                        expiration trap. ")
apOCSDMFraudProtectionNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 3))
apOCSDMFraudProtectionNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 3, 0))
apOCSDMFPLSizeExceedLimit = NotificationType((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 3, 3, 0, 1)).setObjects(("APNNC-MIB", "apNNCFraudProtectionListName"), ("APNNC-MIB", "apNNCFraudProtectionListSizeLimit"))
if mibBuilder.loadTexts: apOCSDMFPLSizeExceedLimit.setStatus('current')
if mibBuilder.loadTexts: apOCSDMFPLSizeExceedLimit.setDescription('The notification will be generated whenever a Fraud Protection List is scheduled to push to device(s), and the size of the list exceeds the device limit.')
apNNCModuleConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4))
apNNCGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 1))
apNNCNotificationsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2))
apNNCNotificationObjectsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 3))
apNNCServerHealthObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 3, 1)).setObjects(("APNNC-MIB", "apNNCServerAddressLocal"), ("APNNC-MIB", "apNNCServerNameLocal"), ("APNNC-MIB", "apNNCServerAddressRemote"), ("APNNC-MIB", "apNNCServerNameRemote"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCServerHealthObjectsGroup = apNNCServerHealthObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCServerHealthObjectsGroup.setDescription('Objects for NNC Server reachability notifications.')
apNNCFailureObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 3, 2)).setObjects(("APNNC-MIB", "apNNCFailureReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCFailureObjectsGroup = apNNCFailureObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCFailureObjectsGroup.setDescription('Objects for NNC Server failure notifications.')
apNNCTimePercentObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 3, 3)).setObjects(("APNNC-MIB", "apNNCAggregationTimePercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCTimePercentObjectsGroup = apNNCTimePercentObjectsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: apNNCTimePercentObjectsGroup.setDescription('THIS OBJECT IS BEING DEPRECATED IN FAVOR OF NEW OBJECT apNNCTimePercentObjGroup\n\t\tObjects for NNC Server failure notifications.')
apNNCTimePercentObjGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 3, 4)).setObjects(("APNNC-MIB", "apNNCAggregationLagPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCTimePercentObjGroup = apNNCTimePercentObjGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCTimePercentObjGroup.setDescription('Objects for NNC Server failure notifications.')
apNNCServerHealthNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 1)).setObjects(("APNNC-MIB", "apNNCServerUnreachable"), ("APNNC-MIB", "apNNCServerUnreachableClear"), ("APNNC-MIB", "apNNCTrapRelayNotAliveNotification"), ("APNNC-MIB", "apNNCTrapRelayAliveNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCServerHealthNotificationsGroup = apNNCServerHealthNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCServerHealthNotificationsGroup.setDescription('NNC Server reachability notifications generated by a peer NNC Server')
apNNCReportingNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 2)).setObjects(("APNNC-MIB", "apNNCReportingHdrDetectionFailure"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCReportingNotificationsGroup = apNNCReportingNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingNotificationsGroup.setDescription('NNC Reporting Server notifications')
apNNCReportingAggrNotifsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 3)).setObjects(("APNNC-MIB", "apNNCReportingHdrAggregationFailure"), ("APNNC-MIB", "apNNCReportingHdrAggregationFailureClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCReportingAggrNotifsGroup = apNNCReportingAggrNotifsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: apNNCReportingAggrNotifsGroup.setDescription('THIS GROUP IS BEING DEPRECATED IN FAVOR OF NEW GROUP apNNCReportingAggrNotificationGroup\n\t\tReporting Server notifications')
apNNCReportingAggregationNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 4)).setObjects(("APNNC-MIB", "apNNCReportingHdrAggregationLagFailure"), ("APNNC-MIB", "apNNCReportingHdrAggregationLagFailureClear"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCReportingAggregationNotificationGroup = apNNCReportingAggregationNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCReportingAggregationNotificationGroup.setDescription('Reporting Server notifications')
apNNCServerHealthbeatNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 5)).setObjects(("APNNC-MIB", "apOCSDMSeverHeartbeatReachable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCServerHealthbeatNotificationsGroup = apNNCServerHealthbeatNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCServerHealthbeatNotificationsGroup.setDescription('OCSDM Server heartbeat reachability notifications generated by a Master OCSDM Server')
apNNCPluginNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 6)).setObjects(("APNNC-MIB", "apEMPluginFailedInstall"), ("APNNC-MIB", "apEMPluginFailedInstallClear"), ("APNNC-MIB", "apEMPluginFailedUninstall"), ("APNNC-MIB", "apEMPluginFailedUninstallClear"), ("APNNC-MIB", "apEMPluginDuplicatedRestPrefixName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apNNCPluginNotificationsGroup = apNNCPluginNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apNNCPluginNotificationsGroup.setDescription('OCSDM Server Plugin notifications')
apOCSDMFraudProtectionNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9148, 3, 8, 5, 4, 2, 7)).setObjects(("APNNC-MIB", "apOCSDMFPLSizeExceedLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    apOCSDMFraudProtectionNotificationsGroup = apOCSDMFraudProtectionNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: apOCSDMFraudProtectionNotificationsGroup.setDescription('OCSDM fraud protection notifications')
mibBuilder.exportSymbols("APNNC-MIB", apOCSDMFraudProtectionNotificationsGroup=apOCSDMFraudProtectionNotificationsGroup, apNNCReportingPswdExpiration=apNNCReportingPswdExpiration, apNNCTimePercentObjectsGroup=apNNCTimePercentObjectsGroup, apNNCNotificationObjects=apNNCNotificationObjects, apNNCTrapRelayNotAliveNotification=apNNCTrapRelayNotAliveNotification, apNNCReportingHdrAggregationFailureClear=apNNCReportingHdrAggregationFailureClear, apNNCReportingPswdExpiryDate=apNNCReportingPswdExpiryDate, apNNCServerNameRemote=apNNCServerNameRemote, apOCSDMServerMasterName=apOCSDMServerMasterName, apNNCNotificationObjectsGroups=apNNCNotificationObjectsGroups, apEMPluginFailedUninstallClear=apEMPluginFailedUninstallClear, apNNCReportingHdrDetectionFailure=apNNCReportingHdrDetectionFailure, apEMPluginNameLocal=apEMPluginNameLocal, apNNCGroups=apNNCGroups, apNNCFraudProtectionListName=apNNCFraudProtectionListName, apNNCServerHealthbeatNotificationsGroup=apNNCServerHealthbeatNotificationsGroup, apOCSDMFraudProtectionNotificationsPrefix=apOCSDMFraudProtectionNotificationsPrefix, apNNCModule=apNNCModule, apNNCReportingHdrAggregationLagFailure=apNNCReportingHdrAggregationLagFailure, apNNCReportingUser=apNNCReportingUser, apNNCReportingHdrAggregationLagFailureClear=apNNCReportingHdrAggregationLagFailureClear, apEMPluginFailedUninstall=apEMPluginFailedUninstall, apNNCServerHealthNotifications=apNNCServerHealthNotifications, apEMPluginRestPrefixName=apEMPluginRestPrefixName, apEMPluginDuplicatedRestPrefixName=apEMPluginDuplicatedRestPrefixName, apNNCTimePercentObjGroup=apNNCTimePercentObjGroup, apNNCServerHealthNotificationsPrefix=apNNCServerHealthNotificationsPrefix, apEMPluginFailedInstallClear=apEMPluginFailedInstallClear, apNNCMIBObjects=apNNCMIBObjects, apOCSDMServerTrapInterval=apOCSDMServerTrapInterval, PYSNMP_MODULE_ID=apNNCModule, apNNCReportingHdrAggregationFailure=apNNCReportingHdrAggregationFailure, apNNCServerAddressLocal=apNNCServerAddressLocal, apNNCServerHealthObjectsGroup=apNNCServerHealthObjectsGroup, apNNCServerHealthNotificationsGroup=apNNCServerHealthNotificationsGroup, apNNCNotificationsGroups=apNNCNotificationsGroups, apOCSDMServerMasterAddress=apOCSDMServerMasterAddress, apNNCReportingNotifications=apNNCReportingNotifications, apNNCServerUnreachableClear=apNNCServerUnreachableClear, apNNCNotifications=apNNCNotifications, apNNCReportingNotificationsPrefix=apNNCReportingNotificationsPrefix, apNNCFailureReason=apNNCFailureReason, apNNCServerUnreachable=apNNCServerUnreachable, apOCSDMFPLSizeExceedLimit=apOCSDMFPLSizeExceedLimit, apNNCFailureObjectsGroup=apNNCFailureObjectsGroup, apNNCServerAddressRemote=apNNCServerAddressRemote, apNNCReportingNotificationsGroup=apNNCReportingNotificationsGroup, apNNCFraudProtectionListSizeLimit=apNNCFraudProtectionListSizeLimit, apNNCAggregationTimePercent=apNNCAggregationTimePercent, apOCSDMSeverHeartbeatReachable=apOCSDMSeverHeartbeatReachable, apEMPluginFailedInstall=apEMPluginFailedInstall, apNNCAggregationLagPercent=apNNCAggregationLagPercent, apNNCServerNameLocal=apNNCServerNameLocal, apNNCTrapRelayAliveNotification=apNNCTrapRelayAliveNotification, apNNCReportingAggregationNotificationGroup=apNNCReportingAggregationNotificationGroup, apNNCModuleConformance=apNNCModuleConformance, apNNCPluginNotificationsGroup=apNNCPluginNotificationsGroup, apNNCReportingAggrNotifsGroup=apNNCReportingAggrNotifsGroup, apOCSDMFraudProtectionNotifications=apOCSDMFraudProtectionNotifications, apNNCReportingPswdExpirationClear=apNNCReportingPswdExpirationClear)
