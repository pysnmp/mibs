#
# PySNMP MIB module F3-EOMPLS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/adva/F3-EOMPLS-MIB
# Produced by pysmi-1.1.12 at Wed May 29 06:42:30 2024
# On host fv-az1776-875 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
fsp150cm, = mibBuilder.importSymbols("ADVA-MIB", "fsp150cm")
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
SecondaryState, VlanPriority, PerfCounter64, AdminState, OperationalState, CmPmIntervalType, VlanId, CmPmBinAction = mibBuilder.importSymbols("CM-COMMON-MIB", "SecondaryState", "VlanPriority", "PerfCounter64", "AdminState", "OperationalState", "CmPmIntervalType", "VlanId", "CmPmBinAction")
neIndex, = mibBuilder.importSymbols("CM-ENTITY-MIB", "neIndex")
cmEthernetNetPortEntry, cmPrioMapV2PrioMappingCOSEntry, cmFlowEntry = mibBuilder.importSymbols("CM-FACILITY-MIB", "cmEthernetNetPortEntry", "cmPrioMapV2PrioMappingCOSEntry", "cmFlowEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Bits, Integer32, MibIdentifier, iso, Counter32, Gauge32, Counter64, IpAddress, NotificationType, ModuleIdentity, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Bits", "Integer32", "MibIdentifier", "iso", "Counter32", "Gauge32", "Counter64", "IpAddress", "NotificationType", "ModuleIdentity", "ObjectIdentity")
TextualConvention, VariablePointer, DateAndTime, RowStatus, TruthValue, DisplayString, MacAddress, StorageType = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "VariablePointer", "DateAndTime", "RowStatus", "TruthValue", "DisplayString", "MacAddress", "StorageType")
f3EoMplsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39))
f3EoMplsMIB.setRevisions(('2015-08-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f3EoMplsMIB.setRevisionsDescriptions(('\n         Notes from release 201508140000Z.',))
if mibBuilder.loadTexts: f3EoMplsMIB.setLastUpdated('201508140000Z')
if mibBuilder.loadTexts: f3EoMplsMIB.setOrganization('ADVA Optical Networking')
if mibBuilder.loadTexts: f3EoMplsMIB.setContactInfo('        Jack Chen\n                     ADVA Optical Networking, Inc.\n                Tel: +48 58 7716 411\n             E-mail: jchen@advaoptical.com\n             Postal: ul. Slaska 35/37\n                     81-310 Gdynia, Poland')
if mibBuilder.loadTexts: f3EoMplsMIB.setDescription('This module defines the Ethernet Service Manager MIB defitinions\n             used by the F3 (FSP150CM/CC) product lines.  \n             Copyright (C) ADVA Optical Networking.')
class EoMplsMode(TextualConvention, Integer32):
    description = 'EoMpls mode'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("raw", 1), ("tagged", 2))

class EoMplsDiscoveryType(TextualConvention, Integer32):
    description = 'EoMpls discovery type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("static", 1), ("dynamic", 2))

f3EoMplsConfigObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1))
f3EoMplsPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2))
f3EoMplsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 3))
f3EoMplsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 4))
f3EoMplsPwTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1), )
if mibBuilder.loadTexts: f3EoMplsPwTable.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTable.setDescription('This table has list of entries with which FSPNM can associate some\n         information in the form of name-value pairs.')
f3EoMplsPwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwIndex"))
if mibBuilder.loadTexts: f3EoMplsPwEntry.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwEntry.setDescription('The conceptual row in f3EoMplsPwTable.')
f3EoMplsPwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: f3EoMplsPwIndex.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwIndex.setDescription('An integer index value used to uniquely identify this EoMpls Pw.')
f3EoMplsPwMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 2), EoMplsMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwMode.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwMode.setDescription("This objects specify EoMpls Pw's mode, it could be raw or tagged.")
f3EoMplsPwTxTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelLabel.setDescription('This objects specify EoMpls tunnel label on transimitted direction.')
f3EoMplsPwTxTunnelExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelExp.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelExp.setDescription('This objects specify EoMpls tunnel EXP value on transimitted direction.')
f3EoMplsPwTxTunnelTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelTtl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxTunnelTtl.setDescription('This objects specify EoMpls tunnel Ttl on transimitted direction.')
f3EoMplsPwTxVcLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxVcLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxVcLabelControl.setDescription('This objects specify whether enabled VC label on transimitted direction.')
f3EoMplsPwTxVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxVcLabel.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxVcLabel.setDescription('This objects specify EoMpls VC label on transimitted direction.')
f3EoMplsPwTxVcExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxVcExp.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxVcExp.setDescription('This objects specify EoMpls VC EXP value on transimitted direction.')
f3EoMplsPwTxVcTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwTxVcTtl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwTxVcTtl.setDescription('This objects specify EoMpls VC Ttl value on transimitted direction.')
f3EoMplsPwRxTunnelLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelLabel.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelLabel.setDescription('This objects specify EoMpls tunnel label on recieve direction.')
f3EoMplsPwRxTunnelExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelExp.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelExp.setDescription('This objects specify EoMpls tunnel label Exp on recieve direction.')
f3EoMplsPwRxTunnelTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelTtl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxTunnelTtl.setDescription('This objects specify EoMpls tunnel label Ttl on recieve direction.')
f3EoMplsPwRxVcLabelControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwRxVcLabelControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxVcLabelControl.setDescription('This objects specify whether enabled VC label on recieve direction.')
f3EoMplsPwRxVcLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1048575))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwRxVcLabel.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxVcLabel.setDescription('This objects specify EoMpls VC label on recieve direction.')
f3EoMplsPwRxVcExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwRxVcExp.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxVcExp.setDescription('This objects specify EoMpls VC label Exp on recieve direction.')
f3EoMplsPwRxVcTtl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 16), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwRxVcTtl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRxVcTtl.setDescription('This objects specify EoMpls VC label Ttl on recieve direction.')
f3EoMplsPwOuterStagControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwOuterStagControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOuterStagControl.setDescription('This objects specify whether enabled outer stag.')
f3EoMplsPwOuterStagVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 18), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwOuterStagVlanId.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOuterStagVlanId.setDescription('This object allows to specify outer stag VlanId.')
f3EoMplsPwOuterStagVlanPri = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 19), VlanPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwOuterStagVlanPri.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOuterStagVlanPri.setDescription('This object allows to specify outer stag Vlan Priority.')
f3EoMplsPwDiscoverType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 20), EoMplsDiscoveryType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwDiscoverType.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwDiscoverType.setDescription('This object allows to specify EoMpls Pw discovery type.')
f3EoMplsPwDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 21), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwDestIp.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwDestIp.setDescription('This object allows to specify EoMpls Pw destination ip.')
f3EoMplsPwDestMac = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 22), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwDestMac.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwDestMac.setDescription('This object allows to specify EoMpls Pw destination MacAddress.')
f3EoMplsPwAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 23), AdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwAdminState.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwAdminState.setDescription('This object represents the Administrative State of the EoMpls Pw.')
f3EoMplsPwOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 24), OperationalState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwOperationalState.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOperationalState.setDescription('This object represents the Operational State of the EoMpls Pw.')
f3EoMplsPwSecondaryState = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 25), SecondaryState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwSecondaryState.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwSecondaryState.setDescription('This object represents the Secondary State of the EoMpls Pw.')
f3EoMplsPwStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 26), StorageType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3EoMplsPwStorageType.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStorageType.setDescription('The type of storage configured for this entry.')
f3EoMplsPwRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 27), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: f3EoMplsPwRowStatus.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwRowStatus.setDescription('The status of this row.\n          \tAn entry MUST NOT exist in the active state unless all\n          \tobjects in the entry have an appropriate value, as described\n          \tin the description clause for each writable object.\n \t\n          \tThe values of f3EoMplsPwRowStatus supported are\n          \tcreateAndGo(4) and destroy(6).  All mandatory attributes\n          \tmust be specified in a single SNMP SET request with\n          \tf3EoMplsPwRowStatus value as createAndGo(4).\n          \tUpon successful row creation, this object has a\n          \tvalue of active(1).\n \t\n          \tThe f3EoMplsPwRowStatus object may be modified if\n          \tthe associated instance of this object is equal to active(1).')
f3EoMplsPwInnerExpMappingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwInnerExpMappingControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwInnerExpMappingControl.setDescription("When its value is disabled, the priority mapping profile\n           won't take effect on inner EXP.")
f3EoMplsPwOuterExpMappingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwOuterExpMappingControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOuterExpMappingControl.setDescription("When its value is disabled, the priority mapping profile\n           won't take effect on outer EXP.")
f3EoMplsPwOuterTagPriMappingControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 30), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwOuterTagPriMappingControl.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwOuterTagPriMappingControl.setDescription("When its value is disabled, the priority mapping profile\n           won't take effect on outer stag.")
f3EoMplsPwEgressInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 1, 1, 31), VariablePointer()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwEgressInterface.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwEgressInterface.setDescription('This object specify the egress interface, it could be port, lag, ppg etc.')
f3NetPortExtEoMplsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 2), )
if mibBuilder.loadTexts: f3NetPortExtEoMplsTable.setStatus('current')
if mibBuilder.loadTexts: f3NetPortExtEoMplsTable.setDescription('This table extends cmEthernetNetPortTable by adding EoMpls related parameters.')
f3NetPortExtEoMplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 2, 1), )
cmEthernetNetPortEntry.registerAugmentions(("F3-EOMPLS-MIB", "f3NetPortExtEoMplsEntry"))
f3NetPortExtEoMplsEntry.setIndexNames(*cmEthernetNetPortEntry.getIndexNames())
if mibBuilder.loadTexts: f3NetPortExtEoMplsEntry.setStatus('current')
if mibBuilder.loadTexts: f3NetPortExtEoMplsEntry.setDescription('A conceptual row in the f3NetPortExtEoMplsTable.')
f3NetPortExtEoMplsSrcIp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3NetPortExtEoMplsSrcIp.setStatus('current')
if mibBuilder.loadTexts: f3NetPortExtEoMplsSrcIp.setDescription('This object allows configuring EoMpls Source Ip address.')
f3PrioMapV2PrioMappingCosExtEoMplsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 3), )
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosExtEoMplsTable.setStatus('current')
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosExtEoMplsTable.setDescription('This table extends cmPrioMapV2PrioMappingCOSTable by adding EoMpls related parameters.')
f3PrioMapV2PrioMappingCosExtEoMplsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 3, 1), )
cmPrioMapV2PrioMappingCOSEntry.registerAugmentions(("F3-EOMPLS-MIB", "f3PrioMapV2PrioMappingCosExtEoMplsEntry"))
f3PrioMapV2PrioMappingCosExtEoMplsEntry.setIndexNames(*cmPrioMapV2PrioMappingCOSEntry.getIndexNames())
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosExtEoMplsEntry.setStatus('current')
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosExtEoMplsEntry.setDescription('A conceptual row in the f3PrioMapV2PrioMappingCosExtEoMplsTable.')
f3PrioMapV2PrioMappingCosOuterMplsExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 3, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosOuterMplsExp.setStatus('current')
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosOuterMplsExp.setDescription('This object allows configuring EoMpls outer Mpls Exp.')
f3PrioMapV2PrioMappingCosInnerMplsExp = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 1, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosInnerMplsExp.setStatus('current')
if mibBuilder.loadTexts: f3PrioMapV2PrioMappingCosInnerMplsExp.setDescription('This object allows configuring EoMpls Inner Mpls Exp.')
f3EoMplsPwStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1), )
if mibBuilder.loadTexts: f3EoMplsPwStatsTable.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsTable.setDescription('A collection of EoMpls Pw related statistics.  \n             These reflect the current data.')
f3EoMplsPwStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwStatsIndex"))
if mibBuilder.loadTexts: f3EoMplsPwStatsEntry.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsEntry.setDescription('A conceptual row in the f3EoMplsPwStatsTable.\n             Entries exist in this table for each EoMpls Pw.')
f3EoMplsPwStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwStatsIndex.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3EoMplsPwStatsIntervalType = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwStatsIntervalType.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsIntervalType.setDescription('Interval over which Performance Monitoring data is collected.')
f3EoMplsPwStatsValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwStatsValid.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsValid.setDescription('Indicates the validity of the bin.')
f3EoMplsPwStatsAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwStatsAction.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsAction.setDescription('Allows the Manager to clear the bin.')
f3EoMplsPwStatsTtlEqual0Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 1, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwStatsTtlEqual0Drop.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwStatsTtlEqual0Drop.setDescription('The number of packets matching the ACL rule.')
f3EoMplsPwHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2), )
if mibBuilder.loadTexts: f3EoMplsPwHistoryTable.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryTable.setDescription('A collection of EoMpls related history statistics.  \n             These reflect the history data.')
f3EoMplsPwHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwStatsIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwHistoryIndex"))
if mibBuilder.loadTexts: f3EoMplsPwHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryEntry.setDescription('A conceptual row in the f3EoMplsPwHistoryTable.\n             Entries exist in this table for each L3 acl rule.')
f3EoMplsPwHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryIndex.setDescription('An arbitrary integer index value used to uniquely identify\n            this L3 flow point statistics entry. \n            1 - 15min\n            2 - 1day\n            3 - rollover\n            4 - 5min')
f3EoMplsPwHistoryTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwHistoryTime.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryTime.setDescription('Indicates the time of history bin creation.')
f3EoMplsPwHistoryValid = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwHistoryValid.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryValid.setDescription('Indicates the validity of the bin.')
f3EoMplsPwHistoryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1, 4), CmPmBinAction()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwHistoryAction.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryAction.setDescription('Allows the Manager to clear the bin.')
f3EoMplsPwHistoryTtlEqual0Drop = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 2, 1, 5), PerfCounter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwHistoryTtlEqual0Drop.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwHistoryTtlEqual0Drop.setDescription('The number of packets matching acl rule.')
f3EoMplsPwThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3), )
if mibBuilder.loadTexts: f3EoMplsPwThresholdTable.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdTable.setDescription('A table of entries that allow manageability of EoMpls Pw Thresholds.')
f3EoMplsPwThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1), ).setIndexNames((0, "CM-ENTITY-MIB", "neIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwStatsIndex"), (0, "F3-EOMPLS-MIB", "f3EoMplsPwThresholdIndex"))
if mibBuilder.loadTexts: f3EoMplsPwThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdEntry.setDescription('A conceptual row in the f3EoMplsPwThresholdTable.')
f3EoMplsPwThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwThresholdIndex.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdIndex.setDescription('An index that uniquely identifies an entry in the\n        f3EoMplsPwThresholdTable.')
f3EoMplsPwThresholdInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 2), CmPmIntervalType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwThresholdInterval.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdInterval.setDescription('The interval over which monitored value is\n        sampled and compared with the specified threshold.')
f3EoMplsPwThresholdVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 3), VariablePointer()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwThresholdVariable.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdVariable.setDescription('The object identifier of the particular variable to be\n        sampled.')
f3EoMplsPwThresholdValueLo = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwThresholdValueLo.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdValueLo.setDescription('Lower 32 bits of the threshold value.')
f3EoMplsPwThresholdValueHi = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: f3EoMplsPwThresholdValueHi.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdValueHi.setDescription('Higher 32 bits of the threshold value.')
f3EoMplsPwThresholdMonValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: f3EoMplsPwThresholdMonValue.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdMonValue.setDescription('Monitored value corresponding to f3EoMplsPwThresholdVariable.')
f3EoMplsPwThresholdCrossingAlert = NotificationType((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 3, 1)).setObjects(("F3-EOMPLS-MIB", "f3EoMplsPwThresholdIndex"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdInterval"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdVariable"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdValueLo"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdValueHi"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdMonValue"))
if mibBuilder.loadTexts: f3EoMplsPwThresholdCrossingAlert.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsPwThresholdCrossingAlert.setDescription('This trap is sent each time a threshold on a PM condition\n             on an EoMpls Pw is crossed.')
f3EoMplsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 4, 1))
f3EoMplsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 4, 2))
f3EoMplsCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 4, 1, 1)).setObjects(("F3-EOMPLS-MIB", "f3EoMplsConfigGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3EoMplsCompliance = f3EoMplsCompliance.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsCompliance.setDescription('Describes the requirements for conformance to the F3-EOMPLS-MIB compilance.')
f3EoMplsConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2544, 1, 12, 39, 4, 2, 1)).setObjects(("F3-EOMPLS-MIB", "f3EoMplsPwIndex"), ("F3-EOMPLS-MIB", "f3EoMplsPwMode"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxTunnelLabel"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxTunnelExp"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxTunnelTtl"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxVcLabelControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxVcLabel"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxVcExp"), ("F3-EOMPLS-MIB", "f3EoMplsPwTxVcTtl"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxTunnelLabel"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxTunnelExp"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxTunnelTtl"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxVcLabelControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxVcLabel"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxVcExp"), ("F3-EOMPLS-MIB", "f3EoMplsPwRxVcTtl"), ("F3-EOMPLS-MIB", "f3EoMplsPwOuterStagControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwOuterStagVlanId"), ("F3-EOMPLS-MIB", "f3EoMplsPwOuterStagVlanPri"), ("F3-EOMPLS-MIB", "f3EoMplsPwDiscoverType"), ("F3-EOMPLS-MIB", "f3EoMplsPwDestIp"), ("F3-EOMPLS-MIB", "f3EoMplsPwDestMac"), ("F3-EOMPLS-MIB", "f3EoMplsPwAdminState"), ("F3-EOMPLS-MIB", "f3EoMplsPwOperationalState"), ("F3-EOMPLS-MIB", "f3EoMplsPwSecondaryState"), ("F3-EOMPLS-MIB", "f3EoMplsPwStorageType"), ("F3-EOMPLS-MIB", "f3EoMplsPwRowStatus"), ("F3-EOMPLS-MIB", "f3EoMplsPwInnerExpMappingControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwOuterExpMappingControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwOuterTagPriMappingControl"), ("F3-EOMPLS-MIB", "f3EoMplsPwEgressInterface"), ("F3-EOMPLS-MIB", "f3NetPortExtEoMplsSrcIp"), ("F3-EOMPLS-MIB", "f3PrioMapV2PrioMappingCosOuterMplsExp"), ("F3-EOMPLS-MIB", "f3PrioMapV2PrioMappingCosInnerMplsExp"), ("F3-EOMPLS-MIB", "f3EoMplsPwStatsIndex"), ("F3-EOMPLS-MIB", "f3EoMplsPwStatsIntervalType"), ("F3-EOMPLS-MIB", "f3EoMplsPwStatsValid"), ("F3-EOMPLS-MIB", "f3EoMplsPwStatsAction"), ("F3-EOMPLS-MIB", "f3EoMplsPwStatsTtlEqual0Drop"), ("F3-EOMPLS-MIB", "f3EoMplsPwHistoryIndex"), ("F3-EOMPLS-MIB", "f3EoMplsPwHistoryTime"), ("F3-EOMPLS-MIB", "f3EoMplsPwHistoryValid"), ("F3-EOMPLS-MIB", "f3EoMplsPwHistoryAction"), ("F3-EOMPLS-MIB", "f3EoMplsPwHistoryTtlEqual0Drop"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdIndex"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdInterval"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdVariable"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdValueLo"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdValueHi"), ("F3-EOMPLS-MIB", "f3EoMplsPwThresholdMonValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f3EoMplsConfigGroup = f3EoMplsConfigGroup.setStatus('current')
if mibBuilder.loadTexts: f3EoMplsConfigGroup.setDescription('A collection of objects used to manage the EoMpls Configuration objects.')
mibBuilder.exportSymbols("F3-EOMPLS-MIB", f3EoMplsPwStatsTtlEqual0Drop=f3EoMplsPwStatsTtlEqual0Drop, f3EoMplsPwThresholdTable=f3EoMplsPwThresholdTable, EoMplsMode=EoMplsMode, f3EoMplsPwThresholdMonValue=f3EoMplsPwThresholdMonValue, f3EoMplsConfigObjects=f3EoMplsConfigObjects, f3EoMplsPwHistoryTable=f3EoMplsPwHistoryTable, f3EoMplsPwThresholdCrossingAlert=f3EoMplsPwThresholdCrossingAlert, f3EoMplsPwRxTunnelLabel=f3EoMplsPwRxTunnelLabel, f3EoMplsPwRxVcLabelControl=f3EoMplsPwRxVcLabelControl, f3EoMplsPwEntry=f3EoMplsPwEntry, f3EoMplsPwOuterStagVlanId=f3EoMplsPwOuterStagVlanId, f3EoMplsNotifications=f3EoMplsNotifications, f3EoMplsPwThresholdIndex=f3EoMplsPwThresholdIndex, f3EoMplsPwTxTunnelLabel=f3EoMplsPwTxTunnelLabel, f3EoMplsPwHistoryEntry=f3EoMplsPwHistoryEntry, f3EoMplsPwOuterStagVlanPri=f3EoMplsPwOuterStagVlanPri, f3EoMplsPwStatsAction=f3EoMplsPwStatsAction, f3EoMplsPwThresholdEntry=f3EoMplsPwThresholdEntry, f3EoMplsPwRowStatus=f3EoMplsPwRowStatus, f3EoMplsPwTable=f3EoMplsPwTable, f3EoMplsGroups=f3EoMplsGroups, f3EoMplsCompliance=f3EoMplsCompliance, f3EoMplsPwMode=f3EoMplsPwMode, f3EoMplsPerformance=f3EoMplsPerformance, f3EoMplsPwTxTunnelExp=f3EoMplsPwTxTunnelExp, f3EoMplsPwHistoryAction=f3EoMplsPwHistoryAction, f3EoMplsPwRxVcTtl=f3EoMplsPwRxVcTtl, EoMplsDiscoveryType=EoMplsDiscoveryType, f3EoMplsPwOuterTagPriMappingControl=f3EoMplsPwOuterTagPriMappingControl, f3EoMplsPwEgressInterface=f3EoMplsPwEgressInterface, f3PrioMapV2PrioMappingCosExtEoMplsTable=f3PrioMapV2PrioMappingCosExtEoMplsTable, f3EoMplsPwHistoryIndex=f3EoMplsPwHistoryIndex, f3PrioMapV2PrioMappingCosInnerMplsExp=f3PrioMapV2PrioMappingCosInnerMplsExp, f3EoMplsPwThresholdInterval=f3EoMplsPwThresholdInterval, f3EoMplsCompliances=f3EoMplsCompliances, f3EoMplsPwOuterStagControl=f3EoMplsPwOuterStagControl, f3EoMplsPwStatsValid=f3EoMplsPwStatsValid, f3EoMplsMIB=f3EoMplsMIB, f3EoMplsConformance=f3EoMplsConformance, f3EoMplsPwDestIp=f3EoMplsPwDestIp, f3EoMplsPwHistoryValid=f3EoMplsPwHistoryValid, f3EoMplsPwTxTunnelTtl=f3EoMplsPwTxTunnelTtl, f3EoMplsPwHistoryTtlEqual0Drop=f3EoMplsPwHistoryTtlEqual0Drop, f3EoMplsPwThresholdValueLo=f3EoMplsPwThresholdValueLo, f3EoMplsPwTxVcLabel=f3EoMplsPwTxVcLabel, f3EoMplsPwInnerExpMappingControl=f3EoMplsPwInnerExpMappingControl, f3EoMplsPwDiscoverType=f3EoMplsPwDiscoverType, f3EoMplsPwTxVcLabelControl=f3EoMplsPwTxVcLabelControl, f3EoMplsPwRxVcLabel=f3EoMplsPwRxVcLabel, f3EoMplsConfigGroup=f3EoMplsConfigGroup, f3EoMplsPwStatsEntry=f3EoMplsPwStatsEntry, f3EoMplsPwTxVcTtl=f3EoMplsPwTxVcTtl, f3EoMplsPwAdminState=f3EoMplsPwAdminState, f3EoMplsPwStatsTable=f3EoMplsPwStatsTable, f3EoMplsPwThresholdVariable=f3EoMplsPwThresholdVariable, f3EoMplsPwDestMac=f3EoMplsPwDestMac, f3EoMplsPwTxVcExp=f3EoMplsPwTxVcExp, f3EoMplsPwStatsIntervalType=f3EoMplsPwStatsIntervalType, f3EoMplsPwOperationalState=f3EoMplsPwOperationalState, f3EoMplsPwStorageType=f3EoMplsPwStorageType, f3NetPortExtEoMplsEntry=f3NetPortExtEoMplsEntry, f3EoMplsPwIndex=f3EoMplsPwIndex, f3NetPortExtEoMplsSrcIp=f3NetPortExtEoMplsSrcIp, f3PrioMapV2PrioMappingCosExtEoMplsEntry=f3PrioMapV2PrioMappingCosExtEoMplsEntry, f3EoMplsPwStatsIndex=f3EoMplsPwStatsIndex, f3EoMplsPwHistoryTime=f3EoMplsPwHistoryTime, f3EoMplsPwRxVcExp=f3EoMplsPwRxVcExp, f3EoMplsPwOuterExpMappingControl=f3EoMplsPwOuterExpMappingControl, f3PrioMapV2PrioMappingCosOuterMplsExp=f3PrioMapV2PrioMappingCosOuterMplsExp, f3EoMplsPwThresholdValueHi=f3EoMplsPwThresholdValueHi, f3NetPortExtEoMplsTable=f3NetPortExtEoMplsTable, f3EoMplsPwRxTunnelTtl=f3EoMplsPwRxTunnelTtl, f3EoMplsPwRxTunnelExp=f3EoMplsPwRxTunnelExp, PYSNMP_MODULE_ID=f3EoMplsMIB, f3EoMplsPwSecondaryState=f3EoMplsPwSecondaryState)
