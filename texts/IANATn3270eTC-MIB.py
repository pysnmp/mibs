#
# PySNMP MIB module IANATn3270eTC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/standard/iana/IANATn3270eTC-MIB
# Produced by pysmi-1.1.12 at Tue Jun  4 12:16:57 2024
# On host fv-az1789-327 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter32, mib_2, Integer32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Bits, ObjectIdentity, ModuleIdentity, MibIdentifier, TimeTicks, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "mib-2", "Integer32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Bits", "ObjectIdentity", "ModuleIdentity", "MibIdentifier", "TimeTicks", "IpAddress", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ianaTn3270eTcMib = ModuleIdentity((1, 3, 6, 1, 2, 1, 61))
ianaTn3270eTcMib.setRevisions(('2000-05-10 00:00', '1999-09-01 10:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ianaTn3270eTcMib.setRevisionsDescriptions(('Fix to import mib-2 instead of experimental.', 'Initial version transferred from the TN3270E\n            working group to IANA.',))
if mibBuilder.loadTexts: ianaTn3270eTcMib.setLastUpdated('200005100000Z')
if mibBuilder.loadTexts: ianaTn3270eTcMib.setOrganization('IANA')
if mibBuilder.loadTexts: ianaTn3270eTcMib.setContactInfo('Internet Assigned Numbers Authority\n\n             Postal: ICANN\n                     4676 Admiralty Way, Suite 330\n                     Marina del Rey, CA 90292\n\n             Tel:    +1  310 823 9358 x20\n             E-Mail: iana@iana.org')
if mibBuilder.loadTexts: ianaTn3270eTcMib.setDescription('This module defines a set of textual conventions\n            for use by the TN3270E-MIB and the TN3270E-RT-MIB.\n\n            Any additions or changes to the contents of this\n            MIB module must first be discussed on the tn3270e\n            working group list at: tn3270e@list.nih.gov\n            and approved by one of the following TN3270E\n            working group contacts:\n\n                Ed Bailey (co-chair) - elbailey@us.ibm.com\n                Michael Boe (co-chair) - mboe@cisco.com\n                Ken White - kennethw@vnet.ibm.com\n                Robert Moore - remoore@us.ibm.com\n\n            The above list of contacts can be altered with\n            the approval of the two co-chairs.\n\n            The Textual Conventions defined within this MIB have\n            no security issues associated with them unless\n            explicitly stated in their corresponding\n            DESCRIPTION clause.')
class IANATn3270eAddrType(TextualConvention, Integer32):
    description = 'The textual convention for defining the type of a\n          client address.  The enumeration value unknown(0) is\n          also used to indicate that no actual address is present.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("ipv4", 1), ("ipv6", 2))

class IANATn3270eAddress(TextualConvention, OctetString):
    description = 'Denotes a client address.  The type of client address is\n          determined by use of the IANATn3270eAddrType textual\nconvention.\n          The length in octets of a IANATn3270eAddress object is:\n\n            IANATn3270eAddrType   Address Length\n            +++++++++++++++++++   ++++++++++++++\n                     unknown(0)   not specified or unknown; the\n                                  actual length of the\n                                  IANATn3270eAddress octet string\n                                  indicates if an address\n                                  is present\n                        ipv4(1)   4 OCTETS\n                        ipv6(2)   16 OCTETS\n\n          This textual convention is similar to the TAddress\n          TC defined by RFC1903 except that it allows a\n          zero-length octet string and is not a full transport\n          layer address.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class IANATn3270eClientType(TextualConvention, Integer32):
    description = "The textual convention for defining the set of\n           enumerations used by tn3270eTcpConnClientIdFormat\n           in the TN3270E-MIB:\n\n           ENUMERATION        OCTETs  DESCRIPTION\n\n           none(1)              0     Not specified\n           other(2)           1..512  Implementation specific\n           ipv4(3)              6     4-octet IP Address plus\n                                      2-octet TCP Port\n           ipv6(4)              18    16-octet IPv6 Address\n                                      plus 2-octet TCP Port\n           domainName(5)      1..512  The DNS name of a\n                                      client.\n           truncDomainName(6) 1..512  The (truncated) DNS name\n                                      of a client.\n           string(7)          1..512  Unknown Utf8String\n           certificate(8)     1..512  certificate\n           userId(9)          1..8    Client's userid\n           x509dn(10)         1..512  X.509 Distinguished Name\n\n           Representation of a certificate(8) may be lead to\n           a security exposure and is NOT RECOMMENDED without\n           adequate security."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
    namedValues = NamedValues(("none", 1), ("other", 2), ("ipv4", 3), ("ipv6", 4), ("domainName", 5), ("truncDomainName", 6), ("string", 7), ("certificate", 8), ("userId", 9), ("x509dn", 10))

class IANATn3270Functions(TextualConvention, Bits):
    description = "This textual convention reflects the current set of\n          TN3270 and TN3270E functions that can be negotiated\n          between a server and its client:\n\n          RFC856\n          transmitBinary  The sender of this command REQUESTS\n                          permission to begin transmitting, or\n                          confirms that it will now begin\n                          transmitting characters which are to\n                          be interpreted as 8 bits of binary\n                          data by the receiver of the data.\n          RFC860\n          timingMark      The sender of this command REQUESTS\n                          that the receiver of this command\n                          return a WILL TIMING-MARK in the data\n                          stream at the 'appropriate place'.\n          RFC885\n          endOfRecord     The sender of this command requests\n                          permission to begin transmission of\n                          the Telnet END-OF-RECORD (EOR) code\n                          when transmitting data characters, or\n                          the sender of this command confirms it\n                          will now begin transmission of EORs\n                          with transmitted data characters.\n          RFC1091\n          terminalType    Sender is willing to send terminal\n                          type information in a subsequent\n                          sub-negotiation.\n\n          RFC1041\n          tn3270Regime    Sender is willing to send list of\n                          supported 3270 Regimes in a\n                          subsequent sub-negotiation.\n          RFC2355\n          scsCtlCodes     (Printer sessions only).  Allows the\n                          use of the SNA Character Stream (SCS)\n                          and SCS control codes on the session.\n                          SCS is used with LU type 1 SNA sessions.\n          dataStreamCtl   (Printer sessions only).  Allows the use\n                          of the standard 3270 data stream.  This\n                          corresponds to LU type 3 SNA sessions.\n          responses       Provides support for positive and\n                          negative response handling.  Allows the\n                          server to reflect to the client any and\n                          all definite, exception, and no response\n                          requests sent by the host application.\n          bindImage       Allows the server to send the SNA Bind\n                          image and Unbind notification to the\n                          client.\n          sysreq          Allows the client and server to emulate\n                          some (or all, depending on the server) of\n                          the functions of the SYSREQ key in an SNA\n                          environment."
    status = 'current'
    namedValues = NamedValues(("transmitBinary", 0), ("timemark", 1), ("endOfRecord", 2), ("terminalType", 3), ("tn3270Regime", 4), ("scsCtlCodes", 5), ("dataStreamCtl", 6), ("responses", 7), ("bindImage", 8), ("sysreq", 9))

class IANATn3270ResourceType(TextualConvention, Integer32):
    description = 'The type of resource defined by a resource pool.  Refer\n          to tn3270eResPoolTable.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("terminal", 2), ("printer", 3), ("terminalOrPrinter", 4))

class IANATn3270DeviceType(TextualConvention, Integer32):
    description = 'This textual convention defines the list of device\n          types that can be set, as defined by RFC 2355.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 100))
    namedValues = NamedValues(("ibm3278d2", 1), ("ibm3278d2E", 2), ("ibm3278d3", 3), ("ibm3278d3E", 4), ("ibm3278d4", 5), ("ibm3278d4E", 6), ("ibm3278d5", 7), ("ibm3278d5E", 8), ("ibmDynamic", 9), ("ibm3287d1", 10), ("unknown", 100))

class IANATn3270eLogData(TextualConvention, OctetString):
    description = "An octet string representing log data as pertaining to\n        either a TN3270 or TN3270E Session as reported from a\n        TN3270E Server. Log data is stored in an octet string\n        in time order (from earliest to latest).\n\n        Each log element has the following form:\n\n        +------+----+---------+------------+\n        !length!type!TimeStamp! data       !\n        +------+----+---------+------------+\n\n        where\n\n        length    = one-octet length of the data portion of the\n                    trace element, not including the length,\n                    type, and TimeStamp fields\n        type      = one-octet code point characterizing the data.\n        TimeStamp = A 4-octet field representing the number of\n                    TimeTicks since the TN3270E server was last\n                    activated.  The server's last activation time\n                    is available in the tn3270eSrvrConfLastActTime\n                    object in the TN3270E MIB, which has the\n                    syntax DateAndTime.\n        data      = initial part of a PDU.\n\n        length   type\n\n          0-255  x'00' - unknown\n          0      x'01' - inactivity timer expired\n          0      x'02' - dynamic timer expired\n          0      x'03' - actlu req\n          0      x'04' - bind req\n          0      x'05' - clear req\n          0      x'06' - dactlu req\n          0      x'07' - warm actpu req\n          0      x'08' - sdt req\n          0      x'09' - unbind req\n          0      x'0A' - notify resp\n          0      x'0B' - reply PSID neg rsp\n          0      x'0C' - reply PSID pos rsp\n          0      x'0D' - unbind rsp\n          0      x'0E' - hierarchical reset\n          0      x'0F' - client connect req\n          0      x'10' - client disconnect req\n          0      x'11' - timingmark received\n          0      x'12' - flowControl timer expired\n          0      x'13' - neg rsp to host\n          0      x'14' - neg rsp from host\n          0      x'15' - data contention\n          0      x'16' - no buffer to send SNA data\n          0      x'17' - receive response while inbound\n          0      x'18' - client protocol error\n          0      x'19' - badClientSequenceReceived\n          1-255  x'1A' - utf8String\n          2      x'1B' - hexCode, implementation dependent\n\n          Log element entries have a minimum length of 6 octets.\n          The zero-length string indicates that no log data is\n          available."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 2048), )
mibBuilder.exportSymbols("IANATn3270eTC-MIB", IANATn3270eClientType=IANATn3270eClientType, IANATn3270eLogData=IANATn3270eLogData, IANATn3270Functions=IANATn3270Functions, IANATn3270eAddrType=IANATn3270eAddrType, IANATn3270ResourceType=IANATn3270ResourceType, ianaTn3270eTcMib=ianaTn3270eTcMib, PYSNMP_MODULE_ID=ianaTn3270eTcMib, IANATn3270DeviceType=IANATn3270DeviceType, IANATn3270eAddress=IANATn3270eAddress)
