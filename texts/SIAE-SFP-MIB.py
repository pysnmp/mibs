#
# PySNMP MIB module SIAE-SFP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/siae/SIAE-SFP-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:07:15 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
AlarmStatus, AlarmSeverityCode = mibBuilder.importSymbols("SIAE-ALARM-MIB", "AlarmStatus", "AlarmSeverityCode")
siaeMib, = mibBuilder.importSymbols("SIAE-TREE-MIB", "siaeMib")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, ModuleIdentity, IpAddress, MibIdentifier, TimeTicks, Counter32, Integer32, Bits, ObjectIdentity, Gauge32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "ModuleIdentity", "IpAddress", "MibIdentifier", "TimeTicks", "Counter32", "Integer32", "Bits", "ObjectIdentity", "Gauge32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
sfp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3373, 1103, 74))
sfp.setRevisions(('2016-12-15 00:00', '2016-09-29 00:00', '2014-02-03 00:00', '2013-12-05 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: sfp.setRevisionsDescriptions(('MIB version 01.00.02\n             - Added TEXTUAL-CONVENTION Temperature and PhysicalQuantity\n             - Added sfpAlarmTable, sfpDiagnosticTable, sfpHighAlarmSeverityCode,\n               sfpHighWarningAlarmSeverityCode, sfpLowWarningAlarmSeverityCode\n               and sfpLowWarningAlarmSeverityCode\n            ', 'MIB version 01.00.01\n             - Added sfpBasePX, sfpBaseBX10, sfp100BaseFX, sfp100BaseLX to\n               sfpCompliance\n            ', 'Improved description of sfpMibVersion\n            ', 'Initial version 01.00.00\n            ',))
if mibBuilder.loadTexts: sfp.setLastUpdated('201612150000Z')
if mibBuilder.loadTexts: sfp.setOrganization('SIAE MICROELETTRONICA spa')
if mibBuilder.loadTexts: sfp.setContactInfo('SIAE MICROELETTONICA s.p.a.\n             Via Michelangelo Buonarroti, 21\n             20093 - Cologno Monzese\n             Milano - ITALY\n             Phone :  +39-02-27325-1\n             E-mail: info@siaemic.com\n            ')
if mibBuilder.loadTexts: sfp.setDescription(" This MIB contains objects & alarms for a SFP\n              (Small Form-Factor Pluggable) module.\n              Reference documentation:\n               1) Small Form-factor Pluggable (SFP) Transceiver MultiSource\n                  Agreement (MSA)\n               2) Finisar's Application Note AN-2030, Rev. D.\n               3) SFF 8472 - Diagnostic Monitoring Interface for Optical \n                             Transceivers\n                             Rev 12.2 November 21, 2014\n               4) SFF 8024 - SFF Cross Reference to Industry Products\n                             Rev 4.0 June 27, 2016\n            ")
class Temperature(TextualConvention, Integer32):
    description = 'Temperature in tenth of degrees C'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(-2000, 2000)

class PhysicalQuantity(TextualConvention, Integer32):
    description = 'Measured physical quantity'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("phyQtTemperature", 1), ("phyQtVoltage", 2), ("phyQtTxBias", 3), ("phyQtTxPower", 4), ("phyQtRxPower", 5))

sfpMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 1), Integer32().clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpMibVersion.setStatus('current')
if mibBuilder.loadTexts: sfpMibVersion.setDescription('Numerical version of this module.\n             The string version of this MIB have the following format:\n                XX.YY.ZZ\n             so, for example, the value 1 should be interpreted as 00.00.01\n             and the value 10001 should be interpreted as 01.00.01.')
sfpSerialIdTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2), )
if mibBuilder.loadTexts: sfpSerialIdTable.setStatus('current')
if mibBuilder.loadTexts: sfpSerialIdTable.setDescription('Each SFP contains a 95+32 byte block of ID data fields.\n              This table contains the items found in this data block.\n              Fields in this data block is filled in by the SFP manufactor.\n              The table shows the contents of this data block without further\n              processing.')
sfpSerialIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1), ).setIndexNames((0, "SIAE-SFP-MIB", "sfpModuleId"))
if mibBuilder.loadTexts: sfpSerialIdEntry.setStatus('current')
if mibBuilder.loadTexts: sfpSerialIdEntry.setDescription('SFP module record.')
sfpModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpModuleId.setStatus('current')
if mibBuilder.loadTexts: sfpModuleId.setDescription('This index identifies a unique SFP module in the system')
sfpSerialIdValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpSerialIdValid.setStatus('current')
if mibBuilder.loadTexts: sfpSerialIdValid.setDescription('When false the SFP data in this table is not valid. This\n             will be set to False if the SFP module is not installed or if\n             the EEPROM check code is wrong. The data in this table should\n             not be used unless this element is True.')
sfpVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorName.setStatus('current')
if mibBuilder.loadTexts: sfpVendorName.setDescription('The SFP vendor name.\n             Located at I2C address 0xa0, bytes: 20 - 35')
sfpVendorPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorPartNumber.setStatus('current')
if mibBuilder.loadTexts: sfpVendorPartNumber.setDescription('The SFP vendor part number.\n             Located at I2C address 0xa0, bytes: 40 - 55')
sfpVendorRev = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorRev.setStatus('current')
if mibBuilder.loadTexts: sfpVendorRev.setDescription("The SFP vendor's product revision number.\n             Located at I2C address 0xa0, bytes: 56 - 59")
sfpVendorSN = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorSN.setStatus('current')
if mibBuilder.loadTexts: sfpVendorSN.setDescription('The SFP vendor serial number.\n             Located at I2C address 0xa0, bytes: 68 - 83')
sfpVendorDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVendorDateCode.setStatus('current')
if mibBuilder.loadTexts: sfpVendorDateCode.setDescription('The SFP vendor date code.\n             Format: YYMMDDLL\n                     - YY: year,  00 = 2000\n                     - MM: month, 01 = January\n                     - DD_ day,   01 to 31\n                     - LL: vendor lot code, or blank.\n             Located at I2C address 0xa0, bytes: 84 - 91')
sfpDiagMonitorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 8), Bits().clone(namedValues=NamedValues(("sfpDMCtypeLegacy", 0), ("sfpDMCtypeImplemented", 1), ("sfpDMCtypeInternalCal", 2), ("sfpDMCtypeExternalCal", 3), ("sfpDMCtypeRxAvgPwr", 4), ("sfpDMCtypeAddrChngReqrd", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagMonitorCode.setStatus('current')
if mibBuilder.loadTexts: sfpDiagMonitorCode.setDescription('This indicates which type of diagnostic monitoring is\n             implemented (if any) in the SFP.\n             -bit 7: = 0 legacy diagnostic implementations (should be 0)\n             -bit 6: = 1 digital diagnostic monitoring implemented (should be 1)\n             -bit 5: = 1 internal calibration\n             -bit 4: = 1 external calibration mask\n             -bit 3: = 0 OMA received power measurment,\n                     = 1 average received power\n             -bit 2: = 1 I2C addressing option.\n             Located at I2C address 0xa0, byte: 92')
sfpEnhancedOptionsCode = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 9), Bits().clone(namedValues=NamedValues(("sfpEOCalarmsImplemented", 0), ("sfpEOCSoftTxDisable", 1), ("sfpEOCSoftTxFault", 2), ("sfpEOCSoftRxLOS", 3), ("sfpEOCSoftRateSelect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpEnhancedOptionsCode.setStatus('current')
if mibBuilder.loadTexts: sfpEnhancedOptionsCode.setDescription('This indicates which optional enhanced features are\n             implemented (if any) in the SFP.\n             Located at I2C address 0xa0, byte: 93')
sfpOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 10), Bits().clone(namedValues=NamedValues(("sfpOPTRateSelect", 0), ("sfpOPTTxDisable", 1), ("sfpOPTTxFault", 2), ("sfpOPTInvertedLOS", 3), ("sfpOPTlos", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpOptions.setStatus('current')
if mibBuilder.loadTexts: sfpOptions.setDescription('Implemented transceiver options:\n             -bit 5: = 1 RATE_SELECT implemented.\n             -bit 4: = 1 TX_DISABLE implemented\n             -bit 3: = 1 TX_FAULT implemented\n             -bit 2: = 1 LOS Implemented, inverted\n             -bit 1: = 1 LOS Implemented\n             Located at I2C address 0xa0, byte: 65')
sfpFibreChannelMedia = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 11), Bits().clone(namedValues=NamedValues(("sfpMultiMode62u5", 0), ("sfpMultiMode50u0", 1), ("sfpSingleMode", 2), ("sfpTwistedAxialPair", 3), ("sfpShieldedTwistedPair", 4), ("sfpMiniatureCoax", 5), ("sfpVideoCoax", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFibreChannelMedia.setStatus('current')
if mibBuilder.loadTexts: sfpFibreChannelMedia.setDescription('Fiber Channel transmission media.\n             Located at I2C address 0xa0, byte: 9')
sfpCompliance = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 12), Bits().clone(namedValues=NamedValues(("sfpSonetReachSpecifier1", 0), ("sfpSonetReachSpecifier2", 1), ("sfpSonetOC48LongReach", 2), ("sfpSonetOC48IntermediateReach", 3), ("sfpSonetOC48ShortReach", 4), ("sfpSonetOC12LongReach", 5), ("sfpSonetOC12IntermediateReach", 6), ("sfpSonetOC12ShortReach", 7), ("sfpSonetOC3LongReach", 8), ("sfpSonetOC3IntermediateReach", 9), ("sfpSonetOC3ShortReach", 10), ("sfp1000BaseT", 11), ("sfp1000BaseCX", 12), ("sfp1000BaseLX", 13), ("sfp1000baseSX", 14), ("sfpBasePX", 15), ("sfpBaseBX10", 16), ("sfp100BaseFX", 17), ("sfp100BaseLX", 18)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpCompliance.setStatus('current')
if mibBuilder.loadTexts: sfpCompliance.setDescription('Electronic or optical interfaces that are supported by the\n             transceiver.\n             Located at I2C address 0xa0, bytes: 4,5 & 6')
sfpWavelength = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 13), Integer32()).setUnits('nm').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpWavelength.setStatus('current')
if mibBuilder.loadTexts: sfpWavelength.setDescription('Nominal transmiter output wavelength at room temperature.\n             Units are in nm (nanometers).\n             Located at I2C address 0xa0, bytes: 60 & 61 (endianess: big)')
sfpNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: sfpNominalBitRate.setDescription('Nominal bit rate (in megabit per second) supported from this\n             SFP module rouded to the nearest 100 megabits per second.\n             Located at I2C address 0xa0, byte: 12')
sfpLinkLength9u = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 15), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLinkLength9u.setStatus('current')
if mibBuilder.loadTexts: sfpLinkLength9u.setDescription('Link length (in meters) supported from this SFP module while\n             operating in compliance with the applicable standards using single\n             mode fiber. A value of zero means that the transceiver does not\n             support single mode fiber.\n             Located at I2C address 0xa0, bytes: 14-15')
sfpLinkLength50u = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 16), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLinkLength50u.setStatus('current')
if mibBuilder.loadTexts: sfpLinkLength50u.setDescription('Link length (in meters) supported from this SFP module while\n             operating in compliance with the applicable standards using\n             50 micron multi-mode fiber. A value of zero means that the\n             transceiver does not support 50 micron multi-mode mode fiber.\n             Located at I2C address 0xa0, byte: 16')
sfpLinkLength62u5 = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 17), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLinkLength62u5.setStatus('current')
if mibBuilder.loadTexts: sfpLinkLength62u5.setDescription('Link length (in meters) supported from this SFP module while\n             operating in compliance with the applicable standards using\n             62.5 micron multi-mode fiber. A value of zero means that the\n             transceiver does not support 62.5 micron multi-mode mode fiber.\n             Located at I2C address 0xa0, byte: 17')
sfpLinkLengthCopper = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 18), Integer32()).setUnits('m').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLinkLengthCopper.setStatus('current')
if mibBuilder.loadTexts: sfpLinkLengthCopper.setDescription('Link length (in meters) supported from this SFP module while\n             operating in compliance with the applicable standards using\n             copper cable. A value of zero means that the transceiver does\n             not support copper cable.\n             Located at I2C address 0xa0, byte: 18')
sfpLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLabel.setStatus('current')
if mibBuilder.loadTexts: sfpLabel.setDescription('This is an ASCII string that identifies this SFP in the\n             system.')
sfpFailAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 2, 1, 20), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpFailAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpFailAlarm.setDescription('SFP Module fail (module missing included)')
sfpFailAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 6), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpFailAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: sfpFailAlarmSeverityCode.setDescription('Defines the severity associated to the sfpFailAlarm\n             and enables/disables the trap generation on status change event.')
sfpDiagnosticTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7), )
if mibBuilder.loadTexts: sfpDiagnosticTable.setStatus('current')
if mibBuilder.loadTexts: sfpDiagnosticTable.setDescription('Each SFP may contain a 256 byte block of diagnostic data\n             fields. This table contains the items found in this data block.\n             The data block is located at I2C address 0xa2.')
sfpDiagnosticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1), ).setIndexNames((0, "SIAE-SFP-MIB", "sfpModuleId"))
if mibBuilder.loadTexts: sfpDiagnosticEntry.setStatus('current')
if mibBuilder.loadTexts: sfpDiagnosticEntry.setDescription('This describes a row in the diagnostic table.')
sfpDiagnosticValid = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpDiagnosticValid.setStatus('current')
if mibBuilder.loadTexts: sfpDiagnosticValid.setDescription('if False, then the SFP data in this table is not valid. This\n             will be set to False if the SFP module is not installed, or if\n             the I/O card that contains the SFP is not installed or if\n             the EEPROM check code is wrong. The data in the table should\n             not be used unless this element is True.')
sfpLOSPinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLOSPinOut.setStatus('current')
if mibBuilder.loadTexts: sfpLOSPinOut.setDescription('This contains the T/F state of the SFP LOS (output) pin. It is\n             True if the SFP has detected Loss-Of-Signal. located at I2c\n             address 0xa2, address: 110, mask 0x02')
sfpTxFaultPinOut = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxFaultPinOut.setStatus('current')
if mibBuilder.loadTexts: sfpTxFaultPinOut.setDescription('This contains the T/F state of the SFP Tx Fault (output) pin.\n             It is True if the SFP has detected a Tx fault condition.\n             located at I2C address 0xa2, Byte 110, mask 0x04')
sfpRateSelectPinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRateSelectPinIn.setStatus('current')
if mibBuilder.loadTexts: sfpRateSelectPinIn.setDescription('This contains the T/F state of the SFP RX Rate Select (input)\n             pin. This function is not implemented on Finisar SFPs. located\n             at I2C address 0xa2, Byte 110, mask 0x10')
sfpTxDisablePinIn = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxDisablePinIn.setStatus('current')
if mibBuilder.loadTexts: sfpTxDisablePinIn.setDescription('This contains the T/F state of the SFP TX Disable (input) pin.\n             located at I2C address 0xa2, Byte 110, mask 0x80')
sfpTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 6), Temperature()).setUnits('C/10').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTemperature.setStatus('current')
if mibBuilder.loadTexts: sfpTemperature.setDescription('This contains the internal temperature of the SFP in tehnth of \n             Celsius degrees. Range is from -128.0C to +128.0C, but is only\n             valid from -40.0C to +125.0C with an accuracy of +/- 3C. \n             Located at I2C address 0xa2, Bytes 96 & 97 (MSB, LSB)')
sfpVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('milliVolts (mV)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpVoltage.setStatus('current')
if mibBuilder.loadTexts: sfpVoltage.setDescription('This contains the internally measured SFP supply voltage\n             (Vcc). Units are in milliVolts (3210 = 3.21V). Range is 0 to\n             6.554V. Located at I2C address 0xa2, Bytes 98 & 99 (MSB, LSB)')
sfpTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131000))).setUnits('microAmps (uA)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxBias.setStatus('current')
if mibBuilder.loadTexts: sfpTxBias.setDescription('This contains the internally measured SFP TX laser bias\n             current. Units are in microAmps, and range from 0 to 131000uA\n             (131mA). Located at I2C address 0xa2, Bytes 100 & 101 (MSB, LSB)')
sfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microWatts (uW)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpTxPower.setStatus('current')
if mibBuilder.loadTexts: sfpTxPower.setDescription('This contains the internally measured TX output power. Units\n             are in uW (micro Watts), and range from 0 to 6554uW (6.535mW).\n             This value is not valid if the transmitter is disabled. Located\n             at I2C address 0xa2, Bytes 102 & 103 (MSB, LSB)')
sfpRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('microWatts (uW)').setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpRxPower.setStatus('current')
if mibBuilder.loadTexts: sfpRxPower.setDescription('This contains the internally measured RX optical power. Units\n             are in uW (micro Watts), and range from 0 to 6554uW (6.535mW).\n             Located at I2C address 0xa2, Bytes 104 & 105 (MSB, LSB)')
sfpInternalAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 11), Bits().clone(namedValues=NamedValues(("sfpIntAlarmTempHigh", 0), ("sfpIntAlarmTempLow", 1), ("sfpIntAlarmVoltageHigh", 2), ("sfpIntAlarmVoltageLow", 3), ("sfpIntAlarmTxBiasHigh", 4), ("sfpIntAlarmTxBiasLow", 5), ("sfpIntAlarmTxPowerHigh", 6), ("sfpIntAlarmTxPowerLow", 7), ("sfpIntAlarmRxPowerHigh", 8), ("sfpIntAlarmRxPowerLow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInternalAlarms.setStatus('current')
if mibBuilder.loadTexts: sfpInternalAlarms.setDescription('This contains the state of the SFP internal alarm register. A\n             bit is set for each alarm that is active. located at I2C\n             address 0xa2, Byte 112 & 113  (MSB, LSB) mask 0xffc0')
sfpInternalWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 7, 1, 12), Bits().clone(namedValues=NamedValues(("sfpIntWarnTempHigh", 0), ("sfpIntWarnTempLow", 1), ("sfpIntWarnVoltageHigh", 2), ("sfpIntWarnVoltageLow", 3), ("sfpIntWarnTxBiasHigh", 4), ("sfpIntWarnTxBiasLow", 5), ("sfpIntWarnTxPowerHigh", 6), ("sfpIntWarnTxPowerLow", 7), ("sfpIntWarnRxPowerHigh", 8), ("sfpIntWarnRxPowerLow", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpInternalWarnings.setStatus('current')
if mibBuilder.loadTexts: sfpInternalWarnings.setDescription('This contains the state of the SFP internal warning register.\n             A bit is set for each warning that is active. located at I2C\n             address 0xa2, Byte 116 & 117  (MSB, LSB) mask 0xffc0')
sfpAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10), )
if mibBuilder.loadTexts: sfpAlarmTable.setStatus('current')
if mibBuilder.loadTexts: sfpAlarmTable.setDescription('This table contains the SFP alarm and warning threshold\n             values.')
sfpAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1), ).setIndexNames((0, "SIAE-SFP-MIB", "sfpModuleId"), (0, "SIAE-SFP-MIB", "sfpPhysicalQuantity"))
if mibBuilder.loadTexts: sfpAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: sfpAlarmEntry.setDescription('An entry into the Threshold table.')
sfpPhysicalQuantity = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 1), PhysicalQuantity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPhysicalQuantity.setStatus('current')
if mibBuilder.loadTexts: sfpPhysicalQuantity.setDescription('Measured physical quantity.\n             Units of temperature are tenth of Celsius degrres,\n             units of Power supply voltage (Vcc) are microVolts,\n             units of Tx laser bias current are microAmps (uA),\n             units of Rx optical power are microWatts (uW),\n             units of Tx output power are microWatts (uW).\n            ')
sfpThresholdHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpThresholdHighAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpThresholdHighAlarm.setDescription('A reading at or above this temperature will trigger a high\n             measured physical quantity alarm.')
sfpThresholdHighWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpThresholdHighWarning.setStatus('current')
if mibBuilder.loadTexts: sfpThresholdHighWarning.setDescription('A reading at or above this temperature will trigger a high\n             measured physical quantity warning.')
sfpThresholdLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpThresholdLowAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpThresholdLowAlarm.setDescription('A reading at or above this temperature will trigger a low\n             measured physical quantity alarm.')
sfpThresholdLowWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpThresholdLowWarning.setStatus('current')
if mibBuilder.loadTexts: sfpThresholdLowWarning.setDescription('A reading at or above this temperature will trigger a low\n             measured physical quantity warning.')
sfpHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 6), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpHighAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpHighAlarm.setDescription('Measured physical quantity has crossed sfpThresholdHighAlarm.')
sfpHighWarningAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 7), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpHighWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpHighWarningAlarm.setDescription('Measured physical quantity has crossed sfpThresholdHighWarning.')
sfpLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 8), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLowAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpLowAlarm.setDescription('Measured physical quantity has crossed sfpThresholdLowAlarm.')
sfpLowWarningAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 10, 1, 9), AlarmStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpLowWarningAlarm.setStatus('current')
if mibBuilder.loadTexts: sfpLowWarningAlarm.setDescription('Measured physical quantity has crossed sfpThresholdLowWarning.')
sfpHighAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 11), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpHighAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: sfpHighAlarmSeverityCode.setDescription('Defines the severity associated to the sfpHighAlarm\n             and enables/disables the trap generation on status change event.')
sfpHighWarningAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 12), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpHighWarningAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: sfpHighWarningAlarmSeverityCode.setDescription('Defines the severity associated to the sfpHighWarningAlarm\n             and enables/disables the trap generation on status change event.')
sfpLowAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 13), AlarmSeverityCode().clone('majorTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpLowAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: sfpLowAlarmSeverityCode.setDescription('Defines the severity associated to the sfpLowAlarm\n             and enables/disables the trap generation on status change event.')
sfpLowWarningAlarmSeverityCode = MibScalar((1, 3, 6, 1, 4, 1, 3373, 1103, 74, 14), AlarmSeverityCode().clone('warningTrapEnable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpLowWarningAlarmSeverityCode.setStatus('current')
if mibBuilder.loadTexts: sfpLowWarningAlarmSeverityCode.setDescription('Defines the severity associated to the sfpLowWarningAlarm\n             and enables/disables the trap generation on status change event.')
mibBuilder.exportSymbols("SIAE-SFP-MIB", sfpRxPower=sfpRxPower, sfpAlarmTable=sfpAlarmTable, Temperature=Temperature, sfpSerialIdEntry=sfpSerialIdEntry, sfpEnhancedOptionsCode=sfpEnhancedOptionsCode, sfpMibVersion=sfpMibVersion, sfpLinkLengthCopper=sfpLinkLengthCopper, sfpRateSelectPinIn=sfpRateSelectPinIn, sfpLinkLength62u5=sfpLinkLength62u5, sfpVendorName=sfpVendorName, sfpDiagnosticTable=sfpDiagnosticTable, sfpLowWarningAlarm=sfpLowWarningAlarm, sfpHighAlarmSeverityCode=sfpHighAlarmSeverityCode, sfpInternalAlarms=sfpInternalAlarms, sfpFailAlarmSeverityCode=sfpFailAlarmSeverityCode, sfpLabel=sfpLabel, sfpModuleId=sfpModuleId, PhysicalQuantity=PhysicalQuantity, sfpSerialIdValid=sfpSerialIdValid, sfpLinkLength50u=sfpLinkLength50u, sfpThresholdHighAlarm=sfpThresholdHighAlarm, sfpWavelength=sfpWavelength, sfpAlarmEntry=sfpAlarmEntry, sfpNominalBitRate=sfpNominalBitRate, sfpTxDisablePinIn=sfpTxDisablePinIn, sfpTxPower=sfpTxPower, sfpFibreChannelMedia=sfpFibreChannelMedia, sfpOptions=sfpOptions, sfpInternalWarnings=sfpInternalWarnings, sfpHighAlarm=sfpHighAlarm, sfpTxFaultPinOut=sfpTxFaultPinOut, sfpLowWarningAlarmSeverityCode=sfpLowWarningAlarmSeverityCode, sfpTxBias=sfpTxBias, sfpThresholdHighWarning=sfpThresholdHighWarning, PYSNMP_MODULE_ID=sfp, sfpHighWarningAlarm=sfpHighWarningAlarm, sfpVendorPartNumber=sfpVendorPartNumber, sfpDiagMonitorCode=sfpDiagMonitorCode, sfpPhysicalQuantity=sfpPhysicalQuantity, sfpDiagnosticEntry=sfpDiagnosticEntry, sfpVendorRev=sfpVendorRev, sfpLOSPinOut=sfpLOSPinOut, sfpDiagnosticValid=sfpDiagnosticValid, sfpHighWarningAlarmSeverityCode=sfpHighWarningAlarmSeverityCode, sfp=sfp, sfpVoltage=sfpVoltage, sfpFailAlarm=sfpFailAlarm, sfpVendorDateCode=sfpVendorDateCode, sfpLinkLength9u=sfpLinkLength9u, sfpTemperature=sfpTemperature, sfpLowAlarm=sfpLowAlarm, sfpVendorSN=sfpVendorSN, sfpLowAlarmSeverityCode=sfpLowAlarmSeverityCode, sfpThresholdLowAlarm=sfpThresholdLowAlarm, sfpSerialIdTable=sfpSerialIdTable, sfpThresholdLowWarning=sfpThresholdLowWarning, sfpCompliance=sfpCompliance)
