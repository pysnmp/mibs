#
# PySNMP MIB module MICROSEMI-PDSINE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/microsemi/MICROSEMI-PDSINE-MIB
# Produced by pysmi-1.1.12 at Wed May 29 10:58:40 2024
# On host fv-az1200-312 platform Linux version 6.5.0-1021-azure by user runner
# Using Python version 3.10.14 (main, May  8 2024, 15:05:35) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, Counter32, NotificationType, IpAddress, enterprises, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Integer32, ObjectIdentity, iso, Counter64, Gauge32, Unsigned32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "NotificationType", "IpAddress", "enterprises", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Integer32", "ObjectIdentity", "iso", "Counter64", "Gauge32", "Unsigned32", "TimeTicks")
TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString")
polPowerOverLan = ModuleIdentity((1, 3, 6, 1, 4, 1, 7428))
if mibBuilder.loadTexts: polPowerOverLan.setLastUpdated('201111150000Z')
if mibBuilder.loadTexts: polPowerOverLan.setOrganization('')
if mibBuilder.loadTexts: polPowerOverLan.setContactInfo('')
if mibBuilder.loadTexts: polPowerOverLan.setDescription('')
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1))
description = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1))
sysObjectID = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1))
pseDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2))
portObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1))
mainObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2))
poeNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 3))
midspanUnknown = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 1))
midspan6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 2))
midspan6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 3))
midspan12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 4))
midspan12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 5))
midspan24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 6))
midspan24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 7))
midspan48portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 8))
midspan48portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 9))
midspan6portHPAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 10))
midspan6portHPACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 11))
midspan12portHPAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 12))
midspan12portHPACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 13))
midspanGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 14))
midspanGigabit12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 15))
midspanGigabit24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 16))
midspanHiPoEGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 17))
midspanHiPoEGigabit12portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 18))
midspanHiPoEGigabit24portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 19))
midspanHiPoEATGigabit6portAC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 20))
midspanHiPoEATGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 21))
midspanHiPoEATGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 22))
midspan4PairATGigabit6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 23))
midspan4PairATGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 24))
midspanHiPoEATGigabit6portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 25))
midspanHiPoEATGigabit12portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 26))
midspanHiPoEATGigabit24portDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 27))
midspan4PairATGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 28))
midspanEEPoEGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 29))
midspanPoHGigabit6portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 30))
midspanPoHGigabit12portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 31))
midspanPoHGigabit24portACDC = MibIdentifier((1, 3, 6, 1, 4, 1, 7428, 1, 1, 1, 32))
portTable = MibTable((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('A table of objects that display and control the power\n            characteristics of power Ethernet ports on a Power Source\n            Entity (PSE) device.  This group will be implemented in\n            managed power Ethernet switches and mid-span devices.\n            Values of all read-write objects in this table are\n            persistent at restart/reboot.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1), ).setIndexNames((0, "MICROSEMI-PDSINE-MIB", "portGroupIndex"), (0, "MICROSEMI-PDSINE-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('A set of objects that display and control the power\n               characteristics of a power Ethernet PSE port.')
portGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: portGroupIndex.setStatus('current')
if mibBuilder.loadTexts: portGroupIndex.setDescription('This variable uniquely identifies the group\n            containing the port to which a power Ethernet PSE is\n            connected.  Group means box in the stack, module in a\n            rack and the value 1 MUST be used for non-modular devices.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This variable uniquely identifies the power Ethernet PSE\n            port within group portGroupIndex to which the\n            power Ethernet PSE entry is connected.')
portConsumptionPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 3), Gauge32()).setUnits('Watt').setMaxAccess("readonly")
if mibBuilder.loadTexts: portConsumptionPower.setStatus('current')
if mibBuilder.loadTexts: portConsumptionPower.setDescription('A read-only value indicates the measured usage power expressed in Watts for a specific port ')
portMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setUnits('Watt').setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMaxPower.setStatus('current')
if mibBuilder.loadTexts: portMaxPower.setDescription('Read/Write maximum power consumption that PD device may consume in Watts\n          NOTE:\n          1. For Midspan 60xx,60xxG,6500 series, Max PD power consumption = 17Watt\n          2. For Midspan 70xxG series, Max PD power consumption = 30Watt\n          3 .For Midspan 80xx series, this parameter is read-only !!\n          4. For Midspan 90xxG series, Max PD power consumption = 30/36Watt\n          5. For Midspan 95xxG series, Max PD power consumption = 60/72Watt (four pair) or 30/36Watt (two pair)\n          6. For Midspan 55xxG series, Max PD power consumption = 30/36Watt')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("twopair", 1), ("fourpair", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Enable/Disable Four-pair/EEPoE PoE\n                Read : Applicable to all Midspan series\n                Write: Applicable only to 95xxG/55xxG Midspan series\n                twopair  (1)  Two-pair PoE port capable of providing up to 16.8Watt or 30-36Watt.\n                fourpair (2)  Four-pair/EEPoE-mode PoE port capable of providing up to 60-72Watt (95xxG) or 30-36W (55xxG).')
mainPseTable = MibTable((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1), )
if mibBuilder.loadTexts: mainPseTable.setStatus('current')
if mibBuilder.loadTexts: mainPseTable.setDescription('A table of objects that display and control attributes\n            of the main PSE device.')
mainPseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1), ).setIndexNames((0, "MICROSEMI-PDSINE-MIB", "pethMainPseGroupIndex"))
if mibBuilder.loadTexts: mainPseEntry.setStatus('current')
if mibBuilder.loadTexts: mainPseEntry.setDescription('A set of objects that display and control the Main PSE device.')
mainGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: mainGroupIndex.setStatus('current')
if mibBuilder.loadTexts: mainGroupIndex.setDescription('This variable uniquely identifies the group to which\n           power Ethernet PSE is connected.  Group means (box in\n           the stack, module in a rack) and the value 1 MUST be\n           used for non-modular devices.')
mainVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Volt').setMaxAccess("readonly")
if mibBuilder.loadTexts: mainVoltage.setStatus('current')
if mibBuilder.loadTexts: mainVoltage.setDescription('Power Supply Voltage in Volt.')
mainDetectionMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee8023afat", 1), ("ieee8023afatandlegacy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainDetectionMethod.setStatus('current')
if mibBuilder.loadTexts: mainDetectionMethod.setDescription('Read/Write PD device detection method (802.3af / 802.3af+Legacy).')
mainPowerUsageBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: mainPowerUsageBudget.setStatus('current')
if mibBuilder.loadTexts: mainPowerUsageBudget.setDescription("Allow external SNMP manager to limit maximum power that all PD's may consume\n                Whenever total power consumption exceeds maximum power, Midspan may turn off\n                automatically Low priority and High priority PSE ports.\n                Percentage Value refers to Midspan maximum power.")
mainPSEMaxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('Watts').setMaxAccess("readonly")
if mibBuilder.loadTexts: mainPSEMaxPower.setStatus('current')
if mibBuilder.loadTexts: mainPSEMaxPower.setDescription('Maximum power that Midspan can provide (Watt), after including power budget percentage limitation.\n                Example: Midspan maximum power without power limit = 860Watt, and Power Limit = 50%\n                         mainPSEMaxPower = 430Watt')
highPowerLegacyPDSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPowerLegacyPDSupport.setStatus('current')
if mibBuilder.loadTexts: highPowerLegacyPDSupport.setDescription("Applicable only for Midspan 90xxG series\n                enable (1)       - Power Cisco 125x access point (pre 802.3at legacy high power PD device).\n                disable(2)       - Power only 802.3at compliant devices.\n                notsupported(3) - SNMP GET result for Midspan which doesn't support this feature")
highPowerExtendedPortPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: highPowerExtendedPortPower.setStatus('current')
if mibBuilder.loadTexts: highPowerExtendedPortPower.setDescription("Applicable only for Midspan 90xxG/55xxG series\n                enable (1)       - Extend maximum power to PD device beyond 802.3at specification.\n                disable(2)       - Maximum power to PD device per 802.3at specification.\n                notsupported(3) - SNMP GET result for Midspan which doesn't support this feature")
powerBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("standalone", 1), ("powerbackupbyrps", 2), ("powerbackupbymidspan", 3), ("incompatiblepowerbackupdevice", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerBackupStatus.setStatus('current')
if mibBuilder.loadTexts: powerBackupStatus.setDescription("Applicable only for Midspan 90xxG/95xxG/55xxG series\n                standalone                      - Midspan isn't connected to any power backup device                  \n                powerbackupbyrps              - Redundant power supply (RPS) backup Midspan device          \n                powerbackupbymidspan          - Two Midspan devices backup each other        \n                incompatiblepowerbackupdevice - Midspan was connected to incompatible power backup device.\n                                                   For example RPS 430Watt to Midspan 950Watt")
internalPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: internalPowerSourceStatus.setStatus('current')
if mibBuilder.loadTexts: internalPowerSourceStatus.setDescription('Applicable only for Midspan 90xxG/95xxG/55xxG series\n                ok(1)   - Internal Power Source is OK\n                fail(2) - Internal Power Source failure')
externalPowerSourceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2), ("notsupported", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: externalPowerSourceStatus.setStatus('current')
if mibBuilder.loadTexts: externalPowerSourceStatus.setDescription("Applicable only for Midspan 90xxG/95xxG/55xxG series\n                ok(1)            - External Power Source is OK\n                fail(2)          - External Power Source failure\n                notsupported(3) - SNMP GET result for Midspan which doesn't support this feature")
temperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 11), Integer32()).setUnits('Degree').setMaxAccess("readonly")
if mibBuilder.loadTexts: temperature.setStatus('current')
if mibBuilder.loadTexts: temperature.setDescription('Unit temperature - Applicable only for Midspan 95xxG series')
temperatureformat = MibTableColumn((1, 3, 6, 1, 4, 1, 7428, 1, 2, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("celcius", 1), ("fahrenheit", 2), ("notsupported", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: temperatureformat.setStatus('current')
if mibBuilder.loadTexts: temperatureformat.setDescription('Unit temperature format - Applicable only for Midspan 95xxG series\n                Celcius(1)       - Report unit temperature in Celcius\n                Fahrenheit(2)    - Report unit temperature in Fahrenheit\n                NotSupported(3) - No temperature sensor inside the Midspan unit')
powerBackupStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 1)).setObjects(("MICROSEMI-PDSINE-MIB", "powerBackupStatus"))
if mibBuilder.loadTexts: powerBackupStatusNotification.setStatus('current')
if mibBuilder.loadTexts: powerBackupStatusNotification.setDescription('Applicable only for Midspan 90xxG/95xxG/55xxG series\n                This Notification reports power backup status change, and whenever incompatible\n                power backup source is connected (as RPS 430Watt to Midspan 950Watt)')
internalPowerSourceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 2)).setObjects(("MICROSEMI-PDSINE-MIB", "internalPowerSourceStatus"))
if mibBuilder.loadTexts: internalPowerSourceStatusNotification.setStatus('current')
if mibBuilder.loadTexts: internalPowerSourceStatusNotification.setDescription('Applicable only for Midspan 90xxG/95xxG/55xxG series\n                This Notification reports internal Power Source failure')
externalPowerSourceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 7428, 1, 3, 3)).setObjects(("MICROSEMI-PDSINE-MIB", "externalPowerSourceStatus"))
if mibBuilder.loadTexts: externalPowerSourceStatusNotification.setStatus('current')
if mibBuilder.loadTexts: externalPowerSourceStatusNotification.setDescription('Applicable only for Midspan 90xxG/95xxG/55xxG series\n                This Notification reports external Power Source failure')
mibBuilder.exportSymbols("MICROSEMI-PDSINE-MIB", portMaxPower=portMaxPower, PYSNMP_MODULE_ID=polPowerOverLan, midspan48portACDC=midspan48portACDC, mainPseTable=mainPseTable, midspanPoHGigabit12portACDC=midspanPoHGigabit12portACDC, portEntry=portEntry, midspanGigabit6portAC=midspanGigabit6portAC, midspanGigabit24portAC=midspanGigabit24portAC, midspan12portACDC=midspan12portACDC, mainVoltage=mainVoltage, midspan24portAC=midspan24portAC, externalPowerSourceStatus=externalPowerSourceStatus, midspanHiPoEATGigabit6portDC=midspanHiPoEATGigabit6portDC, portGroupIndex=portGroupIndex, highPowerExtendedPortPower=highPowerExtendedPortPower, midspanHiPoEATGigabit6portAC=midspanHiPoEATGigabit6portAC, midspan4PairATGigabit24portACDC=midspan4PairATGigabit24portACDC, temperatureformat=temperatureformat, midspanHiPoEATGigabit12portACDC=midspanHiPoEATGigabit12portACDC, midspanGigabit12portAC=midspanGigabit12portAC, portObjects=portObjects, poeNotifications=poeNotifications, midspan4PairATGigabit6portACDC=midspan4PairATGigabit6portACDC, midspanPoHGigabit24portACDC=midspanPoHGigabit24portACDC, powerBackupStatus=powerBackupStatus, midspan6portACDC=midspan6portACDC, midspanUnknown=midspanUnknown, externalPowerSourceStatusNotification=externalPowerSourceStatusNotification, midspanHiPoEATGigabit12portDC=midspanHiPoEATGigabit12portDC, midspan12portHPAC=midspan12portHPAC, midspan4PairATGigabit12portACDC=midspan4PairATGigabit12portACDC, midspanHiPoEATGigabit24portACDC=midspanHiPoEATGigabit24portACDC, midspanHiPoEGigabit24portAC=midspanHiPoEGigabit24portAC, midspanHiPoEGigabit12portAC=midspanHiPoEGigabit12portAC, internalPowerSourceStatus=internalPowerSourceStatus, description=description, portIndex=portIndex, polPowerOverLan=polPowerOverLan, midspan24portACDC=midspan24portACDC, midspanEEPoEGigabit24portACDC=midspanEEPoEGigabit24portACDC, internalPowerSourceStatusNotification=internalPowerSourceStatusNotification, portConsumptionPower=portConsumptionPower, midspan48portAC=midspan48portAC, mainPseEntry=mainPseEntry, midspan6portAC=midspan6portAC, midspanHiPoEATGigabit24portDC=midspanHiPoEATGigabit24portDC, mainGroupIndex=mainGroupIndex, powerBackupStatusNotification=powerBackupStatusNotification, mainPSEMaxPower=mainPSEMaxPower, midspanPoHGigabit6portACDC=midspanPoHGigabit6portACDC, portTable=portTable, midspanHiPoEGigabit6portAC=midspanHiPoEGigabit6portAC, portType=portType, midspan12portAC=midspan12portAC, mainObjects=mainObjects, highPowerLegacyPDSupport=highPowerLegacyPDSupport, midspan6portHPAC=midspan6portHPAC, sysObjectID=sysObjectID, midspan12portHPACDC=midspan12portHPACDC, products=products, midspan6portHPACDC=midspan6portHPACDC, mainDetectionMethod=mainDetectionMethod, pseDevice=pseDevice, temperature=temperature, mainPowerUsageBudget=mainPowerUsageBudget)
