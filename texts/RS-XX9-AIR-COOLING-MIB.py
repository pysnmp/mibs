#
# PySNMP MIB module RS-XX9-AIR-COOLING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-AIR-COOLING-MIB
# Produced by pysmi-1.1.12 at Mon Oct 28 02:14:38 2024
# On host fv-az1014-591 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MibModule, rsXx9AirCooling = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MibModule", "rsXx9AirCooling")
NotificationState, NotificationPriority, NotificationMask = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "NotificationPriority", "NotificationMask")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, iso, Gauge32, Counter64, Bits, ModuleIdentity, MibIdentifier, NotificationType, Integer32, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "iso", "Gauge32", "Counter64", "Bits", "ModuleIdentity", "MibIdentifier", "NotificationType", "Integer32", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsXx9AirCoolingMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 101))
rsXx9AirCoolingMibModule.setRevisions(('2015-02-27 15:00', '2014-01-28 12:00', '2012-08-01 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9AirCoolingMibModule.setRevisionsDescriptions(('updated description texts', 'Cleanup of descriptions.', 'Preliminary revision',))
if mibBuilder.loadTexts: rsXx9AirCoolingMibModule.setLastUpdated('201502271500Z')
if mibBuilder.loadTexts: rsXx9AirCoolingMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9AirCoolingMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9AirCoolingMibModule.setDescription('This MIB defines air cooling specific objects\n                of XX9000 transmitting systems from Rohde & Schwarz.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.\n                - RS-XX9-COMMON-MIB     - mandatory for this MIB.')
rsXx9AirCoolingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 0))
airCoolingSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationPriority"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationState"))
if mibBuilder.loadTexts: airCoolingSummary.setStatus('current')
if mibBuilder.loadTexts: airCoolingSummary.setDescription('Air cooling summary state.\n                \n                Possible values:\n                off(2)       -\n                fault(3)     - \n                warning(4)   - \n                ok(5)        - \n                \n                Notification class: fault')
airCoolingSensorsSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationPriority"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationState"))
if mibBuilder.loadTexts: airCoolingSensorsSummary.setStatus('current')
if mibBuilder.loadTexts: airCoolingSensorsSummary.setDescription('Air cooling sensors\n                (inlet temperature, outlet temperature, pressure)\n                summary state.\n                \n                Possible values:\n                off(2)       -\n                fault(3)     - failure of both pressure sensors\n                warning(4)   - failure of one pressure sensor or of temperature sensors\n                ok(5)        - ')
rsXx9AirCoolingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1))
airCoolingStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1))
airCoolingNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1), )
if mibBuilder.loadTexts: airCoolingNotificationTable.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationTable.setDescription('The context information/configuration for the\n                air cooling status notifications.')
airCoolingNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1), ).setIndexNames((0, "RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationCycleIdx"), (0, "RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationIdx"))
if mibBuilder.loadTexts: airCoolingNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationEntry.setDescription('An entry in the airCoolingNotificationTable.')
airCoolingNotificationCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: airCoolingNotificationCycleIdx.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationCycleIdx.setDescription('Air cooling cycle index.')
airCoolingNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: airCoolingNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationIdx.setDescription('The notification number as below rsXx9AirCoolingNotifications.\n                This is a helper column and therefore not-accessible.')
airCoolingNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("airCoolingSummary", 1), ("airCoolingSensorsSummary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingNotificationName.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications\n                under rsXx9AirCoolingNotifications.')
airCoolingNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingNotificationMask.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationMask.setDescription('See textual convention for details.')
airCoolingNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationPriority.setDescription('See textual convention for details.')
airCoolingNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 1, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingNotificationState.setStatus('current')
if mibBuilder.loadTexts: airCoolingNotificationState.setDescription('See textual convention for details.')
airCoolingStateTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2), )
if mibBuilder.loadTexts: airCoolingStateTable.setStatus('current')
if mibBuilder.loadTexts: airCoolingStateTable.setDescription('Air cooling state information.')
airCoolingStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2, 1), ).setIndexNames((0, "RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationCycleIdx"))
if mibBuilder.loadTexts: airCoolingStateEntry.setStatus('current')
if mibBuilder.loadTexts: airCoolingStateEntry.setDescription('An entry in the airCoolingStateTable.')
airCoolingOutletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2, 1, 2), Integer32()).setUnits('1/10 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingOutletTemperature.setStatus('current')
if mibBuilder.loadTexts: airCoolingOutletTemperature.setDescription('Indicates the temperature of the coolant flowing out of the \n                transmitter rack toward the heat exchanger. The temperature \n                must not exceed a maximum value of 65 degree C.\n                ')
airCoolingOutletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2, 1, 3), NotificationState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingOutletTemperatureSensor.setStatus('current')
if mibBuilder.loadTexts: airCoolingOutletTemperatureSensor.setDescription('Outlet temperature sensor state.\n                \n                Possible values:\n                fault(3)\n                ok(5)')
airCoolingInletTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2, 1, 4), Integer32()).setUnits('1/10 degree Celsius').setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingInletTemperature.setStatus('current')
if mibBuilder.loadTexts: airCoolingInletTemperature.setDescription('Indicates the temperature of the coolant flowing into the transmitter rack.\n                \n                Value only relevant if airCoolingCfgType is conductedInletOutletAir(2).')
airCoolingInletTemperatureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 2, 1, 5), NotificationState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingInletTemperatureSensor.setStatus('current')
if mibBuilder.loadTexts: airCoolingInletTemperatureSensor.setDescription('Indicates the status of the temperature sensor at the inlet of the \n                rack. If a fault is indicated, first check the connecting cable \n                between the sensor and the cooling interface card (CIF) in the \n                R&S TCE900 system control unit.\n                \n                Possible values:\n                fault(3)\n                ok(5)\n                \n                Value only relevant if airCoolingCfgType is conductedInletOutletAir(2).')
airCoolingPressureTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 3), )
if mibBuilder.loadTexts: airCoolingPressureTable.setStatus('current')
if mibBuilder.loadTexts: airCoolingPressureTable.setDescription('pressure information')
airCoolingPressureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 3, 1), ).setIndexNames((0, "RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationCycleIdx"), (0, "RS-XX9-AIR-COOLING-MIB", "airCoolingPressureSensorIdx"))
if mibBuilder.loadTexts: airCoolingPressureEntry.setStatus('current')
if mibBuilder.loadTexts: airCoolingPressureEntry.setDescription('An entry in the airCoolingPressureTable.')
airCoolingPressureSensorIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: airCoolingPressureSensorIdx.setStatus('current')
if mibBuilder.loadTexts: airCoolingPressureSensorIdx.setDescription('1 - pressure sensor 1\n                2 - pressure sensor 2\n                3 - virtual sum pressure sensor')
airCoolingPressureValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 3, 1, 3), Integer32()).setUnits('deci Pascal').setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingPressureValue.setStatus('current')
if mibBuilder.loadTexts: airCoolingPressureValue.setDescription('Indicates the pressure in the rack. Two differential pressure \n                sensors (Sensor 1 and Sensor 2) measure the differential air \n                pressure inside and outside the rack. If a sensor fails, the \n                remaining sensor continues to indicate the pressure inside the \n                rack. \n                ')
airCoolingPressureSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 3, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingPressureSensor.setStatus('current')
if mibBuilder.loadTexts: airCoolingPressureSensor.setDescription('Indicates the status of pressure sensor. If a fault is indicated, \n                first check the connecting cable between the sensor and the air \n                cooling interface card in the R&S TCE900 system control unit.\n                ')
airCoolingFanTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4), )
if mibBuilder.loadTexts: airCoolingFanTable.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanTable.setDescription('Description.')
airCoolingFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4, 1), ).setIndexNames((0, "RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationCycleIdx"), (0, "RS-XX9-AIR-COOLING-MIB", "airCoolingFanIdx"))
if mibBuilder.loadTexts: airCoolingFanEntry.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanEntry.setDescription('An entry in the airCoolingFanTable.')
airCoolingFanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: airCoolingFanIdx.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanIdx.setDescription('fan index')
airCoolingFanSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4, 1, 3), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingFanSummary.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanSummary.setDescription('Indicates the condition of the fan.')
airCoolingFanCommunication = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4, 1, 4), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingFanCommunication.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanCommunication.setDescription('Indicates whether the fan is connected to the ACIF board.')
airCoolingFanCurrentSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 1, 4, 1, 5), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: airCoolingFanCurrentSpeed.setStatus('current')
if mibBuilder.loadTexts: airCoolingFanCurrentSpeed.setDescription('Indicates the current speed of the fan.')
airCoolingConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 2))
airCoolingConfigTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 2, 1), )
if mibBuilder.loadTexts: airCoolingConfigTable.setStatus('current')
if mibBuilder.loadTexts: airCoolingConfigTable.setDescription('Liquid cooling configuration.')
airCoolingConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 2, 1, 1), ).setIndexNames((0, "RS-XX9-AIR-COOLING-MIB", "airCoolingCfgCycleIdx"))
if mibBuilder.loadTexts: airCoolingConfigEntry.setStatus('current')
if mibBuilder.loadTexts: airCoolingConfigEntry.setDescription('An entry in the airCoolingConfigTable.')
airCoolingCfgCycleIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: airCoolingCfgCycleIdx.setStatus('current')
if mibBuilder.loadTexts: airCoolingCfgCycleIdx.setDescription('Air cooling cycle index.')
airCoolingCfgType = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("conductedOutletAir", 1), ("conductedInletOutletAir", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: airCoolingCfgType.setStatus('current')
if mibBuilder.loadTexts: airCoolingCfgType.setDescription('Used to set the specific Air Cooling Type. \n                Choose ConductedOutletAir(1) or ConductedInletOutletAir(2). \n                In case of ConductedInletOutletAir(2) there is an additional temperature sensor for incoming air.')
rsXx9AirCoolingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2))
rsXx9AirCoolingCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 1))
rsXx9AirCoolingBasicCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 1, 1)).setObjects(("RS-XX9-AIR-COOLING-MIB", "rsXx9AirCoolingObj"), ("RS-XX9-AIR-COOLING-MIB", "rsXx9AirCoolingNotify"), ("RS-XX9-AIR-COOLING-MIB", "rsXx9AirCoolingConductedObj"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9AirCoolingBasicCompliance = rsXx9AirCoolingBasicCompliance.setStatus('current')
if mibBuilder.loadTexts: rsXx9AirCoolingBasicCompliance.setDescription('The compliance statement for the XX9000 air cooling system.')
rsXx9AirCoolingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 2))
rsXx9AirCoolingObj = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 2, 1)).setObjects(("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationName"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationMask"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationPriority"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingNotificationState"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingCfgType"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingOutletTemperature"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingOutletTemperatureSensor"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingPressureValue"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingPressureSensor"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingFanSummary"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingFanCommunication"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingFanCurrentSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9AirCoolingObj = rsXx9AirCoolingObj.setStatus('current')
if mibBuilder.loadTexts: rsXx9AirCoolingObj.setDescription('air cooling objects')
rsXx9AirCoolingConductedObj = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 2, 2)).setObjects(("RS-XX9-AIR-COOLING-MIB", "airCoolingInletTemperature"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingInletTemperatureSensor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9AirCoolingConductedObj = rsXx9AirCoolingConductedObj.setStatus('current')
if mibBuilder.loadTexts: rsXx9AirCoolingConductedObj.setDescription('Objects relevant only if airCoolingCfgType is conductedInletOutletAir(2).')
rsXx9AirCoolingNotify = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 101, 2, 2, 3)).setObjects(("RS-XX9-AIR-COOLING-MIB", "airCoolingSummary"), ("RS-XX9-AIR-COOLING-MIB", "airCoolingSensorsSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    rsXx9AirCoolingNotify = rsXx9AirCoolingNotify.setStatus('current')
if mibBuilder.loadTexts: rsXx9AirCoolingNotify.setDescription('air cooling notifications')
mibBuilder.exportSymbols("RS-XX9-AIR-COOLING-MIB", airCoolingStatus=airCoolingStatus, airCoolingNotificationMask=airCoolingNotificationMask, airCoolingFanCommunication=airCoolingFanCommunication, airCoolingSummary=airCoolingSummary, airCoolingNotificationTable=airCoolingNotificationTable, airCoolingNotificationName=airCoolingNotificationName, airCoolingFanTable=airCoolingFanTable, rsXx9AirCoolingObj=rsXx9AirCoolingObj, airCoolingFanCurrentSpeed=airCoolingFanCurrentSpeed, airCoolingConfigEntry=airCoolingConfigEntry, rsXx9AirCoolingConformance=rsXx9AirCoolingConformance, rsXx9AirCoolingCompliances=rsXx9AirCoolingCompliances, airCoolingPressureValue=airCoolingPressureValue, rsXx9AirCoolingNotify=rsXx9AirCoolingNotify, airCoolingPressureSensorIdx=airCoolingPressureSensorIdx, airCoolingNotificationPriority=airCoolingNotificationPriority, airCoolingInletTemperature=airCoolingInletTemperature, airCoolingNotificationEntry=airCoolingNotificationEntry, airCoolingStateEntry=airCoolingStateEntry, airCoolingCfgCycleIdx=airCoolingCfgCycleIdx, rsXx9AirCoolingObjects=rsXx9AirCoolingObjects, airCoolingSensorsSummary=airCoolingSensorsSummary, airCoolingPressureSensor=airCoolingPressureSensor, airCoolingFanIdx=airCoolingFanIdx, airCoolingNotificationCycleIdx=airCoolingNotificationCycleIdx, rsXx9AirCoolingGroups=rsXx9AirCoolingGroups, rsXx9AirCoolingConductedObj=rsXx9AirCoolingConductedObj, airCoolingPressureEntry=airCoolingPressureEntry, airCoolingNotificationIdx=airCoolingNotificationIdx, airCoolingPressureTable=airCoolingPressureTable, airCoolingConfiguration=airCoolingConfiguration, airCoolingConfigTable=airCoolingConfigTable, rsXx9AirCoolingNotifications=rsXx9AirCoolingNotifications, airCoolingOutletTemperature=airCoolingOutletTemperature, PYSNMP_MODULE_ID=rsXx9AirCoolingMibModule, airCoolingFanSummary=airCoolingFanSummary, airCoolingFanEntry=airCoolingFanEntry, airCoolingOutletTemperatureSensor=airCoolingOutletTemperatureSensor, airCoolingCfgType=airCoolingCfgType, airCoolingStateTable=airCoolingStateTable, rsXx9AirCoolingBasicCompliance=rsXx9AirCoolingBasicCompliance, airCoolingNotificationState=airCoolingNotificationState, airCoolingInletTemperatureSensor=airCoolingInletTemperatureSensor, rsXx9AirCoolingMibModule=rsXx9AirCoolingMibModule)
