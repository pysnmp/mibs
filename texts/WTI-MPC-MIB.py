#
# PySNMP MIB module WTI-MPC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/wti/WTI-MPC-MIB
# Produced by pysmi-1.1.12 at Fri Nov 22 16:03:57 2024
# On host fv-az1205-935 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter64, Gauge32, MibIdentifier, Bits, NotificationType, Unsigned32, enterprises, ObjectIdentity, TimeTicks, ModuleIdentity, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter64", "Gauge32", "MibIdentifier", "Bits", "NotificationType", "Unsigned32", "enterprises", "ObjectIdentity", "TimeTicks", "ModuleIdentity", "iso")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
westernTelematic = MibIdentifier((1, 3, 6, 1, 4, 1, 2634))
wti = ModuleIdentity((1, 3, 6, 1, 4, 1, 2634, 3))
wti.setRevisions(('2008-12-17 15:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wti.setRevisionsDescriptions(('V3.00 for the MPC 1.60',))
if mibBuilder.loadTexts: wti.setLastUpdated('200812171530Z')
if mibBuilder.loadTexts: wti.setOrganization('Western Telematic, Inc.')
if mibBuilder.loadTexts: wti.setContactInfo('Western Telematic, Inc.\n\t\t5 Sterling\n\t\tIrvine, Ca 92618\n\t\tEmail: anthonyb@wti.com')
if mibBuilder.loadTexts: wti.setDescription('This is the MIB module for the MPC')
systemTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 100))
plugTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200), )
if mibBuilder.loadTexts: plugTable.setStatus('current')
if mibBuilder.loadTexts: plugTable.setDescription('A table of plugs.')
plugEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1), ).setIndexNames((0, "WTI-MPC-MIB", "plugIndex"))
if mibBuilder.loadTexts: plugEntry.setStatus('current')
if mibBuilder.loadTexts: plugEntry.setDescription('Row definition for the plug table.')
plugIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 80)))
if mibBuilder.loadTexts: plugIndex.setStatus('current')
if mibBuilder.loadTexts: plugIndex.setDescription('Index for the plug table.')
plugID = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(9, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugID.setStatus('current')
if mibBuilder.loadTexts: plugID.setDescription('The ID of the plug.')
plugStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugStatus.setStatus('current')
if mibBuilder.loadTexts: plugStatus.setDescription('Plug status')
plugAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugAction.setStatus('current')
if mibBuilder.loadTexts: plugAction.setDescription('Plug action')
plugName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 200, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugName.setStatus('current')
if mibBuilder.loadTexts: plugName.setDescription('The Name of the plug.')
plugGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300), )
if mibBuilder.loadTexts: plugGroupTable.setStatus('current')
if mibBuilder.loadTexts: plugGroupTable.setDescription('A table of plug groups.')
plugGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1), ).setIndexNames((0, "WTI-MPC-MIB", "plugGroupIndex"))
if mibBuilder.loadTexts: plugGroupEntry.setStatus('current')
if mibBuilder.loadTexts: plugGroupEntry.setDescription('Row definition for the plug group table.')
plugGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 54)))
if mibBuilder.loadTexts: plugGroupIndex.setStatus('current')
if mibBuilder.loadTexts: plugGroupIndex.setDescription('Index for the plug group table.')
plugGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: plugGroupName.setStatus('current')
if mibBuilder.loadTexts: plugGroupName.setDescription('The name of the plug group.')
plugGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 300, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: plugGroupAction.setStatus('current')
if mibBuilder.loadTexts: plugGroupAction.setDescription('Plug group action')
userTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400), )
if mibBuilder.loadTexts: userTable.setStatus('current')
if mibBuilder.loadTexts: userTable.setDescription('A table of users.')
userEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1), ).setIndexNames((0, "WTI-MPC-MIB", "userIndex"))
if mibBuilder.loadTexts: userEntry.setStatus('current')
if mibBuilder.loadTexts: userEntry.setDescription('Row definition for the user table.')
userIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128)))
if mibBuilder.loadTexts: userIndex.setStatus('current')
if mibBuilder.loadTexts: userIndex.setDescription('Index for the user table.')
userName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription('The name of the user.')
userPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPasswd.setStatus('current')
if mibBuilder.loadTexts: userPasswd.setDescription('The password of the user.')
userAccessLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAccessLevel.setStatus('current')
if mibBuilder.loadTexts: userAccessLevel.setDescription('Users access level')
userPortAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userPortAccess.setStatus('current')
if mibBuilder.loadTexts: userPortAccess.setDescription('Access to ports.')
userLocalAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userLocalAccess.setStatus('current')
if mibBuilder.loadTexts: userLocalAccess.setDescription('Access to LOCAL plugs.')
userAux1Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux1Access.setStatus('current')
if mibBuilder.loadTexts: userAux1Access.setDescription('Access to AUX1 plugs.')
userAux2Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux2Access.setStatus('current')
if mibBuilder.loadTexts: userAux2Access.setDescription('Access to AUX2 plugs.')
userAux3Access = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAux3Access.setStatus('current')
if mibBuilder.loadTexts: userAux3Access.setDescription('Access to AUX3 plugs.')
userGroupAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 54))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userGroupAccess.setStatus('current')
if mibBuilder.loadTexts: userGroupAccess.setDescription('Access to plug groups.')
userSerialAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSerialAccess.setStatus('current')
if mibBuilder.loadTexts: userSerialAccess.setDescription('Access to serial interface.')
userTelnetSshAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userTelnetSshAccess.setStatus('current')
if mibBuilder.loadTexts: userTelnetSshAccess.setDescription('Access to Telnet/SSH interface.')
userWebAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userWebAccess.setStatus('current')
if mibBuilder.loadTexts: userWebAccess.setDescription('Access to web interface.')
userCurrentPowerMetering = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCurrentPowerMetering.setStatus('current')
if mibBuilder.loadTexts: userCurrentPowerMetering.setDescription('Access to Current/Power Metering.')
userCallbackNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userCallbackNum.setStatus('current')
if mibBuilder.loadTexts: userCallbackNum.setDescription('Callback number.')
userSubmit = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 100, 400, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userSubmit.setStatus('current')
if mibBuilder.loadTexts: userSubmit.setDescription('Submit changes to user.')
environmentTables = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 200))
environmentUnitTable = MibTable((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10), )
if mibBuilder.loadTexts: environmentUnitTable.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTable.setDescription('A table of environment status for units.')
environmentUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1), ).setIndexNames((0, "WTI-MPC-MIB", "environmentUnitIndex"))
if mibBuilder.loadTexts: environmentUnitEntry.setStatus('current')
if mibBuilder.loadTexts: environmentUnitEntry.setDescription('Row definition for the environment unit table.')
environmentUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3)))
if mibBuilder.loadTexts: environmentUnitIndex.setStatus('current')
if mibBuilder.loadTexts: environmentUnitIndex.setDescription('Index for the environment unit table.')
environmentUnitName = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitName.setStatus('current')
if mibBuilder.loadTexts: environmentUnitName.setDescription('The name of the unit.')
environmentUnitTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitTemperature.setStatus('current')
if mibBuilder.loadTexts: environmentUnitTemperature.setDescription('The name of the unit.')
environmentUnitCurrentA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentA.setDescription('The number of amps in branch A for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageA.setDescription('The voltage of branch A for unit.')
environmentUnitPowerA = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerA.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerA.setDescription('The number of watts used by branch A for unit.')
environmentUnitCurrentB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentB.setDescription('The number of amps in branch B for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageB.setDescription('The voltage of branch B for unit.')
environmentUnitPowerB = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerB.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerB.setDescription('The number of watts used by branch b for unit.')
environmentUnitCurrentC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentC.setDescription('The number of amps in branch C for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageC.setDescription('The voltage of branch C for unit.')
environmentUnitPowerC = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerC.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerC.setDescription('The number of watts used by branch c for unit.')
environmentUnitCurrentD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitCurrentD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitCurrentD.setDescription('The number of amps in branch D for unit (In tenths of amps, divide by 10 for value in amps).')
environmentUnitVoltageD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitVoltageD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitVoltageD.setDescription('The voltage of branch D for unit.')
environmentUnitPowerD = MibTableColumn((1, 3, 6, 1, 4, 1, 2634, 3, 200, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentUnitPowerD.setStatus('current')
if mibBuilder.loadTexts: environmentUnitPowerD.setDescription('The number of watts used by branch d for unit.')
environmentBranchATotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchATotalCurrent.setDescription('Total Current on BRANCH A (In tenths of amps, divide by 10 for value in amps).')
environmentBranchATotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchATotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchATotalPower.setDescription('Total Power on BRANCH A.')
environmentBranchBTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchBTotalCurrent.setDescription('Total Current on BRANCH B (In tenths of amps, divide by 10 for value in amps).')
environmentBranchBTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchBTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchBTotalPower.setDescription('Total Power on BRANCH B.')
environmentBranchCTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchCTotalCurrent.setDescription('Total Current on BRANCH C (In tenths of amps, divide by 10 for value in amps).')
environmentBranchCTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchCTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchCTotalPower.setDescription('Total Power on BRANCH C.')
environmentBranchDTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentBranchDTotalCurrent.setDescription('Total Current on BRANCH D (In tenths of amps, divide by 10 for value in amps).')
environmentBranchDTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentBranchDTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentBranchDTotalPower.setDescription('Total Power on BRANCH D.')
environmentSystemTotalCurrent = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalCurrent.setStatus('current')
if mibBuilder.loadTexts: environmentSystemTotalCurrent.setDescription('Total current for system  (In tenths of amps, divide by 10 for value in amps).')
environmentSystemTotalPower = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentSystemTotalPower.setStatus('current')
if mibBuilder.loadTexts: environmentSystemTotalPower.setDescription('Total power on system.')
environmentMonthlyPowerLog = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 200, 80), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: environmentMonthlyPowerLog.setStatus('current')
if mibBuilder.loadTexts: environmentMonthlyPowerLog.setDescription('The monthly power usage log')
wtiTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300))
trapInfo = MibScalar((1, 3, 6, 1, 4, 1, 2634, 3, 300, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trapInfo.setStatus('current')
if mibBuilder.loadTexts: trapInfo.setDescription('Alarm information')
testTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2))
testTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 2) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: testTrap.setDescription('A test trap')
overCurrentInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4))
overCurrentInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialSetTrap.setDescription('Over Current Initial Alarm')
overCurrentInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 4) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentInitialClearTrap.setDescription('Over Current Initial Alarm (Clear)')
overCurrentCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5))
overCurrentCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalSetTrap.setDescription('Over Current Critical Alarm')
overCurrentCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 5) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overCurrentCriticalClearTrap.setDescription('Over Current Critical Alarm (Clear)')
overTemperatureInitialTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6))
overTemperatureInitialSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialSetTrap.setDescription('Over Temperature Initial Alarm')
overTemperatureInitialClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 6) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureInitialClearTrap.setDescription('Over Temperature Initial Alarm (Clear)')
overTemperatureCriticalTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7))
overTemperatureCriticalSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalSetTrap.setDescription('Over Temperature Critical Alarm')
overTemperatureCriticalClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 7) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: overTemperatureCriticalClearTrap.setDescription('Over Temperature Critical Alarm (Clear)')
circuitBreakerOpenTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8))
circuitBreakerOpenSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenSetTrap.setDescription('Circuit Breaker Open Alarm')
circuitBreakerOpenClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 8) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: circuitBreakerOpenClearTrap.setDescription('Circuit Breaker Open Alarm (Clear)')
lostCommTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9))
lostCommSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommSetTrap.setDescription('Lost Communication with AUX Unit')
lostCommClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 9) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostCommClearTrap.setDescription('Lost Communication with AUX Unit (Clear)')
lostVoltageTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10))
lostVoltageSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostVoltageSetTrap.setDescription('Lost Voltage (Line In)')
lostVoltageClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 10) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lostVoltageClearTrap.setDescription('Lost Voltage (Line In) (Clear)')
pingNoAnswerTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11))
pingNoAnswerSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerSetTrap.setDescription('Ping No Answer')
pingNoAnswerClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 11) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: pingNoAnswerClearTrap.setDescription('Ping No Answer (Clear)')
lockoutTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12))
lockoutSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutSetTrap.setDescription('Invalid Access Lockout')
lockoutClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 12) + (0,2)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: lockoutClearTrap.setDescription('Invalid Access Lockout (Clear)')
powercycleTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13))
powercycleSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 2634, 3, 300, 13) + (0,1)).setObjects(("WTI-MPC-MIB", "trapInfo"))
if mibBuilder.loadTexts: powercycleSetTrap.setDescription('Power Cycle')
mibBuilder.exportSymbols("WTI-MPC-MIB", userAux1Access=userAux1Access, plugID=plugID, environmentBranchDTotalPower=environmentBranchDTotalPower, environmentUnitPowerB=environmentUnitPowerB, environmentUnitCurrentB=environmentUnitCurrentB, testTraps=testTraps, plugGroupEntry=plugGroupEntry, plugAction=plugAction, pingNoAnswerSetTrap=pingNoAnswerSetTrap, plugIndex=plugIndex, userName=userName, wti=wti, pingNoAnswerClearTrap=pingNoAnswerClearTrap, environmentUnitPowerC=environmentUnitPowerC, overCurrentCriticalTraps=overCurrentCriticalTraps, environmentUnitCurrentA=environmentUnitCurrentA, userEntry=userEntry, lockoutSetTrap=lockoutSetTrap, plugGroupAction=plugGroupAction, environmentBranchDTotalCurrent=environmentBranchDTotalCurrent, environmentUnitName=environmentUnitName, plugName=plugName, userTelnetSshAccess=userTelnetSshAccess, environmentUnitTemperature=environmentUnitTemperature, userGroupAccess=userGroupAccess, environmentSystemTotalCurrent=environmentSystemTotalCurrent, lockoutTraps=lockoutTraps, environmentUnitVoltageB=environmentUnitVoltageB, plugEntry=plugEntry, environmentUnitVoltageD=environmentUnitVoltageD, userIndex=userIndex, lostVoltageTraps=lostVoltageTraps, userAccessLevel=userAccessLevel, overCurrentInitialClearTrap=overCurrentInitialClearTrap, environmentUnitIndex=environmentUnitIndex, environmentUnitPowerD=environmentUnitPowerD, overCurrentCriticalClearTrap=overCurrentCriticalClearTrap, userWebAccess=userWebAccess, environmentBranchATotalPower=environmentBranchATotalPower, powercycleSetTrap=powercycleSetTrap, userAux3Access=userAux3Access, lockoutClearTrap=lockoutClearTrap, PYSNMP_MODULE_ID=wti, westernTelematic=westernTelematic, userTable=userTable, testTrap=testTrap, environmentBranchCTotalCurrent=environmentBranchCTotalCurrent, userPasswd=userPasswd, plugStatus=plugStatus, overTemperatureInitialSetTrap=overTemperatureInitialSetTrap, lostVoltageSetTrap=lostVoltageSetTrap, environmentUnitEntry=environmentUnitEntry, userSubmit=userSubmit, userCallbackNum=userCallbackNum, userPortAccess=userPortAccess, environmentBranchBTotalPower=environmentBranchBTotalPower, circuitBreakerOpenTraps=circuitBreakerOpenTraps, environmentBranchCTotalPower=environmentBranchCTotalPower, userAux2Access=userAux2Access, userLocalAccess=userLocalAccess, environmentUnitVoltageC=environmentUnitVoltageC, environmentUnitPowerA=environmentUnitPowerA, environmentUnitCurrentC=environmentUnitCurrentC, circuitBreakerOpenClearTrap=circuitBreakerOpenClearTrap, plugGroupTable=plugGroupTable, environmentBranchBTotalCurrent=environmentBranchBTotalCurrent, environmentMonthlyPowerLog=environmentMonthlyPowerLog, circuitBreakerOpenSetTrap=circuitBreakerOpenSetTrap, environmentSystemTotalPower=environmentSystemTotalPower, overCurrentInitialTraps=overCurrentInitialTraps, userSerialAccess=userSerialAccess, plugGroupIndex=plugGroupIndex, systemTables=systemTables, lostCommSetTrap=lostCommSetTrap, lostCommTraps=lostCommTraps, plugTable=plugTable, trapInfo=trapInfo, environmentUnitCurrentD=environmentUnitCurrentD, powercycleTraps=powercycleTraps, environmentTables=environmentTables, overTemperatureInitialClearTrap=overTemperatureInitialClearTrap, overTemperatureCriticalTraps=overTemperatureCriticalTraps, userCurrentPowerMetering=userCurrentPowerMetering, wtiTraps=wtiTraps, overTemperatureInitialTraps=overTemperatureInitialTraps, overTemperatureCriticalSetTrap=overTemperatureCriticalSetTrap, overCurrentInitialSetTrap=overCurrentInitialSetTrap, environmentUnitTable=environmentUnitTable, overCurrentCriticalSetTrap=overCurrentCriticalSetTrap, lostVoltageClearTrap=lostVoltageClearTrap, pingNoAnswerTraps=pingNoAnswerTraps, environmentUnitVoltageA=environmentUnitVoltageA, plugGroupName=plugGroupName, overTemperatureCriticalClearTrap=overTemperatureCriticalClearTrap, environmentBranchATotalCurrent=environmentBranchATotalCurrent, lostCommClearTrap=lostCommClearTrap)
