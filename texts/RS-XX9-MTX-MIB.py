#
# PySNMP MIB module RS-XX9-MTX-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/rs/RS-XX9-MTX-MIB
# Produced by pysmi-1.1.12 at Tue Dec  3 12:20:38 2024
# On host fv-az573-178 platform Linux version 6.5.0-1025-azure by user runner
# Using Python version 3.10.15 (main, Sep  9 2024, 03:02:45) [GCC 11.4.0]
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint")
commonNotificationAlarmClass, = mibBuilder.importSymbols("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass")
rsXx9MTx, rsXx9MibModule = mibBuilder.importSymbols("RS-XX9-SMI-MIB", "rsXx9MTx", "rsXx9MibModule")
NotificationState, SwitchOnOff, NotificationMask, IndexTransmitter, NotificationPriority, Trigger = mibBuilder.importSymbols("RS-XX9-TC-MIB", "NotificationState", "SwitchOnOff", "NotificationMask", "IndexTransmitter", "NotificationPriority", "Trigger")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, Bits, Integer32, Counter32, NotificationType, ModuleIdentity, iso, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Unsigned32, IpAddress, MibIdentifier, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Bits", "Integer32", "Counter32", "NotificationType", "ModuleIdentity", "iso", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rsXx9MtxMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 2566, 149, 1, 216, 4))
rsXx9MtxMibModule.setRevisions(('2016-03-03 11:00', '2016-02-03 09:00', '2015-10-20 12:00', '2014-12-22 16:00', '2014-10-07 14:00', '2014-03-03 16:00', '2014-02-06 14:00', '2012-10-04 08:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rsXx9MtxMibModule.setRevisionsDescriptions(('update description of np1AutoSwitchoverGuardTime \n                ', 'add mtxBackupTx and notifications: mtxBackupTxSummary, mtxBackupTxReady, mtxBackupTxLink, mtxBackupTxRfSwitch, mtxBackupTxSwitchedOver', 'added np1AutoWhenTxBLocal \n                added np1AutoProgramRf, np1AutomaticReserveRf', 'updated description texts\n                ', 'extend range of np1AutoProgramPreset with unknownPreset(0)\n                ', 'added np1AutoReset\n                added mtxMultiTx subtree', 'initial release\n                updated description texts', 'Preliminary release.',))
if mibBuilder.loadTexts: rsXx9MtxMibModule.setLastUpdated('201603031100Z')
if mibBuilder.loadTexts: rsXx9MtxMibModule.setOrganization('Rohde&Schwarz GmbH & Co. KG')
if mibBuilder.loadTexts: rsXx9MtxMibModule.setContactInfo('Rohde & Schwarz GmbH & Co. KG\n                Broadcasting Division\n                \n                Muehldorfstrasse 15\n                81671 Munich\n                Germany\n                \n                customersupport@rohde-schwarz.com')
if mibBuilder.loadTexts: rsXx9MtxMibModule.setDescription('This MIB defines system control specific objects of\n                XX9000 transmitting systems from Rohde & Schwarz.\n                \n                Use this MIB for Multi-TX or N+1 system control.\n                \n                The following MIBs are related to this:\n                - RS-COMMON-MIB         - mandatory for this MIB.\n                - RS-XX9-TC-MIB         - mandatory for this MIB.\n                - RS-XX9-SMI-MIB        - mandatory for this MIB.')
rsXx9MtxNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0))
mtxNp1AutomaticSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 1)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticSummary.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticSummary.setDescription('N+1 automatic summary state.\n                \n                Possible values:\n                off(2)\n                fault(3)\n                warning(4)\n                ok(5)\n                \n                Notification class: warning')
mtxNp1AutomaticReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 2)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticReady.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticReady.setDescription('Indicates whether the n+1 automatic is ready. It shows not ready if a \n                changeover occurs and no higher priorized programs are available.\n                \n                Possible values:\n                off(2) - not ready\n                ok(5)  - ready\n                \n                Notification class: warning')
mtxNp1AutomaticRfSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 3)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticRfSwitch.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticRfSwitch.setDescription('Indicates a fault if in the event of a switchover one of \n                the RF switches could not be turned correctly or if \n                one of the jumpers has not been positioned correctly \n                on the patch panel (if used).\n                \n                Possible values:\n                off(2)   - RF switch ok\n                fault(3) - RF switch faulty\n                \n                Notification class: warning')
mtxNp1AutomaticInputChannel = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 4)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticInputChannel.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticInputChannel.setDescription('Indicates whether the TS distributor has directed the \n                correct transport stream to the input of transmitter B.\n                \n                Possible values:\n                off(2)   - input to TxB is ok\n                fault(3) - TS distributor fails to deliver input to TxB\n                \n                Notification class: warning')
mtxNp1AutomaticChangeOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 5)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticChangeOver.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticChangeOver.setDescription('\n                Possible values:\n                off(2)     - \n                warning(4) - a changeover to TxB occured\n                \n                Notification class: warning')
mtxLocal = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 6)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxLocal.setStatus('current')
if mibBuilder.loadTexts: mtxLocal.setDescription('local/remote state of system control.\n                \n                Possible values:\n                off(2)   - remote\n                ok(5)    - local\n                \n                Notification class: info')
mtxNp1AutomaticProgramRf = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 7)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxNp1AutomaticProgramRf.setStatus('current')
if mibBuilder.loadTexts: mtxNp1AutomaticProgramRf.setDescription('indicates a warning/fault if RF power  of program transmitter falls below \n                the adjusted warning/fault limit. \n                ')
mtxMultiTxSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 100)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxMultiTxSummary.setStatus('current')
if mibBuilder.loadTexts: mtxMultiTxSummary.setDescription('Description.')
mtxMultiTxRfSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 101)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if mibBuilder.loadTexts: mtxMultiTxRfSwitch.setStatus('current')
if mibBuilder.loadTexts: mtxMultiTxRfSwitch.setDescription('Description.')
mtxBackupTxSummary = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 200)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"))
if mibBuilder.loadTexts: mtxBackupTxSummary.setStatus('current')
if mibBuilder.loadTexts: mtxBackupTxSummary.setDescription('Indicates the overall state of the automatic\n                \n                Possible values:\n                off(2) - the automatic is switched off\n                fault(3) - the automatic cannot operate, e.g. the rf-switch is not connected\n                warning(4) - the automatic signals a warning, e.g. the automatic has switched over\n                ok(5)    - the automatic is on and operational\n                 \n                ')
mtxBackupTxReady = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 201)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"))
if mibBuilder.loadTexts: mtxBackupTxReady.setStatus('current')
if mibBuilder.loadTexts: mtxBackupTxReady.setDescription('Indicates whether the automatic is able to switch to the \n                inactive transmitter in case of a fault of the active one.\n                \n                Possible values:\n                off(2) - not ready\n                ok(5)    - ready\n                 ')
mtxBackupTxLink = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 202)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"))
if mibBuilder.loadTexts: mtxBackupTxLink.setStatus('current')
if mibBuilder.loadTexts: mtxBackupTxLink.setDescription('Indicates, if an ethernet-connection between txA and txB exists. \n                If the connection fails and the automatic is enabled, the reserve \n                transmitter is switched to the antenna. \n                \n                Possible values:\n                warning(4)   - \n                ok(5)    - \n                ')
mtxBackupTxRfSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 203)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"))
if mibBuilder.loadTexts: mtxBackupTxRfSwitch.setStatus('current')
if mibBuilder.loadTexts: mtxBackupTxRfSwitch.setDescription('Indicates if the rf-switch is ready. \n                \n                Possible values:\n                undefined(1) - no electrical connection between automatic and rf-switch\n                fault(3)   - \n                ok(5)    - \n                ')
mtxBackupTxSwitchedOver = NotificationType((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 0, 204)).setObjects(("RS-XX9-COMMON-MIB", "commonNotificationAlarmClass"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"))
if mibBuilder.loadTexts: mtxBackupTxSwitchedOver.setStatus('current')
if mibBuilder.loadTexts: mtxBackupTxSwitchedOver.setDescription('Indicates if the current switch position defers from the preselected switch position. \n                \n                possible values:\n                off(2) - switch position is the same as the preselected switch position\n                warning(4) - switch position defers from the preselected switch position. \n                \n                ')
rsXx9MtxObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1))
mtxNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1), )
if mibBuilder.loadTexts: mtxNotificationTable.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationTable.setDescription('Objects from the mtxNotificationTable.')
mtxNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "mtxNotificationIdx"))
if mibBuilder.loadTexts: mtxNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationEntry.setDescription('An entry in the mtxNotificationTable.')
mtxNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 6), ValueRangeConstraint(100, 101), )))
if mibBuilder.loadTexts: mtxNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationIdx.setDescription('The notification number as below rsXx9MtxNotifications.\n                This is a helper column and therefore not-accessible.\n                ')
mtxNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 100, 101))).clone(namedValues=NamedValues(("mtxNp1AutomaticSummary", 1), ("mtxNp1AutomaticReady", 2), ("mtxNp1AutomaticRfSwitch", 3), ("mtxNp1AutomaticInputChannel", 4), ("mtxNp1AutomaticChangeOver", 5), ("mtxLocal", 6), ("mtxMultiTxSummary", 100), ("mtxMultiTxRfSwitch", 101)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxNotificationName.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9MtxNotifications.\n                ')
mtxNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1, 3), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtxNotificationMask.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationMask.setDescription('See textual convention for details.')
mtxNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1, 4), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mtxNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationPriority.setDescription('See textual convention for details.')
mtxNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 1, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mtxNotificationState.setStatus('current')
if mibBuilder.loadTexts: mtxNotificationState.setDescription('See textual convention for details.')
mtxSystemControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 2))
mtxNplus1 = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3))
nplus1AutomaticStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1))
np1AutomaticLoadedTx = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("txA1", 1), ("txA2", 2), ("txA3", 3), ("txA4", 4), ("txA5", 5), ("txA6", 6), ("txA7", 7), ("txA8", 8), ("none", 9), ("undefined", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutomaticLoadedTx.setStatus('current')
if mibBuilder.loadTexts: np1AutomaticLoadedTx.setDescription('If a switchover operation has taken place, shows which \n                program of an A transmitter the B transmitter has taken over.\n                ')
np1AutomaticReserveRf = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 2), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutomaticReserveRf.setStatus('current')
if mibBuilder.loadTexts: np1AutomaticReserveRf.setDescription('indicates a warning/fault if RF power of reserve transmitter falls below \n                the adjusted warning/fault limit. \n                ')
np1AutoSwitchesTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 100), )
if mibBuilder.loadTexts: np1AutoSwitchesTable.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchesTable.setDescription('Table with data about RfSwitches in an nplus1 system. ')
np1AutoSwitchesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 100, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "np1AutoSwitchIdx"))
if mibBuilder.loadTexts: np1AutoSwitchesEntry.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchesEntry.setDescription('An entry in the np1AutoSwitchesTable.')
np1AutoSwitchIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 100, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoSwitchIdx.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchIdx.setDescription('Description.')
np1AutoSwitchPos = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 1, 100, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("pos1", 1), ("pos2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoSwitchPos.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchPos.setDescription('The position of the rfSwitch.\n                Usually, SwitchX is responsible for switching between antenna\n                and dummyload for TransmitterX.\n                Usually, pos1(1) means, that the transmitter is switched to antenna\n                and pos2(2) means, that the transmitter is switched to dummyload. \n                ')
nplus1AutomaticConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2))
np1AutomaticOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 1), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutomaticOperationMode.setStatus('current')
if mibBuilder.loadTexts: np1AutomaticOperationMode.setDescription('Activates the n+1 automatic function. \n                If the n+1 automatic function is on(1), \n                a fault within an A transmitter causes \n                a switchover and the program of the \n                A transmitter is taken over by the \n                standby B transmitter.\n                ')
np1AutoSwitchoverGuardTime = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoSwitchoverGuardTime.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchoverGuardTime.setDescription('Checkout time which must pass before a \n                program transmitter with sum fault is replaced \n                by the standby transmitter. \n                A long Guard Time suppresses \n                switchover operations caused by brief faults, \n                but also reduces the availability of the program. \n                A guard time less than two seconds might lead \n                to an unnecessary switchover in case of a \n                phase break of amplifiers.\n                ')
np1AutoSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("severalTimes", 1), ("singleShot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoSwitchMode.setStatus('current')
if mibBuilder.loadTexts: np1AutoSwitchMode.setDescription('Defines the switching behavior of the N+1 automatic function. \n                \n                severalTimes(1) - Following a switchover operation, the system can \n                  switch back to the A transmitter automatically when the A transmitter \n                  no longer signals a fault but the B transmitter indicates a fault. \n                \n                singleShot(2)   - Switchover of an A transmitter to the B transmitter can \n                  occur once only.\n                ')
np1AutoProgramPreset = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknownPreset", 0), ("txA1", 1), ("txA2", 2), ("txA3", 3), ("txA4", 4), ("txA5", 5), ("txA6", 6), ("txA7", 7), ("txA8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramPreset.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramPreset.setDescription('Loads the program-specific settings of an A transmitter to the B transmitter.\n                \n                unknownPreset(0) can not be commanded.\n                ')
np1AutoInputPreset = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("channel1", 1), ("channel2", 2), ("channel3", 3), ("channel4", 4), ("channel5", 5), ("channel6", 6), ("channel7", 7), ("channel8", 8), ("channel9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoInputPreset.setStatus('current')
if mibBuilder.loadTexts: np1AutoInputPreset.setDescription('Determines the preconfigured transport stream for TX-B\n                via the TS distributor.')
np1AutoPriorityEnable = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 7), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoPriorityEnable.setStatus('current')
if mibBuilder.loadTexts: np1AutoPriorityEnable.setDescription('Activaes the priority-controlled n+1 switchover function. \n                If priority control is active, a further switchover of a program \n                with higher priority can take place following the switchover \n                of a low-priority program. In this case, the low-priority \n                program is switched back to its defective A transmitter.')
np1AutoToLoad = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 8), IndexTransmitter()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoToLoad.setStatus('current')
if mibBuilder.loadTexts: np1AutoToLoad.setDescription('Performs a manual switchover.')
np1AutoReserveOperationMode = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 9), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoReserveOperationMode.setStatus('current')
if mibBuilder.loadTexts: np1AutoReserveOperationMode.setDescription('Switches reserve transmitter on or off.')
np1AutoProgramTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10), )
if mibBuilder.loadTexts: np1AutoProgramTable.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramTable.setDescription('Program specific configuration.')
np1AutoProgramEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "np1AutoProgramIdx"))
if mibBuilder.loadTexts: np1AutoProgramEntry.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramEntry.setDescription('An entry in the np1AutoProgramTable.')
np1AutoProgramIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: np1AutoProgramIdx.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramIdx.setDescription('Program index - coincides with TxA index.')
np1AutoProgramOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramOperationMode.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramOperationMode.setDescription('Switches program transmitter on or off.')
np1AutoProgramPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramPriority.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramPriority.setDescription('Priority of the respective program. \n                1 is the highest priority and 8 is the lowest priority. \n                The specified program number corresponds to the \n                number of the A transmitter assigned in each case.')
np1AutoProgramChangeover = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1, 4), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramChangeover.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramChangeover.setDescription('Used to activate the N+1 automatic function individually for \n                each A transmitter. This setting can be used to remove \n                A transmitters from the N+1 automatic function. \n                The same effect can be achieved by configuring the \n                respective A transmitter for local operation.\n                ')
np1AutoProgramRf = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 10, 1, 5), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoProgramRf.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramRf.setDescription('indicates a warning/fault if RF power  of program transmitter falls below \n                the adjusted warning/fault limit. \n                ')
np1AutoReset = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 11), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoReset.setStatus('current')
if mibBuilder.loadTexts: np1AutoReset.setDescription('Description.')
np1AutoWhenTxBLocal = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("automaticAvailable", 1), ("automaticNotAvailable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoWhenTxBLocal.setStatus('current')
if mibBuilder.loadTexts: np1AutoWhenTxBLocal.setDescription('TxB and n+1 automatic control are located in the same device and share one \n                local/remote button. \n                By default the n+1 automatic shall be disabled when TxB is set to local operation. \n                To test the n+1 automatic using the local display the n+1 automatic can be activated \n                even in local operation mode.\n                \n                ')
np1AutoProgramNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3), )
if mibBuilder.loadTexts: np1AutoProgramNotificationTable.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationTable.setDescription('The context information/configuration for the program status notifications.\n                ')
np1AutoProgramNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "np1AutoProgramNotificationProgramIdx"), (0, "RS-XX9-MTX-MIB", "np1AutoProgramNotificationIdx"))
if mibBuilder.loadTexts: np1AutoProgramNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationEntry.setDescription('An entry in the np1AutoProgramNotificationTable')
np1AutoProgramNotificationProgramIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoProgramNotificationProgramIdx.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationProgramIdx.setDescription('Description.')
np1AutoProgramNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(7, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoProgramNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationIdx.setDescription('The notification number as below rsXx9nplus1AutomaticProgramNotifications.\n                This is a helper column and therefore not-accessible.\n                ')
np1AutoProgramNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7))).clone(namedValues=NamedValues(("mtxNp1AutomaticProgramRf", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoProgramNotificationName.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9MtxNotifications.\n                ')
np1AutoProgramNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramNotificationMask.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationMask.setDescription('See textual convention for details.')
np1AutoProgramNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: np1AutoProgramNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationPriority.setDescription('See textual convention for details.')
np1AutoProgramNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 3, 3, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: np1AutoProgramNotificationState.setStatus('current')
if mibBuilder.loadTexts: np1AutoProgramNotificationState.setDescription('See textual convention for details.')
mtxMultiTx = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4))
multiTxTransmitterTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1), )
if mibBuilder.loadTexts: multiTxTransmitterTable.setStatus('current')
if mibBuilder.loadTexts: multiTxTransmitterTable.setDescription('Description.')
multiTxTransmitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "multiTxTxIdx"))
if mibBuilder.loadTexts: multiTxTransmitterEntry.setStatus('current')
if mibBuilder.loadTexts: multiTxTransmitterEntry.setDescription('An entry in the multiTxTransmitterTable.')
multiTxTxIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1, 1, 1), IndexTransmitter())
if mibBuilder.loadTexts: multiTxTxIdx.setStatus('current')
if mibBuilder.loadTexts: multiTxTxIdx.setDescription('Description.')
multiTxLoadedOrAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("antenna", 2), ("load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiTxLoadedOrAntenna.setStatus('current')
if mibBuilder.loadTexts: multiTxLoadedOrAntenna.setDescription('Description.')
multiTxToLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1, 1, 3), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiTxToLoad.setStatus('current')
if mibBuilder.loadTexts: multiTxToLoad.setDescription('Description.')
multiTxToAntenna = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 1, 1, 4), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiTxToAntenna.setStatus('current')
if mibBuilder.loadTexts: multiTxToAntenna.setDescription('Description.')
multiTxConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 2))
multiTxReset = MibScalar((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 4, 2, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: multiTxReset.setStatus('current')
if mibBuilder.loadTexts: multiTxReset.setDescription('Description.')
mtxBackupTx = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5))
btxAutoNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1), )
if mibBuilder.loadTexts: btxAutoNotificationTable.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationTable.setDescription('Objects from the btxNotificationTable.')
btxAutoNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "btxAutoNotificationAutomaticIdx"), (0, "RS-XX9-MTX-MIB", "btxAutoNotificationIdx"))
if mibBuilder.loadTexts: btxAutoNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationEntry.setDescription('An entry in the btxAutoNotificationTable.')
btxAutoNotificationAutomaticIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: btxAutoNotificationAutomaticIdx.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationAutomaticIdx.setDescription('enumerates over all backupTx automatics.')
btxAutoNotificationIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 204)))
if mibBuilder.loadTexts: btxAutoNotificationIdx.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationIdx.setDescription('The notification number as below rsXx9MtxNotifications.\n                This is a helper column and therefore not-accessible.\n                ')
btxAutoNotificationName = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(200, 201, 202, 203, 204))).clone(namedValues=NamedValues(("mtxBackupTxSummary", 200), ("mtxBackupTxReady", 201), ("mtxBackupTxLink", 202), ("mtxBackupTxRfSwitch", 203), ("mtxBackupTxSwitchedOver", 204)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btxAutoNotificationName.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationName.setDescription('The notification number as an enumeration.\n                The enumeration correlates with the notifications under rsXx9MtxNotifications.\n                ')
btxAutoNotificationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 4), NotificationMask()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoNotificationMask.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationMask.setDescription('See textual convention for details.')
btxAutoNotificationPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 5), NotificationPriority()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoNotificationPriority.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationPriority.setDescription('See textual convention for details.')
btxAutoNotificationState = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 1, 1, 6), NotificationState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: btxAutoNotificationState.setStatus('current')
if mibBuilder.loadTexts: btxAutoNotificationState.setDescription('See textual convention for details.')
btxAutoStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 2), )
if mibBuilder.loadTexts: btxAutoStatusTable.setStatus('current')
if mibBuilder.loadTexts: btxAutoStatusTable.setDescription('The status of a backupTx automatic.\n                ')
btxAutoStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 2, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "btxAutoNotificationAutomaticIdx"))
if mibBuilder.loadTexts: btxAutoStatusEntry.setStatus('current')
if mibBuilder.loadTexts: btxAutoStatusEntry.setDescription('An entry in the btxAutoStatusTable.')
btxAutoStActiveTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("undefined", 1), ("txA", 2), ("txB", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: btxAutoStActiveTx.setStatus('current')
if mibBuilder.loadTexts: btxAutoStActiveTx.setDescription('Indicates which transmitter is connected to the antenna via the rf-switch.\n                ')
btxAutoConfigurationTable = MibTable((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3), )
if mibBuilder.loadTexts: btxAutoConfigurationTable.setStatus('current')
if mibBuilder.loadTexts: btxAutoConfigurationTable.setDescription('The configuration of a backupTx automatic.\n                ')
btxAutoConfigurationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1), ).setIndexNames((0, "RS-XX9-MTX-MIB", "btxAutoNotificationAutomaticIdx"))
if mibBuilder.loadTexts: btxAutoConfigurationEntry.setStatus('current')
if mibBuilder.loadTexts: btxAutoConfigurationEntry.setDescription('An entry in the btxAutoConfigurationTable.')
btxAutoCfgReset = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1, 1), Trigger()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoCfgReset.setStatus('current')
if mibBuilder.loadTexts: btxAutoCfgReset.setDescription('Description.')
btxAutoCfgOperationMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1, 2), SwitchOnOff()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoCfgOperationMode.setStatus('current')
if mibBuilder.loadTexts: btxAutoCfgOperationMode.setDescription('Indicates if the Backup Tx automatic is enabled.\n                If the automatic is enabled, a switchover to a reserve transmitter \n                occurs after a configurable guard time, as soon as the preselected \n                transmitter signals a fault. \n                ')
btxAutoCfgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("multipleShot", 1), ("singleShot", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoCfgMode.setStatus('current')
if mibBuilder.loadTexts: btxAutoCfgMode.setDescription('Indicates how the automatic behaves, when the reserve \n                transmitter signals a fault. \n                \n                - multipleShot(1)\n                  after a switch over to the reserve transmitter has happened, \n                  a switch over to the preselected transmitter happens, if the \n                  preselected transmitter signales no fault. A manual operator \n                  action is not necessary. \n                - singleShot(2): \n                  after a switch over to the reserve transmitter has happened, \n                  the reserve transmit stays active even if the reserve transmitter\n                   signals a fault and the preselected transmitter could work \n                  without faults. A manual operator action is necessary to \n                  re-enable the automatic. \n                \n                ')
btxAutoCfgGuardTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setUnits('s').setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoCfgGuardTime.setStatus('current')
if mibBuilder.loadTexts: btxAutoCfgGuardTime.setDescription('Indicates how long no a switchover shall be delayed after detecting a fault. \n                By increasing the guard time, switch overs caused by short temporary faults can be avoided. \n                ')
btxAutoCfgPreselectTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 1, 5, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("txA", 2), ("txB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: btxAutoCfgPreselectTx.setStatus('current')
if mibBuilder.loadTexts: btxAutoCfgPreselectTx.setDescription('Indicates, which transmitter should be primarily used to transmit a program. ')
rsXx9MtxConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2))
rsXx9MtxCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 1))
mtxSystemControlCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 1, 1)).setObjects(("RS-XX9-MTX-MIB", "mtxNotifySystemControl"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxSystemControlCompliance = mtxSystemControlCompliance.setStatus('current')
if mibBuilder.loadTexts: mtxSystemControlCompliance.setDescription('The compliance statement for XX9000 MTX control.')
mtxNplus1Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 1, 2)).setObjects(("RS-XX9-MTX-MIB", "mtxObjsNplus1"), ("RS-XX9-MTX-MIB", "mtxNotifyNplus1"), ("RS-XX9-MTX-MIB", "mtxObjsNotificationTable"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNplus1Compliance = mtxNplus1Compliance.setStatus('current')
if mibBuilder.loadTexts: mtxNplus1Compliance.setDescription('The compliance statement for XX9000 N+1 control.')
rsXx9MtxGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2))
mtxObjsNotificationTable = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 1)).setObjects(("RS-XX9-MTX-MIB", "mtxNotificationName"), ("RS-XX9-MTX-MIB", "mtxNotificationMask"), ("RS-XX9-MTX-MIB", "mtxNotificationPriority"), ("RS-XX9-MTX-MIB", "mtxNotificationState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObjsNotificationTable = mtxObjsNotificationTable.setStatus('current')
if mibBuilder.loadTexts: mtxObjsNotificationTable.setDescription('common objects for systems.')
mtxObjsNplus1 = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 2)).setObjects(("RS-XX9-MTX-MIB", "np1AutoPriorityEnable"), ("RS-XX9-MTX-MIB", "np1AutoSwitchoverGuardTime"), ("RS-XX9-MTX-MIB", "np1AutoProgramPreset"), ("RS-XX9-MTX-MIB", "np1AutoInputPreset"), ("RS-XX9-MTX-MIB", "np1AutoProgramOperationMode"), ("RS-XX9-MTX-MIB", "np1AutoProgramPriority"), ("RS-XX9-MTX-MIB", "np1AutoProgramChangeover"), ("RS-XX9-MTX-MIB", "np1AutoToLoad"), ("RS-XX9-MTX-MIB", "np1AutoReset"), ("RS-XX9-MTX-MIB", "np1AutoWhenTxBLocal"), ("RS-XX9-MTX-MIB", "np1AutomaticReserveRf"), ("RS-XX9-MTX-MIB", "np1AutoProgramRf"), ("RS-XX9-MTX-MIB", "np1AutoSwitchPos"), ("RS-XX9-MTX-MIB", "np1AutoSwitchIdx"), ("RS-XX9-MTX-MIB", "np1AutoSwitchMode"), ("RS-XX9-MTX-MIB", "np1AutomaticLoadedTx"), ("RS-XX9-MTX-MIB", "np1AutomaticOperationMode"), ("RS-XX9-MTX-MIB", "np1AutoReserveOperationMode"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationState"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationPriority"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationMask"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationName"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationIdx"), ("RS-XX9-MTX-MIB", "np1AutoProgramNotificationProgramIdx"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObjsNplus1 = mtxObjsNplus1.setStatus('current')
if mibBuilder.loadTexts: mtxObjsNplus1.setDescription('All N+1 objects.')
mtxNotifyNplus1 = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 3)).setObjects(("RS-XX9-MTX-MIB", "mtxNp1AutomaticProgramRf"), ("RS-XX9-MTX-MIB", "mtxNp1AutomaticReady"), ("RS-XX9-MTX-MIB", "mtxNp1AutomaticSummary"), ("RS-XX9-MTX-MIB", "mtxNp1AutomaticRfSwitch"), ("RS-XX9-MTX-MIB", "mtxNp1AutomaticInputChannel"), ("RS-XX9-MTX-MIB", "mtxNp1AutomaticChangeOver"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNotifyNplus1 = mtxNotifyNplus1.setStatus('current')
if mibBuilder.loadTexts: mtxNotifyNplus1.setDescription('All N+1 notifications.')
mtxNotifySystemControl = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 4)).setObjects(("RS-XX9-MTX-MIB", "mtxLocal"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNotifySystemControl = mtxNotifySystemControl.setStatus('current')
if mibBuilder.loadTexts: mtxNotifySystemControl.setDescription('All MTX notifications.')
mtxObsMultiTx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 100)).setObjects(("RS-XX9-MTX-MIB", "multiTxReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObsMultiTx = mtxObsMultiTx.setStatus('current')
if mibBuilder.loadTexts: mtxObsMultiTx.setDescription('multiTx objects.')
mtxObjsMultiTxDummyLoads = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 101)).setObjects(("RS-XX9-MTX-MIB", "multiTxLoadedOrAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObjsMultiTxDummyLoads = mtxObjsMultiTxDummyLoads.setStatus('current')
if mibBuilder.loadTexts: mtxObjsMultiTxDummyLoads.setDescription('multiTx with dummyLoads objects.')
mtxObjsMultiTxDummyLoadSwitches = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 102)).setObjects(("RS-XX9-MTX-MIB", "multiTxToLoad"), ("RS-XX9-MTX-MIB", "multiTxToAntenna"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObjsMultiTxDummyLoadSwitches = mtxObjsMultiTxDummyLoadSwitches.setStatus('current')
if mibBuilder.loadTexts: mtxObjsMultiTxDummyLoadSwitches.setDescription('objects for switches of multiTx with dummyloads.')
mtxNotifyMultiTx = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 150)).setObjects(("RS-XX9-MTX-MIB", "mtxMultiTxSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNotifyMultiTx = mtxNotifyMultiTx.setStatus('current')
if mibBuilder.loadTexts: mtxNotifyMultiTx.setDescription('multiTx notifications.')
mtxNotifyMultiTxSwitches = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 151)).setObjects(("RS-XX9-MTX-MIB", "mtxMultiTxRfSwitch"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNotifyMultiTxSwitches = mtxNotifyMultiTxSwitches.setStatus('current')
if mibBuilder.loadTexts: mtxNotifyMultiTxSwitches.setDescription('switches of multiTx notifications.')
mtxObjsBackupTx = ObjectGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 152)).setObjects(("RS-XX9-MTX-MIB", "btxAutoNotificationName"), ("RS-XX9-MTX-MIB", "btxAutoNotificationMask"), ("RS-XX9-MTX-MIB", "btxAutoNotificationPriority"), ("RS-XX9-MTX-MIB", "btxAutoNotificationState"), ("RS-XX9-MTX-MIB", "btxAutoStActiveTx"), ("RS-XX9-MTX-MIB", "btxAutoCfgOperationMode"), ("RS-XX9-MTX-MIB", "btxAutoCfgMode"), ("RS-XX9-MTX-MIB", "btxAutoCfgGuardTime"), ("RS-XX9-MTX-MIB", "btxAutoCfgPreselectTx"), ("RS-XX9-MTX-MIB", "btxAutoCfgReset"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxObjsBackupTx = mtxObjsBackupTx.setStatus('current')
if mibBuilder.loadTexts: mtxObjsBackupTx.setDescription('backupTx objects.')
mtxNotifyBackupTx = NotificationGroup((1, 3, 6, 1, 4, 1, 2566, 127, 1, 2, 216, 4, 2, 2, 153)).setObjects(("RS-XX9-MTX-MIB", "mtxBackupTxSummary"), ("RS-XX9-MTX-MIB", "mtxBackupTxLink"), ("RS-XX9-MTX-MIB", "mtxBackupTxSwitchedOver"), ("RS-XX9-MTX-MIB", "mtxBackupTxRfSwitch"), ("RS-XX9-MTX-MIB", "mtxBackupTxReady"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mtxNotifyBackupTx = mtxNotifyBackupTx.setStatus('current')
if mibBuilder.loadTexts: mtxNotifyBackupTx.setDescription('backupTx notifications.')
mibBuilder.exportSymbols("RS-XX9-MTX-MIB", np1AutoProgramEntry=np1AutoProgramEntry, mtxObsMultiTx=mtxObsMultiTx, mtxMultiTxRfSwitch=mtxMultiTxRfSwitch, rsXx9MtxConformance=rsXx9MtxConformance, np1AutoReserveOperationMode=np1AutoReserveOperationMode, mtxNotifyMultiTxSwitches=mtxNotifyMultiTxSwitches, np1AutoPriorityEnable=np1AutoPriorityEnable, np1AutoProgramIdx=np1AutoProgramIdx, btxAutoNotificationEntry=btxAutoNotificationEntry, btxAutoNotificationState=btxAutoNotificationState, mtxNotificationName=mtxNotificationName, PYSNMP_MODULE_ID=rsXx9MtxMibModule, btxAutoNotificationMask=btxAutoNotificationMask, mtxBackupTxSwitchedOver=mtxBackupTxSwitchedOver, mtxNp1AutomaticChangeOver=mtxNp1AutomaticChangeOver, multiTxTransmitterEntry=multiTxTransmitterEntry, btxAutoNotificationName=btxAutoNotificationName, np1AutoProgramNotificationMask=np1AutoProgramNotificationMask, btxAutoNotificationPriority=btxAutoNotificationPriority, np1AutomaticLoadedTx=np1AutomaticLoadedTx, mtxNotifyMultiTx=mtxNotifyMultiTx, np1AutoSwitchIdx=np1AutoSwitchIdx, btxAutoConfigurationTable=btxAutoConfigurationTable, rsXx9MtxGroups=rsXx9MtxGroups, rsXx9MtxCompliances=rsXx9MtxCompliances, mtxMultiTxSummary=mtxMultiTxSummary, nplus1AutomaticStatus=nplus1AutomaticStatus, np1AutoProgramChangeover=np1AutoProgramChangeover, btxAutoStActiveTx=btxAutoStActiveTx, np1AutoProgramNotificationPriority=np1AutoProgramNotificationPriority, np1AutoProgramOperationMode=np1AutoProgramOperationMode, rsXx9MtxObjects=rsXx9MtxObjects, btxAutoNotificationIdx=btxAutoNotificationIdx, np1AutoSwitchMode=np1AutoSwitchMode, mtxNp1AutomaticProgramRf=mtxNp1AutomaticProgramRf, np1AutoInputPreset=np1AutoInputPreset, btxAutoConfigurationEntry=btxAutoConfigurationEntry, mtxMultiTx=mtxMultiTx, np1AutoProgramTable=np1AutoProgramTable, np1AutoSwitchesTable=np1AutoSwitchesTable, btxAutoNotificationAutomaticIdx=btxAutoNotificationAutomaticIdx, mtxLocal=mtxLocal, multiTxLoadedOrAntenna=multiTxLoadedOrAntenna, np1AutoProgramNotificationState=np1AutoProgramNotificationState, btxAutoCfgPreselectTx=btxAutoCfgPreselectTx, mtxNplus1Compliance=mtxNplus1Compliance, mtxNotificationMask=mtxNotificationMask, mtxNp1AutomaticRfSwitch=mtxNp1AutomaticRfSwitch, mtxBackupTx=mtxBackupTx, btxAutoStatusTable=btxAutoStatusTable, btxAutoCfgMode=btxAutoCfgMode, mtxNotifySystemControl=mtxNotifySystemControl, mtxObjsMultiTxDummyLoads=mtxObjsMultiTxDummyLoads, btxAutoCfgOperationMode=btxAutoCfgOperationMode, mtxObjsNotificationTable=mtxObjsNotificationTable, np1AutoProgramRf=np1AutoProgramRf, btxAutoStatusEntry=btxAutoStatusEntry, btxAutoCfgGuardTime=btxAutoCfgGuardTime, np1AutoSwitchesEntry=np1AutoSwitchesEntry, np1AutoProgramNotificationIdx=np1AutoProgramNotificationIdx, rsXx9MtxNotifications=rsXx9MtxNotifications, np1AutomaticReserveRf=np1AutomaticReserveRf, np1AutoProgramNotificationProgramIdx=np1AutoProgramNotificationProgramIdx, mtxNplus1=mtxNplus1, np1AutoToLoad=np1AutoToLoad, btxAutoNotificationTable=btxAutoNotificationTable, np1AutoProgramNotificationEntry=np1AutoProgramNotificationEntry, np1AutoProgramPriority=np1AutoProgramPriority, mtxObjsBackupTx=mtxObjsBackupTx, np1AutoReset=np1AutoReset, mtxBackupTxReady=mtxBackupTxReady, np1AutoProgramNotificationName=np1AutoProgramNotificationName, mtxNotificationIdx=mtxNotificationIdx, mtxObjsMultiTxDummyLoadSwitches=mtxObjsMultiTxDummyLoadSwitches, mtxNp1AutomaticInputChannel=mtxNp1AutomaticInputChannel, multiTxTxIdx=multiTxTxIdx, np1AutoProgramPreset=np1AutoProgramPreset, multiTxConfiguration=multiTxConfiguration, np1AutoSwitchoverGuardTime=np1AutoSwitchoverGuardTime, multiTxToLoad=multiTxToLoad, nplus1AutomaticConfiguration=nplus1AutomaticConfiguration, mtxSystemControl=mtxSystemControl, mtxNotifyNplus1=mtxNotifyNplus1, mtxBackupTxSummary=mtxBackupTxSummary, rsXx9MtxMibModule=rsXx9MtxMibModule, mtxNotificationState=mtxNotificationState, multiTxToAntenna=multiTxToAntenna, np1AutoSwitchPos=np1AutoSwitchPos, mtxObjsNplus1=mtxObjsNplus1, np1AutoWhenTxBLocal=np1AutoWhenTxBLocal, np1AutomaticOperationMode=np1AutomaticOperationMode, mtxNotificationEntry=mtxNotificationEntry, mtxSystemControlCompliance=mtxSystemControlCompliance, multiTxTransmitterTable=multiTxTransmitterTable, np1AutoProgramNotificationTable=np1AutoProgramNotificationTable, mtxBackupTxLink=mtxBackupTxLink, mtxNotificationPriority=mtxNotificationPriority, mtxBackupTxRfSwitch=mtxBackupTxRfSwitch, mtxNotificationTable=mtxNotificationTable, btxAutoCfgReset=btxAutoCfgReset, multiTxReset=multiTxReset, mtxNp1AutomaticSummary=mtxNp1AutomaticSummary, mtxNotifyBackupTx=mtxNotifyBackupTx, mtxNp1AutomaticReady=mtxNp1AutomaticReady)
