#
# PySNMP MIB module WISI-GTSENSORS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///home/runner/work/mibs/mibs/src/vendor/wisi/WISI-GTSENSORS-MIB
# Produced by pysmi-1.1.12 at Fri Jul 19 10:08:01 2024
# On host fv-az1251-884 platform Linux version 6.5.0-1023-azure by user runner
# Using Python version 3.10.14 (main, Jun 20 2024, 15:20:03) [GCC 11.4.0]
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Counter32, iso, MibIdentifier, Gauge32, IpAddress, Bits, NotificationType, ModuleIdentity, Counter64, Integer32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "iso", "MibIdentifier", "Gauge32", "IpAddress", "Bits", "NotificationType", "ModuleIdentity", "Counter64", "Integer32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gtModule, = mibBuilder.importSymbols("WISI-GTMODULES-MIB", "gtModule")
gtUnit, = mibBuilder.importSymbols("WISI-TANGRAM-MIB", "gtUnit")
gtSensorsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3))
gtSensorsMIB.setRevisions(('2016-09-08 00:00', '2013-07-01 14:00', '2013-06-27 14:00', '2013-06-26 14:00', '2012-12-12 13:20', '2011-12-15 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gtSensorsMIB.setRevisionsDescriptions(('Made the fan control object read-only. Update contact\n\t\tinformation and module description.', 'Trap for PSU failure added.', 'Descriptions added.', 'Clear Traps added.', 'Updated contact details.', 'Initial version.',))
if mibBuilder.loadTexts: gtSensorsMIB.setLastUpdated('201609080000Z')
if mibBuilder.loadTexts: gtSensorsMIB.setOrganization('WISI Communications GmbH & Co. KG')
if mibBuilder.loadTexts: gtSensorsMIB.setContactInfo('https://wisiconnect.tv/')
if mibBuilder.loadTexts: gtSensorsMIB.setDescription('This MIB module represents the various sensors that are\n\t\tinstalled in a system or standalone unit, such as temperature\n\t\tsensors, power supply voltage/current measurements and fan RPM\n\t\tsensors.')
gtSensorsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0))
gtSensorsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1))
gtSensorsConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2))
gtSensorsCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 1))
gtSensorsGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2))
gtSensorsNotifyFanPlugin = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 1))
if mibBuilder.loadTexts: gtSensorsNotifyFanPlugin.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyFanPlugin.setDescription('The gtSensorsNotifyFanPlugin notification indicates that\n\t    a new fan unit has been plugged-in.')
gtSensorsNotifyFanPlugout = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 2))
if mibBuilder.loadTexts: gtSensorsNotifyFanPlugout.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyFanPlugout.setDescription('The gtSensorsNotifyFanPlugout notification indicates that\n\t    a fan unit has been plugged-out.')
gtSensorsNotifyPSUPlugin = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 3))
if mibBuilder.loadTexts: gtSensorsNotifyPSUPlugin.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUPlugin.setDescription('The gtSensorsNotifyPSUPlugin notification indicates that\n\t    a new PSU (Power Supply Unit) has been plugged-in.')
gtSensorsNotifyPSUPlugout = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 4))
if mibBuilder.loadTexts: gtSensorsNotifyPSUPlugout.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUPlugout.setDescription('The gtSensorsNotifyPSUPlugout notification indicates that\n\t    a PSU (Power Supply Unit) has been plugged-out.')
gtSensorsNotifyTemperature = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 5))
if mibBuilder.loadTexts: gtSensorsNotifyTemperature.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyTemperature.setDescription('The gtSensorsNotifyTemperature notification indicates that\n\t    temperature on GT11 board is above upper limit.')
gtSensorsNotifyFanSpeed = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 6))
if mibBuilder.loadTexts: gtSensorsNotifyFanSpeed.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyFanSpeed.setDescription('The gtSensorsNotifyFanSpeed notification indicates that\n\t    at least one of the fans RPM on fanbay is below lower limit.')
gtSensorsNotifyPSUCurrent = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 7))
if mibBuilder.loadTexts: gtSensorsNotifyPSUCurrent.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUCurrent.setDescription('The gtSensorsNotifyPSUCurrent notification indicates that\n\t    a PSU (Power Supply Unit) output current is out of range limit.')
gtSensorsNotifyPSUVoltage = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 8))
if mibBuilder.loadTexts: gtSensorsNotifyPSUVoltage.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUVoltage.setDescription('The gtSensorsNotifyPSUVoltage notification indicates that\n\t    a PSU (Power Supply Unit) output voltage is out of range limit.')
gtSensorsNotifyPSUTemperature = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 9))
if mibBuilder.loadTexts: gtSensorsNotifyPSUTemperature.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUTemperature.setDescription('The gtSensorsNotifyPSUTemperature notification indicates that\n\t    a PSU (Power Supply Unit) temperature is above upper limit.')
gtSensorsNotifyPSUTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 10))
if mibBuilder.loadTexts: gtSensorsNotifyPSUTemperatureClear.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUTemperatureClear.setDescription('The gtSensorsNotifyPSUTempHighClear notification indicates that\n\t    a PSU (Power Supply Unit) temperature has decreased below upper limit.')
gtSensorsNotifyBOARDTemperatureClear = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 11))
if mibBuilder.loadTexts: gtSensorsNotifyBOARDTemperatureClear.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyBOARDTemperatureClear.setDescription('The gtSensorsNotifyBOARDTempHighClear notification indicates that\n\t    temperature on GT11 board has decreased below upper limit')
gtSensorsNotifyPSUFailure = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 12))
if mibBuilder.loadTexts: gtSensorsNotifyPSUFailure.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUFailure.setDescription('The gtSensorsNotifyPSUFailure notification indicates that\n\t    a PSU (Power Supply Unit) internal voltage dropped below limit.')
gtSensorsNotifyPSUFailureClear = NotificationType((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 0, 13))
if mibBuilder.loadTexts: gtSensorsNotifyPSUFailureClear.setStatus('current')
if mibBuilder.loadTexts: gtSensorsNotifyPSUFailureClear.setDescription('The gtSensorsNotifyPSUFailureClear notification indicates that\n\t    a PSU (Power Supply Unit) internal voltage has increased above lower limit.')
gtNumTemps = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNumTemps.setStatus('current')
if mibBuilder.loadTexts: gtNumTemps.setDescription('The gtNumTemps entity represents the number of\n\t\ttemperature sensors within the GT01/GN50 rack unit.\n\t\tThe related entries are provided by gtTempsTable.')
gtTempsTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 2), )
if mibBuilder.loadTexts: gtTempsTable.setStatus('current')
if mibBuilder.loadTexts: gtTempsTable.setDescription('The gtTempsTable table contains a list of all\n\t\ttemperature sensors within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumTemps.')
gtTempsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 2, 1), ).setIndexNames((0, "WISI-GTMODULES-MIB", "gtModule"), (0, "WISI-GTSENSORS-MIB", "gtTemp"))
if mibBuilder.loadTexts: gtTempsEntry.setStatus('current')
if mibBuilder.loadTexts: gtTempsEntry.setDescription('The gtTempsEntry table entry represents a\n\t\ttemperature sensors within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumTemps.')
gtTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: gtTemp.setStatus('current')
if mibBuilder.loadTexts: gtTemp.setDescription('The gtTemp entity represents the numeric index of a\n\t\ttemperature sensors within the GT01/GN50 rack unit.')
gtTempName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTempName.setStatus('current')
if mibBuilder.loadTexts: gtTempName.setDescription('The gtTempName entity represents the symbolic name of a\n\t\ttemperature sensors within the GT01/GN50 rack unit.')
gtTempValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 195))).setUnits("'C").setMaxAccess("readonly")
if mibBuilder.loadTexts: gtTempValue.setStatus('current')
if mibBuilder.loadTexts: gtTempValue.setDescription('The gtTempValue entity represents the measured value of a\n\t\ttemperature sensors within the GT01/GN50 rack unit.')
gtNumFans = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNumFans.setStatus('current')
if mibBuilder.loadTexts: gtNumFans.setDescription('The gtNumFans entity represents the number of\n\t\tcooling fans within the GT01/GN50 rack unit.\n\t\tThe related entries are provided by gtFansTable.')
gtFansTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4), )
if mibBuilder.loadTexts: gtFansTable.setStatus('current')
if mibBuilder.loadTexts: gtFansTable.setDescription('The gtFansTable table contains a list of all\n\t\tcooling fans within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumFans.')
gtFansEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1), ).setIndexNames((0, "WISI-GTSENSORS-MIB", "gtFan"))
if mibBuilder.loadTexts: gtFansEntry.setStatus('current')
if mibBuilder.loadTexts: gtFansEntry.setDescription('The gtFansEntry table entry represents an\n\t\tcooling fan within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumFans.')
gtFan = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: gtFan.setStatus('current')
if mibBuilder.loadTexts: gtFan.setDescription('The gtFan entity represents the numeric index\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtFanName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtFanName.setStatus('current')
if mibBuilder.loadTexts: gtFanName.setDescription('The gtFanName entity represents the symbolic name\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtFanControl = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtFanControl.setStatus('current')
if mibBuilder.loadTexts: gtFanControl.setDescription('The gtFanControl entity represents the RPM setting\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtFanSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15000))).setUnits('rpm').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtFanSpeed.setStatus('current')
if mibBuilder.loadTexts: gtFanSpeed.setDescription('The gtFanSpeed entity represents the revolutions per minute\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtFanUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 5), Counter32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtFanUptime.setStatus('current')
if mibBuilder.loadTexts: gtFanUptime.setDescription('The gtFanUptime entity represents the current uptime\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtFanLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 4, 1, 6), Counter32()).setUnits('s').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtFanLifetime.setStatus('current')
if mibBuilder.loadTexts: gtFanLifetime.setDescription('The gtFanLifetime entity represents the accumulated lifetime\n\t\tof a cooling fan within the GT01/GN50 rack unit.')
gtNumPSUs = MibScalar((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtNumPSUs.setStatus('current')
if mibBuilder.loadTexts: gtNumPSUs.setDescription('The gtNumPSUs entity represents the number of\n\t\tpower supply units within the GT01/GN50 rack unit.\n\t\tThe related entries are provided by gtPSUsTable.')
gtPSUsTable = MibTable((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6), )
if mibBuilder.loadTexts: gtPSUsTable.setStatus('current')
if mibBuilder.loadTexts: gtPSUsTable.setDescription('The gtPSUsTable table contains a list of all\n\t\tpower supply units within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumPSUs.')
gtPSUsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1), ).setIndexNames((0, "WISI-GTSENSORS-MIB", "gtPSU"))
if mibBuilder.loadTexts: gtPSUsEntry.setStatus('current')
if mibBuilder.loadTexts: gtPSUsEntry.setDescription('The gtPSUsEntry table entry represents a\n\t\tpower supply unit within the GT01/GN50 rack unit.\n\t\tThe number of entries is provided by gtNumPSUs.')
gtPSU = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)))
if mibBuilder.loadTexts: gtPSU.setStatus('current')
if mibBuilder.loadTexts: gtPSU.setDescription('The gtPSU entity represents the numeric index\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUName = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUName.setStatus('current')
if mibBuilder.loadTexts: gtPSUName.setDescription('The gtPSUName entity represents the symbolic name\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUPower = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 300000))).setUnits('mW').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUPower.setStatus('current')
if mibBuilder.loadTexts: gtPSUPower.setDescription('The gtPSUPower entity represents the maximum output\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 25000))).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUCurrent.setStatus('current')
if mibBuilder.loadTexts: gtPSUCurrent.setDescription('The gtPSUCurrent entity represents the output current\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUVoltageInt = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUVoltageInt.setStatus('current')
if mibBuilder.loadTexts: gtPSUVoltageInt.setDescription('The gtPSUVoltageInt entity represents the internal voltage\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUVoltageOR = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUVoltageOR.setStatus('current')
if mibBuilder.loadTexts: gtPSUVoltageOR.setDescription('The gtPSUVoltageOR entity represents the OR voltage drop\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUVoltageExt = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setUnits('mV').setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUVoltageExt.setStatus('current')
if mibBuilder.loadTexts: gtPSUVoltageExt.setDescription('The gtPSUVoltageExt entity represents the external voltage\n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtPSUTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-60, 195))).setUnits("'C").setMaxAccess("readonly")
if mibBuilder.loadTexts: gtPSUTemperature.setStatus('current')
if mibBuilder.loadTexts: gtPSUTemperature.setDescription('The gtPSUTemperature entity represents the temperature \n\t\tof a power supply unit within the GT01/GN50 rack unit.')
gtSensorsMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 1, 1)).setObjects(("WISI-GTSENSORS-MIB", "gtSensorsV1Group"), ("WISI-GTSENSORS-MIB", "gtSensorsSystemGroup"), ("WISI-GTSENSORS-MIB", "gtSensorsStatsGroup"), ("WISI-GTSENSORS-MIB", "gtSensorsTrapGroup"), ("WISI-GTSENSORS-MIB", "gtSensorsSetGroup"), ("WISI-GTSENSORS-MIB", "gtSensorsBasicNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsMIBCompliance = gtSensorsMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: gtSensorsMIBCompliance.setDescription('The compliance statement for GTSENSORSv2 entities\n\t\twhich implement the GTSENSORSv2 MIB.')
gtSensorsV1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 1)).setObjects(("WISI-GTSENSORS-MIB", "gtTempName"), ("WISI-GTSENSORS-MIB", "gtTempValue"), ("WISI-GTSENSORS-MIB", "gtFanName"), ("WISI-GTSENSORS-MIB", "gtFanControl"), ("WISI-GTSENSORS-MIB", "gtFanSpeed"), ("WISI-GTSENSORS-MIB", "gtPSUName"), ("WISI-GTSENSORS-MIB", "gtPSUPower"), ("WISI-GTSENSORS-MIB", "gtPSUCurrent"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageInt"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageOR"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageExt"), ("WISI-GTSENSORS-MIB", "gtPSUTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsV1Group = gtSensorsV1Group.setStatus('current')
if mibBuilder.loadTexts: gtSensorsV1Group.setDescription('The gtSensorsV1Group group is mandatory only for those\n\t\tGTSENSORSv2 entities which also implement GTSENSORSv1.')
gtSensorsSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 2)).setObjects(("WISI-GTSENSORS-MIB", "gtTempName"), ("WISI-GTSENSORS-MIB", "gtTempValue"), ("WISI-GTSENSORS-MIB", "gtFanName"), ("WISI-GTSENSORS-MIB", "gtFanSpeed"), ("WISI-GTSENSORS-MIB", "gtPSUName"), ("WISI-GTSENSORS-MIB", "gtPSUPower"), ("WISI-GTSENSORS-MIB", "gtPSUCurrent"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageInt"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageOR"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageExt"), ("WISI-GTSENSORS-MIB", "gtPSUTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsSystemGroup = gtSensorsSystemGroup.setStatus('current')
if mibBuilder.loadTexts: gtSensorsSystemGroup.setDescription('The gtSensorsSystemGroup group defines GTSENSORSv2 entities\n\t\twhich are mandatory.')
gtSensorsStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 3)).setObjects(("WISI-GTSENSORS-MIB", "gtNumTemps"), ("WISI-GTSENSORS-MIB", "gtNumFans"), ("WISI-GTSENSORS-MIB", "gtFanUptime"), ("WISI-GTSENSORS-MIB", "gtFanLifetime"), ("WISI-GTSENSORS-MIB", "gtNumPSUs"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsStatsGroup = gtSensorsStatsGroup.setStatus('current')
if mibBuilder.loadTexts: gtSensorsStatsGroup.setDescription('The gtSensorsStatsGroup group defines GTSENSORSv2 entities\n\t\twhich provide statistical information.')
gtSensorsTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 4)).setObjects(("WISI-GTSENSORS-MIB", "gtTempValue"), ("WISI-GTSENSORS-MIB", "gtFanControl"), ("WISI-GTSENSORS-MIB", "gtFanSpeed"), ("WISI-GTSENSORS-MIB", "gtPSUCurrent"), ("WISI-GTSENSORS-MIB", "gtPSUVoltageInt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsTrapGroup = gtSensorsTrapGroup.setStatus('current')
if mibBuilder.loadTexts: gtSensorsTrapGroup.setDescription('The gtSensorsTrapGroup group defines GTSENSORSv2 trap objects\n\t\twhich are mandatory.')
gtSensorsSetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 5)).setObjects(("WISI-GTSENSORS-MIB", "gtFanControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsSetGroup = gtSensorsSetGroup.setStatus('current')
if mibBuilder.loadTexts: gtSensorsSetGroup.setDescription('The gtSensorsSetGroup group defines GTSENSORSv2 entities\n\t\twhich can be set the manager.')
gtSensorsBasicNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7465, 20, 2, 9, 1, 3, 2, 2, 6)).setObjects(("WISI-GTSENSORS-MIB", "gtSensorsNotifyFanPlugin"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyFanPlugout"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyPSUPlugin"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyPSUPlugout"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyTemperature"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyFanSpeed"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyPSUCurrent"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyPSUVoltage"), ("WISI-GTSENSORS-MIB", "gtSensorsNotifyPSUTemperature"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    gtSensorsBasicNotificationsGroup = gtSensorsBasicNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: gtSensorsBasicNotificationsGroup.setDescription('The gtSensorsBasicNotificationsGroup group defines\n\t\tGTSENSORSv2 notification objects which are mandatory.')
mibBuilder.exportSymbols("WISI-GTSENSORS-MIB", gtSensorsNotifyBOARDTemperatureClear=gtSensorsNotifyBOARDTemperatureClear, gtSensorsNotifyPSUFailureClear=gtSensorsNotifyPSUFailureClear, gtSensorsNotifyPSUCurrent=gtSensorsNotifyPSUCurrent, gtNumPSUs=gtNumPSUs, gtSensorsConformance=gtSensorsConformance, gtTemp=gtTemp, gtPSUsTable=gtPSUsTable, gtSensorsNotifications=gtSensorsNotifications, gtSensorsStatsGroup=gtSensorsStatsGroup, gtPSU=gtPSU, gtSensorsMIB=gtSensorsMIB, gtPSUVoltageOR=gtPSUVoltageOR, gtSensorsSystemGroup=gtSensorsSystemGroup, gtSensorsGroups=gtSensorsGroups, gtSensorsBasicNotificationsGroup=gtSensorsBasicNotificationsGroup, gtSensorsNotifyPSUPlugout=gtSensorsNotifyPSUPlugout, gtPSUPower=gtPSUPower, gtPSUVoltageInt=gtPSUVoltageInt, gtNumTemps=gtNumTemps, gtPSUTemperature=gtPSUTemperature, gtSensorsNotifyPSUPlugin=gtSensorsNotifyPSUPlugin, gtFansTable=gtFansTable, gtTempsEntry=gtTempsEntry, gtNumFans=gtNumFans, gtSensorsNotifyPSUVoltage=gtSensorsNotifyPSUVoltage, gtSensorsNotifyFanSpeed=gtSensorsNotifyFanSpeed, gtSensorsNotifyPSUFailure=gtSensorsNotifyPSUFailure, gtFanSpeed=gtFanSpeed, gtSensorsCompliances=gtSensorsCompliances, PYSNMP_MODULE_ID=gtSensorsMIB, gtSensorsV1Group=gtSensorsV1Group, gtPSUCurrent=gtPSUCurrent, gtFansEntry=gtFansEntry, gtSensorsNotifyFanPlugout=gtSensorsNotifyFanPlugout, gtPSUVoltageExt=gtPSUVoltageExt, gtFanUptime=gtFanUptime, gtSensorsObjects=gtSensorsObjects, gtFan=gtFan, gtTempsTable=gtTempsTable, gtFanLifetime=gtFanLifetime, gtSensorsNotifyPSUTemperature=gtSensorsNotifyPSUTemperature, gtFanName=gtFanName, gtPSUsEntry=gtPSUsEntry, gtTempName=gtTempName, gtSensorsMIBCompliance=gtSensorsMIBCompliance, gtTempValue=gtTempValue, gtSensorsTrapGroup=gtSensorsTrapGroup, gtSensorsNotifyFanPlugin=gtSensorsNotifyFanPlugin, gtSensorsNotifyPSUTemperatureClear=gtSensorsNotifyPSUTemperatureClear, gtFanControl=gtFanControl, gtSensorsNotifyTemperature=gtSensorsNotifyTemperature, gtPSUName=gtPSUName, gtSensorsSetGroup=gtSensorsSetGroup)
